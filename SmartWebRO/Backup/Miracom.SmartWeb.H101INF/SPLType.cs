/*******************************************************************************
' SPLType.cs
'
' Copyright (c) 2007 by Miracom,Inc.
' All rights reserved.
'
' Generated by DevTool XMLGen 1.0
'
' Created at 2008-05-21 14:02:20
'
' Author : Miracom. R&D.
' Description : DevTool Xml Generator Version 1.0
'******************************************************************************/

using System;
using com.miracom.transceiverx.message.former;

namespace Miracom.SmartWeb
{
    public class SPL_View_Lot_List_In_Tag
    {
        public string  h_passport;
        public char    h_language;
        public string  h_factory;
        public string  h_user_id;
        public string  h_password;
        public char    h_proc_step;
        public string  mat_id;
        public int     mat_ver;
        public string  flow;
        public string  oper;
        public string  next_lot_id;
    }

    public class SPL_View_Lot_List_Out_Tag_lot_list
    {
        public string  lot_id;
        public string  lot_desc;
        public string  mat_id;
        public int     mat_ver;
        public string  flow;
        public int     flow_seq_num;
        public string  oper;
        public double  qty_1;
        public double  qty_2;
        public double  qty_3;
        public char    lot_type;
        public string  owner_code;
        public string  create_code;
        public char    lot_priority;
        public string  lot_status;
        public char    hold_flag;
        public string  hold_code;
        public string  hold_prv_grp_id;
        public char    inv_flag;
        public char    transit_flag;
        public char    rwk_flag;
        public string  rwk_code;
        public char    nstd_flag;
        public char    rep_flag;
        public char    start_flag;
        public string  start_res_id;
        public char    end_flag;
        public string  end_res_id;
        public string  ship_code;
        public string  ship_time;
        public string  org_due_time;
        public string  sch_due_time;
    }

    public class SPL_View_Lot_List_Out_Tag
    {
        public char    h_status_value;
        public string  h_msg_code;
        public string  h_msg;
        public string  h_field_msg;
        public string  h_db_err_msg;
        public int     count;
        public string  next_lot_id;
        public int     _size_lot_list;
        public SPL_View_Lot_List_Out_Tag_lot_list[] lot_list;
    }

    public class SPL_View_Lot_List0_In_Tag
    {
        public string  h_passport;
        public char    h_language;
        public string  h_factory;
        public string  h_user_id;
        public string  h_password;
        public char    h_proc_step;
        public string  mat_id;
        public int     mat_ver;
        public string  flow;
        public string  oper;
        public string  next_lot_id;
    }

    public class SPL_View_Lot_List0_Out_Tag_lot_list
    {
        public string  lot_id;
    }

    public class SPL_View_Lot_List0_Out_Tag
    {
        public char    h_status_value;
        public string  h_msg_code;
        public string  h_msg;
        public string  h_field_msg;
        public string  h_db_err_msg;
        public int     count;
        public string  next_lot_id;
        public int     _size_lot_list;
        public SPL_View_Lot_List0_Out_Tag_lot_list[] lot_list;
    }


    public class SPLType: h101type
    {
        public SPLType()
        {
        }

        public static void serialize_SPL_View_Lot_List_In_Tag(StreamTransformer former, SPL_View_Lot_List_In_Tag target)
        {
            former.writeMsgString(withoutSpace(target.h_passport));
            former.writeMsgChar(target.h_language);
            former.writeMsgString(withoutSpace(target.h_factory));
            former.writeMsgString(withoutSpace(target.h_user_id));
            former.writeMsgString(withoutSpace(target.h_password));
            former.writeMsgChar(target.h_proc_step);
            former.writeMsgString(withoutSpace(target.mat_id));
            former.writeMsgInt(target.mat_ver);
            former.writeMsgString(withoutSpace(target.flow));
            former.writeMsgString(withoutSpace(target.oper));
            former.writeMsgString(withoutSpace(target.next_lot_id));
        }

        public static void transform_SPL_View_Lot_List_In_Tag(StreamTransformer former, ref SPL_View_Lot_List_In_Tag source)
        {
            source.h_passport = deleteNull(former.readMsgString());
            source.h_language = former.readMsgChar();
            source.h_factory = deleteNull(former.readMsgString());
            source.h_user_id = deleteNull(former.readMsgString());
            source.h_password = deleteNull(former.readMsgString());
            source.h_proc_step = former.readMsgChar();
            source.mat_id = deleteNull(former.readMsgString());
            source.mat_ver = former.readMsgInt();
            source.flow = deleteNull(former.readMsgString());
            source.oper = deleteNull(former.readMsgString());
            source.next_lot_id = deleteNull(former.readMsgString());
        }

        public static void serialize_SPL_View_Lot_List_Out_Tag_lot_list(StreamTransformer former, SPL_View_Lot_List_Out_Tag_lot_list target)
        {
            former.writeMsgString(withoutSpace(target.lot_id));
            former.writeMsgString(withoutSpace(target.lot_desc));
            former.writeMsgString(withoutSpace(target.mat_id));
            former.writeMsgInt(target.mat_ver);
            former.writeMsgString(withoutSpace(target.flow));
            former.writeMsgInt(target.flow_seq_num);
            former.writeMsgString(withoutSpace(target.oper));
            former.writeMsgDouble(target.qty_1);
            former.writeMsgDouble(target.qty_2);
            former.writeMsgDouble(target.qty_3);
            former.writeMsgChar(target.lot_type);
            former.writeMsgString(withoutSpace(target.owner_code));
            former.writeMsgString(withoutSpace(target.create_code));
            former.writeMsgChar(target.lot_priority);
            former.writeMsgString(withoutSpace(target.lot_status));
            former.writeMsgChar(target.hold_flag);
            former.writeMsgString(withoutSpace(target.hold_code));
            former.writeMsgString(withoutSpace(target.hold_prv_grp_id));
            former.writeMsgChar(target.inv_flag);
            former.writeMsgChar(target.transit_flag);
            former.writeMsgChar(target.rwk_flag);
            former.writeMsgString(withoutSpace(target.rwk_code));
            former.writeMsgChar(target.nstd_flag);
            former.writeMsgChar(target.rep_flag);
            former.writeMsgChar(target.start_flag);
            former.writeMsgString(withoutSpace(target.start_res_id));
            former.writeMsgChar(target.end_flag);
            former.writeMsgString(withoutSpace(target.end_res_id));
            former.writeMsgString(withoutSpace(target.ship_code));
            former.writeMsgString(withoutSpace(target.ship_time));
            former.writeMsgString(withoutSpace(target.org_due_time));
            former.writeMsgString(withoutSpace(target.sch_due_time));
        }

        public static void serialize_SPL_View_Lot_List_Out_Tag(StreamTransformer former, SPL_View_Lot_List_Out_Tag target)
        {
            former.writeMsgChar(target.h_status_value);
            former.writeMsgString(withoutSpace(target.h_msg_code));
            former.writeMsgString(withoutSpace(target.h_msg));
            former.writeMsgString(withoutSpace(target.h_field_msg));
            former.writeMsgString(withoutSpace(target.h_db_err_msg));
            former.writeMsgInt(target.count);
            former.writeMsgString(withoutSpace(target.next_lot_id));
            target._size_lot_list = (500 >= target._size_lot_list ? target._size_lot_list : 500);
            former.writeMsgInt(target._size_lot_list);
            for(int i = 0; i < target._size_lot_list; i++)
            {
                serialize_SPL_View_Lot_List_Out_Tag_lot_list(former, target.lot_list[i]);
            }
        }

        public static void transform_SPL_View_Lot_List_Out_Tag_lot_list(StreamTransformer former, ref SPL_View_Lot_List_Out_Tag_lot_list source)
        {
            source.lot_id = deleteNull(former.readMsgString());
            source.lot_desc = deleteNull(former.readMsgString());
            source.mat_id = deleteNull(former.readMsgString());
            source.mat_ver = former.readMsgInt();
            source.flow = deleteNull(former.readMsgString());
            source.flow_seq_num = former.readMsgInt();
            source.oper = deleteNull(former.readMsgString());
            source.qty_1 = former.readMsgDouble();
            source.qty_2 = former.readMsgDouble();
            source.qty_3 = former.readMsgDouble();
            source.lot_type = former.readMsgChar();
            source.owner_code = deleteNull(former.readMsgString());
            source.create_code = deleteNull(former.readMsgString());
            source.lot_priority = former.readMsgChar();
            source.lot_status = deleteNull(former.readMsgString());
            source.hold_flag = former.readMsgChar();
            source.hold_code = deleteNull(former.readMsgString());
            source.hold_prv_grp_id = deleteNull(former.readMsgString());
            source.inv_flag = former.readMsgChar();
            source.transit_flag = former.readMsgChar();
            source.rwk_flag = former.readMsgChar();
            source.rwk_code = deleteNull(former.readMsgString());
            source.nstd_flag = former.readMsgChar();
            source.rep_flag = former.readMsgChar();
            source.start_flag = former.readMsgChar();
            source.start_res_id = deleteNull(former.readMsgString());
            source.end_flag = former.readMsgChar();
            source.end_res_id = deleteNull(former.readMsgString());
            source.ship_code = deleteNull(former.readMsgString());
            source.ship_time = deleteNull(former.readMsgString());
            source.org_due_time = deleteNull(former.readMsgString());
            source.sch_due_time = deleteNull(former.readMsgString());
        }

        public static void transform_SPL_View_Lot_List_Out_Tag(StreamTransformer former, ref SPL_View_Lot_List_Out_Tag source)
        {
            source.h_status_value = former.readMsgChar();
            source.h_msg_code = deleteNull(former.readMsgString());
            source.h_msg = deleteNull(former.readMsgString());
            source.h_field_msg = deleteNull(former.readMsgString());
            source.h_db_err_msg = deleteNull(former.readMsgString());
            source.count = former.readMsgInt();
            source.next_lot_id = deleteNull(former.readMsgString());
            source._size_lot_list = former.readMsgInt();
            source.lot_list = new SPL_View_Lot_List_Out_Tag_lot_list[source._size_lot_list];
            for(int i = 0; i < source._size_lot_list; i++)
            {
                source.lot_list[i] = new SPL_View_Lot_List_Out_Tag_lot_list();
                transform_SPL_View_Lot_List_Out_Tag_lot_list(former, ref source.lot_list[i]);
            }
        }

        public static void serialize_SPL_View_Lot_List0_In_Tag(StreamTransformer former, SPL_View_Lot_List0_In_Tag target)
        {
            former.writeMsgString(withoutSpace(target.h_passport));
            former.writeMsgChar(target.h_language);
            former.writeMsgString(withoutSpace(target.h_factory));
            former.writeMsgString(withoutSpace(target.h_user_id));
            former.writeMsgString(withoutSpace(target.h_password));
            former.writeMsgChar(target.h_proc_step);
            former.writeMsgString(withoutSpace(target.mat_id));
            former.writeMsgInt(target.mat_ver);
            former.writeMsgString(withoutSpace(target.flow));
            former.writeMsgString(withoutSpace(target.oper));
            former.writeMsgString(withoutSpace(target.next_lot_id));
        }

        public static void transform_SPL_View_Lot_List0_In_Tag(StreamTransformer former, ref SPL_View_Lot_List0_In_Tag source)
        {
            source.h_passport = deleteNull(former.readMsgString());
            source.h_language = former.readMsgChar();
            source.h_factory = deleteNull(former.readMsgString());
            source.h_user_id = deleteNull(former.readMsgString());
            source.h_password = deleteNull(former.readMsgString());
            source.h_proc_step = former.readMsgChar();
            source.mat_id = deleteNull(former.readMsgString());
            source.mat_ver = former.readMsgInt();
            source.flow = deleteNull(former.readMsgString());
            source.oper = deleteNull(former.readMsgString());
            source.next_lot_id = deleteNull(former.readMsgString());
        }

        public static void serialize_SPL_View_Lot_List0_Out_Tag_lot_list(StreamTransformer former, SPL_View_Lot_List0_Out_Tag_lot_list target)
        {
            former.writeMsgString(withoutSpace(target.lot_id));
        }

        public static void serialize_SPL_View_Lot_List0_Out_Tag(StreamTransformer former, SPL_View_Lot_List0_Out_Tag target)
        {
            former.writeMsgChar(target.h_status_value);
            former.writeMsgString(withoutSpace(target.h_msg_code));
            former.writeMsgString(withoutSpace(target.h_msg));
            former.writeMsgString(withoutSpace(target.h_field_msg));
            former.writeMsgString(withoutSpace(target.h_db_err_msg));
            former.writeMsgInt(target.count);
            former.writeMsgString(withoutSpace(target.next_lot_id));
            target._size_lot_list = (500 >= target._size_lot_list ? target._size_lot_list : 500);
            former.writeMsgInt(target._size_lot_list);
            for(int i = 0; i < target._size_lot_list; i++)
            {
                serialize_SPL_View_Lot_List0_Out_Tag_lot_list(former, target.lot_list[i]);
            }
        }

        public static void transform_SPL_View_Lot_List0_Out_Tag_lot_list(StreamTransformer former, ref SPL_View_Lot_List0_Out_Tag_lot_list source)
        {
            source.lot_id = deleteNull(former.readMsgString());
        }

        public static void transform_SPL_View_Lot_List0_Out_Tag(StreamTransformer former, ref SPL_View_Lot_List0_Out_Tag source)
        {
            source.h_status_value = former.readMsgChar();
            source.h_msg_code = deleteNull(former.readMsgString());
            source.h_msg = deleteNull(former.readMsgString());
            source.h_field_msg = deleteNull(former.readMsgString());
            source.h_db_err_msg = deleteNull(former.readMsgString());
            source.count = former.readMsgInt();
            source.next_lot_id = deleteNull(former.readMsgString());
            source._size_lot_list = former.readMsgInt();
            source.lot_list = new SPL_View_Lot_List0_Out_Tag_lot_list[source._size_lot_list];
            for(int i = 0; i < source._size_lot_list; i++)
            {
                source.lot_list[i] = new SPL_View_Lot_List0_Out_Tag_lot_list();
                transform_SPL_View_Lot_List0_Out_Tag_lot_list(former, ref source.lot_list[i]);
            }
        }


    }
}

