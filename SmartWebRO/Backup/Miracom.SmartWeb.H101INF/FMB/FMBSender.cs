/*******************************************************************************
' FMBSender.cs
'
' Copyright (c) 2007 by Miracom,Inc.
' All rights reserved.
'
' Generated by DevTool XMLGen 1.0
'
' Created at 2008-05-28 10:43:57
'
' Author : Miracom. R&D.
' Description : DevTool Xml Generator Version 1.0
*******************************************************************************/

using System;
using Miracom.SmartWeb.FWX;
using com.miracom.transceiverx;
using com.miracom.transceiverx.message.former;

namespace Miracom.SmartWeb
{
    public class FMBSender
    {    
        private static string mFMBUrl;
        private static int mFMBTimeOut;

        public static string FMBUrl
        {
            get
            {
                return mFMBUrl;
            }
            set
            {
                mFMBUrl = value;
            }
        }

        public static int FMBTimeOut
        {
            get
            {
                return mFMBTimeOut;
            }
            set
            {
                mFMBTimeOut = value;
            }
        }
        public static bool FMB_View_Factory_List(FMB_View_Factory_List_In_Tag View_Factory_List_In, ref FMB_View_Factory_List_Out_Tag View_Factory_List_Out)
        {
            return FMB_View_Factory_List("FMB_View_Factory_List", View_Factory_List_In, ref View_Factory_List_Out);
        }
        public static bool FMB_View_Factory_List(string FunctionName, FMB_View_Factory_List_In_Tag View_Factory_List_In, ref FMB_View_Factory_List_Out_Tag View_Factory_List_Out)
        {
            try
            {
                if (null == FMBUrl || FMBUrl.Trim().Equals(""))
                        throw new Exception("INVALID_URL");

                if (0 >= FMBTimeOut)
                        throw new Exception("INVALID_TIMEOUT");

                string sReplyMsg = null;
                string sSendMsg = null;
                byte[] aReplyData = null;
                SmartWebService oWebService = new SmartWebService();
                StreamTransformer former = new StreamTransformerImpl();

                oWebService.SetUrl(FMBUrl);
                oWebService.SetTimeOut(FMBTimeOut);

                FMBType.serialize_FMB_View_Factory_List_In_Tag(former, View_Factory_List_In);

                sSendMsg = FwxCmnFunction.PackMessage(former.getBytes());
                oWebService.RequestReply(FunctionName, sSendMsg, ref sReplyMsg);
                aReplyData = FwxCmnFunction.UnPackMessage(sReplyMsg);

                former = new StreamTransformerImpl(aReplyData);
                FMBType.transform_FMB_View_Factory_List_Out_Tag(former, ref View_Factory_List_Out);

    	    	return true;
    	    }
            catch(Exception ex)
            {
                throw ex;
            }
        }

        public static bool FMB_View_UDR_Group_List(FMB_View_UDR_Group_List_In_Tag View_UDR_Group_List_In, ref FMB_View_UDR_Group_List_Out_Tag View_UDR_Group_List_Out)
        {
            return FMB_View_UDR_Group_List("FMB_View_UDR_Group_List", View_UDR_Group_List_In, ref View_UDR_Group_List_Out);
        }
        public static bool FMB_View_UDR_Group_List(string FunctionName, FMB_View_UDR_Group_List_In_Tag View_UDR_Group_List_In, ref FMB_View_UDR_Group_List_Out_Tag View_UDR_Group_List_Out)
        {
            try
            {
                if (null == FMBUrl || FMBUrl.Trim().Equals(""))
                        throw new Exception("INVALID_URL");

                if (0 >= FMBTimeOut)
                        throw new Exception("INVALID_TIMEOUT");

                string sReplyMsg = null;
                string sSendMsg = null;
                byte[] aReplyData = null;
                SmartWebService oWebService = new SmartWebService();
                StreamTransformer former = new StreamTransformerImpl();

                oWebService.SetUrl(FMBUrl);
                oWebService.SetTimeOut(FMBTimeOut);

                FMBType.serialize_FMB_View_UDR_Group_List_In_Tag(former, View_UDR_Group_List_In);

                sSendMsg = FwxCmnFunction.PackMessage(former.getBytes());
                oWebService.RequestReply(FunctionName, sSendMsg, ref sReplyMsg);
                aReplyData = FwxCmnFunction.UnPackMessage(sReplyMsg);

                former = new StreamTransformerImpl(aReplyData);
                FMBType.transform_FMB_View_UDR_Group_List_Out_Tag(former, ref View_UDR_Group_List_Out);

    	    	return true;
    	    }
            catch(Exception ex)
            {
                throw ex;
            }
        }

        public static bool FMB_View_Resource_List(FMB_View_Resource_List_In_Tag View_Resource_List_In, ref FMB_View_Resource_List_Out_Tag View_Resource_List_Out)
        {
            return FMB_View_Resource_List("FMB_View_Resource_List", View_Resource_List_In, ref View_Resource_List_Out);
        }
        public static bool FMB_View_Resource_List(string FunctionName, FMB_View_Resource_List_In_Tag View_Resource_List_In, ref FMB_View_Resource_List_Out_Tag View_Resource_List_Out)
        {
            try
            {
                if (null == FMBUrl || FMBUrl.Trim().Equals(""))
                        throw new Exception("INVALID_URL");

                if (0 >= FMBTimeOut)
                        throw new Exception("INVALID_TIMEOUT");

                string sReplyMsg = null;
                string sSendMsg = null;
                byte[] aReplyData = null;
                SmartWebService oWebService = new SmartWebService();
                StreamTransformer former = new StreamTransformerImpl();

                oWebService.SetUrl(FMBUrl);
                oWebService.SetTimeOut(FMBTimeOut);

                FMBType.serialize_FMB_View_Resource_List_In_Tag(former, View_Resource_List_In);

                sSendMsg = FwxCmnFunction.PackMessage(former.getBytes());
                oWebService.RequestReply(FunctionName, sSendMsg, ref sReplyMsg);
                aReplyData = FwxCmnFunction.UnPackMessage(sReplyMsg);

                former = new StreamTransformerImpl(aReplyData);
                FMBType.transform_FMB_View_Resource_List_Out_Tag(former, ref View_Resource_List_Out);

    	    	return true;
    	    }
            catch(Exception ex)
            {
                throw ex;
            }
        }

        public static bool FMB_Update_Resource_Location(FMB_Update_ResLoc_In_Tag Update_ResLoc_In, ref FMB_Cmn_Out_Tag Cmn_Out)
        {
            return FMB_Update_Resource_Location("FMB_Update_Resource_Location", Update_ResLoc_In, ref Cmn_Out);
        }
        public static bool FMB_Update_Resource_Location(string FunctionName, FMB_Update_ResLoc_In_Tag Update_ResLoc_In, ref FMB_Cmn_Out_Tag Cmn_Out)
        {
            try
            {
                if (null == FMBUrl || FMBUrl.Trim().Equals(""))
                        throw new Exception("INVALID_URL");

                if (0 >= FMBTimeOut)
                        throw new Exception("INVALID_TIMEOUT");

                string sReplyMsg = null;
                string sSendMsg = null;
                byte[] aReplyData = null;
                SmartWebService oWebService = new SmartWebService();
                StreamTransformer former = new StreamTransformerImpl();

                oWebService.SetUrl(FMBUrl);
                oWebService.SetTimeOut(FMBTimeOut);

                FMBType.serialize_FMB_Update_ResLoc_In_Tag(former, Update_ResLoc_In);

                sSendMsg = FwxCmnFunction.PackMessage(former.getBytes());
                oWebService.RequestReply(FunctionName, sSendMsg, ref sReplyMsg);
                aReplyData = FwxCmnFunction.UnPackMessage(sReplyMsg);

                former = new StreamTransformerImpl(aReplyData);
                FMBCoreType.transform_FMB_Cmn_Out_Tag(former, ref Cmn_Out);

    	    	return true;
    	    }
            catch(Exception ex)
            {
                throw ex;
            }
        }

        public static bool FMB_View_UDR_Resource_List(FMB_View_UDR_Resource_List_In_Tag View_UDR_Resource_List_In, ref FMB_View_UDR_Resource_List_Out_Tag View_UDR_Resource_List_Out)
        {
            return FMB_View_UDR_Resource_List("FMB_View_UDR_Resource_List", View_UDR_Resource_List_In, ref View_UDR_Resource_List_Out);
        }
        public static bool FMB_View_UDR_Resource_List(string FunctionName, FMB_View_UDR_Resource_List_In_Tag View_UDR_Resource_List_In, ref FMB_View_UDR_Resource_List_Out_Tag View_UDR_Resource_List_Out)
        {
            try
            {
                if (null == FMBUrl || FMBUrl.Trim().Equals(""))
                        throw new Exception("INVALID_URL");

                if (0 >= FMBTimeOut)
                        throw new Exception("INVALID_TIMEOUT");

                string sReplyMsg = null;
                string sSendMsg = null;
                byte[] aReplyData = null;
                SmartWebService oWebService = new SmartWebService();
                StreamTransformer former = new StreamTransformerImpl();

                oWebService.SetUrl(FMBUrl);
                oWebService.SetTimeOut(FMBTimeOut);

                FMBType.serialize_FMB_View_UDR_Resource_List_In_Tag(former, View_UDR_Resource_List_In);

                sSendMsg = FwxCmnFunction.PackMessage(former.getBytes());
                oWebService.RequestReply(FunctionName, sSendMsg, ref sReplyMsg);
                aReplyData = FwxCmnFunction.UnPackMessage(sReplyMsg);

                former = new StreamTransformerImpl(aReplyData);
                FMBType.transform_FMB_View_UDR_Resource_List_Out_Tag(former, ref View_UDR_Resource_List_Out);

    	    	return true;
    	    }
            catch(Exception ex)
            {
                throw ex;
            }
        }

        public static bool FMB_Update_UDR_Group(FMB_Update_UDR_Group_In_Tag Update_UDR_Group_In, ref FMB_Cmn_Out_Tag Cmn_Out)
        {
            return FMB_Update_UDR_Group("FMB_Update_UDR_Group", Update_UDR_Group_In, ref Cmn_Out);
        }
        public static bool FMB_Update_UDR_Group(string FunctionName, FMB_Update_UDR_Group_In_Tag Update_UDR_Group_In, ref FMB_Cmn_Out_Tag Cmn_Out)
        {
            try
            {
                if (null == FMBUrl || FMBUrl.Trim().Equals(""))
                        throw new Exception("INVALID_URL");

                if (0 >= FMBTimeOut)
                        throw new Exception("INVALID_TIMEOUT");

                string sReplyMsg = null;
                string sSendMsg = null;
                byte[] aReplyData = null;
                SmartWebService oWebService = new SmartWebService();
                StreamTransformer former = new StreamTransformerImpl();

                oWebService.SetUrl(FMBUrl);
                oWebService.SetTimeOut(FMBTimeOut);

                FMBType.serialize_FMB_Update_UDR_Group_In_Tag(former, Update_UDR_Group_In);

                sSendMsg = FwxCmnFunction.PackMessage(former.getBytes());
                oWebService.RequestReply(FunctionName, sSendMsg, ref sReplyMsg);
                aReplyData = FwxCmnFunction.UnPackMessage(sReplyMsg);

                former = new StreamTransformerImpl(aReplyData);
                FMBCoreType.transform_FMB_Cmn_Out_Tag(former, ref Cmn_Out);

    	    	return true;
    	    }
            catch(Exception ex)
            {
                throw ex;
            }
        }

        public static bool FMB_Update_UDR_ResLoc(FMB_Update_UDR_ResLoc_In_Tag Update_UDR_ResLoc_In, ref FMB_Cmn_Out_Tag Cmn_Out)
        {
            return FMB_Update_UDR_ResLoc("FMB_Update_UDR_ResLoc", Update_UDR_ResLoc_In, ref Cmn_Out);
        }
        public static bool FMB_Update_UDR_ResLoc(string FunctionName, FMB_Update_UDR_ResLoc_In_Tag Update_UDR_ResLoc_In, ref FMB_Cmn_Out_Tag Cmn_Out)
        {
            try
            {
                if (null == FMBUrl || FMBUrl.Trim().Equals(""))
                        throw new Exception("INVALID_URL");

                if (0 >= FMBTimeOut)
                        throw new Exception("INVALID_TIMEOUT");

                string sReplyMsg = null;
                string sSendMsg = null;
                byte[] aReplyData = null;
                SmartWebService oWebService = new SmartWebService();
                StreamTransformer former = new StreamTransformerImpl();

                oWebService.SetUrl(FMBUrl);
                oWebService.SetTimeOut(FMBTimeOut);

                FMBType.serialize_FMB_Update_UDR_ResLoc_In_Tag(former, Update_UDR_ResLoc_In);

                sSendMsg = FwxCmnFunction.PackMessage(former.getBytes());
                oWebService.RequestReply(FunctionName, sSendMsg, ref sReplyMsg);
                aReplyData = FwxCmnFunction.UnPackMessage(sReplyMsg);

                former = new StreamTransformerImpl(aReplyData);
                FMBCoreType.transform_FMB_Cmn_Out_Tag(former, ref Cmn_Out);

    	    	return true;
    	    }
            catch(Exception ex)
            {
                throw ex;
            }
        }

        public static bool FMB_View_Resource_List_Detail(FMB_View_Resource_List_In_Tag View_Resource_List_In, ref FMB_View_Resource_List_Out_Detail_Tag View_Resource_List_Out)
        {
            return FMB_View_Resource_List_Detail("FMB_View_Resource_List_Detail", View_Resource_List_In, ref View_Resource_List_Out);
        }
        public static bool FMB_View_Resource_List_Detail(string FunctionName, FMB_View_Resource_List_In_Tag View_Resource_List_In, ref FMB_View_Resource_List_Out_Detail_Tag View_Resource_List_Out)
        {
            try
            {
                if (null == FMBUrl || FMBUrl.Trim().Equals(""))
                        throw new Exception("INVALID_URL");

                if (0 >= FMBTimeOut)
                        throw new Exception("INVALID_TIMEOUT");

                string sReplyMsg = null;
                string sSendMsg = null;
                byte[] aReplyData = null;
                SmartWebService oWebService = new SmartWebService();
                StreamTransformer former = new StreamTransformerImpl();

                oWebService.SetUrl(FMBUrl);
                oWebService.SetTimeOut(FMBTimeOut);

                FMBType.serialize_FMB_View_Resource_List_In_Tag(former, View_Resource_List_In);

                sSendMsg = FwxCmnFunction.PackMessage(former.getBytes());
                oWebService.RequestReply(FunctionName, sSendMsg, ref sReplyMsg);
                aReplyData = FwxCmnFunction.UnPackMessage(sReplyMsg);

                former = new StreamTransformerImpl(aReplyData);
                FMBType.transform_FMB_View_Resource_List_Out_Detail_Tag(former, ref View_Resource_List_Out);

    	    	return true;
    	    }
            catch(Exception ex)
            {
                throw ex;
            }
        }

        public static bool FMB_View_UDR_Resource_List_Detail(FMB_View_UDR_Resource_List_In_Tag View_UDR_Resource_List_In, ref FMB_View_UDR_Resource_List_Out_Detail_Tag View_UDR_Resource_List_Out)
        {
            return FMB_View_UDR_Resource_List_Detail("FMB_View_UDR_Resource_List_Detail", View_UDR_Resource_List_In, ref View_UDR_Resource_List_Out);
        }
        public static bool FMB_View_UDR_Resource_List_Detail(string FunctionName, FMB_View_UDR_Resource_List_In_Tag View_UDR_Resource_List_In, ref FMB_View_UDR_Resource_List_Out_Detail_Tag View_UDR_Resource_List_Out)
        {
            try
            {
                if (null == FMBUrl || FMBUrl.Trim().Equals(""))
                        throw new Exception("INVALID_URL");

                if (0 >= FMBTimeOut)
                        throw new Exception("INVALID_TIMEOUT");

                string sReplyMsg = null;
                string sSendMsg = null;
                byte[] aReplyData = null;
                SmartWebService oWebService = new SmartWebService();
                StreamTransformer former = new StreamTransformerImpl();

                oWebService.SetUrl(FMBUrl);
                oWebService.SetTimeOut(FMBTimeOut);

                FMBType.serialize_FMB_View_UDR_Resource_List_In_Tag(former, View_UDR_Resource_List_In);

                sSendMsg = FwxCmnFunction.PackMessage(former.getBytes());
                oWebService.RequestReply(FunctionName, sSendMsg, ref sReplyMsg);
                aReplyData = FwxCmnFunction.UnPackMessage(sReplyMsg);

                former = new StreamTransformerImpl(aReplyData);
                FMBType.transform_FMB_View_UDR_Resource_List_Out_Detail_Tag(former, ref View_UDR_Resource_List_Out);

    	    	return true;
    	    }
            catch(Exception ex)
            {
                throw ex;
            }
        }

        public static bool FMB_Update_LayOut(FMB_Update_LayOut_In_Tag Update_LayOut_In, ref FMB_Cmn_Out_Tag Cmn_Out)
        {
            return FMB_Update_LayOut("FMB_Update_LayOut", Update_LayOut_In, ref Cmn_Out);
        }
        public static bool FMB_Update_LayOut(string FunctionName, FMB_Update_LayOut_In_Tag Update_LayOut_In, ref FMB_Cmn_Out_Tag Cmn_Out)
        {
            try
            {
                if (null == FMBUrl || FMBUrl.Trim().Equals(""))
                        throw new Exception("INVALID_URL");

                if (0 >= FMBTimeOut)
                        throw new Exception("INVALID_TIMEOUT");

                string sReplyMsg = null;
                string sSendMsg = null;
                byte[] aReplyData = null;
                SmartWebService oWebService = new SmartWebService();
                StreamTransformer former = new StreamTransformerImpl();

                oWebService.SetUrl(FMBUrl);
                oWebService.SetTimeOut(FMBTimeOut);

                FMBType.serialize_FMB_Update_LayOut_In_Tag(former, Update_LayOut_In);

                sSendMsg = FwxCmnFunction.PackMessage(former.getBytes());
                oWebService.RequestReply(FunctionName, sSendMsg, ref sReplyMsg);
                aReplyData = FwxCmnFunction.UnPackMessage(sReplyMsg);

                former = new StreamTransformerImpl(aReplyData);
                FMBCoreType.transform_FMB_Cmn_Out_Tag(former, ref Cmn_Out);

    	    	return true;
    	    }
            catch(Exception ex)
            {
                throw ex;
            }
        }

        public static bool FMB_View_LayOut_List(FMB_View_LayOut_List_In_Tag View_LayOut_List_In, ref FMB_View_LayOut_List_Out_Tag View_LayOut_List_Out)
        {
            return FMB_View_LayOut_List("FMB_View_LayOut_List", View_LayOut_List_In, ref View_LayOut_List_Out);
        }
        public static bool FMB_View_LayOut_List(string FunctionName, FMB_View_LayOut_List_In_Tag View_LayOut_List_In, ref FMB_View_LayOut_List_Out_Tag View_LayOut_List_Out)
        {
            try
            {
                if (null == FMBUrl || FMBUrl.Trim().Equals(""))
                        throw new Exception("INVALID_URL");

                if (0 >= FMBTimeOut)
                        throw new Exception("INVALID_TIMEOUT");

                string sReplyMsg = null;
                string sSendMsg = null;
                byte[] aReplyData = null;
                SmartWebService oWebService = new SmartWebService();
                StreamTransformer former = new StreamTransformerImpl();

                oWebService.SetUrl(FMBUrl);
                oWebService.SetTimeOut(FMBTimeOut);

                FMBType.serialize_FMB_View_LayOut_List_In_Tag(former, View_LayOut_List_In);

                sSendMsg = FwxCmnFunction.PackMessage(former.getBytes());
                oWebService.RequestReply(FunctionName, sSendMsg, ref sReplyMsg);
                aReplyData = FwxCmnFunction.UnPackMessage(sReplyMsg);

                former = new StreamTransformerImpl(aReplyData);
                FMBType.transform_FMB_View_LayOut_List_Out_Tag(former, ref View_LayOut_List_Out);

    	    	return true;
    	    }
            catch(Exception ex)
            {
                throw ex;
            }
        }

        public static bool FMB_View_Resource(FMB_View_Resource_In_Tag View_Resource_In, ref FMB_View_Resource_Out_Tag View_Resource_Out)
        {
            return FMB_View_Resource("FMB_View_Resource", View_Resource_In, ref View_Resource_Out);
        }
        public static bool FMB_View_Resource(string FunctionName, FMB_View_Resource_In_Tag View_Resource_In, ref FMB_View_Resource_Out_Tag View_Resource_Out)
        {
            try
            {
                if (null == FMBUrl || FMBUrl.Trim().Equals(""))
                        throw new Exception("INVALID_URL");

                if (0 >= FMBTimeOut)
                        throw new Exception("INVALID_TIMEOUT");

                string sReplyMsg = null;
                string sSendMsg = null;
                byte[] aReplyData = null;
                SmartWebService oWebService = new SmartWebService();
                StreamTransformer former = new StreamTransformerImpl();

                oWebService.SetUrl(FMBUrl);
                oWebService.SetTimeOut(FMBTimeOut);

                FMBType.serialize_FMB_View_Resource_In_Tag(former, View_Resource_In);

                sSendMsg = FwxCmnFunction.PackMessage(former.getBytes());
                oWebService.RequestReply(FunctionName, sSendMsg, ref sReplyMsg);
                aReplyData = FwxCmnFunction.UnPackMessage(sReplyMsg);

                former = new StreamTransformerImpl(aReplyData);
                FMBType.transform_FMB_View_Resource_Out_Tag(former, ref View_Resource_Out);

    	    	return true;
    	    }
            catch(Exception ex)
            {
                throw ex;
            }
        }

        public static bool FMB_View_LayOut(FMB_View_LayOut_In_Tag View_LayOut_In, ref FMB_View_LayOut_Out_Tag View_LayOut_Out)
        {
            return FMB_View_LayOut("FMB_View_LayOut", View_LayOut_In, ref View_LayOut_Out);
        }
        public static bool FMB_View_LayOut(string FunctionName, FMB_View_LayOut_In_Tag View_LayOut_In, ref FMB_View_LayOut_Out_Tag View_LayOut_Out)
        {
            try
            {
                if (null == FMBUrl || FMBUrl.Trim().Equals(""))
                        throw new Exception("INVALID_URL");

                if (0 >= FMBTimeOut)
                        throw new Exception("INVALID_TIMEOUT");

                string sReplyMsg = null;
                string sSendMsg = null;
                byte[] aReplyData = null;
                SmartWebService oWebService = new SmartWebService();
                StreamTransformer former = new StreamTransformerImpl();

                oWebService.SetUrl(FMBUrl);
                oWebService.SetTimeOut(FMBTimeOut);

                FMBType.serialize_FMB_View_LayOut_In_Tag(former, View_LayOut_In);

                sSendMsg = FwxCmnFunction.PackMessage(former.getBytes());
                oWebService.RequestReply(FunctionName, sSendMsg, ref sReplyMsg);
                aReplyData = FwxCmnFunction.UnPackMessage(sReplyMsg);

                former = new StreamTransformerImpl(aReplyData);
                FMBType.transform_FMB_View_LayOut_Out_Tag(former, ref View_LayOut_Out);

    	    	return true;
    	    }
            catch(Exception ex)
            {
                throw ex;
            }
        }

        public static bool FMB_View_UDR_Resource(FMB_View_UDR_Resource_In_Tag View_UDR_Resource_In, ref FMB_View_UDR_Resource_Out_Tag View_UDR_Resource_Out)
        {
            return FMB_View_UDR_Resource("FMB_View_UDR_Resource", View_UDR_Resource_In, ref View_UDR_Resource_Out);
        }
        public static bool FMB_View_UDR_Resource(string FunctionName, FMB_View_UDR_Resource_In_Tag View_UDR_Resource_In, ref FMB_View_UDR_Resource_Out_Tag View_UDR_Resource_Out)
        {
            try
            {
                if (null == FMBUrl || FMBUrl.Trim().Equals(""))
                        throw new Exception("INVALID_URL");

                if (0 >= FMBTimeOut)
                        throw new Exception("INVALID_TIMEOUT");

                string sReplyMsg = null;
                string sSendMsg = null;
                byte[] aReplyData = null;
                SmartWebService oWebService = new SmartWebService();
                StreamTransformer former = new StreamTransformerImpl();

                oWebService.SetUrl(FMBUrl);
                oWebService.SetTimeOut(FMBTimeOut);

                FMBType.serialize_FMB_View_UDR_Resource_In_Tag(former, View_UDR_Resource_In);

                sSendMsg = FwxCmnFunction.PackMessage(former.getBytes());
                oWebService.RequestReply(FunctionName, sSendMsg, ref sReplyMsg);
                aReplyData = FwxCmnFunction.UnPackMessage(sReplyMsg);

                former = new StreamTransformerImpl(aReplyData);
                FMBType.transform_FMB_View_UDR_Resource_Out_Tag(former, ref View_UDR_Resource_Out);

    	    	return true;
    	    }
            catch(Exception ex)
            {
                throw ex;
            }
        }

        public static bool FMB_View_UDR_Group(FMB_View_UDR_Group_In_Tag View_UDR_Group_In, ref FMB_View_UDR_Group_Out_Tag View_UDR_Group_Out)
        {
            return FMB_View_UDR_Group("FMB_View_UDR_Group", View_UDR_Group_In, ref View_UDR_Group_Out);
        }
        public static bool FMB_View_UDR_Group(string FunctionName, FMB_View_UDR_Group_In_Tag View_UDR_Group_In, ref FMB_View_UDR_Group_Out_Tag View_UDR_Group_Out)
        {
            try
            {
                if (null == FMBUrl || FMBUrl.Trim().Equals(""))
                        throw new Exception("INVALID_URL");

                if (0 >= FMBTimeOut)
                        throw new Exception("INVALID_TIMEOUT");

                string sReplyMsg = null;
                string sSendMsg = null;
                byte[] aReplyData = null;
                SmartWebService oWebService = new SmartWebService();
                StreamTransformer former = new StreamTransformerImpl();

                oWebService.SetUrl(FMBUrl);
                oWebService.SetTimeOut(FMBTimeOut);

                FMBType.serialize_FMB_View_UDR_Group_In_Tag(former, View_UDR_Group_In);

                sSendMsg = FwxCmnFunction.PackMessage(former.getBytes());
                oWebService.RequestReply(FunctionName, sSendMsg, ref sReplyMsg);
                aReplyData = FwxCmnFunction.UnPackMessage(sReplyMsg);

                former = new StreamTransformerImpl(aReplyData);
                FMBType.transform_FMB_View_UDR_Group_Out_Tag(former, ref View_UDR_Group_Out);

    	    	return true;
    	    }
            catch(Exception ex)
            {
                throw ex;
            }
        }

        public static bool FMB_View_Resource_History(FMB_View_Resource_History_In_Tag View_Resource_History_In, ref FMB_View_Resource_History_Out_Tag View_Resource_History_Out)
        {
            return FMB_View_Resource_History("FMB_View_Resource_History", View_Resource_History_In, ref View_Resource_History_Out);
        }
        public static bool FMB_View_Resource_History(string FunctionName, FMB_View_Resource_History_In_Tag View_Resource_History_In, ref FMB_View_Resource_History_Out_Tag View_Resource_History_Out)
        {
            try
            {
                if (null == FMBUrl || FMBUrl.Trim().Equals(""))
                        throw new Exception("INVALID_URL");

                if (0 >= FMBTimeOut)
                        throw new Exception("INVALID_TIMEOUT");

                string sReplyMsg = null;
                string sSendMsg = null;
                byte[] aReplyData = null;
                SmartWebService oWebService = new SmartWebService();
                StreamTransformer former = new StreamTransformerImpl();

                oWebService.SetUrl(FMBUrl);
                oWebService.SetTimeOut(FMBTimeOut);

                FMBType.serialize_FMB_View_Resource_History_In_Tag(former, View_Resource_History_In);

                sSendMsg = FwxCmnFunction.PackMessage(former.getBytes());
                oWebService.RequestReply(FunctionName, sSendMsg, ref sReplyMsg);
                aReplyData = FwxCmnFunction.UnPackMessage(sReplyMsg);

                former = new StreamTransformerImpl(aReplyData);
                FMBType.transform_FMB_View_Resource_History_Out_Tag(former, ref View_Resource_History_Out);

    	    	return true;
    	    }
            catch(Exception ex)
            {
                throw ex;
            }
        }

        public static bool FMB_View_LotByRes_List(FMB_View_LotByRes_List_In_Tag View_LotByRes_List_In, ref FMB_View_LotByRes_List_Out_Tag View_LotByRes_List_Out)
        {
            return FMB_View_LotByRes_List("FMB_View_LotByRes_List", View_LotByRes_List_In, ref View_LotByRes_List_Out);
        }
        public static bool FMB_View_LotByRes_List(string FunctionName, FMB_View_LotByRes_List_In_Tag View_LotByRes_List_In, ref FMB_View_LotByRes_List_Out_Tag View_LotByRes_List_Out)
        {
            try
            {
                if (null == FMBUrl || FMBUrl.Trim().Equals(""))
                        throw new Exception("INVALID_URL");

                if (0 >= FMBTimeOut)
                        throw new Exception("INVALID_TIMEOUT");

                string sReplyMsg = null;
                string sSendMsg = null;
                byte[] aReplyData = null;
                SmartWebService oWebService = new SmartWebService();
                StreamTransformer former = new StreamTransformerImpl();

                oWebService.SetUrl(FMBUrl);
                oWebService.SetTimeOut(FMBTimeOut);

                FMBType.serialize_FMB_View_LotByRes_List_In_Tag(former, View_LotByRes_List_In);

                sSendMsg = FwxCmnFunction.PackMessage(former.getBytes());
                oWebService.RequestReply(FunctionName, sSendMsg, ref sReplyMsg);
                aReplyData = FwxCmnFunction.UnPackMessage(sReplyMsg);

                former = new StreamTransformerImpl(aReplyData);
                FMBType.transform_FMB_View_LotByRes_List_Out_Tag(former, ref View_LotByRes_List_Out);

    	    	return true;
    	    }
            catch(Exception ex)
            {
                throw ex;
            }
        }

        public static bool FMB_View_Lot_List_Detail(FMB_View_Lot_List_Detail_In_Tag View_Lot_List_Detail_In, ref FMB_View_Lot_List_Detail_Out_Tag View_Lot_List_Detail_Out)
        {
            return FMB_View_Lot_List_Detail("FMB_View_Lot_List_Detail", View_Lot_List_Detail_In, ref View_Lot_List_Detail_Out);
        }
        public static bool FMB_View_Lot_List_Detail(string FunctionName, FMB_View_Lot_List_Detail_In_Tag View_Lot_List_Detail_In, ref FMB_View_Lot_List_Detail_Out_Tag View_Lot_List_Detail_Out)
        {
            try
            {
                if (null == FMBUrl || FMBUrl.Trim().Equals(""))
                        throw new Exception("INVALID_URL");

                if (0 >= FMBTimeOut)
                        throw new Exception("INVALID_TIMEOUT");

                string sReplyMsg = null;
                string sSendMsg = null;
                byte[] aReplyData = null;
                SmartWebService oWebService = new SmartWebService();
                StreamTransformer former = new StreamTransformerImpl();

                oWebService.SetUrl(FMBUrl);
                oWebService.SetTimeOut(FMBTimeOut);

                FMBType.serialize_FMB_View_Lot_List_Detail_In_Tag(former, View_Lot_List_Detail_In);

                sSendMsg = FwxCmnFunction.PackMessage(former.getBytes());
                oWebService.RequestReply(FunctionName, sSendMsg, ref sReplyMsg);
                aReplyData = FwxCmnFunction.UnPackMessage(sReplyMsg);

                former = new StreamTransformerImpl(aReplyData);
                FMBType.transform_FMB_View_Lot_List_Detail_Out_Tag(former, ref View_Lot_List_Detail_Out);

    	    	return true;
    	    }
            catch(Exception ex)
            {
                throw ex;
            }
        }

        public static bool FMB_View_Factory(FMB_View_Factory_In_Tag View_Factory_In, ref FMB_View_Factory_Out_Tag View_Factory_Out)
        {
            return FMB_View_Factory("FMB_View_Factory", View_Factory_In, ref View_Factory_Out);
        }
        public static bool FMB_View_Factory(string FunctionName, FMB_View_Factory_In_Tag View_Factory_In, ref FMB_View_Factory_Out_Tag View_Factory_Out)
        {
            try
            {
                if (null == FMBUrl || FMBUrl.Trim().Equals(""))
                        throw new Exception("INVALID_URL");

                if (0 >= FMBTimeOut)
                        throw new Exception("INVALID_TIMEOUT");

                string sReplyMsg = null;
                string sSendMsg = null;
                byte[] aReplyData = null;
                SmartWebService oWebService = new SmartWebService();
                StreamTransformer former = new StreamTransformerImpl();

                oWebService.SetUrl(FMBUrl);
                oWebService.SetTimeOut(FMBTimeOut);

                FMBType.serialize_FMB_View_Factory_In_Tag(former, View_Factory_In);

                sSendMsg = FwxCmnFunction.PackMessage(former.getBytes());
                oWebService.RequestReply(FunctionName, sSendMsg, ref sReplyMsg);
                aReplyData = FwxCmnFunction.UnPackMessage(sReplyMsg);

                former = new StreamTransformerImpl(aReplyData);
                FMBType.transform_FMB_View_Factory_Out_Tag(former, ref View_Factory_Out);

    	    	return true;
    	    }
            catch(Exception ex)
            {
                throw ex;
            }
        }

        public static bool FMB_View_Factory_Cmf_Item(FMB_View_Factory_Cmf_Item_In_Tag View_Factory_Cmf_Item_In, ref FMB_View_Factory_Cmf_Item_Out_Tag View_Factory_Cmf_Item_Out)
        {
            return FMB_View_Factory_Cmf_Item("FMB_View_Factory_Cmf_Item", View_Factory_Cmf_Item_In, ref View_Factory_Cmf_Item_Out);
        }
        public static bool FMB_View_Factory_Cmf_Item(string FunctionName, FMB_View_Factory_Cmf_Item_In_Tag View_Factory_Cmf_Item_In, ref FMB_View_Factory_Cmf_Item_Out_Tag View_Factory_Cmf_Item_Out)
        {
            try
            {
                if (null == FMBUrl || FMBUrl.Trim().Equals(""))
                        throw new Exception("INVALID_URL");

                if (0 >= FMBTimeOut)
                        throw new Exception("INVALID_TIMEOUT");

                string sReplyMsg = null;
                string sSendMsg = null;
                byte[] aReplyData = null;
                SmartWebService oWebService = new SmartWebService();
                StreamTransformer former = new StreamTransformerImpl();

                oWebService.SetUrl(FMBUrl);
                oWebService.SetTimeOut(FMBTimeOut);

                FMBType.serialize_FMB_View_Factory_Cmf_Item_In_Tag(former, View_Factory_Cmf_Item_In);

                sSendMsg = FwxCmnFunction.PackMessage(former.getBytes());
                oWebService.RequestReply(FunctionName, sSendMsg, ref sReplyMsg);
                aReplyData = FwxCmnFunction.UnPackMessage(sReplyMsg);

                former = new StreamTransformerImpl(aReplyData);
                FMBType.transform_FMB_View_Factory_Cmf_Item_Out_Tag(former, ref View_Factory_Cmf_Item_Out);

    	    	return true;
    	    }
            catch(Exception ex)
            {
                throw ex;
            }
        }

        public static bool FMB_View_Material_List(FMB_View_Material_List_In_Tag View_Material_List_In, ref FMB_View_Material_List_Out_Tag View_Material_List_Out)
        {
            return FMB_View_Material_List("FMB_View_Material_List", View_Material_List_In, ref View_Material_List_Out);
        }
        public static bool FMB_View_Material_List(string FunctionName, FMB_View_Material_List_In_Tag View_Material_List_In, ref FMB_View_Material_List_Out_Tag View_Material_List_Out)
        {
            try
            {
                if (null == FMBUrl || FMBUrl.Trim().Equals(""))
                        throw new Exception("INVALID_URL");

                if (0 >= FMBTimeOut)
                        throw new Exception("INVALID_TIMEOUT");

                string sReplyMsg = null;
                string sSendMsg = null;
                byte[] aReplyData = null;
                SmartWebService oWebService = new SmartWebService();
                StreamTransformer former = new StreamTransformerImpl();

                oWebService.SetUrl(FMBUrl);
                oWebService.SetTimeOut(FMBTimeOut);

                FMBType.serialize_FMB_View_Material_List_In_Tag(former, View_Material_List_In);

                sSendMsg = FwxCmnFunction.PackMessage(former.getBytes());
                oWebService.RequestReply(FunctionName, sSendMsg, ref sReplyMsg);
                aReplyData = FwxCmnFunction.UnPackMessage(sReplyMsg);

                former = new StreamTransformerImpl(aReplyData);
                FMBType.transform_FMB_View_Material_List_Out_Tag(former, ref View_Material_List_Out);

    	    	return true;
    	    }
            catch(Exception ex)
            {
                throw ex;
            }
        }

        public static bool FMB_View_Flow_List(FMB_View_Flow_List_In_Tag View_Flow_List_In, ref FMB_View_Flow_List_Out_Tag View_Flow_List_Out)
        {
            return FMB_View_Flow_List("FMB_View_Flow_List", View_Flow_List_In, ref View_Flow_List_Out);
        }
        public static bool FMB_View_Flow_List(string FunctionName, FMB_View_Flow_List_In_Tag View_Flow_List_In, ref FMB_View_Flow_List_Out_Tag View_Flow_List_Out)
        {
            try
            {
                if (null == FMBUrl || FMBUrl.Trim().Equals(""))
                        throw new Exception("INVALID_URL");

                if (0 >= FMBTimeOut)
                        throw new Exception("INVALID_TIMEOUT");

                string sReplyMsg = null;
                string sSendMsg = null;
                byte[] aReplyData = null;
                SmartWebService oWebService = new SmartWebService();
                StreamTransformer former = new StreamTransformerImpl();

                oWebService.SetUrl(FMBUrl);
                oWebService.SetTimeOut(FMBTimeOut);

                FMBType.serialize_FMB_View_Flow_List_In_Tag(former, View_Flow_List_In);

                sSendMsg = FwxCmnFunction.PackMessage(former.getBytes());
                oWebService.RequestReply(FunctionName, sSendMsg, ref sReplyMsg);
                aReplyData = FwxCmnFunction.UnPackMessage(sReplyMsg);

                former = new StreamTransformerImpl(aReplyData);
                FMBType.transform_FMB_View_Flow_List_Out_Tag(former, ref View_Flow_List_Out);

    	    	return true;
    	    }
            catch(Exception ex)
            {
                throw ex;
            }
        }

        public static bool FMB_View_Operation_List(FMB_View_Operation_List_In_Tag View_Operation_List_In, ref FMB_View_Operation_List_Out_Tag View_Operation_List_Out)
        {
            return FMB_View_Operation_List("FMB_View_Operation_List", View_Operation_List_In, ref View_Operation_List_Out);
        }
        public static bool FMB_View_Operation_List(string FunctionName, FMB_View_Operation_List_In_Tag View_Operation_List_In, ref FMB_View_Operation_List_Out_Tag View_Operation_List_Out)
        {
            try
            {
                if (null == FMBUrl || FMBUrl.Trim().Equals(""))
                        throw new Exception("INVALID_URL");

                if (0 >= FMBTimeOut)
                        throw new Exception("INVALID_TIMEOUT");

                string sReplyMsg = null;
                string sSendMsg = null;
                byte[] aReplyData = null;
                SmartWebService oWebService = new SmartWebService();
                StreamTransformer former = new StreamTransformerImpl();

                oWebService.SetUrl(FMBUrl);
                oWebService.SetTimeOut(FMBTimeOut);

                FMBType.serialize_FMB_View_Operation_List_In_Tag(former, View_Operation_List_In);

                sSendMsg = FwxCmnFunction.PackMessage(former.getBytes());
                oWebService.RequestReply(FunctionName, sSendMsg, ref sReplyMsg);
                aReplyData = FwxCmnFunction.UnPackMessage(sReplyMsg);

                former = new StreamTransformerImpl(aReplyData);
                FMBType.transform_FMB_View_Operation_List_Out_Tag(former, ref View_Operation_List_Out);

    	    	return true;
    	    }
            catch(Exception ex)
            {
                throw ex;
            }
        }

        public static bool FMB_View_ResEvent_List(FMB_View_ResEvent_List_In_Tag View_ResEvent_List_In, ref FMB_View_ResEvent_List_Out_Tag View_ResEvent_List_Out)
        {
            return FMB_View_ResEvent_List("FMB_View_ResEvent_List", View_ResEvent_List_In, ref View_ResEvent_List_Out);
        }
        public static bool FMB_View_ResEvent_List(string FunctionName, FMB_View_ResEvent_List_In_Tag View_ResEvent_List_In, ref FMB_View_ResEvent_List_Out_Tag View_ResEvent_List_Out)
        {
            try
            {
                if (null == FMBUrl || FMBUrl.Trim().Equals(""))
                        throw new Exception("INVALID_URL");

                if (0 >= FMBTimeOut)
                        throw new Exception("INVALID_TIMEOUT");

                string sReplyMsg = null;
                string sSendMsg = null;
                byte[] aReplyData = null;
                SmartWebService oWebService = new SmartWebService();
                StreamTransformer former = new StreamTransformerImpl();

                oWebService.SetUrl(FMBUrl);
                oWebService.SetTimeOut(FMBTimeOut);

                FMBType.serialize_FMB_View_ResEvent_List_In_Tag(former, View_ResEvent_List_In);

                sSendMsg = FwxCmnFunction.PackMessage(former.getBytes());
                oWebService.RequestReply(FunctionName, sSendMsg, ref sReplyMsg);
                aReplyData = FwxCmnFunction.UnPackMessage(sReplyMsg);

                former = new StreamTransformerImpl(aReplyData);
                FMBType.transform_FMB_View_ResEvent_List_Out_Tag(former, ref View_ResEvent_List_Out);

    	    	return true;
    	    }
            catch(Exception ex)
            {
                throw ex;
            }
        }

        public static bool FMB_View_ResLot_List(FMB_View_ResLot_List_In_Tag View_ResLot_List_In, ref FMB_View_ResLot_List_Out_Tag View_ResLot_List_Out)
        {
            return FMB_View_ResLot_List("FMB_View_ResLot_List", View_ResLot_List_In, ref View_ResLot_List_Out);
        }
        public static bool FMB_View_ResLot_List(string FunctionName, FMB_View_ResLot_List_In_Tag View_ResLot_List_In, ref FMB_View_ResLot_List_Out_Tag View_ResLot_List_Out)
        {
            try
            {
                if (null == FMBUrl || FMBUrl.Trim().Equals(""))
                        throw new Exception("INVALID_URL");

                if (0 >= FMBTimeOut)
                        throw new Exception("INVALID_TIMEOUT");

                string sReplyMsg = null;
                string sSendMsg = null;
                byte[] aReplyData = null;
                SmartWebService oWebService = new SmartWebService();
                StreamTransformer former = new StreamTransformerImpl();

                oWebService.SetUrl(FMBUrl);
                oWebService.SetTimeOut(FMBTimeOut);

                FMBType.serialize_FMB_View_ResLot_List_In_Tag(former, View_ResLot_List_In);

                sSendMsg = FwxCmnFunction.PackMessage(former.getBytes());
                oWebService.RequestReply(FunctionName, sSendMsg, ref sReplyMsg);
                aReplyData = FwxCmnFunction.UnPackMessage(sReplyMsg);

                former = new StreamTransformerImpl(aReplyData);
                FMBType.transform_FMB_View_ResLot_List_Out_Tag(former, ref View_ResLot_List_Out);

    	    	return true;
    	    }
            catch(Exception ex)
            {
                throw ex;
            }
        }

        public static bool FMB_View_Data_List(FMB_View_Data_List_In_Tag View_Data_List_In, ref FMB_View_Data_List_Out_Tag View_Data_List_Out)
        {
            return FMB_View_Data_List("FMB_View_Data_List", View_Data_List_In, ref View_Data_List_Out);
        }
        public static bool FMB_View_Data_List(string FunctionName, FMB_View_Data_List_In_Tag View_Data_List_In, ref FMB_View_Data_List_Out_Tag View_Data_List_Out)
        {
            try
            {
                if (null == FMBUrl || FMBUrl.Trim().Equals(""))
                        throw new Exception("INVALID_URL");

                if (0 >= FMBTimeOut)
                        throw new Exception("INVALID_TIMEOUT");

                string sReplyMsg = null;
                string sSendMsg = null;
                byte[] aReplyData = null;
                SmartWebService oWebService = new SmartWebService();
                StreamTransformer former = new StreamTransformerImpl();

                oWebService.SetUrl(FMBUrl);
                oWebService.SetTimeOut(FMBTimeOut);

                FMBType.serialize_FMB_View_Data_List_In_Tag(former, View_Data_List_In);

                sSendMsg = FwxCmnFunction.PackMessage(former.getBytes());
                oWebService.RequestReply(FunctionName, sSendMsg, ref sReplyMsg);
                aReplyData = FwxCmnFunction.UnPackMessage(sReplyMsg);

                former = new StreamTransformerImpl(aReplyData);
                FMBType.transform_FMB_View_Data_List_Out_Tag(former, ref View_Data_List_Out);

    	    	return true;
    	    }
            catch(Exception ex)
            {
                throw ex;
            }
        }

        public static bool FMB_Moving_by_Force(FMB_Moving_by_Force_In_Tag Moving_by_Force_In, ref FMB_Cmn_Out_Tag Cmn_Out)
        {
            return FMB_Moving_by_Force("FMB_Moving_by_Force", Moving_by_Force_In, ref Cmn_Out);
        }
        public static bool FMB_Moving_by_Force(string FunctionName, FMB_Moving_by_Force_In_Tag Moving_by_Force_In, ref FMB_Cmn_Out_Tag Cmn_Out)
        {
            try
            {
                if (null == FMBUrl || FMBUrl.Trim().Equals(""))
                        throw new Exception("INVALID_URL");

                if (0 >= FMBTimeOut)
                        throw new Exception("INVALID_TIMEOUT");

                string sReplyMsg = null;
                string sSendMsg = null;
                byte[] aReplyData = null;
                SmartWebService oWebService = new SmartWebService();
                StreamTransformer former = new StreamTransformerImpl();

                oWebService.SetUrl(FMBUrl);
                oWebService.SetTimeOut(FMBTimeOut);

                FMBType.serialize_FMB_Moving_by_Force_In_Tag(former, Moving_by_Force_In);

                sSendMsg = FwxCmnFunction.PackMessage(former.getBytes());
                oWebService.RequestReply(FunctionName, sSendMsg, ref sReplyMsg);
                aReplyData = FwxCmnFunction.UnPackMessage(sReplyMsg);

                former = new StreamTransformerImpl(aReplyData);
                FMBCoreType.transform_FMB_Cmn_Out_Tag(former, ref Cmn_Out);

    	    	return true;
    	    }
            catch(Exception ex)
            {
                throw ex;
            }
        }

        public static bool FMB_Exist_Control(FMB_Exist_Control_In_Tag Exist_Control_In, ref FMB_Exist_Control_Out_Tag Exist_Control_Out)
        {
            return FMB_Exist_Control("FMB_Exist_Control", Exist_Control_In, ref Exist_Control_Out);
        }
        public static bool FMB_Exist_Control(string FunctionName, FMB_Exist_Control_In_Tag Exist_Control_In, ref FMB_Exist_Control_Out_Tag Exist_Control_Out)
        {
            try
            {
                if (null == FMBUrl || FMBUrl.Trim().Equals(""))
                        throw new Exception("INVALID_URL");

                if (0 >= FMBTimeOut)
                        throw new Exception("INVALID_TIMEOUT");

                string sReplyMsg = null;
                string sSendMsg = null;
                byte[] aReplyData = null;
                SmartWebService oWebService = new SmartWebService();
                StreamTransformer former = new StreamTransformerImpl();

                oWebService.SetUrl(FMBUrl);
                oWebService.SetTimeOut(FMBTimeOut);

                FMBType.serialize_FMB_Exist_Control_In_Tag(former, Exist_Control_In);

                sSendMsg = FwxCmnFunction.PackMessage(former.getBytes());
                oWebService.RequestReply(FunctionName, sSendMsg, ref sReplyMsg);
                aReplyData = FwxCmnFunction.UnPackMessage(sReplyMsg);

                former = new StreamTransformerImpl(aReplyData);
                FMBType.transform_FMB_Exist_Control_Out_Tag(former, ref Exist_Control_Out);

    	    	return true;
    	    }
            catch(Exception ex)
            {
                throw ex;
            }
        }

        public static bool FMB_View_User_List(FMB_View_User_List_In_Tag View_User_List_In, ref FMB_View_User_List_Out_Tag View_User_List_Out)
        {
            return FMB_View_User_List("FMB_View_User_List", View_User_List_In, ref View_User_List_Out);
        }
        public static bool FMB_View_User_List(string FunctionName, FMB_View_User_List_In_Tag View_User_List_In, ref FMB_View_User_List_Out_Tag View_User_List_Out)
        {
            try
            {
                if (null == FMBUrl || FMBUrl.Trim().Equals(""))
                        throw new Exception("INVALID_URL");

                if (0 >= FMBTimeOut)
                        throw new Exception("INVALID_TIMEOUT");

                string sReplyMsg = null;
                string sSendMsg = null;
                byte[] aReplyData = null;
                SmartWebService oWebService = new SmartWebService();
                StreamTransformer former = new StreamTransformerImpl();

                oWebService.SetUrl(FMBUrl);
                oWebService.SetTimeOut(FMBTimeOut);

                FMBType.serialize_FMB_View_User_List_In_Tag(former, View_User_List_In);

                sSendMsg = FwxCmnFunction.PackMessage(former.getBytes());
                oWebService.RequestReply(FunctionName, sSendMsg, ref sReplyMsg);
                aReplyData = FwxCmnFunction.UnPackMessage(sReplyMsg);

                former = new StreamTransformerImpl(aReplyData);
                FMBType.transform_FMB_View_User_List_Out_Tag(former, ref View_User_List_Out);

    	    	return true;
    	    }
            catch(Exception ex)
            {
                throw ex;
            }
        }

        public static bool FMB_View_SecGrp_List(FMB_View_SecGrp_List_In_Tag View_SecGrp_List_In, ref FMB_View_SecGrp_List_Out_Tag View_SecGrp_List_Out)
        {
            return FMB_View_SecGrp_List("FMB_View_SecGrp_List", View_SecGrp_List_In, ref View_SecGrp_List_Out);
        }
        public static bool FMB_View_SecGrp_List(string FunctionName, FMB_View_SecGrp_List_In_Tag View_SecGrp_List_In, ref FMB_View_SecGrp_List_Out_Tag View_SecGrp_List_Out)
        {
            try
            {
                if (null == FMBUrl || FMBUrl.Trim().Equals(""))
                        throw new Exception("INVALID_URL");

                if (0 >= FMBTimeOut)
                        throw new Exception("INVALID_TIMEOUT");

                string sReplyMsg = null;
                string sSendMsg = null;
                byte[] aReplyData = null;
                SmartWebService oWebService = new SmartWebService();
                StreamTransformer former = new StreamTransformerImpl();

                oWebService.SetUrl(FMBUrl);
                oWebService.SetTimeOut(FMBTimeOut);

                FMBType.serialize_FMB_View_SecGrp_List_In_Tag(former, View_SecGrp_List_In);

                sSendMsg = FwxCmnFunction.PackMessage(former.getBytes());
                oWebService.RequestReply(FunctionName, sSendMsg, ref sReplyMsg);
                aReplyData = FwxCmnFunction.UnPackMessage(sReplyMsg);

                former = new StreamTransformerImpl(aReplyData);
                FMBType.transform_FMB_View_SecGrp_List_Out_Tag(former, ref View_SecGrp_List_Out);

    	    	return true;
    	    }
            catch(Exception ex)
            {
                throw ex;
            }
        }

        public static bool FMB_View_ResDetail_List(FMB_View_ResDetail_In_Tag View_ResDetail_In, ref FMB_View_ResDetail_Out_Tag View_ResDetail_Out)
        {
            return FMB_View_ResDetail_List("FMB_View_ResDetail_List", View_ResDetail_In, ref View_ResDetail_Out);
        }
        public static bool FMB_View_ResDetail_List(string FunctionName, FMB_View_ResDetail_In_Tag View_ResDetail_In, ref FMB_View_ResDetail_Out_Tag View_ResDetail_Out)
        {
            try
            {
                if (null == FMBUrl || FMBUrl.Trim().Equals(""))
                        throw new Exception("INVALID_URL");

                if (0 >= FMBTimeOut)
                        throw new Exception("INVALID_TIMEOUT");

                string sReplyMsg = null;
                string sSendMsg = null;
                byte[] aReplyData = null;
                SmartWebService oWebService = new SmartWebService();
                StreamTransformer former = new StreamTransformerImpl();

                oWebService.SetUrl(FMBUrl);
                oWebService.SetTimeOut(FMBTimeOut);

                FMBType.serialize_FMB_View_ResDetail_In_Tag(former, View_ResDetail_In);

                sSendMsg = FwxCmnFunction.PackMessage(former.getBytes());
                oWebService.RequestReply(FunctionName, sSendMsg, ref sReplyMsg);
                aReplyData = FwxCmnFunction.UnPackMessage(sReplyMsg);

                former = new StreamTransformerImpl(aReplyData);
                FMBType.transform_FMB_View_ResDetail_Out_Tag(former, ref View_ResDetail_Out);

    	    	return true;
    	    }
            catch(Exception ex)
            {
                throw ex;
            }
        }

        public static bool FMB_Login(FMB_Login_In_Tag Login_In, ref FMB_Login_Out_Tag Login_Out)
        {
            return FMB_Login("FMB_Login", Login_In, ref Login_Out);
        }
        public static bool FMB_Login(string FunctionName, FMB_Login_In_Tag Login_In, ref FMB_Login_Out_Tag Login_Out)
        {
            try
            {
                if (null == FMBUrl || FMBUrl.Trim().Equals(""))
                        throw new Exception("INVALID_URL");

                if (0 >= FMBTimeOut)
                        throw new Exception("INVALID_TIMEOUT");

                string sReplyMsg = null;
                string sSendMsg = null;
                byte[] aReplyData = null;
                SmartWebService oWebService = new SmartWebService();
                StreamTransformer former = new StreamTransformerImpl();

                oWebService.SetUrl(FMBUrl);
                oWebService.SetTimeOut(FMBTimeOut);

                FMBCoreType.serialize_FMB_Login_In_Tag(former, Login_In);

                sSendMsg = FwxCmnFunction.PackMessage(former.getBytes());
                oWebService.RequestReply(FunctionName, sSendMsg, ref sReplyMsg);
                aReplyData = FwxCmnFunction.UnPackMessage(sReplyMsg);

                former = new StreamTransformerImpl(aReplyData);
                FMBCoreType.transform_FMB_Login_Out_Tag(former, ref Login_Out);

    	    	return true;
    	    }
            catch(Exception ex)
            {
                throw ex;
            }
        }

        public static bool FMB_Resource_Priority(FMB_Resource_Priority_In_Tag Resource_Priority_In, ref FMB_Cmn_Out_Tag Cmn_Out)
        {
            return FMB_Resource_Priority("FMB_Resource_Priority", Resource_Priority_In, ref Cmn_Out);
        }
        public static bool FMB_Resource_Priority(string FunctionName, FMB_Resource_Priority_In_Tag Resource_Priority_In, ref FMB_Cmn_Out_Tag Cmn_Out)
        {
            try
            {
                if (null == FMBUrl || FMBUrl.Trim().Equals(""))
                        throw new Exception("INVALID_URL");

                if (0 >= FMBTimeOut)
                        throw new Exception("INVALID_TIMEOUT");

                string sReplyMsg = null;
                string sSendMsg = null;
                byte[] aReplyData = null;
                SmartWebService oWebService = new SmartWebService();
                StreamTransformer former = new StreamTransformerImpl();

                oWebService.SetUrl(FMBUrl);
                oWebService.SetTimeOut(FMBTimeOut);

                FMBType.serialize_FMB_Resource_Priority_In_Tag(former, Resource_Priority_In);

                sSendMsg = FwxCmnFunction.PackMessage(former.getBytes());
                oWebService.RequestReply(FunctionName, sSendMsg, ref sReplyMsg);
                aReplyData = FwxCmnFunction.UnPackMessage(sReplyMsg);

                former = new StreamTransformerImpl(aReplyData);
                FMBCoreType.transform_FMB_Cmn_Out_Tag(former, ref Cmn_Out);

    	    	return true;
    	    }
            catch(Exception ex)
            {
                throw ex;
            }
        }

        public static bool FMB_UDR_Priority(FMB_UDR_Priority_In_Tag UDR_Priority_In, ref FMB_Cmn_Out_Tag Cmn_Out)
        {
            return FMB_UDR_Priority("FMB_UDR_Priority", UDR_Priority_In, ref Cmn_Out);
        }
        public static bool FMB_UDR_Priority(string FunctionName, FMB_UDR_Priority_In_Tag UDR_Priority_In, ref FMB_Cmn_Out_Tag Cmn_Out)
        {
            try
            {
                if (null == FMBUrl || FMBUrl.Trim().Equals(""))
                        throw new Exception("INVALID_URL");

                if (0 >= FMBTimeOut)
                        throw new Exception("INVALID_TIMEOUT");

                string sReplyMsg = null;
                string sSendMsg = null;
                byte[] aReplyData = null;
                SmartWebService oWebService = new SmartWebService();
                StreamTransformer former = new StreamTransformerImpl();

                oWebService.SetUrl(FMBUrl);
                oWebService.SetTimeOut(FMBTimeOut);

                FMBType.serialize_FMB_UDR_Priority_In_Tag(former, UDR_Priority_In);

                sSendMsg = FwxCmnFunction.PackMessage(former.getBytes());
                oWebService.RequestReply(FunctionName, sSendMsg, ref sReplyMsg);
                aReplyData = FwxCmnFunction.UnPackMessage(sReplyMsg);

                former = new StreamTransformerImpl(aReplyData);
                FMBCoreType.transform_FMB_Cmn_Out_Tag(former, ref Cmn_Out);

    	    	return true;
    	    }
            catch(Exception ex)
            {
                throw ex;
            }
        }

        public static bool FMB_Resource_Event(FMB_Resource_Event_In_Tag Resource_Event_In, ref FMB_Resource_Event_Out_Tag Resource_Event_Out)
        {
            return FMB_Resource_Event("FMB_Resource_Event", Resource_Event_In, ref Resource_Event_Out);
        }
        public static bool FMB_Resource_Event(string FunctionName, FMB_Resource_Event_In_Tag Resource_Event_In, ref FMB_Resource_Event_Out_Tag Resource_Event_Out)
        {
            try
            {
                if (null == FMBUrl || FMBUrl.Trim().Equals(""))
                        throw new Exception("INVALID_URL");

                if (0 >= FMBTimeOut)
                        throw new Exception("INVALID_TIMEOUT");

                string sReplyMsg = null;
                string sSendMsg = null;
                byte[] aReplyData = null;
                SmartWebService oWebService = new SmartWebService();
                StreamTransformer former = new StreamTransformerImpl();

                oWebService.SetUrl(FMBUrl);
                oWebService.SetTimeOut(FMBTimeOut);

                FMBType.serialize_FMB_Resource_Event_In_Tag(former, Resource_Event_In);

                sSendMsg = FwxCmnFunction.PackMessage(former.getBytes());
                oWebService.RequestReply(FunctionName, sSendMsg, ref sReplyMsg);
                aReplyData = FwxCmnFunction.UnPackMessage(sReplyMsg);

                former = new StreamTransformerImpl(aReplyData);
                FMBType.transform_FMB_Resource_Event_Out_Tag(former, ref Resource_Event_Out);

    	    	return true;
    	    }
            catch(Exception ex)
            {
                throw ex;
            }
        }

        public static bool FMB_Collect_Res_Data(FMB_Resource_Event_In_Tag Resource_Event_In, ref FMB_Resource_Event_Out_Tag Resource_Event_Out)
        {
            return FMB_Collect_Res_Data("FMB_Collect_Res_Data", Resource_Event_In, ref Resource_Event_Out);
        }
        public static bool FMB_Collect_Res_Data(string FunctionName, FMB_Resource_Event_In_Tag Resource_Event_In, ref FMB_Resource_Event_Out_Tag Resource_Event_Out)
        {
            try
            {
                if (null == FMBUrl || FMBUrl.Trim().Equals(""))
                        throw new Exception("INVALID_URL");

                if (0 >= FMBTimeOut)
                        throw new Exception("INVALID_TIMEOUT");

                string sReplyMsg = null;
                string sSendMsg = null;
                byte[] aReplyData = null;
                SmartWebService oWebService = new SmartWebService();
                StreamTransformer former = new StreamTransformerImpl();

                oWebService.SetUrl(FMBUrl);
                oWebService.SetTimeOut(FMBTimeOut);

                FMBType.serialize_FMB_Resource_Event_In_Tag(former, Resource_Event_In);

                sSendMsg = FwxCmnFunction.PackMessage(former.getBytes());
                oWebService.RequestReply(FunctionName, sSendMsg, ref sReplyMsg);
                aReplyData = FwxCmnFunction.UnPackMessage(sReplyMsg);

                former = new StreamTransformerImpl(aReplyData);
                FMBType.transform_FMB_Resource_Event_Out_Tag(former, ref Resource_Event_Out);

    	    	return true;
    	    }
            catch(Exception ex)
            {
                throw ex;
            }
        }

        public static bool FMB_Find_Col_Set_Version(FMB_Find_Col_Set_Version_In_Tag Find_Col_Set_Version_In, ref FMB_Find_Col_Set_Version_Out_Tag Find_Col_Set_Version_Out)
        {
            return FMB_Find_Col_Set_Version("FMB_Find_Col_Set_Version", Find_Col_Set_Version_In, ref Find_Col_Set_Version_Out);
        }
        public static bool FMB_Find_Col_Set_Version(string FunctionName, FMB_Find_Col_Set_Version_In_Tag Find_Col_Set_Version_In, ref FMB_Find_Col_Set_Version_Out_Tag Find_Col_Set_Version_Out)
        {
            try
            {
                if (null == FMBUrl || FMBUrl.Trim().Equals(""))
                        throw new Exception("INVALID_URL");

                if (0 >= FMBTimeOut)
                        throw new Exception("INVALID_TIMEOUT");

                string sReplyMsg = null;
                string sSendMsg = null;
                byte[] aReplyData = null;
                SmartWebService oWebService = new SmartWebService();
                StreamTransformer former = new StreamTransformerImpl();

                oWebService.SetUrl(FMBUrl);
                oWebService.SetTimeOut(FMBTimeOut);

                FMBType.serialize_FMB_Find_Col_Set_Version_In_Tag(former, Find_Col_Set_Version_In);

                sSendMsg = FwxCmnFunction.PackMessage(former.getBytes());
                oWebService.RequestReply(FunctionName, sSendMsg, ref sReplyMsg);
                aReplyData = FwxCmnFunction.UnPackMessage(sReplyMsg);

                former = new StreamTransformerImpl(aReplyData);
                FMBType.transform_FMB_Find_Col_Set_Version_Out_Tag(former, ref Find_Col_Set_Version_Out);

    	    	return true;
    	    }
            catch(Exception ex)
            {
                throw ex;
            }
        }

        public static bool FMB_View_Attach_Character_List(FMB_View_Attach_Character_List_In_Tag View_Attach_Character_List_In, ref FMB_View_Attach_Character_List_Out_Tag View_Attach_Character_List_Out)
        {
            return FMB_View_Attach_Character_List("FMB_View_Attach_Character_List", View_Attach_Character_List_In, ref View_Attach_Character_List_Out);
        }
        public static bool FMB_View_Attach_Character_List(string FunctionName, FMB_View_Attach_Character_List_In_Tag View_Attach_Character_List_In, ref FMB_View_Attach_Character_List_Out_Tag View_Attach_Character_List_Out)
        {
            try
            {
                if (null == FMBUrl || FMBUrl.Trim().Equals(""))
                        throw new Exception("INVALID_URL");

                if (0 >= FMBTimeOut)
                        throw new Exception("INVALID_TIMEOUT");

                string sReplyMsg = null;
                string sSendMsg = null;
                byte[] aReplyData = null;
                SmartWebService oWebService = new SmartWebService();
                StreamTransformer former = new StreamTransformerImpl();

                oWebService.SetUrl(FMBUrl);
                oWebService.SetTimeOut(FMBTimeOut);

                FMBType.serialize_FMB_View_Attach_Character_List_In_Tag(former, View_Attach_Character_List_In);

                sSendMsg = FwxCmnFunction.PackMessage(former.getBytes());
                oWebService.RequestReply(FunctionName, sSendMsg, ref sReplyMsg);
                aReplyData = FwxCmnFunction.UnPackMessage(sReplyMsg);

                former = new StreamTransformerImpl(aReplyData);
                FMBType.transform_FMB_View_Attach_Character_List_Out_Tag(former, ref View_Attach_Character_List_Out);

    	    	return true;
    	    }
            catch(Exception ex)
            {
                throw ex;
            }
        }

        public static bool FMB_View_Default_Unit_List(FMB_View_Default_Unit_List_In_Tag View_Default_Unit_List_In, ref FMB_View_Default_Unit_List_Out_Tag View_Default_Unit_List_Out)
        {
            return FMB_View_Default_Unit_List("FMB_View_Default_Unit_List", View_Default_Unit_List_In, ref View_Default_Unit_List_Out);
        }
        public static bool FMB_View_Default_Unit_List(string FunctionName, FMB_View_Default_Unit_List_In_Tag View_Default_Unit_List_In, ref FMB_View_Default_Unit_List_Out_Tag View_Default_Unit_List_Out)
        {
            try
            {
                if (null == FMBUrl || FMBUrl.Trim().Equals(""))
                        throw new Exception("INVALID_URL");

                if (0 >= FMBTimeOut)
                        throw new Exception("INVALID_TIMEOUT");

                string sReplyMsg = null;
                string sSendMsg = null;
                byte[] aReplyData = null;
                SmartWebService oWebService = new SmartWebService();
                StreamTransformer former = new StreamTransformerImpl();

                oWebService.SetUrl(FMBUrl);
                oWebService.SetTimeOut(FMBTimeOut);

                FMBType.serialize_FMB_View_Default_Unit_List_In_Tag(former, View_Default_Unit_List_In);

                sSendMsg = FwxCmnFunction.PackMessage(former.getBytes());
                oWebService.RequestReply(FunctionName, sSendMsg, ref sReplyMsg);
                aReplyData = FwxCmnFunction.UnPackMessage(sReplyMsg);

                former = new StreamTransformerImpl(aReplyData);
                FMBType.transform_FMB_View_Default_Unit_List_Out_Tag(former, ref View_Default_Unit_List_Out);

    	    	return true;
    	    }
            catch(Exception ex)
            {
                throw ex;
            }
        }

        public static bool FMB_View_Event(FMB_View_Event_In_Tag View_Event_In, ref FMB_View_Event_Out_Tag View_Event_Out)
        {
            return FMB_View_Event("FMB_View_Event", View_Event_In, ref View_Event_Out);
        }
        public static bool FMB_View_Event(string FunctionName, FMB_View_Event_In_Tag View_Event_In, ref FMB_View_Event_Out_Tag View_Event_Out)
        {
            try
            {
                if (null == FMBUrl || FMBUrl.Trim().Equals(""))
                        throw new Exception("INVALID_URL");

                if (0 >= FMBTimeOut)
                        throw new Exception("INVALID_TIMEOUT");

                string sReplyMsg = null;
                string sSendMsg = null;
                byte[] aReplyData = null;
                SmartWebService oWebService = new SmartWebService();
                StreamTransformer former = new StreamTransformerImpl();

                oWebService.SetUrl(FMBUrl);
                oWebService.SetTimeOut(FMBTimeOut);

                FMBType.serialize_FMB_View_Event_In_Tag(former, View_Event_In);

                sSendMsg = FwxCmnFunction.PackMessage(former.getBytes());
                oWebService.RequestReply(FunctionName, sSendMsg, ref sReplyMsg);
                aReplyData = FwxCmnFunction.UnPackMessage(sReplyMsg);

                former = new StreamTransformerImpl(aReplyData);
                FMBType.transform_FMB_View_Event_Out_Tag(former, ref View_Event_Out);

    	    	return true;
    	    }
            catch(Exception ex)
            {
                throw ex;
            }
        }

        public static bool FMB_Update_Environment(FMB_Update_Environment_In_Tag Update_Environment_In, ref FMB_Cmn_Out_Tag Cmn_Out)
        {
            return FMB_Update_Environment("FMB_Update_Environment", Update_Environment_In, ref Cmn_Out);
        }
        public static bool FMB_Update_Environment(string FunctionName, FMB_Update_Environment_In_Tag Update_Environment_In, ref FMB_Cmn_Out_Tag Cmn_Out)
        {
            try
            {
                if (null == FMBUrl || FMBUrl.Trim().Equals(""))
                        throw new Exception("INVALID_URL");

                if (0 >= FMBTimeOut)
                        throw new Exception("INVALID_TIMEOUT");

                string sReplyMsg = null;
                string sSendMsg = null;
                byte[] aReplyData = null;
                SmartWebService oWebService = new SmartWebService();
                StreamTransformer former = new StreamTransformerImpl();

                oWebService.SetUrl(FMBUrl);
                oWebService.SetTimeOut(FMBTimeOut);

                FMBType.serialize_FMB_Update_Environment_In_Tag(former, Update_Environment_In);

                sSendMsg = FwxCmnFunction.PackMessage(former.getBytes());
                oWebService.RequestReply(FunctionName, sSendMsg, ref sReplyMsg);
                aReplyData = FwxCmnFunction.UnPackMessage(sReplyMsg);

                former = new StreamTransformerImpl(aReplyData);
                FMBCoreType.transform_FMB_Cmn_Out_Tag(former, ref Cmn_Out);

    	    	return true;
    	    }
            catch(Exception ex)
            {
                throw ex;
            }
        }

        public static bool FMB_View_Environment(FMB_View_Environment_In_Tag View_Environment_In, ref FMB_View_Environment_Out_Tag View_Environment_Out)
        {
            return FMB_View_Environment("FMB_View_Environment", View_Environment_In, ref View_Environment_Out);
        }
        public static bool FMB_View_Environment(string FunctionName, FMB_View_Environment_In_Tag View_Environment_In, ref FMB_View_Environment_Out_Tag View_Environment_Out)
        {
            try
            {
                if (null == FMBUrl || FMBUrl.Trim().Equals(""))
                        throw new Exception("INVALID_URL");

                if (0 >= FMBTimeOut)
                        throw new Exception("INVALID_TIMEOUT");

                string sReplyMsg = null;
                string sSendMsg = null;
                byte[] aReplyData = null;
                SmartWebService oWebService = new SmartWebService();
                StreamTransformer former = new StreamTransformerImpl();

                oWebService.SetUrl(FMBUrl);
                oWebService.SetTimeOut(FMBTimeOut);

                FMBType.serialize_FMB_View_Environment_In_Tag(former, View_Environment_In);

                sSendMsg = FwxCmnFunction.PackMessage(former.getBytes());
                oWebService.RequestReply(FunctionName, sSendMsg, ref sReplyMsg);
                aReplyData = FwxCmnFunction.UnPackMessage(sReplyMsg);

                former = new StreamTransformerImpl(aReplyData);
                FMBType.transform_FMB_View_Environment_Out_Tag(former, ref View_Environment_Out);

    	    	return true;
    	    }
            catch(Exception ex)
            {
                throw ex;
            }
        }

        public static bool FMB_View_Environment_List(FMB_View_Environment_List_In_Tag View_Environment_List_In, ref FMB_View_Environment_List_Out_Tag View_Environment_List_Out)
        {
            return FMB_View_Environment_List("FMB_View_Environment_List", View_Environment_List_In, ref View_Environment_List_Out);
        }
        public static bool FMB_View_Environment_List(string FunctionName, FMB_View_Environment_List_In_Tag View_Environment_List_In, ref FMB_View_Environment_List_Out_Tag View_Environment_List_Out)
        {
            try
            {
                if (null == FMBUrl || FMBUrl.Trim().Equals(""))
                        throw new Exception("INVALID_URL");

                if (0 >= FMBTimeOut)
                        throw new Exception("INVALID_TIMEOUT");

                string sReplyMsg = null;
                string sSendMsg = null;
                byte[] aReplyData = null;
                SmartWebService oWebService = new SmartWebService();
                StreamTransformer former = new StreamTransformerImpl();

                oWebService.SetUrl(FMBUrl);
                oWebService.SetTimeOut(FMBTimeOut);

                FMBType.serialize_FMB_View_Environment_List_In_Tag(former, View_Environment_List_In);

                sSendMsg = FwxCmnFunction.PackMessage(former.getBytes());
                oWebService.RequestReply(FunctionName, sSendMsg, ref sReplyMsg);
                aReplyData = FwxCmnFunction.UnPackMessage(sReplyMsg);

                former = new StreamTransformerImpl(aReplyData);
                FMBType.transform_FMB_View_Environment_List_Out_Tag(former, ref View_Environment_List_Out);

    	    	return true;
    	    }
            catch(Exception ex)
            {
                throw ex;
            }
        }

        public static bool FMB_Update_Event_Color(FMB_Update_Event_Color_In_Tag Update_Event_Color_In, ref FMB_Cmn_Out_Tag Cmn_Out)
        {
            return FMB_Update_Event_Color("FMB_Update_Event_Color", Update_Event_Color_In, ref Cmn_Out);
        }
        public static bool FMB_Update_Event_Color(string FunctionName, FMB_Update_Event_Color_In_Tag Update_Event_Color_In, ref FMB_Cmn_Out_Tag Cmn_Out)
        {
            try
            {
                if (null == FMBUrl || FMBUrl.Trim().Equals(""))
                        throw new Exception("INVALID_URL");

                if (0 >= FMBTimeOut)
                        throw new Exception("INVALID_TIMEOUT");

                string sReplyMsg = null;
                string sSendMsg = null;
                byte[] aReplyData = null;
                SmartWebService oWebService = new SmartWebService();
                StreamTransformer former = new StreamTransformerImpl();

                oWebService.SetUrl(FMBUrl);
                oWebService.SetTimeOut(FMBTimeOut);

                FMBType.serialize_FMB_Update_Event_Color_In_Tag(former, Update_Event_Color_In);

                sSendMsg = FwxCmnFunction.PackMessage(former.getBytes());
                oWebService.RequestReply(FunctionName, sSendMsg, ref sReplyMsg);
                aReplyData = FwxCmnFunction.UnPackMessage(sReplyMsg);

                former = new StreamTransformerImpl(aReplyData);
                FMBCoreType.transform_FMB_Cmn_Out_Tag(former, ref Cmn_Out);

    	    	return true;
    	    }
            catch(Exception ex)
            {
                throw ex;
            }
        }

        public static bool FMB_View_Event_Color_List(FMB_View_Event_Color_List_In_Tag View_Event_Color_List_In, ref FMB_View_Event_Color_List_Out_Tag View_Event_Color_List_Out)
        {
            return FMB_View_Event_Color_List("FMB_View_Event_Color_List", View_Event_Color_List_In, ref View_Event_Color_List_Out);
        }
        public static bool FMB_View_Event_Color_List(string FunctionName, FMB_View_Event_Color_List_In_Tag View_Event_Color_List_In, ref FMB_View_Event_Color_List_Out_Tag View_Event_Color_List_Out)
        {
            try
            {
                if (null == FMBUrl || FMBUrl.Trim().Equals(""))
                        throw new Exception("INVALID_URL");

                if (0 >= FMBTimeOut)
                        throw new Exception("INVALID_TIMEOUT");

                string sReplyMsg = null;
                string sSendMsg = null;
                byte[] aReplyData = null;
                SmartWebService oWebService = new SmartWebService();
                StreamTransformer former = new StreamTransformerImpl();

                oWebService.SetUrl(FMBUrl);
                oWebService.SetTimeOut(FMBTimeOut);

                FMBType.serialize_FMB_View_Event_Color_List_In_Tag(former, View_Event_Color_List_In);

                sSendMsg = FwxCmnFunction.PackMessage(former.getBytes());
                oWebService.RequestReply(FunctionName, sSendMsg, ref sReplyMsg);
                aReplyData = FwxCmnFunction.UnPackMessage(sReplyMsg);

                former = new StreamTransformerImpl(aReplyData);
                FMBType.transform_FMB_View_Event_Color_List_Out_Tag(former, ref View_Event_Color_List_Out);

    	    	return true;
    	    }
            catch(Exception ex)
            {
                throw ex;
            }
        }

        public static bool FMB_View_Event_Color(FMB_View_Event_Color_In_Tag View_Event_Color_In, ref FMB_View_Event_Color_Out_Tag View_Event_Color_Out)
        {
            return FMB_View_Event_Color("FMB_View_Event_Color", View_Event_Color_In, ref View_Event_Color_Out);
        }
        public static bool FMB_View_Event_Color(string FunctionName, FMB_View_Event_Color_In_Tag View_Event_Color_In, ref FMB_View_Event_Color_Out_Tag View_Event_Color_Out)
        {
            try
            {
                if (null == FMBUrl || FMBUrl.Trim().Equals(""))
                        throw new Exception("INVALID_URL");

                if (0 >= FMBTimeOut)
                        throw new Exception("INVALID_TIMEOUT");

                string sReplyMsg = null;
                string sSendMsg = null;
                byte[] aReplyData = null;
                SmartWebService oWebService = new SmartWebService();
                StreamTransformer former = new StreamTransformerImpl();

                oWebService.SetUrl(FMBUrl);
                oWebService.SetTimeOut(FMBTimeOut);

                FMBType.serialize_FMB_View_Event_Color_In_Tag(former, View_Event_Color_In);

                sSendMsg = FwxCmnFunction.PackMessage(former.getBytes());
                oWebService.RequestReply(FunctionName, sSendMsg, ref sReplyMsg);
                aReplyData = FwxCmnFunction.UnPackMessage(sReplyMsg);

                former = new StreamTransformerImpl(aReplyData);
                FMBType.transform_FMB_View_Event_Color_Out_Tag(former, ref View_Event_Color_Out);

    	    	return true;
    	    }
            catch(Exception ex)
            {
                throw ex;
            }
        }

        public static bool FMB_Update_Resource_Image(FMB_Update_Resource_Image_In_Tag Update_Resource_Image_In, ref FMB_Cmn_Out_Tag Cmn_Out)
        {
            return FMB_Update_Resource_Image("FMB_Update_Resource_Image", Update_Resource_Image_In, ref Cmn_Out);
        }
        public static bool FMB_Update_Resource_Image(string FunctionName, FMB_Update_Resource_Image_In_Tag Update_Resource_Image_In, ref FMB_Cmn_Out_Tag Cmn_Out)
        {
            try
            {
                if (null == FMBUrl || FMBUrl.Trim().Equals(""))
                        throw new Exception("INVALID_URL");

                if (0 >= FMBTimeOut)
                        throw new Exception("INVALID_TIMEOUT");

                string sReplyMsg = null;
                string sSendMsg = null;
                byte[] aReplyData = null;
                SmartWebService oWebService = new SmartWebService();
                StreamTransformer former = new StreamTransformerImpl();

                oWebService.SetUrl(FMBUrl);
                oWebService.SetTimeOut(FMBTimeOut);

                FMBType.serialize_FMB_Update_Resource_Image_In_Tag(former, Update_Resource_Image_In);

                sSendMsg = FwxCmnFunction.PackMessage(former.getBytes());
                oWebService.RequestReply(FunctionName, sSendMsg, ref sReplyMsg);
                aReplyData = FwxCmnFunction.UnPackMessage(sReplyMsg);

                former = new StreamTransformerImpl(aReplyData);
                FMBCoreType.transform_FMB_Cmn_Out_Tag(former, ref Cmn_Out);

    	    	return true;
    	    }
            catch(Exception ex)
            {
                throw ex;
            }
        }

        public static bool FMB_View_Resource_Image_List(FMB_View_Resource_Image_List_In_Tag View_Resource_Image_List_In, ref FMB_View_Resource_Image_List_Out_Tag View_Resource_Image_List_Out)
        {
            return FMB_View_Resource_Image_List("FMB_View_Resource_Image_List", View_Resource_Image_List_In, ref View_Resource_Image_List_Out);
        }
        public static bool FMB_View_Resource_Image_List(string FunctionName, FMB_View_Resource_Image_List_In_Tag View_Resource_Image_List_In, ref FMB_View_Resource_Image_List_Out_Tag View_Resource_Image_List_Out)
        {
            try
            {
                if (null == FMBUrl || FMBUrl.Trim().Equals(""))
                        throw new Exception("INVALID_URL");

                if (0 >= FMBTimeOut)
                        throw new Exception("INVALID_TIMEOUT");

                string sReplyMsg = null;
                string sSendMsg = null;
                byte[] aReplyData = null;
                SmartWebService oWebService = new SmartWebService();
                StreamTransformer former = new StreamTransformerImpl();

                oWebService.SetUrl(FMBUrl);
                oWebService.SetTimeOut(FMBTimeOut);

                FMBType.serialize_FMB_View_Resource_Image_List_In_Tag(former, View_Resource_Image_List_In);

                sSendMsg = FwxCmnFunction.PackMessage(former.getBytes());
                oWebService.RequestReply(FunctionName, sSendMsg, ref sReplyMsg);
                aReplyData = FwxCmnFunction.UnPackMessage(sReplyMsg);

                former = new StreamTransformerImpl(aReplyData);
                FMBType.transform_FMB_View_Resource_Image_List_Out_Tag(former, ref View_Resource_Image_List_Out);

    	    	return true;
    	    }
            catch(Exception ex)
            {
                throw ex;
            }
        }

        public static bool FMB_Update_ResLoc_List(FMB_Update_ResLoc_List_In_Tag Update_ResLoc_List_In, ref FMB_Cmn_Out_Tag Cmn_Out)
        {
            return FMB_Update_ResLoc_List("FMB_Update_ResLoc_List", Update_ResLoc_List_In, ref Cmn_Out);
        }
        public static bool FMB_Update_ResLoc_List(string FunctionName, FMB_Update_ResLoc_List_In_Tag Update_ResLoc_List_In, ref FMB_Cmn_Out_Tag Cmn_Out)
        {
            try
            {
                if (null == FMBUrl || FMBUrl.Trim().Equals(""))
                        throw new Exception("INVALID_URL");

                if (0 >= FMBTimeOut)
                        throw new Exception("INVALID_TIMEOUT");

                string sReplyMsg = null;
                string sSendMsg = null;
                byte[] aReplyData = null;
                SmartWebService oWebService = new SmartWebService();
                StreamTransformer former = new StreamTransformerImpl();

                oWebService.SetUrl(FMBUrl);
                oWebService.SetTimeOut(FMBTimeOut);

                FMBType.serialize_FMB_Update_ResLoc_List_In_Tag(former, Update_ResLoc_List_In);

                sSendMsg = FwxCmnFunction.PackMessage(former.getBytes());
                oWebService.RequestReply(FunctionName, sSendMsg, ref sReplyMsg);
                aReplyData = FwxCmnFunction.UnPackMessage(sReplyMsg);

                former = new StreamTransformerImpl(aReplyData);
                FMBCoreType.transform_FMB_Cmn_Out_Tag(former, ref Cmn_Out);

    	    	return true;
    	    }
            catch(Exception ex)
            {
                throw ex;
            }
        }

        public static bool FMB_Update_UDRLoc_List(FMB_Update_UDRLoc_List_In_Tag Update_UDRLoc_List_In, ref FMB_Cmn_Out_Tag Cmn_Out)
        {
            return FMB_Update_UDRLoc_List("FMB_Update_UDRLoc_List", Update_UDRLoc_List_In, ref Cmn_Out);
        }
        public static bool FMB_Update_UDRLoc_List(string FunctionName, FMB_Update_UDRLoc_List_In_Tag Update_UDRLoc_List_In, ref FMB_Cmn_Out_Tag Cmn_Out)
        {
            try
            {
                if (null == FMBUrl || FMBUrl.Trim().Equals(""))
                        throw new Exception("INVALID_URL");

                if (0 >= FMBTimeOut)
                        throw new Exception("INVALID_TIMEOUT");

                string sReplyMsg = null;
                string sSendMsg = null;
                byte[] aReplyData = null;
                SmartWebService oWebService = new SmartWebService();
                StreamTransformer former = new StreamTransformerImpl();

                oWebService.SetUrl(FMBUrl);
                oWebService.SetTimeOut(FMBTimeOut);

                FMBType.serialize_FMB_Update_UDRLoc_List_In_Tag(former, Update_UDRLoc_List_In);

                sSendMsg = FwxCmnFunction.PackMessage(former.getBytes());
                oWebService.RequestReply(FunctionName, sSendMsg, ref sReplyMsg);
                aReplyData = FwxCmnFunction.UnPackMessage(sReplyMsg);

                former = new StreamTransformerImpl(aReplyData);
                FMBCoreType.transform_FMB_Cmn_Out_Tag(former, ref Cmn_Out);

    	    	return true;
    	    }
            catch(Exception ex)
            {
                throw ex;
            }
        }

        public static bool FMB_Check_Version(FMB_Check_Version_In_Tag Check_Version_In, ref FMB_Check_Version_Out_Tag Check_Version_Out)
        {
            return FMB_Check_Version("FMB_Check_Version", Check_Version_In, ref Check_Version_Out);
        }
        public static bool FMB_Check_Version(string FunctionName, FMB_Check_Version_In_Tag Check_Version_In, ref FMB_Check_Version_Out_Tag Check_Version_Out)
        {
            try
            {
                if (null == FMBUrl || FMBUrl.Trim().Equals(""))
                        throw new Exception("INVALID_URL");

                if (0 >= FMBTimeOut)
                        throw new Exception("INVALID_TIMEOUT");

                string sReplyMsg = null;
                string sSendMsg = null;
                byte[] aReplyData = null;
                SmartWebService oWebService = new SmartWebService();
                StreamTransformer former = new StreamTransformerImpl();

                oWebService.SetUrl(FMBUrl);
                oWebService.SetTimeOut(FMBTimeOut);

                FMBCoreType.serialize_FMB_Check_Version_In_Tag(former, Check_Version_In);

                sSendMsg = FwxCmnFunction.PackMessage(former.getBytes());
                oWebService.RequestReply(FunctionName, sSendMsg, ref sReplyMsg);
                aReplyData = FwxCmnFunction.UnPackMessage(sReplyMsg);

                former = new StreamTransformerImpl(aReplyData);
                FMBCoreType.transform_FMB_Check_Version_Out_Tag(former, ref Check_Version_Out);

    	    	return true;
    	    }
            catch(Exception ex)
            {
                throw ex;
            }
        }

        public static bool FMB_View_Function_List(FMB_View_Function_List_In_Tag View_Function_List_In, ref FMB_View_Function_List_Out_Tag View_Function_List_Out)
        {
            return FMB_View_Function_List("FMB_View_Function_List", View_Function_List_In, ref View_Function_List_Out);
        }
        public static bool FMB_View_Function_List(string FunctionName, FMB_View_Function_List_In_Tag View_Function_List_In, ref FMB_View_Function_List_Out_Tag View_Function_List_Out)
        {
            try
            {
                if (null == FMBUrl || FMBUrl.Trim().Equals(""))
                        throw new Exception("INVALID_URL");

                if (0 >= FMBTimeOut)
                        throw new Exception("INVALID_TIMEOUT");

                string sReplyMsg = null;
                string sSendMsg = null;
                byte[] aReplyData = null;
                SmartWebService oWebService = new SmartWebService();
                StreamTransformer former = new StreamTransformerImpl();

                oWebService.SetUrl(FMBUrl);
                oWebService.SetTimeOut(FMBTimeOut);

                FMBType.serialize_FMB_View_Function_List_In_Tag(former, View_Function_List_In);

                sSendMsg = FwxCmnFunction.PackMessage(former.getBytes());
                oWebService.RequestReply(FunctionName, sSendMsg, ref sReplyMsg);
                aReplyData = FwxCmnFunction.UnPackMessage(sReplyMsg);

                former = new StreamTransformerImpl(aReplyData);
                FMBType.transform_FMB_View_Function_List_Out_Tag(former, ref View_Function_List_Out);

    	    	return true;
    	    }
            catch(Exception ex)
            {
                throw ex;
            }
        }

        public static bool FMB_View_Function_Detail(FMB_View_Function_Detail_In_Tag View_Function_In, ref FMB_View_Function_Detail_Out_Tag View_Function_Out)
        {
            return FMB_View_Function_Detail("FMB_View_Function_Detail", View_Function_In, ref View_Function_Out);
        }
        public static bool FMB_View_Function_Detail(string FunctionName, FMB_View_Function_Detail_In_Tag View_Function_In, ref FMB_View_Function_Detail_Out_Tag View_Function_Out)
        {
            try
            {
                if (null == FMBUrl || FMBUrl.Trim().Equals(""))
                        throw new Exception("INVALID_URL");

                if (0 >= FMBTimeOut)
                        throw new Exception("INVALID_TIMEOUT");

                string sReplyMsg = null;
                string sSendMsg = null;
                byte[] aReplyData = null;
                SmartWebService oWebService = new SmartWebService();
                StreamTransformer former = new StreamTransformerImpl();

                oWebService.SetUrl(FMBUrl);
                oWebService.SetTimeOut(FMBTimeOut);

                FMBType.serialize_FMB_View_Function_Detail_In_Tag(former, View_Function_In);

                sSendMsg = FwxCmnFunction.PackMessage(former.getBytes());
                oWebService.RequestReply(FunctionName, sSendMsg, ref sReplyMsg);
                aReplyData = FwxCmnFunction.UnPackMessage(sReplyMsg);

                former = new StreamTransformerImpl(aReplyData);
                FMBType.transform_FMB_View_Function_Detail_Out_Tag(former, ref View_Function_Out);

    	    	return true;
    	    }
            catch(Exception ex)
            {
                throw ex;
            }
        }

        public static bool FMB_Get_HelpURL(FMB_Get_HelpURL_In_Tag Get_HelpURL_In, ref FMB_Get_HelpURL_Out_Tag Get_HelpURL_Out)
        {
            return FMB_Get_HelpURL("FMB_Get_HelpURL", Get_HelpURL_In, ref Get_HelpURL_Out);
        }
        public static bool FMB_Get_HelpURL(string FunctionName, FMB_Get_HelpURL_In_Tag Get_HelpURL_In, ref FMB_Get_HelpURL_Out_Tag Get_HelpURL_Out)
        {
            try
            {
                if (null == FMBUrl || FMBUrl.Trim().Equals(""))
                        throw new Exception("INVALID_URL");

                if (0 >= FMBTimeOut)
                        throw new Exception("INVALID_TIMEOUT");

                string sReplyMsg = null;
                string sSendMsg = null;
                byte[] aReplyData = null;
                SmartWebService oWebService = new SmartWebService();
                StreamTransformer former = new StreamTransformerImpl();

                oWebService.SetUrl(FMBUrl);
                oWebService.SetTimeOut(FMBTimeOut);

                FMBType.serialize_FMB_Get_HelpURL_In_Tag(former, Get_HelpURL_In);

                sSendMsg = FwxCmnFunction.PackMessage(former.getBytes());
                oWebService.RequestReply(FunctionName, sSendMsg, ref sReplyMsg);
                aReplyData = FwxCmnFunction.UnPackMessage(sReplyMsg);

                former = new StreamTransformerImpl(aReplyData);
                FMBType.transform_FMB_Get_HelpURL_Out_Tag(former, ref Get_HelpURL_Out);

    	    	return true;
    	    }
            catch(Exception ex)
            {
                throw ex;
            }
        }

        public static bool FMB_View_Attach_Character(FMB_View_Attach_Character_In_Tag View_Attach_Character_In, ref FMB_View_Attach_Character_Out_Tag View_Attach_Character_Out)
        {
            return FMB_View_Attach_Character("FMB_View_Attach_Character", View_Attach_Character_In, ref View_Attach_Character_Out);
        }
        public static bool FMB_View_Attach_Character(string FunctionName, FMB_View_Attach_Character_In_Tag View_Attach_Character_In, ref FMB_View_Attach_Character_Out_Tag View_Attach_Character_Out)
        {
            try
            {
                if (null == FMBUrl || FMBUrl.Trim().Equals(""))
                        throw new Exception("INVALID_URL");

                if (0 >= FMBTimeOut)
                        throw new Exception("INVALID_TIMEOUT");

                string sReplyMsg = null;
                string sSendMsg = null;
                byte[] aReplyData = null;
                SmartWebService oWebService = new SmartWebService();
                StreamTransformer former = new StreamTransformerImpl();

                oWebService.SetUrl(FMBUrl);
                oWebService.SetTimeOut(FMBTimeOut);

                FMBType.serialize_FMB_View_Attach_Character_In_Tag(former, View_Attach_Character_In);

                sSendMsg = FwxCmnFunction.PackMessage(former.getBytes());
                oWebService.RequestReply(FunctionName, sSendMsg, ref sReplyMsg);
                aReplyData = FwxCmnFunction.UnPackMessage(sReplyMsg);

                former = new StreamTransformerImpl(aReplyData);
                FMBType.transform_FMB_View_Attach_Character_Out_Tag(former, ref View_Attach_Character_Out);

    	    	return true;
    	    }
            catch(Exception ex)
            {
                throw ex;
            }
        }

        public static bool FMB_Copy_UDR_Group(FMB_Copy_UDR_Group_In_Tag Copy_UDR_Group_In, ref FMB_Cmn_Out_Tag Cmn_Out)
        {
            return FMB_Copy_UDR_Group("FMB_Copy_UDR_Group", Copy_UDR_Group_In, ref Cmn_Out);
        }
        public static bool FMB_Copy_UDR_Group(string FunctionName, FMB_Copy_UDR_Group_In_Tag Copy_UDR_Group_In, ref FMB_Cmn_Out_Tag Cmn_Out)
        {
            try
            {
                if (null == FMBUrl || FMBUrl.Trim().Equals(""))
                        throw new Exception("INVALID_URL");

                if (0 >= FMBTimeOut)
                        throw new Exception("INVALID_TIMEOUT");

                string sReplyMsg = null;
                string sSendMsg = null;
                byte[] aReplyData = null;
                SmartWebService oWebService = new SmartWebService();
                StreamTransformer former = new StreamTransformerImpl();

                oWebService.SetUrl(FMBUrl);
                oWebService.SetTimeOut(FMBTimeOut);

                FMBType.serialize_FMB_Copy_UDR_Group_In_Tag(former, Copy_UDR_Group_In);

                sSendMsg = FwxCmnFunction.PackMessage(former.getBytes());
                oWebService.RequestReply(FunctionName, sSendMsg, ref sReplyMsg);
                aReplyData = FwxCmnFunction.UnPackMessage(sReplyMsg);

                former = new StreamTransformerImpl(aReplyData);
                FMBCoreType.transform_FMB_Cmn_Out_Tag(former, ref Cmn_Out);

    	    	return true;
    	    }
            catch(Exception ex)
            {
                throw ex;
            }
        }

        public static bool FMB_Update_FMB_Group(FMB_Update_FMB_Group_In_Tag Update_FMB_Group_In, ref FMB_Cmn_Out_Tag Cmn_Out)
        {
            return FMB_Update_FMB_Group("FMB_Update_FMB_Group", Update_FMB_Group_In, ref Cmn_Out);
        }
        public static bool FMB_Update_FMB_Group(string FunctionName, FMB_Update_FMB_Group_In_Tag Update_FMB_Group_In, ref FMB_Cmn_Out_Tag Cmn_Out)
        {
            try
            {
                if (null == FMBUrl || FMBUrl.Trim().Equals(""))
                        throw new Exception("INVALID_URL");

                if (0 >= FMBTimeOut)
                        throw new Exception("INVALID_TIMEOUT");

                string sReplyMsg = null;
                string sSendMsg = null;
                byte[] aReplyData = null;
                SmartWebService oWebService = new SmartWebService();
                StreamTransformer former = new StreamTransformerImpl();

                oWebService.SetUrl(FMBUrl);
                oWebService.SetTimeOut(FMBTimeOut);

                FMBType.serialize_FMB_Update_FMB_Group_In_Tag(former, Update_FMB_Group_In);

                sSendMsg = FwxCmnFunction.PackMessage(former.getBytes());
                oWebService.RequestReply(FunctionName, sSendMsg, ref sReplyMsg);
                aReplyData = FwxCmnFunction.UnPackMessage(sReplyMsg);

                former = new StreamTransformerImpl(aReplyData);
                FMBCoreType.transform_FMB_Cmn_Out_Tag(former, ref Cmn_Out);

    	    	return true;
    	    }
            catch(Exception ex)
            {
                throw ex;
            }
        }

        public static bool FMB_View_FMB_Group_List(FMB_View_FMB_Group_List_In_Tag View_FMB_Group_List_In, ref FMB_View_FMB_Group_List_Out_Tag View_FMB_Group_List_Out)
        {
            return FMB_View_FMB_Group_List("FMB_View_FMB_Group_List", View_FMB_Group_List_In, ref View_FMB_Group_List_Out);
        }
        public static bool FMB_View_FMB_Group_List(string FunctionName, FMB_View_FMB_Group_List_In_Tag View_FMB_Group_List_In, ref FMB_View_FMB_Group_List_Out_Tag View_FMB_Group_List_Out)
        {
            try
            {
                if (null == FMBUrl || FMBUrl.Trim().Equals(""))
                        throw new Exception("INVALID_URL");

                if (0 >= FMBTimeOut)
                        throw new Exception("INVALID_TIMEOUT");

                string sReplyMsg = null;
                string sSendMsg = null;
                byte[] aReplyData = null;
                SmartWebService oWebService = new SmartWebService();
                StreamTransformer former = new StreamTransformerImpl();

                oWebService.SetUrl(FMBUrl);
                oWebService.SetTimeOut(FMBTimeOut);

                FMBType.serialize_FMB_View_FMB_Group_List_In_Tag(former, View_FMB_Group_List_In);

                sSendMsg = FwxCmnFunction.PackMessage(former.getBytes());
                oWebService.RequestReply(FunctionName, sSendMsg, ref sReplyMsg);
                aReplyData = FwxCmnFunction.UnPackMessage(sReplyMsg);

                former = new StreamTransformerImpl(aReplyData);
                FMBType.transform_FMB_View_FMB_Group_List_Out_Tag(former, ref View_FMB_Group_List_Out);

    	    	return true;
    	    }
            catch(Exception ex)
            {
                throw ex;
            }
        }


    }
}

