/*******************************************************************************
' FMBType.cs
'
' Copyright (c) 2007 by Miracom,Inc.
' All rights reserved.
'
' Generated by DevTool XMLGen 1.0
'
' Created at 2008-05-28 10:43:57
'
' Author : Miracom. R&D.
' Description : DevTool Xml Generator Version 1.0
'******************************************************************************/

using System;
using com.miracom.transceiverx.message.former;

namespace Miracom.SmartWeb
{
    public class FMB_Update_ResLoc_In_Tag
    {
        public FMB_UPDATE_RESLOC_IN_TAG _C = new FMB_UPDATE_RESLOC_IN_TAG();
    }

    public class FMB_Update_UDR_Group_In_Tag
    {
        public FMB_UPDATE_UDR_GROUP_IN_TAG _C = new FMB_UPDATE_UDR_GROUP_IN_TAG();
    }

    public class FMB_Update_UDR_ResLoc_In_Tag
    {
        public FMB_UPDATE_UDR_RESLOC_IN_TAG _C = new FMB_UPDATE_UDR_RESLOC_IN_TAG();
    }

    public class FMB_Update_LayOut_In_Tag
    {
        public FMB_UPDATE_LAYOUT_IN_TAG _C = new FMB_UPDATE_LAYOUT_IN_TAG();
    }

    public class FMB_Moving_by_Force_In_Tag
    {
        public FMB_MOVING_BY_FORCE_IN_TAG _C = new FMB_MOVING_BY_FORCE_IN_TAG();
    }

    public class FMB_Exist_Control_In_Tag
    {
        public FMB_EXIST_CONTROL_IN_TAG _C = new FMB_EXIST_CONTROL_IN_TAG();
    }

    public class FMB_Exist_Control_Out_Tag
    {
        public FMB_EXIST_CONTROL_OUT_TAG _C = new FMB_EXIST_CONTROL_OUT_TAG();
    }

    public class FMB_Resource_Priority_In_Tag
    {
        public FMB_RESOURCE_PRIORITY_IN_TAG _C = new FMB_RESOURCE_PRIORITY_IN_TAG();
    }

    public class FMB_UDR_Priority_In_Tag
    {
        public FMB_UDR_PRIORITY_IN_TAG _C = new FMB_UDR_PRIORITY_IN_TAG();
    }

    public class FMB_Resource_Event_In_Tag
    {
        public FMB_RESOURCE_EVENT_IN_TAG _C = new FMB_RESOURCE_EVENT_IN_TAG();
    }

    public class FMB_Resource_Event_Out_Tag
    {
        public FMB_RESOURCE_EVENT_OUT_TAG _C = new FMB_RESOURCE_EVENT_OUT_TAG();
    }

    public class FMB_Update_Environment_In_Tag
    {
        public FMB_UPDATE_ENVIRONMENT_IN_TAG _C = new FMB_UPDATE_ENVIRONMENT_IN_TAG();
    }

    public class FMB_Update_Event_Color_In_Tag
    {
        public FMB_UPDATE_EVENT_COLOR_IN_TAG _C = new FMB_UPDATE_EVENT_COLOR_IN_TAG();
    }

    public class FMB_Update_Resource_Image_In_Tag
    {
        public FMB_UPDATE_RESOURCE_IMAGE_IN_TAG _C = new FMB_UPDATE_RESOURCE_IMAGE_IN_TAG();
    }

    public class FMB_Update_ResLoc_List_In_Tag
    {
        public FMB_UPDATE_RESLOC_LIST_IN_TAG _C = new FMB_UPDATE_RESLOC_LIST_IN_TAG();
    }

    public class FMB_Update_UDRLoc_List_In_Tag
    {
        public FMB_UPDATE_UDRLOC_LIST_IN_TAG _C = new FMB_UPDATE_UDRLOC_LIST_IN_TAG();
    }

    public class FMB_Copy_UDR_Group_In_Tag
    {
        public FMB_COPY_UDR_GROUP_IN_TAG _C = new FMB_COPY_UDR_GROUP_IN_TAG();
    }

    public class FMB_Update_FMB_Group_In_Tag
    {
        public FMB_UPDATE_FMB_GROUP_IN_TAG _C = new FMB_UPDATE_FMB_GROUP_IN_TAG();
    }

    public class FMB_Find_Col_Set_Version_In_Tag
    {
        public FMB_FIND_COL_SET_VERSION_IN_TAG _C = new FMB_FIND_COL_SET_VERSION_IN_TAG();
    }

    public class FMB_Find_Col_Set_Version_Out_Tag
    {
        public FMB_FIND_COL_SET_VERSION_OUT_TAG _C = new FMB_FIND_COL_SET_VERSION_OUT_TAG();
    }

    public class FMB_View_Factory_List_In_Tag
    {
        public string  h_passport;
        public char    h_language;
        public string  h_factory;
        public string  h_user_id;
        public string  h_password;
        public char    h_proc_step;
        public string  next_factory;
    }

    public class FMB_View_Factory_List_Out_Tag_factory_list
    {
        public string  factory;
        public string  fac_desc;
    }

    public class FMB_View_Factory_List_Out_Tag
    {
        public char    h_status_value;
        public string  h_msg_code;
        public string  h_msg;
        public string  h_field_msg;
        public string  h_db_err_msg;
        public int     count;
        public string  next_factory;
        public int     _size_factory_list;
        public FMB_View_Factory_List_Out_Tag_factory_list[] factory_list;
    }

    public class FMB_View_UDR_Group_List_In_Tag
    {
        public string  h_passport;
        public char    h_language;
        public string  h_factory;
        public string  h_user_id;
        public string  h_password;
        public char    h_proc_step;
        public string  user_name;
        public string  next_group;
    }

    public class FMB_View_UDR_Group_List_Out_Tag_udr_group_list
    {
        public string  group;
        public string  group_desc;
        public int     width;
        public int     height;
    }

    public class FMB_View_UDR_Group_List_Out_Tag
    {
        public char    h_status_value;
        public string  h_msg_code;
        public string  h_msg;
        public string  h_field_msg;
        public string  h_db_err_msg;
        public int     count;
        public string  next_group;
        public int     _size_udr_group_list;
        public FMB_View_UDR_Group_List_Out_Tag_udr_group_list[] udr_group_list;
    }

    public class FMB_View_Resource_List_In_Tag
    {
        public string  h_passport;
        public char    h_language;
        public string  h_factory;
        public string  h_user_id;
        public string  h_password;
        public char    h_proc_step;
        public char    res_type;
        public string  layout_id;
        public string  next_res_id;
        public int     next_seq;
        public string  res_grp;
        public string  area_id;
        public string  sub_area_id;
        public string  filter;
        public char    include_del_res;
        public char    include_proc_lot_info;
    }

    public class FMB_View_Resource_List_Out_Tag_res_list
    {
        public string  res_id;
        public string  res_desc;
        public char    attached_flag;
        public string  layout_id;
        public char    delete_flag;
        public char    res_up_down_flag;
        public string  res_type;
        public string  area_id;
        public string  sub_area_id;
        public string  res_pri_sts;
        public string  res_ctrl_mode;
        public string  res_proc_mode;
        public string  last_start_time;
        public string  last_end_time;
        public string  last_down_time;
        public string  last_event;
        public string  last_event_time;
        public int     img_idx;
    }

    public class FMB_View_Resource_List_Out_Tag
    {
        public char    h_status_value;
        public string  h_msg_code;
        public string  h_msg;
        public string  h_field_msg;
        public string  h_db_err_msg;
        public int     count;
        public string  next_res_id;
        public int     _size_res_list;
        public FMB_View_Resource_List_Out_Tag_res_list[] res_list;
    }

    public class FMB_View_Resource_List_Out_Detail_Tag_res_list
    {
        public string  res_id;
        public int     seq;
        public char    res_tag_flag;
        public string  layout_id;
        public int     loc_x;
        public int     loc_y;
        public int     loc_width;
        public int     loc_height;
        public string  text;
        public int     text_size;
        public int     text_color;
        public char    text_style;
        public int     tag_type;
        public int     back_color;
        public string  create_user_id;
        public string  create_time;
        public string  update_user_id;
        public string  update_time;
        public string  res_desc;
        public string  res_type;
        public string  area_id;
        public string  sub_area_id;
        public string  res_location;
        public char    proc_rule;
        public int     max_proc_count;
        public char    res_up_down_flag;
        public string  res_pri_sts;
        public string  lot_id;
        public string  sublot_id;
        public string  crr_id;
        public string  res_ctrl_mode;
        public string  res_proc_mode;
        public string  last_recipe_id;
        public int     proc_count;
        public string  last_start_time;
        public string  last_end_time;
        public string  last_down_time;
        public int     last_down_hist_seq;
        public string  last_event;
        public string  last_event_time;
        public int     last_active_hist_seq;
        public int     last_hist_seq;
        public int     img_idx;
        public char    no_mouse_event;
        public char    signal_flag;
    }

    public class FMB_View_Resource_List_Out_Detail_Tag
    {
        public char    h_status_value;
        public string  h_msg_code;
        public string  h_msg;
        public string  h_field_msg;
        public string  h_db_err_msg;
        public int     count;
        public string  next_res_id;
        public int     next_seq;
        public int     _size_res_list;
        public FMB_View_Resource_List_Out_Detail_Tag_res_list[] res_list;
    }

    public class FMB_View_UDR_Resource_List_In_Tag
    {
        public string  h_passport;
        public char    h_language;
        public string  h_factory;
        public string  h_user_id;
        public string  h_password;
        public char    h_proc_step;
        public string  group;
        public char    res_type;
        public string  next_res_id;
        public int     next_seq;
    }

    public class FMB_View_UDR_Resource_List_Out_Tag_udr_res_list
    {
        public string  res_id;
        public string  res_desc;
        public char    attached_flag;
        public char    res_up_down_flag;
        public string  res_type;
        public string  area_id;
        public string  sub_area_id;
        public string  res_pri_sts;
        public string  res_ctrl_mode;
        public string  res_proc_mode;
        public string  last_start_time;
        public string  last_end_time;
        public string  last_down_time;
        public string  last_event;
        public string  last_event_time;
        public int     img_idx;
    }

    public class FMB_View_UDR_Resource_List_Out_Tag
    {
        public char    h_status_value;
        public string  h_msg_code;
        public string  h_msg;
        public string  h_field_msg;
        public string  h_db_err_msg;
        public int     count;
        public string  next_res_id;
        public int     _size_udr_res_list;
        public FMB_View_UDR_Resource_List_Out_Tag_udr_res_list[] udr_res_list;
    }

    public class FMB_View_UDR_Resource_List_Out_Detail_Tag_udr_list
    {
        public string  group;
        public string  user_name;
        public string  res_id;
        public int     seq;
        public char    res_tag_flag;
        public char    loc_exist_flag;
        public int     loc_x;
        public int     loc_y;
        public int     loc_width;
        public int     loc_height;
        public string  text;
        public int     text_size;
        public int     text_color;
        public char    text_style;
        public int     tag_type;
        public int     back_color;
        public string  create_time;
        public string  update_time;
        public string  res_desc;
        public string  res_type;
        public string  area_id;
        public string  sub_area_id;
        public string  res_location;
        public char    proc_rule;
        public int     max_proc_count;
        public char    res_up_down_flag;
        public string  res_pri_sts;
        public string  lot_id;
        public string  sublot_id;
        public string  crr_id;
        public string  res_ctrl_mode;
        public string  res_proc_mode;
        public string  last_recipe_id;
        public int     proc_count;
        public string  last_start_time;
        public string  last_end_time;
        public string  last_down_time;
        public int     last_down_hist_seq;
        public string  last_event;
        public string  last_event_time;
        public int     last_active_hist_seq;
        public int     last_hist_seq;
        public int     img_idx;
        public char    no_mouse_event;
        public char    signal_flag;
    }

    public class FMB_View_UDR_Resource_List_Out_Detail_Tag
    {
        public char    h_status_value;
        public string  h_msg_code;
        public string  h_msg;
        public string  h_field_msg;
        public string  h_db_err_msg;
        public int     count;
        public string  next_res_id;
        public int     next_seq;
        public int     _size_udr_list;
        public FMB_View_UDR_Resource_List_Out_Detail_Tag_udr_list[] udr_list;
    }

    public class FMB_View_LayOut_List_In_Tag
    {
        public string  h_passport;
        public char    h_language;
        public string  h_factory;
        public string  h_user_id;
        public string  h_password;
        public char    h_proc_step;
        public string  next_layout_id;
    }

    public class FMB_View_LayOut_List_Out_Tag_layout_list
    {
        public string  layout_id;
        public string  layout_desc;
        public int     width;
        public int     height;
    }

    public class FMB_View_LayOut_List_Out_Tag
    {
        public char    h_status_value;
        public string  h_msg_code;
        public string  h_msg;
        public string  h_field_msg;
        public string  h_db_err_msg;
        public int     count;
        public string  next_layout_id;
        public int     _size_layout_list;
        public FMB_View_LayOut_List_Out_Tag_layout_list[] layout_list;
    }

    public class FMB_View_Resource_In_Tag
    {
        public string  h_passport;
        public char    h_language;
        public string  h_factory;
        public string  h_user_id;
        public string  h_password;
        public char    h_proc_step;
        public string  res_id;
        public char    res_type;
        public string  layout_id;
    }

    public class FMB_View_Resource_Out_Tag
    {
        public char    h_status_value;
        public string  h_msg_code;
        public string  h_msg;
        public string  h_field_msg;
        public string  h_db_err_msg;
        public string  res_id;
        public int     seq;
        public char    res_tag_flag;
        public string  layout_id;
        public int     loc_x;
        public int     loc_y;
        public int     loc_width;
        public int     loc_height;
        public string  text;
        public int     text_size;
        public int     text_color;
        public char    text_style;
        public int     tag_type;
        public int     back_color;
        public string  create_user_id;
        public string  create_time;
        public string  update_user_id;
        public string  update_time;
        public string  res_desc;
        public string  res_type;
        public string  res_grp_1;
        public string  res_grp_2;
        public string  res_grp_3;
        public string  res_grp_4;
        public string  res_grp_5;
        public string  res_grp_6;
        public string  res_grp_7;
        public string  res_grp_8;
        public string  res_grp_9;
        public string  res_grp_10;
        public char    use_fac_prt_flag;
        public string  res_sts_prt_1;
        public string  res_sts_prt_2;
        public string  res_sts_prt_3;
        public string  res_sts_prt_4;
        public string  res_sts_prt_5;
        public string  res_sts_prt_6;
        public string  res_sts_prt_7;
        public string  res_sts_prt_8;
        public string  res_sts_prt_9;
        public string  res_sts_prt_10;
        public string  res_cmf_1;
        public string  res_cmf_2;
        public string  res_cmf_3;
        public string  res_cmf_4;
        public string  res_cmf_5;
        public string  res_cmf_6;
        public string  res_cmf_7;
        public string  res_cmf_8;
        public string  res_cmf_9;
        public string  res_cmf_10;
        public string  res_cmf_11;
        public string  res_cmf_12;
        public string  res_cmf_13;
        public string  res_cmf_14;
        public string  res_cmf_15;
        public string  res_cmf_16;
        public string  res_cmf_17;
        public string  res_cmf_18;
        public string  res_cmf_19;
        public string  res_cmf_20;
        public string  dsp_id;
        public string  area_id;
        public string  sub_area_id;
        public string  res_location;
        public char    proc_rule;
        public int     max_proc_count;
        public string  batch_cond_1;
        public string  batch_cond_2;
        public char    pm_sch_enable_flag;
        public char    unit_base_st_flag;
        public char    sec_chk_flag;
        public char    delete_flag;
        public string  delete_user_id;
        public string  delete_time;
        public string  res_create_user_id;
        public string  res_create_time;
        public string  res_update_user_id;
        public string  res_update_time;
        public char    res_up_down_flag;
        public string  res_pri_sts;
        public string  res_sts_1;
        public string  res_sts_2;
        public string  res_sts_3;
        public string  res_sts_4;
        public string  res_sts_5;
        public string  res_sts_6;
        public string  res_sts_7;
        public string  res_sts_8;
        public string  res_sts_9;
        public string  res_sts_10;
        public string  lot_id;
        public string  sublot_id;
        public string  crr_id;
        public string  res_ctrl_mode;
        public string  res_proc_mode;
        public string  last_recipe_id;
        public int     proc_count;
        public string  last_start_time;
        public string  last_end_time;
        public string  last_down_time;
        public int     last_down_hist_seq;
        public string  last_event;
        public string  last_event_time;
        public int     last_active_hist_seq;
        public int     last_hist_seq;
        public int     img_idx;
        public char    no_mouse_event;
        public char    signal_flag;
    }

    public class FMB_View_UDR_Resource_In_Tag
    {
        public string  h_passport;
        public char    h_language;
        public string  h_factory;
        public string  h_user_id;
        public string  h_password;
        public char    h_proc_step;
        public string  res_id;
        public char    res_type;
        public string  group_id;
    }

    public class FMB_View_UDR_Resource_Out_Tag
    {
        public char    h_status_value;
        public string  h_msg_code;
        public string  h_msg;
        public string  h_field_msg;
        public string  h_db_err_msg;
        public string  res_id;
        public int     seq;
        public char    res_tag_flag;
        public string  group_id;
        public int     loc_x;
        public int     loc_y;
        public int     loc_width;
        public int     loc_height;
        public string  text;
        public int     text_size;
        public int     text_color;
        public char    text_style;
        public int     tag_type;
        public int     back_color;
        public string  create_time;
        public string  update_time;
        public string  res_desc;
        public string  res_type;
        public string  area_id;
        public string  sub_area_id;
        public string  res_location;
        public char    proc_rule;
        public int     max_proc_count;
        public char    res_up_down_flag;
        public string  res_pri_sts;
        public string  lot_id;
        public string  sublot_id;
        public string  crr_id;
        public string  res_ctrl_mode;
        public string  res_proc_mode;
        public string  last_recipe_id;
        public int     proc_count;
        public string  last_start_time;
        public string  last_end_time;
        public string  last_down_time;
        public int     last_down_hist_seq;
        public string  last_event;
        public string  last_event_time;
        public int     last_active_hist_seq;
        public int     last_hist_seq;
        public int     img_idx;
        public char    no_mouse_event;
        public char    signal_flag;
    }

    public class FMB_View_LayOut_In_Tag
    {
        public string  h_passport;
        public char    h_language;
        public string  h_factory;
        public string  h_user_id;
        public string  h_password;
        public char    h_proc_step;
        public string  layout_id;
    }

    public class FMB_View_LayOut_Out_Tag
    {
        public char    h_status_value;
        public string  h_msg_code;
        public string  h_msg;
        public string  h_field_msg;
        public string  h_db_err_msg;
        public string  layout_id;
        public string  layout_desc;
        public string  create_user_id;
        public string  create_time;
        public string  update_user_id;
        public string  update_time;
        public int     width;
        public int     height;
    }

    public class FMB_View_UDR_Group_In_Tag
    {
        public string  h_passport;
        public char    h_language;
        public string  h_factory;
        public string  h_user_id;
        public string  h_password;
        public char    h_proc_step;
        public string  group_id;
    }

    public class FMB_View_UDR_Group_Out_Tag
    {
        public char    h_status_value;
        public string  h_msg_code;
        public string  h_msg;
        public string  h_field_msg;
        public string  h_db_err_msg;
        public string  group_id;
        public string  group_desc;
        public string  user_name;
        public string  create_time;
        public string  update_time;
        public int     width;
        public int     height;
    }

    public class FMB_View_Resource_History_In_Tag
    {
        public string  h_passport;
        public char    h_language;
        public string  h_factory;
        public string  h_user_id;
        public string  h_password;
        public char    h_proc_step;
        public int     next_hist_seq;
        public string  res_type;
        public string  res_id;
        public string  from_time;
        public string  to_time;
        public string  event_id;
        public char    include_del_hist;
    }

    public class FMB_View_Resource_History_Out_Tag_hist_list
    {
        public string  res_id;
        public int     hist_seq;
        public string  event_id;
        public string  tran_time;
        public string  sys_tran_time;
        public string  old_event_id;
        public int     old_hist_seq;
        public string  old_tran_time;
        public string  old_sys_tran_time;
        public char    old_up_down_flag;
        public string  old_pri_sts;
        public string  old_sts_1;
        public string  old_sts_2;
        public string  old_sts_3;
        public string  old_sts_4;
        public string  old_sts_5;
        public string  old_sts_6;
        public string  old_sts_7;
        public string  old_sts_8;
        public string  old_sts_9;
        public string  old_sts_10;
        public char    new_up_down_flag;
        public string  new_pri_sts;
        public string  new_sts_1;
        public string  new_sts_2;
        public string  new_sts_3;
        public string  new_sts_4;
        public string  new_sts_5;
        public string  new_sts_6;
        public string  new_sts_7;
        public string  new_sts_8;
        public string  new_sts_9;
        public string  new_sts_10;
        public string  lot_id;
        public string  sublot_id;
        public string  crr_id;
        public string  res_ctrl_mode;
        public string  res_proc_mode;
        public char    lot_exist_flag;
        public string  col_set_id;
        public int     col_set_version;
        public string  tran_cmf_1;
        public string  tran_cmf_2;
        public string  tran_cmf_3;
        public string  tran_cmf_4;
        public string  tran_cmf_5;
        public string  tran_cmf_6;
        public string  tran_cmf_7;
        public string  tran_cmf_8;
        public string  tran_cmf_9;
        public string  tran_cmf_10;
        public string  tran_cmf_11;
        public string  tran_cmf_12;
        public string  tran_cmf_13;
        public string  tran_cmf_14;
        public string  tran_cmf_15;
        public string  tran_cmf_16;
        public string  tran_cmf_17;
        public string  tran_cmf_18;
        public string  tran_cmf_19;
        public string  tran_cmf_20;
        public string  tran_user_id;
        public string  tran_comment;
        public string  last_down_time;
        public int     last_down_hist_seq;
        public int     hist_start_seq;
        public char    hist_del_flag;
        public string  hist_del_time;
        public string  hist_del_user_id;
        public string  hist_del_comment;
    }

    public class FMB_View_Resource_History_Out_Tag
    {
        public char    h_status_value;
        public string  h_msg_code;
        public string  h_msg;
        public string  h_field_msg;
        public string  h_db_err_msg;
        public int     count;
        public int     next_hist_seq;
        public int     _size_hist_list;
        public FMB_View_Resource_History_Out_Tag_hist_list[] hist_list;
    }

    public class FMB_View_LotByRes_List_In_Tag
    {
        public string  h_passport;
        public char    h_language;
        public string  h_factory;
        public string  h_user_id;
        public string  h_password;
        public char    h_proc_step;
        public string  res_id;
        public string  oper;
        public string  next_lot_id;
    }

    public class FMB_View_LotByRes_List_Out_Tag_lotbyres_list
    {
        public string  factory;
        public string  lot_id;
        public string  mat_id;
        public int     mat_ver;
        public string  flow;
        public int     flow_seq_num;
        public string  oper;
        public char    lot_type;
        public double  qty1;
        public double  qty2;
        public double  qty3;
        public string  owner_code;
        public string  create_code;
        public char    lot_priority;
        public string  lot_status;
        public string  hold_code;
    }

    public class FMB_View_LotByRes_List_Out_Tag
    {
        public char    h_status_value;
        public string  h_msg_code;
        public string  h_msg;
        public string  h_field_msg;
        public string  h_db_err_msg;
        public int     count;
        public string  next_lot_id;
        public int     _size_lotbyres_list;
        public FMB_View_LotByRes_List_Out_Tag_lotbyres_list[] lotbyres_list;
    }

    public class FMB_View_Lot_List_Detail_In_Tag_lot_list
    {
        public string  lot_id;
    }

    public class FMB_View_Lot_List_Detail_In_Tag
    {
        public string  h_passport;
        public char    h_language;
        public string  h_factory;
        public string  h_user_id;
        public string  h_password;
        public char    h_proc_step;
        public string  from_time;
        public string  to_time;
        public string  next_lot_id;
        public string  mat_id;
        public int     mat_ver;
        public string  flow;
        public int     flow_seq_num;
        public string  oper;
        public string  res_id;
        public string  table_name1;
        public string  table_name2;
        public string  table_name3;
        public string  grp_1;
        public string  grp_2;
        public string  grp_3;
        public char    lot_del_flag;
        public char    zero_qty_flag;
        public int     count;
        public int     _size_lot_list;
        public FMB_View_Lot_List_Detail_In_Tag_lot_list[] lot_list;
    }

    public class FMB_View_Lot_List_Detail_Out_Tag_lot_list
    {
        public string  lot_id;
        public string  lot_desc;
        public string  factory;
        public string  mat_id;
        public int     mat_ver;
        public string  mat_desc;
        public string  flow;
        public int     flow_seq_num;
        public string  flow_desc;
        public string  oper;
        public string  oper_desc;
        public double  qty_1;
        public double  qty_2;
        public double  qty_3;
        public string  crr_id;
        public char    lot_type;
        public string  owner_code;
        public string  create_code;
        public char    lot_priority;
        public string  lot_status;
        public char    hold_flag;
        public string  hold_code;
        public string  hold_password;
        public string  hold_prv_grp_id;
        public double  oper_in_qty_1;
        public double  oper_in_qty_2;
        public double  oper_in_qty_3;
        public double  create_qty_1;
        public double  create_qty_2;
        public double  create_qty_3;
        public double  start_qty_1;
        public double  start_qty_2;
        public double  start_qty_3;
        public char    inv_flag;
        public char    transit_flag;
        public char    unit_exist_flag;
        public string  inv_unit;
        public char    rwk_flag;
        public string  rwk_code;
        public int     rwk_count;
        public string  rwk_ret_flow;
        public int     rwk_ret_flow_seq_num;
        public string  rwk_ret_oper;
        public string  rwk_end_flow;
        public int     rwk_end_flow_seq_num;
        public string  rwk_end_oper;
        public char    rwk_ret_clear_flag;
        public string  rwk_time;
        public char    nstd_flag;
        public string  nstd_ret_flow;
        public int     nstd_ret_flow_seq_num;
        public string  nstd_ret_oper;
        public string  nstd_time;
        public char    rep_flag;
        public string  rep_ret_oper;
        public char    start_flag;
        public string  start_time;
        public string  start_res_id;
        public char    end_flag;
        public string  end_time;
        public string  end_res_id;
        public char    sample_flag;
        public char    sample_wait_flag;
        public char    sample_result;
        public char    from_to_flag;
        public string  from_to_lot_id;
        public string  ship_code;
        public string  ship_time;
        public string  org_due_time;
        public string  sch_due_time;
        public string  create_time;
        public string  fac_in_time;
        public string  flow_in_time;
        public string  oper_in_time;
        public string  reserve_res_id;
        public string  batch_id;
        public int     batch_seq;
        public string  order_id;
        public string  add_order_id_1;
        public string  add_order_id_2;
        public string  add_order_id_3;
        public string  lot_location;
        public string  lot_cmf_1;
        public string  lot_cmf_2;
        public string  lot_cmf_3;
        public string  lot_cmf_4;
        public string  lot_cmf_5;
        public string  lot_cmf_6;
        public string  lot_cmf_7;
        public string  lot_cmf_8;
        public string  lot_cmf_9;
        public string  lot_cmf_10;
        public string  lot_cmf_11;
        public string  lot_cmf_12;
        public string  lot_cmf_13;
        public string  lot_cmf_14;
        public string  lot_cmf_15;
        public string  lot_cmf_16;
        public string  lot_cmf_17;
        public string  lot_cmf_18;
        public string  lot_cmf_19;
        public string  lot_cmf_20;
        public char    lot_del_flag;
        public string  lot_del_code;
        public string  lot_del_time;
        public string  bom_set_id;
        public int     bom_set_version;
        public int     bom_active_hist_seq;
        public int     bom_hist_seq;
        public string  last_tran_code;
        public string  last_tran_time;
        public string  last_comment;
        public int     last_active_hist_seq;
        public int     last_hist_seq;
        public string  critical_res_id;
        public string  critical_res_group_id;
        public string  save_res_id_1;
        public string  save_res_id_2;
        public string  subres_id;
        public string  lot_group_id_1;
        public string  lot_group_id_2;
        public string  lot_group_id_3;
        public string  resv_field_1;
        public string  resv_field_2;
        public string  resv_field_3;
        public string  resv_field_4;
        public string  resv_field_5;
        public char    resv_flag_1;
        public char    resv_flag_2;
        public char    resv_flag_3;
        public char    resv_flag_4;
        public char    resv_flag_5;
    }

    public class FMB_View_Lot_List_Detail_Out_Tag
    {
        public char    h_status_value;
        public string  h_msg_code;
        public string  h_msg;
        public string  h_field_msg;
        public string  h_db_err_msg;
        public int     count;
        public string  next_lot_id;
        public int     _size_lot_list;
        public FMB_View_Lot_List_Detail_Out_Tag_lot_list[] lot_list;
    }

    public class FMB_View_Factory_In_Tag
    {
        public string  h_passport;
        public char    h_language;
        public string  h_factory;
        public string  h_user_id;
        public string  h_password;
        public char    h_proc_step;
    }

    public class FMB_View_Factory_Out_Tag
    {
        public char    h_status_value;
        public string  h_msg_code;
        public string  h_msg;
        public string  h_field_msg;
        public string  h_db_err_msg;
        public string  factory;
        public string  fac_desc;
        public string  fac_type;
        public string  fac_grp_1;
        public string  fac_grp_2;
        public string  fac_grp_3;
        public string  fac_grp_4;
        public string  fac_grp_5;
        public double  days_per_week;
        public double  hours_per_day;
        public char    variable_shift_flag;
        public string  shift_1_start;
        public char    shift_1_day_flag;
        public string  shift_2_start;
        public char    shift_2_day_flag;
        public string  shift_3_start;
        public char    shift_3_day_flag;
        public string  shift_4_start;
        public char    shift_4_day_flag;
        public char    remote_fac_flag;
        public string  res_sts_1;
        public string  res_sts_2;
        public string  res_sts_3;
        public string  res_sts_4;
        public string  res_sts_5;
        public string  res_sts_6;
        public string  res_sts_7;
        public string  res_sts_8;
        public string  res_sts_9;
        public string  res_sts_10;
        public string  create_user_id;
        public string  create_time;
        public string  update_user_id;
        public string  update_time;
    }

    public class FMB_View_Factory_Cmf_Item_In_Tag
    {
        public string  h_passport;
        public char    h_language;
        public string  h_factory;
        public string  h_user_id;
        public string  h_password;
        public char    h_proc_step;
        public string  item_name;
    }

    public class FMB_View_Factory_Cmf_Item_Out_Tag_data_tbl
    {
        public string  prompt;
        public char    format;
        public char    opt;
        public string  table_name;
    }

    public class FMB_View_Factory_Cmf_Item_Out_Tag
    {
        public char    h_status_value;
        public string  h_msg_code;
        public string  h_msg;
        public string  h_field_msg;
        public string  h_db_err_msg;
        public string  factory;
        public string  item_name;
        public int     count;
        public int     _size_data_tbl;
        public FMB_View_Factory_Cmf_Item_Out_Tag_data_tbl[] data_tbl;
        public string  create_user_id;
        public string  create_time;
        public string  update_user_id;
        public string  update_time;
    }

    public class FMB_View_Material_List_In_Tag
    {
        public string  h_passport;
        public char    h_language;
        public string  h_factory;
        public string  h_user_id;
        public string  h_password;
        public char    h_proc_step;
        public string  mat_type;
        public string  next_mat_id;
        public int     next_mat_ver;
        public string  filter;
    }

    public class FMB_View_Material_List_Out_Tag_mat_list
    {
        public string  mat_id;
        public int     mat_ver;
        public string  mat_desc;
    }

    public class FMB_View_Material_List_Out_Tag
    {
        public char    h_status_value;
        public string  h_msg_code;
        public string  h_msg;
        public string  h_field_msg;
        public string  h_db_err_msg;
        public int     count;
        public string  next_mat_id;
        public int     next_mat_ver;
        public int     _size_mat_list;
        public FMB_View_Material_List_Out_Tag_mat_list[] mat_list;
    }

    public class FMB_View_Flow_List_In_Tag
    {
        public string  h_passport;
        public char    h_language;
        public string  h_factory;
        public string  h_user_id;
        public string  h_password;
        public char    h_proc_step;
        public string  mat_id;
        public int     mat_ver;
        public string  filter;
        public string  oper;
        public string  next_flow;
    }

    public class FMB_View_Flow_List_Out_Tag_flow_list
    {
        public string  flow;
        public string  flow_desc;
        public string  opt_flow_group;
        public char    opt_flow_option_flag;
    }

    public class FMB_View_Flow_List_Out_Tag
    {
        public char    h_status_value;
        public string  h_msg_code;
        public string  h_msg;
        public string  h_field_msg;
        public string  h_db_err_msg;
        public int     count;
        public string  next_flow;
        public int     _size_flow_list;
        public FMB_View_Flow_List_Out_Tag_flow_list[] flow_list;
    }

    public class FMB_View_Operation_List_In_Tag
    {
        public string  h_passport;
        public char    h_language;
        public string  h_factory;
        public string  h_user_id;
        public string  h_password;
        public char    h_proc_step;
        public string  mat_id;
        public int     mat_ver;
        public string  flow;
        public string  next_oper;
        public string  filter;
    }

    public class FMB_View_Operation_List_Out_Tag_oper_list
    {
        public string  oper;
        public string  oper_desc;
        public string  opt_oper_group;
        public char    opt_oper_option_flag;
    }

    public class FMB_View_Operation_List_Out_Tag
    {
        public char    h_status_value;
        public string  h_msg_code;
        public string  h_msg;
        public string  h_field_msg;
        public string  h_db_err_msg;
        public int     count;
        public string  next_oper;
        public int     _size_oper_list;
        public FMB_View_Operation_List_Out_Tag_oper_list[] oper_list;
    }

    public class FMB_View_ResEvent_List_In_Tag
    {
        public string  h_passport;
        public char    h_language;
        public string  h_factory;
        public string  h_user_id;
        public string  h_password;
        public char    h_proc_step;
        public string  next_res_id;
        public string  next_event_id;
        public char    res_type;
    }

    public class FMB_View_ResEvent_List_Out_Tag_res_event_list
    {
        public string  factory;
        public string  res_id;
        public string  res_desc;
        public string  event_id;
        public string  event_desc;
        public char    system_flag;
    }

    public class FMB_View_ResEvent_List_Out_Tag
    {
        public char    h_status_value;
        public string  h_msg_code;
        public string  h_msg;
        public string  h_field_msg;
        public string  h_db_err_msg;
        public int     count;
        public string  next_res_id;
        public string  next_event_id;
        public int     _size_res_event_list;
        public FMB_View_ResEvent_List_Out_Tag_res_event_list[] res_event_list;
    }

    public class FMB_View_ResLot_List_In_Tag
    {
        public string  h_passport;
        public char    h_language;
        public string  h_factory;
        public string  h_user_id;
        public string  h_password;
        public char    h_proc_step;
        public string  res_id;
        public string  next_lot_id;
        public string  oper;
    }

    public class FMB_View_ResLot_List_Out_Tag_res_lot_list
    {
        public string  factory;
        public string  res_id;
        public string  lot_id;
        public string  crr_id;
        public string  event_id;
        public string  mat_id;
        public int     mat_ver;
        public string  flow;
        public int     flow_seq_num;
        public string  oper;
        public char    lot_type;
        public string  tran_time;
        public double  qty1;
        public double  qty2;
        public double  qty3;
        public string  owner_code;
        public string  create_code;
        public char    lot_priority;
        public string  lot_status;
        public string  hold_code;
        public string  cmf_1;
        public string  cmf_2;
        public string  cmf_3;
        public string  cmf_4;
        public string  cmf_5;
        public string  cmf_6;
        public string  cmf_7;
        public string  cmf_8;
        public string  cmf_9;
        public string  cmf_10;
        public string  cmf_11;
        public string  cmf_12;
        public string  cmf_13;
        public string  cmf_14;
        public string  cmf_15;
        public string  cmf_16;
        public string  cmf_17;
        public string  cmf_18;
        public string  cmf_19;
        public string  cmf_20;
        public string  create_user_id;
        public string  create_time;
        public string  update_user_id;
        public string  update_time;
    }

    public class FMB_View_ResLot_List_Out_Tag
    {
        public char    h_status_value;
        public string  h_msg_code;
        public string  h_msg;
        public string  h_field_msg;
        public string  h_db_err_msg;
        public string  next_lot_id;
        public int     count;
        public int     _size_res_lot_list;
        public FMB_View_ResLot_List_Out_Tag_res_lot_list[] res_lot_list;
    }

    public class FMB_View_Data_List_In_Tag
    {
        public string  h_passport;
        public char    h_language;
        public string  h_factory;
        public string  h_user_id;
        public string  h_password;
        public char    h_proc_step;
        public string  table_name;
        public string  next_key_1;
        public string  next_key_2;
        public string  next_key_3;
        public string  next_key_4;
        public string  next_key_5;
        public string  next_key_6;
        public string  next_key_7;
        public string  next_key_8;
        public string  next_key_9;
        public string  next_key_10;
    }

    public class FMB_View_Data_List_Out_Tag_data_list
    {
        public string  key_1;
        public string  key_2;
        public string  key_3;
        public string  key_4;
        public string  key_5;
        public string  key_6;
        public string  key_7;
        public string  key_8;
        public string  key_9;
        public string  key_10;
        public string  data_1;
        public string  data_2;
        public string  data_3;
        public string  data_4;
        public string  data_5;
        public string  data_6;
        public string  data_7;
        public string  data_8;
        public string  data_9;
        public string  data_10;
        public string  create_user_id;
        public string  create_time;
        public string  update_user_id;
        public string  update_time;
    }

    public class FMB_View_Data_List_Out_Tag
    {
        public char    h_status_value;
        public string  h_msg_code;
        public string  h_msg;
        public string  h_field_msg;
        public string  h_db_err_msg;
        public string  table_name;
        public string  next_key_1;
        public string  next_key_2;
        public string  next_key_3;
        public string  next_key_4;
        public string  next_key_5;
        public string  next_key_6;
        public string  next_key_7;
        public string  next_key_8;
        public string  next_key_9;
        public string  next_key_10;
        public int     count;
        public int     _size_data_list;
        public FMB_View_Data_List_Out_Tag_data_list[] data_list;
    }

    public class FMB_Event_Publish_Msg_In_Tag
    {
        public string  h_passport;
        public char    h_language;
        public string  h_factory;
        public string  h_user_id;
        public string  h_password;
        public char    h_proc_step;
        public string  res_id;
        public string  res_desc;
        public string  res_type;
        public string  res_grp_1;
        public string  res_grp_2;
        public string  res_grp_3;
        public string  res_grp_4;
        public string  res_grp_5;
        public string  res_grp_6;
        public string  res_grp_7;
        public string  res_grp_8;
        public string  res_grp_9;
        public string  res_grp_10;
        public string  res_cmf_1;
        public string  res_cmf_2;
        public string  res_cmf_3;
        public string  res_cmf_4;
        public string  res_cmf_5;
        public string  res_cmf_6;
        public string  res_cmf_7;
        public string  res_cmf_8;
        public string  res_cmf_9;
        public string  res_cmf_10;
        public string  res_cmf_11;
        public string  res_cmf_12;
        public string  res_cmf_13;
        public string  res_cmf_14;
        public string  res_cmf_15;
        public string  res_cmf_16;
        public string  res_cmf_17;
        public string  res_cmf_18;
        public string  res_cmf_19;
        public string  res_cmf_20;
        public char    use_fac_prt_flag;
        public string  res_sts_prt_1;
        public string  res_sts_prt_2;
        public string  res_sts_prt_3;
        public string  res_sts_prt_4;
        public string  res_sts_prt_5;
        public string  res_sts_prt_6;
        public string  res_sts_prt_7;
        public string  res_sts_prt_8;
        public string  res_sts_prt_9;
        public string  res_sts_prt_10;
        public string  area_id;
        public string  sub_area_id;
        public string  res_location;
        public char    proc_rule;
        public int     max_proc_count;
        public string  batch_cond_1;
        public string  batch_cond_2;
        public char    pm_sch_enable_flag;
        public char    unit_base_st_flag;
        public char    sec_chk_flag;
        public char    delete_flag;
        public string  delete_user_id;
        public string  delete_time;
        public string  create_user_id;
        public string  create_time;
        public string  update_user_id;
        public string  update_time;
        public char    res_up_down_flag;
        public string  res_pri_sts;
        public string  res_sts_1;
        public string  res_sts_2;
        public string  res_sts_3;
        public string  res_sts_4;
        public string  res_sts_5;
        public string  res_sts_6;
        public string  res_sts_7;
        public string  res_sts_8;
        public string  res_sts_9;
        public string  res_sts_10;
        public string  lot_id;
        public string  sublot_id;
        public string  crr_id;
        public string  res_ctrl_mode;
        public string  res_proc_mode;
        public string  last_recipe_id;
        public int     proc_count;
        public string  last_start_time;
        public string  last_end_time;
        public string  last_down_time;
        public int     last_down_hist_seq;
        public string  last_event;
        public string  last_event_time;
        public int     last_active_hist_seq;
        public int     last_hist_seq;
    }

    public class FMB_View_User_List_In_Tag
    {
        public string  h_passport;
        public char    h_language;
        public string  h_factory;
        public string  h_user_id;
        public string  h_password;
        public char    h_proc_step;
        public string  user_group;
        public string  user_id;
        public string  next_user_id;
    }

    public class FMB_View_User_List_Out_Tag_user_id_list
    {
        public string  user_id;
        public string  user_desc;
        public string  sec_grp_id;
    }

    public class FMB_View_User_List_Out_Tag
    {
        public char    h_status_value;
        public string  h_msg_code;
        public string  h_msg;
        public string  h_field_msg;
        public string  h_db_err_msg;
        public int     count;
        public string  next_user_id;
        public int     _size_user_id_list;
        public FMB_View_User_List_Out_Tag_user_id_list[] user_id_list;
    }

    public class FMB_View_SecGrp_List_In_Tag
    {
        public string  h_passport;
        public char    h_language;
        public string  h_factory;
        public string  h_user_id;
        public string  h_password;
        public char    h_proc_step;
        public string  next_sec_grp_id;
    }

    public class FMB_View_SecGrp_List_Out_Tag_secgrp_list
    {
        public string  sec_grp_id;
        public string  sec_grp_desc;
    }

    public class FMB_View_SecGrp_List_Out_Tag
    {
        public char    h_status_value;
        public string  h_msg_code;
        public string  h_msg;
        public string  h_field_msg;
        public string  h_db_err_msg;
        public string  next_sec_grp_id;
        public int     count;
        public int     _size_secgrp_list;
        public FMB_View_SecGrp_List_Out_Tag_secgrp_list[] secgrp_list;
    }

    public class FMB_View_ResDetail_In_Tag
    {
        public string  h_passport;
        public char    h_language;
        public string  h_factory;
        public string  h_user_id;
        public string  h_password;
        public char    h_proc_step;
        public string  next_res_id;
        public string  res_type;
        public string  res_grp;
        public string  area_id;
        public string  sub_area_id;
        public string  filter;
        public char    include_del_res;
        public char    include_proc_lot_info;
    }

    public class FMB_View_ResDetail_Out_Tag_res_list
    {
        public string  factory;
        public string  res_id;
        public string  res_desc;
        public string  res_type;
        public char    use_fac_prt_flag;
        public string  res_sts_prt_1;
        public string  res_sts_prt_2;
        public string  res_sts_prt_3;
        public string  res_sts_prt_4;
        public string  res_sts_prt_5;
        public string  res_sts_prt_6;
        public string  res_sts_prt_7;
        public string  res_sts_prt_8;
        public string  res_sts_prt_9;
        public string  res_sts_prt_10;
        public string  area_id;
        public string  sub_area_id;
        public string  res_location;
        public char    proc_rule;
        public int     max_proc_count;
        public int     proc_count;
        public string  batch_cond_1;
        public string  batch_cond_2;
        public char    pm_sch_enable_flag;
        public char    unit_base_st_flag;
        public char    sec_chk_flag;
        public char    delete_flag;
        public string  delete_user_id;
        public string  delete_time;
        public string  create_user_id;
        public string  create_time;
        public string  update_user_id;
        public string  update_time;
        public char    res_up_down_flag;
        public string  res_pri_sts;
        public string  res_sts_1;
        public string  res_sts_2;
        public string  res_sts_3;
        public string  res_sts_4;
        public string  res_sts_5;
        public string  res_sts_6;
        public string  res_sts_7;
        public string  res_sts_8;
        public string  res_sts_9;
        public string  res_sts_10;
        public string  lot_id;
        public string  sublot_id;
        public string  crr_id;
        public string  res_ctrl_mode;
        public string  res_proc_mode;
        public string  last_recipe_id;
        public string  last_start_time;
        public string  last_end_time;
        public string  last_down_time;
        public int     last_down_hist_seq;
        public string  last_event_id;
        public string  last_event_time;
        public int     last_active_hist_seq;
        public int     last_hist_seq;
        public char    res_tag_flag;
        public string  layout_id;
        public int     loc_x;
        public int     loc_y;
        public int     loc_width;
        public int     loc_height;
        public string  text;
        public int     text_size;
        public int     text_color;
        public char    text_style;
        public int     tag_type;
        public int     back_color;
        public string  loc_create_user_id;
        public string  loc_create_time;
        public string  loc_update_user_id;
        public string  loc_update_time;
        public int     seq;
    }

    public class FMB_View_ResDetail_Out_Tag
    {
        public char    h_status_value;
        public string  h_msg_code;
        public string  h_msg;
        public string  h_field_msg;
        public string  h_db_err_msg;
        public int     count;
        public string  next_res_id;
        public int     _size_res_list;
        public FMB_View_ResDetail_Out_Tag_res_list[] res_list;
    }

    public class FMB_View_Attach_Character_List_In_Tag
    {
        public string  h_passport;
        public char    h_language;
        public string  h_factory;
        public string  h_user_id;
        public string  h_password;
        public char    h_proc_step;
        public string  col_set_id;
        public int     col_set_version;
        public string  next_char_id;
    }

    public class FMB_View_Attach_Character_List_Out_Tag_attach_character_list_unit_list
    {
        public int     unit_seq_num;
        public char    null_flag;
        public string  def_unit_id;
    }

    public class FMB_View_Attach_Character_List_Out_Tag_attach_character_list
    {
        public string  col_set_id;
        public int     col_set_version;
        public string  char_id;
        public string  char_desc;
        public int     seq_num;
        public char    value_type;
        public int     unit_count;
        public int     value_count;
        public int     display_precision;
        public string  value_tbl;
        public string  def_value;
        public char    opt_input_flag;
        public char    blank_rec_save_flag;
        public char    derived_param_flag;
        public string  derived_parameter;
        public char    def_unit_flag;
        public char    def_unit_ovr_flag;
        public string  unit_tbl;
        public char    spec_type;
        public int     spec_out_count;
        public string  target_value;
        public string  upper_spec_limit;
        public string  lower_spec_limit;
        public string  upper_warn_limit;
        public string  lower_warn_limit;
        public string  upper_cust_limit;
        public string  lower_cust_limit;
        public string  spec_info;
        public string  spec_out_alarm;
        public string  warn_out_alarm;
        public string  create_user_id;
        public string  create_time;
        public string  update_user_id;
        public string  update_time;
        public int     unit_list_count;
        public int     _size_unit_list;
        public FMB_View_Attach_Character_List_Out_Tag_attach_character_list_unit_list[] unit_list;
    }

    public class FMB_View_Attach_Character_List_Out_Tag
    {
        public char    h_status_value;
        public string  h_msg_code;
        public string  h_msg;
        public string  h_field_msg;
        public string  h_db_err_msg;
        public int     count;
        public string  next_char_id;
        public int     _size_attach_character_list;
        public FMB_View_Attach_Character_List_Out_Tag_attach_character_list[] attach_character_list;
    }

    public class FMB_View_Default_Unit_List_In_Tag_unit_list
    {
        public int     unit_count;
    }

    public class FMB_View_Default_Unit_List_In_Tag
    {
        public string  h_passport;
        public char    h_language;
        public string  h_factory;
        public string  h_user_id;
        public string  h_password;
        public char    h_proc_step;
        public string  col_set_id;
        public int     col_set_version;
        public int     count;
        public string  char_id;
        public int     _size_unit_list;
        public FMB_View_Default_Unit_List_In_Tag_unit_list[] unit_list;
    }

    public class FMB_View_Default_Unit_List_Out_Tag_unit_list
    {
        public int     unit_seq_num;
        public char    null_flag;
        public string  def_unit_id;
        public string  create_user_id;
        public string  create_time;
    }

    public class FMB_View_Default_Unit_List_Out_Tag
    {
        public char    h_status_value;
        public string  h_msg_code;
        public string  h_msg;
        public string  h_field_msg;
        public string  h_db_err_msg;
        public string  char_id;
        public int     unit_count;
        public int     _size_unit_list;
        public FMB_View_Default_Unit_List_Out_Tag_unit_list[] unit_list;
    }

    public class FMB_View_Event_In_Tag
    {
        public string  h_passport;
        public char    h_language;
        public string  h_user_id;
        public string  h_password;
        public char    h_proc_step;
        public string  h_factory;
        public string  event_id;
    }

    public class FMB_View_Event_Out_Tag
    {
        public char    h_status_value;
        public string  h_msg_code;
        public string  h_msg;
        public string  h_field_msg;
        public string  h_db_err_msg;
        public string  event_id;
        public string  event_desc;
        public string  event_grp_1;
        public string  event_grp_2;
        public string  event_grp_3;
        public string  event_grp_4;
        public string  event_grp_5;
        public string  event_grp_6;
        public string  event_grp_7;
        public string  event_grp_8;
        public string  event_grp_9;
        public string  event_grp_10;
        public char    system_flag;
        public char    chk_up_down_flag;
        public char    chk_up_down;
        public char    chg_up_down_flag;
        public char    chg_up_down;
        public char    ovr_up_down_flag;
        public char    chk_pri_sts_flag;
        public string  chk_pri_sts;
        public char    chg_pri_sts_flag;
        public string  chg_pri_sts;
        public char    ovr_pri_sts_flag;
        public string  tbl_pri_sts;
        public char    chk_flag_1;
        public char    chk_flag_2;
        public char    chk_flag_3;
        public char    chk_flag_4;
        public char    chk_flag_5;
        public char    chk_flag_6;
        public char    chk_flag_7;
        public char    chk_flag_8;
        public char    chk_flag_9;
        public char    chk_flag_10;
        public string  chk_sts_1;
        public string  chk_sts_2;
        public string  chk_sts_3;
        public string  chk_sts_4;
        public string  chk_sts_5;
        public string  chk_sts_6;
        public string  chk_sts_7;
        public string  chk_sts_8;
        public string  chk_sts_9;
        public string  chk_sts_10;
        public char    chg_flag_1;
        public char    chg_flag_2;
        public char    chg_flag_3;
        public char    chg_flag_4;
        public char    chg_flag_5;
        public char    chg_flag_6;
        public char    chg_flag_7;
        public char    chg_flag_8;
        public char    chg_flag_9;
        public char    chg_flag_10;
        public string  chg_sts_1;
        public string  chg_sts_2;
        public string  chg_sts_3;
        public string  chg_sts_4;
        public string  chg_sts_5;
        public string  chg_sts_6;
        public string  chg_sts_7;
        public string  chg_sts_8;
        public string  chg_sts_9;
        public string  chg_sts_10;
        public string  tbl_1;
        public string  tbl_2;
        public string  tbl_3;
        public string  tbl_4;
        public string  tbl_5;
        public string  tbl_6;
        public string  tbl_7;
        public string  tbl_8;
        public string  tbl_9;
        public string  tbl_10;
        public string  col_set_id;
        public char    alarm_flag;
        public string  alarm_msg_id;
        public string  create_user_id;
        public string  create_time;
        public string  update_user_id;
        public string  update_time;
        public string  chart_id;
        public char    chart_flag;
    }

    public class FMB_View_Environment_In_Tag
    {
        public string  h_passport;
        public char    h_language;
        public string  h_user_id;
        public string  h_password;
        public char    h_proc_step;
        public string  h_factory;
    }

    public class FMB_View_Environment_Out_Tag
    {
        public char    h_status_value;
        public string  h_msg_code;
        public string  h_msg;
        public string  h_field_msg;
        public string  h_db_err_msg;
        public string  factory;
        public string  font_family;
        public int     res_width;
        public int     res_height;
        public int     rtg_width;
        public int     rtg_height;
        public int     elp_width;
        public int     elp_height;
        public int     tri_width;
        public int     tri_height;
        public int     ver_width;
        public int     ver_height;
        public int     hor_width;
        public int     hor_height;
        public int     pie1_width;
        public int     pie1_height;
        public int     pie2_width;
        public int     pie2_height;
        public int     pie3_width;
        public int     pie3_height;
        public int     pie4_width;
        public int     pie4_height;
        public int     layout_width;
        public int     layout_height;
        public int     udr_width;
        public int     udr_height;
        public char    event_color_flag;
        public char    signal_flag;
        public string  create_user_id;
        public string  create_time;
        public string  update_user_id;
        public string  update_time;
        public int     text_size;
        public int     text_color;
        public int     back_color;
    }

    public class FMB_View_Environment_List_In_Tag
    {
        public string  h_passport;
        public char    h_language;
        public string  h_user_id;
        public string  h_password;
        public char    h_proc_step;
        public string  next_factory;
    }

    public class FMB_View_Environment_List_Out_Tag_evn_list
    {
        public string  factory;
        public string  font_family;
        public int     res_width;
        public int     res_height;
        public int     rtg_width;
        public int     rtg_height;
        public int     elp_width;
        public int     elp_height;
        public int     tri_width;
        public int     tri_height;
        public int     ver_width;
        public int     ver_height;
        public int     hor_width;
        public int     hor_height;
        public int     pie1_width;
        public int     pie1_height;
        public int     pie2_width;
        public int     pie2_height;
        public int     pie3_width;
        public int     pie3_height;
        public int     pie4_width;
        public int     pie4_height;
        public int     layout_width;
        public int     layout_height;
        public int     udr_width;
        public int     udr_height;
        public char    event_color_flag;
        public char    signal_flag;
        public string  create_user_id;
        public string  create_time;
        public string  update_user_id;
        public string  update_time;
        public int     text_size;
        public int     text_color;
        public int     back_color;
    }

    public class FMB_View_Environment_List_Out_Tag
    {
        public char    h_status_value;
        public string  h_msg_code;
        public string  h_msg;
        public string  h_field_msg;
        public string  h_db_err_msg;
        public int     count;
        public string  next_factory;
        public int     _size_evn_list;
        public FMB_View_Environment_List_Out_Tag_evn_list[] evn_list;
    }

    public class FMB_View_Event_Color_List_In_Tag
    {
        public string  h_passport;
        public char    h_language;
        public string  h_user_id;
        public string  h_password;
        public char    h_proc_step;
        public string  h_factory;
        public string  next_event;
    }

    public class FMB_View_Event_Color_List_Out_Tag_event_list
    {
        public string  event_id;
        public int     color;
    }

    public class FMB_View_Event_Color_List_Out_Tag
    {
        public char    h_status_value;
        public string  h_msg_code;
        public string  h_msg;
        public string  h_field_msg;
        public string  h_db_err_msg;
        public int     count;
        public string  next_event;
        public int     _size_event_list;
        public FMB_View_Event_Color_List_Out_Tag_event_list[] event_list;
    }

    public class FMB_View_Event_Color_In_Tag
    {
        public string  h_passport;
        public char    h_language;
        public string  h_user_id;
        public string  h_password;
        public char    h_proc_step;
        public string  h_factory;
        public string  event_id;
    }

    public class FMB_View_Event_Color_Out_Tag
    {
        public char    h_status_value;
        public string  h_msg_code;
        public string  h_msg;
        public string  h_field_msg;
        public string  h_db_err_msg;
        public string  event_id;
        public int     color;
        public string  create_user_id;
        public string  create_time;
        public string  update_user_id;
        public string  update_time;
    }

    public class FMB_View_Resource_Image_List_In_Tag
    {
        public string  h_passport;
        public char    h_language;
        public string  h_user_id;
        public string  h_password;
        public char    h_proc_step;
        public string  h_factory;
        public string  next_res_id;
    }

    public class FMB_View_Resource_Image_List_Out_Tag_res_list
    {
        public string  res_id;
        public string  res_desc;
        public int     img_idx;
    }

    public class FMB_View_Resource_Image_List_Out_Tag
    {
        public char    h_status_value;
        public string  h_msg_code;
        public string  h_msg;
        public string  h_field_msg;
        public string  h_db_err_msg;
        public int     count;
        public string  next_res_id;
        public int     _size_res_list;
        public FMB_View_Resource_Image_List_Out_Tag_res_list[] res_list;
    }

    public class FMB_View_Function_List_In_Tag
    {
        public string  h_passport;
        public char    h_language;
        public string  h_factory;
        public string  h_user_id;
        public string  h_password;
        public char    h_proc_step;
        public string  sec_grp_id;
        public string  next_func_name;
    }

    public class FMB_View_Function_List_Out_Tag_func_list
    {
        public string  func_name;
        public string  func_desc;
    }

    public class FMB_View_Function_List_Out_Tag
    {
        public char    h_status_value;
        public string  h_msg_code;
        public string  h_msg;
        public string  h_field_msg;
        public string  h_db_err_msg;
        public string  next_func_name;
        public int     count;
        public int     _size_func_list;
        public FMB_View_Function_List_Out_Tag_func_list[] func_list;
    }

    public class FMB_View_Function_Detail_In_Tag
    {
        public string  h_passport;
        public char    h_language;
        public string  h_factory;
        public string  h_user_id;
        public string  h_password;
        public char    h_proc_step;
        public string  func_name;
    }

    public class FMB_View_Function_Detail_Out_Tag
    {
        public char    h_status_value;
        public string  h_msg_code;
        public string  h_msg;
        public string  h_field_msg;
        public string  h_db_err_msg;
        public string  func_name;
        public string  func_desc;
        public char    func_type_flag;
        public string  ctl_name_1;
        public char    ctl_en_flag_1;
        public string  ctl_name_2;
        public char    ctl_en_flag_2;
        public string  ctl_name_3;
        public char    ctl_en_flag_3;
        public string  ctl_name_4;
        public char    ctl_en_flag_4;
        public string  ctl_name_5;
        public char    ctl_en_flag_5;
        public string  ctl_name_6;
        public char    ctl_en_flag_6;
        public string  ctl_name_7;
        public char    ctl_en_flag_7;
        public string  ctl_name_8;
        public char    ctl_en_flag_8;
        public string  ctl_name_9;
        public char    ctl_en_flag_9;
        public string  ctl_name_10;
        public char    ctl_en_flag_10;
        public string  tab_name_1;
        public char    tab_ds_flag_1;
        public string  tab_name_2;
        public char    tab_ds_flag_2;
        public string  tab_name_3;
        public char    tab_ds_flag_3;
        public string  tab_name_4;
        public char    tab_ds_flag_4;
        public string  tab_name_5;
        public char    tab_ds_flag_5;
        public string  tab_name_6;
        public char    tab_ds_flag_6;
        public string  tab_name_7;
        public char    tab_ds_flag_7;
        public string  tab_name_8;
        public char    tab_ds_flag_8;
        public string  tab_name_9;
        public char    tab_ds_flag_9;
        public string  tab_name_10;
        public char    tab_ds_flag_10;
        public string  opt_name_1;
        public string  opt_value_1;
        public string  opt_name_2;
        public string  opt_value_2;
        public string  opt_name_3;
        public string  opt_value_3;
        public string  opt_name_4;
        public string  opt_value_4;
        public string  opt_name_5;
        public string  opt_value_5;
        public string  opt_name_6;
        public string  opt_value_6;
        public string  opt_name_7;
        public string  opt_value_7;
        public string  opt_name_8;
        public string  opt_value_8;
        public string  opt_name_9;
        public string  opt_value_9;
        public string  opt_name_10;
        public string  opt_value_10;
        public char    fld_en_mask_use_flag;
        public char    fld_en_all_flag;
        public string  fld_en_mask;
        public string  help_url;
    }

    public class FMB_Get_HelpURL_In_Tag
    {
        public string  h_passport;
        public char    h_language;
        public string  h_factory;
        public string  h_user_id;
        public string  h_password;
        public char    h_proc_step;
        public string  func_name;
    }

    public class FMB_Get_HelpURL_Out_Tag
    {
        public char    h_status_value;
        public string  h_msg_code;
        public string  h_msg;
        public string  h_field_msg;
        public string  h_db_err_msg;
        public string  help_url;
    }

    public class FMB_View_Attach_Character_In_Tag
    {
        public string  h_passport;
        public char    h_language;
        public string  h_factory;
        public string  h_user_id;
        public string  h_password;
        public char    h_proc_step;
        public string  col_set_id;
        public int     col_set_version;
        public string  char_id;
    }

    public class FMB_View_Attach_Character_Out_Tag_def_unit_list
    {
        public int     unit_seq_num;
        public char    null_flag;
        public string  def_unit_id;
    }

    public class FMB_View_Attach_Character_Out_Tag
    {
        public char    h_status_value;
        public string  h_msg_code;
        public string  h_msg;
        public string  h_field_msg;
        public string  h_db_err_msg;
        public string  col_set_id;
        public int     col_set_version;
        public string  char_id;
        public int     seq_num;
        public char    value_type;
        public int     unit_count;
        public int     value_count;
        public int     display_precision;
        public string  value_tbl;
        public string  def_value;
        public char    opt_input_flag;
        public char    blank_rec_save_flag;
        public char    derived_param_flag;
        public string  derived_parameter;
        public char    def_unit_flag;
        public char    def_unit_ovr_flag;
        public string  unit_tbl;
        public char    spec_type;
        public int     spec_out_count;
        public string  target_value;
        public string  upper_spec_limit;
        public string  lower_spec_limit;
        public string  upper_warn_limit;
        public string  lower_warn_limit;
        public string  upper_cust_limit;
        public string  lower_cust_limit;
        public string  spec_info;
        public string  spec_out_alarm;
        public string  warn_out_alarm;
        public string  create_user_id;
        public string  create_time;
        public string  update_user_id;
        public string  update_time;
        public int     def_unit_count;
        public int     _size_def_unit_list;
        public FMB_View_Attach_Character_Out_Tag_def_unit_list[] def_unit_list;
    }

    public class FMB_View_FMB_Group_List_In_Tag
    {
        public string  h_passport;
        public char    h_language;
        public string  h_factory;
        public string  h_user_id;
        public string  h_password;
        public char    h_proc_step;
        public string  security_group;
        public string  next_group;
        public string  next_user;
    }

    public class FMB_View_FMB_Group_List_Out_Tag_udr_group_list
    {
        public string  group;
        public string  group_desc;
        public string  user;
        public string  user_desc;
    }

    public class FMB_View_FMB_Group_List_Out_Tag
    {
        public char    h_status_value;
        public string  h_msg_code;
        public string  h_msg;
        public string  h_field_msg;
        public string  h_db_err_msg;
        public int     count;
        public string  next_group;
        public string  next_user;
        public int     _size_udr_group_list;
        public FMB_View_FMB_Group_List_Out_Tag_udr_group_list[] udr_group_list;
    }


    public class FMBType: h101type
    {
        public FMBType()
        {
        }

        public static void serialize_FMB_Update_ResLoc_In_Tag(StreamTransformer former, FMB_Update_ResLoc_In_Tag target)
        {
            FMBCoreType.serialize_FMB_UPDATE_RESLOC_IN_TAG(former, target._C);
        }

        public static void transform_FMB_Update_ResLoc_In_Tag(StreamTransformer former, ref FMB_Update_ResLoc_In_Tag source)
        {
            FMBCoreType.transform_FMB_UPDATE_RESLOC_IN_TAG(former, ref source._C);
        }

        public static void serialize_FMB_Update_UDR_Group_In_Tag(StreamTransformer former, FMB_Update_UDR_Group_In_Tag target)
        {
            FMBCoreType.serialize_FMB_UPDATE_UDR_GROUP_IN_TAG(former, target._C);
        }

        public static void transform_FMB_Update_UDR_Group_In_Tag(StreamTransformer former, ref FMB_Update_UDR_Group_In_Tag source)
        {
            FMBCoreType.transform_FMB_UPDATE_UDR_GROUP_IN_TAG(former, ref source._C);
        }

        public static void serialize_FMB_Update_UDR_ResLoc_In_Tag(StreamTransformer former, FMB_Update_UDR_ResLoc_In_Tag target)
        {
            FMBCoreType.serialize_FMB_UPDATE_UDR_RESLOC_IN_TAG(former, target._C);
        }

        public static void transform_FMB_Update_UDR_ResLoc_In_Tag(StreamTransformer former, ref FMB_Update_UDR_ResLoc_In_Tag source)
        {
            FMBCoreType.transform_FMB_UPDATE_UDR_RESLOC_IN_TAG(former, ref source._C);
        }

        public static void serialize_FMB_Update_LayOut_In_Tag(StreamTransformer former, FMB_Update_LayOut_In_Tag target)
        {
            FMBCoreType.serialize_FMB_UPDATE_LAYOUT_IN_TAG(former, target._C);
        }

        public static void transform_FMB_Update_LayOut_In_Tag(StreamTransformer former, ref FMB_Update_LayOut_In_Tag source)
        {
            FMBCoreType.transform_FMB_UPDATE_LAYOUT_IN_TAG(former, ref source._C);
        }

        public static void serialize_FMB_Moving_by_Force_In_Tag(StreamTransformer former, FMB_Moving_by_Force_In_Tag target)
        {
            FMBCoreType.serialize_FMB_MOVING_BY_FORCE_IN_TAG(former, target._C);
        }

        public static void transform_FMB_Moving_by_Force_In_Tag(StreamTransformer former, ref FMB_Moving_by_Force_In_Tag source)
        {
            FMBCoreType.transform_FMB_MOVING_BY_FORCE_IN_TAG(former, ref source._C);
        }

        public static void serialize_FMB_Exist_Control_In_Tag(StreamTransformer former, FMB_Exist_Control_In_Tag target)
        {
            FMBCoreType.serialize_FMB_EXIST_CONTROL_IN_TAG(former, target._C);
        }

        public static void transform_FMB_Exist_Control_In_Tag(StreamTransformer former, ref FMB_Exist_Control_In_Tag source)
        {
            FMBCoreType.transform_FMB_EXIST_CONTROL_IN_TAG(former, ref source._C);
        }

        public static void serialize_FMB_Exist_Control_Out_Tag(StreamTransformer former, FMB_Exist_Control_Out_Tag target)
        {
            FMBCoreType.serialize_FMB_EXIST_CONTROL_OUT_TAG(former, target._C);
        }

        public static void transform_FMB_Exist_Control_Out_Tag(StreamTransformer former, ref FMB_Exist_Control_Out_Tag source)
        {
            FMBCoreType.transform_FMB_EXIST_CONTROL_OUT_TAG(former, ref source._C);
        }

        public static void serialize_FMB_Resource_Priority_In_Tag(StreamTransformer former, FMB_Resource_Priority_In_Tag target)
        {
            FMBCoreType.serialize_FMB_RESOURCE_PRIORITY_IN_TAG(former, target._C);
        }

        public static void transform_FMB_Resource_Priority_In_Tag(StreamTransformer former, ref FMB_Resource_Priority_In_Tag source)
        {
            FMBCoreType.transform_FMB_RESOURCE_PRIORITY_IN_TAG(former, ref source._C);
        }

        public static void serialize_FMB_UDR_Priority_In_Tag(StreamTransformer former, FMB_UDR_Priority_In_Tag target)
        {
            FMBCoreType.serialize_FMB_UDR_PRIORITY_IN_TAG(former, target._C);
        }

        public static void transform_FMB_UDR_Priority_In_Tag(StreamTransformer former, ref FMB_UDR_Priority_In_Tag source)
        {
            FMBCoreType.transform_FMB_UDR_PRIORITY_IN_TAG(former, ref source._C);
        }

        public static void serialize_FMB_Resource_Event_In_Tag(StreamTransformer former, FMB_Resource_Event_In_Tag target)
        {
            FMBCoreType.serialize_FMB_RESOURCE_EVENT_IN_TAG(former, target._C);
        }

        public static void transform_FMB_Resource_Event_In_Tag(StreamTransformer former, ref FMB_Resource_Event_In_Tag source)
        {
            FMBCoreType.transform_FMB_RESOURCE_EVENT_IN_TAG(former, ref source._C);
        }

        public static void serialize_FMB_Resource_Event_Out_Tag(StreamTransformer former, FMB_Resource_Event_Out_Tag target)
        {
            FMBCoreType.serialize_FMB_RESOURCE_EVENT_OUT_TAG(former, target._C);
        }

        public static void transform_FMB_Resource_Event_Out_Tag(StreamTransformer former, ref FMB_Resource_Event_Out_Tag source)
        {
            FMBCoreType.transform_FMB_RESOURCE_EVENT_OUT_TAG(former, ref source._C);
        }

        public static void serialize_FMB_Update_Environment_In_Tag(StreamTransformer former, FMB_Update_Environment_In_Tag target)
        {
            FMBCoreType.serialize_FMB_UPDATE_ENVIRONMENT_IN_TAG(former, target._C);
        }

        public static void transform_FMB_Update_Environment_In_Tag(StreamTransformer former, ref FMB_Update_Environment_In_Tag source)
        {
            FMBCoreType.transform_FMB_UPDATE_ENVIRONMENT_IN_TAG(former, ref source._C);
        }

        public static void serialize_FMB_Update_Event_Color_In_Tag(StreamTransformer former, FMB_Update_Event_Color_In_Tag target)
        {
            FMBCoreType.serialize_FMB_UPDATE_EVENT_COLOR_IN_TAG(former, target._C);
        }

        public static void transform_FMB_Update_Event_Color_In_Tag(StreamTransformer former, ref FMB_Update_Event_Color_In_Tag source)
        {
            FMBCoreType.transform_FMB_UPDATE_EVENT_COLOR_IN_TAG(former, ref source._C);
        }

        public static void serialize_FMB_Update_Resource_Image_In_Tag(StreamTransformer former, FMB_Update_Resource_Image_In_Tag target)
        {
            FMBCoreType.serialize_FMB_UPDATE_RESOURCE_IMAGE_IN_TAG(former, target._C);
        }

        public static void transform_FMB_Update_Resource_Image_In_Tag(StreamTransformer former, ref FMB_Update_Resource_Image_In_Tag source)
        {
            FMBCoreType.transform_FMB_UPDATE_RESOURCE_IMAGE_IN_TAG(former, ref source._C);
        }

        public static void serialize_FMB_Update_ResLoc_List_In_Tag(StreamTransformer former, FMB_Update_ResLoc_List_In_Tag target)
        {
            FMBCoreType.serialize_FMB_UPDATE_RESLOC_LIST_IN_TAG(former, target._C);
        }

        public static void transform_FMB_Update_ResLoc_List_In_Tag(StreamTransformer former, ref FMB_Update_ResLoc_List_In_Tag source)
        {
            FMBCoreType.transform_FMB_UPDATE_RESLOC_LIST_IN_TAG(former, ref source._C);
        }

        public static void serialize_FMB_Update_UDRLoc_List_In_Tag(StreamTransformer former, FMB_Update_UDRLoc_List_In_Tag target)
        {
            FMBCoreType.serialize_FMB_UPDATE_UDRLOC_LIST_IN_TAG(former, target._C);
        }

        public static void transform_FMB_Update_UDRLoc_List_In_Tag(StreamTransformer former, ref FMB_Update_UDRLoc_List_In_Tag source)
        {
            FMBCoreType.transform_FMB_UPDATE_UDRLOC_LIST_IN_TAG(former, ref source._C);
        }

        public static void serialize_FMB_Copy_UDR_Group_In_Tag(StreamTransformer former, FMB_Copy_UDR_Group_In_Tag target)
        {
            FMBCoreType.serialize_FMB_COPY_UDR_GROUP_IN_TAG(former, target._C);
        }

        public static void transform_FMB_Copy_UDR_Group_In_Tag(StreamTransformer former, ref FMB_Copy_UDR_Group_In_Tag source)
        {
            FMBCoreType.transform_FMB_COPY_UDR_GROUP_IN_TAG(former, ref source._C);
        }

        public static void serialize_FMB_Update_FMB_Group_In_Tag(StreamTransformer former, FMB_Update_FMB_Group_In_Tag target)
        {
            FMBCoreType.serialize_FMB_UPDATE_FMB_GROUP_IN_TAG(former, target._C);
        }

        public static void transform_FMB_Update_FMB_Group_In_Tag(StreamTransformer former, ref FMB_Update_FMB_Group_In_Tag source)
        {
            FMBCoreType.transform_FMB_UPDATE_FMB_GROUP_IN_TAG(former, ref source._C);
        }

        public static void serialize_FMB_Find_Col_Set_Version_In_Tag(StreamTransformer former, FMB_Find_Col_Set_Version_In_Tag target)
        {
            FMBCoreType.serialize_FMB_FIND_COL_SET_VERSION_IN_TAG(former, target._C);
        }

        public static void transform_FMB_Find_Col_Set_Version_In_Tag(StreamTransformer former, ref FMB_Find_Col_Set_Version_In_Tag source)
        {
            FMBCoreType.transform_FMB_FIND_COL_SET_VERSION_IN_TAG(former, ref source._C);
        }

        public static void serialize_FMB_Find_Col_Set_Version_Out_Tag(StreamTransformer former, FMB_Find_Col_Set_Version_Out_Tag target)
        {
            FMBCoreType.serialize_FMB_FIND_COL_SET_VERSION_OUT_TAG(former, target._C);
        }

        public static void transform_FMB_Find_Col_Set_Version_Out_Tag(StreamTransformer former, ref FMB_Find_Col_Set_Version_Out_Tag source)
        {
            FMBCoreType.transform_FMB_FIND_COL_SET_VERSION_OUT_TAG(former, ref source._C);
        }

        public static void serialize_FMB_View_Factory_List_In_Tag(StreamTransformer former, FMB_View_Factory_List_In_Tag target)
        {
            former.writeMsgString(withoutSpace(target.h_passport));
            former.writeMsgChar(target.h_language);
            former.writeMsgString(withoutSpace(target.h_factory));
            former.writeMsgString(withoutSpace(target.h_user_id));
            former.writeMsgString(withoutSpace(target.h_password));
            former.writeMsgChar(target.h_proc_step);
            former.writeMsgString(withoutSpace(target.next_factory));
        }

        public static void transform_FMB_View_Factory_List_In_Tag(StreamTransformer former, ref FMB_View_Factory_List_In_Tag source)
        {
            source.h_passport = deleteNull(former.readMsgString());
            source.h_language = former.readMsgChar();
            source.h_factory = deleteNull(former.readMsgString());
            source.h_user_id = deleteNull(former.readMsgString());
            source.h_password = deleteNull(former.readMsgString());
            source.h_proc_step = former.readMsgChar();
            source.next_factory = deleteNull(former.readMsgString());
        }

        public static void serialize_FMB_View_Factory_List_Out_Tag_factory_list(StreamTransformer former, FMB_View_Factory_List_Out_Tag_factory_list target)
        {
            former.writeMsgString(withoutSpace(target.factory));
            former.writeMsgString(withoutSpace(target.fac_desc));
        }

        public static void serialize_FMB_View_Factory_List_Out_Tag(StreamTransformer former, FMB_View_Factory_List_Out_Tag target)
        {
            former.writeMsgChar(target.h_status_value);
            former.writeMsgString(withoutSpace(target.h_msg_code));
            former.writeMsgString(withoutSpace(target.h_msg));
            former.writeMsgString(withoutSpace(target.h_field_msg));
            former.writeMsgString(withoutSpace(target.h_db_err_msg));
            former.writeMsgInt(target.count);
            former.writeMsgString(withoutSpace(target.next_factory));
            target._size_factory_list = (1000 >= target._size_factory_list ? target._size_factory_list : 1000);
            former.writeMsgInt(target._size_factory_list);
            for(int i = 0; i < target._size_factory_list; i++)
            {
                serialize_FMB_View_Factory_List_Out_Tag_factory_list(former, target.factory_list[i]);
            }
        }

        public static void transform_FMB_View_Factory_List_Out_Tag_factory_list(StreamTransformer former, ref FMB_View_Factory_List_Out_Tag_factory_list source)
        {
            source.factory = deleteNull(former.readMsgString());
            source.fac_desc = deleteNull(former.readMsgString());
        }

        public static void transform_FMB_View_Factory_List_Out_Tag(StreamTransformer former, ref FMB_View_Factory_List_Out_Tag source)
        {
            source.h_status_value = former.readMsgChar();
            source.h_msg_code = deleteNull(former.readMsgString());
            source.h_msg = deleteNull(former.readMsgString());
            source.h_field_msg = deleteNull(former.readMsgString());
            source.h_db_err_msg = deleteNull(former.readMsgString());
            source.count = former.readMsgInt();
            source.next_factory = deleteNull(former.readMsgString());
            source._size_factory_list = former.readMsgInt();
            source.factory_list = new FMB_View_Factory_List_Out_Tag_factory_list[source._size_factory_list];
            for(int i = 0; i < source._size_factory_list; i++)
            {
                source.factory_list[i] = new FMB_View_Factory_List_Out_Tag_factory_list();
                transform_FMB_View_Factory_List_Out_Tag_factory_list(former, ref source.factory_list[i]);
            }
        }

        public static void serialize_FMB_View_UDR_Group_List_In_Tag(StreamTransformer former, FMB_View_UDR_Group_List_In_Tag target)
        {
            former.writeMsgString(withoutSpace(target.h_passport));
            former.writeMsgChar(target.h_language);
            former.writeMsgString(withoutSpace(target.h_factory));
            former.writeMsgString(withoutSpace(target.h_user_id));
            former.writeMsgString(withoutSpace(target.h_password));
            former.writeMsgChar(target.h_proc_step);
            former.writeMsgString(withoutSpace(target.user_name));
            former.writeMsgString(withoutSpace(target.next_group));
        }

        public static void transform_FMB_View_UDR_Group_List_In_Tag(StreamTransformer former, ref FMB_View_UDR_Group_List_In_Tag source)
        {
            source.h_passport = deleteNull(former.readMsgString());
            source.h_language = former.readMsgChar();
            source.h_factory = deleteNull(former.readMsgString());
            source.h_user_id = deleteNull(former.readMsgString());
            source.h_password = deleteNull(former.readMsgString());
            source.h_proc_step = former.readMsgChar();
            source.user_name = deleteNull(former.readMsgString());
            source.next_group = deleteNull(former.readMsgString());
        }

        public static void serialize_FMB_View_UDR_Group_List_Out_Tag_udr_group_list(StreamTransformer former, FMB_View_UDR_Group_List_Out_Tag_udr_group_list target)
        {
            former.writeMsgString(withoutSpace(target.group));
            former.writeMsgString(withoutSpace(target.group_desc));
            former.writeMsgInt(target.width);
            former.writeMsgInt(target.height);
        }

        public static void serialize_FMB_View_UDR_Group_List_Out_Tag(StreamTransformer former, FMB_View_UDR_Group_List_Out_Tag target)
        {
            former.writeMsgChar(target.h_status_value);
            former.writeMsgString(withoutSpace(target.h_msg_code));
            former.writeMsgString(withoutSpace(target.h_msg));
            former.writeMsgString(withoutSpace(target.h_field_msg));
            former.writeMsgString(withoutSpace(target.h_db_err_msg));
            former.writeMsgInt(target.count);
            former.writeMsgString(withoutSpace(target.next_group));
            target._size_udr_group_list = (1000 >= target._size_udr_group_list ? target._size_udr_group_list : 1000);
            former.writeMsgInt(target._size_udr_group_list);
            for(int i = 0; i < target._size_udr_group_list; i++)
            {
                serialize_FMB_View_UDR_Group_List_Out_Tag_udr_group_list(former, target.udr_group_list[i]);
            }
        }

        public static void transform_FMB_View_UDR_Group_List_Out_Tag_udr_group_list(StreamTransformer former, ref FMB_View_UDR_Group_List_Out_Tag_udr_group_list source)
        {
            source.group = deleteNull(former.readMsgString());
            source.group_desc = deleteNull(former.readMsgString());
            source.width = former.readMsgInt();
            source.height = former.readMsgInt();
        }

        public static void transform_FMB_View_UDR_Group_List_Out_Tag(StreamTransformer former, ref FMB_View_UDR_Group_List_Out_Tag source)
        {
            source.h_status_value = former.readMsgChar();
            source.h_msg_code = deleteNull(former.readMsgString());
            source.h_msg = deleteNull(former.readMsgString());
            source.h_field_msg = deleteNull(former.readMsgString());
            source.h_db_err_msg = deleteNull(former.readMsgString());
            source.count = former.readMsgInt();
            source.next_group = deleteNull(former.readMsgString());
            source._size_udr_group_list = former.readMsgInt();
            source.udr_group_list = new FMB_View_UDR_Group_List_Out_Tag_udr_group_list[source._size_udr_group_list];
            for(int i = 0; i < source._size_udr_group_list; i++)
            {
                source.udr_group_list[i] = new FMB_View_UDR_Group_List_Out_Tag_udr_group_list();
                transform_FMB_View_UDR_Group_List_Out_Tag_udr_group_list(former, ref source.udr_group_list[i]);
            }
        }

        public static void serialize_FMB_View_Resource_List_In_Tag(StreamTransformer former, FMB_View_Resource_List_In_Tag target)
        {
            former.writeMsgString(withoutSpace(target.h_passport));
            former.writeMsgChar(target.h_language);
            former.writeMsgString(withoutSpace(target.h_factory));
            former.writeMsgString(withoutSpace(target.h_user_id));
            former.writeMsgString(withoutSpace(target.h_password));
            former.writeMsgChar(target.h_proc_step);
            former.writeMsgChar(target.res_type);
            former.writeMsgString(withoutSpace(target.layout_id));
            former.writeMsgString(withoutSpace(target.next_res_id));
            former.writeMsgInt(target.next_seq);
            former.writeMsgString(withoutSpace(target.res_grp));
            former.writeMsgString(withoutSpace(target.area_id));
            former.writeMsgString(withoutSpace(target.sub_area_id));
            former.writeMsgString(withoutSpace(target.filter));
            former.writeMsgChar(target.include_del_res);
            former.writeMsgChar(target.include_proc_lot_info);
        }

        public static void transform_FMB_View_Resource_List_In_Tag(StreamTransformer former, ref FMB_View_Resource_List_In_Tag source)
        {
            source.h_passport = deleteNull(former.readMsgString());
            source.h_language = former.readMsgChar();
            source.h_factory = deleteNull(former.readMsgString());
            source.h_user_id = deleteNull(former.readMsgString());
            source.h_password = deleteNull(former.readMsgString());
            source.h_proc_step = former.readMsgChar();
            source.res_type = former.readMsgChar();
            source.layout_id = deleteNull(former.readMsgString());
            source.next_res_id = deleteNull(former.readMsgString());
            source.next_seq = former.readMsgInt();
            source.res_grp = deleteNull(former.readMsgString());
            source.area_id = deleteNull(former.readMsgString());
            source.sub_area_id = deleteNull(former.readMsgString());
            source.filter = deleteNull(former.readMsgString());
            source.include_del_res = former.readMsgChar();
            source.include_proc_lot_info = former.readMsgChar();
        }

        public static void serialize_FMB_View_Resource_List_Out_Tag_res_list(StreamTransformer former, FMB_View_Resource_List_Out_Tag_res_list target)
        {
            former.writeMsgString(withoutSpace(target.res_id));
            former.writeMsgString(withoutSpace(target.res_desc));
            former.writeMsgChar(target.attached_flag);
            former.writeMsgString(withoutSpace(target.layout_id));
            former.writeMsgChar(target.delete_flag);
            former.writeMsgChar(target.res_up_down_flag);
            former.writeMsgString(withoutSpace(target.res_type));
            former.writeMsgString(withoutSpace(target.area_id));
            former.writeMsgString(withoutSpace(target.sub_area_id));
            former.writeMsgString(withoutSpace(target.res_pri_sts));
            former.writeMsgString(withoutSpace(target.res_ctrl_mode));
            former.writeMsgString(withoutSpace(target.res_proc_mode));
            former.writeMsgString(withoutSpace(target.last_start_time));
            former.writeMsgString(withoutSpace(target.last_end_time));
            former.writeMsgString(withoutSpace(target.last_down_time));
            former.writeMsgString(withoutSpace(target.last_event));
            former.writeMsgString(withoutSpace(target.last_event_time));
            former.writeMsgInt(target.img_idx);
        }

        public static void serialize_FMB_View_Resource_List_Out_Tag(StreamTransformer former, FMB_View_Resource_List_Out_Tag target)
        {
            former.writeMsgChar(target.h_status_value);
            former.writeMsgString(withoutSpace(target.h_msg_code));
            former.writeMsgString(withoutSpace(target.h_msg));
            former.writeMsgString(withoutSpace(target.h_field_msg));
            former.writeMsgString(withoutSpace(target.h_db_err_msg));
            former.writeMsgInt(target.count);
            former.writeMsgString(withoutSpace(target.next_res_id));
            target._size_res_list = (500 >= target._size_res_list ? target._size_res_list : 500);
            former.writeMsgInt(target._size_res_list);
            for(int i = 0; i < target._size_res_list; i++)
            {
                serialize_FMB_View_Resource_List_Out_Tag_res_list(former, target.res_list[i]);
            }
        }

        public static void transform_FMB_View_Resource_List_Out_Tag_res_list(StreamTransformer former, ref FMB_View_Resource_List_Out_Tag_res_list source)
        {
            source.res_id = deleteNull(former.readMsgString());
            source.res_desc = deleteNull(former.readMsgString());
            source.attached_flag = former.readMsgChar();
            source.layout_id = deleteNull(former.readMsgString());
            source.delete_flag = former.readMsgChar();
            source.res_up_down_flag = former.readMsgChar();
            source.res_type = deleteNull(former.readMsgString());
            source.area_id = deleteNull(former.readMsgString());
            source.sub_area_id = deleteNull(former.readMsgString());
            source.res_pri_sts = deleteNull(former.readMsgString());
            source.res_ctrl_mode = deleteNull(former.readMsgString());
            source.res_proc_mode = deleteNull(former.readMsgString());
            source.last_start_time = deleteNull(former.readMsgString());
            source.last_end_time = deleteNull(former.readMsgString());
            source.last_down_time = deleteNull(former.readMsgString());
            source.last_event = deleteNull(former.readMsgString());
            source.last_event_time = deleteNull(former.readMsgString());
            source.img_idx = former.readMsgInt();
        }

        public static void transform_FMB_View_Resource_List_Out_Tag(StreamTransformer former, ref FMB_View_Resource_List_Out_Tag source)
        {
            source.h_status_value = former.readMsgChar();
            source.h_msg_code = deleteNull(former.readMsgString());
            source.h_msg = deleteNull(former.readMsgString());
            source.h_field_msg = deleteNull(former.readMsgString());
            source.h_db_err_msg = deleteNull(former.readMsgString());
            source.count = former.readMsgInt();
            source.next_res_id = deleteNull(former.readMsgString());
            source._size_res_list = former.readMsgInt();
            source.res_list = new FMB_View_Resource_List_Out_Tag_res_list[source._size_res_list];
            for(int i = 0; i < source._size_res_list; i++)
            {
                source.res_list[i] = new FMB_View_Resource_List_Out_Tag_res_list();
                transform_FMB_View_Resource_List_Out_Tag_res_list(former, ref source.res_list[i]);
            }
        }

        public static void serialize_FMB_View_Resource_List_Out_Detail_Tag_res_list(StreamTransformer former, FMB_View_Resource_List_Out_Detail_Tag_res_list target)
        {
            former.writeMsgString(withoutSpace(target.res_id));
            former.writeMsgInt(target.seq);
            former.writeMsgChar(target.res_tag_flag);
            former.writeMsgString(withoutSpace(target.layout_id));
            former.writeMsgInt(target.loc_x);
            former.writeMsgInt(target.loc_y);
            former.writeMsgInt(target.loc_width);
            former.writeMsgInt(target.loc_height);
            former.writeMsgString(withoutSpace(target.text));
            former.writeMsgInt(target.text_size);
            former.writeMsgInt(target.text_color);
            former.writeMsgChar(target.text_style);
            former.writeMsgInt(target.tag_type);
            former.writeMsgInt(target.back_color);
            former.writeMsgString(withoutSpace(target.create_user_id));
            former.writeMsgString(withoutSpace(target.create_time));
            former.writeMsgString(withoutSpace(target.update_user_id));
            former.writeMsgString(withoutSpace(target.update_time));
            former.writeMsgString(withoutSpace(target.res_desc));
            former.writeMsgString(withoutSpace(target.res_type));
            former.writeMsgString(withoutSpace(target.area_id));
            former.writeMsgString(withoutSpace(target.sub_area_id));
            former.writeMsgString(withoutSpace(target.res_location));
            former.writeMsgChar(target.proc_rule);
            former.writeMsgInt(target.max_proc_count);
            former.writeMsgChar(target.res_up_down_flag);
            former.writeMsgString(withoutSpace(target.res_pri_sts));
            former.writeMsgString(withoutSpace(target.lot_id));
            former.writeMsgString(withoutSpace(target.sublot_id));
            former.writeMsgString(withoutSpace(target.crr_id));
            former.writeMsgString(withoutSpace(target.res_ctrl_mode));
            former.writeMsgString(withoutSpace(target.res_proc_mode));
            former.writeMsgString(withoutSpace(target.last_recipe_id));
            former.writeMsgInt(target.proc_count);
            former.writeMsgString(withoutSpace(target.last_start_time));
            former.writeMsgString(withoutSpace(target.last_end_time));
            former.writeMsgString(withoutSpace(target.last_down_time));
            former.writeMsgInt(target.last_down_hist_seq);
            former.writeMsgString(withoutSpace(target.last_event));
            former.writeMsgString(withoutSpace(target.last_event_time));
            former.writeMsgInt(target.last_active_hist_seq);
            former.writeMsgInt(target.last_hist_seq);
            former.writeMsgInt(target.img_idx);
            former.writeMsgChar(target.no_mouse_event);
            former.writeMsgChar(target.signal_flag);
        }

        public static void serialize_FMB_View_Resource_List_Out_Detail_Tag(StreamTransformer former, FMB_View_Resource_List_Out_Detail_Tag target)
        {
            former.writeMsgChar(target.h_status_value);
            former.writeMsgString(withoutSpace(target.h_msg_code));
            former.writeMsgString(withoutSpace(target.h_msg));
            former.writeMsgString(withoutSpace(target.h_field_msg));
            former.writeMsgString(withoutSpace(target.h_db_err_msg));
            former.writeMsgInt(target.count);
            former.writeMsgString(withoutSpace(target.next_res_id));
            former.writeMsgInt(target.next_seq);
            target._size_res_list = (500 >= target._size_res_list ? target._size_res_list : 500);
            former.writeMsgInt(target._size_res_list);
            for(int i = 0; i < target._size_res_list; i++)
            {
                serialize_FMB_View_Resource_List_Out_Detail_Tag_res_list(former, target.res_list[i]);
            }
        }

        public static void transform_FMB_View_Resource_List_Out_Detail_Tag_res_list(StreamTransformer former, ref FMB_View_Resource_List_Out_Detail_Tag_res_list source)
        {
            source.res_id = deleteNull(former.readMsgString());
            source.seq = former.readMsgInt();
            source.res_tag_flag = former.readMsgChar();
            source.layout_id = deleteNull(former.readMsgString());
            source.loc_x = former.readMsgInt();
            source.loc_y = former.readMsgInt();
            source.loc_width = former.readMsgInt();
            source.loc_height = former.readMsgInt();
            source.text = deleteNull(former.readMsgString());
            source.text_size = former.readMsgInt();
            source.text_color = former.readMsgInt();
            source.text_style = former.readMsgChar();
            source.tag_type = former.readMsgInt();
            source.back_color = former.readMsgInt();
            source.create_user_id = deleteNull(former.readMsgString());
            source.create_time = deleteNull(former.readMsgString());
            source.update_user_id = deleteNull(former.readMsgString());
            source.update_time = deleteNull(former.readMsgString());
            source.res_desc = deleteNull(former.readMsgString());
            source.res_type = deleteNull(former.readMsgString());
            source.area_id = deleteNull(former.readMsgString());
            source.sub_area_id = deleteNull(former.readMsgString());
            source.res_location = deleteNull(former.readMsgString());
            source.proc_rule = former.readMsgChar();
            source.max_proc_count = former.readMsgInt();
            source.res_up_down_flag = former.readMsgChar();
            source.res_pri_sts = deleteNull(former.readMsgString());
            source.lot_id = deleteNull(former.readMsgString());
            source.sublot_id = deleteNull(former.readMsgString());
            source.crr_id = deleteNull(former.readMsgString());
            source.res_ctrl_mode = deleteNull(former.readMsgString());
            source.res_proc_mode = deleteNull(former.readMsgString());
            source.last_recipe_id = deleteNull(former.readMsgString());
            source.proc_count = former.readMsgInt();
            source.last_start_time = deleteNull(former.readMsgString());
            source.last_end_time = deleteNull(former.readMsgString());
            source.last_down_time = deleteNull(former.readMsgString());
            source.last_down_hist_seq = former.readMsgInt();
            source.last_event = deleteNull(former.readMsgString());
            source.last_event_time = deleteNull(former.readMsgString());
            source.last_active_hist_seq = former.readMsgInt();
            source.last_hist_seq = former.readMsgInt();
            source.img_idx = former.readMsgInt();
            source.no_mouse_event = former.readMsgChar();
            source.signal_flag = former.readMsgChar();
        }

        public static void transform_FMB_View_Resource_List_Out_Detail_Tag(StreamTransformer former, ref FMB_View_Resource_List_Out_Detail_Tag source)
        {
            source.h_status_value = former.readMsgChar();
            source.h_msg_code = deleteNull(former.readMsgString());
            source.h_msg = deleteNull(former.readMsgString());
            source.h_field_msg = deleteNull(former.readMsgString());
            source.h_db_err_msg = deleteNull(former.readMsgString());
            source.count = former.readMsgInt();
            source.next_res_id = deleteNull(former.readMsgString());
            source.next_seq = former.readMsgInt();
            source._size_res_list = former.readMsgInt();
            source.res_list = new FMB_View_Resource_List_Out_Detail_Tag_res_list[source._size_res_list];
            for(int i = 0; i < source._size_res_list; i++)
            {
                source.res_list[i] = new FMB_View_Resource_List_Out_Detail_Tag_res_list();
                transform_FMB_View_Resource_List_Out_Detail_Tag_res_list(former, ref source.res_list[i]);
            }
        }

        public static void serialize_FMB_View_UDR_Resource_List_In_Tag(StreamTransformer former, FMB_View_UDR_Resource_List_In_Tag target)
        {
            former.writeMsgString(withoutSpace(target.h_passport));
            former.writeMsgChar(target.h_language);
            former.writeMsgString(withoutSpace(target.h_factory));
            former.writeMsgString(withoutSpace(target.h_user_id));
            former.writeMsgString(withoutSpace(target.h_password));
            former.writeMsgChar(target.h_proc_step);
            former.writeMsgString(withoutSpace(target.group));
            former.writeMsgChar(target.res_type);
            former.writeMsgString(withoutSpace(target.next_res_id));
            former.writeMsgInt(target.next_seq);
        }

        public static void transform_FMB_View_UDR_Resource_List_In_Tag(StreamTransformer former, ref FMB_View_UDR_Resource_List_In_Tag source)
        {
            source.h_passport = deleteNull(former.readMsgString());
            source.h_language = former.readMsgChar();
            source.h_factory = deleteNull(former.readMsgString());
            source.h_user_id = deleteNull(former.readMsgString());
            source.h_password = deleteNull(former.readMsgString());
            source.h_proc_step = former.readMsgChar();
            source.group = deleteNull(former.readMsgString());
            source.res_type = former.readMsgChar();
            source.next_res_id = deleteNull(former.readMsgString());
            source.next_seq = former.readMsgInt();
        }

        public static void serialize_FMB_View_UDR_Resource_List_Out_Tag_udr_res_list(StreamTransformer former, FMB_View_UDR_Resource_List_Out_Tag_udr_res_list target)
        {
            former.writeMsgString(withoutSpace(target.res_id));
            former.writeMsgString(withoutSpace(target.res_desc));
            former.writeMsgChar(target.attached_flag);
            former.writeMsgChar(target.res_up_down_flag);
            former.writeMsgString(withoutSpace(target.res_type));
            former.writeMsgString(withoutSpace(target.area_id));
            former.writeMsgString(withoutSpace(target.sub_area_id));
            former.writeMsgString(withoutSpace(target.res_pri_sts));
            former.writeMsgString(withoutSpace(target.res_ctrl_mode));
            former.writeMsgString(withoutSpace(target.res_proc_mode));
            former.writeMsgString(withoutSpace(target.last_start_time));
            former.writeMsgString(withoutSpace(target.last_end_time));
            former.writeMsgString(withoutSpace(target.last_down_time));
            former.writeMsgString(withoutSpace(target.last_event));
            former.writeMsgString(withoutSpace(target.last_event_time));
            former.writeMsgInt(target.img_idx);
        }

        public static void serialize_FMB_View_UDR_Resource_List_Out_Tag(StreamTransformer former, FMB_View_UDR_Resource_List_Out_Tag target)
        {
            former.writeMsgChar(target.h_status_value);
            former.writeMsgString(withoutSpace(target.h_msg_code));
            former.writeMsgString(withoutSpace(target.h_msg));
            former.writeMsgString(withoutSpace(target.h_field_msg));
            former.writeMsgString(withoutSpace(target.h_db_err_msg));
            former.writeMsgInt(target.count);
            former.writeMsgString(withoutSpace(target.next_res_id));
            target._size_udr_res_list = (500 >= target._size_udr_res_list ? target._size_udr_res_list : 500);
            former.writeMsgInt(target._size_udr_res_list);
            for(int i = 0; i < target._size_udr_res_list; i++)
            {
                serialize_FMB_View_UDR_Resource_List_Out_Tag_udr_res_list(former, target.udr_res_list[i]);
            }
        }

        public static void transform_FMB_View_UDR_Resource_List_Out_Tag_udr_res_list(StreamTransformer former, ref FMB_View_UDR_Resource_List_Out_Tag_udr_res_list source)
        {
            source.res_id = deleteNull(former.readMsgString());
            source.res_desc = deleteNull(former.readMsgString());
            source.attached_flag = former.readMsgChar();
            source.res_up_down_flag = former.readMsgChar();
            source.res_type = deleteNull(former.readMsgString());
            source.area_id = deleteNull(former.readMsgString());
            source.sub_area_id = deleteNull(former.readMsgString());
            source.res_pri_sts = deleteNull(former.readMsgString());
            source.res_ctrl_mode = deleteNull(former.readMsgString());
            source.res_proc_mode = deleteNull(former.readMsgString());
            source.last_start_time = deleteNull(former.readMsgString());
            source.last_end_time = deleteNull(former.readMsgString());
            source.last_down_time = deleteNull(former.readMsgString());
            source.last_event = deleteNull(former.readMsgString());
            source.last_event_time = deleteNull(former.readMsgString());
            source.img_idx = former.readMsgInt();
        }

        public static void transform_FMB_View_UDR_Resource_List_Out_Tag(StreamTransformer former, ref FMB_View_UDR_Resource_List_Out_Tag source)
        {
            source.h_status_value = former.readMsgChar();
            source.h_msg_code = deleteNull(former.readMsgString());
            source.h_msg = deleteNull(former.readMsgString());
            source.h_field_msg = deleteNull(former.readMsgString());
            source.h_db_err_msg = deleteNull(former.readMsgString());
            source.count = former.readMsgInt();
            source.next_res_id = deleteNull(former.readMsgString());
            source._size_udr_res_list = former.readMsgInt();
            source.udr_res_list = new FMB_View_UDR_Resource_List_Out_Tag_udr_res_list[source._size_udr_res_list];
            for(int i = 0; i < source._size_udr_res_list; i++)
            {
                source.udr_res_list[i] = new FMB_View_UDR_Resource_List_Out_Tag_udr_res_list();
                transform_FMB_View_UDR_Resource_List_Out_Tag_udr_res_list(former, ref source.udr_res_list[i]);
            }
        }

        public static void serialize_FMB_View_UDR_Resource_List_Out_Detail_Tag_udr_list(StreamTransformer former, FMB_View_UDR_Resource_List_Out_Detail_Tag_udr_list target)
        {
            former.writeMsgString(withoutSpace(target.group));
            former.writeMsgString(withoutSpace(target.user_name));
            former.writeMsgString(withoutSpace(target.res_id));
            former.writeMsgInt(target.seq);
            former.writeMsgChar(target.res_tag_flag);
            former.writeMsgChar(target.loc_exist_flag);
            former.writeMsgInt(target.loc_x);
            former.writeMsgInt(target.loc_y);
            former.writeMsgInt(target.loc_width);
            former.writeMsgInt(target.loc_height);
            former.writeMsgString(withoutSpace(target.text));
            former.writeMsgInt(target.text_size);
            former.writeMsgInt(target.text_color);
            former.writeMsgChar(target.text_style);
            former.writeMsgInt(target.tag_type);
            former.writeMsgInt(target.back_color);
            former.writeMsgString(withoutSpace(target.create_time));
            former.writeMsgString(withoutSpace(target.update_time));
            former.writeMsgString(withoutSpace(target.res_desc));
            former.writeMsgString(withoutSpace(target.res_type));
            former.writeMsgString(withoutSpace(target.area_id));
            former.writeMsgString(withoutSpace(target.sub_area_id));
            former.writeMsgString(withoutSpace(target.res_location));
            former.writeMsgChar(target.proc_rule);
            former.writeMsgInt(target.max_proc_count);
            former.writeMsgChar(target.res_up_down_flag);
            former.writeMsgString(withoutSpace(target.res_pri_sts));
            former.writeMsgString(withoutSpace(target.lot_id));
            former.writeMsgString(withoutSpace(target.sublot_id));
            former.writeMsgString(withoutSpace(target.crr_id));
            former.writeMsgString(withoutSpace(target.res_ctrl_mode));
            former.writeMsgString(withoutSpace(target.res_proc_mode));
            former.writeMsgString(withoutSpace(target.last_recipe_id));
            former.writeMsgInt(target.proc_count);
            former.writeMsgString(withoutSpace(target.last_start_time));
            former.writeMsgString(withoutSpace(target.last_end_time));
            former.writeMsgString(withoutSpace(target.last_down_time));
            former.writeMsgInt(target.last_down_hist_seq);
            former.writeMsgString(withoutSpace(target.last_event));
            former.writeMsgString(withoutSpace(target.last_event_time));
            former.writeMsgInt(target.last_active_hist_seq);
            former.writeMsgInt(target.last_hist_seq);
            former.writeMsgInt(target.img_idx);
            former.writeMsgChar(target.no_mouse_event);
            former.writeMsgChar(target.signal_flag);
        }

        public static void serialize_FMB_View_UDR_Resource_List_Out_Detail_Tag(StreamTransformer former, FMB_View_UDR_Resource_List_Out_Detail_Tag target)
        {
            former.writeMsgChar(target.h_status_value);
            former.writeMsgString(withoutSpace(target.h_msg_code));
            former.writeMsgString(withoutSpace(target.h_msg));
            former.writeMsgString(withoutSpace(target.h_field_msg));
            former.writeMsgString(withoutSpace(target.h_db_err_msg));
            former.writeMsgInt(target.count);
            former.writeMsgString(withoutSpace(target.next_res_id));
            former.writeMsgInt(target.next_seq);
            target._size_udr_list = (500 >= target._size_udr_list ? target._size_udr_list : 500);
            former.writeMsgInt(target._size_udr_list);
            for(int i = 0; i < target._size_udr_list; i++)
            {
                serialize_FMB_View_UDR_Resource_List_Out_Detail_Tag_udr_list(former, target.udr_list[i]);
            }
        }

        public static void transform_FMB_View_UDR_Resource_List_Out_Detail_Tag_udr_list(StreamTransformer former, ref FMB_View_UDR_Resource_List_Out_Detail_Tag_udr_list source)
        {
            source.group = deleteNull(former.readMsgString());
            source.user_name = deleteNull(former.readMsgString());
            source.res_id = deleteNull(former.readMsgString());
            source.seq = former.readMsgInt();
            source.res_tag_flag = former.readMsgChar();
            source.loc_exist_flag = former.readMsgChar();
            source.loc_x = former.readMsgInt();
            source.loc_y = former.readMsgInt();
            source.loc_width = former.readMsgInt();
            source.loc_height = former.readMsgInt();
            source.text = deleteNull(former.readMsgString());
            source.text_size = former.readMsgInt();
            source.text_color = former.readMsgInt();
            source.text_style = former.readMsgChar();
            source.tag_type = former.readMsgInt();
            source.back_color = former.readMsgInt();
            source.create_time = deleteNull(former.readMsgString());
            source.update_time = deleteNull(former.readMsgString());
            source.res_desc = deleteNull(former.readMsgString());
            source.res_type = deleteNull(former.readMsgString());
            source.area_id = deleteNull(former.readMsgString());
            source.sub_area_id = deleteNull(former.readMsgString());
            source.res_location = deleteNull(former.readMsgString());
            source.proc_rule = former.readMsgChar();
            source.max_proc_count = former.readMsgInt();
            source.res_up_down_flag = former.readMsgChar();
            source.res_pri_sts = deleteNull(former.readMsgString());
            source.lot_id = deleteNull(former.readMsgString());
            source.sublot_id = deleteNull(former.readMsgString());
            source.crr_id = deleteNull(former.readMsgString());
            source.res_ctrl_mode = deleteNull(former.readMsgString());
            source.res_proc_mode = deleteNull(former.readMsgString());
            source.last_recipe_id = deleteNull(former.readMsgString());
            source.proc_count = former.readMsgInt();
            source.last_start_time = deleteNull(former.readMsgString());
            source.last_end_time = deleteNull(former.readMsgString());
            source.last_down_time = deleteNull(former.readMsgString());
            source.last_down_hist_seq = former.readMsgInt();
            source.last_event = deleteNull(former.readMsgString());
            source.last_event_time = deleteNull(former.readMsgString());
            source.last_active_hist_seq = former.readMsgInt();
            source.last_hist_seq = former.readMsgInt();
            source.img_idx = former.readMsgInt();
            source.no_mouse_event = former.readMsgChar();
            source.signal_flag = former.readMsgChar();
        }

        public static void transform_FMB_View_UDR_Resource_List_Out_Detail_Tag(StreamTransformer former, ref FMB_View_UDR_Resource_List_Out_Detail_Tag source)
        {
            source.h_status_value = former.readMsgChar();
            source.h_msg_code = deleteNull(former.readMsgString());
            source.h_msg = deleteNull(former.readMsgString());
            source.h_field_msg = deleteNull(former.readMsgString());
            source.h_db_err_msg = deleteNull(former.readMsgString());
            source.count = former.readMsgInt();
            source.next_res_id = deleteNull(former.readMsgString());
            source.next_seq = former.readMsgInt();
            source._size_udr_list = former.readMsgInt();
            source.udr_list = new FMB_View_UDR_Resource_List_Out_Detail_Tag_udr_list[source._size_udr_list];
            for(int i = 0; i < source._size_udr_list; i++)
            {
                source.udr_list[i] = new FMB_View_UDR_Resource_List_Out_Detail_Tag_udr_list();
                transform_FMB_View_UDR_Resource_List_Out_Detail_Tag_udr_list(former, ref source.udr_list[i]);
            }
        }

        public static void serialize_FMB_View_LayOut_List_In_Tag(StreamTransformer former, FMB_View_LayOut_List_In_Tag target)
        {
            former.writeMsgString(withoutSpace(target.h_passport));
            former.writeMsgChar(target.h_language);
            former.writeMsgString(withoutSpace(target.h_factory));
            former.writeMsgString(withoutSpace(target.h_user_id));
            former.writeMsgString(withoutSpace(target.h_password));
            former.writeMsgChar(target.h_proc_step);
            former.writeMsgString(withoutSpace(target.next_layout_id));
        }

        public static void transform_FMB_View_LayOut_List_In_Tag(StreamTransformer former, ref FMB_View_LayOut_List_In_Tag source)
        {
            source.h_passport = deleteNull(former.readMsgString());
            source.h_language = former.readMsgChar();
            source.h_factory = deleteNull(former.readMsgString());
            source.h_user_id = deleteNull(former.readMsgString());
            source.h_password = deleteNull(former.readMsgString());
            source.h_proc_step = former.readMsgChar();
            source.next_layout_id = deleteNull(former.readMsgString());
        }

        public static void serialize_FMB_View_LayOut_List_Out_Tag_layout_list(StreamTransformer former, FMB_View_LayOut_List_Out_Tag_layout_list target)
        {
            former.writeMsgString(withoutSpace(target.layout_id));
            former.writeMsgString(withoutSpace(target.layout_desc));
            former.writeMsgInt(target.width);
            former.writeMsgInt(target.height);
        }

        public static void serialize_FMB_View_LayOut_List_Out_Tag(StreamTransformer former, FMB_View_LayOut_List_Out_Tag target)
        {
            former.writeMsgChar(target.h_status_value);
            former.writeMsgString(withoutSpace(target.h_msg_code));
            former.writeMsgString(withoutSpace(target.h_msg));
            former.writeMsgString(withoutSpace(target.h_field_msg));
            former.writeMsgString(withoutSpace(target.h_db_err_msg));
            former.writeMsgInt(target.count);
            former.writeMsgString(withoutSpace(target.next_layout_id));
            target._size_layout_list = (1000 >= target._size_layout_list ? target._size_layout_list : 1000);
            former.writeMsgInt(target._size_layout_list);
            for(int i = 0; i < target._size_layout_list; i++)
            {
                serialize_FMB_View_LayOut_List_Out_Tag_layout_list(former, target.layout_list[i]);
            }
        }

        public static void transform_FMB_View_LayOut_List_Out_Tag_layout_list(StreamTransformer former, ref FMB_View_LayOut_List_Out_Tag_layout_list source)
        {
            source.layout_id = deleteNull(former.readMsgString());
            source.layout_desc = deleteNull(former.readMsgString());
            source.width = former.readMsgInt();
            source.height = former.readMsgInt();
        }

        public static void transform_FMB_View_LayOut_List_Out_Tag(StreamTransformer former, ref FMB_View_LayOut_List_Out_Tag source)
        {
            source.h_status_value = former.readMsgChar();
            source.h_msg_code = deleteNull(former.readMsgString());
            source.h_msg = deleteNull(former.readMsgString());
            source.h_field_msg = deleteNull(former.readMsgString());
            source.h_db_err_msg = deleteNull(former.readMsgString());
            source.count = former.readMsgInt();
            source.next_layout_id = deleteNull(former.readMsgString());
            source._size_layout_list = former.readMsgInt();
            source.layout_list = new FMB_View_LayOut_List_Out_Tag_layout_list[source._size_layout_list];
            for(int i = 0; i < source._size_layout_list; i++)
            {
                source.layout_list[i] = new FMB_View_LayOut_List_Out_Tag_layout_list();
                transform_FMB_View_LayOut_List_Out_Tag_layout_list(former, ref source.layout_list[i]);
            }
        }

        public static void serialize_FMB_View_Resource_In_Tag(StreamTransformer former, FMB_View_Resource_In_Tag target)
        {
            former.writeMsgString(withoutSpace(target.h_passport));
            former.writeMsgChar(target.h_language);
            former.writeMsgString(withoutSpace(target.h_factory));
            former.writeMsgString(withoutSpace(target.h_user_id));
            former.writeMsgString(withoutSpace(target.h_password));
            former.writeMsgChar(target.h_proc_step);
            former.writeMsgString(withoutSpace(target.res_id));
            former.writeMsgChar(target.res_type);
            former.writeMsgString(withoutSpace(target.layout_id));
        }

        public static void transform_FMB_View_Resource_In_Tag(StreamTransformer former, ref FMB_View_Resource_In_Tag source)
        {
            source.h_passport = deleteNull(former.readMsgString());
            source.h_language = former.readMsgChar();
            source.h_factory = deleteNull(former.readMsgString());
            source.h_user_id = deleteNull(former.readMsgString());
            source.h_password = deleteNull(former.readMsgString());
            source.h_proc_step = former.readMsgChar();
            source.res_id = deleteNull(former.readMsgString());
            source.res_type = former.readMsgChar();
            source.layout_id = deleteNull(former.readMsgString());
        }

        public static void serialize_FMB_View_Resource_Out_Tag(StreamTransformer former, FMB_View_Resource_Out_Tag target)
        {
            former.writeMsgChar(target.h_status_value);
            former.writeMsgString(withoutSpace(target.h_msg_code));
            former.writeMsgString(withoutSpace(target.h_msg));
            former.writeMsgString(withoutSpace(target.h_field_msg));
            former.writeMsgString(withoutSpace(target.h_db_err_msg));
            former.writeMsgString(withoutSpace(target.res_id));
            former.writeMsgInt(target.seq);
            former.writeMsgChar(target.res_tag_flag);
            former.writeMsgString(withoutSpace(target.layout_id));
            former.writeMsgInt(target.loc_x);
            former.writeMsgInt(target.loc_y);
            former.writeMsgInt(target.loc_width);
            former.writeMsgInt(target.loc_height);
            former.writeMsgString(withoutSpace(target.text));
            former.writeMsgInt(target.text_size);
            former.writeMsgInt(target.text_color);
            former.writeMsgChar(target.text_style);
            former.writeMsgInt(target.tag_type);
            former.writeMsgInt(target.back_color);
            former.writeMsgString(withoutSpace(target.create_user_id));
            former.writeMsgString(withoutSpace(target.create_time));
            former.writeMsgString(withoutSpace(target.update_user_id));
            former.writeMsgString(withoutSpace(target.update_time));
            former.writeMsgString(withoutSpace(target.res_desc));
            former.writeMsgString(withoutSpace(target.res_type));
            former.writeMsgString(withoutSpace(target.res_grp_1));
            former.writeMsgString(withoutSpace(target.res_grp_2));
            former.writeMsgString(withoutSpace(target.res_grp_3));
            former.writeMsgString(withoutSpace(target.res_grp_4));
            former.writeMsgString(withoutSpace(target.res_grp_5));
            former.writeMsgString(withoutSpace(target.res_grp_6));
            former.writeMsgString(withoutSpace(target.res_grp_7));
            former.writeMsgString(withoutSpace(target.res_grp_8));
            former.writeMsgString(withoutSpace(target.res_grp_9));
            former.writeMsgString(withoutSpace(target.res_grp_10));
            former.writeMsgChar(target.use_fac_prt_flag);
            former.writeMsgString(withoutSpace(target.res_sts_prt_1));
            former.writeMsgString(withoutSpace(target.res_sts_prt_2));
            former.writeMsgString(withoutSpace(target.res_sts_prt_3));
            former.writeMsgString(withoutSpace(target.res_sts_prt_4));
            former.writeMsgString(withoutSpace(target.res_sts_prt_5));
            former.writeMsgString(withoutSpace(target.res_sts_prt_6));
            former.writeMsgString(withoutSpace(target.res_sts_prt_7));
            former.writeMsgString(withoutSpace(target.res_sts_prt_8));
            former.writeMsgString(withoutSpace(target.res_sts_prt_9));
            former.writeMsgString(withoutSpace(target.res_sts_prt_10));
            former.writeMsgString(withoutSpace(target.res_cmf_1));
            former.writeMsgString(withoutSpace(target.res_cmf_2));
            former.writeMsgString(withoutSpace(target.res_cmf_3));
            former.writeMsgString(withoutSpace(target.res_cmf_4));
            former.writeMsgString(withoutSpace(target.res_cmf_5));
            former.writeMsgString(withoutSpace(target.res_cmf_6));
            former.writeMsgString(withoutSpace(target.res_cmf_7));
            former.writeMsgString(withoutSpace(target.res_cmf_8));
            former.writeMsgString(withoutSpace(target.res_cmf_9));
            former.writeMsgString(withoutSpace(target.res_cmf_10));
            former.writeMsgString(withoutSpace(target.res_cmf_11));
            former.writeMsgString(withoutSpace(target.res_cmf_12));
            former.writeMsgString(withoutSpace(target.res_cmf_13));
            former.writeMsgString(withoutSpace(target.res_cmf_14));
            former.writeMsgString(withoutSpace(target.res_cmf_15));
            former.writeMsgString(withoutSpace(target.res_cmf_16));
            former.writeMsgString(withoutSpace(target.res_cmf_17));
            former.writeMsgString(withoutSpace(target.res_cmf_18));
            former.writeMsgString(withoutSpace(target.res_cmf_19));
            former.writeMsgString(withoutSpace(target.res_cmf_20));
            former.writeMsgString(withoutSpace(target.dsp_id));
            former.writeMsgString(withoutSpace(target.area_id));
            former.writeMsgString(withoutSpace(target.sub_area_id));
            former.writeMsgString(withoutSpace(target.res_location));
            former.writeMsgChar(target.proc_rule);
            former.writeMsgInt(target.max_proc_count);
            former.writeMsgString(withoutSpace(target.batch_cond_1));
            former.writeMsgString(withoutSpace(target.batch_cond_2));
            former.writeMsgChar(target.pm_sch_enable_flag);
            former.writeMsgChar(target.unit_base_st_flag);
            former.writeMsgChar(target.sec_chk_flag);
            former.writeMsgChar(target.delete_flag);
            former.writeMsgString(withoutSpace(target.delete_user_id));
            former.writeMsgString(withoutSpace(target.delete_time));
            former.writeMsgString(withoutSpace(target.res_create_user_id));
            former.writeMsgString(withoutSpace(target.res_create_time));
            former.writeMsgString(withoutSpace(target.res_update_user_id));
            former.writeMsgString(withoutSpace(target.res_update_time));
            former.writeMsgChar(target.res_up_down_flag);
            former.writeMsgString(withoutSpace(target.res_pri_sts));
            former.writeMsgString(withoutSpace(target.res_sts_1));
            former.writeMsgString(withoutSpace(target.res_sts_2));
            former.writeMsgString(withoutSpace(target.res_sts_3));
            former.writeMsgString(withoutSpace(target.res_sts_4));
            former.writeMsgString(withoutSpace(target.res_sts_5));
            former.writeMsgString(withoutSpace(target.res_sts_6));
            former.writeMsgString(withoutSpace(target.res_sts_7));
            former.writeMsgString(withoutSpace(target.res_sts_8));
            former.writeMsgString(withoutSpace(target.res_sts_9));
            former.writeMsgString(withoutSpace(target.res_sts_10));
            former.writeMsgString(withoutSpace(target.lot_id));
            former.writeMsgString(withoutSpace(target.sublot_id));
            former.writeMsgString(withoutSpace(target.crr_id));
            former.writeMsgString(withoutSpace(target.res_ctrl_mode));
            former.writeMsgString(withoutSpace(target.res_proc_mode));
            former.writeMsgString(withoutSpace(target.last_recipe_id));
            former.writeMsgInt(target.proc_count);
            former.writeMsgString(withoutSpace(target.last_start_time));
            former.writeMsgString(withoutSpace(target.last_end_time));
            former.writeMsgString(withoutSpace(target.last_down_time));
            former.writeMsgInt(target.last_down_hist_seq);
            former.writeMsgString(withoutSpace(target.last_event));
            former.writeMsgString(withoutSpace(target.last_event_time));
            former.writeMsgInt(target.last_active_hist_seq);
            former.writeMsgInt(target.last_hist_seq);
            former.writeMsgInt(target.img_idx);
            former.writeMsgChar(target.no_mouse_event);
            former.writeMsgChar(target.signal_flag);
        }

        public static void transform_FMB_View_Resource_Out_Tag(StreamTransformer former, ref FMB_View_Resource_Out_Tag source)
        {
            source.h_status_value = former.readMsgChar();
            source.h_msg_code = deleteNull(former.readMsgString());
            source.h_msg = deleteNull(former.readMsgString());
            source.h_field_msg = deleteNull(former.readMsgString());
            source.h_db_err_msg = deleteNull(former.readMsgString());
            source.res_id = deleteNull(former.readMsgString());
            source.seq = former.readMsgInt();
            source.res_tag_flag = former.readMsgChar();
            source.layout_id = deleteNull(former.readMsgString());
            source.loc_x = former.readMsgInt();
            source.loc_y = former.readMsgInt();
            source.loc_width = former.readMsgInt();
            source.loc_height = former.readMsgInt();
            source.text = deleteNull(former.readMsgString());
            source.text_size = former.readMsgInt();
            source.text_color = former.readMsgInt();
            source.text_style = former.readMsgChar();
            source.tag_type = former.readMsgInt();
            source.back_color = former.readMsgInt();
            source.create_user_id = deleteNull(former.readMsgString());
            source.create_time = deleteNull(former.readMsgString());
            source.update_user_id = deleteNull(former.readMsgString());
            source.update_time = deleteNull(former.readMsgString());
            source.res_desc = deleteNull(former.readMsgString());
            source.res_type = deleteNull(former.readMsgString());
            source.res_grp_1 = deleteNull(former.readMsgString());
            source.res_grp_2 = deleteNull(former.readMsgString());
            source.res_grp_3 = deleteNull(former.readMsgString());
            source.res_grp_4 = deleteNull(former.readMsgString());
            source.res_grp_5 = deleteNull(former.readMsgString());
            source.res_grp_6 = deleteNull(former.readMsgString());
            source.res_grp_7 = deleteNull(former.readMsgString());
            source.res_grp_8 = deleteNull(former.readMsgString());
            source.res_grp_9 = deleteNull(former.readMsgString());
            source.res_grp_10 = deleteNull(former.readMsgString());
            source.use_fac_prt_flag = former.readMsgChar();
            source.res_sts_prt_1 = deleteNull(former.readMsgString());
            source.res_sts_prt_2 = deleteNull(former.readMsgString());
            source.res_sts_prt_3 = deleteNull(former.readMsgString());
            source.res_sts_prt_4 = deleteNull(former.readMsgString());
            source.res_sts_prt_5 = deleteNull(former.readMsgString());
            source.res_sts_prt_6 = deleteNull(former.readMsgString());
            source.res_sts_prt_7 = deleteNull(former.readMsgString());
            source.res_sts_prt_8 = deleteNull(former.readMsgString());
            source.res_sts_prt_9 = deleteNull(former.readMsgString());
            source.res_sts_prt_10 = deleteNull(former.readMsgString());
            source.res_cmf_1 = deleteNull(former.readMsgString());
            source.res_cmf_2 = deleteNull(former.readMsgString());
            source.res_cmf_3 = deleteNull(former.readMsgString());
            source.res_cmf_4 = deleteNull(former.readMsgString());
            source.res_cmf_5 = deleteNull(former.readMsgString());
            source.res_cmf_6 = deleteNull(former.readMsgString());
            source.res_cmf_7 = deleteNull(former.readMsgString());
            source.res_cmf_8 = deleteNull(former.readMsgString());
            source.res_cmf_9 = deleteNull(former.readMsgString());
            source.res_cmf_10 = deleteNull(former.readMsgString());
            source.res_cmf_11 = deleteNull(former.readMsgString());
            source.res_cmf_12 = deleteNull(former.readMsgString());
            source.res_cmf_13 = deleteNull(former.readMsgString());
            source.res_cmf_14 = deleteNull(former.readMsgString());
            source.res_cmf_15 = deleteNull(former.readMsgString());
            source.res_cmf_16 = deleteNull(former.readMsgString());
            source.res_cmf_17 = deleteNull(former.readMsgString());
            source.res_cmf_18 = deleteNull(former.readMsgString());
            source.res_cmf_19 = deleteNull(former.readMsgString());
            source.res_cmf_20 = deleteNull(former.readMsgString());
            source.dsp_id = deleteNull(former.readMsgString());
            source.area_id = deleteNull(former.readMsgString());
            source.sub_area_id = deleteNull(former.readMsgString());
            source.res_location = deleteNull(former.readMsgString());
            source.proc_rule = former.readMsgChar();
            source.max_proc_count = former.readMsgInt();
            source.batch_cond_1 = deleteNull(former.readMsgString());
            source.batch_cond_2 = deleteNull(former.readMsgString());
            source.pm_sch_enable_flag = former.readMsgChar();
            source.unit_base_st_flag = former.readMsgChar();
            source.sec_chk_flag = former.readMsgChar();
            source.delete_flag = former.readMsgChar();
            source.delete_user_id = deleteNull(former.readMsgString());
            source.delete_time = deleteNull(former.readMsgString());
            source.res_create_user_id = deleteNull(former.readMsgString());
            source.res_create_time = deleteNull(former.readMsgString());
            source.res_update_user_id = deleteNull(former.readMsgString());
            source.res_update_time = deleteNull(former.readMsgString());
            source.res_up_down_flag = former.readMsgChar();
            source.res_pri_sts = deleteNull(former.readMsgString());
            source.res_sts_1 = deleteNull(former.readMsgString());
            source.res_sts_2 = deleteNull(former.readMsgString());
            source.res_sts_3 = deleteNull(former.readMsgString());
            source.res_sts_4 = deleteNull(former.readMsgString());
            source.res_sts_5 = deleteNull(former.readMsgString());
            source.res_sts_6 = deleteNull(former.readMsgString());
            source.res_sts_7 = deleteNull(former.readMsgString());
            source.res_sts_8 = deleteNull(former.readMsgString());
            source.res_sts_9 = deleteNull(former.readMsgString());
            source.res_sts_10 = deleteNull(former.readMsgString());
            source.lot_id = deleteNull(former.readMsgString());
            source.sublot_id = deleteNull(former.readMsgString());
            source.crr_id = deleteNull(former.readMsgString());
            source.res_ctrl_mode = deleteNull(former.readMsgString());
            source.res_proc_mode = deleteNull(former.readMsgString());
            source.last_recipe_id = deleteNull(former.readMsgString());
            source.proc_count = former.readMsgInt();
            source.last_start_time = deleteNull(former.readMsgString());
            source.last_end_time = deleteNull(former.readMsgString());
            source.last_down_time = deleteNull(former.readMsgString());
            source.last_down_hist_seq = former.readMsgInt();
            source.last_event = deleteNull(former.readMsgString());
            source.last_event_time = deleteNull(former.readMsgString());
            source.last_active_hist_seq = former.readMsgInt();
            source.last_hist_seq = former.readMsgInt();
            source.img_idx = former.readMsgInt();
            source.no_mouse_event = former.readMsgChar();
            source.signal_flag = former.readMsgChar();
        }

        public static void serialize_FMB_View_UDR_Resource_In_Tag(StreamTransformer former, FMB_View_UDR_Resource_In_Tag target)
        {
            former.writeMsgString(withoutSpace(target.h_passport));
            former.writeMsgChar(target.h_language);
            former.writeMsgString(withoutSpace(target.h_factory));
            former.writeMsgString(withoutSpace(target.h_user_id));
            former.writeMsgString(withoutSpace(target.h_password));
            former.writeMsgChar(target.h_proc_step);
            former.writeMsgString(withoutSpace(target.res_id));
            former.writeMsgChar(target.res_type);
            former.writeMsgString(withoutSpace(target.group_id));
        }

        public static void transform_FMB_View_UDR_Resource_In_Tag(StreamTransformer former, ref FMB_View_UDR_Resource_In_Tag source)
        {
            source.h_passport = deleteNull(former.readMsgString());
            source.h_language = former.readMsgChar();
            source.h_factory = deleteNull(former.readMsgString());
            source.h_user_id = deleteNull(former.readMsgString());
            source.h_password = deleteNull(former.readMsgString());
            source.h_proc_step = former.readMsgChar();
            source.res_id = deleteNull(former.readMsgString());
            source.res_type = former.readMsgChar();
            source.group_id = deleteNull(former.readMsgString());
        }

        public static void serialize_FMB_View_UDR_Resource_Out_Tag(StreamTransformer former, FMB_View_UDR_Resource_Out_Tag target)
        {
            former.writeMsgChar(target.h_status_value);
            former.writeMsgString(withoutSpace(target.h_msg_code));
            former.writeMsgString(withoutSpace(target.h_msg));
            former.writeMsgString(withoutSpace(target.h_field_msg));
            former.writeMsgString(withoutSpace(target.h_db_err_msg));
            former.writeMsgString(withoutSpace(target.res_id));
            former.writeMsgInt(target.seq);
            former.writeMsgChar(target.res_tag_flag);
            former.writeMsgString(withoutSpace(target.group_id));
            former.writeMsgInt(target.loc_x);
            former.writeMsgInt(target.loc_y);
            former.writeMsgInt(target.loc_width);
            former.writeMsgInt(target.loc_height);
            former.writeMsgString(withoutSpace(target.text));
            former.writeMsgInt(target.text_size);
            former.writeMsgInt(target.text_color);
            former.writeMsgChar(target.text_style);
            former.writeMsgInt(target.tag_type);
            former.writeMsgInt(target.back_color);
            former.writeMsgString(withoutSpace(target.create_time));
            former.writeMsgString(withoutSpace(target.update_time));
            former.writeMsgString(withoutSpace(target.res_desc));
            former.writeMsgString(withoutSpace(target.res_type));
            former.writeMsgString(withoutSpace(target.area_id));
            former.writeMsgString(withoutSpace(target.sub_area_id));
            former.writeMsgString(withoutSpace(target.res_location));
            former.writeMsgChar(target.proc_rule);
            former.writeMsgInt(target.max_proc_count);
            former.writeMsgChar(target.res_up_down_flag);
            former.writeMsgString(withoutSpace(target.res_pri_sts));
            former.writeMsgString(withoutSpace(target.lot_id));
            former.writeMsgString(withoutSpace(target.sublot_id));
            former.writeMsgString(withoutSpace(target.crr_id));
            former.writeMsgString(withoutSpace(target.res_ctrl_mode));
            former.writeMsgString(withoutSpace(target.res_proc_mode));
            former.writeMsgString(withoutSpace(target.last_recipe_id));
            former.writeMsgInt(target.proc_count);
            former.writeMsgString(withoutSpace(target.last_start_time));
            former.writeMsgString(withoutSpace(target.last_end_time));
            former.writeMsgString(withoutSpace(target.last_down_time));
            former.writeMsgInt(target.last_down_hist_seq);
            former.writeMsgString(withoutSpace(target.last_event));
            former.writeMsgString(withoutSpace(target.last_event_time));
            former.writeMsgInt(target.last_active_hist_seq);
            former.writeMsgInt(target.last_hist_seq);
            former.writeMsgInt(target.img_idx);
            former.writeMsgChar(target.no_mouse_event);
            former.writeMsgChar(target.signal_flag);
        }

        public static void transform_FMB_View_UDR_Resource_Out_Tag(StreamTransformer former, ref FMB_View_UDR_Resource_Out_Tag source)
        {
            source.h_status_value = former.readMsgChar();
            source.h_msg_code = deleteNull(former.readMsgString());
            source.h_msg = deleteNull(former.readMsgString());
            source.h_field_msg = deleteNull(former.readMsgString());
            source.h_db_err_msg = deleteNull(former.readMsgString());
            source.res_id = deleteNull(former.readMsgString());
            source.seq = former.readMsgInt();
            source.res_tag_flag = former.readMsgChar();
            source.group_id = deleteNull(former.readMsgString());
            source.loc_x = former.readMsgInt();
            source.loc_y = former.readMsgInt();
            source.loc_width = former.readMsgInt();
            source.loc_height = former.readMsgInt();
            source.text = deleteNull(former.readMsgString());
            source.text_size = former.readMsgInt();
            source.text_color = former.readMsgInt();
            source.text_style = former.readMsgChar();
            source.tag_type = former.readMsgInt();
            source.back_color = former.readMsgInt();
            source.create_time = deleteNull(former.readMsgString());
            source.update_time = deleteNull(former.readMsgString());
            source.res_desc = deleteNull(former.readMsgString());
            source.res_type = deleteNull(former.readMsgString());
            source.area_id = deleteNull(former.readMsgString());
            source.sub_area_id = deleteNull(former.readMsgString());
            source.res_location = deleteNull(former.readMsgString());
            source.proc_rule = former.readMsgChar();
            source.max_proc_count = former.readMsgInt();
            source.res_up_down_flag = former.readMsgChar();
            source.res_pri_sts = deleteNull(former.readMsgString());
            source.lot_id = deleteNull(former.readMsgString());
            source.sublot_id = deleteNull(former.readMsgString());
            source.crr_id = deleteNull(former.readMsgString());
            source.res_ctrl_mode = deleteNull(former.readMsgString());
            source.res_proc_mode = deleteNull(former.readMsgString());
            source.last_recipe_id = deleteNull(former.readMsgString());
            source.proc_count = former.readMsgInt();
            source.last_start_time = deleteNull(former.readMsgString());
            source.last_end_time = deleteNull(former.readMsgString());
            source.last_down_time = deleteNull(former.readMsgString());
            source.last_down_hist_seq = former.readMsgInt();
            source.last_event = deleteNull(former.readMsgString());
            source.last_event_time = deleteNull(former.readMsgString());
            source.last_active_hist_seq = former.readMsgInt();
            source.last_hist_seq = former.readMsgInt();
            source.img_idx = former.readMsgInt();
            source.no_mouse_event = former.readMsgChar();
            source.signal_flag = former.readMsgChar();
        }

        public static void serialize_FMB_View_LayOut_In_Tag(StreamTransformer former, FMB_View_LayOut_In_Tag target)
        {
            former.writeMsgString(withoutSpace(target.h_passport));
            former.writeMsgChar(target.h_language);
            former.writeMsgString(withoutSpace(target.h_factory));
            former.writeMsgString(withoutSpace(target.h_user_id));
            former.writeMsgString(withoutSpace(target.h_password));
            former.writeMsgChar(target.h_proc_step);
            former.writeMsgString(withoutSpace(target.layout_id));
        }

        public static void transform_FMB_View_LayOut_In_Tag(StreamTransformer former, ref FMB_View_LayOut_In_Tag source)
        {
            source.h_passport = deleteNull(former.readMsgString());
            source.h_language = former.readMsgChar();
            source.h_factory = deleteNull(former.readMsgString());
            source.h_user_id = deleteNull(former.readMsgString());
            source.h_password = deleteNull(former.readMsgString());
            source.h_proc_step = former.readMsgChar();
            source.layout_id = deleteNull(former.readMsgString());
        }

        public static void serialize_FMB_View_LayOut_Out_Tag(StreamTransformer former, FMB_View_LayOut_Out_Tag target)
        {
            former.writeMsgChar(target.h_status_value);
            former.writeMsgString(withoutSpace(target.h_msg_code));
            former.writeMsgString(withoutSpace(target.h_msg));
            former.writeMsgString(withoutSpace(target.h_field_msg));
            former.writeMsgString(withoutSpace(target.h_db_err_msg));
            former.writeMsgString(withoutSpace(target.layout_id));
            former.writeMsgString(withoutSpace(target.layout_desc));
            former.writeMsgString(withoutSpace(target.create_user_id));
            former.writeMsgString(withoutSpace(target.create_time));
            former.writeMsgString(withoutSpace(target.update_user_id));
            former.writeMsgString(withoutSpace(target.update_time));
            former.writeMsgInt(target.width);
            former.writeMsgInt(target.height);
        }

        public static void transform_FMB_View_LayOut_Out_Tag(StreamTransformer former, ref FMB_View_LayOut_Out_Tag source)
        {
            source.h_status_value = former.readMsgChar();
            source.h_msg_code = deleteNull(former.readMsgString());
            source.h_msg = deleteNull(former.readMsgString());
            source.h_field_msg = deleteNull(former.readMsgString());
            source.h_db_err_msg = deleteNull(former.readMsgString());
            source.layout_id = deleteNull(former.readMsgString());
            source.layout_desc = deleteNull(former.readMsgString());
            source.create_user_id = deleteNull(former.readMsgString());
            source.create_time = deleteNull(former.readMsgString());
            source.update_user_id = deleteNull(former.readMsgString());
            source.update_time = deleteNull(former.readMsgString());
            source.width = former.readMsgInt();
            source.height = former.readMsgInt();
        }

        public static void serialize_FMB_View_UDR_Group_In_Tag(StreamTransformer former, FMB_View_UDR_Group_In_Tag target)
        {
            former.writeMsgString(withoutSpace(target.h_passport));
            former.writeMsgChar(target.h_language);
            former.writeMsgString(withoutSpace(target.h_factory));
            former.writeMsgString(withoutSpace(target.h_user_id));
            former.writeMsgString(withoutSpace(target.h_password));
            former.writeMsgChar(target.h_proc_step);
            former.writeMsgString(withoutSpace(target.group_id));
        }

        public static void transform_FMB_View_UDR_Group_In_Tag(StreamTransformer former, ref FMB_View_UDR_Group_In_Tag source)
        {
            source.h_passport = deleteNull(former.readMsgString());
            source.h_language = former.readMsgChar();
            source.h_factory = deleteNull(former.readMsgString());
            source.h_user_id = deleteNull(former.readMsgString());
            source.h_password = deleteNull(former.readMsgString());
            source.h_proc_step = former.readMsgChar();
            source.group_id = deleteNull(former.readMsgString());
        }

        public static void serialize_FMB_View_UDR_Group_Out_Tag(StreamTransformer former, FMB_View_UDR_Group_Out_Tag target)
        {
            former.writeMsgChar(target.h_status_value);
            former.writeMsgString(withoutSpace(target.h_msg_code));
            former.writeMsgString(withoutSpace(target.h_msg));
            former.writeMsgString(withoutSpace(target.h_field_msg));
            former.writeMsgString(withoutSpace(target.h_db_err_msg));
            former.writeMsgString(withoutSpace(target.group_id));
            former.writeMsgString(withoutSpace(target.group_desc));
            former.writeMsgString(withoutSpace(target.user_name));
            former.writeMsgString(withoutSpace(target.create_time));
            former.writeMsgString(withoutSpace(target.update_time));
            former.writeMsgInt(target.width);
            former.writeMsgInt(target.height);
        }

        public static void transform_FMB_View_UDR_Group_Out_Tag(StreamTransformer former, ref FMB_View_UDR_Group_Out_Tag source)
        {
            source.h_status_value = former.readMsgChar();
            source.h_msg_code = deleteNull(former.readMsgString());
            source.h_msg = deleteNull(former.readMsgString());
            source.h_field_msg = deleteNull(former.readMsgString());
            source.h_db_err_msg = deleteNull(former.readMsgString());
            source.group_id = deleteNull(former.readMsgString());
            source.group_desc = deleteNull(former.readMsgString());
            source.user_name = deleteNull(former.readMsgString());
            source.create_time = deleteNull(former.readMsgString());
            source.update_time = deleteNull(former.readMsgString());
            source.width = former.readMsgInt();
            source.height = former.readMsgInt();
        }

        public static void serialize_FMB_View_Resource_History_In_Tag(StreamTransformer former, FMB_View_Resource_History_In_Tag target)
        {
            former.writeMsgString(withoutSpace(target.h_passport));
            former.writeMsgChar(target.h_language);
            former.writeMsgString(withoutSpace(target.h_factory));
            former.writeMsgString(withoutSpace(target.h_user_id));
            former.writeMsgString(withoutSpace(target.h_password));
            former.writeMsgChar(target.h_proc_step);
            former.writeMsgInt(target.next_hist_seq);
            former.writeMsgString(withoutSpace(target.res_type));
            former.writeMsgString(withoutSpace(target.res_id));
            former.writeMsgString(withoutSpace(target.from_time));
            former.writeMsgString(withoutSpace(target.to_time));
            former.writeMsgString(withoutSpace(target.event_id));
            former.writeMsgChar(target.include_del_hist);
        }

        public static void transform_FMB_View_Resource_History_In_Tag(StreamTransformer former, ref FMB_View_Resource_History_In_Tag source)
        {
            source.h_passport = deleteNull(former.readMsgString());
            source.h_language = former.readMsgChar();
            source.h_factory = deleteNull(former.readMsgString());
            source.h_user_id = deleteNull(former.readMsgString());
            source.h_password = deleteNull(former.readMsgString());
            source.h_proc_step = former.readMsgChar();
            source.next_hist_seq = former.readMsgInt();
            source.res_type = deleteNull(former.readMsgString());
            source.res_id = deleteNull(former.readMsgString());
            source.from_time = deleteNull(former.readMsgString());
            source.to_time = deleteNull(former.readMsgString());
            source.event_id = deleteNull(former.readMsgString());
            source.include_del_hist = former.readMsgChar();
        }

        public static void serialize_FMB_View_Resource_History_Out_Tag_hist_list(StreamTransformer former, FMB_View_Resource_History_Out_Tag_hist_list target)
        {
            former.writeMsgString(withoutSpace(target.res_id));
            former.writeMsgInt(target.hist_seq);
            former.writeMsgString(withoutSpace(target.event_id));
            former.writeMsgString(withoutSpace(target.tran_time));
            former.writeMsgString(withoutSpace(target.sys_tran_time));
            former.writeMsgString(withoutSpace(target.old_event_id));
            former.writeMsgInt(target.old_hist_seq);
            former.writeMsgString(withoutSpace(target.old_tran_time));
            former.writeMsgString(withoutSpace(target.old_sys_tran_time));
            former.writeMsgChar(target.old_up_down_flag);
            former.writeMsgString(withoutSpace(target.old_pri_sts));
            former.writeMsgString(withoutSpace(target.old_sts_1));
            former.writeMsgString(withoutSpace(target.old_sts_2));
            former.writeMsgString(withoutSpace(target.old_sts_3));
            former.writeMsgString(withoutSpace(target.old_sts_4));
            former.writeMsgString(withoutSpace(target.old_sts_5));
            former.writeMsgString(withoutSpace(target.old_sts_6));
            former.writeMsgString(withoutSpace(target.old_sts_7));
            former.writeMsgString(withoutSpace(target.old_sts_8));
            former.writeMsgString(withoutSpace(target.old_sts_9));
            former.writeMsgString(withoutSpace(target.old_sts_10));
            former.writeMsgChar(target.new_up_down_flag);
            former.writeMsgString(withoutSpace(target.new_pri_sts));
            former.writeMsgString(withoutSpace(target.new_sts_1));
            former.writeMsgString(withoutSpace(target.new_sts_2));
            former.writeMsgString(withoutSpace(target.new_sts_3));
            former.writeMsgString(withoutSpace(target.new_sts_4));
            former.writeMsgString(withoutSpace(target.new_sts_5));
            former.writeMsgString(withoutSpace(target.new_sts_6));
            former.writeMsgString(withoutSpace(target.new_sts_7));
            former.writeMsgString(withoutSpace(target.new_sts_8));
            former.writeMsgString(withoutSpace(target.new_sts_9));
            former.writeMsgString(withoutSpace(target.new_sts_10));
            former.writeMsgString(withoutSpace(target.lot_id));
            former.writeMsgString(withoutSpace(target.sublot_id));
            former.writeMsgString(withoutSpace(target.crr_id));
            former.writeMsgString(withoutSpace(target.res_ctrl_mode));
            former.writeMsgString(withoutSpace(target.res_proc_mode));
            former.writeMsgChar(target.lot_exist_flag);
            former.writeMsgString(withoutSpace(target.col_set_id));
            former.writeMsgInt(target.col_set_version);
            former.writeMsgString(withoutSpace(target.tran_cmf_1));
            former.writeMsgString(withoutSpace(target.tran_cmf_2));
            former.writeMsgString(withoutSpace(target.tran_cmf_3));
            former.writeMsgString(withoutSpace(target.tran_cmf_4));
            former.writeMsgString(withoutSpace(target.tran_cmf_5));
            former.writeMsgString(withoutSpace(target.tran_cmf_6));
            former.writeMsgString(withoutSpace(target.tran_cmf_7));
            former.writeMsgString(withoutSpace(target.tran_cmf_8));
            former.writeMsgString(withoutSpace(target.tran_cmf_9));
            former.writeMsgString(withoutSpace(target.tran_cmf_10));
            former.writeMsgString(withoutSpace(target.tran_cmf_11));
            former.writeMsgString(withoutSpace(target.tran_cmf_12));
            former.writeMsgString(withoutSpace(target.tran_cmf_13));
            former.writeMsgString(withoutSpace(target.tran_cmf_14));
            former.writeMsgString(withoutSpace(target.tran_cmf_15));
            former.writeMsgString(withoutSpace(target.tran_cmf_16));
            former.writeMsgString(withoutSpace(target.tran_cmf_17));
            former.writeMsgString(withoutSpace(target.tran_cmf_18));
            former.writeMsgString(withoutSpace(target.tran_cmf_19));
            former.writeMsgString(withoutSpace(target.tran_cmf_20));
            former.writeMsgString(withoutSpace(target.tran_user_id));
            former.writeMsgString(withoutSpace(target.tran_comment));
            former.writeMsgString(withoutSpace(target.last_down_time));
            former.writeMsgInt(target.last_down_hist_seq);
            former.writeMsgInt(target.hist_start_seq);
            former.writeMsgChar(target.hist_del_flag);
            former.writeMsgString(withoutSpace(target.hist_del_time));
            former.writeMsgString(withoutSpace(target.hist_del_user_id));
            former.writeMsgString(withoutSpace(target.hist_del_comment));
        }

        public static void serialize_FMB_View_Resource_History_Out_Tag(StreamTransformer former, FMB_View_Resource_History_Out_Tag target)
        {
            former.writeMsgChar(target.h_status_value);
            former.writeMsgString(withoutSpace(target.h_msg_code));
            former.writeMsgString(withoutSpace(target.h_msg));
            former.writeMsgString(withoutSpace(target.h_field_msg));
            former.writeMsgString(withoutSpace(target.h_db_err_msg));
            former.writeMsgInt(target.count);
            former.writeMsgInt(target.next_hist_seq);
            target._size_hist_list = (500 >= target._size_hist_list ? target._size_hist_list : 500);
            former.writeMsgInt(target._size_hist_list);
            for(int i = 0; i < target._size_hist_list; i++)
            {
                serialize_FMB_View_Resource_History_Out_Tag_hist_list(former, target.hist_list[i]);
            }
        }

        public static void transform_FMB_View_Resource_History_Out_Tag_hist_list(StreamTransformer former, ref FMB_View_Resource_History_Out_Tag_hist_list source)
        {
            source.res_id = deleteNull(former.readMsgString());
            source.hist_seq = former.readMsgInt();
            source.event_id = deleteNull(former.readMsgString());
            source.tran_time = deleteNull(former.readMsgString());
            source.sys_tran_time = deleteNull(former.readMsgString());
            source.old_event_id = deleteNull(former.readMsgString());
            source.old_hist_seq = former.readMsgInt();
            source.old_tran_time = deleteNull(former.readMsgString());
            source.old_sys_tran_time = deleteNull(former.readMsgString());
            source.old_up_down_flag = former.readMsgChar();
            source.old_pri_sts = deleteNull(former.readMsgString());
            source.old_sts_1 = deleteNull(former.readMsgString());
            source.old_sts_2 = deleteNull(former.readMsgString());
            source.old_sts_3 = deleteNull(former.readMsgString());
            source.old_sts_4 = deleteNull(former.readMsgString());
            source.old_sts_5 = deleteNull(former.readMsgString());
            source.old_sts_6 = deleteNull(former.readMsgString());
            source.old_sts_7 = deleteNull(former.readMsgString());
            source.old_sts_8 = deleteNull(former.readMsgString());
            source.old_sts_9 = deleteNull(former.readMsgString());
            source.old_sts_10 = deleteNull(former.readMsgString());
            source.new_up_down_flag = former.readMsgChar();
            source.new_pri_sts = deleteNull(former.readMsgString());
            source.new_sts_1 = deleteNull(former.readMsgString());
            source.new_sts_2 = deleteNull(former.readMsgString());
            source.new_sts_3 = deleteNull(former.readMsgString());
            source.new_sts_4 = deleteNull(former.readMsgString());
            source.new_sts_5 = deleteNull(former.readMsgString());
            source.new_sts_6 = deleteNull(former.readMsgString());
            source.new_sts_7 = deleteNull(former.readMsgString());
            source.new_sts_8 = deleteNull(former.readMsgString());
            source.new_sts_9 = deleteNull(former.readMsgString());
            source.new_sts_10 = deleteNull(former.readMsgString());
            source.lot_id = deleteNull(former.readMsgString());
            source.sublot_id = deleteNull(former.readMsgString());
            source.crr_id = deleteNull(former.readMsgString());
            source.res_ctrl_mode = deleteNull(former.readMsgString());
            source.res_proc_mode = deleteNull(former.readMsgString());
            source.lot_exist_flag = former.readMsgChar();
            source.col_set_id = deleteNull(former.readMsgString());
            source.col_set_version = former.readMsgInt();
            source.tran_cmf_1 = deleteNull(former.readMsgString());
            source.tran_cmf_2 = deleteNull(former.readMsgString());
            source.tran_cmf_3 = deleteNull(former.readMsgString());
            source.tran_cmf_4 = deleteNull(former.readMsgString());
            source.tran_cmf_5 = deleteNull(former.readMsgString());
            source.tran_cmf_6 = deleteNull(former.readMsgString());
            source.tran_cmf_7 = deleteNull(former.readMsgString());
            source.tran_cmf_8 = deleteNull(former.readMsgString());
            source.tran_cmf_9 = deleteNull(former.readMsgString());
            source.tran_cmf_10 = deleteNull(former.readMsgString());
            source.tran_cmf_11 = deleteNull(former.readMsgString());
            source.tran_cmf_12 = deleteNull(former.readMsgString());
            source.tran_cmf_13 = deleteNull(former.readMsgString());
            source.tran_cmf_14 = deleteNull(former.readMsgString());
            source.tran_cmf_15 = deleteNull(former.readMsgString());
            source.tran_cmf_16 = deleteNull(former.readMsgString());
            source.tran_cmf_17 = deleteNull(former.readMsgString());
            source.tran_cmf_18 = deleteNull(former.readMsgString());
            source.tran_cmf_19 = deleteNull(former.readMsgString());
            source.tran_cmf_20 = deleteNull(former.readMsgString());
            source.tran_user_id = deleteNull(former.readMsgString());
            source.tran_comment = deleteNull(former.readMsgString());
            source.last_down_time = deleteNull(former.readMsgString());
            source.last_down_hist_seq = former.readMsgInt();
            source.hist_start_seq = former.readMsgInt();
            source.hist_del_flag = former.readMsgChar();
            source.hist_del_time = deleteNull(former.readMsgString());
            source.hist_del_user_id = deleteNull(former.readMsgString());
            source.hist_del_comment = deleteNull(former.readMsgString());
        }

        public static void transform_FMB_View_Resource_History_Out_Tag(StreamTransformer former, ref FMB_View_Resource_History_Out_Tag source)
        {
            source.h_status_value = former.readMsgChar();
            source.h_msg_code = deleteNull(former.readMsgString());
            source.h_msg = deleteNull(former.readMsgString());
            source.h_field_msg = deleteNull(former.readMsgString());
            source.h_db_err_msg = deleteNull(former.readMsgString());
            source.count = former.readMsgInt();
            source.next_hist_seq = former.readMsgInt();
            source._size_hist_list = former.readMsgInt();
            source.hist_list = new FMB_View_Resource_History_Out_Tag_hist_list[source._size_hist_list];
            for(int i = 0; i < source._size_hist_list; i++)
            {
                source.hist_list[i] = new FMB_View_Resource_History_Out_Tag_hist_list();
                transform_FMB_View_Resource_History_Out_Tag_hist_list(former, ref source.hist_list[i]);
            }
        }

        public static void serialize_FMB_View_LotByRes_List_In_Tag(StreamTransformer former, FMB_View_LotByRes_List_In_Tag target)
        {
            former.writeMsgString(withoutSpace(target.h_passport));
            former.writeMsgChar(target.h_language);
            former.writeMsgString(withoutSpace(target.h_factory));
            former.writeMsgString(withoutSpace(target.h_user_id));
            former.writeMsgString(withoutSpace(target.h_password));
            former.writeMsgChar(target.h_proc_step);
            former.writeMsgString(withoutSpace(target.res_id));
            former.writeMsgString(withoutSpace(target.oper));
            former.writeMsgString(withoutSpace(target.next_lot_id));
        }

        public static void transform_FMB_View_LotByRes_List_In_Tag(StreamTransformer former, ref FMB_View_LotByRes_List_In_Tag source)
        {
            source.h_passport = deleteNull(former.readMsgString());
            source.h_language = former.readMsgChar();
            source.h_factory = deleteNull(former.readMsgString());
            source.h_user_id = deleteNull(former.readMsgString());
            source.h_password = deleteNull(former.readMsgString());
            source.h_proc_step = former.readMsgChar();
            source.res_id = deleteNull(former.readMsgString());
            source.oper = deleteNull(former.readMsgString());
            source.next_lot_id = deleteNull(former.readMsgString());
        }

        public static void serialize_FMB_View_LotByRes_List_Out_Tag_lotbyres_list(StreamTransformer former, FMB_View_LotByRes_List_Out_Tag_lotbyres_list target)
        {
            former.writeMsgString(withoutSpace(target.factory));
            former.writeMsgString(withoutSpace(target.lot_id));
            former.writeMsgString(withoutSpace(target.mat_id));
            former.writeMsgInt(target.mat_ver);
            former.writeMsgString(withoutSpace(target.flow));
            former.writeMsgInt(target.flow_seq_num);
            former.writeMsgString(withoutSpace(target.oper));
            former.writeMsgChar(target.lot_type);
            former.writeMsgDouble(target.qty1);
            former.writeMsgDouble(target.qty2);
            former.writeMsgDouble(target.qty3);
            former.writeMsgString(withoutSpace(target.owner_code));
            former.writeMsgString(withoutSpace(target.create_code));
            former.writeMsgChar(target.lot_priority);
            former.writeMsgString(withoutSpace(target.lot_status));
            former.writeMsgString(withoutSpace(target.hold_code));
        }

        public static void serialize_FMB_View_LotByRes_List_Out_Tag(StreamTransformer former, FMB_View_LotByRes_List_Out_Tag target)
        {
            former.writeMsgChar(target.h_status_value);
            former.writeMsgString(withoutSpace(target.h_msg_code));
            former.writeMsgString(withoutSpace(target.h_msg));
            former.writeMsgString(withoutSpace(target.h_field_msg));
            former.writeMsgString(withoutSpace(target.h_db_err_msg));
            former.writeMsgInt(target.count);
            former.writeMsgString(withoutSpace(target.next_lot_id));
            target._size_lotbyres_list = (1000 >= target._size_lotbyres_list ? target._size_lotbyres_list : 1000);
            former.writeMsgInt(target._size_lotbyres_list);
            for(int i = 0; i < target._size_lotbyres_list; i++)
            {
                serialize_FMB_View_LotByRes_List_Out_Tag_lotbyres_list(former, target.lotbyres_list[i]);
            }
        }

        public static void transform_FMB_View_LotByRes_List_Out_Tag_lotbyres_list(StreamTransformer former, ref FMB_View_LotByRes_List_Out_Tag_lotbyres_list source)
        {
            source.factory = deleteNull(former.readMsgString());
            source.lot_id = deleteNull(former.readMsgString());
            source.mat_id = deleteNull(former.readMsgString());
            source.mat_ver = former.readMsgInt();
            source.flow = deleteNull(former.readMsgString());
            source.flow_seq_num = former.readMsgInt();
            source.oper = deleteNull(former.readMsgString());
            source.lot_type = former.readMsgChar();
            source.qty1 = former.readMsgDouble();
            source.qty2 = former.readMsgDouble();
            source.qty3 = former.readMsgDouble();
            source.owner_code = deleteNull(former.readMsgString());
            source.create_code = deleteNull(former.readMsgString());
            source.lot_priority = former.readMsgChar();
            source.lot_status = deleteNull(former.readMsgString());
            source.hold_code = deleteNull(former.readMsgString());
        }

        public static void transform_FMB_View_LotByRes_List_Out_Tag(StreamTransformer former, ref FMB_View_LotByRes_List_Out_Tag source)
        {
            source.h_status_value = former.readMsgChar();
            source.h_msg_code = deleteNull(former.readMsgString());
            source.h_msg = deleteNull(former.readMsgString());
            source.h_field_msg = deleteNull(former.readMsgString());
            source.h_db_err_msg = deleteNull(former.readMsgString());
            source.count = former.readMsgInt();
            source.next_lot_id = deleteNull(former.readMsgString());
            source._size_lotbyres_list = former.readMsgInt();
            source.lotbyres_list = new FMB_View_LotByRes_List_Out_Tag_lotbyres_list[source._size_lotbyres_list];
            for(int i = 0; i < source._size_lotbyres_list; i++)
            {
                source.lotbyres_list[i] = new FMB_View_LotByRes_List_Out_Tag_lotbyres_list();
                transform_FMB_View_LotByRes_List_Out_Tag_lotbyres_list(former, ref source.lotbyres_list[i]);
            }
        }

        public static void serialize_FMB_View_Lot_List_Detail_In_Tag_lot_list(StreamTransformer former, FMB_View_Lot_List_Detail_In_Tag_lot_list target)
        {
            former.writeMsgString(withoutSpace(target.lot_id));
        }

        public static void serialize_FMB_View_Lot_List_Detail_In_Tag(StreamTransformer former, FMB_View_Lot_List_Detail_In_Tag target)
        {
            former.writeMsgString(withoutSpace(target.h_passport));
            former.writeMsgChar(target.h_language);
            former.writeMsgString(withoutSpace(target.h_factory));
            former.writeMsgString(withoutSpace(target.h_user_id));
            former.writeMsgString(withoutSpace(target.h_password));
            former.writeMsgChar(target.h_proc_step);
            former.writeMsgString(withoutSpace(target.from_time));
            former.writeMsgString(withoutSpace(target.to_time));
            former.writeMsgString(withoutSpace(target.next_lot_id));
            former.writeMsgString(withoutSpace(target.mat_id));
            former.writeMsgInt(target.mat_ver);
            former.writeMsgString(withoutSpace(target.flow));
            former.writeMsgInt(target.flow_seq_num);
            former.writeMsgString(withoutSpace(target.oper));
            former.writeMsgString(withoutSpace(target.res_id));
            former.writeMsgString(withoutSpace(target.table_name1));
            former.writeMsgString(withoutSpace(target.table_name2));
            former.writeMsgString(withoutSpace(target.table_name3));
            former.writeMsgString(withoutSpace(target.grp_1));
            former.writeMsgString(withoutSpace(target.grp_2));
            former.writeMsgString(withoutSpace(target.grp_3));
            former.writeMsgChar(target.lot_del_flag);
            former.writeMsgChar(target.zero_qty_flag);
            former.writeMsgInt(target.count);
            target._size_lot_list = (100 >= target._size_lot_list ? target._size_lot_list : 100);
            former.writeMsgInt(target._size_lot_list);
            for(int i = 0; i < target._size_lot_list; i++)
            {
                serialize_FMB_View_Lot_List_Detail_In_Tag_lot_list(former, target.lot_list[i]);
            }
        }

        public static void transform_FMB_View_Lot_List_Detail_In_Tag_lot_list(StreamTransformer former, ref FMB_View_Lot_List_Detail_In_Tag_lot_list source)
        {
            source.lot_id = deleteNull(former.readMsgString());
        }

        public static void transform_FMB_View_Lot_List_Detail_In_Tag(StreamTransformer former, ref FMB_View_Lot_List_Detail_In_Tag source)
        {
            source.h_passport = deleteNull(former.readMsgString());
            source.h_language = former.readMsgChar();
            source.h_factory = deleteNull(former.readMsgString());
            source.h_user_id = deleteNull(former.readMsgString());
            source.h_password = deleteNull(former.readMsgString());
            source.h_proc_step = former.readMsgChar();
            source.from_time = deleteNull(former.readMsgString());
            source.to_time = deleteNull(former.readMsgString());
            source.next_lot_id = deleteNull(former.readMsgString());
            source.mat_id = deleteNull(former.readMsgString());
            source.mat_ver = former.readMsgInt();
            source.flow = deleteNull(former.readMsgString());
            source.flow_seq_num = former.readMsgInt();
            source.oper = deleteNull(former.readMsgString());
            source.res_id = deleteNull(former.readMsgString());
            source.table_name1 = deleteNull(former.readMsgString());
            source.table_name2 = deleteNull(former.readMsgString());
            source.table_name3 = deleteNull(former.readMsgString());
            source.grp_1 = deleteNull(former.readMsgString());
            source.grp_2 = deleteNull(former.readMsgString());
            source.grp_3 = deleteNull(former.readMsgString());
            source.lot_del_flag = former.readMsgChar();
            source.zero_qty_flag = former.readMsgChar();
            source.count = former.readMsgInt();
            source._size_lot_list = former.readMsgInt();
            source.lot_list = new FMB_View_Lot_List_Detail_In_Tag_lot_list[source._size_lot_list];
            for(int i = 0; i < source._size_lot_list; i++)
            {
                source.lot_list[i] = new FMB_View_Lot_List_Detail_In_Tag_lot_list();
                transform_FMB_View_Lot_List_Detail_In_Tag_lot_list(former, ref source.lot_list[i]);
            }
        }

        public static void serialize_FMB_View_Lot_List_Detail_Out_Tag_lot_list(StreamTransformer former, FMB_View_Lot_List_Detail_Out_Tag_lot_list target)
        {
            former.writeMsgString(withoutSpace(target.lot_id));
            former.writeMsgString(withoutSpace(target.lot_desc));
            former.writeMsgString(withoutSpace(target.factory));
            former.writeMsgString(withoutSpace(target.mat_id));
            former.writeMsgInt(target.mat_ver);
            former.writeMsgString(withoutSpace(target.mat_desc));
            former.writeMsgString(withoutSpace(target.flow));
            former.writeMsgInt(target.flow_seq_num);
            former.writeMsgString(withoutSpace(target.flow_desc));
            former.writeMsgString(withoutSpace(target.oper));
            former.writeMsgString(withoutSpace(target.oper_desc));
            former.writeMsgDouble(target.qty_1);
            former.writeMsgDouble(target.qty_2);
            former.writeMsgDouble(target.qty_3);
            former.writeMsgString(withoutSpace(target.crr_id));
            former.writeMsgChar(target.lot_type);
            former.writeMsgString(withoutSpace(target.owner_code));
            former.writeMsgString(withoutSpace(target.create_code));
            former.writeMsgChar(target.lot_priority);
            former.writeMsgString(withoutSpace(target.lot_status));
            former.writeMsgChar(target.hold_flag);
            former.writeMsgString(withoutSpace(target.hold_code));
            former.writeMsgString(withoutSpace(target.hold_password));
            former.writeMsgString(withoutSpace(target.hold_prv_grp_id));
            former.writeMsgDouble(target.oper_in_qty_1);
            former.writeMsgDouble(target.oper_in_qty_2);
            former.writeMsgDouble(target.oper_in_qty_3);
            former.writeMsgDouble(target.create_qty_1);
            former.writeMsgDouble(target.create_qty_2);
            former.writeMsgDouble(target.create_qty_3);
            former.writeMsgDouble(target.start_qty_1);
            former.writeMsgDouble(target.start_qty_2);
            former.writeMsgDouble(target.start_qty_3);
            former.writeMsgChar(target.inv_flag);
            former.writeMsgChar(target.transit_flag);
            former.writeMsgChar(target.unit_exist_flag);
            former.writeMsgString(withoutSpace(target.inv_unit));
            former.writeMsgChar(target.rwk_flag);
            former.writeMsgString(withoutSpace(target.rwk_code));
            former.writeMsgInt(target.rwk_count);
            former.writeMsgString(withoutSpace(target.rwk_ret_flow));
            former.writeMsgInt(target.rwk_ret_flow_seq_num);
            former.writeMsgString(withoutSpace(target.rwk_ret_oper));
            former.writeMsgString(withoutSpace(target.rwk_end_flow));
            former.writeMsgInt(target.rwk_end_flow_seq_num);
            former.writeMsgString(withoutSpace(target.rwk_end_oper));
            former.writeMsgChar(target.rwk_ret_clear_flag);
            former.writeMsgString(withoutSpace(target.rwk_time));
            former.writeMsgChar(target.nstd_flag);
            former.writeMsgString(withoutSpace(target.nstd_ret_flow));
            former.writeMsgInt(target.nstd_ret_flow_seq_num);
            former.writeMsgString(withoutSpace(target.nstd_ret_oper));
            former.writeMsgString(withoutSpace(target.nstd_time));
            former.writeMsgChar(target.rep_flag);
            former.writeMsgString(withoutSpace(target.rep_ret_oper));
            former.writeMsgChar(target.start_flag);
            former.writeMsgString(withoutSpace(target.start_time));
            former.writeMsgString(withoutSpace(target.start_res_id));
            former.writeMsgChar(target.end_flag);
            former.writeMsgString(withoutSpace(target.end_time));
            former.writeMsgString(withoutSpace(target.end_res_id));
            former.writeMsgChar(target.sample_flag);
            former.writeMsgChar(target.sample_wait_flag);
            former.writeMsgChar(target.sample_result);
            former.writeMsgChar(target.from_to_flag);
            former.writeMsgString(withoutSpace(target.from_to_lot_id));
            former.writeMsgString(withoutSpace(target.ship_code));
            former.writeMsgString(withoutSpace(target.ship_time));
            former.writeMsgString(withoutSpace(target.org_due_time));
            former.writeMsgString(withoutSpace(target.sch_due_time));
            former.writeMsgString(withoutSpace(target.create_time));
            former.writeMsgString(withoutSpace(target.fac_in_time));
            former.writeMsgString(withoutSpace(target.flow_in_time));
            former.writeMsgString(withoutSpace(target.oper_in_time));
            former.writeMsgString(withoutSpace(target.reserve_res_id));
            former.writeMsgString(withoutSpace(target.batch_id));
            former.writeMsgInt(target.batch_seq);
            former.writeMsgString(withoutSpace(target.order_id));
            former.writeMsgString(withoutSpace(target.add_order_id_1));
            former.writeMsgString(withoutSpace(target.add_order_id_2));
            former.writeMsgString(withoutSpace(target.add_order_id_3));
            former.writeMsgString(withoutSpace(target.lot_location));
            former.writeMsgString(withoutSpace(target.lot_cmf_1));
            former.writeMsgString(withoutSpace(target.lot_cmf_2));
            former.writeMsgString(withoutSpace(target.lot_cmf_3));
            former.writeMsgString(withoutSpace(target.lot_cmf_4));
            former.writeMsgString(withoutSpace(target.lot_cmf_5));
            former.writeMsgString(withoutSpace(target.lot_cmf_6));
            former.writeMsgString(withoutSpace(target.lot_cmf_7));
            former.writeMsgString(withoutSpace(target.lot_cmf_8));
            former.writeMsgString(withoutSpace(target.lot_cmf_9));
            former.writeMsgString(withoutSpace(target.lot_cmf_10));
            former.writeMsgString(withoutSpace(target.lot_cmf_11));
            former.writeMsgString(withoutSpace(target.lot_cmf_12));
            former.writeMsgString(withoutSpace(target.lot_cmf_13));
            former.writeMsgString(withoutSpace(target.lot_cmf_14));
            former.writeMsgString(withoutSpace(target.lot_cmf_15));
            former.writeMsgString(withoutSpace(target.lot_cmf_16));
            former.writeMsgString(withoutSpace(target.lot_cmf_17));
            former.writeMsgString(withoutSpace(target.lot_cmf_18));
            former.writeMsgString(withoutSpace(target.lot_cmf_19));
            former.writeMsgString(withoutSpace(target.lot_cmf_20));
            former.writeMsgChar(target.lot_del_flag);
            former.writeMsgString(withoutSpace(target.lot_del_code));
            former.writeMsgString(withoutSpace(target.lot_del_time));
            former.writeMsgString(withoutSpace(target.bom_set_id));
            former.writeMsgInt(target.bom_set_version);
            former.writeMsgInt(target.bom_active_hist_seq);
            former.writeMsgInt(target.bom_hist_seq);
            former.writeMsgString(withoutSpace(target.last_tran_code));
            former.writeMsgString(withoutSpace(target.last_tran_time));
            former.writeMsgString(withoutSpace(target.last_comment));
            former.writeMsgInt(target.last_active_hist_seq);
            former.writeMsgInt(target.last_hist_seq);
            former.writeMsgString(withoutSpace(target.critical_res_id));
            former.writeMsgString(withoutSpace(target.critical_res_group_id));
            former.writeMsgString(withoutSpace(target.save_res_id_1));
            former.writeMsgString(withoutSpace(target.save_res_id_2));
            former.writeMsgString(withoutSpace(target.subres_id));
            former.writeMsgString(withoutSpace(target.lot_group_id_1));
            former.writeMsgString(withoutSpace(target.lot_group_id_2));
            former.writeMsgString(withoutSpace(target.lot_group_id_3));
            former.writeMsgString(withoutSpace(target.resv_field_1));
            former.writeMsgString(withoutSpace(target.resv_field_2));
            former.writeMsgString(withoutSpace(target.resv_field_3));
            former.writeMsgString(withoutSpace(target.resv_field_4));
            former.writeMsgString(withoutSpace(target.resv_field_5));
            former.writeMsgChar(target.resv_flag_1);
            former.writeMsgChar(target.resv_flag_2);
            former.writeMsgChar(target.resv_flag_3);
            former.writeMsgChar(target.resv_flag_4);
            former.writeMsgChar(target.resv_flag_5);
        }

        public static void serialize_FMB_View_Lot_List_Detail_Out_Tag(StreamTransformer former, FMB_View_Lot_List_Detail_Out_Tag target)
        {
            former.writeMsgChar(target.h_status_value);
            former.writeMsgString(withoutSpace(target.h_msg_code));
            former.writeMsgString(withoutSpace(target.h_msg));
            former.writeMsgString(withoutSpace(target.h_field_msg));
            former.writeMsgString(withoutSpace(target.h_db_err_msg));
            former.writeMsgInt(target.count);
            former.writeMsgString(withoutSpace(target.next_lot_id));
            target._size_lot_list = (500 >= target._size_lot_list ? target._size_lot_list : 500);
            former.writeMsgInt(target._size_lot_list);
            for(int i = 0; i < target._size_lot_list; i++)
            {
                serialize_FMB_View_Lot_List_Detail_Out_Tag_lot_list(former, target.lot_list[i]);
            }
        }

        public static void transform_FMB_View_Lot_List_Detail_Out_Tag_lot_list(StreamTransformer former, ref FMB_View_Lot_List_Detail_Out_Tag_lot_list source)
        {
            source.lot_id = deleteNull(former.readMsgString());
            source.lot_desc = deleteNull(former.readMsgString());
            source.factory = deleteNull(former.readMsgString());
            source.mat_id = deleteNull(former.readMsgString());
            source.mat_ver = former.readMsgInt();
            source.mat_desc = deleteNull(former.readMsgString());
            source.flow = deleteNull(former.readMsgString());
            source.flow_seq_num = former.readMsgInt();
            source.flow_desc = deleteNull(former.readMsgString());
            source.oper = deleteNull(former.readMsgString());
            source.oper_desc = deleteNull(former.readMsgString());
            source.qty_1 = former.readMsgDouble();
            source.qty_2 = former.readMsgDouble();
            source.qty_3 = former.readMsgDouble();
            source.crr_id = deleteNull(former.readMsgString());
            source.lot_type = former.readMsgChar();
            source.owner_code = deleteNull(former.readMsgString());
            source.create_code = deleteNull(former.readMsgString());
            source.lot_priority = former.readMsgChar();
            source.lot_status = deleteNull(former.readMsgString());
            source.hold_flag = former.readMsgChar();
            source.hold_code = deleteNull(former.readMsgString());
            source.hold_password = deleteNull(former.readMsgString());
            source.hold_prv_grp_id = deleteNull(former.readMsgString());
            source.oper_in_qty_1 = former.readMsgDouble();
            source.oper_in_qty_2 = former.readMsgDouble();
            source.oper_in_qty_3 = former.readMsgDouble();
            source.create_qty_1 = former.readMsgDouble();
            source.create_qty_2 = former.readMsgDouble();
            source.create_qty_3 = former.readMsgDouble();
            source.start_qty_1 = former.readMsgDouble();
            source.start_qty_2 = former.readMsgDouble();
            source.start_qty_3 = former.readMsgDouble();
            source.inv_flag = former.readMsgChar();
            source.transit_flag = former.readMsgChar();
            source.unit_exist_flag = former.readMsgChar();
            source.inv_unit = deleteNull(former.readMsgString());
            source.rwk_flag = former.readMsgChar();
            source.rwk_code = deleteNull(former.readMsgString());
            source.rwk_count = former.readMsgInt();
            source.rwk_ret_flow = deleteNull(former.readMsgString());
            source.rwk_ret_flow_seq_num = former.readMsgInt();
            source.rwk_ret_oper = deleteNull(former.readMsgString());
            source.rwk_end_flow = deleteNull(former.readMsgString());
            source.rwk_end_flow_seq_num = former.readMsgInt();
            source.rwk_end_oper = deleteNull(former.readMsgString());
            source.rwk_ret_clear_flag = former.readMsgChar();
            source.rwk_time = deleteNull(former.readMsgString());
            source.nstd_flag = former.readMsgChar();
            source.nstd_ret_flow = deleteNull(former.readMsgString());
            source.nstd_ret_flow_seq_num = former.readMsgInt();
            source.nstd_ret_oper = deleteNull(former.readMsgString());
            source.nstd_time = deleteNull(former.readMsgString());
            source.rep_flag = former.readMsgChar();
            source.rep_ret_oper = deleteNull(former.readMsgString());
            source.start_flag = former.readMsgChar();
            source.start_time = deleteNull(former.readMsgString());
            source.start_res_id = deleteNull(former.readMsgString());
            source.end_flag = former.readMsgChar();
            source.end_time = deleteNull(former.readMsgString());
            source.end_res_id = deleteNull(former.readMsgString());
            source.sample_flag = former.readMsgChar();
            source.sample_wait_flag = former.readMsgChar();
            source.sample_result = former.readMsgChar();
            source.from_to_flag = former.readMsgChar();
            source.from_to_lot_id = deleteNull(former.readMsgString());
            source.ship_code = deleteNull(former.readMsgString());
            source.ship_time = deleteNull(former.readMsgString());
            source.org_due_time = deleteNull(former.readMsgString());
            source.sch_due_time = deleteNull(former.readMsgString());
            source.create_time = deleteNull(former.readMsgString());
            source.fac_in_time = deleteNull(former.readMsgString());
            source.flow_in_time = deleteNull(former.readMsgString());
            source.oper_in_time = deleteNull(former.readMsgString());
            source.reserve_res_id = deleteNull(former.readMsgString());
            source.batch_id = deleteNull(former.readMsgString());
            source.batch_seq = former.readMsgInt();
            source.order_id = deleteNull(former.readMsgString());
            source.add_order_id_1 = deleteNull(former.readMsgString());
            source.add_order_id_2 = deleteNull(former.readMsgString());
            source.add_order_id_3 = deleteNull(former.readMsgString());
            source.lot_location = deleteNull(former.readMsgString());
            source.lot_cmf_1 = deleteNull(former.readMsgString());
            source.lot_cmf_2 = deleteNull(former.readMsgString());
            source.lot_cmf_3 = deleteNull(former.readMsgString());
            source.lot_cmf_4 = deleteNull(former.readMsgString());
            source.lot_cmf_5 = deleteNull(former.readMsgString());
            source.lot_cmf_6 = deleteNull(former.readMsgString());
            source.lot_cmf_7 = deleteNull(former.readMsgString());
            source.lot_cmf_8 = deleteNull(former.readMsgString());
            source.lot_cmf_9 = deleteNull(former.readMsgString());
            source.lot_cmf_10 = deleteNull(former.readMsgString());
            source.lot_cmf_11 = deleteNull(former.readMsgString());
            source.lot_cmf_12 = deleteNull(former.readMsgString());
            source.lot_cmf_13 = deleteNull(former.readMsgString());
            source.lot_cmf_14 = deleteNull(former.readMsgString());
            source.lot_cmf_15 = deleteNull(former.readMsgString());
            source.lot_cmf_16 = deleteNull(former.readMsgString());
            source.lot_cmf_17 = deleteNull(former.readMsgString());
            source.lot_cmf_18 = deleteNull(former.readMsgString());
            source.lot_cmf_19 = deleteNull(former.readMsgString());
            source.lot_cmf_20 = deleteNull(former.readMsgString());
            source.lot_del_flag = former.readMsgChar();
            source.lot_del_code = deleteNull(former.readMsgString());
            source.lot_del_time = deleteNull(former.readMsgString());
            source.bom_set_id = deleteNull(former.readMsgString());
            source.bom_set_version = former.readMsgInt();
            source.bom_active_hist_seq = former.readMsgInt();
            source.bom_hist_seq = former.readMsgInt();
            source.last_tran_code = deleteNull(former.readMsgString());
            source.last_tran_time = deleteNull(former.readMsgString());
            source.last_comment = deleteNull(former.readMsgString());
            source.last_active_hist_seq = former.readMsgInt();
            source.last_hist_seq = former.readMsgInt();
            source.critical_res_id = deleteNull(former.readMsgString());
            source.critical_res_group_id = deleteNull(former.readMsgString());
            source.save_res_id_1 = deleteNull(former.readMsgString());
            source.save_res_id_2 = deleteNull(former.readMsgString());
            source.subres_id = deleteNull(former.readMsgString());
            source.lot_group_id_1 = deleteNull(former.readMsgString());
            source.lot_group_id_2 = deleteNull(former.readMsgString());
            source.lot_group_id_3 = deleteNull(former.readMsgString());
            source.resv_field_1 = deleteNull(former.readMsgString());
            source.resv_field_2 = deleteNull(former.readMsgString());
            source.resv_field_3 = deleteNull(former.readMsgString());
            source.resv_field_4 = deleteNull(former.readMsgString());
            source.resv_field_5 = deleteNull(former.readMsgString());
            source.resv_flag_1 = former.readMsgChar();
            source.resv_flag_2 = former.readMsgChar();
            source.resv_flag_3 = former.readMsgChar();
            source.resv_flag_4 = former.readMsgChar();
            source.resv_flag_5 = former.readMsgChar();
        }

        public static void transform_FMB_View_Lot_List_Detail_Out_Tag(StreamTransformer former, ref FMB_View_Lot_List_Detail_Out_Tag source)
        {
            source.h_status_value = former.readMsgChar();
            source.h_msg_code = deleteNull(former.readMsgString());
            source.h_msg = deleteNull(former.readMsgString());
            source.h_field_msg = deleteNull(former.readMsgString());
            source.h_db_err_msg = deleteNull(former.readMsgString());
            source.count = former.readMsgInt();
            source.next_lot_id = deleteNull(former.readMsgString());
            source._size_lot_list = former.readMsgInt();
            source.lot_list = new FMB_View_Lot_List_Detail_Out_Tag_lot_list[source._size_lot_list];
            for(int i = 0; i < source._size_lot_list; i++)
            {
                source.lot_list[i] = new FMB_View_Lot_List_Detail_Out_Tag_lot_list();
                transform_FMB_View_Lot_List_Detail_Out_Tag_lot_list(former, ref source.lot_list[i]);
            }
        }

        public static void serialize_FMB_View_Factory_In_Tag(StreamTransformer former, FMB_View_Factory_In_Tag target)
        {
            former.writeMsgString(withoutSpace(target.h_passport));
            former.writeMsgChar(target.h_language);
            former.writeMsgString(withoutSpace(target.h_factory));
            former.writeMsgString(withoutSpace(target.h_user_id));
            former.writeMsgString(withoutSpace(target.h_password));
            former.writeMsgChar(target.h_proc_step);
        }

        public static void transform_FMB_View_Factory_In_Tag(StreamTransformer former, ref FMB_View_Factory_In_Tag source)
        {
            source.h_passport = deleteNull(former.readMsgString());
            source.h_language = former.readMsgChar();
            source.h_factory = deleteNull(former.readMsgString());
            source.h_user_id = deleteNull(former.readMsgString());
            source.h_password = deleteNull(former.readMsgString());
            source.h_proc_step = former.readMsgChar();
        }

        public static void serialize_FMB_View_Factory_Out_Tag(StreamTransformer former, FMB_View_Factory_Out_Tag target)
        {
            former.writeMsgChar(target.h_status_value);
            former.writeMsgString(withoutSpace(target.h_msg_code));
            former.writeMsgString(withoutSpace(target.h_msg));
            former.writeMsgString(withoutSpace(target.h_field_msg));
            former.writeMsgString(withoutSpace(target.h_db_err_msg));
            former.writeMsgString(withoutSpace(target.factory));
            former.writeMsgString(withoutSpace(target.fac_desc));
            former.writeMsgString(withoutSpace(target.fac_type));
            former.writeMsgString(withoutSpace(target.fac_grp_1));
            former.writeMsgString(withoutSpace(target.fac_grp_2));
            former.writeMsgString(withoutSpace(target.fac_grp_3));
            former.writeMsgString(withoutSpace(target.fac_grp_4));
            former.writeMsgString(withoutSpace(target.fac_grp_5));
            former.writeMsgDouble(target.days_per_week);
            former.writeMsgDouble(target.hours_per_day);
            former.writeMsgChar(target.variable_shift_flag);
            former.writeMsgString(withoutSpace(target.shift_1_start));
            former.writeMsgChar(target.shift_1_day_flag);
            former.writeMsgString(withoutSpace(target.shift_2_start));
            former.writeMsgChar(target.shift_2_day_flag);
            former.writeMsgString(withoutSpace(target.shift_3_start));
            former.writeMsgChar(target.shift_3_day_flag);
            former.writeMsgString(withoutSpace(target.shift_4_start));
            former.writeMsgChar(target.shift_4_day_flag);
            former.writeMsgChar(target.remote_fac_flag);
            former.writeMsgString(withoutSpace(target.res_sts_1));
            former.writeMsgString(withoutSpace(target.res_sts_2));
            former.writeMsgString(withoutSpace(target.res_sts_3));
            former.writeMsgString(withoutSpace(target.res_sts_4));
            former.writeMsgString(withoutSpace(target.res_sts_5));
            former.writeMsgString(withoutSpace(target.res_sts_6));
            former.writeMsgString(withoutSpace(target.res_sts_7));
            former.writeMsgString(withoutSpace(target.res_sts_8));
            former.writeMsgString(withoutSpace(target.res_sts_9));
            former.writeMsgString(withoutSpace(target.res_sts_10));
            former.writeMsgString(withoutSpace(target.create_user_id));
            former.writeMsgString(withoutSpace(target.create_time));
            former.writeMsgString(withoutSpace(target.update_user_id));
            former.writeMsgString(withoutSpace(target.update_time));
        }

        public static void transform_FMB_View_Factory_Out_Tag(StreamTransformer former, ref FMB_View_Factory_Out_Tag source)
        {
            source.h_status_value = former.readMsgChar();
            source.h_msg_code = deleteNull(former.readMsgString());
            source.h_msg = deleteNull(former.readMsgString());
            source.h_field_msg = deleteNull(former.readMsgString());
            source.h_db_err_msg = deleteNull(former.readMsgString());
            source.factory = deleteNull(former.readMsgString());
            source.fac_desc = deleteNull(former.readMsgString());
            source.fac_type = deleteNull(former.readMsgString());
            source.fac_grp_1 = deleteNull(former.readMsgString());
            source.fac_grp_2 = deleteNull(former.readMsgString());
            source.fac_grp_3 = deleteNull(former.readMsgString());
            source.fac_grp_4 = deleteNull(former.readMsgString());
            source.fac_grp_5 = deleteNull(former.readMsgString());
            source.days_per_week = former.readMsgDouble();
            source.hours_per_day = former.readMsgDouble();
            source.variable_shift_flag = former.readMsgChar();
            source.shift_1_start = deleteNull(former.readMsgString());
            source.shift_1_day_flag = former.readMsgChar();
            source.shift_2_start = deleteNull(former.readMsgString());
            source.shift_2_day_flag = former.readMsgChar();
            source.shift_3_start = deleteNull(former.readMsgString());
            source.shift_3_day_flag = former.readMsgChar();
            source.shift_4_start = deleteNull(former.readMsgString());
            source.shift_4_day_flag = former.readMsgChar();
            source.remote_fac_flag = former.readMsgChar();
            source.res_sts_1 = deleteNull(former.readMsgString());
            source.res_sts_2 = deleteNull(former.readMsgString());
            source.res_sts_3 = deleteNull(former.readMsgString());
            source.res_sts_4 = deleteNull(former.readMsgString());
            source.res_sts_5 = deleteNull(former.readMsgString());
            source.res_sts_6 = deleteNull(former.readMsgString());
            source.res_sts_7 = deleteNull(former.readMsgString());
            source.res_sts_8 = deleteNull(former.readMsgString());
            source.res_sts_9 = deleteNull(former.readMsgString());
            source.res_sts_10 = deleteNull(former.readMsgString());
            source.create_user_id = deleteNull(former.readMsgString());
            source.create_time = deleteNull(former.readMsgString());
            source.update_user_id = deleteNull(former.readMsgString());
            source.update_time = deleteNull(former.readMsgString());
        }

        public static void serialize_FMB_View_Factory_Cmf_Item_In_Tag(StreamTransformer former, FMB_View_Factory_Cmf_Item_In_Tag target)
        {
            former.writeMsgString(withoutSpace(target.h_passport));
            former.writeMsgChar(target.h_language);
            former.writeMsgString(withoutSpace(target.h_factory));
            former.writeMsgString(withoutSpace(target.h_user_id));
            former.writeMsgString(withoutSpace(target.h_password));
            former.writeMsgChar(target.h_proc_step);
            former.writeMsgString(withoutSpace(target.item_name));
        }

        public static void transform_FMB_View_Factory_Cmf_Item_In_Tag(StreamTransformer former, ref FMB_View_Factory_Cmf_Item_In_Tag source)
        {
            source.h_passport = deleteNull(former.readMsgString());
            source.h_language = former.readMsgChar();
            source.h_factory = deleteNull(former.readMsgString());
            source.h_user_id = deleteNull(former.readMsgString());
            source.h_password = deleteNull(former.readMsgString());
            source.h_proc_step = former.readMsgChar();
            source.item_name = deleteNull(former.readMsgString());
        }

        public static void serialize_FMB_View_Factory_Cmf_Item_Out_Tag_data_tbl(StreamTransformer former, FMB_View_Factory_Cmf_Item_Out_Tag_data_tbl target)
        {
            former.writeMsgString(withoutSpace(target.prompt));
            former.writeMsgChar(target.format);
            former.writeMsgChar(target.opt);
            former.writeMsgString(withoutSpace(target.table_name));
        }

        public static void serialize_FMB_View_Factory_Cmf_Item_Out_Tag(StreamTransformer former, FMB_View_Factory_Cmf_Item_Out_Tag target)
        {
            former.writeMsgChar(target.h_status_value);
            former.writeMsgString(withoutSpace(target.h_msg_code));
            former.writeMsgString(withoutSpace(target.h_msg));
            former.writeMsgString(withoutSpace(target.h_field_msg));
            former.writeMsgString(withoutSpace(target.h_db_err_msg));
            former.writeMsgString(withoutSpace(target.factory));
            former.writeMsgString(withoutSpace(target.item_name));
            former.writeMsgInt(target.count);
            target._size_data_tbl = (20 >= target._size_data_tbl ? target._size_data_tbl : 20);
            former.writeMsgInt(target._size_data_tbl);
            for(int i = 0; i < target._size_data_tbl; i++)
            {
                serialize_FMB_View_Factory_Cmf_Item_Out_Tag_data_tbl(former, target.data_tbl[i]);
            }
            former.writeMsgString(withoutSpace(target.create_user_id));
            former.writeMsgString(withoutSpace(target.create_time));
            former.writeMsgString(withoutSpace(target.update_user_id));
            former.writeMsgString(withoutSpace(target.update_time));
        }

        public static void transform_FMB_View_Factory_Cmf_Item_Out_Tag_data_tbl(StreamTransformer former, ref FMB_View_Factory_Cmf_Item_Out_Tag_data_tbl source)
        {
            source.prompt = deleteNull(former.readMsgString());
            source.format = former.readMsgChar();
            source.opt = former.readMsgChar();
            source.table_name = deleteNull(former.readMsgString());
        }

        public static void transform_FMB_View_Factory_Cmf_Item_Out_Tag(StreamTransformer former, ref FMB_View_Factory_Cmf_Item_Out_Tag source)
        {
            source.h_status_value = former.readMsgChar();
            source.h_msg_code = deleteNull(former.readMsgString());
            source.h_msg = deleteNull(former.readMsgString());
            source.h_field_msg = deleteNull(former.readMsgString());
            source.h_db_err_msg = deleteNull(former.readMsgString());
            source.factory = deleteNull(former.readMsgString());
            source.item_name = deleteNull(former.readMsgString());
            source.count = former.readMsgInt();
            source._size_data_tbl = former.readMsgInt();
            source.data_tbl = new FMB_View_Factory_Cmf_Item_Out_Tag_data_tbl[source._size_data_tbl];
            for(int i = 0; i < source._size_data_tbl; i++)
            {
                source.data_tbl[i] = new FMB_View_Factory_Cmf_Item_Out_Tag_data_tbl();
                transform_FMB_View_Factory_Cmf_Item_Out_Tag_data_tbl(former, ref source.data_tbl[i]);
            }
            source.create_user_id = deleteNull(former.readMsgString());
            source.create_time = deleteNull(former.readMsgString());
            source.update_user_id = deleteNull(former.readMsgString());
            source.update_time = deleteNull(former.readMsgString());
        }

        public static void serialize_FMB_View_Material_List_In_Tag(StreamTransformer former, FMB_View_Material_List_In_Tag target)
        {
            former.writeMsgString(withoutSpace(target.h_passport));
            former.writeMsgChar(target.h_language);
            former.writeMsgString(withoutSpace(target.h_factory));
            former.writeMsgString(withoutSpace(target.h_user_id));
            former.writeMsgString(withoutSpace(target.h_password));
            former.writeMsgChar(target.h_proc_step);
            former.writeMsgString(withoutSpace(target.mat_type));
            former.writeMsgString(withoutSpace(target.next_mat_id));
            former.writeMsgInt(target.next_mat_ver);
            former.writeMsgString(withoutSpace(target.filter));
        }

        public static void transform_FMB_View_Material_List_In_Tag(StreamTransformer former, ref FMB_View_Material_List_In_Tag source)
        {
            source.h_passport = deleteNull(former.readMsgString());
            source.h_language = former.readMsgChar();
            source.h_factory = deleteNull(former.readMsgString());
            source.h_user_id = deleteNull(former.readMsgString());
            source.h_password = deleteNull(former.readMsgString());
            source.h_proc_step = former.readMsgChar();
            source.mat_type = deleteNull(former.readMsgString());
            source.next_mat_id = deleteNull(former.readMsgString());
            source.next_mat_ver = former.readMsgInt();
            source.filter = deleteNull(former.readMsgString());
        }

        public static void serialize_FMB_View_Material_List_Out_Tag_mat_list(StreamTransformer former, FMB_View_Material_List_Out_Tag_mat_list target)
        {
            former.writeMsgString(withoutSpace(target.mat_id));
            former.writeMsgInt(target.mat_ver);
            former.writeMsgString(withoutSpace(target.mat_desc));
        }

        public static void serialize_FMB_View_Material_List_Out_Tag(StreamTransformer former, FMB_View_Material_List_Out_Tag target)
        {
            former.writeMsgChar(target.h_status_value);
            former.writeMsgString(withoutSpace(target.h_msg_code));
            former.writeMsgString(withoutSpace(target.h_msg));
            former.writeMsgString(withoutSpace(target.h_field_msg));
            former.writeMsgString(withoutSpace(target.h_db_err_msg));
            former.writeMsgInt(target.count);
            former.writeMsgString(withoutSpace(target.next_mat_id));
            former.writeMsgInt(target.next_mat_ver);
            target._size_mat_list = (1000 >= target._size_mat_list ? target._size_mat_list : 1000);
            former.writeMsgInt(target._size_mat_list);
            for(int i = 0; i < target._size_mat_list; i++)
            {
                serialize_FMB_View_Material_List_Out_Tag_mat_list(former, target.mat_list[i]);
            }
        }

        public static void transform_FMB_View_Material_List_Out_Tag_mat_list(StreamTransformer former, ref FMB_View_Material_List_Out_Tag_mat_list source)
        {
            source.mat_id = deleteNull(former.readMsgString());
            source.mat_ver = former.readMsgInt();
            source.mat_desc = deleteNull(former.readMsgString());
        }

        public static void transform_FMB_View_Material_List_Out_Tag(StreamTransformer former, ref FMB_View_Material_List_Out_Tag source)
        {
            source.h_status_value = former.readMsgChar();
            source.h_msg_code = deleteNull(former.readMsgString());
            source.h_msg = deleteNull(former.readMsgString());
            source.h_field_msg = deleteNull(former.readMsgString());
            source.h_db_err_msg = deleteNull(former.readMsgString());
            source.count = former.readMsgInt();
            source.next_mat_id = deleteNull(former.readMsgString());
            source.next_mat_ver = former.readMsgInt();
            source._size_mat_list = former.readMsgInt();
            source.mat_list = new FMB_View_Material_List_Out_Tag_mat_list[source._size_mat_list];
            for(int i = 0; i < source._size_mat_list; i++)
            {
                source.mat_list[i] = new FMB_View_Material_List_Out_Tag_mat_list();
                transform_FMB_View_Material_List_Out_Tag_mat_list(former, ref source.mat_list[i]);
            }
        }

        public static void serialize_FMB_View_Flow_List_In_Tag(StreamTransformer former, FMB_View_Flow_List_In_Tag target)
        {
            former.writeMsgString(withoutSpace(target.h_passport));
            former.writeMsgChar(target.h_language);
            former.writeMsgString(withoutSpace(target.h_factory));
            former.writeMsgString(withoutSpace(target.h_user_id));
            former.writeMsgString(withoutSpace(target.h_password));
            former.writeMsgChar(target.h_proc_step);
            former.writeMsgString(withoutSpace(target.mat_id));
            former.writeMsgInt(target.mat_ver);
            former.writeMsgString(withoutSpace(target.filter));
            former.writeMsgString(withoutSpace(target.oper));
            former.writeMsgString(withoutSpace(target.next_flow));
        }

        public static void transform_FMB_View_Flow_List_In_Tag(StreamTransformer former, ref FMB_View_Flow_List_In_Tag source)
        {
            source.h_passport = deleteNull(former.readMsgString());
            source.h_language = former.readMsgChar();
            source.h_factory = deleteNull(former.readMsgString());
            source.h_user_id = deleteNull(former.readMsgString());
            source.h_password = deleteNull(former.readMsgString());
            source.h_proc_step = former.readMsgChar();
            source.mat_id = deleteNull(former.readMsgString());
            source.mat_ver = former.readMsgInt();
            source.filter = deleteNull(former.readMsgString());
            source.oper = deleteNull(former.readMsgString());
            source.next_flow = deleteNull(former.readMsgString());
        }

        public static void serialize_FMB_View_Flow_List_Out_Tag_flow_list(StreamTransformer former, FMB_View_Flow_List_Out_Tag_flow_list target)
        {
            former.writeMsgString(withoutSpace(target.flow));
            former.writeMsgString(withoutSpace(target.flow_desc));
            former.writeMsgString(withoutSpace(target.opt_flow_group));
            former.writeMsgChar(target.opt_flow_option_flag);
        }

        public static void serialize_FMB_View_Flow_List_Out_Tag(StreamTransformer former, FMB_View_Flow_List_Out_Tag target)
        {
            former.writeMsgChar(target.h_status_value);
            former.writeMsgString(withoutSpace(target.h_msg_code));
            former.writeMsgString(withoutSpace(target.h_msg));
            former.writeMsgString(withoutSpace(target.h_field_msg));
            former.writeMsgString(withoutSpace(target.h_db_err_msg));
            former.writeMsgInt(target.count);
            former.writeMsgString(withoutSpace(target.next_flow));
            target._size_flow_list = (1000 >= target._size_flow_list ? target._size_flow_list : 1000);
            former.writeMsgInt(target._size_flow_list);
            for(int i = 0; i < target._size_flow_list; i++)
            {
                serialize_FMB_View_Flow_List_Out_Tag_flow_list(former, target.flow_list[i]);
            }
        }

        public static void transform_FMB_View_Flow_List_Out_Tag_flow_list(StreamTransformer former, ref FMB_View_Flow_List_Out_Tag_flow_list source)
        {
            source.flow = deleteNull(former.readMsgString());
            source.flow_desc = deleteNull(former.readMsgString());
            source.opt_flow_group = deleteNull(former.readMsgString());
            source.opt_flow_option_flag = former.readMsgChar();
        }

        public static void transform_FMB_View_Flow_List_Out_Tag(StreamTransformer former, ref FMB_View_Flow_List_Out_Tag source)
        {
            source.h_status_value = former.readMsgChar();
            source.h_msg_code = deleteNull(former.readMsgString());
            source.h_msg = deleteNull(former.readMsgString());
            source.h_field_msg = deleteNull(former.readMsgString());
            source.h_db_err_msg = deleteNull(former.readMsgString());
            source.count = former.readMsgInt();
            source.next_flow = deleteNull(former.readMsgString());
            source._size_flow_list = former.readMsgInt();
            source.flow_list = new FMB_View_Flow_List_Out_Tag_flow_list[source._size_flow_list];
            for(int i = 0; i < source._size_flow_list; i++)
            {
                source.flow_list[i] = new FMB_View_Flow_List_Out_Tag_flow_list();
                transform_FMB_View_Flow_List_Out_Tag_flow_list(former, ref source.flow_list[i]);
            }
        }

        public static void serialize_FMB_View_Operation_List_In_Tag(StreamTransformer former, FMB_View_Operation_List_In_Tag target)
        {
            former.writeMsgString(withoutSpace(target.h_passport));
            former.writeMsgChar(target.h_language);
            former.writeMsgString(withoutSpace(target.h_factory));
            former.writeMsgString(withoutSpace(target.h_user_id));
            former.writeMsgString(withoutSpace(target.h_password));
            former.writeMsgChar(target.h_proc_step);
            former.writeMsgString(withoutSpace(target.mat_id));
            former.writeMsgInt(target.mat_ver);
            former.writeMsgString(withoutSpace(target.flow));
            former.writeMsgString(withoutSpace(target.next_oper));
            former.writeMsgString(withoutSpace(target.filter));
        }

        public static void transform_FMB_View_Operation_List_In_Tag(StreamTransformer former, ref FMB_View_Operation_List_In_Tag source)
        {
            source.h_passport = deleteNull(former.readMsgString());
            source.h_language = former.readMsgChar();
            source.h_factory = deleteNull(former.readMsgString());
            source.h_user_id = deleteNull(former.readMsgString());
            source.h_password = deleteNull(former.readMsgString());
            source.h_proc_step = former.readMsgChar();
            source.mat_id = deleteNull(former.readMsgString());
            source.mat_ver = former.readMsgInt();
            source.flow = deleteNull(former.readMsgString());
            source.next_oper = deleteNull(former.readMsgString());
            source.filter = deleteNull(former.readMsgString());
        }

        public static void serialize_FMB_View_Operation_List_Out_Tag_oper_list(StreamTransformer former, FMB_View_Operation_List_Out_Tag_oper_list target)
        {
            former.writeMsgString(withoutSpace(target.oper));
            former.writeMsgString(withoutSpace(target.oper_desc));
            former.writeMsgString(withoutSpace(target.opt_oper_group));
            former.writeMsgChar(target.opt_oper_option_flag);
        }

        public static void serialize_FMB_View_Operation_List_Out_Tag(StreamTransformer former, FMB_View_Operation_List_Out_Tag target)
        {
            former.writeMsgChar(target.h_status_value);
            former.writeMsgString(withoutSpace(target.h_msg_code));
            former.writeMsgString(withoutSpace(target.h_msg));
            former.writeMsgString(withoutSpace(target.h_field_msg));
            former.writeMsgString(withoutSpace(target.h_db_err_msg));
            former.writeMsgInt(target.count);
            former.writeMsgString(withoutSpace(target.next_oper));
            target._size_oper_list = (1000 >= target._size_oper_list ? target._size_oper_list : 1000);
            former.writeMsgInt(target._size_oper_list);
            for(int i = 0; i < target._size_oper_list; i++)
            {
                serialize_FMB_View_Operation_List_Out_Tag_oper_list(former, target.oper_list[i]);
            }
        }

        public static void transform_FMB_View_Operation_List_Out_Tag_oper_list(StreamTransformer former, ref FMB_View_Operation_List_Out_Tag_oper_list source)
        {
            source.oper = deleteNull(former.readMsgString());
            source.oper_desc = deleteNull(former.readMsgString());
            source.opt_oper_group = deleteNull(former.readMsgString());
            source.opt_oper_option_flag = former.readMsgChar();
        }

        public static void transform_FMB_View_Operation_List_Out_Tag(StreamTransformer former, ref FMB_View_Operation_List_Out_Tag source)
        {
            source.h_status_value = former.readMsgChar();
            source.h_msg_code = deleteNull(former.readMsgString());
            source.h_msg = deleteNull(former.readMsgString());
            source.h_field_msg = deleteNull(former.readMsgString());
            source.h_db_err_msg = deleteNull(former.readMsgString());
            source.count = former.readMsgInt();
            source.next_oper = deleteNull(former.readMsgString());
            source._size_oper_list = former.readMsgInt();
            source.oper_list = new FMB_View_Operation_List_Out_Tag_oper_list[source._size_oper_list];
            for(int i = 0; i < source._size_oper_list; i++)
            {
                source.oper_list[i] = new FMB_View_Operation_List_Out_Tag_oper_list();
                transform_FMB_View_Operation_List_Out_Tag_oper_list(former, ref source.oper_list[i]);
            }
        }

        public static void serialize_FMB_View_ResEvent_List_In_Tag(StreamTransformer former, FMB_View_ResEvent_List_In_Tag target)
        {
            former.writeMsgString(withoutSpace(target.h_passport));
            former.writeMsgChar(target.h_language);
            former.writeMsgString(withoutSpace(target.h_factory));
            former.writeMsgString(withoutSpace(target.h_user_id));
            former.writeMsgString(withoutSpace(target.h_password));
            former.writeMsgChar(target.h_proc_step);
            former.writeMsgString(withoutSpace(target.next_res_id));
            former.writeMsgString(withoutSpace(target.next_event_id));
            former.writeMsgChar(target.res_type);
        }

        public static void transform_FMB_View_ResEvent_List_In_Tag(StreamTransformer former, ref FMB_View_ResEvent_List_In_Tag source)
        {
            source.h_passport = deleteNull(former.readMsgString());
            source.h_language = former.readMsgChar();
            source.h_factory = deleteNull(former.readMsgString());
            source.h_user_id = deleteNull(former.readMsgString());
            source.h_password = deleteNull(former.readMsgString());
            source.h_proc_step = former.readMsgChar();
            source.next_res_id = deleteNull(former.readMsgString());
            source.next_event_id = deleteNull(former.readMsgString());
            source.res_type = former.readMsgChar();
        }

        public static void serialize_FMB_View_ResEvent_List_Out_Tag_res_event_list(StreamTransformer former, FMB_View_ResEvent_List_Out_Tag_res_event_list target)
        {
            former.writeMsgString(withoutSpace(target.factory));
            former.writeMsgString(withoutSpace(target.res_id));
            former.writeMsgString(withoutSpace(target.res_desc));
            former.writeMsgString(withoutSpace(target.event_id));
            former.writeMsgString(withoutSpace(target.event_desc));
            former.writeMsgChar(target.system_flag);
        }

        public static void serialize_FMB_View_ResEvent_List_Out_Tag(StreamTransformer former, FMB_View_ResEvent_List_Out_Tag target)
        {
            former.writeMsgChar(target.h_status_value);
            former.writeMsgString(withoutSpace(target.h_msg_code));
            former.writeMsgString(withoutSpace(target.h_msg));
            former.writeMsgString(withoutSpace(target.h_field_msg));
            former.writeMsgString(withoutSpace(target.h_db_err_msg));
            former.writeMsgInt(target.count);
            former.writeMsgString(withoutSpace(target.next_res_id));
            former.writeMsgString(withoutSpace(target.next_event_id));
            target._size_res_event_list = (1000 >= target._size_res_event_list ? target._size_res_event_list : 1000);
            former.writeMsgInt(target._size_res_event_list);
            for(int i = 0; i < target._size_res_event_list; i++)
            {
                serialize_FMB_View_ResEvent_List_Out_Tag_res_event_list(former, target.res_event_list[i]);
            }
        }

        public static void transform_FMB_View_ResEvent_List_Out_Tag_res_event_list(StreamTransformer former, ref FMB_View_ResEvent_List_Out_Tag_res_event_list source)
        {
            source.factory = deleteNull(former.readMsgString());
            source.res_id = deleteNull(former.readMsgString());
            source.res_desc = deleteNull(former.readMsgString());
            source.event_id = deleteNull(former.readMsgString());
            source.event_desc = deleteNull(former.readMsgString());
            source.system_flag = former.readMsgChar();
        }

        public static void transform_FMB_View_ResEvent_List_Out_Tag(StreamTransformer former, ref FMB_View_ResEvent_List_Out_Tag source)
        {
            source.h_status_value = former.readMsgChar();
            source.h_msg_code = deleteNull(former.readMsgString());
            source.h_msg = deleteNull(former.readMsgString());
            source.h_field_msg = deleteNull(former.readMsgString());
            source.h_db_err_msg = deleteNull(former.readMsgString());
            source.count = former.readMsgInt();
            source.next_res_id = deleteNull(former.readMsgString());
            source.next_event_id = deleteNull(former.readMsgString());
            source._size_res_event_list = former.readMsgInt();
            source.res_event_list = new FMB_View_ResEvent_List_Out_Tag_res_event_list[source._size_res_event_list];
            for(int i = 0; i < source._size_res_event_list; i++)
            {
                source.res_event_list[i] = new FMB_View_ResEvent_List_Out_Tag_res_event_list();
                transform_FMB_View_ResEvent_List_Out_Tag_res_event_list(former, ref source.res_event_list[i]);
            }
        }

        public static void serialize_FMB_View_ResLot_List_In_Tag(StreamTransformer former, FMB_View_ResLot_List_In_Tag target)
        {
            former.writeMsgString(withoutSpace(target.h_passport));
            former.writeMsgChar(target.h_language);
            former.writeMsgString(withoutSpace(target.h_factory));
            former.writeMsgString(withoutSpace(target.h_user_id));
            former.writeMsgString(withoutSpace(target.h_password));
            former.writeMsgChar(target.h_proc_step);
            former.writeMsgString(withoutSpace(target.res_id));
            former.writeMsgString(withoutSpace(target.next_lot_id));
            former.writeMsgString(withoutSpace(target.oper));
        }

        public static void transform_FMB_View_ResLot_List_In_Tag(StreamTransformer former, ref FMB_View_ResLot_List_In_Tag source)
        {
            source.h_passport = deleteNull(former.readMsgString());
            source.h_language = former.readMsgChar();
            source.h_factory = deleteNull(former.readMsgString());
            source.h_user_id = deleteNull(former.readMsgString());
            source.h_password = deleteNull(former.readMsgString());
            source.h_proc_step = former.readMsgChar();
            source.res_id = deleteNull(former.readMsgString());
            source.next_lot_id = deleteNull(former.readMsgString());
            source.oper = deleteNull(former.readMsgString());
        }

        public static void serialize_FMB_View_ResLot_List_Out_Tag_res_lot_list(StreamTransformer former, FMB_View_ResLot_List_Out_Tag_res_lot_list target)
        {
            former.writeMsgString(withoutSpace(target.factory));
            former.writeMsgString(withoutSpace(target.res_id));
            former.writeMsgString(withoutSpace(target.lot_id));
            former.writeMsgString(withoutSpace(target.crr_id));
            former.writeMsgString(withoutSpace(target.event_id));
            former.writeMsgString(withoutSpace(target.mat_id));
            former.writeMsgInt(target.mat_ver);
            former.writeMsgString(withoutSpace(target.flow));
            former.writeMsgInt(target.flow_seq_num);
            former.writeMsgString(withoutSpace(target.oper));
            former.writeMsgChar(target.lot_type);
            former.writeMsgString(withoutSpace(target.tran_time));
            former.writeMsgDouble(target.qty1);
            former.writeMsgDouble(target.qty2);
            former.writeMsgDouble(target.qty3);
            former.writeMsgString(withoutSpace(target.owner_code));
            former.writeMsgString(withoutSpace(target.create_code));
            former.writeMsgChar(target.lot_priority);
            former.writeMsgString(withoutSpace(target.lot_status));
            former.writeMsgString(withoutSpace(target.hold_code));
            former.writeMsgString(withoutSpace(target.cmf_1));
            former.writeMsgString(withoutSpace(target.cmf_2));
            former.writeMsgString(withoutSpace(target.cmf_3));
            former.writeMsgString(withoutSpace(target.cmf_4));
            former.writeMsgString(withoutSpace(target.cmf_5));
            former.writeMsgString(withoutSpace(target.cmf_6));
            former.writeMsgString(withoutSpace(target.cmf_7));
            former.writeMsgString(withoutSpace(target.cmf_8));
            former.writeMsgString(withoutSpace(target.cmf_9));
            former.writeMsgString(withoutSpace(target.cmf_10));
            former.writeMsgString(withoutSpace(target.cmf_11));
            former.writeMsgString(withoutSpace(target.cmf_12));
            former.writeMsgString(withoutSpace(target.cmf_13));
            former.writeMsgString(withoutSpace(target.cmf_14));
            former.writeMsgString(withoutSpace(target.cmf_15));
            former.writeMsgString(withoutSpace(target.cmf_16));
            former.writeMsgString(withoutSpace(target.cmf_17));
            former.writeMsgString(withoutSpace(target.cmf_18));
            former.writeMsgString(withoutSpace(target.cmf_19));
            former.writeMsgString(withoutSpace(target.cmf_20));
            former.writeMsgString(withoutSpace(target.create_user_id));
            former.writeMsgString(withoutSpace(target.create_time));
            former.writeMsgString(withoutSpace(target.update_user_id));
            former.writeMsgString(withoutSpace(target.update_time));
        }

        public static void serialize_FMB_View_ResLot_List_Out_Tag(StreamTransformer former, FMB_View_ResLot_List_Out_Tag target)
        {
            former.writeMsgChar(target.h_status_value);
            former.writeMsgString(withoutSpace(target.h_msg_code));
            former.writeMsgString(withoutSpace(target.h_msg));
            former.writeMsgString(withoutSpace(target.h_field_msg));
            former.writeMsgString(withoutSpace(target.h_db_err_msg));
            former.writeMsgString(withoutSpace(target.next_lot_id));
            former.writeMsgInt(target.count);
            target._size_res_lot_list = (1000 >= target._size_res_lot_list ? target._size_res_lot_list : 1000);
            former.writeMsgInt(target._size_res_lot_list);
            for(int i = 0; i < target._size_res_lot_list; i++)
            {
                serialize_FMB_View_ResLot_List_Out_Tag_res_lot_list(former, target.res_lot_list[i]);
            }
        }

        public static void transform_FMB_View_ResLot_List_Out_Tag_res_lot_list(StreamTransformer former, ref FMB_View_ResLot_List_Out_Tag_res_lot_list source)
        {
            source.factory = deleteNull(former.readMsgString());
            source.res_id = deleteNull(former.readMsgString());
            source.lot_id = deleteNull(former.readMsgString());
            source.crr_id = deleteNull(former.readMsgString());
            source.event_id = deleteNull(former.readMsgString());
            source.mat_id = deleteNull(former.readMsgString());
            source.mat_ver = former.readMsgInt();
            source.flow = deleteNull(former.readMsgString());
            source.flow_seq_num = former.readMsgInt();
            source.oper = deleteNull(former.readMsgString());
            source.lot_type = former.readMsgChar();
            source.tran_time = deleteNull(former.readMsgString());
            source.qty1 = former.readMsgDouble();
            source.qty2 = former.readMsgDouble();
            source.qty3 = former.readMsgDouble();
            source.owner_code = deleteNull(former.readMsgString());
            source.create_code = deleteNull(former.readMsgString());
            source.lot_priority = former.readMsgChar();
            source.lot_status = deleteNull(former.readMsgString());
            source.hold_code = deleteNull(former.readMsgString());
            source.cmf_1 = deleteNull(former.readMsgString());
            source.cmf_2 = deleteNull(former.readMsgString());
            source.cmf_3 = deleteNull(former.readMsgString());
            source.cmf_4 = deleteNull(former.readMsgString());
            source.cmf_5 = deleteNull(former.readMsgString());
            source.cmf_6 = deleteNull(former.readMsgString());
            source.cmf_7 = deleteNull(former.readMsgString());
            source.cmf_8 = deleteNull(former.readMsgString());
            source.cmf_9 = deleteNull(former.readMsgString());
            source.cmf_10 = deleteNull(former.readMsgString());
            source.cmf_11 = deleteNull(former.readMsgString());
            source.cmf_12 = deleteNull(former.readMsgString());
            source.cmf_13 = deleteNull(former.readMsgString());
            source.cmf_14 = deleteNull(former.readMsgString());
            source.cmf_15 = deleteNull(former.readMsgString());
            source.cmf_16 = deleteNull(former.readMsgString());
            source.cmf_17 = deleteNull(former.readMsgString());
            source.cmf_18 = deleteNull(former.readMsgString());
            source.cmf_19 = deleteNull(former.readMsgString());
            source.cmf_20 = deleteNull(former.readMsgString());
            source.create_user_id = deleteNull(former.readMsgString());
            source.create_time = deleteNull(former.readMsgString());
            source.update_user_id = deleteNull(former.readMsgString());
            source.update_time = deleteNull(former.readMsgString());
        }

        public static void transform_FMB_View_ResLot_List_Out_Tag(StreamTransformer former, ref FMB_View_ResLot_List_Out_Tag source)
        {
            source.h_status_value = former.readMsgChar();
            source.h_msg_code = deleteNull(former.readMsgString());
            source.h_msg = deleteNull(former.readMsgString());
            source.h_field_msg = deleteNull(former.readMsgString());
            source.h_db_err_msg = deleteNull(former.readMsgString());
            source.next_lot_id = deleteNull(former.readMsgString());
            source.count = former.readMsgInt();
            source._size_res_lot_list = former.readMsgInt();
            source.res_lot_list = new FMB_View_ResLot_List_Out_Tag_res_lot_list[source._size_res_lot_list];
            for(int i = 0; i < source._size_res_lot_list; i++)
            {
                source.res_lot_list[i] = new FMB_View_ResLot_List_Out_Tag_res_lot_list();
                transform_FMB_View_ResLot_List_Out_Tag_res_lot_list(former, ref source.res_lot_list[i]);
            }
        }

        public static void serialize_FMB_View_Data_List_In_Tag(StreamTransformer former, FMB_View_Data_List_In_Tag target)
        {
            former.writeMsgString(withoutSpace(target.h_passport));
            former.writeMsgChar(target.h_language);
            former.writeMsgString(withoutSpace(target.h_factory));
            former.writeMsgString(withoutSpace(target.h_user_id));
            former.writeMsgString(withoutSpace(target.h_password));
            former.writeMsgChar(target.h_proc_step);
            former.writeMsgString(withoutSpace(target.table_name));
            former.writeMsgString(withoutSpace(target.next_key_1));
            former.writeMsgString(withoutSpace(target.next_key_2));
            former.writeMsgString(withoutSpace(target.next_key_3));
            former.writeMsgString(withoutSpace(target.next_key_4));
            former.writeMsgString(withoutSpace(target.next_key_5));
            former.writeMsgString(withoutSpace(target.next_key_6));
            former.writeMsgString(withoutSpace(target.next_key_7));
            former.writeMsgString(withoutSpace(target.next_key_8));
            former.writeMsgString(withoutSpace(target.next_key_9));
            former.writeMsgString(withoutSpace(target.next_key_10));
        }

        public static void transform_FMB_View_Data_List_In_Tag(StreamTransformer former, ref FMB_View_Data_List_In_Tag source)
        {
            source.h_passport = deleteNull(former.readMsgString());
            source.h_language = former.readMsgChar();
            source.h_factory = deleteNull(former.readMsgString());
            source.h_user_id = deleteNull(former.readMsgString());
            source.h_password = deleteNull(former.readMsgString());
            source.h_proc_step = former.readMsgChar();
            source.table_name = deleteNull(former.readMsgString());
            source.next_key_1 = deleteNull(former.readMsgString());
            source.next_key_2 = deleteNull(former.readMsgString());
            source.next_key_3 = deleteNull(former.readMsgString());
            source.next_key_4 = deleteNull(former.readMsgString());
            source.next_key_5 = deleteNull(former.readMsgString());
            source.next_key_6 = deleteNull(former.readMsgString());
            source.next_key_7 = deleteNull(former.readMsgString());
            source.next_key_8 = deleteNull(former.readMsgString());
            source.next_key_9 = deleteNull(former.readMsgString());
            source.next_key_10 = deleteNull(former.readMsgString());
        }

        public static void serialize_FMB_View_Data_List_Out_Tag_data_list(StreamTransformer former, FMB_View_Data_List_Out_Tag_data_list target)
        {
            former.writeMsgString(withoutSpace(target.key_1));
            former.writeMsgString(withoutSpace(target.key_2));
            former.writeMsgString(withoutSpace(target.key_3));
            former.writeMsgString(withoutSpace(target.key_4));
            former.writeMsgString(withoutSpace(target.key_5));
            former.writeMsgString(withoutSpace(target.key_6));
            former.writeMsgString(withoutSpace(target.key_7));
            former.writeMsgString(withoutSpace(target.key_8));
            former.writeMsgString(withoutSpace(target.key_9));
            former.writeMsgString(withoutSpace(target.key_10));
            former.writeMsgString(withoutSpace(target.data_1));
            former.writeMsgString(withoutSpace(target.data_2));
            former.writeMsgString(withoutSpace(target.data_3));
            former.writeMsgString(withoutSpace(target.data_4));
            former.writeMsgString(withoutSpace(target.data_5));
            former.writeMsgString(withoutSpace(target.data_6));
            former.writeMsgString(withoutSpace(target.data_7));
            former.writeMsgString(withoutSpace(target.data_8));
            former.writeMsgString(withoutSpace(target.data_9));
            former.writeMsgString(withoutSpace(target.data_10));
            former.writeMsgString(withoutSpace(target.create_user_id));
            former.writeMsgString(withoutSpace(target.create_time));
            former.writeMsgString(withoutSpace(target.update_user_id));
            former.writeMsgString(withoutSpace(target.update_time));
        }

        public static void serialize_FMB_View_Data_List_Out_Tag(StreamTransformer former, FMB_View_Data_List_Out_Tag target)
        {
            former.writeMsgChar(target.h_status_value);
            former.writeMsgString(withoutSpace(target.h_msg_code));
            former.writeMsgString(withoutSpace(target.h_msg));
            former.writeMsgString(withoutSpace(target.h_field_msg));
            former.writeMsgString(withoutSpace(target.h_db_err_msg));
            former.writeMsgString(withoutSpace(target.table_name));
            former.writeMsgString(withoutSpace(target.next_key_1));
            former.writeMsgString(withoutSpace(target.next_key_2));
            former.writeMsgString(withoutSpace(target.next_key_3));
            former.writeMsgString(withoutSpace(target.next_key_4));
            former.writeMsgString(withoutSpace(target.next_key_5));
            former.writeMsgString(withoutSpace(target.next_key_6));
            former.writeMsgString(withoutSpace(target.next_key_7));
            former.writeMsgString(withoutSpace(target.next_key_8));
            former.writeMsgString(withoutSpace(target.next_key_9));
            former.writeMsgString(withoutSpace(target.next_key_10));
            former.writeMsgInt(target.count);
            target._size_data_list = (1000 >= target._size_data_list ? target._size_data_list : 1000);
            former.writeMsgInt(target._size_data_list);
            for(int i = 0; i < target._size_data_list; i++)
            {
                serialize_FMB_View_Data_List_Out_Tag_data_list(former, target.data_list[i]);
            }
        }

        public static void transform_FMB_View_Data_List_Out_Tag_data_list(StreamTransformer former, ref FMB_View_Data_List_Out_Tag_data_list source)
        {
            source.key_1 = deleteNull(former.readMsgString());
            source.key_2 = deleteNull(former.readMsgString());
            source.key_3 = deleteNull(former.readMsgString());
            source.key_4 = deleteNull(former.readMsgString());
            source.key_5 = deleteNull(former.readMsgString());
            source.key_6 = deleteNull(former.readMsgString());
            source.key_7 = deleteNull(former.readMsgString());
            source.key_8 = deleteNull(former.readMsgString());
            source.key_9 = deleteNull(former.readMsgString());
            source.key_10 = deleteNull(former.readMsgString());
            source.data_1 = deleteNull(former.readMsgString());
            source.data_2 = deleteNull(former.readMsgString());
            source.data_3 = deleteNull(former.readMsgString());
            source.data_4 = deleteNull(former.readMsgString());
            source.data_5 = deleteNull(former.readMsgString());
            source.data_6 = deleteNull(former.readMsgString());
            source.data_7 = deleteNull(former.readMsgString());
            source.data_8 = deleteNull(former.readMsgString());
            source.data_9 = deleteNull(former.readMsgString());
            source.data_10 = deleteNull(former.readMsgString());
            source.create_user_id = deleteNull(former.readMsgString());
            source.create_time = deleteNull(former.readMsgString());
            source.update_user_id = deleteNull(former.readMsgString());
            source.update_time = deleteNull(former.readMsgString());
        }

        public static void transform_FMB_View_Data_List_Out_Tag(StreamTransformer former, ref FMB_View_Data_List_Out_Tag source)
        {
            source.h_status_value = former.readMsgChar();
            source.h_msg_code = deleteNull(former.readMsgString());
            source.h_msg = deleteNull(former.readMsgString());
            source.h_field_msg = deleteNull(former.readMsgString());
            source.h_db_err_msg = deleteNull(former.readMsgString());
            source.table_name = deleteNull(former.readMsgString());
            source.next_key_1 = deleteNull(former.readMsgString());
            source.next_key_2 = deleteNull(former.readMsgString());
            source.next_key_3 = deleteNull(former.readMsgString());
            source.next_key_4 = deleteNull(former.readMsgString());
            source.next_key_5 = deleteNull(former.readMsgString());
            source.next_key_6 = deleteNull(former.readMsgString());
            source.next_key_7 = deleteNull(former.readMsgString());
            source.next_key_8 = deleteNull(former.readMsgString());
            source.next_key_9 = deleteNull(former.readMsgString());
            source.next_key_10 = deleteNull(former.readMsgString());
            source.count = former.readMsgInt();
            source._size_data_list = former.readMsgInt();
            source.data_list = new FMB_View_Data_List_Out_Tag_data_list[source._size_data_list];
            for(int i = 0; i < source._size_data_list; i++)
            {
                source.data_list[i] = new FMB_View_Data_List_Out_Tag_data_list();
                transform_FMB_View_Data_List_Out_Tag_data_list(former, ref source.data_list[i]);
            }
        }

        public static void serialize_FMB_Event_Publish_Msg_In_Tag(StreamTransformer former, FMB_Event_Publish_Msg_In_Tag target)
        {
            former.writeMsgString(withoutSpace(target.h_passport));
            former.writeMsgChar(target.h_language);
            former.writeMsgString(withoutSpace(target.h_factory));
            former.writeMsgString(withoutSpace(target.h_user_id));
            former.writeMsgString(withoutSpace(target.h_password));
            former.writeMsgChar(target.h_proc_step);
            former.writeMsgString(withoutSpace(target.res_id));
            former.writeMsgString(withoutSpace(target.res_desc));
            former.writeMsgString(withoutSpace(target.res_type));
            former.writeMsgString(withoutSpace(target.res_grp_1));
            former.writeMsgString(withoutSpace(target.res_grp_2));
            former.writeMsgString(withoutSpace(target.res_grp_3));
            former.writeMsgString(withoutSpace(target.res_grp_4));
            former.writeMsgString(withoutSpace(target.res_grp_5));
            former.writeMsgString(withoutSpace(target.res_grp_6));
            former.writeMsgString(withoutSpace(target.res_grp_7));
            former.writeMsgString(withoutSpace(target.res_grp_8));
            former.writeMsgString(withoutSpace(target.res_grp_9));
            former.writeMsgString(withoutSpace(target.res_grp_10));
            former.writeMsgString(withoutSpace(target.res_cmf_1));
            former.writeMsgString(withoutSpace(target.res_cmf_2));
            former.writeMsgString(withoutSpace(target.res_cmf_3));
            former.writeMsgString(withoutSpace(target.res_cmf_4));
            former.writeMsgString(withoutSpace(target.res_cmf_5));
            former.writeMsgString(withoutSpace(target.res_cmf_6));
            former.writeMsgString(withoutSpace(target.res_cmf_7));
            former.writeMsgString(withoutSpace(target.res_cmf_8));
            former.writeMsgString(withoutSpace(target.res_cmf_9));
            former.writeMsgString(withoutSpace(target.res_cmf_10));
            former.writeMsgString(withoutSpace(target.res_cmf_11));
            former.writeMsgString(withoutSpace(target.res_cmf_12));
            former.writeMsgString(withoutSpace(target.res_cmf_13));
            former.writeMsgString(withoutSpace(target.res_cmf_14));
            former.writeMsgString(withoutSpace(target.res_cmf_15));
            former.writeMsgString(withoutSpace(target.res_cmf_16));
            former.writeMsgString(withoutSpace(target.res_cmf_17));
            former.writeMsgString(withoutSpace(target.res_cmf_18));
            former.writeMsgString(withoutSpace(target.res_cmf_19));
            former.writeMsgString(withoutSpace(target.res_cmf_20));
            former.writeMsgChar(target.use_fac_prt_flag);
            former.writeMsgString(withoutSpace(target.res_sts_prt_1));
            former.writeMsgString(withoutSpace(target.res_sts_prt_2));
            former.writeMsgString(withoutSpace(target.res_sts_prt_3));
            former.writeMsgString(withoutSpace(target.res_sts_prt_4));
            former.writeMsgString(withoutSpace(target.res_sts_prt_5));
            former.writeMsgString(withoutSpace(target.res_sts_prt_6));
            former.writeMsgString(withoutSpace(target.res_sts_prt_7));
            former.writeMsgString(withoutSpace(target.res_sts_prt_8));
            former.writeMsgString(withoutSpace(target.res_sts_prt_9));
            former.writeMsgString(withoutSpace(target.res_sts_prt_10));
            former.writeMsgString(withoutSpace(target.area_id));
            former.writeMsgString(withoutSpace(target.sub_area_id));
            former.writeMsgString(withoutSpace(target.res_location));
            former.writeMsgChar(target.proc_rule);
            former.writeMsgInt(target.max_proc_count);
            former.writeMsgString(withoutSpace(target.batch_cond_1));
            former.writeMsgString(withoutSpace(target.batch_cond_2));
            former.writeMsgChar(target.pm_sch_enable_flag);
            former.writeMsgChar(target.unit_base_st_flag);
            former.writeMsgChar(target.sec_chk_flag);
            former.writeMsgChar(target.delete_flag);
            former.writeMsgString(withoutSpace(target.delete_user_id));
            former.writeMsgString(withoutSpace(target.delete_time));
            former.writeMsgString(withoutSpace(target.create_user_id));
            former.writeMsgString(withoutSpace(target.create_time));
            former.writeMsgString(withoutSpace(target.update_user_id));
            former.writeMsgString(withoutSpace(target.update_time));
            former.writeMsgChar(target.res_up_down_flag);
            former.writeMsgString(withoutSpace(target.res_pri_sts));
            former.writeMsgString(withoutSpace(target.res_sts_1));
            former.writeMsgString(withoutSpace(target.res_sts_2));
            former.writeMsgString(withoutSpace(target.res_sts_3));
            former.writeMsgString(withoutSpace(target.res_sts_4));
            former.writeMsgString(withoutSpace(target.res_sts_5));
            former.writeMsgString(withoutSpace(target.res_sts_6));
            former.writeMsgString(withoutSpace(target.res_sts_7));
            former.writeMsgString(withoutSpace(target.res_sts_8));
            former.writeMsgString(withoutSpace(target.res_sts_9));
            former.writeMsgString(withoutSpace(target.res_sts_10));
            former.writeMsgString(withoutSpace(target.lot_id));
            former.writeMsgString(withoutSpace(target.sublot_id));
            former.writeMsgString(withoutSpace(target.crr_id));
            former.writeMsgString(withoutSpace(target.res_ctrl_mode));
            former.writeMsgString(withoutSpace(target.res_proc_mode));
            former.writeMsgString(withoutSpace(target.last_recipe_id));
            former.writeMsgInt(target.proc_count);
            former.writeMsgString(withoutSpace(target.last_start_time));
            former.writeMsgString(withoutSpace(target.last_end_time));
            former.writeMsgString(withoutSpace(target.last_down_time));
            former.writeMsgInt(target.last_down_hist_seq);
            former.writeMsgString(withoutSpace(target.last_event));
            former.writeMsgString(withoutSpace(target.last_event_time));
            former.writeMsgInt(target.last_active_hist_seq);
            former.writeMsgInt(target.last_hist_seq);
        }

        public static void transform_FMB_Event_Publish_Msg_In_Tag(StreamTransformer former, ref FMB_Event_Publish_Msg_In_Tag source)
        {
            source.h_passport = deleteNull(former.readMsgString());
            source.h_language = former.readMsgChar();
            source.h_factory = deleteNull(former.readMsgString());
            source.h_user_id = deleteNull(former.readMsgString());
            source.h_password = deleteNull(former.readMsgString());
            source.h_proc_step = former.readMsgChar();
            source.res_id = deleteNull(former.readMsgString());
            source.res_desc = deleteNull(former.readMsgString());
            source.res_type = deleteNull(former.readMsgString());
            source.res_grp_1 = deleteNull(former.readMsgString());
            source.res_grp_2 = deleteNull(former.readMsgString());
            source.res_grp_3 = deleteNull(former.readMsgString());
            source.res_grp_4 = deleteNull(former.readMsgString());
            source.res_grp_5 = deleteNull(former.readMsgString());
            source.res_grp_6 = deleteNull(former.readMsgString());
            source.res_grp_7 = deleteNull(former.readMsgString());
            source.res_grp_8 = deleteNull(former.readMsgString());
            source.res_grp_9 = deleteNull(former.readMsgString());
            source.res_grp_10 = deleteNull(former.readMsgString());
            source.res_cmf_1 = deleteNull(former.readMsgString());
            source.res_cmf_2 = deleteNull(former.readMsgString());
            source.res_cmf_3 = deleteNull(former.readMsgString());
            source.res_cmf_4 = deleteNull(former.readMsgString());
            source.res_cmf_5 = deleteNull(former.readMsgString());
            source.res_cmf_6 = deleteNull(former.readMsgString());
            source.res_cmf_7 = deleteNull(former.readMsgString());
            source.res_cmf_8 = deleteNull(former.readMsgString());
            source.res_cmf_9 = deleteNull(former.readMsgString());
            source.res_cmf_10 = deleteNull(former.readMsgString());
            source.res_cmf_11 = deleteNull(former.readMsgString());
            source.res_cmf_12 = deleteNull(former.readMsgString());
            source.res_cmf_13 = deleteNull(former.readMsgString());
            source.res_cmf_14 = deleteNull(former.readMsgString());
            source.res_cmf_15 = deleteNull(former.readMsgString());
            source.res_cmf_16 = deleteNull(former.readMsgString());
            source.res_cmf_17 = deleteNull(former.readMsgString());
            source.res_cmf_18 = deleteNull(former.readMsgString());
            source.res_cmf_19 = deleteNull(former.readMsgString());
            source.res_cmf_20 = deleteNull(former.readMsgString());
            source.use_fac_prt_flag = former.readMsgChar();
            source.res_sts_prt_1 = deleteNull(former.readMsgString());
            source.res_sts_prt_2 = deleteNull(former.readMsgString());
            source.res_sts_prt_3 = deleteNull(former.readMsgString());
            source.res_sts_prt_4 = deleteNull(former.readMsgString());
            source.res_sts_prt_5 = deleteNull(former.readMsgString());
            source.res_sts_prt_6 = deleteNull(former.readMsgString());
            source.res_sts_prt_7 = deleteNull(former.readMsgString());
            source.res_sts_prt_8 = deleteNull(former.readMsgString());
            source.res_sts_prt_9 = deleteNull(former.readMsgString());
            source.res_sts_prt_10 = deleteNull(former.readMsgString());
            source.area_id = deleteNull(former.readMsgString());
            source.sub_area_id = deleteNull(former.readMsgString());
            source.res_location = deleteNull(former.readMsgString());
            source.proc_rule = former.readMsgChar();
            source.max_proc_count = former.readMsgInt();
            source.batch_cond_1 = deleteNull(former.readMsgString());
            source.batch_cond_2 = deleteNull(former.readMsgString());
            source.pm_sch_enable_flag = former.readMsgChar();
            source.unit_base_st_flag = former.readMsgChar();
            source.sec_chk_flag = former.readMsgChar();
            source.delete_flag = former.readMsgChar();
            source.delete_user_id = deleteNull(former.readMsgString());
            source.delete_time = deleteNull(former.readMsgString());
            source.create_user_id = deleteNull(former.readMsgString());
            source.create_time = deleteNull(former.readMsgString());
            source.update_user_id = deleteNull(former.readMsgString());
            source.update_time = deleteNull(former.readMsgString());
            source.res_up_down_flag = former.readMsgChar();
            source.res_pri_sts = deleteNull(former.readMsgString());
            source.res_sts_1 = deleteNull(former.readMsgString());
            source.res_sts_2 = deleteNull(former.readMsgString());
            source.res_sts_3 = deleteNull(former.readMsgString());
            source.res_sts_4 = deleteNull(former.readMsgString());
            source.res_sts_5 = deleteNull(former.readMsgString());
            source.res_sts_6 = deleteNull(former.readMsgString());
            source.res_sts_7 = deleteNull(former.readMsgString());
            source.res_sts_8 = deleteNull(former.readMsgString());
            source.res_sts_9 = deleteNull(former.readMsgString());
            source.res_sts_10 = deleteNull(former.readMsgString());
            source.lot_id = deleteNull(former.readMsgString());
            source.sublot_id = deleteNull(former.readMsgString());
            source.crr_id = deleteNull(former.readMsgString());
            source.res_ctrl_mode = deleteNull(former.readMsgString());
            source.res_proc_mode = deleteNull(former.readMsgString());
            source.last_recipe_id = deleteNull(former.readMsgString());
            source.proc_count = former.readMsgInt();
            source.last_start_time = deleteNull(former.readMsgString());
            source.last_end_time = deleteNull(former.readMsgString());
            source.last_down_time = deleteNull(former.readMsgString());
            source.last_down_hist_seq = former.readMsgInt();
            source.last_event = deleteNull(former.readMsgString());
            source.last_event_time = deleteNull(former.readMsgString());
            source.last_active_hist_seq = former.readMsgInt();
            source.last_hist_seq = former.readMsgInt();
        }

        public static void serialize_FMB_View_User_List_In_Tag(StreamTransformer former, FMB_View_User_List_In_Tag target)
        {
            former.writeMsgString(withoutSpace(target.h_passport));
            former.writeMsgChar(target.h_language);
            former.writeMsgString(withoutSpace(target.h_factory));
            former.writeMsgString(withoutSpace(target.h_user_id));
            former.writeMsgString(withoutSpace(target.h_password));
            former.writeMsgChar(target.h_proc_step);
            former.writeMsgString(withoutSpace(target.user_group));
            former.writeMsgString(withoutSpace(target.user_id));
            former.writeMsgString(withoutSpace(target.next_user_id));
        }

        public static void transform_FMB_View_User_List_In_Tag(StreamTransformer former, ref FMB_View_User_List_In_Tag source)
        {
            source.h_passport = deleteNull(former.readMsgString());
            source.h_language = former.readMsgChar();
            source.h_factory = deleteNull(former.readMsgString());
            source.h_user_id = deleteNull(former.readMsgString());
            source.h_password = deleteNull(former.readMsgString());
            source.h_proc_step = former.readMsgChar();
            source.user_group = deleteNull(former.readMsgString());
            source.user_id = deleteNull(former.readMsgString());
            source.next_user_id = deleteNull(former.readMsgString());
        }

        public static void serialize_FMB_View_User_List_Out_Tag_user_id_list(StreamTransformer former, FMB_View_User_List_Out_Tag_user_id_list target)
        {
            former.writeMsgString(withoutSpace(target.user_id));
            former.writeMsgString(withoutSpace(target.user_desc));
            former.writeMsgString(withoutSpace(target.sec_grp_id));
        }

        public static void serialize_FMB_View_User_List_Out_Tag(StreamTransformer former, FMB_View_User_List_Out_Tag target)
        {
            former.writeMsgChar(target.h_status_value);
            former.writeMsgString(withoutSpace(target.h_msg_code));
            former.writeMsgString(withoutSpace(target.h_msg));
            former.writeMsgString(withoutSpace(target.h_field_msg));
            former.writeMsgString(withoutSpace(target.h_db_err_msg));
            former.writeMsgInt(target.count);
            former.writeMsgString(withoutSpace(target.next_user_id));
            target._size_user_id_list = (1000 >= target._size_user_id_list ? target._size_user_id_list : 1000);
            former.writeMsgInt(target._size_user_id_list);
            for(int i = 0; i < target._size_user_id_list; i++)
            {
                serialize_FMB_View_User_List_Out_Tag_user_id_list(former, target.user_id_list[i]);
            }
        }

        public static void transform_FMB_View_User_List_Out_Tag_user_id_list(StreamTransformer former, ref FMB_View_User_List_Out_Tag_user_id_list source)
        {
            source.user_id = deleteNull(former.readMsgString());
            source.user_desc = deleteNull(former.readMsgString());
            source.sec_grp_id = deleteNull(former.readMsgString());
        }

        public static void transform_FMB_View_User_List_Out_Tag(StreamTransformer former, ref FMB_View_User_List_Out_Tag source)
        {
            source.h_status_value = former.readMsgChar();
            source.h_msg_code = deleteNull(former.readMsgString());
            source.h_msg = deleteNull(former.readMsgString());
            source.h_field_msg = deleteNull(former.readMsgString());
            source.h_db_err_msg = deleteNull(former.readMsgString());
            source.count = former.readMsgInt();
            source.next_user_id = deleteNull(former.readMsgString());
            source._size_user_id_list = former.readMsgInt();
            source.user_id_list = new FMB_View_User_List_Out_Tag_user_id_list[source._size_user_id_list];
            for(int i = 0; i < source._size_user_id_list; i++)
            {
                source.user_id_list[i] = new FMB_View_User_List_Out_Tag_user_id_list();
                transform_FMB_View_User_List_Out_Tag_user_id_list(former, ref source.user_id_list[i]);
            }
        }

        public static void serialize_FMB_View_SecGrp_List_In_Tag(StreamTransformer former, FMB_View_SecGrp_List_In_Tag target)
        {
            former.writeMsgString(withoutSpace(target.h_passport));
            former.writeMsgChar(target.h_language);
            former.writeMsgString(withoutSpace(target.h_factory));
            former.writeMsgString(withoutSpace(target.h_user_id));
            former.writeMsgString(withoutSpace(target.h_password));
            former.writeMsgChar(target.h_proc_step);
            former.writeMsgString(withoutSpace(target.next_sec_grp_id));
        }

        public static void transform_FMB_View_SecGrp_List_In_Tag(StreamTransformer former, ref FMB_View_SecGrp_List_In_Tag source)
        {
            source.h_passport = deleteNull(former.readMsgString());
            source.h_language = former.readMsgChar();
            source.h_factory = deleteNull(former.readMsgString());
            source.h_user_id = deleteNull(former.readMsgString());
            source.h_password = deleteNull(former.readMsgString());
            source.h_proc_step = former.readMsgChar();
            source.next_sec_grp_id = deleteNull(former.readMsgString());
        }

        public static void serialize_FMB_View_SecGrp_List_Out_Tag_secgrp_list(StreamTransformer former, FMB_View_SecGrp_List_Out_Tag_secgrp_list target)
        {
            former.writeMsgString(withoutSpace(target.sec_grp_id));
            former.writeMsgString(withoutSpace(target.sec_grp_desc));
        }

        public static void serialize_FMB_View_SecGrp_List_Out_Tag(StreamTransformer former, FMB_View_SecGrp_List_Out_Tag target)
        {
            former.writeMsgChar(target.h_status_value);
            former.writeMsgString(withoutSpace(target.h_msg_code));
            former.writeMsgString(withoutSpace(target.h_msg));
            former.writeMsgString(withoutSpace(target.h_field_msg));
            former.writeMsgString(withoutSpace(target.h_db_err_msg));
            former.writeMsgString(withoutSpace(target.next_sec_grp_id));
            former.writeMsgInt(target.count);
            target._size_secgrp_list = (1000 >= target._size_secgrp_list ? target._size_secgrp_list : 1000);
            former.writeMsgInt(target._size_secgrp_list);
            for(int i = 0; i < target._size_secgrp_list; i++)
            {
                serialize_FMB_View_SecGrp_List_Out_Tag_secgrp_list(former, target.secgrp_list[i]);
            }
        }

        public static void transform_FMB_View_SecGrp_List_Out_Tag_secgrp_list(StreamTransformer former, ref FMB_View_SecGrp_List_Out_Tag_secgrp_list source)
        {
            source.sec_grp_id = deleteNull(former.readMsgString());
            source.sec_grp_desc = deleteNull(former.readMsgString());
        }

        public static void transform_FMB_View_SecGrp_List_Out_Tag(StreamTransformer former, ref FMB_View_SecGrp_List_Out_Tag source)
        {
            source.h_status_value = former.readMsgChar();
            source.h_msg_code = deleteNull(former.readMsgString());
            source.h_msg = deleteNull(former.readMsgString());
            source.h_field_msg = deleteNull(former.readMsgString());
            source.h_db_err_msg = deleteNull(former.readMsgString());
            source.next_sec_grp_id = deleteNull(former.readMsgString());
            source.count = former.readMsgInt();
            source._size_secgrp_list = former.readMsgInt();
            source.secgrp_list = new FMB_View_SecGrp_List_Out_Tag_secgrp_list[source._size_secgrp_list];
            for(int i = 0; i < source._size_secgrp_list; i++)
            {
                source.secgrp_list[i] = new FMB_View_SecGrp_List_Out_Tag_secgrp_list();
                transform_FMB_View_SecGrp_List_Out_Tag_secgrp_list(former, ref source.secgrp_list[i]);
            }
        }

        public static void serialize_FMB_View_ResDetail_In_Tag(StreamTransformer former, FMB_View_ResDetail_In_Tag target)
        {
            former.writeMsgString(withoutSpace(target.h_passport));
            former.writeMsgChar(target.h_language);
            former.writeMsgString(withoutSpace(target.h_factory));
            former.writeMsgString(withoutSpace(target.h_user_id));
            former.writeMsgString(withoutSpace(target.h_password));
            former.writeMsgChar(target.h_proc_step);
            former.writeMsgString(withoutSpace(target.next_res_id));
            former.writeMsgString(withoutSpace(target.res_type));
            former.writeMsgString(withoutSpace(target.res_grp));
            former.writeMsgString(withoutSpace(target.area_id));
            former.writeMsgString(withoutSpace(target.sub_area_id));
            former.writeMsgString(withoutSpace(target.filter));
            former.writeMsgChar(target.include_del_res);
            former.writeMsgChar(target.include_proc_lot_info);
        }

        public static void transform_FMB_View_ResDetail_In_Tag(StreamTransformer former, ref FMB_View_ResDetail_In_Tag source)
        {
            source.h_passport = deleteNull(former.readMsgString());
            source.h_language = former.readMsgChar();
            source.h_factory = deleteNull(former.readMsgString());
            source.h_user_id = deleteNull(former.readMsgString());
            source.h_password = deleteNull(former.readMsgString());
            source.h_proc_step = former.readMsgChar();
            source.next_res_id = deleteNull(former.readMsgString());
            source.res_type = deleteNull(former.readMsgString());
            source.res_grp = deleteNull(former.readMsgString());
            source.area_id = deleteNull(former.readMsgString());
            source.sub_area_id = deleteNull(former.readMsgString());
            source.filter = deleteNull(former.readMsgString());
            source.include_del_res = former.readMsgChar();
            source.include_proc_lot_info = former.readMsgChar();
        }

        public static void serialize_FMB_View_ResDetail_Out_Tag_res_list(StreamTransformer former, FMB_View_ResDetail_Out_Tag_res_list target)
        {
            former.writeMsgString(withoutSpace(target.factory));
            former.writeMsgString(withoutSpace(target.res_id));
            former.writeMsgString(withoutSpace(target.res_desc));
            former.writeMsgString(withoutSpace(target.res_type));
            former.writeMsgChar(target.use_fac_prt_flag);
            former.writeMsgString(withoutSpace(target.res_sts_prt_1));
            former.writeMsgString(withoutSpace(target.res_sts_prt_2));
            former.writeMsgString(withoutSpace(target.res_sts_prt_3));
            former.writeMsgString(withoutSpace(target.res_sts_prt_4));
            former.writeMsgString(withoutSpace(target.res_sts_prt_5));
            former.writeMsgString(withoutSpace(target.res_sts_prt_6));
            former.writeMsgString(withoutSpace(target.res_sts_prt_7));
            former.writeMsgString(withoutSpace(target.res_sts_prt_8));
            former.writeMsgString(withoutSpace(target.res_sts_prt_9));
            former.writeMsgString(withoutSpace(target.res_sts_prt_10));
            former.writeMsgString(withoutSpace(target.area_id));
            former.writeMsgString(withoutSpace(target.sub_area_id));
            former.writeMsgString(withoutSpace(target.res_location));
            former.writeMsgChar(target.proc_rule);
            former.writeMsgInt(target.max_proc_count);
            former.writeMsgInt(target.proc_count);
            former.writeMsgString(withoutSpace(target.batch_cond_1));
            former.writeMsgString(withoutSpace(target.batch_cond_2));
            former.writeMsgChar(target.pm_sch_enable_flag);
            former.writeMsgChar(target.unit_base_st_flag);
            former.writeMsgChar(target.sec_chk_flag);
            former.writeMsgChar(target.delete_flag);
            former.writeMsgString(withoutSpace(target.delete_user_id));
            former.writeMsgString(withoutSpace(target.delete_time));
            former.writeMsgString(withoutSpace(target.create_user_id));
            former.writeMsgString(withoutSpace(target.create_time));
            former.writeMsgString(withoutSpace(target.update_user_id));
            former.writeMsgString(withoutSpace(target.update_time));
            former.writeMsgChar(target.res_up_down_flag);
            former.writeMsgString(withoutSpace(target.res_pri_sts));
            former.writeMsgString(withoutSpace(target.res_sts_1));
            former.writeMsgString(withoutSpace(target.res_sts_2));
            former.writeMsgString(withoutSpace(target.res_sts_3));
            former.writeMsgString(withoutSpace(target.res_sts_4));
            former.writeMsgString(withoutSpace(target.res_sts_5));
            former.writeMsgString(withoutSpace(target.res_sts_6));
            former.writeMsgString(withoutSpace(target.res_sts_7));
            former.writeMsgString(withoutSpace(target.res_sts_8));
            former.writeMsgString(withoutSpace(target.res_sts_9));
            former.writeMsgString(withoutSpace(target.res_sts_10));
            former.writeMsgString(withoutSpace(target.lot_id));
            former.writeMsgString(withoutSpace(target.sublot_id));
            former.writeMsgString(withoutSpace(target.crr_id));
            former.writeMsgString(withoutSpace(target.res_ctrl_mode));
            former.writeMsgString(withoutSpace(target.res_proc_mode));
            former.writeMsgString(withoutSpace(target.last_recipe_id));
            former.writeMsgString(withoutSpace(target.last_start_time));
            former.writeMsgString(withoutSpace(target.last_end_time));
            former.writeMsgString(withoutSpace(target.last_down_time));
            former.writeMsgInt(target.last_down_hist_seq);
            former.writeMsgString(withoutSpace(target.last_event_id));
            former.writeMsgString(withoutSpace(target.last_event_time));
            former.writeMsgInt(target.last_active_hist_seq);
            former.writeMsgInt(target.last_hist_seq);
            former.writeMsgChar(target.res_tag_flag);
            former.writeMsgString(withoutSpace(target.layout_id));
            former.writeMsgInt(target.loc_x);
            former.writeMsgInt(target.loc_y);
            former.writeMsgInt(target.loc_width);
            former.writeMsgInt(target.loc_height);
            former.writeMsgString(withoutSpace(target.text));
            former.writeMsgInt(target.text_size);
            former.writeMsgInt(target.text_color);
            former.writeMsgChar(target.text_style);
            former.writeMsgInt(target.tag_type);
            former.writeMsgInt(target.back_color);
            former.writeMsgString(withoutSpace(target.loc_create_user_id));
            former.writeMsgString(withoutSpace(target.loc_create_time));
            former.writeMsgString(withoutSpace(target.loc_update_user_id));
            former.writeMsgString(withoutSpace(target.loc_update_time));
            former.writeMsgInt(target.seq);
        }

        public static void serialize_FMB_View_ResDetail_Out_Tag(StreamTransformer former, FMB_View_ResDetail_Out_Tag target)
        {
            former.writeMsgChar(target.h_status_value);
            former.writeMsgString(withoutSpace(target.h_msg_code));
            former.writeMsgString(withoutSpace(target.h_msg));
            former.writeMsgString(withoutSpace(target.h_field_msg));
            former.writeMsgString(withoutSpace(target.h_db_err_msg));
            former.writeMsgInt(target.count);
            former.writeMsgString(withoutSpace(target.next_res_id));
            target._size_res_list = (200 >= target._size_res_list ? target._size_res_list : 200);
            former.writeMsgInt(target._size_res_list);
            for(int i = 0; i < target._size_res_list; i++)
            {
                serialize_FMB_View_ResDetail_Out_Tag_res_list(former, target.res_list[i]);
            }
        }

        public static void transform_FMB_View_ResDetail_Out_Tag_res_list(StreamTransformer former, ref FMB_View_ResDetail_Out_Tag_res_list source)
        {
            source.factory = deleteNull(former.readMsgString());
            source.res_id = deleteNull(former.readMsgString());
            source.res_desc = deleteNull(former.readMsgString());
            source.res_type = deleteNull(former.readMsgString());
            source.use_fac_prt_flag = former.readMsgChar();
            source.res_sts_prt_1 = deleteNull(former.readMsgString());
            source.res_sts_prt_2 = deleteNull(former.readMsgString());
            source.res_sts_prt_3 = deleteNull(former.readMsgString());
            source.res_sts_prt_4 = deleteNull(former.readMsgString());
            source.res_sts_prt_5 = deleteNull(former.readMsgString());
            source.res_sts_prt_6 = deleteNull(former.readMsgString());
            source.res_sts_prt_7 = deleteNull(former.readMsgString());
            source.res_sts_prt_8 = deleteNull(former.readMsgString());
            source.res_sts_prt_9 = deleteNull(former.readMsgString());
            source.res_sts_prt_10 = deleteNull(former.readMsgString());
            source.area_id = deleteNull(former.readMsgString());
            source.sub_area_id = deleteNull(former.readMsgString());
            source.res_location = deleteNull(former.readMsgString());
            source.proc_rule = former.readMsgChar();
            source.max_proc_count = former.readMsgInt();
            source.proc_count = former.readMsgInt();
            source.batch_cond_1 = deleteNull(former.readMsgString());
            source.batch_cond_2 = deleteNull(former.readMsgString());
            source.pm_sch_enable_flag = former.readMsgChar();
            source.unit_base_st_flag = former.readMsgChar();
            source.sec_chk_flag = former.readMsgChar();
            source.delete_flag = former.readMsgChar();
            source.delete_user_id = deleteNull(former.readMsgString());
            source.delete_time = deleteNull(former.readMsgString());
            source.create_user_id = deleteNull(former.readMsgString());
            source.create_time = deleteNull(former.readMsgString());
            source.update_user_id = deleteNull(former.readMsgString());
            source.update_time = deleteNull(former.readMsgString());
            source.res_up_down_flag = former.readMsgChar();
            source.res_pri_sts = deleteNull(former.readMsgString());
            source.res_sts_1 = deleteNull(former.readMsgString());
            source.res_sts_2 = deleteNull(former.readMsgString());
            source.res_sts_3 = deleteNull(former.readMsgString());
            source.res_sts_4 = deleteNull(former.readMsgString());
            source.res_sts_5 = deleteNull(former.readMsgString());
            source.res_sts_6 = deleteNull(former.readMsgString());
            source.res_sts_7 = deleteNull(former.readMsgString());
            source.res_sts_8 = deleteNull(former.readMsgString());
            source.res_sts_9 = deleteNull(former.readMsgString());
            source.res_sts_10 = deleteNull(former.readMsgString());
            source.lot_id = deleteNull(former.readMsgString());
            source.sublot_id = deleteNull(former.readMsgString());
            source.crr_id = deleteNull(former.readMsgString());
            source.res_ctrl_mode = deleteNull(former.readMsgString());
            source.res_proc_mode = deleteNull(former.readMsgString());
            source.last_recipe_id = deleteNull(former.readMsgString());
            source.last_start_time = deleteNull(former.readMsgString());
            source.last_end_time = deleteNull(former.readMsgString());
            source.last_down_time = deleteNull(former.readMsgString());
            source.last_down_hist_seq = former.readMsgInt();
            source.last_event_id = deleteNull(former.readMsgString());
            source.last_event_time = deleteNull(former.readMsgString());
            source.last_active_hist_seq = former.readMsgInt();
            source.last_hist_seq = former.readMsgInt();
            source.res_tag_flag = former.readMsgChar();
            source.layout_id = deleteNull(former.readMsgString());
            source.loc_x = former.readMsgInt();
            source.loc_y = former.readMsgInt();
            source.loc_width = former.readMsgInt();
            source.loc_height = former.readMsgInt();
            source.text = deleteNull(former.readMsgString());
            source.text_size = former.readMsgInt();
            source.text_color = former.readMsgInt();
            source.text_style = former.readMsgChar();
            source.tag_type = former.readMsgInt();
            source.back_color = former.readMsgInt();
            source.loc_create_user_id = deleteNull(former.readMsgString());
            source.loc_create_time = deleteNull(former.readMsgString());
            source.loc_update_user_id = deleteNull(former.readMsgString());
            source.loc_update_time = deleteNull(former.readMsgString());
            source.seq = former.readMsgInt();
        }

        public static void transform_FMB_View_ResDetail_Out_Tag(StreamTransformer former, ref FMB_View_ResDetail_Out_Tag source)
        {
            source.h_status_value = former.readMsgChar();
            source.h_msg_code = deleteNull(former.readMsgString());
            source.h_msg = deleteNull(former.readMsgString());
            source.h_field_msg = deleteNull(former.readMsgString());
            source.h_db_err_msg = deleteNull(former.readMsgString());
            source.count = former.readMsgInt();
            source.next_res_id = deleteNull(former.readMsgString());
            source._size_res_list = former.readMsgInt();
            source.res_list = new FMB_View_ResDetail_Out_Tag_res_list[source._size_res_list];
            for(int i = 0; i < source._size_res_list; i++)
            {
                source.res_list[i] = new FMB_View_ResDetail_Out_Tag_res_list();
                transform_FMB_View_ResDetail_Out_Tag_res_list(former, ref source.res_list[i]);
            }
        }

        public static void serialize_FMB_View_Attach_Character_List_In_Tag(StreamTransformer former, FMB_View_Attach_Character_List_In_Tag target)
        {
            former.writeMsgString(withoutSpace(target.h_passport));
            former.writeMsgChar(target.h_language);
            former.writeMsgString(withoutSpace(target.h_factory));
            former.writeMsgString(withoutSpace(target.h_user_id));
            former.writeMsgString(withoutSpace(target.h_password));
            former.writeMsgChar(target.h_proc_step);
            former.writeMsgString(withoutSpace(target.col_set_id));
            former.writeMsgInt(target.col_set_version);
            former.writeMsgString(withoutSpace(target.next_char_id));
        }

        public static void transform_FMB_View_Attach_Character_List_In_Tag(StreamTransformer former, ref FMB_View_Attach_Character_List_In_Tag source)
        {
            source.h_passport = deleteNull(former.readMsgString());
            source.h_language = former.readMsgChar();
            source.h_factory = deleteNull(former.readMsgString());
            source.h_user_id = deleteNull(former.readMsgString());
            source.h_password = deleteNull(former.readMsgString());
            source.h_proc_step = former.readMsgChar();
            source.col_set_id = deleteNull(former.readMsgString());
            source.col_set_version = former.readMsgInt();
            source.next_char_id = deleteNull(former.readMsgString());
        }

        public static void serialize_FMB_View_Attach_Character_List_Out_Tag_attach_character_list_unit_list(StreamTransformer former, FMB_View_Attach_Character_List_Out_Tag_attach_character_list_unit_list target)
        {
            former.writeMsgInt(target.unit_seq_num);
            former.writeMsgChar(target.null_flag);
            former.writeMsgString(withoutSpace(target.def_unit_id));
        }

        public static void serialize_FMB_View_Attach_Character_List_Out_Tag_attach_character_list(StreamTransformer former, FMB_View_Attach_Character_List_Out_Tag_attach_character_list target)
        {
            former.writeMsgString(withoutSpace(target.col_set_id));
            former.writeMsgInt(target.col_set_version);
            former.writeMsgString(withoutSpace(target.char_id));
            former.writeMsgString(withoutSpace(target.char_desc));
            former.writeMsgInt(target.seq_num);
            former.writeMsgChar(target.value_type);
            former.writeMsgInt(target.unit_count);
            former.writeMsgInt(target.value_count);
            former.writeMsgInt(target.display_precision);
            former.writeMsgString(withoutSpace(target.value_tbl));
            former.writeMsgString(withoutSpace(target.def_value));
            former.writeMsgChar(target.opt_input_flag);
            former.writeMsgChar(target.blank_rec_save_flag);
            former.writeMsgChar(target.derived_param_flag);
            former.writeMsgString(withoutSpace(target.derived_parameter));
            former.writeMsgChar(target.def_unit_flag);
            former.writeMsgChar(target.def_unit_ovr_flag);
            former.writeMsgString(withoutSpace(target.unit_tbl));
            former.writeMsgChar(target.spec_type);
            former.writeMsgInt(target.spec_out_count);
            former.writeMsgString(withoutSpace(target.target_value));
            former.writeMsgString(withoutSpace(target.upper_spec_limit));
            former.writeMsgString(withoutSpace(target.lower_spec_limit));
            former.writeMsgString(withoutSpace(target.upper_warn_limit));
            former.writeMsgString(withoutSpace(target.lower_warn_limit));
            former.writeMsgString(withoutSpace(target.upper_cust_limit));
            former.writeMsgString(withoutSpace(target.lower_cust_limit));
            former.writeMsgString(withoutSpace(target.spec_info));
            former.writeMsgString(withoutSpace(target.spec_out_alarm));
            former.writeMsgString(withoutSpace(target.warn_out_alarm));
            former.writeMsgString(withoutSpace(target.create_user_id));
            former.writeMsgString(withoutSpace(target.create_time));
            former.writeMsgString(withoutSpace(target.update_user_id));
            former.writeMsgString(withoutSpace(target.update_time));
            former.writeMsgInt(target.unit_list_count);
            target._size_unit_list = (500 >= target._size_unit_list ? target._size_unit_list : 500);
            former.writeMsgInt(target._size_unit_list);
            for(int i = 0; i < target._size_unit_list; i++)
            {
                serialize_FMB_View_Attach_Character_List_Out_Tag_attach_character_list_unit_list(former, target.unit_list[i]);
            }
        }

        public static void serialize_FMB_View_Attach_Character_List_Out_Tag(StreamTransformer former, FMB_View_Attach_Character_List_Out_Tag target)
        {
            former.writeMsgChar(target.h_status_value);
            former.writeMsgString(withoutSpace(target.h_msg_code));
            former.writeMsgString(withoutSpace(target.h_msg));
            former.writeMsgString(withoutSpace(target.h_field_msg));
            former.writeMsgString(withoutSpace(target.h_db_err_msg));
            former.writeMsgInt(target.count);
            former.writeMsgString(withoutSpace(target.next_char_id));
            target._size_attach_character_list = (500 >= target._size_attach_character_list ? target._size_attach_character_list : 500);
            former.writeMsgInt(target._size_attach_character_list);
            for(int i = 0; i < target._size_attach_character_list; i++)
            {
                serialize_FMB_View_Attach_Character_List_Out_Tag_attach_character_list(former, target.attach_character_list[i]);
            }
        }

        public static void transform_FMB_View_Attach_Character_List_Out_Tag_attach_character_list_unit_list(StreamTransformer former, ref FMB_View_Attach_Character_List_Out_Tag_attach_character_list_unit_list source)
        {
            source.unit_seq_num = former.readMsgInt();
            source.null_flag = former.readMsgChar();
            source.def_unit_id = deleteNull(former.readMsgString());
        }

        public static void transform_FMB_View_Attach_Character_List_Out_Tag_attach_character_list(StreamTransformer former, ref FMB_View_Attach_Character_List_Out_Tag_attach_character_list source)
        {
            source.col_set_id = deleteNull(former.readMsgString());
            source.col_set_version = former.readMsgInt();
            source.char_id = deleteNull(former.readMsgString());
            source.char_desc = deleteNull(former.readMsgString());
            source.seq_num = former.readMsgInt();
            source.value_type = former.readMsgChar();
            source.unit_count = former.readMsgInt();
            source.value_count = former.readMsgInt();
            source.display_precision = former.readMsgInt();
            source.value_tbl = deleteNull(former.readMsgString());
            source.def_value = deleteNull(former.readMsgString());
            source.opt_input_flag = former.readMsgChar();
            source.blank_rec_save_flag = former.readMsgChar();
            source.derived_param_flag = former.readMsgChar();
            source.derived_parameter = deleteNull(former.readMsgString());
            source.def_unit_flag = former.readMsgChar();
            source.def_unit_ovr_flag = former.readMsgChar();
            source.unit_tbl = deleteNull(former.readMsgString());
            source.spec_type = former.readMsgChar();
            source.spec_out_count = former.readMsgInt();
            source.target_value = deleteNull(former.readMsgString());
            source.upper_spec_limit = deleteNull(former.readMsgString());
            source.lower_spec_limit = deleteNull(former.readMsgString());
            source.upper_warn_limit = deleteNull(former.readMsgString());
            source.lower_warn_limit = deleteNull(former.readMsgString());
            source.upper_cust_limit = deleteNull(former.readMsgString());
            source.lower_cust_limit = deleteNull(former.readMsgString());
            source.spec_info = deleteNull(former.readMsgString());
            source.spec_out_alarm = deleteNull(former.readMsgString());
            source.warn_out_alarm = deleteNull(former.readMsgString());
            source.create_user_id = deleteNull(former.readMsgString());
            source.create_time = deleteNull(former.readMsgString());
            source.update_user_id = deleteNull(former.readMsgString());
            source.update_time = deleteNull(former.readMsgString());
            source.unit_list_count = former.readMsgInt();
            source._size_unit_list = former.readMsgInt();
            source.unit_list = new FMB_View_Attach_Character_List_Out_Tag_attach_character_list_unit_list[source._size_unit_list];
            for(int i = 0; i < source._size_unit_list; i++)
            {
                source.unit_list[i] = new FMB_View_Attach_Character_List_Out_Tag_attach_character_list_unit_list();
                transform_FMB_View_Attach_Character_List_Out_Tag_attach_character_list_unit_list(former, ref source.unit_list[i]);
            }
        }

        public static void transform_FMB_View_Attach_Character_List_Out_Tag(StreamTransformer former, ref FMB_View_Attach_Character_List_Out_Tag source)
        {
            source.h_status_value = former.readMsgChar();
            source.h_msg_code = deleteNull(former.readMsgString());
            source.h_msg = deleteNull(former.readMsgString());
            source.h_field_msg = deleteNull(former.readMsgString());
            source.h_db_err_msg = deleteNull(former.readMsgString());
            source.count = former.readMsgInt();
            source.next_char_id = deleteNull(former.readMsgString());
            source._size_attach_character_list = former.readMsgInt();
            source.attach_character_list = new FMB_View_Attach_Character_List_Out_Tag_attach_character_list[source._size_attach_character_list];
            for(int i = 0; i < source._size_attach_character_list; i++)
            {
                source.attach_character_list[i] = new FMB_View_Attach_Character_List_Out_Tag_attach_character_list();
                transform_FMB_View_Attach_Character_List_Out_Tag_attach_character_list(former, ref source.attach_character_list[i]);
            }
        }

        public static void serialize_FMB_View_Default_Unit_List_In_Tag_unit_list(StreamTransformer former, FMB_View_Default_Unit_List_In_Tag_unit_list target)
        {
            former.writeMsgInt(target.unit_count);
        }

        public static void serialize_FMB_View_Default_Unit_List_In_Tag(StreamTransformer former, FMB_View_Default_Unit_List_In_Tag target)
        {
            former.writeMsgString(withoutSpace(target.h_passport));
            former.writeMsgChar(target.h_language);
            former.writeMsgString(withoutSpace(target.h_factory));
            former.writeMsgString(withoutSpace(target.h_user_id));
            former.writeMsgString(withoutSpace(target.h_password));
            former.writeMsgChar(target.h_proc_step);
            former.writeMsgString(withoutSpace(target.col_set_id));
            former.writeMsgInt(target.col_set_version);
            former.writeMsgInt(target.count);
            former.writeMsgString(withoutSpace(target.char_id));
            target._size_unit_list = (500 >= target._size_unit_list ? target._size_unit_list : 500);
            former.writeMsgInt(target._size_unit_list);
            for(int i = 0; i < target._size_unit_list; i++)
            {
                serialize_FMB_View_Default_Unit_List_In_Tag_unit_list(former, target.unit_list[i]);
            }
        }

        public static void transform_FMB_View_Default_Unit_List_In_Tag_unit_list(StreamTransformer former, ref FMB_View_Default_Unit_List_In_Tag_unit_list source)
        {
            source.unit_count = former.readMsgInt();
        }

        public static void transform_FMB_View_Default_Unit_List_In_Tag(StreamTransformer former, ref FMB_View_Default_Unit_List_In_Tag source)
        {
            source.h_passport = deleteNull(former.readMsgString());
            source.h_language = former.readMsgChar();
            source.h_factory = deleteNull(former.readMsgString());
            source.h_user_id = deleteNull(former.readMsgString());
            source.h_password = deleteNull(former.readMsgString());
            source.h_proc_step = former.readMsgChar();
            source.col_set_id = deleteNull(former.readMsgString());
            source.col_set_version = former.readMsgInt();
            source.count = former.readMsgInt();
            source.char_id = deleteNull(former.readMsgString());
            source._size_unit_list = former.readMsgInt();
            source.unit_list = new FMB_View_Default_Unit_List_In_Tag_unit_list[source._size_unit_list];
            for(int i = 0; i < source._size_unit_list; i++)
            {
                source.unit_list[i] = new FMB_View_Default_Unit_List_In_Tag_unit_list();
                transform_FMB_View_Default_Unit_List_In_Tag_unit_list(former, ref source.unit_list[i]);
            }
        }

        public static void serialize_FMB_View_Default_Unit_List_Out_Tag_unit_list(StreamTransformer former, FMB_View_Default_Unit_List_Out_Tag_unit_list target)
        {
            former.writeMsgInt(target.unit_seq_num);
            former.writeMsgChar(target.null_flag);
            former.writeMsgString(withoutSpace(target.def_unit_id));
            former.writeMsgString(withoutSpace(target.create_user_id));
            former.writeMsgString(withoutSpace(target.create_time));
        }

        public static void serialize_FMB_View_Default_Unit_List_Out_Tag(StreamTransformer former, FMB_View_Default_Unit_List_Out_Tag target)
        {
            former.writeMsgChar(target.h_status_value);
            former.writeMsgString(withoutSpace(target.h_msg_code));
            former.writeMsgString(withoutSpace(target.h_msg));
            former.writeMsgString(withoutSpace(target.h_field_msg));
            former.writeMsgString(withoutSpace(target.h_db_err_msg));
            former.writeMsgString(withoutSpace(target.char_id));
            former.writeMsgInt(target.unit_count);
            target._size_unit_list = (500 >= target._size_unit_list ? target._size_unit_list : 500);
            former.writeMsgInt(target._size_unit_list);
            for(int i = 0; i < target._size_unit_list; i++)
            {
                serialize_FMB_View_Default_Unit_List_Out_Tag_unit_list(former, target.unit_list[i]);
            }
        }

        public static void transform_FMB_View_Default_Unit_List_Out_Tag_unit_list(StreamTransformer former, ref FMB_View_Default_Unit_List_Out_Tag_unit_list source)
        {
            source.unit_seq_num = former.readMsgInt();
            source.null_flag = former.readMsgChar();
            source.def_unit_id = deleteNull(former.readMsgString());
            source.create_user_id = deleteNull(former.readMsgString());
            source.create_time = deleteNull(former.readMsgString());
        }

        public static void transform_FMB_View_Default_Unit_List_Out_Tag(StreamTransformer former, ref FMB_View_Default_Unit_List_Out_Tag source)
        {
            source.h_status_value = former.readMsgChar();
            source.h_msg_code = deleteNull(former.readMsgString());
            source.h_msg = deleteNull(former.readMsgString());
            source.h_field_msg = deleteNull(former.readMsgString());
            source.h_db_err_msg = deleteNull(former.readMsgString());
            source.char_id = deleteNull(former.readMsgString());
            source.unit_count = former.readMsgInt();
            source._size_unit_list = former.readMsgInt();
            source.unit_list = new FMB_View_Default_Unit_List_Out_Tag_unit_list[source._size_unit_list];
            for(int i = 0; i < source._size_unit_list; i++)
            {
                source.unit_list[i] = new FMB_View_Default_Unit_List_Out_Tag_unit_list();
                transform_FMB_View_Default_Unit_List_Out_Tag_unit_list(former, ref source.unit_list[i]);
            }
        }

        public static void serialize_FMB_View_Event_In_Tag(StreamTransformer former, FMB_View_Event_In_Tag target)
        {
            former.writeMsgString(withoutSpace(target.h_passport));
            former.writeMsgChar(target.h_language);
            former.writeMsgString(withoutSpace(target.h_user_id));
            former.writeMsgString(withoutSpace(target.h_password));
            former.writeMsgChar(target.h_proc_step);
            former.writeMsgString(withoutSpace(target.h_factory));
            former.writeMsgString(withoutSpace(target.event_id));
        }

        public static void transform_FMB_View_Event_In_Tag(StreamTransformer former, ref FMB_View_Event_In_Tag source)
        {
            source.h_passport = deleteNull(former.readMsgString());
            source.h_language = former.readMsgChar();
            source.h_user_id = deleteNull(former.readMsgString());
            source.h_password = deleteNull(former.readMsgString());
            source.h_proc_step = former.readMsgChar();
            source.h_factory = deleteNull(former.readMsgString());
            source.event_id = deleteNull(former.readMsgString());
        }

        public static void serialize_FMB_View_Event_Out_Tag(StreamTransformer former, FMB_View_Event_Out_Tag target)
        {
            former.writeMsgChar(target.h_status_value);
            former.writeMsgString(withoutSpace(target.h_msg_code));
            former.writeMsgString(withoutSpace(target.h_msg));
            former.writeMsgString(withoutSpace(target.h_field_msg));
            former.writeMsgString(withoutSpace(target.h_db_err_msg));
            former.writeMsgString(withoutSpace(target.event_id));
            former.writeMsgString(withoutSpace(target.event_desc));
            former.writeMsgString(withoutSpace(target.event_grp_1));
            former.writeMsgString(withoutSpace(target.event_grp_2));
            former.writeMsgString(withoutSpace(target.event_grp_3));
            former.writeMsgString(withoutSpace(target.event_grp_4));
            former.writeMsgString(withoutSpace(target.event_grp_5));
            former.writeMsgString(withoutSpace(target.event_grp_6));
            former.writeMsgString(withoutSpace(target.event_grp_7));
            former.writeMsgString(withoutSpace(target.event_grp_8));
            former.writeMsgString(withoutSpace(target.event_grp_9));
            former.writeMsgString(withoutSpace(target.event_grp_10));
            former.writeMsgChar(target.system_flag);
            former.writeMsgChar(target.chk_up_down_flag);
            former.writeMsgChar(target.chk_up_down);
            former.writeMsgChar(target.chg_up_down_flag);
            former.writeMsgChar(target.chg_up_down);
            former.writeMsgChar(target.ovr_up_down_flag);
            former.writeMsgChar(target.chk_pri_sts_flag);
            former.writeMsgString(withoutSpace(target.chk_pri_sts));
            former.writeMsgChar(target.chg_pri_sts_flag);
            former.writeMsgString(withoutSpace(target.chg_pri_sts));
            former.writeMsgChar(target.ovr_pri_sts_flag);
            former.writeMsgString(withoutSpace(target.tbl_pri_sts));
            former.writeMsgChar(target.chk_flag_1);
            former.writeMsgChar(target.chk_flag_2);
            former.writeMsgChar(target.chk_flag_3);
            former.writeMsgChar(target.chk_flag_4);
            former.writeMsgChar(target.chk_flag_5);
            former.writeMsgChar(target.chk_flag_6);
            former.writeMsgChar(target.chk_flag_7);
            former.writeMsgChar(target.chk_flag_8);
            former.writeMsgChar(target.chk_flag_9);
            former.writeMsgChar(target.chk_flag_10);
            former.writeMsgString(withoutSpace(target.chk_sts_1));
            former.writeMsgString(withoutSpace(target.chk_sts_2));
            former.writeMsgString(withoutSpace(target.chk_sts_3));
            former.writeMsgString(withoutSpace(target.chk_sts_4));
            former.writeMsgString(withoutSpace(target.chk_sts_5));
            former.writeMsgString(withoutSpace(target.chk_sts_6));
            former.writeMsgString(withoutSpace(target.chk_sts_7));
            former.writeMsgString(withoutSpace(target.chk_sts_8));
            former.writeMsgString(withoutSpace(target.chk_sts_9));
            former.writeMsgString(withoutSpace(target.chk_sts_10));
            former.writeMsgChar(target.chg_flag_1);
            former.writeMsgChar(target.chg_flag_2);
            former.writeMsgChar(target.chg_flag_3);
            former.writeMsgChar(target.chg_flag_4);
            former.writeMsgChar(target.chg_flag_5);
            former.writeMsgChar(target.chg_flag_6);
            former.writeMsgChar(target.chg_flag_7);
            former.writeMsgChar(target.chg_flag_8);
            former.writeMsgChar(target.chg_flag_9);
            former.writeMsgChar(target.chg_flag_10);
            former.writeMsgString(withoutSpace(target.chg_sts_1));
            former.writeMsgString(withoutSpace(target.chg_sts_2));
            former.writeMsgString(withoutSpace(target.chg_sts_3));
            former.writeMsgString(withoutSpace(target.chg_sts_4));
            former.writeMsgString(withoutSpace(target.chg_sts_5));
            former.writeMsgString(withoutSpace(target.chg_sts_6));
            former.writeMsgString(withoutSpace(target.chg_sts_7));
            former.writeMsgString(withoutSpace(target.chg_sts_8));
            former.writeMsgString(withoutSpace(target.chg_sts_9));
            former.writeMsgString(withoutSpace(target.chg_sts_10));
            former.writeMsgString(withoutSpace(target.tbl_1));
            former.writeMsgString(withoutSpace(target.tbl_2));
            former.writeMsgString(withoutSpace(target.tbl_3));
            former.writeMsgString(withoutSpace(target.tbl_4));
            former.writeMsgString(withoutSpace(target.tbl_5));
            former.writeMsgString(withoutSpace(target.tbl_6));
            former.writeMsgString(withoutSpace(target.tbl_7));
            former.writeMsgString(withoutSpace(target.tbl_8));
            former.writeMsgString(withoutSpace(target.tbl_9));
            former.writeMsgString(withoutSpace(target.tbl_10));
            former.writeMsgString(withoutSpace(target.col_set_id));
            former.writeMsgChar(target.alarm_flag);
            former.writeMsgString(withoutSpace(target.alarm_msg_id));
            former.writeMsgString(withoutSpace(target.create_user_id));
            former.writeMsgString(withoutSpace(target.create_time));
            former.writeMsgString(withoutSpace(target.update_user_id));
            former.writeMsgString(withoutSpace(target.update_time));
            former.writeMsgString(withoutSpace(target.chart_id));
            former.writeMsgChar(target.chart_flag);
        }

        public static void transform_FMB_View_Event_Out_Tag(StreamTransformer former, ref FMB_View_Event_Out_Tag source)
        {
            source.h_status_value = former.readMsgChar();
            source.h_msg_code = deleteNull(former.readMsgString());
            source.h_msg = deleteNull(former.readMsgString());
            source.h_field_msg = deleteNull(former.readMsgString());
            source.h_db_err_msg = deleteNull(former.readMsgString());
            source.event_id = deleteNull(former.readMsgString());
            source.event_desc = deleteNull(former.readMsgString());
            source.event_grp_1 = deleteNull(former.readMsgString());
            source.event_grp_2 = deleteNull(former.readMsgString());
            source.event_grp_3 = deleteNull(former.readMsgString());
            source.event_grp_4 = deleteNull(former.readMsgString());
            source.event_grp_5 = deleteNull(former.readMsgString());
            source.event_grp_6 = deleteNull(former.readMsgString());
            source.event_grp_7 = deleteNull(former.readMsgString());
            source.event_grp_8 = deleteNull(former.readMsgString());
            source.event_grp_9 = deleteNull(former.readMsgString());
            source.event_grp_10 = deleteNull(former.readMsgString());
            source.system_flag = former.readMsgChar();
            source.chk_up_down_flag = former.readMsgChar();
            source.chk_up_down = former.readMsgChar();
            source.chg_up_down_flag = former.readMsgChar();
            source.chg_up_down = former.readMsgChar();
            source.ovr_up_down_flag = former.readMsgChar();
            source.chk_pri_sts_flag = former.readMsgChar();
            source.chk_pri_sts = deleteNull(former.readMsgString());
            source.chg_pri_sts_flag = former.readMsgChar();
            source.chg_pri_sts = deleteNull(former.readMsgString());
            source.ovr_pri_sts_flag = former.readMsgChar();
            source.tbl_pri_sts = deleteNull(former.readMsgString());
            source.chk_flag_1 = former.readMsgChar();
            source.chk_flag_2 = former.readMsgChar();
            source.chk_flag_3 = former.readMsgChar();
            source.chk_flag_4 = former.readMsgChar();
            source.chk_flag_5 = former.readMsgChar();
            source.chk_flag_6 = former.readMsgChar();
            source.chk_flag_7 = former.readMsgChar();
            source.chk_flag_8 = former.readMsgChar();
            source.chk_flag_9 = former.readMsgChar();
            source.chk_flag_10 = former.readMsgChar();
            source.chk_sts_1 = deleteNull(former.readMsgString());
            source.chk_sts_2 = deleteNull(former.readMsgString());
            source.chk_sts_3 = deleteNull(former.readMsgString());
            source.chk_sts_4 = deleteNull(former.readMsgString());
            source.chk_sts_5 = deleteNull(former.readMsgString());
            source.chk_sts_6 = deleteNull(former.readMsgString());
            source.chk_sts_7 = deleteNull(former.readMsgString());
            source.chk_sts_8 = deleteNull(former.readMsgString());
            source.chk_sts_9 = deleteNull(former.readMsgString());
            source.chk_sts_10 = deleteNull(former.readMsgString());
            source.chg_flag_1 = former.readMsgChar();
            source.chg_flag_2 = former.readMsgChar();
            source.chg_flag_3 = former.readMsgChar();
            source.chg_flag_4 = former.readMsgChar();
            source.chg_flag_5 = former.readMsgChar();
            source.chg_flag_6 = former.readMsgChar();
            source.chg_flag_7 = former.readMsgChar();
            source.chg_flag_8 = former.readMsgChar();
            source.chg_flag_9 = former.readMsgChar();
            source.chg_flag_10 = former.readMsgChar();
            source.chg_sts_1 = deleteNull(former.readMsgString());
            source.chg_sts_2 = deleteNull(former.readMsgString());
            source.chg_sts_3 = deleteNull(former.readMsgString());
            source.chg_sts_4 = deleteNull(former.readMsgString());
            source.chg_sts_5 = deleteNull(former.readMsgString());
            source.chg_sts_6 = deleteNull(former.readMsgString());
            source.chg_sts_7 = deleteNull(former.readMsgString());
            source.chg_sts_8 = deleteNull(former.readMsgString());
            source.chg_sts_9 = deleteNull(former.readMsgString());
            source.chg_sts_10 = deleteNull(former.readMsgString());
            source.tbl_1 = deleteNull(former.readMsgString());
            source.tbl_2 = deleteNull(former.readMsgString());
            source.tbl_3 = deleteNull(former.readMsgString());
            source.tbl_4 = deleteNull(former.readMsgString());
            source.tbl_5 = deleteNull(former.readMsgString());
            source.tbl_6 = deleteNull(former.readMsgString());
            source.tbl_7 = deleteNull(former.readMsgString());
            source.tbl_8 = deleteNull(former.readMsgString());
            source.tbl_9 = deleteNull(former.readMsgString());
            source.tbl_10 = deleteNull(former.readMsgString());
            source.col_set_id = deleteNull(former.readMsgString());
            source.alarm_flag = former.readMsgChar();
            source.alarm_msg_id = deleteNull(former.readMsgString());
            source.create_user_id = deleteNull(former.readMsgString());
            source.create_time = deleteNull(former.readMsgString());
            source.update_user_id = deleteNull(former.readMsgString());
            source.update_time = deleteNull(former.readMsgString());
            source.chart_id = deleteNull(former.readMsgString());
            source.chart_flag = former.readMsgChar();
        }

        public static void serialize_FMB_View_Environment_In_Tag(StreamTransformer former, FMB_View_Environment_In_Tag target)
        {
            former.writeMsgString(withoutSpace(target.h_passport));
            former.writeMsgChar(target.h_language);
            former.writeMsgString(withoutSpace(target.h_user_id));
            former.writeMsgString(withoutSpace(target.h_password));
            former.writeMsgChar(target.h_proc_step);
            former.writeMsgString(withoutSpace(target.h_factory));
        }

        public static void transform_FMB_View_Environment_In_Tag(StreamTransformer former, ref FMB_View_Environment_In_Tag source)
        {
            source.h_passport = deleteNull(former.readMsgString());
            source.h_language = former.readMsgChar();
            source.h_user_id = deleteNull(former.readMsgString());
            source.h_password = deleteNull(former.readMsgString());
            source.h_proc_step = former.readMsgChar();
            source.h_factory = deleteNull(former.readMsgString());
        }

        public static void serialize_FMB_View_Environment_Out_Tag(StreamTransformer former, FMB_View_Environment_Out_Tag target)
        {
            former.writeMsgChar(target.h_status_value);
            former.writeMsgString(withoutSpace(target.h_msg_code));
            former.writeMsgString(withoutSpace(target.h_msg));
            former.writeMsgString(withoutSpace(target.h_field_msg));
            former.writeMsgString(withoutSpace(target.h_db_err_msg));
            former.writeMsgString(withoutSpace(target.factory));
            former.writeMsgString(withoutSpace(target.font_family));
            former.writeMsgInt(target.res_width);
            former.writeMsgInt(target.res_height);
            former.writeMsgInt(target.rtg_width);
            former.writeMsgInt(target.rtg_height);
            former.writeMsgInt(target.elp_width);
            former.writeMsgInt(target.elp_height);
            former.writeMsgInt(target.tri_width);
            former.writeMsgInt(target.tri_height);
            former.writeMsgInt(target.ver_width);
            former.writeMsgInt(target.ver_height);
            former.writeMsgInt(target.hor_width);
            former.writeMsgInt(target.hor_height);
            former.writeMsgInt(target.pie1_width);
            former.writeMsgInt(target.pie1_height);
            former.writeMsgInt(target.pie2_width);
            former.writeMsgInt(target.pie2_height);
            former.writeMsgInt(target.pie3_width);
            former.writeMsgInt(target.pie3_height);
            former.writeMsgInt(target.pie4_width);
            former.writeMsgInt(target.pie4_height);
            former.writeMsgInt(target.layout_width);
            former.writeMsgInt(target.layout_height);
            former.writeMsgInt(target.udr_width);
            former.writeMsgInt(target.udr_height);
            former.writeMsgChar(target.event_color_flag);
            former.writeMsgChar(target.signal_flag);
            former.writeMsgString(withoutSpace(target.create_user_id));
            former.writeMsgString(withoutSpace(target.create_time));
            former.writeMsgString(withoutSpace(target.update_user_id));
            former.writeMsgString(withoutSpace(target.update_time));
            former.writeMsgInt(target.text_size);
            former.writeMsgInt(target.text_color);
            former.writeMsgInt(target.back_color);
        }

        public static void transform_FMB_View_Environment_Out_Tag(StreamTransformer former, ref FMB_View_Environment_Out_Tag source)
        {
            source.h_status_value = former.readMsgChar();
            source.h_msg_code = deleteNull(former.readMsgString());
            source.h_msg = deleteNull(former.readMsgString());
            source.h_field_msg = deleteNull(former.readMsgString());
            source.h_db_err_msg = deleteNull(former.readMsgString());
            source.factory = deleteNull(former.readMsgString());
            source.font_family = deleteNull(former.readMsgString());
            source.res_width = former.readMsgInt();
            source.res_height = former.readMsgInt();
            source.rtg_width = former.readMsgInt();
            source.rtg_height = former.readMsgInt();
            source.elp_width = former.readMsgInt();
            source.elp_height = former.readMsgInt();
            source.tri_width = former.readMsgInt();
            source.tri_height = former.readMsgInt();
            source.ver_width = former.readMsgInt();
            source.ver_height = former.readMsgInt();
            source.hor_width = former.readMsgInt();
            source.hor_height = former.readMsgInt();
            source.pie1_width = former.readMsgInt();
            source.pie1_height = former.readMsgInt();
            source.pie2_width = former.readMsgInt();
            source.pie2_height = former.readMsgInt();
            source.pie3_width = former.readMsgInt();
            source.pie3_height = former.readMsgInt();
            source.pie4_width = former.readMsgInt();
            source.pie4_height = former.readMsgInt();
            source.layout_width = former.readMsgInt();
            source.layout_height = former.readMsgInt();
            source.udr_width = former.readMsgInt();
            source.udr_height = former.readMsgInt();
            source.event_color_flag = former.readMsgChar();
            source.signal_flag = former.readMsgChar();
            source.create_user_id = deleteNull(former.readMsgString());
            source.create_time = deleteNull(former.readMsgString());
            source.update_user_id = deleteNull(former.readMsgString());
            source.update_time = deleteNull(former.readMsgString());
            source.text_size = former.readMsgInt();
            source.text_color = former.readMsgInt();
            source.back_color = former.readMsgInt();
        }

        public static void serialize_FMB_View_Environment_List_In_Tag(StreamTransformer former, FMB_View_Environment_List_In_Tag target)
        {
            former.writeMsgString(withoutSpace(target.h_passport));
            former.writeMsgChar(target.h_language);
            former.writeMsgString(withoutSpace(target.h_user_id));
            former.writeMsgString(withoutSpace(target.h_password));
            former.writeMsgChar(target.h_proc_step);
            former.writeMsgString(withoutSpace(target.next_factory));
        }

        public static void transform_FMB_View_Environment_List_In_Tag(StreamTransformer former, ref FMB_View_Environment_List_In_Tag source)
        {
            source.h_passport = deleteNull(former.readMsgString());
            source.h_language = former.readMsgChar();
            source.h_user_id = deleteNull(former.readMsgString());
            source.h_password = deleteNull(former.readMsgString());
            source.h_proc_step = former.readMsgChar();
            source.next_factory = deleteNull(former.readMsgString());
        }

        public static void serialize_FMB_View_Environment_List_Out_Tag_evn_list(StreamTransformer former, FMB_View_Environment_List_Out_Tag_evn_list target)
        {
            former.writeMsgString(withoutSpace(target.factory));
            former.writeMsgString(withoutSpace(target.font_family));
            former.writeMsgInt(target.res_width);
            former.writeMsgInt(target.res_height);
            former.writeMsgInt(target.rtg_width);
            former.writeMsgInt(target.rtg_height);
            former.writeMsgInt(target.elp_width);
            former.writeMsgInt(target.elp_height);
            former.writeMsgInt(target.tri_width);
            former.writeMsgInt(target.tri_height);
            former.writeMsgInt(target.ver_width);
            former.writeMsgInt(target.ver_height);
            former.writeMsgInt(target.hor_width);
            former.writeMsgInt(target.hor_height);
            former.writeMsgInt(target.pie1_width);
            former.writeMsgInt(target.pie1_height);
            former.writeMsgInt(target.pie2_width);
            former.writeMsgInt(target.pie2_height);
            former.writeMsgInt(target.pie3_width);
            former.writeMsgInt(target.pie3_height);
            former.writeMsgInt(target.pie4_width);
            former.writeMsgInt(target.pie4_height);
            former.writeMsgInt(target.layout_width);
            former.writeMsgInt(target.layout_height);
            former.writeMsgInt(target.udr_width);
            former.writeMsgInt(target.udr_height);
            former.writeMsgChar(target.event_color_flag);
            former.writeMsgChar(target.signal_flag);
            former.writeMsgString(withoutSpace(target.create_user_id));
            former.writeMsgString(withoutSpace(target.create_time));
            former.writeMsgString(withoutSpace(target.update_user_id));
            former.writeMsgString(withoutSpace(target.update_time));
            former.writeMsgInt(target.text_size);
            former.writeMsgInt(target.text_color);
            former.writeMsgInt(target.back_color);
        }

        public static void serialize_FMB_View_Environment_List_Out_Tag(StreamTransformer former, FMB_View_Environment_List_Out_Tag target)
        {
            former.writeMsgChar(target.h_status_value);
            former.writeMsgString(withoutSpace(target.h_msg_code));
            former.writeMsgString(withoutSpace(target.h_msg));
            former.writeMsgString(withoutSpace(target.h_field_msg));
            former.writeMsgString(withoutSpace(target.h_db_err_msg));
            former.writeMsgInt(target.count);
            former.writeMsgString(withoutSpace(target.next_factory));
            target._size_evn_list = (500 >= target._size_evn_list ? target._size_evn_list : 500);
            former.writeMsgInt(target._size_evn_list);
            for(int i = 0; i < target._size_evn_list; i++)
            {
                serialize_FMB_View_Environment_List_Out_Tag_evn_list(former, target.evn_list[i]);
            }
        }

        public static void transform_FMB_View_Environment_List_Out_Tag_evn_list(StreamTransformer former, ref FMB_View_Environment_List_Out_Tag_evn_list source)
        {
            source.factory = deleteNull(former.readMsgString());
            source.font_family = deleteNull(former.readMsgString());
            source.res_width = former.readMsgInt();
            source.res_height = former.readMsgInt();
            source.rtg_width = former.readMsgInt();
            source.rtg_height = former.readMsgInt();
            source.elp_width = former.readMsgInt();
            source.elp_height = former.readMsgInt();
            source.tri_width = former.readMsgInt();
            source.tri_height = former.readMsgInt();
            source.ver_width = former.readMsgInt();
            source.ver_height = former.readMsgInt();
            source.hor_width = former.readMsgInt();
            source.hor_height = former.readMsgInt();
            source.pie1_width = former.readMsgInt();
            source.pie1_height = former.readMsgInt();
            source.pie2_width = former.readMsgInt();
            source.pie2_height = former.readMsgInt();
            source.pie3_width = former.readMsgInt();
            source.pie3_height = former.readMsgInt();
            source.pie4_width = former.readMsgInt();
            source.pie4_height = former.readMsgInt();
            source.layout_width = former.readMsgInt();
            source.layout_height = former.readMsgInt();
            source.udr_width = former.readMsgInt();
            source.udr_height = former.readMsgInt();
            source.event_color_flag = former.readMsgChar();
            source.signal_flag = former.readMsgChar();
            source.create_user_id = deleteNull(former.readMsgString());
            source.create_time = deleteNull(former.readMsgString());
            source.update_user_id = deleteNull(former.readMsgString());
            source.update_time = deleteNull(former.readMsgString());
            source.text_size = former.readMsgInt();
            source.text_color = former.readMsgInt();
            source.back_color = former.readMsgInt();
        }

        public static void transform_FMB_View_Environment_List_Out_Tag(StreamTransformer former, ref FMB_View_Environment_List_Out_Tag source)
        {
            source.h_status_value = former.readMsgChar();
            source.h_msg_code = deleteNull(former.readMsgString());
            source.h_msg = deleteNull(former.readMsgString());
            source.h_field_msg = deleteNull(former.readMsgString());
            source.h_db_err_msg = deleteNull(former.readMsgString());
            source.count = former.readMsgInt();
            source.next_factory = deleteNull(former.readMsgString());
            source._size_evn_list = former.readMsgInt();
            source.evn_list = new FMB_View_Environment_List_Out_Tag_evn_list[source._size_evn_list];
            for(int i = 0; i < source._size_evn_list; i++)
            {
                source.evn_list[i] = new FMB_View_Environment_List_Out_Tag_evn_list();
                transform_FMB_View_Environment_List_Out_Tag_evn_list(former, ref source.evn_list[i]);
            }
        }

        public static void serialize_FMB_View_Event_Color_List_In_Tag(StreamTransformer former, FMB_View_Event_Color_List_In_Tag target)
        {
            former.writeMsgString(withoutSpace(target.h_passport));
            former.writeMsgChar(target.h_language);
            former.writeMsgString(withoutSpace(target.h_user_id));
            former.writeMsgString(withoutSpace(target.h_password));
            former.writeMsgChar(target.h_proc_step);
            former.writeMsgString(withoutSpace(target.h_factory));
            former.writeMsgString(withoutSpace(target.next_event));
        }

        public static void transform_FMB_View_Event_Color_List_In_Tag(StreamTransformer former, ref FMB_View_Event_Color_List_In_Tag source)
        {
            source.h_passport = deleteNull(former.readMsgString());
            source.h_language = former.readMsgChar();
            source.h_user_id = deleteNull(former.readMsgString());
            source.h_password = deleteNull(former.readMsgString());
            source.h_proc_step = former.readMsgChar();
            source.h_factory = deleteNull(former.readMsgString());
            source.next_event = deleteNull(former.readMsgString());
        }

        public static void serialize_FMB_View_Event_Color_List_Out_Tag_event_list(StreamTransformer former, FMB_View_Event_Color_List_Out_Tag_event_list target)
        {
            former.writeMsgString(withoutSpace(target.event_id));
            former.writeMsgInt(target.color);
        }

        public static void serialize_FMB_View_Event_Color_List_Out_Tag(StreamTransformer former, FMB_View_Event_Color_List_Out_Tag target)
        {
            former.writeMsgChar(target.h_status_value);
            former.writeMsgString(withoutSpace(target.h_msg_code));
            former.writeMsgString(withoutSpace(target.h_msg));
            former.writeMsgString(withoutSpace(target.h_field_msg));
            former.writeMsgString(withoutSpace(target.h_db_err_msg));
            former.writeMsgInt(target.count);
            former.writeMsgString(withoutSpace(target.next_event));
            target._size_event_list = (500 >= target._size_event_list ? target._size_event_list : 500);
            former.writeMsgInt(target._size_event_list);
            for(int i = 0; i < target._size_event_list; i++)
            {
                serialize_FMB_View_Event_Color_List_Out_Tag_event_list(former, target.event_list[i]);
            }
        }

        public static void transform_FMB_View_Event_Color_List_Out_Tag_event_list(StreamTransformer former, ref FMB_View_Event_Color_List_Out_Tag_event_list source)
        {
            source.event_id = deleteNull(former.readMsgString());
            source.color = former.readMsgInt();
        }

        public static void transform_FMB_View_Event_Color_List_Out_Tag(StreamTransformer former, ref FMB_View_Event_Color_List_Out_Tag source)
        {
            source.h_status_value = former.readMsgChar();
            source.h_msg_code = deleteNull(former.readMsgString());
            source.h_msg = deleteNull(former.readMsgString());
            source.h_field_msg = deleteNull(former.readMsgString());
            source.h_db_err_msg = deleteNull(former.readMsgString());
            source.count = former.readMsgInt();
            source.next_event = deleteNull(former.readMsgString());
            source._size_event_list = former.readMsgInt();
            source.event_list = new FMB_View_Event_Color_List_Out_Tag_event_list[source._size_event_list];
            for(int i = 0; i < source._size_event_list; i++)
            {
                source.event_list[i] = new FMB_View_Event_Color_List_Out_Tag_event_list();
                transform_FMB_View_Event_Color_List_Out_Tag_event_list(former, ref source.event_list[i]);
            }
        }

        public static void serialize_FMB_View_Event_Color_In_Tag(StreamTransformer former, FMB_View_Event_Color_In_Tag target)
        {
            former.writeMsgString(withoutSpace(target.h_passport));
            former.writeMsgChar(target.h_language);
            former.writeMsgString(withoutSpace(target.h_user_id));
            former.writeMsgString(withoutSpace(target.h_password));
            former.writeMsgChar(target.h_proc_step);
            former.writeMsgString(withoutSpace(target.h_factory));
            former.writeMsgString(withoutSpace(target.event_id));
        }

        public static void transform_FMB_View_Event_Color_In_Tag(StreamTransformer former, ref FMB_View_Event_Color_In_Tag source)
        {
            source.h_passport = deleteNull(former.readMsgString());
            source.h_language = former.readMsgChar();
            source.h_user_id = deleteNull(former.readMsgString());
            source.h_password = deleteNull(former.readMsgString());
            source.h_proc_step = former.readMsgChar();
            source.h_factory = deleteNull(former.readMsgString());
            source.event_id = deleteNull(former.readMsgString());
        }

        public static void serialize_FMB_View_Event_Color_Out_Tag(StreamTransformer former, FMB_View_Event_Color_Out_Tag target)
        {
            former.writeMsgChar(target.h_status_value);
            former.writeMsgString(withoutSpace(target.h_msg_code));
            former.writeMsgString(withoutSpace(target.h_msg));
            former.writeMsgString(withoutSpace(target.h_field_msg));
            former.writeMsgString(withoutSpace(target.h_db_err_msg));
            former.writeMsgString(withoutSpace(target.event_id));
            former.writeMsgInt(target.color);
            former.writeMsgString(withoutSpace(target.create_user_id));
            former.writeMsgString(withoutSpace(target.create_time));
            former.writeMsgString(withoutSpace(target.update_user_id));
            former.writeMsgString(withoutSpace(target.update_time));
        }

        public static void transform_FMB_View_Event_Color_Out_Tag(StreamTransformer former, ref FMB_View_Event_Color_Out_Tag source)
        {
            source.h_status_value = former.readMsgChar();
            source.h_msg_code = deleteNull(former.readMsgString());
            source.h_msg = deleteNull(former.readMsgString());
            source.h_field_msg = deleteNull(former.readMsgString());
            source.h_db_err_msg = deleteNull(former.readMsgString());
            source.event_id = deleteNull(former.readMsgString());
            source.color = former.readMsgInt();
            source.create_user_id = deleteNull(former.readMsgString());
            source.create_time = deleteNull(former.readMsgString());
            source.update_user_id = deleteNull(former.readMsgString());
            source.update_time = deleteNull(former.readMsgString());
        }

        public static void serialize_FMB_View_Resource_Image_List_In_Tag(StreamTransformer former, FMB_View_Resource_Image_List_In_Tag target)
        {
            former.writeMsgString(withoutSpace(target.h_passport));
            former.writeMsgChar(target.h_language);
            former.writeMsgString(withoutSpace(target.h_user_id));
            former.writeMsgString(withoutSpace(target.h_password));
            former.writeMsgChar(target.h_proc_step);
            former.writeMsgString(withoutSpace(target.h_factory));
            former.writeMsgString(withoutSpace(target.next_res_id));
        }

        public static void transform_FMB_View_Resource_Image_List_In_Tag(StreamTransformer former, ref FMB_View_Resource_Image_List_In_Tag source)
        {
            source.h_passport = deleteNull(former.readMsgString());
            source.h_language = former.readMsgChar();
            source.h_user_id = deleteNull(former.readMsgString());
            source.h_password = deleteNull(former.readMsgString());
            source.h_proc_step = former.readMsgChar();
            source.h_factory = deleteNull(former.readMsgString());
            source.next_res_id = deleteNull(former.readMsgString());
        }

        public static void serialize_FMB_View_Resource_Image_List_Out_Tag_res_list(StreamTransformer former, FMB_View_Resource_Image_List_Out_Tag_res_list target)
        {
            former.writeMsgString(withoutSpace(target.res_id));
            former.writeMsgString(withoutSpace(target.res_desc));
            former.writeMsgInt(target.img_idx);
        }

        public static void serialize_FMB_View_Resource_Image_List_Out_Tag(StreamTransformer former, FMB_View_Resource_Image_List_Out_Tag target)
        {
            former.writeMsgChar(target.h_status_value);
            former.writeMsgString(withoutSpace(target.h_msg_code));
            former.writeMsgString(withoutSpace(target.h_msg));
            former.writeMsgString(withoutSpace(target.h_field_msg));
            former.writeMsgString(withoutSpace(target.h_db_err_msg));
            former.writeMsgInt(target.count);
            former.writeMsgString(withoutSpace(target.next_res_id));
            target._size_res_list = (500 >= target._size_res_list ? target._size_res_list : 500);
            former.writeMsgInt(target._size_res_list);
            for(int i = 0; i < target._size_res_list; i++)
            {
                serialize_FMB_View_Resource_Image_List_Out_Tag_res_list(former, target.res_list[i]);
            }
        }

        public static void transform_FMB_View_Resource_Image_List_Out_Tag_res_list(StreamTransformer former, ref FMB_View_Resource_Image_List_Out_Tag_res_list source)
        {
            source.res_id = deleteNull(former.readMsgString());
            source.res_desc = deleteNull(former.readMsgString());
            source.img_idx = former.readMsgInt();
        }

        public static void transform_FMB_View_Resource_Image_List_Out_Tag(StreamTransformer former, ref FMB_View_Resource_Image_List_Out_Tag source)
        {
            source.h_status_value = former.readMsgChar();
            source.h_msg_code = deleteNull(former.readMsgString());
            source.h_msg = deleteNull(former.readMsgString());
            source.h_field_msg = deleteNull(former.readMsgString());
            source.h_db_err_msg = deleteNull(former.readMsgString());
            source.count = former.readMsgInt();
            source.next_res_id = deleteNull(former.readMsgString());
            source._size_res_list = former.readMsgInt();
            source.res_list = new FMB_View_Resource_Image_List_Out_Tag_res_list[source._size_res_list];
            for(int i = 0; i < source._size_res_list; i++)
            {
                source.res_list[i] = new FMB_View_Resource_Image_List_Out_Tag_res_list();
                transform_FMB_View_Resource_Image_List_Out_Tag_res_list(former, ref source.res_list[i]);
            }
        }

        public static void serialize_FMB_View_Function_List_In_Tag(StreamTransformer former, FMB_View_Function_List_In_Tag target)
        {
            former.writeMsgString(withoutSpace(target.h_passport));
            former.writeMsgChar(target.h_language);
            former.writeMsgString(withoutSpace(target.h_factory));
            former.writeMsgString(withoutSpace(target.h_user_id));
            former.writeMsgString(withoutSpace(target.h_password));
            former.writeMsgChar(target.h_proc_step);
            former.writeMsgString(withoutSpace(target.sec_grp_id));
            former.writeMsgString(withoutSpace(target.next_func_name));
        }

        public static void transform_FMB_View_Function_List_In_Tag(StreamTransformer former, ref FMB_View_Function_List_In_Tag source)
        {
            source.h_passport = deleteNull(former.readMsgString());
            source.h_language = former.readMsgChar();
            source.h_factory = deleteNull(former.readMsgString());
            source.h_user_id = deleteNull(former.readMsgString());
            source.h_password = deleteNull(former.readMsgString());
            source.h_proc_step = former.readMsgChar();
            source.sec_grp_id = deleteNull(former.readMsgString());
            source.next_func_name = deleteNull(former.readMsgString());
        }

        public static void serialize_FMB_View_Function_List_Out_Tag_func_list(StreamTransformer former, FMB_View_Function_List_Out_Tag_func_list target)
        {
            former.writeMsgString(withoutSpace(target.func_name));
            former.writeMsgString(withoutSpace(target.func_desc));
        }

        public static void serialize_FMB_View_Function_List_Out_Tag(StreamTransformer former, FMB_View_Function_List_Out_Tag target)
        {
            former.writeMsgChar(target.h_status_value);
            former.writeMsgString(withoutSpace(target.h_msg_code));
            former.writeMsgString(withoutSpace(target.h_msg));
            former.writeMsgString(withoutSpace(target.h_field_msg));
            former.writeMsgString(withoutSpace(target.h_db_err_msg));
            former.writeMsgString(withoutSpace(target.next_func_name));
            former.writeMsgInt(target.count);
            target._size_func_list = (500 >= target._size_func_list ? target._size_func_list : 500);
            former.writeMsgInt(target._size_func_list);
            for(int i = 0; i < target._size_func_list; i++)
            {
                serialize_FMB_View_Function_List_Out_Tag_func_list(former, target.func_list[i]);
            }
        }

        public static void transform_FMB_View_Function_List_Out_Tag_func_list(StreamTransformer former, ref FMB_View_Function_List_Out_Tag_func_list source)
        {
            source.func_name = deleteNull(former.readMsgString());
            source.func_desc = deleteNull(former.readMsgString());
        }

        public static void transform_FMB_View_Function_List_Out_Tag(StreamTransformer former, ref FMB_View_Function_List_Out_Tag source)
        {
            source.h_status_value = former.readMsgChar();
            source.h_msg_code = deleteNull(former.readMsgString());
            source.h_msg = deleteNull(former.readMsgString());
            source.h_field_msg = deleteNull(former.readMsgString());
            source.h_db_err_msg = deleteNull(former.readMsgString());
            source.next_func_name = deleteNull(former.readMsgString());
            source.count = former.readMsgInt();
            source._size_func_list = former.readMsgInt();
            source.func_list = new FMB_View_Function_List_Out_Tag_func_list[source._size_func_list];
            for(int i = 0; i < source._size_func_list; i++)
            {
                source.func_list[i] = new FMB_View_Function_List_Out_Tag_func_list();
                transform_FMB_View_Function_List_Out_Tag_func_list(former, ref source.func_list[i]);
            }
        }

        public static void serialize_FMB_View_Function_Detail_In_Tag(StreamTransformer former, FMB_View_Function_Detail_In_Tag target)
        {
            former.writeMsgString(withoutSpace(target.h_passport));
            former.writeMsgChar(target.h_language);
            former.writeMsgString(withoutSpace(target.h_factory));
            former.writeMsgString(withoutSpace(target.h_user_id));
            former.writeMsgString(withoutSpace(target.h_password));
            former.writeMsgChar(target.h_proc_step);
            former.writeMsgString(withoutSpace(target.func_name));
        }

        public static void transform_FMB_View_Function_Detail_In_Tag(StreamTransformer former, ref FMB_View_Function_Detail_In_Tag source)
        {
            source.h_passport = deleteNull(former.readMsgString());
            source.h_language = former.readMsgChar();
            source.h_factory = deleteNull(former.readMsgString());
            source.h_user_id = deleteNull(former.readMsgString());
            source.h_password = deleteNull(former.readMsgString());
            source.h_proc_step = former.readMsgChar();
            source.func_name = deleteNull(former.readMsgString());
        }

        public static void serialize_FMB_View_Function_Detail_Out_Tag(StreamTransformer former, FMB_View_Function_Detail_Out_Tag target)
        {
            former.writeMsgChar(target.h_status_value);
            former.writeMsgString(withoutSpace(target.h_msg_code));
            former.writeMsgString(withoutSpace(target.h_msg));
            former.writeMsgString(withoutSpace(target.h_field_msg));
            former.writeMsgString(withoutSpace(target.h_db_err_msg));
            former.writeMsgString(withoutSpace(target.func_name));
            former.writeMsgString(withoutSpace(target.func_desc));
            former.writeMsgChar(target.func_type_flag);
            former.writeMsgString(withoutSpace(target.ctl_name_1));
            former.writeMsgChar(target.ctl_en_flag_1);
            former.writeMsgString(withoutSpace(target.ctl_name_2));
            former.writeMsgChar(target.ctl_en_flag_2);
            former.writeMsgString(withoutSpace(target.ctl_name_3));
            former.writeMsgChar(target.ctl_en_flag_3);
            former.writeMsgString(withoutSpace(target.ctl_name_4));
            former.writeMsgChar(target.ctl_en_flag_4);
            former.writeMsgString(withoutSpace(target.ctl_name_5));
            former.writeMsgChar(target.ctl_en_flag_5);
            former.writeMsgString(withoutSpace(target.ctl_name_6));
            former.writeMsgChar(target.ctl_en_flag_6);
            former.writeMsgString(withoutSpace(target.ctl_name_7));
            former.writeMsgChar(target.ctl_en_flag_7);
            former.writeMsgString(withoutSpace(target.ctl_name_8));
            former.writeMsgChar(target.ctl_en_flag_8);
            former.writeMsgString(withoutSpace(target.ctl_name_9));
            former.writeMsgChar(target.ctl_en_flag_9);
            former.writeMsgString(withoutSpace(target.ctl_name_10));
            former.writeMsgChar(target.ctl_en_flag_10);
            former.writeMsgString(withoutSpace(target.tab_name_1));
            former.writeMsgChar(target.tab_ds_flag_1);
            former.writeMsgString(withoutSpace(target.tab_name_2));
            former.writeMsgChar(target.tab_ds_flag_2);
            former.writeMsgString(withoutSpace(target.tab_name_3));
            former.writeMsgChar(target.tab_ds_flag_3);
            former.writeMsgString(withoutSpace(target.tab_name_4));
            former.writeMsgChar(target.tab_ds_flag_4);
            former.writeMsgString(withoutSpace(target.tab_name_5));
            former.writeMsgChar(target.tab_ds_flag_5);
            former.writeMsgString(withoutSpace(target.tab_name_6));
            former.writeMsgChar(target.tab_ds_flag_6);
            former.writeMsgString(withoutSpace(target.tab_name_7));
            former.writeMsgChar(target.tab_ds_flag_7);
            former.writeMsgString(withoutSpace(target.tab_name_8));
            former.writeMsgChar(target.tab_ds_flag_8);
            former.writeMsgString(withoutSpace(target.tab_name_9));
            former.writeMsgChar(target.tab_ds_flag_9);
            former.writeMsgString(withoutSpace(target.tab_name_10));
            former.writeMsgChar(target.tab_ds_flag_10);
            former.writeMsgString(withoutSpace(target.opt_name_1));
            former.writeMsgString(withoutSpace(target.opt_value_1));
            former.writeMsgString(withoutSpace(target.opt_name_2));
            former.writeMsgString(withoutSpace(target.opt_value_2));
            former.writeMsgString(withoutSpace(target.opt_name_3));
            former.writeMsgString(withoutSpace(target.opt_value_3));
            former.writeMsgString(withoutSpace(target.opt_name_4));
            former.writeMsgString(withoutSpace(target.opt_value_4));
            former.writeMsgString(withoutSpace(target.opt_name_5));
            former.writeMsgString(withoutSpace(target.opt_value_5));
            former.writeMsgString(withoutSpace(target.opt_name_6));
            former.writeMsgString(withoutSpace(target.opt_value_6));
            former.writeMsgString(withoutSpace(target.opt_name_7));
            former.writeMsgString(withoutSpace(target.opt_value_7));
            former.writeMsgString(withoutSpace(target.opt_name_8));
            former.writeMsgString(withoutSpace(target.opt_value_8));
            former.writeMsgString(withoutSpace(target.opt_name_9));
            former.writeMsgString(withoutSpace(target.opt_value_9));
            former.writeMsgString(withoutSpace(target.opt_name_10));
            former.writeMsgString(withoutSpace(target.opt_value_10));
            former.writeMsgChar(target.fld_en_mask_use_flag);
            former.writeMsgChar(target.fld_en_all_flag);
            former.writeMsgString(withoutSpace(target.fld_en_mask));
            former.writeMsgString(withoutSpace(target.help_url));
        }

        public static void transform_FMB_View_Function_Detail_Out_Tag(StreamTransformer former, ref FMB_View_Function_Detail_Out_Tag source)
        {
            source.h_status_value = former.readMsgChar();
            source.h_msg_code = deleteNull(former.readMsgString());
            source.h_msg = deleteNull(former.readMsgString());
            source.h_field_msg = deleteNull(former.readMsgString());
            source.h_db_err_msg = deleteNull(former.readMsgString());
            source.func_name = deleteNull(former.readMsgString());
            source.func_desc = deleteNull(former.readMsgString());
            source.func_type_flag = former.readMsgChar();
            source.ctl_name_1 = deleteNull(former.readMsgString());
            source.ctl_en_flag_1 = former.readMsgChar();
            source.ctl_name_2 = deleteNull(former.readMsgString());
            source.ctl_en_flag_2 = former.readMsgChar();
            source.ctl_name_3 = deleteNull(former.readMsgString());
            source.ctl_en_flag_3 = former.readMsgChar();
            source.ctl_name_4 = deleteNull(former.readMsgString());
            source.ctl_en_flag_4 = former.readMsgChar();
            source.ctl_name_5 = deleteNull(former.readMsgString());
            source.ctl_en_flag_5 = former.readMsgChar();
            source.ctl_name_6 = deleteNull(former.readMsgString());
            source.ctl_en_flag_6 = former.readMsgChar();
            source.ctl_name_7 = deleteNull(former.readMsgString());
            source.ctl_en_flag_7 = former.readMsgChar();
            source.ctl_name_8 = deleteNull(former.readMsgString());
            source.ctl_en_flag_8 = former.readMsgChar();
            source.ctl_name_9 = deleteNull(former.readMsgString());
            source.ctl_en_flag_9 = former.readMsgChar();
            source.ctl_name_10 = deleteNull(former.readMsgString());
            source.ctl_en_flag_10 = former.readMsgChar();
            source.tab_name_1 = deleteNull(former.readMsgString());
            source.tab_ds_flag_1 = former.readMsgChar();
            source.tab_name_2 = deleteNull(former.readMsgString());
            source.tab_ds_flag_2 = former.readMsgChar();
            source.tab_name_3 = deleteNull(former.readMsgString());
            source.tab_ds_flag_3 = former.readMsgChar();
            source.tab_name_4 = deleteNull(former.readMsgString());
            source.tab_ds_flag_4 = former.readMsgChar();
            source.tab_name_5 = deleteNull(former.readMsgString());
            source.tab_ds_flag_5 = former.readMsgChar();
            source.tab_name_6 = deleteNull(former.readMsgString());
            source.tab_ds_flag_6 = former.readMsgChar();
            source.tab_name_7 = deleteNull(former.readMsgString());
            source.tab_ds_flag_7 = former.readMsgChar();
            source.tab_name_8 = deleteNull(former.readMsgString());
            source.tab_ds_flag_8 = former.readMsgChar();
            source.tab_name_9 = deleteNull(former.readMsgString());
            source.tab_ds_flag_9 = former.readMsgChar();
            source.tab_name_10 = deleteNull(former.readMsgString());
            source.tab_ds_flag_10 = former.readMsgChar();
            source.opt_name_1 = deleteNull(former.readMsgString());
            source.opt_value_1 = deleteNull(former.readMsgString());
            source.opt_name_2 = deleteNull(former.readMsgString());
            source.opt_value_2 = deleteNull(former.readMsgString());
            source.opt_name_3 = deleteNull(former.readMsgString());
            source.opt_value_3 = deleteNull(former.readMsgString());
            source.opt_name_4 = deleteNull(former.readMsgString());
            source.opt_value_4 = deleteNull(former.readMsgString());
            source.opt_name_5 = deleteNull(former.readMsgString());
            source.opt_value_5 = deleteNull(former.readMsgString());
            source.opt_name_6 = deleteNull(former.readMsgString());
            source.opt_value_6 = deleteNull(former.readMsgString());
            source.opt_name_7 = deleteNull(former.readMsgString());
            source.opt_value_7 = deleteNull(former.readMsgString());
            source.opt_name_8 = deleteNull(former.readMsgString());
            source.opt_value_8 = deleteNull(former.readMsgString());
            source.opt_name_9 = deleteNull(former.readMsgString());
            source.opt_value_9 = deleteNull(former.readMsgString());
            source.opt_name_10 = deleteNull(former.readMsgString());
            source.opt_value_10 = deleteNull(former.readMsgString());
            source.fld_en_mask_use_flag = former.readMsgChar();
            source.fld_en_all_flag = former.readMsgChar();
            source.fld_en_mask = deleteNull(former.readMsgString());
            source.help_url = deleteNull(former.readMsgString());
        }

        public static void serialize_FMB_Get_HelpURL_In_Tag(StreamTransformer former, FMB_Get_HelpURL_In_Tag target)
        {
            former.writeMsgString(withoutSpace(target.h_passport));
            former.writeMsgChar(target.h_language);
            former.writeMsgString(withoutSpace(target.h_factory));
            former.writeMsgString(withoutSpace(target.h_user_id));
            former.writeMsgString(withoutSpace(target.h_password));
            former.writeMsgChar(target.h_proc_step);
            former.writeMsgString(withoutSpace(target.func_name));
        }

        public static void transform_FMB_Get_HelpURL_In_Tag(StreamTransformer former, ref FMB_Get_HelpURL_In_Tag source)
        {
            source.h_passport = deleteNull(former.readMsgString());
            source.h_language = former.readMsgChar();
            source.h_factory = deleteNull(former.readMsgString());
            source.h_user_id = deleteNull(former.readMsgString());
            source.h_password = deleteNull(former.readMsgString());
            source.h_proc_step = former.readMsgChar();
            source.func_name = deleteNull(former.readMsgString());
        }

        public static void serialize_FMB_Get_HelpURL_Out_Tag(StreamTransformer former, FMB_Get_HelpURL_Out_Tag target)
        {
            former.writeMsgChar(target.h_status_value);
            former.writeMsgString(withoutSpace(target.h_msg_code));
            former.writeMsgString(withoutSpace(target.h_msg));
            former.writeMsgString(withoutSpace(target.h_field_msg));
            former.writeMsgString(withoutSpace(target.h_db_err_msg));
            former.writeMsgString(withoutSpace(target.help_url));
        }

        public static void transform_FMB_Get_HelpURL_Out_Tag(StreamTransformer former, ref FMB_Get_HelpURL_Out_Tag source)
        {
            source.h_status_value = former.readMsgChar();
            source.h_msg_code = deleteNull(former.readMsgString());
            source.h_msg = deleteNull(former.readMsgString());
            source.h_field_msg = deleteNull(former.readMsgString());
            source.h_db_err_msg = deleteNull(former.readMsgString());
            source.help_url = deleteNull(former.readMsgString());
        }

        public static void serialize_FMB_View_Attach_Character_In_Tag(StreamTransformer former, FMB_View_Attach_Character_In_Tag target)
        {
            former.writeMsgString(withoutSpace(target.h_passport));
            former.writeMsgChar(target.h_language);
            former.writeMsgString(withoutSpace(target.h_factory));
            former.writeMsgString(withoutSpace(target.h_user_id));
            former.writeMsgString(withoutSpace(target.h_password));
            former.writeMsgChar(target.h_proc_step);
            former.writeMsgString(withoutSpace(target.col_set_id));
            former.writeMsgInt(target.col_set_version);
            former.writeMsgString(withoutSpace(target.char_id));
        }

        public static void transform_FMB_View_Attach_Character_In_Tag(StreamTransformer former, ref FMB_View_Attach_Character_In_Tag source)
        {
            source.h_passport = deleteNull(former.readMsgString());
            source.h_language = former.readMsgChar();
            source.h_factory = deleteNull(former.readMsgString());
            source.h_user_id = deleteNull(former.readMsgString());
            source.h_password = deleteNull(former.readMsgString());
            source.h_proc_step = former.readMsgChar();
            source.col_set_id = deleteNull(former.readMsgString());
            source.col_set_version = former.readMsgInt();
            source.char_id = deleteNull(former.readMsgString());
        }

        public static void serialize_FMB_View_Attach_Character_Out_Tag_def_unit_list(StreamTransformer former, FMB_View_Attach_Character_Out_Tag_def_unit_list target)
        {
            former.writeMsgInt(target.unit_seq_num);
            former.writeMsgChar(target.null_flag);
            former.writeMsgString(withoutSpace(target.def_unit_id));
        }

        public static void serialize_FMB_View_Attach_Character_Out_Tag(StreamTransformer former, FMB_View_Attach_Character_Out_Tag target)
        {
            former.writeMsgChar(target.h_status_value);
            former.writeMsgString(withoutSpace(target.h_msg_code));
            former.writeMsgString(withoutSpace(target.h_msg));
            former.writeMsgString(withoutSpace(target.h_field_msg));
            former.writeMsgString(withoutSpace(target.h_db_err_msg));
            former.writeMsgString(withoutSpace(target.col_set_id));
            former.writeMsgInt(target.col_set_version);
            former.writeMsgString(withoutSpace(target.char_id));
            former.writeMsgInt(target.seq_num);
            former.writeMsgChar(target.value_type);
            former.writeMsgInt(target.unit_count);
            former.writeMsgInt(target.value_count);
            former.writeMsgInt(target.display_precision);
            former.writeMsgString(withoutSpace(target.value_tbl));
            former.writeMsgString(withoutSpace(target.def_value));
            former.writeMsgChar(target.opt_input_flag);
            former.writeMsgChar(target.blank_rec_save_flag);
            former.writeMsgChar(target.derived_param_flag);
            former.writeMsgString(withoutSpace(target.derived_parameter));
            former.writeMsgChar(target.def_unit_flag);
            former.writeMsgChar(target.def_unit_ovr_flag);
            former.writeMsgString(withoutSpace(target.unit_tbl));
            former.writeMsgChar(target.spec_type);
            former.writeMsgInt(target.spec_out_count);
            former.writeMsgString(withoutSpace(target.target_value));
            former.writeMsgString(withoutSpace(target.upper_spec_limit));
            former.writeMsgString(withoutSpace(target.lower_spec_limit));
            former.writeMsgString(withoutSpace(target.upper_warn_limit));
            former.writeMsgString(withoutSpace(target.lower_warn_limit));
            former.writeMsgString(withoutSpace(target.upper_cust_limit));
            former.writeMsgString(withoutSpace(target.lower_cust_limit));
            former.writeMsgString(withoutSpace(target.spec_info));
            former.writeMsgString(withoutSpace(target.spec_out_alarm));
            former.writeMsgString(withoutSpace(target.warn_out_alarm));
            former.writeMsgString(withoutSpace(target.create_user_id));
            former.writeMsgString(withoutSpace(target.create_time));
            former.writeMsgString(withoutSpace(target.update_user_id));
            former.writeMsgString(withoutSpace(target.update_time));
            former.writeMsgInt(target.def_unit_count);
            target._size_def_unit_list = (500 >= target._size_def_unit_list ? target._size_def_unit_list : 500);
            former.writeMsgInt(target._size_def_unit_list);
            for(int i = 0; i < target._size_def_unit_list; i++)
            {
                serialize_FMB_View_Attach_Character_Out_Tag_def_unit_list(former, target.def_unit_list[i]);
            }
        }

        public static void transform_FMB_View_Attach_Character_Out_Tag_def_unit_list(StreamTransformer former, ref FMB_View_Attach_Character_Out_Tag_def_unit_list source)
        {
            source.unit_seq_num = former.readMsgInt();
            source.null_flag = former.readMsgChar();
            source.def_unit_id = deleteNull(former.readMsgString());
        }

        public static void transform_FMB_View_Attach_Character_Out_Tag(StreamTransformer former, ref FMB_View_Attach_Character_Out_Tag source)
        {
            source.h_status_value = former.readMsgChar();
            source.h_msg_code = deleteNull(former.readMsgString());
            source.h_msg = deleteNull(former.readMsgString());
            source.h_field_msg = deleteNull(former.readMsgString());
            source.h_db_err_msg = deleteNull(former.readMsgString());
            source.col_set_id = deleteNull(former.readMsgString());
            source.col_set_version = former.readMsgInt();
            source.char_id = deleteNull(former.readMsgString());
            source.seq_num = former.readMsgInt();
            source.value_type = former.readMsgChar();
            source.unit_count = former.readMsgInt();
            source.value_count = former.readMsgInt();
            source.display_precision = former.readMsgInt();
            source.value_tbl = deleteNull(former.readMsgString());
            source.def_value = deleteNull(former.readMsgString());
            source.opt_input_flag = former.readMsgChar();
            source.blank_rec_save_flag = former.readMsgChar();
            source.derived_param_flag = former.readMsgChar();
            source.derived_parameter = deleteNull(former.readMsgString());
            source.def_unit_flag = former.readMsgChar();
            source.def_unit_ovr_flag = former.readMsgChar();
            source.unit_tbl = deleteNull(former.readMsgString());
            source.spec_type = former.readMsgChar();
            source.spec_out_count = former.readMsgInt();
            source.target_value = deleteNull(former.readMsgString());
            source.upper_spec_limit = deleteNull(former.readMsgString());
            source.lower_spec_limit = deleteNull(former.readMsgString());
            source.upper_warn_limit = deleteNull(former.readMsgString());
            source.lower_warn_limit = deleteNull(former.readMsgString());
            source.upper_cust_limit = deleteNull(former.readMsgString());
            source.lower_cust_limit = deleteNull(former.readMsgString());
            source.spec_info = deleteNull(former.readMsgString());
            source.spec_out_alarm = deleteNull(former.readMsgString());
            source.warn_out_alarm = deleteNull(former.readMsgString());
            source.create_user_id = deleteNull(former.readMsgString());
            source.create_time = deleteNull(former.readMsgString());
            source.update_user_id = deleteNull(former.readMsgString());
            source.update_time = deleteNull(former.readMsgString());
            source.def_unit_count = former.readMsgInt();
            source._size_def_unit_list = former.readMsgInt();
            source.def_unit_list = new FMB_View_Attach_Character_Out_Tag_def_unit_list[source._size_def_unit_list];
            for(int i = 0; i < source._size_def_unit_list; i++)
            {
                source.def_unit_list[i] = new FMB_View_Attach_Character_Out_Tag_def_unit_list();
                transform_FMB_View_Attach_Character_Out_Tag_def_unit_list(former, ref source.def_unit_list[i]);
            }
        }

        public static void serialize_FMB_View_FMB_Group_List_In_Tag(StreamTransformer former, FMB_View_FMB_Group_List_In_Tag target)
        {
            former.writeMsgString(withoutSpace(target.h_passport));
            former.writeMsgChar(target.h_language);
            former.writeMsgString(withoutSpace(target.h_factory));
            former.writeMsgString(withoutSpace(target.h_user_id));
            former.writeMsgString(withoutSpace(target.h_password));
            former.writeMsgChar(target.h_proc_step);
            former.writeMsgString(withoutSpace(target.security_group));
            former.writeMsgString(withoutSpace(target.next_group));
            former.writeMsgString(withoutSpace(target.next_user));
        }

        public static void transform_FMB_View_FMB_Group_List_In_Tag(StreamTransformer former, ref FMB_View_FMB_Group_List_In_Tag source)
        {
            source.h_passport = deleteNull(former.readMsgString());
            source.h_language = former.readMsgChar();
            source.h_factory = deleteNull(former.readMsgString());
            source.h_user_id = deleteNull(former.readMsgString());
            source.h_password = deleteNull(former.readMsgString());
            source.h_proc_step = former.readMsgChar();
            source.security_group = deleteNull(former.readMsgString());
            source.next_group = deleteNull(former.readMsgString());
            source.next_user = deleteNull(former.readMsgString());
        }

        public static void serialize_FMB_View_FMB_Group_List_Out_Tag_udr_group_list(StreamTransformer former, FMB_View_FMB_Group_List_Out_Tag_udr_group_list target)
        {
            former.writeMsgString(withoutSpace(target.group));
            former.writeMsgString(withoutSpace(target.group_desc));
            former.writeMsgString(withoutSpace(target.user));
            former.writeMsgString(withoutSpace(target.user_desc));
        }

        public static void serialize_FMB_View_FMB_Group_List_Out_Tag(StreamTransformer former, FMB_View_FMB_Group_List_Out_Tag target)
        {
            former.writeMsgChar(target.h_status_value);
            former.writeMsgString(withoutSpace(target.h_msg_code));
            former.writeMsgString(withoutSpace(target.h_msg));
            former.writeMsgString(withoutSpace(target.h_field_msg));
            former.writeMsgString(withoutSpace(target.h_db_err_msg));
            former.writeMsgInt(target.count);
            former.writeMsgString(withoutSpace(target.next_group));
            former.writeMsgString(withoutSpace(target.next_user));
            target._size_udr_group_list = (1000 >= target._size_udr_group_list ? target._size_udr_group_list : 1000);
            former.writeMsgInt(target._size_udr_group_list);
            for(int i = 0; i < target._size_udr_group_list; i++)
            {
                serialize_FMB_View_FMB_Group_List_Out_Tag_udr_group_list(former, target.udr_group_list[i]);
            }
        }

        public static void transform_FMB_View_FMB_Group_List_Out_Tag_udr_group_list(StreamTransformer former, ref FMB_View_FMB_Group_List_Out_Tag_udr_group_list source)
        {
            source.group = deleteNull(former.readMsgString());
            source.group_desc = deleteNull(former.readMsgString());
            source.user = deleteNull(former.readMsgString());
            source.user_desc = deleteNull(former.readMsgString());
        }

        public static void transform_FMB_View_FMB_Group_List_Out_Tag(StreamTransformer former, ref FMB_View_FMB_Group_List_Out_Tag source)
        {
            source.h_status_value = former.readMsgChar();
            source.h_msg_code = deleteNull(former.readMsgString());
            source.h_msg = deleteNull(former.readMsgString());
            source.h_field_msg = deleteNull(former.readMsgString());
            source.h_db_err_msg = deleteNull(former.readMsgString());
            source.count = former.readMsgInt();
            source.next_group = deleteNull(former.readMsgString());
            source.next_user = deleteNull(former.readMsgString());
            source._size_udr_group_list = former.readMsgInt();
            source.udr_group_list = new FMB_View_FMB_Group_List_Out_Tag_udr_group_list[source._size_udr_group_list];
            for(int i = 0; i < source._size_udr_group_list; i++)
            {
                source.udr_group_list[i] = new FMB_View_FMB_Group_List_Out_Tag_udr_group_list();
                transform_FMB_View_FMB_Group_List_Out_Tag_udr_group_list(former, ref source.udr_group_list[i]);
            }
        }


    }
}

