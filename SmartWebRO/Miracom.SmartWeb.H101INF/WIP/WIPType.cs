/*******************************************************************************
' WIPType.cs
'
' Copyright (c) 2007 by Miracom,Inc.
' All rights reserved.
'
' Generated by DevTool XMLGen 1.0
'
' Created at 2008-05-30 15:32:03
'
' Author : Miracom. R&D.
' Description : DevTool Xml Generator Version 1.0
'******************************************************************************/

using System;
using com.miracom.transceiverx.message.former;

namespace Miracom.SmartWeb
{
    public class WIP_View_Factory_List_In_Tag
    {
        public string  h_passport;
        public char    h_language;
        public string  h_factory;
        public string  h_user_id;
        public string  h_password;
        public char    h_proc_step;
        public string  next_factory;
    }

    public class WIP_View_Factory_List_Out_Tag_factory_list
    {
        public string  factory;
        public string  fac_desc;
    }

    public class WIP_View_Factory_List_Out_Tag
    {
        public char    h_status_value;
        public string  h_msg_code;
        public string  h_msg;
        public string  h_field_msg;
        public string  h_db_err_msg;
        public int     count;
        public string  next_factory;
        public int     _size_factory_list;
        public WIP_View_Factory_List_Out_Tag_factory_list[] factory_list;
    }


    public class WIPType: h101type
    {
        public WIPType()
        {
        }

        public static void serialize_WIP_View_Factory_List_In_Tag(StreamTransformer former, WIP_View_Factory_List_In_Tag target)
        {
            former.writeMsgString(withoutSpace(target.h_passport));
            former.writeMsgChar(target.h_language);
            former.writeMsgString(withoutSpace(target.h_factory));
            former.writeMsgString(withoutSpace(target.h_user_id));
            former.writeMsgString(withoutSpace(target.h_password));
            former.writeMsgChar(target.h_proc_step);
            former.writeMsgString(withoutSpace(target.next_factory));
        }

        public static void transform_WIP_View_Factory_List_In_Tag(StreamTransformer former, ref WIP_View_Factory_List_In_Tag source)
        {
            source.h_passport = deleteNull(former.readMsgString());
            source.h_language = former.readMsgChar();
            source.h_factory = deleteNull(former.readMsgString());
            source.h_user_id = deleteNull(former.readMsgString());
            source.h_password = deleteNull(former.readMsgString());
            source.h_proc_step = former.readMsgChar();
            source.next_factory = deleteNull(former.readMsgString());
        }

        public static void serialize_WIP_View_Factory_List_Out_Tag_factory_list(StreamTransformer former, WIP_View_Factory_List_Out_Tag_factory_list target)
        {
            former.writeMsgString(withoutSpace(target.factory));
            former.writeMsgString(withoutSpace(target.fac_desc));
        }

        public static void serialize_WIP_View_Factory_List_Out_Tag(StreamTransformer former, WIP_View_Factory_List_Out_Tag target)
        {
            former.writeMsgChar(target.h_status_value);
            former.writeMsgString(withoutSpace(target.h_msg_code));
            former.writeMsgString(withoutSpace(target.h_msg));
            former.writeMsgString(withoutSpace(target.h_field_msg));
            former.writeMsgString(withoutSpace(target.h_db_err_msg));
            former.writeMsgInt(target.count);
            former.writeMsgString(withoutSpace(target.next_factory));
            target._size_factory_list = (1000 >= target._size_factory_list ? target._size_factory_list : 1000);
            former.writeMsgInt(target._size_factory_list);
            for(int i = 0; i < target._size_factory_list; i++)
            {
                serialize_WIP_View_Factory_List_Out_Tag_factory_list(former, target.factory_list[i]);
            }
        }

        public static void transform_WIP_View_Factory_List_Out_Tag_factory_list(StreamTransformer former, ref WIP_View_Factory_List_Out_Tag_factory_list source)
        {
            source.factory = deleteNull(former.readMsgString());
            source.fac_desc = deleteNull(former.readMsgString());
        }

        public static void transform_WIP_View_Factory_List_Out_Tag(StreamTransformer former, ref WIP_View_Factory_List_Out_Tag source)
        {
            source.h_status_value = former.readMsgChar();
            source.h_msg_code = deleteNull(former.readMsgString());
            source.h_msg = deleteNull(former.readMsgString());
            source.h_field_msg = deleteNull(former.readMsgString());
            source.h_db_err_msg = deleteNull(former.readMsgString());
            source.count = former.readMsgInt();
            source.next_factory = deleteNull(former.readMsgString());
            source._size_factory_list = former.readMsgInt();
            source.factory_list = new WIP_View_Factory_List_Out_Tag_factory_list[source._size_factory_list];
            for(int i = 0; i < source._size_factory_list; i++)
            {
                source.factory_list[i] = new WIP_View_Factory_List_Out_Tag_factory_list();
                transform_WIP_View_Factory_List_Out_Tag_factory_list(former, ref source.factory_list[i]);
            }
        }


    }
}

