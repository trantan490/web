/*******************************************************************************
' FMBCoreType.cs
'
' Copyright (c) 2007 by Miracom,Inc.
' All rights reserved.
'
' Generated by DevTool XMLGen 1.0
'
' Created at 2008-05-28 10:44:21
'
' Author : Miracom. R&D.
' Description : DevTool Xml Generator Version 1.0
'******************************************************************************/

using System;
using com.miracom.transceiverx.message.former;

namespace Miracom.SmartWeb
{
    public class FMB_Cmn_In_Tag
    {
        public string  h_passport;
        public char    h_language;
        public string  h_factory;
        public string  h_user_id;
        public string  h_password;
        public char    h_proc_step;
    }

    public class FMB_Cmn_Out_Tag
    {
        public char    h_status_value;
        public string  h_msg_code;
        public string  h_msg;
        public string  h_field_msg;
        public string  h_db_err_msg;
    }

    public class FMB_Login_In_Tag
    {
        public string  h_passport;
        public char    h_language;
        public string  h_factory;
        public string  h_user_id;
        public string  h_password;
        public char    h_proc_step;
        public string  h_program_id;
    }

    public class FMB_Login_Out_Tag
    {
        public char    h_status_value;
        public string  h_msg_code;
        public string  h_msg;
        public string  h_field_msg;
        public string  h_db_err_msg;
        public string  user_id;
        public string  user_desc;
        public string  password;
        public char    chg_pass_flag;
        public string  user_grp_1;
        public string  user_grp_2;
        public string  user_grp_3;
        public string  user_grp_4;
        public string  user_grp_5;
        public string  user_grp_6;
        public string  user_grp_7;
        public string  user_grp_8;
        public string  user_grp_9;
        public string  user_grp_10;
        public string  user_cmf_1;
        public string  user_cmf_2;
        public string  user_cmf_3;
        public string  user_cmf_4;
        public string  user_cmf_5;
        public string  user_cmf_6;
        public string  user_cmf_7;
        public string  user_cmf_8;
        public string  user_cmf_9;
        public string  user_cmf_10;
        public string  sec_grp_id;
        public string  phone_office;
        public string  phone_mobile;
        public string  phone_home;
        public string  phone_other;
        public string  enter_date;
        public string  retire_date;
        public string  email_id;
        public string  birthday;
        public char    sex_flag;
        public string  create_user_id;
        public string  create_time;
        public string  update_user_id;
        public string  update_time;
        public char    auto_upgrade_flag;
        public char    use_samll_letter_flag;
        public string  server_version;
        public string  upgrade_version;
        public string  upgrade_method;
        public string  upgrade_address;
        public string  upgrade_user_id;
        public string  upgrade_password;
        public string  upgrade_directory;
    }

    public class FMB_Check_Version_In_Tag
    {
        public string  h_passport;
        public char    h_language;
        public string  h_factory;
        public string  h_user_id;
        public string  h_password;
        public char    h_proc_step;
        public string  h_program_id;
    }

    public class FMB_Check_Version_Out_Tag
    {
        public char    h_status_value;
        public string  h_msg_code;
        public string  h_msg;
        public string  h_field_msg;
        public string  h_db_err_msg;
        public string  server_version;
        public string  upgrade_version;
        public string  upgrade_method;
        public string  upgrade_address;
        public string  upgrade_user_id;
        public string  upgrade_password;
        public string  upgrade_directory;
    }

    public class FMB_UPDATE_RESLOC_IN_TAG
    {
        public string  h_passport;
        public char    h_language;
        public string  h_factory;
        public string  h_user_id;
        public string  h_password;
        public char    h_proc_step;
        public string  res_id;
        public int     seq;
        public char    res_type;
        public string  layout_id;
        public int     loc_x;
        public int     loc_y;
        public int     loc_width;
        public int     loc_height;
        public string  text;
        public int     text_size;
        public int     text_color;
        public char    text_style;
        public int     tag_type;
        public int     back_color;
        public int     img_idx;
        public char    no_mouse_event;
        public char    signal_flag;
    }

    public class FMB_UPDATE_UDR_GROUP_IN_TAG
    {
        public string  h_passport;
        public char    h_language;
        public string  h_factory;
        public string  h_user_id;
        public string  h_password;
        public char    h_proc_step;
        public string  group;
        public string  group_desc;
        public string  create_time;
        public string  update_time;
        public int     width;
        public int     height;
    }

    public class FMB_UPDATE_UDR_RESLOC_IN_TAG
    {
        public string  h_passport;
        public char    h_language;
        public string  h_factory;
        public string  h_user_id;
        public string  h_password;
        public char    h_proc_step;
        public string  group;
        public string  res_id;
        public int     seq;
        public char    res_type;
        public int     loc_x;
        public int     loc_y;
        public int     loc_width;
        public int     loc_height;
        public string  text;
        public int     text_size;
        public int     text_color;
        public char    text_style;
        public int     tag_type;
        public int     back_color;
        public string  create_time;
        public string  update_time;
        public int     img_idx;
        public char    no_mouse_event;
        public char    signal_flag;
    }

    public class FMB_UPDATE_LAYOUT_IN_TAG
    {
        public string  h_passport;
        public char    h_language;
        public string  h_factory;
        public string  h_user_id;
        public string  h_password;
        public char    h_proc_step;
        public string  layout_id;
        public string  layout_desc;
        public int     width;
        public int     height;
    }

    public class FMB_MOVING_BY_FORCE_IN_TAG
    {
        public string  h_passport;
        public char    h_language;
        public string  h_factory;
        public string  h_user_id;
        public string  h_password;
        public char    h_proc_step;
        public char    layout_group_flag;
        public string  layout_id;
        public string  group_id;
        public int     width;
        public int     height;
    }

    public class FMB_EXIST_CONTROL_IN_TAG
    {
        public string  h_passport;
        public char    h_language;
        public string  h_factory;
        public string  h_user_id;
        public string  h_password;
        public char    h_proc_step;
        public char    layout_group_flag;
        public string  layout_id;
        public string  group_id;
        public int     width;
        public int     height;
    }

    public class FMB_EXIST_CONTROL_OUT_TAG
    {
        public char    h_status_value;
        public string  h_msg_code;
        public string  h_msg;
        public string  h_field_msg;
        public string  h_db_err_msg;
        public char    exist_flag;
    }

    public class FMB_RESOURCE_PRIORITY_IN_TAG
    {
        public string  h_passport;
        public char    h_language;
        public string  h_factory;
        public string  h_user_id;
        public string  h_password;
        public char    h_proc_step;
        public string  res_id;
        public char    res_type;
        public int     seq;
        public string  layout_id;
    }

    public class FMB_UDR_PRIORITY_IN_TAG
    {
        public string  h_passport;
        public char    h_language;
        public string  h_factory;
        public string  h_user_id;
        public string  h_password;
        public char    h_proc_step;
        public string  group;
        public string  res_id;
        public char    res_type;
        public int     seq;
    }

    public class FMB_RESOURCE_EVENT_IN_TAG_lot_list
    {
        public string  lot_id;
        public string  crr_id;
        public string  oper;
        public double  qty_1;
        public double  qty_2;
        public int     hist_seq;
    }

    public class FMB_RESOURCE_EVENT_IN_TAG_char_list_value_list
    {
        public string  value;
    }

    public class FMB_RESOURCE_EVENT_IN_TAG_char_list
    {
        public int     char_seq_num;
        public string  char_id;
        public int     unit_seq_num;
        public string  unit_id;
        public int     value_seq_num;
        public char    value_type;
        public int     value_count;
        public int     _size_value_list;
        public FMB_RESOURCE_EVENT_IN_TAG_char_list_value_list[] value_list;
        public string  spec_out_mask;
        public int     spec_out_count;
        public char    rec_save_flag;
    }

    public class FMB_RESOURCE_EVENT_IN_TAG_chart_list_value_list
    {
        public string  value;
    }

    public class FMB_RESOURCE_EVENT_IN_TAG_chart_list
    {
        public string  chart_id;
        public int     unit_count;
        public int     sample_size;
        public string  graph_type;
        public char    unit_use_flag;
        public string  unit_id;
        public int     unit_seq;
        public int     value_seq;
        public int     value_count;
        public string  nominal;
        public string  process_sigma;
        public string  edc_comment;
        public int     _size_value_list;
        public FMB_RESOURCE_EVENT_IN_TAG_chart_list_value_list[] value_list;
    }

    public class FMB_RESOURCE_EVENT_IN_TAG
    {
        public string  h_passport;
        public char    h_language;
        public string  h_factory;
        public string  h_user_id;
        public string  h_password;
        public char    h_proc_step;
        public string  back_time;
        public char    back_time_flag;
        public char    chart_flag;
        public int     count;
        public string  res_id;
        public string  event_id;
        public char    lot_event_flag;
        public char    batch_flag;
        public string  chg_pri_sts;
        public string  chg_sts_1;
        public string  chg_sts_2;
        public string  chg_sts_3;
        public string  chg_sts_4;
        public string  chg_sts_5;
        public string  chg_sts_6;
        public string  chg_sts_7;
        public string  chg_sts_8;
        public string  chg_sts_9;
        public string  chg_sts_10;
        public string  tran_cmf_1;
        public string  tran_cmf_2;
        public string  tran_cmf_3;
        public string  tran_cmf_4;
        public string  tran_cmf_5;
        public string  tran_cmf_6;
        public string  tran_cmf_7;
        public string  tran_cmf_8;
        public string  tran_cmf_9;
        public string  tran_cmf_10;
        public string  tran_cmf_11;
        public string  tran_cmf_12;
        public string  tran_cmf_13;
        public string  tran_cmf_14;
        public string  tran_cmf_15;
        public string  tran_cmf_16;
        public string  tran_cmf_17;
        public string  tran_cmf_18;
        public string  tran_cmf_19;
        public string  tran_cmf_20;
        public string  tran_comment;
        public int     lot_count;
        public int     _size_lot_list;
        public FMB_RESOURCE_EVENT_IN_TAG_lot_list[] lot_list;
        public int     edc_hist_seq;
        public char    spec_out_flag;
        public int     confirm_char_seq;
        public int     confirm_unit_seq;
        public int     confirm_value_seq;
        public int     hist_seq;
        public string  tran_time;
        public string  col_set_id;
        public int     col_set_version;
        public int     char_count;
        public int     _size_char_list;
        public FMB_RESOURCE_EVENT_IN_TAG_char_list[] char_list;
        public char    h_sub_step;
        public char    lot_res_flag;
        public int     spc_count;
        public int     edc_char_seq;
        public char    edc_input_flag;
        public int     _size_chart_list;
        public FMB_RESOURCE_EVENT_IN_TAG_chart_list[] chart_list;
    }

    public class FMB_RESOURCE_EVENT_OUT_TAG_char_list
    {
        public int     char_seq_num;
        public string  char_id;
        public int     unit_seq_num;
        public string  unit_id;
        public int     value_seq_num;
        public char    value_type;
        public string  spec_out_mask;
        public int     spec_out_count;
        public char    rec_save_flag;
        public char    spec_out_type;
        public int     unit_count;
    }

    public class FMB_RESOURCE_EVENT_OUT_TAG_oos_list
    {
        public string  oos_check_result;
    }

    public class FMB_RESOURCE_EVENT_OUT_TAG_chart_list
    {
        public string  chart_id;
        public int     hist_seq;
        public string  tran_time;
        public int     unit_seq;
        public string  weight_value;
        public string  average;
        public string  stddev;
        public string  range;
        public string  min_value;
        public string  max_value;
        public char    x_check_result;
        public char    r_check_result;
    }

    public class FMB_RESOURCE_EVENT_OUT_TAG
    {
        public char    h_status_value;
        public string  h_msg_code;
        public string  h_msg;
        public string  h_field_msg;
        public string  h_db_err_msg;
        public int     count;
        public int     res_hist_seq;
        public int     confirm_char_seq;
        public int     confirm_unit_seq;
        public int     confirm_value_seq;
        public int     _size_char_list;
        public FMB_RESOURCE_EVENT_OUT_TAG_char_list[] char_list;
        public int     spc_count;
        public int     _size_oos_list;
        public FMB_RESOURCE_EVENT_OUT_TAG_oos_list[] oos_list;
        public int     _size_chart_list;
        public FMB_RESOURCE_EVENT_OUT_TAG_chart_list[] chart_list;
    }

    public class FMB_UPDATE_ENVIRONMENT_IN_TAG
    {
        public string  h_passport;
        public char    h_language;
        public string  h_factory;
        public string  h_user_id;
        public string  h_password;
        public char    h_proc_step;
        public string  font_family;
        public int     res_width;
        public int     res_height;
        public int     rtg_width;
        public int     rtg_height;
        public int     elp_width;
        public int     elp_height;
        public int     tri_width;
        public int     tri_height;
        public int     ver_width;
        public int     ver_height;
        public int     hor_width;
        public int     hor_height;
        public int     pie1_width;
        public int     pie1_height;
        public int     pie2_width;
        public int     pie2_height;
        public int     pie3_width;
        public int     pie3_height;
        public int     pie4_width;
        public int     pie4_height;
        public int     layout_width;
        public int     layout_height;
        public int     udr_width;
        public int     udr_height;
        public char    event_color_flag;
        public char    signal_flag;
        public int     text_size;
        public int     text_color;
        public int     back_color;
    }

    public class FMB_UPDATE_EVENT_COLOR_IN_TAG_event_list
    {
        public string  event_id;
        public int     color;
    }

    public class FMB_UPDATE_EVENT_COLOR_IN_TAG
    {
        public string  h_passport;
        public char    h_language;
        public string  h_user_id;
        public string  h_password;
        public char    h_proc_step;
        public string  h_factory;
        public int     count;
        public int     _size_event_list;
        public FMB_UPDATE_EVENT_COLOR_IN_TAG_event_list[] event_list;
    }

    public class FMB_UPDATE_RESOURCE_IMAGE_IN_TAG
    {
        public string  h_passport;
        public char    h_language;
        public string  h_user_id;
        public string  h_password;
        public char    h_proc_step;
        public string  h_factory;
        public string  res_id;
        public int     img_idx;
    }

    public class FMB_UPDATE_RESLOC_LIST_IN_TAG_res_list
    {
        public string  res_id;
        public int     seq;
        public char    res_type;
        public int     loc_x;
        public int     loc_y;
        public int     loc_width;
        public int     loc_height;
        public string  text;
        public int     text_size;
        public int     text_color;
        public char    text_style;
        public int     tag_type;
        public int     back_color;
        public int     img_idx;
        public char    signal_flag;
    }

    public class FMB_UPDATE_RESLOC_LIST_IN_TAG
    {
        public string  h_passport;
        public char    h_language;
        public string  h_factory;
        public string  h_user_id;
        public string  h_password;
        public char    h_proc_step;
        public string  layout_id;
        public int     count;
        public int     _size_res_list;
        public FMB_UPDATE_RESLOC_LIST_IN_TAG_res_list[] res_list;
    }

    public class FMB_UPDATE_UDRLOC_LIST_IN_TAG_res_list
    {
        public string  res_id;
        public int     seq;
        public char    res_type;
        public int     loc_x;
        public int     loc_y;
        public int     loc_width;
        public int     loc_height;
        public string  text;
        public int     text_size;
        public int     text_color;
        public char    text_style;
        public int     tag_type;
        public int     back_color;
        public string  create_time;
        public string  update_time;
        public int     img_idx;
        public char    signal_flag;
    }

    public class FMB_UPDATE_UDRLOC_LIST_IN_TAG
    {
        public string  h_passport;
        public char    h_language;
        public string  h_factory;
        public string  h_user_id;
        public string  h_password;
        public char    h_proc_step;
        public string  group;
        public int     count;
        public int     _size_res_list;
        public FMB_UPDATE_UDRLOC_LIST_IN_TAG_res_list[] res_list;
    }

    public class FMB_COPY_UDR_GROUP_IN_TAG
    {
        public string  h_passport;
        public char    h_language;
        public string  h_factory;
        public string  h_user_id;
        public string  h_password;
        public char    h_proc_step;
        public string  from_group;
        public string  to_group;
    }

    public class FMB_UPDATE_FMB_GROUP_IN_TAG
    {
        public string  h_passport;
        public char    h_language;
        public string  h_factory;
        public string  h_user_id;
        public string  h_password;
        public char    h_proc_step;
        public string  group;
        public string  user;
    }

    public class FMB_FIND_COL_SET_VERSION_IN_TAG
    {
        public string  h_passport;
        public char    h_language;
        public string  h_factory;
        public string  h_user_id;
        public string  h_password;
        public char    h_proc_step;
        public string  lot_id;
        public string  mat_id;
        public int     mat_ver;
        public string  flow;
        public string  oper;
        public string  event_id;
        public string  col_set_id;
        public char    lot_or_res_flag;
    }

    public class FMB_FIND_COL_SET_VERSION_OUT_TAG
    {
        public char    h_status_value;
        public string  h_msg_code;
        public string  h_msg;
        public string  h_field_msg;
        public string  h_db_err_msg;
        public string  col_set_id;
        public int     col_set_version;
    }


    public class FMBCoreType: h101type
    {
        public FMBCoreType()
        {
        }

        public static void serialize_FMB_Cmn_In_Tag(StreamTransformer former, FMB_Cmn_In_Tag target)
        {
            former.writeMsgString(withoutSpace(target.h_passport));
            former.writeMsgChar(target.h_language);
            former.writeMsgString(withoutSpace(target.h_factory));
            former.writeMsgString(withoutSpace(target.h_user_id));
            former.writeMsgString(withoutSpace(target.h_password));
            former.writeMsgChar(target.h_proc_step);
        }

        public static void transform_FMB_Cmn_In_Tag(StreamTransformer former, ref FMB_Cmn_In_Tag source)
        {
            source.h_passport = deleteNull(former.readMsgString());
            source.h_language = former.readMsgChar();
            source.h_factory = deleteNull(former.readMsgString());
            source.h_user_id = deleteNull(former.readMsgString());
            source.h_password = deleteNull(former.readMsgString());
            source.h_proc_step = former.readMsgChar();
        }

        public static void serialize_FMB_Cmn_Out_Tag(StreamTransformer former, FMB_Cmn_Out_Tag target)
        {
            former.writeMsgChar(target.h_status_value);
            former.writeMsgString(withoutSpace(target.h_msg_code));
            former.writeMsgString(withoutSpace(target.h_msg));
            former.writeMsgString(withoutSpace(target.h_field_msg));
            former.writeMsgString(withoutSpace(target.h_db_err_msg));
        }

        public static void transform_FMB_Cmn_Out_Tag(StreamTransformer former, ref FMB_Cmn_Out_Tag source)
        {
            source.h_status_value = former.readMsgChar();
            source.h_msg_code = deleteNull(former.readMsgString());
            source.h_msg = deleteNull(former.readMsgString());
            source.h_field_msg = deleteNull(former.readMsgString());
            source.h_db_err_msg = deleteNull(former.readMsgString());
        }

        public static void serialize_FMB_Login_In_Tag(StreamTransformer former, FMB_Login_In_Tag target)
        {
            former.writeMsgString(withoutSpace(target.h_passport));
            former.writeMsgChar(target.h_language);
            former.writeMsgString(withoutSpace(target.h_factory));
            former.writeMsgString(withoutSpace(target.h_user_id));
            former.writeMsgString(withoutSpace(target.h_password));
            former.writeMsgChar(target.h_proc_step);
            former.writeMsgString(withoutSpace(target.h_program_id));
        }

        public static void transform_FMB_Login_In_Tag(StreamTransformer former, ref FMB_Login_In_Tag source)
        {
            source.h_passport = deleteNull(former.readMsgString());
            source.h_language = former.readMsgChar();
            source.h_factory = deleteNull(former.readMsgString());
            source.h_user_id = deleteNull(former.readMsgString());
            source.h_password = deleteNull(former.readMsgString());
            source.h_proc_step = former.readMsgChar();
            source.h_program_id = deleteNull(former.readMsgString());
        }

        public static void serialize_FMB_Login_Out_Tag(StreamTransformer former, FMB_Login_Out_Tag target)
        {
            former.writeMsgChar(target.h_status_value);
            former.writeMsgString(withoutSpace(target.h_msg_code));
            former.writeMsgString(withoutSpace(target.h_msg));
            former.writeMsgString(withoutSpace(target.h_field_msg));
            former.writeMsgString(withoutSpace(target.h_db_err_msg));
            former.writeMsgString(withoutSpace(target.user_id));
            former.writeMsgString(withoutSpace(target.user_desc));
            former.writeMsgString(withoutSpace(target.password));
            former.writeMsgChar(target.chg_pass_flag);
            former.writeMsgString(withoutSpace(target.user_grp_1));
            former.writeMsgString(withoutSpace(target.user_grp_2));
            former.writeMsgString(withoutSpace(target.user_grp_3));
            former.writeMsgString(withoutSpace(target.user_grp_4));
            former.writeMsgString(withoutSpace(target.user_grp_5));
            former.writeMsgString(withoutSpace(target.user_grp_6));
            former.writeMsgString(withoutSpace(target.user_grp_7));
            former.writeMsgString(withoutSpace(target.user_grp_8));
            former.writeMsgString(withoutSpace(target.user_grp_9));
            former.writeMsgString(withoutSpace(target.user_grp_10));
            former.writeMsgString(withoutSpace(target.user_cmf_1));
            former.writeMsgString(withoutSpace(target.user_cmf_2));
            former.writeMsgString(withoutSpace(target.user_cmf_3));
            former.writeMsgString(withoutSpace(target.user_cmf_4));
            former.writeMsgString(withoutSpace(target.user_cmf_5));
            former.writeMsgString(withoutSpace(target.user_cmf_6));
            former.writeMsgString(withoutSpace(target.user_cmf_7));
            former.writeMsgString(withoutSpace(target.user_cmf_8));
            former.writeMsgString(withoutSpace(target.user_cmf_9));
            former.writeMsgString(withoutSpace(target.user_cmf_10));
            former.writeMsgString(withoutSpace(target.sec_grp_id));
            former.writeMsgString(withoutSpace(target.phone_office));
            former.writeMsgString(withoutSpace(target.phone_mobile));
            former.writeMsgString(withoutSpace(target.phone_home));
            former.writeMsgString(withoutSpace(target.phone_other));
            former.writeMsgString(withoutSpace(target.enter_date));
            former.writeMsgString(withoutSpace(target.retire_date));
            former.writeMsgString(withoutSpace(target.email_id));
            former.writeMsgString(withoutSpace(target.birthday));
            former.writeMsgChar(target.sex_flag);
            former.writeMsgString(withoutSpace(target.create_user_id));
            former.writeMsgString(withoutSpace(target.create_time));
            former.writeMsgString(withoutSpace(target.update_user_id));
            former.writeMsgString(withoutSpace(target.update_time));
            former.writeMsgChar(target.auto_upgrade_flag);
            former.writeMsgChar(target.use_samll_letter_flag);
            former.writeMsgString(withoutSpace(target.server_version));
            former.writeMsgString(withoutSpace(target.upgrade_version));
            former.writeMsgString(withoutSpace(target.upgrade_method));
            former.writeMsgString(withoutSpace(target.upgrade_address));
            former.writeMsgString(withoutSpace(target.upgrade_user_id));
            former.writeMsgString(withoutSpace(target.upgrade_password));
            former.writeMsgString(withoutSpace(target.upgrade_directory));
        }

        public static void transform_FMB_Login_Out_Tag(StreamTransformer former, ref FMB_Login_Out_Tag source)
        {
            source.h_status_value = former.readMsgChar();
            source.h_msg_code = deleteNull(former.readMsgString());
            source.h_msg = deleteNull(former.readMsgString());
            source.h_field_msg = deleteNull(former.readMsgString());
            source.h_db_err_msg = deleteNull(former.readMsgString());
            source.user_id = deleteNull(former.readMsgString());
            source.user_desc = deleteNull(former.readMsgString());
            source.password = deleteNull(former.readMsgString());
            source.chg_pass_flag = former.readMsgChar();
            source.user_grp_1 = deleteNull(former.readMsgString());
            source.user_grp_2 = deleteNull(former.readMsgString());
            source.user_grp_3 = deleteNull(former.readMsgString());
            source.user_grp_4 = deleteNull(former.readMsgString());
            source.user_grp_5 = deleteNull(former.readMsgString());
            source.user_grp_6 = deleteNull(former.readMsgString());
            source.user_grp_7 = deleteNull(former.readMsgString());
            source.user_grp_8 = deleteNull(former.readMsgString());
            source.user_grp_9 = deleteNull(former.readMsgString());
            source.user_grp_10 = deleteNull(former.readMsgString());
            source.user_cmf_1 = deleteNull(former.readMsgString());
            source.user_cmf_2 = deleteNull(former.readMsgString());
            source.user_cmf_3 = deleteNull(former.readMsgString());
            source.user_cmf_4 = deleteNull(former.readMsgString());
            source.user_cmf_5 = deleteNull(former.readMsgString());
            source.user_cmf_6 = deleteNull(former.readMsgString());
            source.user_cmf_7 = deleteNull(former.readMsgString());
            source.user_cmf_8 = deleteNull(former.readMsgString());
            source.user_cmf_9 = deleteNull(former.readMsgString());
            source.user_cmf_10 = deleteNull(former.readMsgString());
            source.sec_grp_id = deleteNull(former.readMsgString());
            source.phone_office = deleteNull(former.readMsgString());
            source.phone_mobile = deleteNull(former.readMsgString());
            source.phone_home = deleteNull(former.readMsgString());
            source.phone_other = deleteNull(former.readMsgString());
            source.enter_date = deleteNull(former.readMsgString());
            source.retire_date = deleteNull(former.readMsgString());
            source.email_id = deleteNull(former.readMsgString());
            source.birthday = deleteNull(former.readMsgString());
            source.sex_flag = former.readMsgChar();
            source.create_user_id = deleteNull(former.readMsgString());
            source.create_time = deleteNull(former.readMsgString());
            source.update_user_id = deleteNull(former.readMsgString());
            source.update_time = deleteNull(former.readMsgString());
            source.auto_upgrade_flag = former.readMsgChar();
            source.use_samll_letter_flag = former.readMsgChar();
            source.server_version = deleteNull(former.readMsgString());
            source.upgrade_version = deleteNull(former.readMsgString());
            source.upgrade_method = deleteNull(former.readMsgString());
            source.upgrade_address = deleteNull(former.readMsgString());
            source.upgrade_user_id = deleteNull(former.readMsgString());
            source.upgrade_password = deleteNull(former.readMsgString());
            source.upgrade_directory = deleteNull(former.readMsgString());
        }

        public static void serialize_FMB_Check_Version_In_Tag(StreamTransformer former, FMB_Check_Version_In_Tag target)
        {
            former.writeMsgString(withoutSpace(target.h_passport));
            former.writeMsgChar(target.h_language);
            former.writeMsgString(withoutSpace(target.h_factory));
            former.writeMsgString(withoutSpace(target.h_user_id));
            former.writeMsgString(withoutSpace(target.h_password));
            former.writeMsgChar(target.h_proc_step);
            former.writeMsgString(withoutSpace(target.h_program_id));
        }

        public static void transform_FMB_Check_Version_In_Tag(StreamTransformer former, ref FMB_Check_Version_In_Tag source)
        {
            source.h_passport = deleteNull(former.readMsgString());
            source.h_language = former.readMsgChar();
            source.h_factory = deleteNull(former.readMsgString());
            source.h_user_id = deleteNull(former.readMsgString());
            source.h_password = deleteNull(former.readMsgString());
            source.h_proc_step = former.readMsgChar();
            source.h_program_id = deleteNull(former.readMsgString());
        }

        public static void serialize_FMB_Check_Version_Out_Tag(StreamTransformer former, FMB_Check_Version_Out_Tag target)
        {
            former.writeMsgChar(target.h_status_value);
            former.writeMsgString(withoutSpace(target.h_msg_code));
            former.writeMsgString(withoutSpace(target.h_msg));
            former.writeMsgString(withoutSpace(target.h_field_msg));
            former.writeMsgString(withoutSpace(target.h_db_err_msg));
            former.writeMsgString(withoutSpace(target.server_version));
            former.writeMsgString(withoutSpace(target.upgrade_version));
            former.writeMsgString(withoutSpace(target.upgrade_method));
            former.writeMsgString(withoutSpace(target.upgrade_address));
            former.writeMsgString(withoutSpace(target.upgrade_user_id));
            former.writeMsgString(withoutSpace(target.upgrade_password));
            former.writeMsgString(withoutSpace(target.upgrade_directory));
        }

        public static void transform_FMB_Check_Version_Out_Tag(StreamTransformer former, ref FMB_Check_Version_Out_Tag source)
        {
            source.h_status_value = former.readMsgChar();
            source.h_msg_code = deleteNull(former.readMsgString());
            source.h_msg = deleteNull(former.readMsgString());
            source.h_field_msg = deleteNull(former.readMsgString());
            source.h_db_err_msg = deleteNull(former.readMsgString());
            source.server_version = deleteNull(former.readMsgString());
            source.upgrade_version = deleteNull(former.readMsgString());
            source.upgrade_method = deleteNull(former.readMsgString());
            source.upgrade_address = deleteNull(former.readMsgString());
            source.upgrade_user_id = deleteNull(former.readMsgString());
            source.upgrade_password = deleteNull(former.readMsgString());
            source.upgrade_directory = deleteNull(former.readMsgString());
        }

        public static void serialize_FMB_UPDATE_RESLOC_IN_TAG(StreamTransformer former, FMB_UPDATE_RESLOC_IN_TAG target)
        {
            former.writeMsgString(withoutSpace(target.h_passport));
            former.writeMsgChar(target.h_language);
            former.writeMsgString(withoutSpace(target.h_factory));
            former.writeMsgString(withoutSpace(target.h_user_id));
            former.writeMsgString(withoutSpace(target.h_password));
            former.writeMsgChar(target.h_proc_step);
            former.writeMsgString(withoutSpace(target.res_id));
            former.writeMsgInt(target.seq);
            former.writeMsgChar(target.res_type);
            former.writeMsgString(withoutSpace(target.layout_id));
            former.writeMsgInt(target.loc_x);
            former.writeMsgInt(target.loc_y);
            former.writeMsgInt(target.loc_width);
            former.writeMsgInt(target.loc_height);
            former.writeMsgString(withoutSpace(target.text));
            former.writeMsgInt(target.text_size);
            former.writeMsgInt(target.text_color);
            former.writeMsgChar(target.text_style);
            former.writeMsgInt(target.tag_type);
            former.writeMsgInt(target.back_color);
            former.writeMsgInt(target.img_idx);
            former.writeMsgChar(target.no_mouse_event);
            former.writeMsgChar(target.signal_flag);
        }

        public static void transform_FMB_UPDATE_RESLOC_IN_TAG(StreamTransformer former, ref FMB_UPDATE_RESLOC_IN_TAG source)
        {
            source.h_passport = deleteNull(former.readMsgString());
            source.h_language = former.readMsgChar();
            source.h_factory = deleteNull(former.readMsgString());
            source.h_user_id = deleteNull(former.readMsgString());
            source.h_password = deleteNull(former.readMsgString());
            source.h_proc_step = former.readMsgChar();
            source.res_id = deleteNull(former.readMsgString());
            source.seq = former.readMsgInt();
            source.res_type = former.readMsgChar();
            source.layout_id = deleteNull(former.readMsgString());
            source.loc_x = former.readMsgInt();
            source.loc_y = former.readMsgInt();
            source.loc_width = former.readMsgInt();
            source.loc_height = former.readMsgInt();
            source.text = deleteNull(former.readMsgString());
            source.text_size = former.readMsgInt();
            source.text_color = former.readMsgInt();
            source.text_style = former.readMsgChar();
            source.tag_type = former.readMsgInt();
            source.back_color = former.readMsgInt();
            source.img_idx = former.readMsgInt();
            source.no_mouse_event = former.readMsgChar();
            source.signal_flag = former.readMsgChar();
        }

        public static void serialize_FMB_UPDATE_UDR_GROUP_IN_TAG(StreamTransformer former, FMB_UPDATE_UDR_GROUP_IN_TAG target)
        {
            former.writeMsgString(withoutSpace(target.h_passport));
            former.writeMsgChar(target.h_language);
            former.writeMsgString(withoutSpace(target.h_factory));
            former.writeMsgString(withoutSpace(target.h_user_id));
            former.writeMsgString(withoutSpace(target.h_password));
            former.writeMsgChar(target.h_proc_step);
            former.writeMsgString(withoutSpace(target.group));
            former.writeMsgString(withoutSpace(target.group_desc));
            former.writeMsgString(withoutSpace(target.create_time));
            former.writeMsgString(withoutSpace(target.update_time));
            former.writeMsgInt(target.width);
            former.writeMsgInt(target.height);
        }

        public static void transform_FMB_UPDATE_UDR_GROUP_IN_TAG(StreamTransformer former, ref FMB_UPDATE_UDR_GROUP_IN_TAG source)
        {
            source.h_passport = deleteNull(former.readMsgString());
            source.h_language = former.readMsgChar();
            source.h_factory = deleteNull(former.readMsgString());
            source.h_user_id = deleteNull(former.readMsgString());
            source.h_password = deleteNull(former.readMsgString());
            source.h_proc_step = former.readMsgChar();
            source.group = deleteNull(former.readMsgString());
            source.group_desc = deleteNull(former.readMsgString());
            source.create_time = deleteNull(former.readMsgString());
            source.update_time = deleteNull(former.readMsgString());
            source.width = former.readMsgInt();
            source.height = former.readMsgInt();
        }

        public static void serialize_FMB_UPDATE_UDR_RESLOC_IN_TAG(StreamTransformer former, FMB_UPDATE_UDR_RESLOC_IN_TAG target)
        {
            former.writeMsgString(withoutSpace(target.h_passport));
            former.writeMsgChar(target.h_language);
            former.writeMsgString(withoutSpace(target.h_factory));
            former.writeMsgString(withoutSpace(target.h_user_id));
            former.writeMsgString(withoutSpace(target.h_password));
            former.writeMsgChar(target.h_proc_step);
            former.writeMsgString(withoutSpace(target.group));
            former.writeMsgString(withoutSpace(target.res_id));
            former.writeMsgInt(target.seq);
            former.writeMsgChar(target.res_type);
            former.writeMsgInt(target.loc_x);
            former.writeMsgInt(target.loc_y);
            former.writeMsgInt(target.loc_width);
            former.writeMsgInt(target.loc_height);
            former.writeMsgString(withoutSpace(target.text));
            former.writeMsgInt(target.text_size);
            former.writeMsgInt(target.text_color);
            former.writeMsgChar(target.text_style);
            former.writeMsgInt(target.tag_type);
            former.writeMsgInt(target.back_color);
            former.writeMsgString(withoutSpace(target.create_time));
            former.writeMsgString(withoutSpace(target.update_time));
            former.writeMsgInt(target.img_idx);
            former.writeMsgChar(target.no_mouse_event);
            former.writeMsgChar(target.signal_flag);
        }

        public static void transform_FMB_UPDATE_UDR_RESLOC_IN_TAG(StreamTransformer former, ref FMB_UPDATE_UDR_RESLOC_IN_TAG source)
        {
            source.h_passport = deleteNull(former.readMsgString());
            source.h_language = former.readMsgChar();
            source.h_factory = deleteNull(former.readMsgString());
            source.h_user_id = deleteNull(former.readMsgString());
            source.h_password = deleteNull(former.readMsgString());
            source.h_proc_step = former.readMsgChar();
            source.group = deleteNull(former.readMsgString());
            source.res_id = deleteNull(former.readMsgString());
            source.seq = former.readMsgInt();
            source.res_type = former.readMsgChar();
            source.loc_x = former.readMsgInt();
            source.loc_y = former.readMsgInt();
            source.loc_width = former.readMsgInt();
            source.loc_height = former.readMsgInt();
            source.text = deleteNull(former.readMsgString());
            source.text_size = former.readMsgInt();
            source.text_color = former.readMsgInt();
            source.text_style = former.readMsgChar();
            source.tag_type = former.readMsgInt();
            source.back_color = former.readMsgInt();
            source.create_time = deleteNull(former.readMsgString());
            source.update_time = deleteNull(former.readMsgString());
            source.img_idx = former.readMsgInt();
            source.no_mouse_event = former.readMsgChar();
            source.signal_flag = former.readMsgChar();
        }

        public static void serialize_FMB_UPDATE_LAYOUT_IN_TAG(StreamTransformer former, FMB_UPDATE_LAYOUT_IN_TAG target)
        {
            former.writeMsgString(withoutSpace(target.h_passport));
            former.writeMsgChar(target.h_language);
            former.writeMsgString(withoutSpace(target.h_factory));
            former.writeMsgString(withoutSpace(target.h_user_id));
            former.writeMsgString(withoutSpace(target.h_password));
            former.writeMsgChar(target.h_proc_step);
            former.writeMsgString(withoutSpace(target.layout_id));
            former.writeMsgString(withoutSpace(target.layout_desc));
            former.writeMsgInt(target.width);
            former.writeMsgInt(target.height);
        }

        public static void transform_FMB_UPDATE_LAYOUT_IN_TAG(StreamTransformer former, ref FMB_UPDATE_LAYOUT_IN_TAG source)
        {
            source.h_passport = deleteNull(former.readMsgString());
            source.h_language = former.readMsgChar();
            source.h_factory = deleteNull(former.readMsgString());
            source.h_user_id = deleteNull(former.readMsgString());
            source.h_password = deleteNull(former.readMsgString());
            source.h_proc_step = former.readMsgChar();
            source.layout_id = deleteNull(former.readMsgString());
            source.layout_desc = deleteNull(former.readMsgString());
            source.width = former.readMsgInt();
            source.height = former.readMsgInt();
        }

        public static void serialize_FMB_MOVING_BY_FORCE_IN_TAG(StreamTransformer former, FMB_MOVING_BY_FORCE_IN_TAG target)
        {
            former.writeMsgString(withoutSpace(target.h_passport));
            former.writeMsgChar(target.h_language);
            former.writeMsgString(withoutSpace(target.h_factory));
            former.writeMsgString(withoutSpace(target.h_user_id));
            former.writeMsgString(withoutSpace(target.h_password));
            former.writeMsgChar(target.h_proc_step);
            former.writeMsgChar(target.layout_group_flag);
            former.writeMsgString(withoutSpace(target.layout_id));
            former.writeMsgString(withoutSpace(target.group_id));
            former.writeMsgInt(target.width);
            former.writeMsgInt(target.height);
        }

        public static void transform_FMB_MOVING_BY_FORCE_IN_TAG(StreamTransformer former, ref FMB_MOVING_BY_FORCE_IN_TAG source)
        {
            source.h_passport = deleteNull(former.readMsgString());
            source.h_language = former.readMsgChar();
            source.h_factory = deleteNull(former.readMsgString());
            source.h_user_id = deleteNull(former.readMsgString());
            source.h_password = deleteNull(former.readMsgString());
            source.h_proc_step = former.readMsgChar();
            source.layout_group_flag = former.readMsgChar();
            source.layout_id = deleteNull(former.readMsgString());
            source.group_id = deleteNull(former.readMsgString());
            source.width = former.readMsgInt();
            source.height = former.readMsgInt();
        }

        public static void serialize_FMB_EXIST_CONTROL_IN_TAG(StreamTransformer former, FMB_EXIST_CONTROL_IN_TAG target)
        {
            former.writeMsgString(withoutSpace(target.h_passport));
            former.writeMsgChar(target.h_language);
            former.writeMsgString(withoutSpace(target.h_factory));
            former.writeMsgString(withoutSpace(target.h_user_id));
            former.writeMsgString(withoutSpace(target.h_password));
            former.writeMsgChar(target.h_proc_step);
            former.writeMsgChar(target.layout_group_flag);
            former.writeMsgString(withoutSpace(target.layout_id));
            former.writeMsgString(withoutSpace(target.group_id));
            former.writeMsgInt(target.width);
            former.writeMsgInt(target.height);
        }

        public static void transform_FMB_EXIST_CONTROL_IN_TAG(StreamTransformer former, ref FMB_EXIST_CONTROL_IN_TAG source)
        {
            source.h_passport = deleteNull(former.readMsgString());
            source.h_language = former.readMsgChar();
            source.h_factory = deleteNull(former.readMsgString());
            source.h_user_id = deleteNull(former.readMsgString());
            source.h_password = deleteNull(former.readMsgString());
            source.h_proc_step = former.readMsgChar();
            source.layout_group_flag = former.readMsgChar();
            source.layout_id = deleteNull(former.readMsgString());
            source.group_id = deleteNull(former.readMsgString());
            source.width = former.readMsgInt();
            source.height = former.readMsgInt();
        }

        public static void serialize_FMB_EXIST_CONTROL_OUT_TAG(StreamTransformer former, FMB_EXIST_CONTROL_OUT_TAG target)
        {
            former.writeMsgChar(target.h_status_value);
            former.writeMsgString(withoutSpace(target.h_msg_code));
            former.writeMsgString(withoutSpace(target.h_msg));
            former.writeMsgString(withoutSpace(target.h_field_msg));
            former.writeMsgString(withoutSpace(target.h_db_err_msg));
            former.writeMsgChar(target.exist_flag);
        }

        public static void transform_FMB_EXIST_CONTROL_OUT_TAG(StreamTransformer former, ref FMB_EXIST_CONTROL_OUT_TAG source)
        {
            source.h_status_value = former.readMsgChar();
            source.h_msg_code = deleteNull(former.readMsgString());
            source.h_msg = deleteNull(former.readMsgString());
            source.h_field_msg = deleteNull(former.readMsgString());
            source.h_db_err_msg = deleteNull(former.readMsgString());
            source.exist_flag = former.readMsgChar();
        }

        public static void serialize_FMB_RESOURCE_PRIORITY_IN_TAG(StreamTransformer former, FMB_RESOURCE_PRIORITY_IN_TAG target)
        {
            former.writeMsgString(withoutSpace(target.h_passport));
            former.writeMsgChar(target.h_language);
            former.writeMsgString(withoutSpace(target.h_factory));
            former.writeMsgString(withoutSpace(target.h_user_id));
            former.writeMsgString(withoutSpace(target.h_password));
            former.writeMsgChar(target.h_proc_step);
            former.writeMsgString(withoutSpace(target.res_id));
            former.writeMsgChar(target.res_type);
            former.writeMsgInt(target.seq);
            former.writeMsgString(withoutSpace(target.layout_id));
        }

        public static void transform_FMB_RESOURCE_PRIORITY_IN_TAG(StreamTransformer former, ref FMB_RESOURCE_PRIORITY_IN_TAG source)
        {
            source.h_passport = deleteNull(former.readMsgString());
            source.h_language = former.readMsgChar();
            source.h_factory = deleteNull(former.readMsgString());
            source.h_user_id = deleteNull(former.readMsgString());
            source.h_password = deleteNull(former.readMsgString());
            source.h_proc_step = former.readMsgChar();
            source.res_id = deleteNull(former.readMsgString());
            source.res_type = former.readMsgChar();
            source.seq = former.readMsgInt();
            source.layout_id = deleteNull(former.readMsgString());
        }

        public static void serialize_FMB_UDR_PRIORITY_IN_TAG(StreamTransformer former, FMB_UDR_PRIORITY_IN_TAG target)
        {
            former.writeMsgString(withoutSpace(target.h_passport));
            former.writeMsgChar(target.h_language);
            former.writeMsgString(withoutSpace(target.h_factory));
            former.writeMsgString(withoutSpace(target.h_user_id));
            former.writeMsgString(withoutSpace(target.h_password));
            former.writeMsgChar(target.h_proc_step);
            former.writeMsgString(withoutSpace(target.group));
            former.writeMsgString(withoutSpace(target.res_id));
            former.writeMsgChar(target.res_type);
            former.writeMsgInt(target.seq);
        }

        public static void transform_FMB_UDR_PRIORITY_IN_TAG(StreamTransformer former, ref FMB_UDR_PRIORITY_IN_TAG source)
        {
            source.h_passport = deleteNull(former.readMsgString());
            source.h_language = former.readMsgChar();
            source.h_factory = deleteNull(former.readMsgString());
            source.h_user_id = deleteNull(former.readMsgString());
            source.h_password = deleteNull(former.readMsgString());
            source.h_proc_step = former.readMsgChar();
            source.group = deleteNull(former.readMsgString());
            source.res_id = deleteNull(former.readMsgString());
            source.res_type = former.readMsgChar();
            source.seq = former.readMsgInt();
        }

        public static void serialize_FMB_RESOURCE_EVENT_IN_TAG_lot_list(StreamTransformer former, FMB_RESOURCE_EVENT_IN_TAG_lot_list target)
        {
            former.writeMsgString(withoutSpace(target.lot_id));
            former.writeMsgString(withoutSpace(target.crr_id));
            former.writeMsgString(withoutSpace(target.oper));
            former.writeMsgDouble(target.qty_1);
            former.writeMsgDouble(target.qty_2);
            former.writeMsgInt(target.hist_seq);
        }

        public static void serialize_FMB_RESOURCE_EVENT_IN_TAG_char_list_value_list(StreamTransformer former, FMB_RESOURCE_EVENT_IN_TAG_char_list_value_list target)
        {
            former.writeMsgString(withoutSpace(target.value));
        }

        public static void serialize_FMB_RESOURCE_EVENT_IN_TAG_char_list(StreamTransformer former, FMB_RESOURCE_EVENT_IN_TAG_char_list target)
        {
            former.writeMsgInt(target.char_seq_num);
            former.writeMsgString(withoutSpace(target.char_id));
            former.writeMsgInt(target.unit_seq_num);
            former.writeMsgString(withoutSpace(target.unit_id));
            former.writeMsgInt(target.value_seq_num);
            former.writeMsgChar(target.value_type);
            former.writeMsgInt(target.value_count);
            target._size_value_list = (25 >= target._size_value_list ? target._size_value_list : 25);
            former.writeMsgInt(target._size_value_list);
            for(int i = 0; i < target._size_value_list; i++)
            {
                serialize_FMB_RESOURCE_EVENT_IN_TAG_char_list_value_list(former, target.value_list[i]);
            }
            former.writeMsgString(withoutSpace(target.spec_out_mask));
            former.writeMsgInt(target.spec_out_count);
            former.writeMsgChar(target.rec_save_flag);
        }

        public static void serialize_FMB_RESOURCE_EVENT_IN_TAG_chart_list_value_list(StreamTransformer former, FMB_RESOURCE_EVENT_IN_TAG_chart_list_value_list target)
        {
            former.writeMsgString(withoutSpace(target.value));
        }

        public static void serialize_FMB_RESOURCE_EVENT_IN_TAG_chart_list(StreamTransformer former, FMB_RESOURCE_EVENT_IN_TAG_chart_list target)
        {
            former.writeMsgString(withoutSpace(target.chart_id));
            former.writeMsgInt(target.unit_count);
            former.writeMsgInt(target.sample_size);
            former.writeMsgString(withoutSpace(target.graph_type));
            former.writeMsgChar(target.unit_use_flag);
            former.writeMsgString(withoutSpace(target.unit_id));
            former.writeMsgInt(target.unit_seq);
            former.writeMsgInt(target.value_seq);
            former.writeMsgInt(target.value_count);
            former.writeMsgString(withoutSpace(target.nominal));
            former.writeMsgString(withoutSpace(target.process_sigma));
            former.writeMsgString(withoutSpace(target.edc_comment));
            target._size_value_list = (100 >= target._size_value_list ? target._size_value_list : 100);
            former.writeMsgInt(target._size_value_list);
            for(int i = 0; i < target._size_value_list; i++)
            {
                serialize_FMB_RESOURCE_EVENT_IN_TAG_chart_list_value_list(former, target.value_list[i]);
            }
        }

        public static void serialize_FMB_RESOURCE_EVENT_IN_TAG(StreamTransformer former, FMB_RESOURCE_EVENT_IN_TAG target)
        {
            former.writeMsgString(withoutSpace(target.h_passport));
            former.writeMsgChar(target.h_language);
            former.writeMsgString(withoutSpace(target.h_factory));
            former.writeMsgString(withoutSpace(target.h_user_id));
            former.writeMsgString(withoutSpace(target.h_password));
            former.writeMsgChar(target.h_proc_step);
            former.writeMsgString(withoutSpace(target.back_time));
            former.writeMsgChar(target.back_time_flag);
            former.writeMsgChar(target.chart_flag);
            former.writeMsgInt(target.count);
            former.writeMsgString(withoutSpace(target.res_id));
            former.writeMsgString(withoutSpace(target.event_id));
            former.writeMsgChar(target.lot_event_flag);
            former.writeMsgChar(target.batch_flag);
            former.writeMsgString(withoutSpace(target.chg_pri_sts));
            former.writeMsgString(withoutSpace(target.chg_sts_1));
            former.writeMsgString(withoutSpace(target.chg_sts_2));
            former.writeMsgString(withoutSpace(target.chg_sts_3));
            former.writeMsgString(withoutSpace(target.chg_sts_4));
            former.writeMsgString(withoutSpace(target.chg_sts_5));
            former.writeMsgString(withoutSpace(target.chg_sts_6));
            former.writeMsgString(withoutSpace(target.chg_sts_7));
            former.writeMsgString(withoutSpace(target.chg_sts_8));
            former.writeMsgString(withoutSpace(target.chg_sts_9));
            former.writeMsgString(withoutSpace(target.chg_sts_10));
            former.writeMsgString(withoutSpace(target.tran_cmf_1));
            former.writeMsgString(withoutSpace(target.tran_cmf_2));
            former.writeMsgString(withoutSpace(target.tran_cmf_3));
            former.writeMsgString(withoutSpace(target.tran_cmf_4));
            former.writeMsgString(withoutSpace(target.tran_cmf_5));
            former.writeMsgString(withoutSpace(target.tran_cmf_6));
            former.writeMsgString(withoutSpace(target.tran_cmf_7));
            former.writeMsgString(withoutSpace(target.tran_cmf_8));
            former.writeMsgString(withoutSpace(target.tran_cmf_9));
            former.writeMsgString(withoutSpace(target.tran_cmf_10));
            former.writeMsgString(withoutSpace(target.tran_cmf_11));
            former.writeMsgString(withoutSpace(target.tran_cmf_12));
            former.writeMsgString(withoutSpace(target.tran_cmf_13));
            former.writeMsgString(withoutSpace(target.tran_cmf_14));
            former.writeMsgString(withoutSpace(target.tran_cmf_15));
            former.writeMsgString(withoutSpace(target.tran_cmf_16));
            former.writeMsgString(withoutSpace(target.tran_cmf_17));
            former.writeMsgString(withoutSpace(target.tran_cmf_18));
            former.writeMsgString(withoutSpace(target.tran_cmf_19));
            former.writeMsgString(withoutSpace(target.tran_cmf_20));
            former.writeMsgString(withoutSpace(target.tran_comment));
            former.writeMsgInt(target.lot_count);
            target._size_lot_list = (20 >= target._size_lot_list ? target._size_lot_list : 20);
            former.writeMsgInt(target._size_lot_list);
            for(int i = 0; i < target._size_lot_list; i++)
            {
                serialize_FMB_RESOURCE_EVENT_IN_TAG_lot_list(former, target.lot_list[i]);
            }
            former.writeMsgInt(target.edc_hist_seq);
            former.writeMsgChar(target.spec_out_flag);
            former.writeMsgInt(target.confirm_char_seq);
            former.writeMsgInt(target.confirm_unit_seq);
            former.writeMsgInt(target.confirm_value_seq);
            former.writeMsgInt(target.hist_seq);
            former.writeMsgString(withoutSpace(target.tran_time));
            former.writeMsgString(withoutSpace(target.col_set_id));
            former.writeMsgInt(target.col_set_version);
            former.writeMsgInt(target.char_count);
            target._size_char_list = (500 >= target._size_char_list ? target._size_char_list : 500);
            former.writeMsgInt(target._size_char_list);
            for(int i = 0; i < target._size_char_list; i++)
            {
                serialize_FMB_RESOURCE_EVENT_IN_TAG_char_list(former, target.char_list[i]);
            }
            former.writeMsgChar(target.h_sub_step);
            former.writeMsgChar(target.lot_res_flag);
            former.writeMsgInt(target.spc_count);
            former.writeMsgInt(target.edc_char_seq);
            former.writeMsgChar(target.edc_input_flag);
            target._size_chart_list = (100 >= target._size_chart_list ? target._size_chart_list : 100);
            former.writeMsgInt(target._size_chart_list);
            for(int i = 0; i < target._size_chart_list; i++)
            {
                serialize_FMB_RESOURCE_EVENT_IN_TAG_chart_list(former, target.chart_list[i]);
            }
        }

        public static void transform_FMB_RESOURCE_EVENT_IN_TAG_lot_list(StreamTransformer former, ref FMB_RESOURCE_EVENT_IN_TAG_lot_list source)
        {
            source.lot_id = deleteNull(former.readMsgString());
            source.crr_id = deleteNull(former.readMsgString());
            source.oper = deleteNull(former.readMsgString());
            source.qty_1 = former.readMsgDouble();
            source.qty_2 = former.readMsgDouble();
            source.hist_seq = former.readMsgInt();
        }

        public static void transform_FMB_RESOURCE_EVENT_IN_TAG_char_list_value_list(StreamTransformer former, ref FMB_RESOURCE_EVENT_IN_TAG_char_list_value_list source)
        {
            source.value = deleteNull(former.readMsgString());
        }

        public static void transform_FMB_RESOURCE_EVENT_IN_TAG_char_list(StreamTransformer former, ref FMB_RESOURCE_EVENT_IN_TAG_char_list source)
        {
            source.char_seq_num = former.readMsgInt();
            source.char_id = deleteNull(former.readMsgString());
            source.unit_seq_num = former.readMsgInt();
            source.unit_id = deleteNull(former.readMsgString());
            source.value_seq_num = former.readMsgInt();
            source.value_type = former.readMsgChar();
            source.value_count = former.readMsgInt();
            source._size_value_list = former.readMsgInt();
            source.value_list = new FMB_RESOURCE_EVENT_IN_TAG_char_list_value_list[source._size_value_list];
            for(int i = 0; i < source._size_value_list; i++)
            {
                source.value_list[i] = new FMB_RESOURCE_EVENT_IN_TAG_char_list_value_list();
                transform_FMB_RESOURCE_EVENT_IN_TAG_char_list_value_list(former, ref source.value_list[i]);
            }
            source.spec_out_mask = deleteNull(former.readMsgString());
            source.spec_out_count = former.readMsgInt();
            source.rec_save_flag = former.readMsgChar();
        }

        public static void transform_FMB_RESOURCE_EVENT_IN_TAG_chart_list_value_list(StreamTransformer former, ref FMB_RESOURCE_EVENT_IN_TAG_chart_list_value_list source)
        {
            source.value = deleteNull(former.readMsgString());
        }

        public static void transform_FMB_RESOURCE_EVENT_IN_TAG_chart_list(StreamTransformer former, ref FMB_RESOURCE_EVENT_IN_TAG_chart_list source)
        {
            source.chart_id = deleteNull(former.readMsgString());
            source.unit_count = former.readMsgInt();
            source.sample_size = former.readMsgInt();
            source.graph_type = deleteNull(former.readMsgString());
            source.unit_use_flag = former.readMsgChar();
            source.unit_id = deleteNull(former.readMsgString());
            source.unit_seq = former.readMsgInt();
            source.value_seq = former.readMsgInt();
            source.value_count = former.readMsgInt();
            source.nominal = deleteNull(former.readMsgString());
            source.process_sigma = deleteNull(former.readMsgString());
            source.edc_comment = deleteNull(former.readMsgString());
            source._size_value_list = former.readMsgInt();
            source.value_list = new FMB_RESOURCE_EVENT_IN_TAG_chart_list_value_list[source._size_value_list];
            for(int i = 0; i < source._size_value_list; i++)
            {
                source.value_list[i] = new FMB_RESOURCE_EVENT_IN_TAG_chart_list_value_list();
                transform_FMB_RESOURCE_EVENT_IN_TAG_chart_list_value_list(former, ref source.value_list[i]);
            }
        }

        public static void transform_FMB_RESOURCE_EVENT_IN_TAG(StreamTransformer former, ref FMB_RESOURCE_EVENT_IN_TAG source)
        {
            source.h_passport = deleteNull(former.readMsgString());
            source.h_language = former.readMsgChar();
            source.h_factory = deleteNull(former.readMsgString());
            source.h_user_id = deleteNull(former.readMsgString());
            source.h_password = deleteNull(former.readMsgString());
            source.h_proc_step = former.readMsgChar();
            source.back_time = deleteNull(former.readMsgString());
            source.back_time_flag = former.readMsgChar();
            source.chart_flag = former.readMsgChar();
            source.count = former.readMsgInt();
            source.res_id = deleteNull(former.readMsgString());
            source.event_id = deleteNull(former.readMsgString());
            source.lot_event_flag = former.readMsgChar();
            source.batch_flag = former.readMsgChar();
            source.chg_pri_sts = deleteNull(former.readMsgString());
            source.chg_sts_1 = deleteNull(former.readMsgString());
            source.chg_sts_2 = deleteNull(former.readMsgString());
            source.chg_sts_3 = deleteNull(former.readMsgString());
            source.chg_sts_4 = deleteNull(former.readMsgString());
            source.chg_sts_5 = deleteNull(former.readMsgString());
            source.chg_sts_6 = deleteNull(former.readMsgString());
            source.chg_sts_7 = deleteNull(former.readMsgString());
            source.chg_sts_8 = deleteNull(former.readMsgString());
            source.chg_sts_9 = deleteNull(former.readMsgString());
            source.chg_sts_10 = deleteNull(former.readMsgString());
            source.tran_cmf_1 = deleteNull(former.readMsgString());
            source.tran_cmf_2 = deleteNull(former.readMsgString());
            source.tran_cmf_3 = deleteNull(former.readMsgString());
            source.tran_cmf_4 = deleteNull(former.readMsgString());
            source.tran_cmf_5 = deleteNull(former.readMsgString());
            source.tran_cmf_6 = deleteNull(former.readMsgString());
            source.tran_cmf_7 = deleteNull(former.readMsgString());
            source.tran_cmf_8 = deleteNull(former.readMsgString());
            source.tran_cmf_9 = deleteNull(former.readMsgString());
            source.tran_cmf_10 = deleteNull(former.readMsgString());
            source.tran_cmf_11 = deleteNull(former.readMsgString());
            source.tran_cmf_12 = deleteNull(former.readMsgString());
            source.tran_cmf_13 = deleteNull(former.readMsgString());
            source.tran_cmf_14 = deleteNull(former.readMsgString());
            source.tran_cmf_15 = deleteNull(former.readMsgString());
            source.tran_cmf_16 = deleteNull(former.readMsgString());
            source.tran_cmf_17 = deleteNull(former.readMsgString());
            source.tran_cmf_18 = deleteNull(former.readMsgString());
            source.tran_cmf_19 = deleteNull(former.readMsgString());
            source.tran_cmf_20 = deleteNull(former.readMsgString());
            source.tran_comment = deleteNull(former.readMsgString());
            source.lot_count = former.readMsgInt();
            source._size_lot_list = former.readMsgInt();
            source.lot_list = new FMB_RESOURCE_EVENT_IN_TAG_lot_list[source._size_lot_list];
            for(int i = 0; i < source._size_lot_list; i++)
            {
                source.lot_list[i] = new FMB_RESOURCE_EVENT_IN_TAG_lot_list();
                transform_FMB_RESOURCE_EVENT_IN_TAG_lot_list(former, ref source.lot_list[i]);
            }
            source.edc_hist_seq = former.readMsgInt();
            source.spec_out_flag = former.readMsgChar();
            source.confirm_char_seq = former.readMsgInt();
            source.confirm_unit_seq = former.readMsgInt();
            source.confirm_value_seq = former.readMsgInt();
            source.hist_seq = former.readMsgInt();
            source.tran_time = deleteNull(former.readMsgString());
            source.col_set_id = deleteNull(former.readMsgString());
            source.col_set_version = former.readMsgInt();
            source.char_count = former.readMsgInt();
            source._size_char_list = former.readMsgInt();
            source.char_list = new FMB_RESOURCE_EVENT_IN_TAG_char_list[source._size_char_list];
            for(int i = 0; i < source._size_char_list; i++)
            {
                source.char_list[i] = new FMB_RESOURCE_EVENT_IN_TAG_char_list();
                transform_FMB_RESOURCE_EVENT_IN_TAG_char_list(former, ref source.char_list[i]);
            }
            source.h_sub_step = former.readMsgChar();
            source.lot_res_flag = former.readMsgChar();
            source.spc_count = former.readMsgInt();
            source.edc_char_seq = former.readMsgInt();
            source.edc_input_flag = former.readMsgChar();
            source._size_chart_list = former.readMsgInt();
            source.chart_list = new FMB_RESOURCE_EVENT_IN_TAG_chart_list[source._size_chart_list];
            for(int i = 0; i < source._size_chart_list; i++)
            {
                source.chart_list[i] = new FMB_RESOURCE_EVENT_IN_TAG_chart_list();
                transform_FMB_RESOURCE_EVENT_IN_TAG_chart_list(former, ref source.chart_list[i]);
            }
        }

        public static void serialize_FMB_RESOURCE_EVENT_OUT_TAG_char_list(StreamTransformer former, FMB_RESOURCE_EVENT_OUT_TAG_char_list target)
        {
            former.writeMsgInt(target.char_seq_num);
            former.writeMsgString(withoutSpace(target.char_id));
            former.writeMsgInt(target.unit_seq_num);
            former.writeMsgString(withoutSpace(target.unit_id));
            former.writeMsgInt(target.value_seq_num);
            former.writeMsgChar(target.value_type);
            former.writeMsgString(withoutSpace(target.spec_out_mask));
            former.writeMsgInt(target.spec_out_count);
            former.writeMsgChar(target.rec_save_flag);
            former.writeMsgChar(target.spec_out_type);
            former.writeMsgInt(target.unit_count);
        }

        public static void serialize_FMB_RESOURCE_EVENT_OUT_TAG_oos_list(StreamTransformer former, FMB_RESOURCE_EVENT_OUT_TAG_oos_list target)
        {
            former.writeMsgString(withoutSpace(target.oos_check_result));
        }

        public static void serialize_FMB_RESOURCE_EVENT_OUT_TAG_chart_list(StreamTransformer former, FMB_RESOURCE_EVENT_OUT_TAG_chart_list target)
        {
            former.writeMsgString(withoutSpace(target.chart_id));
            former.writeMsgInt(target.hist_seq);
            former.writeMsgString(withoutSpace(target.tran_time));
            former.writeMsgInt(target.unit_seq);
            former.writeMsgString(withoutSpace(target.weight_value));
            former.writeMsgString(withoutSpace(target.average));
            former.writeMsgString(withoutSpace(target.stddev));
            former.writeMsgString(withoutSpace(target.range));
            former.writeMsgString(withoutSpace(target.min_value));
            former.writeMsgString(withoutSpace(target.max_value));
            former.writeMsgChar(target.x_check_result);
            former.writeMsgChar(target.r_check_result);
        }

        public static void serialize_FMB_RESOURCE_EVENT_OUT_TAG(StreamTransformer former, FMB_RESOURCE_EVENT_OUT_TAG target)
        {
            former.writeMsgChar(target.h_status_value);
            former.writeMsgString(withoutSpace(target.h_msg_code));
            former.writeMsgString(withoutSpace(target.h_msg));
            former.writeMsgString(withoutSpace(target.h_field_msg));
            former.writeMsgString(withoutSpace(target.h_db_err_msg));
            former.writeMsgInt(target.count);
            former.writeMsgInt(target.res_hist_seq);
            former.writeMsgInt(target.confirm_char_seq);
            former.writeMsgInt(target.confirm_unit_seq);
            former.writeMsgInt(target.confirm_value_seq);
            target._size_char_list = (5000 >= target._size_char_list ? target._size_char_list : 5000);
            former.writeMsgInt(target._size_char_list);
            for(int i = 0; i < target._size_char_list; i++)
            {
                serialize_FMB_RESOURCE_EVENT_OUT_TAG_char_list(former, target.char_list[i]);
            }
            former.writeMsgInt(target.spc_count);
            target._size_oos_list = (100 >= target._size_oos_list ? target._size_oos_list : 100);
            former.writeMsgInt(target._size_oos_list);
            for(int i = 0; i < target._size_oos_list; i++)
            {
                serialize_FMB_RESOURCE_EVENT_OUT_TAG_oos_list(former, target.oos_list[i]);
            }
            target._size_chart_list = (100 >= target._size_chart_list ? target._size_chart_list : 100);
            former.writeMsgInt(target._size_chart_list);
            for(int i = 0; i < target._size_chart_list; i++)
            {
                serialize_FMB_RESOURCE_EVENT_OUT_TAG_chart_list(former, target.chart_list[i]);
            }
        }

        public static void transform_FMB_RESOURCE_EVENT_OUT_TAG_char_list(StreamTransformer former, ref FMB_RESOURCE_EVENT_OUT_TAG_char_list source)
        {
            source.char_seq_num = former.readMsgInt();
            source.char_id = deleteNull(former.readMsgString());
            source.unit_seq_num = former.readMsgInt();
            source.unit_id = deleteNull(former.readMsgString());
            source.value_seq_num = former.readMsgInt();
            source.value_type = former.readMsgChar();
            source.spec_out_mask = deleteNull(former.readMsgString());
            source.spec_out_count = former.readMsgInt();
            source.rec_save_flag = former.readMsgChar();
            source.spec_out_type = former.readMsgChar();
            source.unit_count = former.readMsgInt();
        }

        public static void transform_FMB_RESOURCE_EVENT_OUT_TAG_oos_list(StreamTransformer former, ref FMB_RESOURCE_EVENT_OUT_TAG_oos_list source)
        {
            source.oos_check_result = deleteNull(former.readMsgString());
        }

        public static void transform_FMB_RESOURCE_EVENT_OUT_TAG_chart_list(StreamTransformer former, ref FMB_RESOURCE_EVENT_OUT_TAG_chart_list source)
        {
            source.chart_id = deleteNull(former.readMsgString());
            source.hist_seq = former.readMsgInt();
            source.tran_time = deleteNull(former.readMsgString());
            source.unit_seq = former.readMsgInt();
            source.weight_value = deleteNull(former.readMsgString());
            source.average = deleteNull(former.readMsgString());
            source.stddev = deleteNull(former.readMsgString());
            source.range = deleteNull(former.readMsgString());
            source.min_value = deleteNull(former.readMsgString());
            source.max_value = deleteNull(former.readMsgString());
            source.x_check_result = former.readMsgChar();
            source.r_check_result = former.readMsgChar();
        }

        public static void transform_FMB_RESOURCE_EVENT_OUT_TAG(StreamTransformer former, ref FMB_RESOURCE_EVENT_OUT_TAG source)
        {
            source.h_status_value = former.readMsgChar();
            source.h_msg_code = deleteNull(former.readMsgString());
            source.h_msg = deleteNull(former.readMsgString());
            source.h_field_msg = deleteNull(former.readMsgString());
            source.h_db_err_msg = deleteNull(former.readMsgString());
            source.count = former.readMsgInt();
            source.res_hist_seq = former.readMsgInt();
            source.confirm_char_seq = former.readMsgInt();
            source.confirm_unit_seq = former.readMsgInt();
            source.confirm_value_seq = former.readMsgInt();
            source._size_char_list = former.readMsgInt();
            source.char_list = new FMB_RESOURCE_EVENT_OUT_TAG_char_list[source._size_char_list];
            for(int i = 0; i < source._size_char_list; i++)
            {
                source.char_list[i] = new FMB_RESOURCE_EVENT_OUT_TAG_char_list();
                transform_FMB_RESOURCE_EVENT_OUT_TAG_char_list(former, ref source.char_list[i]);
            }
            source.spc_count = former.readMsgInt();
            source._size_oos_list = former.readMsgInt();
            source.oos_list = new FMB_RESOURCE_EVENT_OUT_TAG_oos_list[source._size_oos_list];
            for(int i = 0; i < source._size_oos_list; i++)
            {
                source.oos_list[i] = new FMB_RESOURCE_EVENT_OUT_TAG_oos_list();
                transform_FMB_RESOURCE_EVENT_OUT_TAG_oos_list(former, ref source.oos_list[i]);
            }
            source._size_chart_list = former.readMsgInt();
            source.chart_list = new FMB_RESOURCE_EVENT_OUT_TAG_chart_list[source._size_chart_list];
            for(int i = 0; i < source._size_chart_list; i++)
            {
                source.chart_list[i] = new FMB_RESOURCE_EVENT_OUT_TAG_chart_list();
                transform_FMB_RESOURCE_EVENT_OUT_TAG_chart_list(former, ref source.chart_list[i]);
            }
        }

        public static void serialize_FMB_UPDATE_ENVIRONMENT_IN_TAG(StreamTransformer former, FMB_UPDATE_ENVIRONMENT_IN_TAG target)
        {
            former.writeMsgString(withoutSpace(target.h_passport));
            former.writeMsgChar(target.h_language);
            former.writeMsgString(withoutSpace(target.h_factory));
            former.writeMsgString(withoutSpace(target.h_user_id));
            former.writeMsgString(withoutSpace(target.h_password));
            former.writeMsgChar(target.h_proc_step);
            former.writeMsgString(withoutSpace(target.font_family));
            former.writeMsgInt(target.res_width);
            former.writeMsgInt(target.res_height);
            former.writeMsgInt(target.rtg_width);
            former.writeMsgInt(target.rtg_height);
            former.writeMsgInt(target.elp_width);
            former.writeMsgInt(target.elp_height);
            former.writeMsgInt(target.tri_width);
            former.writeMsgInt(target.tri_height);
            former.writeMsgInt(target.ver_width);
            former.writeMsgInt(target.ver_height);
            former.writeMsgInt(target.hor_width);
            former.writeMsgInt(target.hor_height);
            former.writeMsgInt(target.pie1_width);
            former.writeMsgInt(target.pie1_height);
            former.writeMsgInt(target.pie2_width);
            former.writeMsgInt(target.pie2_height);
            former.writeMsgInt(target.pie3_width);
            former.writeMsgInt(target.pie3_height);
            former.writeMsgInt(target.pie4_width);
            former.writeMsgInt(target.pie4_height);
            former.writeMsgInt(target.layout_width);
            former.writeMsgInt(target.layout_height);
            former.writeMsgInt(target.udr_width);
            former.writeMsgInt(target.udr_height);
            former.writeMsgChar(target.event_color_flag);
            former.writeMsgChar(target.signal_flag);
            former.writeMsgInt(target.text_size);
            former.writeMsgInt(target.text_color);
            former.writeMsgInt(target.back_color);
        }

        public static void transform_FMB_UPDATE_ENVIRONMENT_IN_TAG(StreamTransformer former, ref FMB_UPDATE_ENVIRONMENT_IN_TAG source)
        {
            source.h_passport = deleteNull(former.readMsgString());
            source.h_language = former.readMsgChar();
            source.h_factory = deleteNull(former.readMsgString());
            source.h_user_id = deleteNull(former.readMsgString());
            source.h_password = deleteNull(former.readMsgString());
            source.h_proc_step = former.readMsgChar();
            source.font_family = deleteNull(former.readMsgString());
            source.res_width = former.readMsgInt();
            source.res_height = former.readMsgInt();
            source.rtg_width = former.readMsgInt();
            source.rtg_height = former.readMsgInt();
            source.elp_width = former.readMsgInt();
            source.elp_height = former.readMsgInt();
            source.tri_width = former.readMsgInt();
            source.tri_height = former.readMsgInt();
            source.ver_width = former.readMsgInt();
            source.ver_height = former.readMsgInt();
            source.hor_width = former.readMsgInt();
            source.hor_height = former.readMsgInt();
            source.pie1_width = former.readMsgInt();
            source.pie1_height = former.readMsgInt();
            source.pie2_width = former.readMsgInt();
            source.pie2_height = former.readMsgInt();
            source.pie3_width = former.readMsgInt();
            source.pie3_height = former.readMsgInt();
            source.pie4_width = former.readMsgInt();
            source.pie4_height = former.readMsgInt();
            source.layout_width = former.readMsgInt();
            source.layout_height = former.readMsgInt();
            source.udr_width = former.readMsgInt();
            source.udr_height = former.readMsgInt();
            source.event_color_flag = former.readMsgChar();
            source.signal_flag = former.readMsgChar();
            source.text_size = former.readMsgInt();
            source.text_color = former.readMsgInt();
            source.back_color = former.readMsgInt();
        }

        public static void serialize_FMB_UPDATE_EVENT_COLOR_IN_TAG_event_list(StreamTransformer former, FMB_UPDATE_EVENT_COLOR_IN_TAG_event_list target)
        {
            former.writeMsgString(withoutSpace(target.event_id));
            former.writeMsgInt(target.color);
        }

        public static void serialize_FMB_UPDATE_EVENT_COLOR_IN_TAG(StreamTransformer former, FMB_UPDATE_EVENT_COLOR_IN_TAG target)
        {
            former.writeMsgString(withoutSpace(target.h_passport));
            former.writeMsgChar(target.h_language);
            former.writeMsgString(withoutSpace(target.h_user_id));
            former.writeMsgString(withoutSpace(target.h_password));
            former.writeMsgChar(target.h_proc_step);
            former.writeMsgString(withoutSpace(target.h_factory));
            former.writeMsgInt(target.count);
            target._size_event_list = (1000 >= target._size_event_list ? target._size_event_list : 1000);
            former.writeMsgInt(target._size_event_list);
            for(int i = 0; i < target._size_event_list; i++)
            {
                serialize_FMB_UPDATE_EVENT_COLOR_IN_TAG_event_list(former, target.event_list[i]);
            }
        }

        public static void transform_FMB_UPDATE_EVENT_COLOR_IN_TAG_event_list(StreamTransformer former, ref FMB_UPDATE_EVENT_COLOR_IN_TAG_event_list source)
        {
            source.event_id = deleteNull(former.readMsgString());
            source.color = former.readMsgInt();
        }

        public static void transform_FMB_UPDATE_EVENT_COLOR_IN_TAG(StreamTransformer former, ref FMB_UPDATE_EVENT_COLOR_IN_TAG source)
        {
            source.h_passport = deleteNull(former.readMsgString());
            source.h_language = former.readMsgChar();
            source.h_user_id = deleteNull(former.readMsgString());
            source.h_password = deleteNull(former.readMsgString());
            source.h_proc_step = former.readMsgChar();
            source.h_factory = deleteNull(former.readMsgString());
            source.count = former.readMsgInt();
            source._size_event_list = former.readMsgInt();
            source.event_list = new FMB_UPDATE_EVENT_COLOR_IN_TAG_event_list[source._size_event_list];
            for(int i = 0; i < source._size_event_list; i++)
            {
                source.event_list[i] = new FMB_UPDATE_EVENT_COLOR_IN_TAG_event_list();
                transform_FMB_UPDATE_EVENT_COLOR_IN_TAG_event_list(former, ref source.event_list[i]);
            }
        }

        public static void serialize_FMB_UPDATE_RESOURCE_IMAGE_IN_TAG(StreamTransformer former, FMB_UPDATE_RESOURCE_IMAGE_IN_TAG target)
        {
            former.writeMsgString(withoutSpace(target.h_passport));
            former.writeMsgChar(target.h_language);
            former.writeMsgString(withoutSpace(target.h_user_id));
            former.writeMsgString(withoutSpace(target.h_password));
            former.writeMsgChar(target.h_proc_step);
            former.writeMsgString(withoutSpace(target.h_factory));
            former.writeMsgString(withoutSpace(target.res_id));
            former.writeMsgInt(target.img_idx);
        }

        public static void transform_FMB_UPDATE_RESOURCE_IMAGE_IN_TAG(StreamTransformer former, ref FMB_UPDATE_RESOURCE_IMAGE_IN_TAG source)
        {
            source.h_passport = deleteNull(former.readMsgString());
            source.h_language = former.readMsgChar();
            source.h_user_id = deleteNull(former.readMsgString());
            source.h_password = deleteNull(former.readMsgString());
            source.h_proc_step = former.readMsgChar();
            source.h_factory = deleteNull(former.readMsgString());
            source.res_id = deleteNull(former.readMsgString());
            source.img_idx = former.readMsgInt();
        }

        public static void serialize_FMB_UPDATE_RESLOC_LIST_IN_TAG_res_list(StreamTransformer former, FMB_UPDATE_RESLOC_LIST_IN_TAG_res_list target)
        {
            former.writeMsgString(withoutSpace(target.res_id));
            former.writeMsgInt(target.seq);
            former.writeMsgChar(target.res_type);
            former.writeMsgInt(target.loc_x);
            former.writeMsgInt(target.loc_y);
            former.writeMsgInt(target.loc_width);
            former.writeMsgInt(target.loc_height);
            former.writeMsgString(withoutSpace(target.text));
            former.writeMsgInt(target.text_size);
            former.writeMsgInt(target.text_color);
            former.writeMsgChar(target.text_style);
            former.writeMsgInt(target.tag_type);
            former.writeMsgInt(target.back_color);
            former.writeMsgInt(target.img_idx);
            former.writeMsgChar(target.signal_flag);
        }

        public static void serialize_FMB_UPDATE_RESLOC_LIST_IN_TAG(StreamTransformer former, FMB_UPDATE_RESLOC_LIST_IN_TAG target)
        {
            former.writeMsgString(withoutSpace(target.h_passport));
            former.writeMsgChar(target.h_language);
            former.writeMsgString(withoutSpace(target.h_factory));
            former.writeMsgString(withoutSpace(target.h_user_id));
            former.writeMsgString(withoutSpace(target.h_password));
            former.writeMsgChar(target.h_proc_step);
            former.writeMsgString(withoutSpace(target.layout_id));
            former.writeMsgInt(target.count);
            target._size_res_list = (500 >= target._size_res_list ? target._size_res_list : 500);
            former.writeMsgInt(target._size_res_list);
            for(int i = 0; i < target._size_res_list; i++)
            {
                serialize_FMB_UPDATE_RESLOC_LIST_IN_TAG_res_list(former, target.res_list[i]);
            }
        }

        public static void transform_FMB_UPDATE_RESLOC_LIST_IN_TAG_res_list(StreamTransformer former, ref FMB_UPDATE_RESLOC_LIST_IN_TAG_res_list source)
        {
            source.res_id = deleteNull(former.readMsgString());
            source.seq = former.readMsgInt();
            source.res_type = former.readMsgChar();
            source.loc_x = former.readMsgInt();
            source.loc_y = former.readMsgInt();
            source.loc_width = former.readMsgInt();
            source.loc_height = former.readMsgInt();
            source.text = deleteNull(former.readMsgString());
            source.text_size = former.readMsgInt();
            source.text_color = former.readMsgInt();
            source.text_style = former.readMsgChar();
            source.tag_type = former.readMsgInt();
            source.back_color = former.readMsgInt();
            source.img_idx = former.readMsgInt();
            source.signal_flag = former.readMsgChar();
        }

        public static void transform_FMB_UPDATE_RESLOC_LIST_IN_TAG(StreamTransformer former, ref FMB_UPDATE_RESLOC_LIST_IN_TAG source)
        {
            source.h_passport = deleteNull(former.readMsgString());
            source.h_language = former.readMsgChar();
            source.h_factory = deleteNull(former.readMsgString());
            source.h_user_id = deleteNull(former.readMsgString());
            source.h_password = deleteNull(former.readMsgString());
            source.h_proc_step = former.readMsgChar();
            source.layout_id = deleteNull(former.readMsgString());
            source.count = former.readMsgInt();
            source._size_res_list = former.readMsgInt();
            source.res_list = new FMB_UPDATE_RESLOC_LIST_IN_TAG_res_list[source._size_res_list];
            for(int i = 0; i < source._size_res_list; i++)
            {
                source.res_list[i] = new FMB_UPDATE_RESLOC_LIST_IN_TAG_res_list();
                transform_FMB_UPDATE_RESLOC_LIST_IN_TAG_res_list(former, ref source.res_list[i]);
            }
        }

        public static void serialize_FMB_UPDATE_UDRLOC_LIST_IN_TAG_res_list(StreamTransformer former, FMB_UPDATE_UDRLOC_LIST_IN_TAG_res_list target)
        {
            former.writeMsgString(withoutSpace(target.res_id));
            former.writeMsgInt(target.seq);
            former.writeMsgChar(target.res_type);
            former.writeMsgInt(target.loc_x);
            former.writeMsgInt(target.loc_y);
            former.writeMsgInt(target.loc_width);
            former.writeMsgInt(target.loc_height);
            former.writeMsgString(withoutSpace(target.text));
            former.writeMsgInt(target.text_size);
            former.writeMsgInt(target.text_color);
            former.writeMsgChar(target.text_style);
            former.writeMsgInt(target.tag_type);
            former.writeMsgInt(target.back_color);
            former.writeMsgString(withoutSpace(target.create_time));
            former.writeMsgString(withoutSpace(target.update_time));
            former.writeMsgInt(target.img_idx);
            former.writeMsgChar(target.signal_flag);
        }

        public static void serialize_FMB_UPDATE_UDRLOC_LIST_IN_TAG(StreamTransformer former, FMB_UPDATE_UDRLOC_LIST_IN_TAG target)
        {
            former.writeMsgString(withoutSpace(target.h_passport));
            former.writeMsgChar(target.h_language);
            former.writeMsgString(withoutSpace(target.h_factory));
            former.writeMsgString(withoutSpace(target.h_user_id));
            former.writeMsgString(withoutSpace(target.h_password));
            former.writeMsgChar(target.h_proc_step);
            former.writeMsgString(withoutSpace(target.group));
            former.writeMsgInt(target.count);
            target._size_res_list = (500 >= target._size_res_list ? target._size_res_list : 500);
            former.writeMsgInt(target._size_res_list);
            for(int i = 0; i < target._size_res_list; i++)
            {
                serialize_FMB_UPDATE_UDRLOC_LIST_IN_TAG_res_list(former, target.res_list[i]);
            }
        }

        public static void transform_FMB_UPDATE_UDRLOC_LIST_IN_TAG_res_list(StreamTransformer former, ref FMB_UPDATE_UDRLOC_LIST_IN_TAG_res_list source)
        {
            source.res_id = deleteNull(former.readMsgString());
            source.seq = former.readMsgInt();
            source.res_type = former.readMsgChar();
            source.loc_x = former.readMsgInt();
            source.loc_y = former.readMsgInt();
            source.loc_width = former.readMsgInt();
            source.loc_height = former.readMsgInt();
            source.text = deleteNull(former.readMsgString());
            source.text_size = former.readMsgInt();
            source.text_color = former.readMsgInt();
            source.text_style = former.readMsgChar();
            source.tag_type = former.readMsgInt();
            source.back_color = former.readMsgInt();
            source.create_time = deleteNull(former.readMsgString());
            source.update_time = deleteNull(former.readMsgString());
            source.img_idx = former.readMsgInt();
            source.signal_flag = former.readMsgChar();
        }

        public static void transform_FMB_UPDATE_UDRLOC_LIST_IN_TAG(StreamTransformer former, ref FMB_UPDATE_UDRLOC_LIST_IN_TAG source)
        {
            source.h_passport = deleteNull(former.readMsgString());
            source.h_language = former.readMsgChar();
            source.h_factory = deleteNull(former.readMsgString());
            source.h_user_id = deleteNull(former.readMsgString());
            source.h_password = deleteNull(former.readMsgString());
            source.h_proc_step = former.readMsgChar();
            source.group = deleteNull(former.readMsgString());
            source.count = former.readMsgInt();
            source._size_res_list = former.readMsgInt();
            source.res_list = new FMB_UPDATE_UDRLOC_LIST_IN_TAG_res_list[source._size_res_list];
            for(int i = 0; i < source._size_res_list; i++)
            {
                source.res_list[i] = new FMB_UPDATE_UDRLOC_LIST_IN_TAG_res_list();
                transform_FMB_UPDATE_UDRLOC_LIST_IN_TAG_res_list(former, ref source.res_list[i]);
            }
        }

        public static void serialize_FMB_COPY_UDR_GROUP_IN_TAG(StreamTransformer former, FMB_COPY_UDR_GROUP_IN_TAG target)
        {
            former.writeMsgString(withoutSpace(target.h_passport));
            former.writeMsgChar(target.h_language);
            former.writeMsgString(withoutSpace(target.h_factory));
            former.writeMsgString(withoutSpace(target.h_user_id));
            former.writeMsgString(withoutSpace(target.h_password));
            former.writeMsgChar(target.h_proc_step);
            former.writeMsgString(withoutSpace(target.from_group));
            former.writeMsgString(withoutSpace(target.to_group));
        }

        public static void transform_FMB_COPY_UDR_GROUP_IN_TAG(StreamTransformer former, ref FMB_COPY_UDR_GROUP_IN_TAG source)
        {
            source.h_passport = deleteNull(former.readMsgString());
            source.h_language = former.readMsgChar();
            source.h_factory = deleteNull(former.readMsgString());
            source.h_user_id = deleteNull(former.readMsgString());
            source.h_password = deleteNull(former.readMsgString());
            source.h_proc_step = former.readMsgChar();
            source.from_group = deleteNull(former.readMsgString());
            source.to_group = deleteNull(former.readMsgString());
        }

        public static void serialize_FMB_UPDATE_FMB_GROUP_IN_TAG(StreamTransformer former, FMB_UPDATE_FMB_GROUP_IN_TAG target)
        {
            former.writeMsgString(withoutSpace(target.h_passport));
            former.writeMsgChar(target.h_language);
            former.writeMsgString(withoutSpace(target.h_factory));
            former.writeMsgString(withoutSpace(target.h_user_id));
            former.writeMsgString(withoutSpace(target.h_password));
            former.writeMsgChar(target.h_proc_step);
            former.writeMsgString(withoutSpace(target.group));
            former.writeMsgString(withoutSpace(target.user));
        }

        public static void transform_FMB_UPDATE_FMB_GROUP_IN_TAG(StreamTransformer former, ref FMB_UPDATE_FMB_GROUP_IN_TAG source)
        {
            source.h_passport = deleteNull(former.readMsgString());
            source.h_language = former.readMsgChar();
            source.h_factory = deleteNull(former.readMsgString());
            source.h_user_id = deleteNull(former.readMsgString());
            source.h_password = deleteNull(former.readMsgString());
            source.h_proc_step = former.readMsgChar();
            source.group = deleteNull(former.readMsgString());
            source.user = deleteNull(former.readMsgString());
        }

        public static void serialize_FMB_FIND_COL_SET_VERSION_IN_TAG(StreamTransformer former, FMB_FIND_COL_SET_VERSION_IN_TAG target)
        {
            former.writeMsgString(withoutSpace(target.h_passport));
            former.writeMsgChar(target.h_language);
            former.writeMsgString(withoutSpace(target.h_factory));
            former.writeMsgString(withoutSpace(target.h_user_id));
            former.writeMsgString(withoutSpace(target.h_password));
            former.writeMsgChar(target.h_proc_step);
            former.writeMsgString(withoutSpace(target.lot_id));
            former.writeMsgString(withoutSpace(target.mat_id));
            former.writeMsgInt(target.mat_ver);
            former.writeMsgString(withoutSpace(target.flow));
            former.writeMsgString(withoutSpace(target.oper));
            former.writeMsgString(withoutSpace(target.event_id));
            former.writeMsgString(withoutSpace(target.col_set_id));
            former.writeMsgChar(target.lot_or_res_flag);
        }

        public static void transform_FMB_FIND_COL_SET_VERSION_IN_TAG(StreamTransformer former, ref FMB_FIND_COL_SET_VERSION_IN_TAG source)
        {
            source.h_passport = deleteNull(former.readMsgString());
            source.h_language = former.readMsgChar();
            source.h_factory = deleteNull(former.readMsgString());
            source.h_user_id = deleteNull(former.readMsgString());
            source.h_password = deleteNull(former.readMsgString());
            source.h_proc_step = former.readMsgChar();
            source.lot_id = deleteNull(former.readMsgString());
            source.mat_id = deleteNull(former.readMsgString());
            source.mat_ver = former.readMsgInt();
            source.flow = deleteNull(former.readMsgString());
            source.oper = deleteNull(former.readMsgString());
            source.event_id = deleteNull(former.readMsgString());
            source.col_set_id = deleteNull(former.readMsgString());
            source.lot_or_res_flag = former.readMsgChar();
        }

        public static void serialize_FMB_FIND_COL_SET_VERSION_OUT_TAG(StreamTransformer former, FMB_FIND_COL_SET_VERSION_OUT_TAG target)
        {
            former.writeMsgChar(target.h_status_value);
            former.writeMsgString(withoutSpace(target.h_msg_code));
            former.writeMsgString(withoutSpace(target.h_msg));
            former.writeMsgString(withoutSpace(target.h_field_msg));
            former.writeMsgString(withoutSpace(target.h_db_err_msg));
            former.writeMsgString(withoutSpace(target.col_set_id));
            former.writeMsgInt(target.col_set_version);
        }

        public static void transform_FMB_FIND_COL_SET_VERSION_OUT_TAG(StreamTransformer former, ref FMB_FIND_COL_SET_VERSION_OUT_TAG source)
        {
            source.h_status_value = former.readMsgChar();
            source.h_msg_code = deleteNull(former.readMsgString());
            source.h_msg = deleteNull(former.readMsgString());
            source.h_field_msg = deleteNull(former.readMsgString());
            source.h_db_err_msg = deleteNull(former.readMsgString());
            source.col_set_id = deleteNull(former.readMsgString());
            source.col_set_version = former.readMsgInt();
        }


    }
}

