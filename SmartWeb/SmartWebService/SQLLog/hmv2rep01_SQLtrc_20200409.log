SELECT * FROM RWEBUSRDEF WHERE FACTORY = :FACTORY AND USER_ID= :USER_ID
-------------------------------------------------------------
SELECT A.FUNC_GRP_SEQ,A.SEC_GRP_ID,A.FUNC_GRP_ID,NVL(A.FUNC_NAME, ' ') FUNC_NAME, NVL(B.FUNC_DESC, ' ') FUNC_DESC, LANGUAGE_1, LANGUAGE_2, LANGUAGE_3
  FROM RWEBGRPFUN A, RWEBFUNDEF B
 WHERE A.FACTORY = :p_FACTORY
   AND A.SEC_GRP_ID = :p_SEC_GRP_ID
   AND A.FUNC_NAME=B.FUNC_NAME(+)
 ORDER BY A.FUNC_GRP_SEQ, A.FUNC_SEQ
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT PLAN_WEEK V1    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_DATE = TO_CHAR(SYSDATE,'yyyymmdd')      AND ROWNUM = 1  
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT DISTINCT PLAN_YEAR||LPAD(PLAN_WEEK,2,'0') AS PLAN_WEEK 
  FROM MWIPCALDEF
 WHERE 1=1 
   AND CALENDAR_ID = 'OTD' 
   AND SYS_YEAR||LPAD(SYS_MONTH,2,'0') = '202004' 
 ORDER BY PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT DISTINCT PLAN_YEAR||LPAD(PLAN_WEEK,2,'0') AS PLAN_WEEK 
  FROM MWIPCALDEF
 WHERE 1=1 
   AND CALENDAR_ID = 'OTD' 
   AND SYS_YEAR||LPAD(SYS_MONTH,2,'0') = '202004' 
   AND SYS_DATE <= '20200409' 
 ORDER BY PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT LANGUAGE_2 FROM RWEBFUNDEF WHERE FUNC_NAME = 'PRD010907'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT DISTINCT PLAN_YEAR||LPAD(PLAN_WEEK,2,'0') AS PLAN_WEEK 
  FROM MWIPCALDEF
 WHERE 1=1 
   AND CALENDAR_ID = 'OTD' 
   AND SYS_YEAR||LPAD(SYS_MONTH,2,'0') = '202004' 
 ORDER BY PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT DISTINCT PLAN_YEAR||LPAD(PLAN_WEEK,2,'0') AS PLAN_WEEK 
  FROM MWIPCALDEF
 WHERE 1=1 
   AND CALENDAR_ID = 'OTD' 
   AND SYS_YEAR||LPAD(SYS_MONTH,2,'0') = '202004' 
   AND SYS_DATE <= '20200409' 
 ORDER BY PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE) AS START_DAY 
     , MAX(SYS_DATE) AS END_DAY 
     , PLAN_YEAR||DECODE(LENGTH(PLAN_WEEK), 1, '0'||PLAN_WEEK, PLAN_WEEK) AS WEEK
  FROM MWIPCALDEF 
 WHERE CALENDAR_ID = 'OTD'
   AND (PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) IN ( 
                                                SELECT WW
                                                  FROM (
                                                        SELECT WW
                                                             , ROW_NUMBER() OVER(ORDER BY WW) AS RNK
                                                          FROM (
                                                                SELECT DISTINCT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW
                                                                  FROM MWIPCALDEF
                                                                 WHERE CALENDAR_ID = 'OTD'
                                                                   AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') >= (
                                                                                                              SELECT MAX(PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) AS WW
                                                                                                                FROM MWIPCALDEF
                                                                                                               WHERE CALENDAR_ID = 'OTD'
                                                                                                                 AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') < (SELECT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW FROM MWIPCALDEF WHERE CALENDAR_ID = 'OTD' AND SYS_DATE = '20200409')
                                                                                                                 AND SYS_DATE >= TO_CHAR(TO_DATE('20200409', 'YYYYMMDD')-14, 'YYYYMMDD')
                                                                                                             )
                                                               ) 
                                                       )
                                                 WHERE RNK <= 7
                                               ) 
 GROUP BY PLAN_YEAR, PLAN_WEEK 
 ORDER BY PLAN_YEAR, PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
WITH DT AS
(
 SELECT B.PLAN_MONTH, A.PLAN_WEEK, A.GUBUN, B.CKD_WEEK, A.MAT_ID, A.WW_QTY, B.CNT
      , ROUND((A.WW_QTY / 7) * B.CNT, 0) AS REV_QTY
   FROM RWIPPLNWEK A
      , (
         SELECT MAX(TRIM(TO_CHAR(PLAN_YEAR))||LPAD(PLAN_MONTH,2,'0')) PLAN_MONTH
              , MAX(TRIM(TO_CHAR(PLAN_YEAR))||LPAD(PLAN_WEEK,2,'0')) PLAN_WEEK
              , COUNT(*) AS CNT
              , (SELECT MAX(TRIM(TO_CHAR(PLAN_YEAR))||LPAD(PLAN_WEEK,2,'0')) PLAN_WEEK FROM MWIPCALDEF WHERE CALENDAR_ID = 'OTD' AND SYS_DATE = '20200409') AS CKD_WEEK
           FROM MWIPCALDEF
          WHERE 1=1
            AND CALENDAR_ID = 'OTD'
            AND SYS_YEAR||LPAD(SYS_MONTH,2,'0') IN ('202004','202005','202006')
          GROUP BY PLAN_MONTH, PLAN_WEEK
        ) B
  WHERE 1=1
    AND A.PLAN_WEEK = B.PLAN_WEEK
    AND A.FACTORY = 'HMVA2' 
)
SELECT CUST_TYPE, NVL((SELECT DATA_1 FROM MGCMTBLDAT WHERE TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = MAT_GRP_1 AND ROWNUM=1), '-') AS CUSTOMER, MAT_GRP_9 AS MAJOR_CODE, MAT_GRP_2 AS FAMILY,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ' 
     , ROUND(SUM(MON_PLN * CONVERT_QTY) /1000,0) AS MON_PLN
     , ROUND(SUM(REV_PLN * CONVERT_QTY) /1000,0) AS REV_PLN
     , ROUND(SUM(SOP_PLN * CONVERT_QTY) /1000,0) AS SOP_PLN
     , ROUND(SUM(W0 * CONVERT_QTY) /1000,0) AS W0
     , ROUND(SUM(W1 * CONVERT_QTY) /1000,0) AS W1
     , ROUND(SUM(W2 * CONVERT_QTY) /1000,0) AS W2
     , ROUND(SUM(W3 * CONVERT_QTY) /1000,0) AS W3
     , ROUND(SUM(W4 * CONVERT_QTY) /1000,0) AS W4
     , ROUND(SUM(SHP_W0 * CONVERT_QTY) /1000,0) AS SHP_W0
     , ROUND(SUM(SHP_W1 * CONVERT_QTY) /1000,0) AS SHP_W1
     , ROUND(SUM(M1 * CONVERT_QTY) /1000,0) AS M1
     , ROUND(SUM(M2 * CONVERT_QTY) /1000,0) AS M2
  FROM (
        SELECT MAT.* 
             , NVL((SELECT DATA_10 FROM MGCMTBLDAT WHERE TABLE_NAME = 'H_CUSTOMER' AND FACTORY = 'HMVA2' AND  KEY_1 = MAT_GRP_1), '-') AS CUST_TYPE 
             , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN M_PLN.MON_PLN / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE M_PLN.MON_PLN END AS MON_PLN
             , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN M_PLN.REV_PLN / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE M_PLN.REV_PLN END AS REV_PLN
             , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN M_PLN.SOP_PLN / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE M_PLN.SOP_PLN END AS SOP_PLN
             , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN W0 / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE W0 END AS W0
             , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN W1 / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE W1 END AS W1
             , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN W2 / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE W2 END AS W2
             , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN W3 / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE W3 END AS W3
             , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN W4 / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE W4 END AS W4
             , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN SHP_W0 / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE SHP_W0 END AS SHP_W0
             , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN SHP_W1 / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE SHP_W1 END AS SHP_W1
             , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN M0 / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE M0 END AS M0
             , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN M1 / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE M1 END AS M1
             , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN M2 / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE M2 END AS M2
             , 1 AS CONVERT_QTY
          FROM MWIPMATDEF MAT
             , (
                SELECT MAT_ID
                     , SUM(PLAN_QTY_ASSY) AS MON_PLN
                     , SUM(DECODE(RESV_FIELD1, ' ', 0, RESV_FIELD1)) AS REV_PLN
                     , SUM(DECODE(RESV_FIELD3, ' ', 0, RESV_FIELD3)) AS SOP_PLN
                  FROM CWIPPLNMON 
                 WHERE 1=1 
                   AND FACTORY = 'HMVA2' 
                   AND PLAN_MONTH = '202004'
                 GROUP BY MAT_ID
               ) M_PLN
             , (
                SELECT MAT_ID
                     , SUM(DECODE(PLAN_WEEK, '202014', SHP_QTY, 0)) AS SHP_W0 
                     , SUM(DECODE(PLAN_WEEK, '202015', SHP_QTY, 0)) AS SHP_W1 
                  FROM (
                        SELECT TRIM(TO_CHAR(PLAN_YEAR))||LPAD(PLAN_WEEK,2,'0') AS PLAN_WEEK, MAT_ID
                             , SUM(SHP_QTY_1) AS SHP_QTY
                          FROM VSUMWIPOUT A
                             , MWIPCALDEF B 
                         WHERE 1=1 
                           AND A.WORK_DATE = B.SYS_DATE(+) 
                           AND A.WORK_DATE LIKE '202004%'
                           AND A.LOT_TYPE = 'W' 
                           AND A.FACTORY = 'HMVA2' 
                           AND A.CM_KEY_2 = 'PROD' 
                           AND A.CM_KEY_3 LIKE 'P%'
                           AND B.CALENDAR_ID(+) = 'OTD'
                           AND B.PLAN_YEAR||LPAD(B.PLAN_WEEK,2,'0') <= '202015'
                         GROUP BY TRIM(TO_CHAR(PLAN_YEAR))||LPAD(PLAN_WEEK,2,'0'), MAT_ID 
                         UNION ALL 
                        SELECT PLAN_WEEK, MAT_ID, SUM(REV_QTY) 
                          FROM DT 
                         WHERE GUBUN = '3' 
                           AND PLAN_WEEK = '202015'
                           AND PLAN_MONTH = '202004'
                         GROUP BY PLAN_WEEK, MAT_ID 
                       )
                 GROUP BY MAT_ID
               ) SHP
             , (
                SELECT MAT_ID
                     , SUM(CASE WHEN PLAN_MONTH = '202004' AND PLAN_WEEK = '202014' THEN REV_QTY ELSE 0 END) AS W0 
                     , SUM(CASE WHEN PLAN_MONTH = '202004' AND PLAN_WEEK = '202015' THEN REV_QTY ELSE 0 END) AS W1 
                     , SUM(CASE WHEN PLAN_MONTH = '202004' AND PLAN_WEEK = '202016' THEN REV_QTY ELSE 0 END) AS W2 
                     , SUM(CASE WHEN PLAN_MONTH = '202004' AND PLAN_WEEK = '202017' THEN REV_QTY ELSE 0 END) AS W3 
                     , SUM(CASE WHEN PLAN_MONTH = '202004' AND PLAN_WEEK = '202018' THEN REV_QTY ELSE 0 END) AS W4 
                     , SUM(CASE WHEN PLAN_WEEK >= CKD_WEEK THEN REV_QTY ELSE 0 END) AS W_LAST
                     , SUM(DECODE(PLAN_MONTH, '202004', REV_QTY, 0)) AS M0
                     , SUM(DECODE(PLAN_MONTH, '202005', REV_QTY, 0)) AS M1
                     , SUM(DECODE(PLAN_MONTH, '202006', REV_QTY, 0)) AS M2
                  FROM (
                        SELECT * FROM DT WHERE GUBUN = '3'
                       )
                 GROUP BY MAT_ID
               ) W_PLN
         WHERE 1=1
           AND MAT.MAT_ID = M_PLN.MAT_ID(+)
           AND MAT.MAT_ID = SHP.MAT_ID(+)
           AND MAT.MAT_ID = W_PLN.MAT_ID(+)
           AND MAT.FACTORY = 'HMVA2'
           AND MAT.DELETE_FLAG = ' '
           AND MAT.MAT_TYPE = 'FG'
           AND MAT.MAT_ID LIKE '%'
       )
 GROUP BY CUST_TYPE, MAT_GRP_1, MAT_GRP_9, MAT_GRP_2,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ' 
HAVING SUM(NVL(MON_PLN,0) + NVL(REV_PLN,0) + NVL(SOP_PLN,0) +  + NVL(W0,0) + NVL(W1,0) + NVL(W2,0) + NVL(W3,0) + NVL(W4,0) + NVL(SHP_W0,0) + NVL(SHP_W1,0) + NVL(M0,0) + NVL(M1,0) + NVL(M2,0)) > 0
 ORDER BY DECODE(CUST_TYPE, 'SEC', 1, 'Hynix', 2, 'Fabless', 3, 4), MAT_GRP_1, MAT_GRP_9, MAT_GRP_2,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ' 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
SELECT DISTINCT LPAD(PLAN_WEEK,2,'0') AS PLAN_WEEK 
  FROM MWIPCALDEF 
 WHERE 1=1 
   AND CALENDAR_ID = 'OTD' 
   AND SYS_YEAR = '2020' 
   AND SYS_MONTH = '04' 
   AND SYS_DAY = '09' 
 ORDER BY PLAN_WEEK 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE) 
  FROM MWIPCALDEF 
 WHERE 1=1 
   AND CALENDAR_ID='OTD' 
   AND PLAN_YEAR='2020' 
   AND PLAN_WEEK='15' 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT DISTINCT PLAN_YEAR|| LPAD(PLAN_WEEK,2,'0') 
  FROM MWIPCALDEF 
 WHERE CALENDAR_ID = 'OTD' 
   AND SYS_YEAR || LPAD(SYS_MONTH,2,'0') IN ('202004', '202005' ,'202006') 
   AND SYS_DATE >= '20200409' 
 ORDER BY 1 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE) AS START_DAY 
     , MAX(SYS_DATE) AS END_DAY 
     , PLAN_YEAR||DECODE(LENGTH(PLAN_WEEK), 1, '0'||PLAN_WEEK, PLAN_WEEK) AS WEEK
  FROM MWIPCALDEF 
 WHERE CALENDAR_ID = 'OTD'
   AND (PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) IN ( 
                                                SELECT WW
                                                  FROM (
                                                        SELECT WW
                                                             , ROW_NUMBER() OVER(ORDER BY WW) AS RNK
                                                          FROM (
                                                                SELECT DISTINCT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW
                                                                  FROM MWIPCALDEF
                                                                 WHERE CALENDAR_ID = 'OTD'
                                                                   AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') >= (
                                                                                                              SELECT MAX(PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) AS WW
                                                                                                                FROM MWIPCALDEF
                                                                                                               WHERE CALENDAR_ID = 'OTD'
                                                                                                                 AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') < (SELECT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW FROM MWIPCALDEF WHERE CALENDAR_ID = 'OTD' AND SYS_DATE = '20200409')
                                                                                                                 AND SYS_DATE >= TO_CHAR(TO_DATE('20200409', 'YYYYMMDD')-14, 'YYYYMMDD')
                                                                                                             )
                                                               ) 
                                                       )
                                                 WHERE RNK <= 7
                                               ) 
 GROUP BY PLAN_YEAR, PLAN_WEEK 
 ORDER BY PLAN_YEAR, PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT LANGUAGE_2 FROM RWEBFUNDEF WHERE FUNC_NAME = 'MAT070503'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT DISTINCT TO_DATE(UPDATE_TIME,'YYYY-MM-DD HH24MISS') FROM RSUMWIPMAT
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT DISTINCT LPAD(PLAN_WEEK,2,'0') AS PLAN_WEEK 
  FROM MWIPCALDEF 
 WHERE 1=1 
   AND CALENDAR_ID = 'OTD' 
   AND SYS_YEAR = '2020' 
   AND SYS_MONTH = '04' 
   AND SYS_DAY = '09' 
 ORDER BY PLAN_WEEK 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE) 
  FROM MWIPCALDEF 
 WHERE 1=1 
   AND CALENDAR_ID='OTD' 
   AND PLAN_YEAR='2020' 
   AND PLAN_WEEK='15' 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT DISTINCT PLAN_YEAR|| LPAD(PLAN_WEEK,2,'0') 
  FROM MWIPCALDEF 
 WHERE CALENDAR_ID = 'OTD' 
   AND SYS_YEAR || LPAD(SYS_MONTH,2,'0') IN ('202004', '202005' ,'202006') 
   AND SYS_DATE >= '20200409' 
 ORDER BY 1 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE) AS START_DAY 
     , MAX(SYS_DATE) AS END_DAY 
     , PLAN_YEAR||DECODE(LENGTH(PLAN_WEEK), 1, '0'||PLAN_WEEK, PLAN_WEEK) AS WEEK
  FROM MWIPCALDEF 
 WHERE CALENDAR_ID = 'OTD'
   AND (PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) IN ( 
                                                SELECT WW
                                                  FROM (
                                                        SELECT WW
                                                             , ROW_NUMBER() OVER(ORDER BY WW) AS RNK
                                                          FROM (
                                                                SELECT DISTINCT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW
                                                                  FROM MWIPCALDEF
                                                                 WHERE CALENDAR_ID = 'OTD'
                                                                   AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') >= (
                                                                                                              SELECT MAX(PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) AS WW
                                                                                                                FROM MWIPCALDEF
                                                                                                               WHERE CALENDAR_ID = 'OTD'
                                                                                                                 AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') < (SELECT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW FROM MWIPCALDEF WHERE CALENDAR_ID = 'OTD' AND SYS_DATE = '20200409')
                                                                                                                 AND SYS_DATE >= TO_CHAR(TO_DATE('20200409', 'YYYYMMDD')-14, 'YYYYMMDD')
                                                                                                             )
                                                               ) 
                                                       )
                                                 WHERE RNK <= 7
                                               ) 
 GROUP BY PLAN_YEAR, PLAN_WEEK 
 ORDER BY PLAN_YEAR, PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
(SELECT TO_CHAR(LAST_DAY(TO_DATE('202003', 'YYYYMM')),'YYYYMMDD') FROM DUAL)
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE-1) 
  FROM MWIPCALDEF 
 WHERE 1=1
   AND CALENDAR_ID='SE'
   AND PLAN_YEAR='2020'
   AND PLAN_WEEK=(
                  SELECT PLAN_WEEK 
                    FROM MWIPCALDEF 
                   WHERE 1=1 
                     AND CALENDAR_ID='SE' 
                     AND SYS_DATE=TO_CHAR(TO_DATE('20200409','YYYYMMDD'),'YYYYMMDD')
                 )

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT  ' ', (SELECT DATA_1 FROM MGCMTBLDAT@RPTTOMES WHERE FACTORY = 'HMVA2' AND TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = CUSTOMER) AS CUSTOMER, FAMILY, PACKAGE,  ' ',  ' ', LD_COUNT, PKG_CODE,  ' ', MATCODE,  ' ',  ' ',  ' ', OPER 
     , RTRIM(TO_CHAR(USAGE, 'FM9990D9999'), '.') AS USAGE 
     , ROUND(WIP_STOCK/1000,0) AS WIP_STOCK 
     , ROUND(((MAT_TTL/USAGE*1000)-REV_QTY)/1000,0) AS CMM 
     , ROUND((((MAT_TTL/USAGE*1000)-REV_QTY)-WIP_STOCK)/1000,0) AS "재공대비과부족" 
     , CASE WHEN ((MAT_TTL/USAGE*1000)-REV_QTY)-WIP_STOCK<0 THEN ROUND((ABS(((MAT_TTL/USAGE*1000)-REV_QTY)-WIP_STOCK)*USAGE/1000)/1000,1) ELSE 0 END "원부자재입고필요" 
     , ROUND(SOP_PLN_WEEK/1000,0) AS SOP_PLN
     , ROUND(ASSY_WEEK/1000,0) AS ASSY_WEEK 
     , ROUND((SOP_PLN_WEEK-ASSY_WEEK)/1000,1) AS "공정기준잔량" 
     , ROUND(((SOP_PLN_WEEK-ASSY_WEEK)*USAGE/1000)/1000,1) AS "원부자재필요" 
     , ROUND((MAT_TTL-((SOP_PLN_WEEK-ASSY_WEEK)*USAGE/1000))/1000,0) AS "계획대비과부족" 
     , ROUND(MAT_TTL/1000,0) AS MAT_TTL 
     , ROUND(MAT_SMT_IN/1000,0) AS MAT_SMT_IN 
     , ROUND(MAT_L_IN/1000,0) AS MAT_L_IN 
     , ROUND(WIK_WIP/1000,0) AS WIK_WIP 
     , ROUND(MAT_INV_L_QTY/1000,0) AS MAT_INV_L_QTY 
     , ROUND(MAT_INV_QTY/1000,0) AS MAT_INV_QTY 
     , ROUND(ORDER_QTY/1000,0) AS ORDER_QTY 
     , ROUND((SOP_PLN_WEEK-ASSY_WEEK)/1000,0) AS W0 
     , ROUND(W1/1000,0) AS W1 
     , ROUND(W2/1000,0) AS W2 
     , ROUND(W3/1000,0) AS W3 
     , ROUND(W4/1000,0) AS W4 
     , ROUND(W5/1000,0) AS W5 
     , ROUND(W6/1000,0) AS W6 
     , ROUND(W7/1000,0) AS W7 
     , ROUND((MAT_TTL-((SOP_PLN_WEEK-ASSY_WEEK)*USAGE/1000))/1000,0) AS MW0 
     , ROUND((MAT_TTL-((SOP_PLN_WEEK-ASSY_WEEK)*USAGE/1000) - (W1*USAGE/1000))/1000,0) AS MW1 
     , ROUND((MAT_TTL-((SOP_PLN_WEEK-ASSY_WEEK)*USAGE/1000) - (W1*USAGE/1000) - (W2*USAGE/1000))/1000,0) AS MW2 
     , ROUND((MAT_TTL-((SOP_PLN_WEEK-ASSY_WEEK)*USAGE/1000) - (W1*USAGE/1000) - (W2*USAGE/1000) - (W3*USAGE/1000))/1000,0) AS MW3 
     , ROUND((MAT_TTL-((SOP_PLN_WEEK-ASSY_WEEK)*USAGE/1000) - (W1*USAGE/1000) - (W2*USAGE/1000) - (W3*USAGE/1000) - (W4*USAGE/1000))/1000,0) AS MW4 
     , ROUND((MAT_TTL-((SOP_PLN_WEEK-ASSY_WEEK)*USAGE/1000) - (W1*USAGE/1000) - (W2*USAGE/1000) - (W3*USAGE/1000) - (W4*USAGE/1000) - (W5*USAGE/1000))/1000,0) AS MW5 
     , ROUND((MAT_TTL-((SOP_PLN_WEEK-ASSY_WEEK)*USAGE/1000) - (W1*USAGE/1000) - (W2*USAGE/1000) - (W3*USAGE/1000) - (W4*USAGE/1000) - (W5*USAGE/1000) - (W6*USAGE/1000))/1000,0) AS MW6 
     , ROUND((MAT_TTL-((SOP_PLN_WEEK-ASSY_WEEK)*USAGE/1000) - (W1*USAGE/1000) - (W2*USAGE/1000) - (W3*USAGE/1000) - (W4*USAGE/1000) - (W5*USAGE/1000) - (W6*USAGE/1000) - (W7*USAGE/1000))/1000,0) AS MW7 
  FROM ( 
        SELECT  ' ', MAT.MAT_GRP_1 AS CUSTOMER, MAT.MAT_GRP_2 AS FAMILY, MAT_GRP_10 AS PACKAGE,  ' ',  ' ', MAT.MAT_GRP_6 AS LD_COUNT, MAT.MAT_CMF_11 AS PKG_CODE,  ' ', REPLACE(A.MATCODE, '-O','') AS MATCODE,  ' ',  ' ',  ' ', A.OPER
             , SUM(A.SOP_PLN_MON) AS SOP_PLN_MON 
             , SUM(A.SOP_PLN_WEEK) AS SOP_PLN_WEEK 
             , SUM(A.WEEK_AO+A.WIP_STOCK_NEXT) AS ASSY_WEEK 
             , SUM(A.ASSY_MON+A.WIP_STOCK_NEXT) AS ASSY_MON 
             , SUM(A.WIP_STOCK) AS WIP_STOCK 
             , SUM(A.REV_QTY) AS REV_QTY 
             , MAX(A.USAGE) AS USAGE 
             , MAX(A.TTL) AS MAT_TTL 
             , MAX(A.SMT_IN) AS MAT_SMT_IN 
             , MAX(A.L_IN) AS MAT_L_IN 
             , MAX(A.WIK_WIP) AS WIK_WIP 
             , MAX(A.INV_L_QTY) AS MAT_INV_L_QTY 
             , MAX(A.INV_QTY) AS MAT_INV_QTY 
             , MAX(A.ORDER_QTY) AS ORDER_QTY 
             , MAX(A.WIP_STOCK-A.IN_QTY) AS  IN_QTY 
             , SUM(A.W0) AS W0 
             , SUM(A.W1) AS W1 
             , SUM(A.W2) AS W2 
             , SUM(A.W3) AS W3 
             , SUM(A.W4) AS W4 
             , SUM(A.W5) AS W5 
             , SUM(A.W6) AS W6 
             , SUM(A.W7) AS W7 
        FROM MWIPMATDEF MAT 
           ,  ( 
              SELECT MAT.MAT_ID 
                   , C.MATTYPE 
                   , C.MATCODE 
                   , C.DESCRIPT 
                   , C.OPER 
                   , C.UNIT 
                   , MAX(A.SOP_PLN_MON) AS  SOP_PLN_MON 
                   , MAX(A.SOP_PLN_WEEK) AS  SOP_PLN_WEEK 
                   , MAX(USAGE) AS USAGE 
                   , MAX(A.WEEK_AO) AS WEEK_AO 
                   , MAX(A.ASSY_MON) AS ASSY_MON 
                   , SUM(NVL((CASE WHEN MAT.MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT.MAT_GRP_5 <> '-' THEN CASE WHEN MAT.MAT_GRP_5 IN ('1st','Merge') OR MAT.MAT_GRP_5 LIKE 'Middle%' THEN CASE WHEN B.OPER = 'A0000' THEN NVL(B.VO,0) ELSE 0 END ELSE 0 END  
                               ELSE CASE WHEN B.OPER = 'A0000' THEN NVL(B.VO,0) ELSE 0 END 
                           END),0)) AS WIP_STOCK 
                   , SUM(NVL((CASE WHEN MAT.MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT.MAT_GRP_5 <> '-' THEN CASE WHEN MAT.MAT_GRP_5 IN ('1st','Merge') OR MAT.MAT_GRP_5 LIKE 'Middle%' THEN CASE WHEN (B.OPER BETWEEN C.OPER AND 'AZ010') AND B.OPER <> C.OPER THEN NVL(B.VO,0) ELSE 0 END ELSE 0 END  
                               ELSE CASE WHEN (B.OPER BETWEEN C.OPER AND 'AZ010') AND B.OPER <> C.OPER THEN NVL(B.VO,0) ELSE 0 END  
                           END),0)) AS WIP_STOCK_NEXT 
                   , SUM(NVL((CASE WHEN MAT.MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT.MAT_GRP_5 <> '-' THEN CASE WHEN MAT.MAT_GRP_5 IN ('1st','Merge') OR MAT.MAT_GRP_5 LIKE 'Middle%' THEN CASE WHEN (B.OPER BETWEEN 'A0000' AND C.OPER) AND B.OPER <> 'A0000' THEN NVL(B.VO,0) ELSE 0 END ELSE 0 END  
                               ELSE CASE WHEN (B.OPER BETWEEN 'A0000' AND C.OPER) AND B.OPER <> 'A0000' THEN NVL(B.VO,0) ELSE 0 END  
                           END),0)) AS REV_QTY 
                   , MAX(C.TTL) AS TTL 
                   , MAX(C.SMT_IN) AS SMT_IN 
                   , MAX(C.L_IN) AS L_IN 
                   , MAX(C.WIK_WIP) AS WIK_WIP 
                   , MAX(C.INV_L_QTY) AS INV_L_QTY 
                   , MAX(C.INV_QTY) AS INV_QTY 
                   , MAX(C.ORDER_QTY) AS ORDER_QTY 
                   , MAX(C.IN_QTY) AS IN_QTY 
                   , MAX(A.W0) AS W0 
                   , MAX(A.W1) AS W1 
                   , MAX(A.W2) AS W2 
                   , MAX(A.W3) AS W3 
                   , MAX(A.W4) AS W4 
                   , MAX(A.W5) AS W5 
                   , MAX(A.W6) AS W6 
                   , MAX(A.W7) AS W7 
                FROM MWIPMATDEF MAT 
                   , ( 
                      SELECT MAT.MAT_ID   
                           , MAX(CASE WHEN MAT.MAT_GRP_3 IN ('COB') THEN ROUND(NVL(PLAN.RESV_FIELD1,0)/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0) ELSE NVL(PLAN.RESV_FIELD1,0) END) AS SOP_PLN_MON 
                           , MAX(CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN NVL(W_PLN.W0,0) / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE NVL(W_PLN.W0,0) END) AS SOP_PLN_WEEK  
                           , MAX(CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN ROUND(NVL(WEEK_AO.WEEK_AO,0)/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0) ELSE NVL(WEEK_AO.WEEK_AO,0) END) WEEK_AO 
                           , MAX(CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN ROUND(NVL(MON_AO.ASSY_MON,0)/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0) ELSE NVL(MON_AO.ASSY_MON,0) END) ASSY_MON 
                           , MAX(CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN NVL(W0,0) / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE NVL(W0,0) END) AS W0 
                           , MAX(CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN NVL(W1,0) / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE NVL(W1,0) END) AS W1 
                           , MAX(CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN NVL(W2,0) / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE NVL(W2,0) END) AS W2 
                           , MAX(CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN NVL(W3,0) / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE NVL(W3,0) END) AS W3 
                           , MAX(CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN NVL(W4,0) / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE NVL(W4,0) END) AS W4 
                           , MAX(CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN NVL(W5,0) / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE NVL(W5,0) END) AS W5 
                           , MAX(CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN NVL(W6,0) / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE NVL(W6,0) END) AS W6 
                           , MAX(CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN NVL(W7,0) / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE NVL(W7,0) END) AS W7 
                           , MAX(W_PLN.W_LAST) AS W_LAST 
                        FROM MWIPMATDEF MAT  
                           , (    
                              SELECT MAT_ID, SUM(S1_FAC_OUT_QTY_1+S2_FAC_OUT_QTY_1+S3_FAC_OUT_QTY_1) AS SHP_QTY  
                                FROM RSUMFACMOV   
                               WHERE 1=1   
                                 AND WORK_DATE BETWEEN '20200404' AND '20200409' 
                                 AND LOT_TYPE = 'W'   
                                 AND CM_KEY_1 = 'HMVA2'   
                                 AND CM_KEY_2 = 'PROD'   
                                 AND CM_KEY_3 LIKE 'P%' 
                                 AND FACTORY NOT IN ('RETURN')  
                               GROUP BY MAT_ID     
                             ) SHP   
                          , ( 
                             SELECT MAT_ID 
                                  , SUM(DECODE(WORK_DATE,'20200331', 0, NVL(S1_FAC_OUT_QTY_1 + S2_FAC_OUT_QTY_1 + S3_FAC_OUT_QTY_1 + S4_FAC_OUT_QTY_1, 0))) AS ASSY_MON 
                               FROM RSUMFACMOV 
                               WHERE 1=1 
                                 AND WORK_DATE BETWEEN '20200331' AND '20200409'
                                 AND LOT_TYPE = 'W' 
                                 AND CM_KEY_1 = 'HMVA2' 
                                 AND CM_KEY_2 = 'PROD' 
                                 AND CM_KEY_3 LIKE 'P%' 
                                 AND FACTORY NOT IN ('RETURN') 
                               GROUP BY MAT_ID 
                             ) MON_AO 
                           , ( 
                              SELECT MAT_ID 
                                   , SUM(NVL(S1_FAC_OUT_QTY_1 + S2_FAC_OUT_QTY_1 + S3_FAC_OUT_QTY_1 + S4_FAC_OUT_QTY_1, 0)) AS WEEK_AO  
                                FROM RSUMFACMOV 
                               WHERE 1=1 
                                 AND WORK_DATE BETWEEN '20200404' AND '20200410'
                                 AND LOT_TYPE = 'W' 
                                 AND CM_KEY_1 = 'HMVA2' 
                                 AND CM_KEY_2 = 'PROD' 
                                 AND CM_KEY_3 LIKE 'P%' 
                                 AND FACTORY NOT IN ('RETURN') 
                               GROUP BY MAT_ID 
                             ) WEEK_AO 
                           , (  
                              SELECT FACTORY,MAT_ID,PLAN_QTY_ASSY,PLAN_MONTH, RESV_FIELD1  
                                FROM (  
                                      SELECT FACTORY, MAT_ID, SUM(PLAN_QTY_ASSY) AS PLAN_QTY_ASSY, PLAN_MONTH, SUM(RESV_FIELD1) AS RESV_FIELD1   
                                        FROM (  
                                              SELECT FACTORY, MAT_ID, SUM(PLAN_QTY_ASSY) AS PLAN_QTY_ASSY, PLAN_MONTH, SUM(TO_NUMBER(DECODE(RESV_FIELD1,' ',0,RESV_FIELD1))) AS RESV_FIELD1  
                                                FROM CWIPPLNMON  
                                               WHERE 1=1  
                                                 AND FACTORY = 'HMVA2'  
                                               GROUP BY FACTORY, MAT_ID, PLAN_MONTH  
                                             )  
                                       GROUP BY FACTORY, MAT_ID,PLAN_MONTH  
                                     )  
                                WHERE PLAN_MONTH = '202004' 
                             ) PLAN 
                           , (   
                              SELECT MAT_ID   
                                   , SUM(DECODE(PLAN_WEEK, '202015', WW_QTY, 0)) AS W0  
                                   , SUM(DECODE(PLAN_WEEK, '202016', WW_QTY, 0)) AS W1  
                                   , SUM(DECODE(PLAN_WEEK, '202017', WW_QTY, 0)) AS W2  
                                   , SUM(DECODE(PLAN_WEEK, '202018', WW_QTY, 0)) AS W3  
                                   , SUM(DECODE(PLAN_WEEK, '202019', WW_QTY, 0)) AS W4  
                                   , SUM(DECODE(PLAN_WEEK, '202020', WW_QTY, 0)) AS W5  
                                   , SUM(DECODE(PLAN_WEEK, '202021', WW_QTY, 0)) AS W6  
                                   , SUM(DECODE(PLAN_WEEK, '202022', WW_QTY, 0)) AS W7  
                                   , SUM(CASE WHEN PLAN_WEEK >= CKD_S_WEEK AND PLAN_WEEK <= CKD_L_WEEK THEN REV_QTY ELSE 0 END) AS W_LAST   
                                FROM (   
                                      SELECT A.PLAN_WEEK, B.CKD_S_WEEK, B.CKD_L_WEEK, A.MAT_ID, A.WW_QTY, B.CNT   
                                           , ROUND((A.WW_QTY / 7) * B.CNT, 0) AS REV_QTY   
                                        FROM RWIPPLNWEK A   
                                           , (   
                                              SELECT MAX(TRIM(TO_CHAR(PLAN_YEAR))||LPAD(PLAN_WEEK,2,'0')) PLAN_WEEK, COUNT(*) AS CNT  
                                                   , (SELECT MAX(TRIM(TO_CHAR(PLAN_YEAR))||LPAD(PLAN_WEEK,2,'0')) PLAN_WEEK FROM MWIPCALDEF WHERE CALENDAR_ID = 'OTD' AND SYS_DATE = '20200404') AS CKD_S_WEEK 
                                                   , (SELECT MAX(TRIM(TO_CHAR(PLAN_YEAR))||LPAD(PLAN_WEEK,2,'0')) PLAN_WEEK FROM MWIPCALDEF WHERE CALENDAR_ID = 'OTD' AND SYS_DATE = '20200409') AS CKD_L_WEEK 
                                                FROM MWIPCALDEF  
                                               WHERE 1=1  
                                                 AND CALENDAR_ID = 'OTD'  
                                                 AND PLAN_YEAR||LPAD(PLAN_MONTH,2,'0') IN('202004','202005','202006') 
                                               GROUP BY PLAN_WEEK  
                                             ) B   
                                       WHERE 1=1   
                                         AND A.PLAN_WEEK = B.PLAN_WEEK   
                                         AND A.FACTORY = 'HMVA2'     
                                         AND A.GUBUN = '3'    
                                     )   
                               GROUP BY MAT_ID   
                             ) W_PLN   
                       WHERE 1=1  
                         AND MAT.MAT_ID = PLAN.MAT_ID(+) 
                         AND MAT.MAT_ID = SHP.MAT_ID(+)  
                         AND MAT.MAT_ID = W_PLN.MAT_ID(+)  
                         AND MAT.MAT_ID = MON_AO.MAT_ID(+)  
                         AND MAT.MAT_ID = WEEK_AO.MAT_ID(+)  
                         AND MAT.FACTORY = 'HMVA2'  
                         AND MAT.DELETE_FLAG = ' '  
                         AND MAT.MAT_TYPE = 'FG'  
                         AND MAT.MAT_ID LIKE '%'  
                       GROUP BY MAT.MAT_ID 
                     ) A 
                   , ( 
                      SELECT LOT.MAT_ID, MAT.MAT_GRP_3, LOT.OPER_GRP_1, LOT.OPER 
                           , DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY) AS VO 
                        FROM ( 
                              SELECT FACTORY, MAT_ID, OPER_GRP_1, OPER 
                                   , SUM(CASE WHEN OPER <= 'A0395' THEN QTY_1 / NVL(COMP_CNT,1) 
                                              ELSE QTY_1 
                                         END) QTY 
                                FROM ( 
                                      SELECT A.FACTORY, A.MAT_ID, B.OPER_GRP_1, B.OPER, A.QTY_1 
                                           , (SELECT DATA_1 FROM MGCMTBLDAT WHERE FACTORY = 'HMVA2' AND TABLE_NAME IN ('H_SEC_AUTO_LOSS','H_HX_AUTO_LOSS') AND KEY_1 = A.MAT_ID) AS COMP_CNT 
                                        FROM RWIPLOTSTS A 
                                           , MWIPOPRDEF B 
                                       WHERE 1 = 1 
                                         AND A.FACTORY = B.FACTORY(+) 
                                         AND A.OPER = B.OPER(+) 
                                         AND A.FACTORY = 'HMVA2' 
                                         AND A.LOT_TYPE = 'W' 
                                         AND A.LOT_DEL_FLAG = ' ' 
                                         AND B.OPER_GRP_1 NOT IN (' ', '-') 
                                         AND B.OPER BETWEEN 'A0000' AND 'AZ010' 
                                         AND A.LOT_CMF_5 LIKE 'P%' 
                                     ) 
                               GROUP BY FACTORY, MAT_ID, OPER_GRP_1, OPER 
                               ORDER BY MAT_ID, OPER, OPER_GRP_1 
                             ) LOT 
                           , MWIPMATDEF MAT 
                       WHERE 1 = 1 
                         AND LOT.FACTORY = MAT.FACTORY 
                         AND LOT.MAT_ID = MAT.MAT_ID 
                         AND MAT.DELETE_FLAG <> 'Y' 
                         AND MAT.MAT_GRP_2 <> '-' 
                       ORDER BY LOT.OPER, LOT.OPER_GRP_1 
                     ) B 
                   , ( 
                      SELECT MAT.MAT_ID    
                           , SMM.MAT_TYPE AS MATTYPE   
                           , MAX(NVL(SMM.UNIT_QTY,0)) AS USAGE   
                           , SMM.MATCODE AS MATCODE 
                           , SMM.DESCRIPT AS DESCRIPT 
                           , SMM.OPER AS OPER  
                           , SMM.UNIT_1 AS UNIT  
                           , MAX(WIP_MAT.TTL) AS TTL 
                           , MAX(WIP_MAT.SMT_IN) AS SMT_IN 
                           , MAX(WIP_MAT.L_IN) AS L_IN 
                           , MAX(WIP_MAT.WIK_WIP) AS WIK_WIP 
                           , MAX(WIP_MAT.INV_L_QTY) AS INV_L_QTY 
                           , MAX(WIP_MAT.INV_QTY) AS INV_QTY 
                           , MAX(WIP_MAT.ORDER_QTY) AS ORDER_QTY 
                           , MAX(WIP_MAT.IN_QTY) AS IN_QTY 
                        FROM MWIPMATDEF MAT  
                           , (   
                              SELECT DISTINCT NVL(P.MAT_ID,B.PARTNUMBER) PARTNUMBER, B.MATCODE, B.DESCRIPT, B.RESV_FIELD_2 AS MAT_TYPE, B.UNIT AS UNIT_1, B.UNIT_QTY, B.STEPID AS OPER 
                                FROM CWIPMATDEF@RPTTOMES A  
                                   , CWIPBOMDEF B  
                                   , RWIPMCPBOM P    
                               WHERE 1=1  
                                 AND A.MAT_ID = B.MATCODE  
                                 AND A.FACTORY = 'HMVA2'  
                                 AND B.RESV_FIELD_2 IN ('CW','GW','MC','SB','SW','TE', 'LF', 'PB', 'RC')  
                                 AND B.RESV_FIELD_2 <> ' '  
                                 AND B.RESV_FLAG_1 = 'Y'  
                                 AND B.STEPID <> 'A0300'  
                                 AND B.MATCODE NOT LIKE '%-O'  
                                 AND B.PARTNUMBER = P.MCP_TO_PART(+) 
                               ORDER BY MATCODE 
                             ) SMM 
                           , (  
                              SELECT REPLACE(A.MAT_ID, '-O', '') AS MAT_ID 
                                   , SUM(NVL(B.INV_QTY,0)) + SUM(NVL(B.INV_L_QTY,0))+SUM(NVL(C.QTY_SMT,0))+SUM(NVL(C.QTY_TTL,0))+SUM(NVL(E.WIK_WIP,0)) AS TTL 
                                   , SUM(NVL(C.QTY_SMT,0)) AS SMT_IN  
                                   , SUM(NVL(C.QTY_TTL,0)) AS L_IN  
                                   , SUM(NVL(E.WIK_WIP,0)) AS WIK_WIP  
                                   , SUM(NVL(B.INV_L_QTY,0)) AS INV_L_QTY  
                                   , SUM(NVL(B.INV_QTY,0)) AS INV_QTY  
                                   , SUM(NVL(D.ORDER_QTY,0)) AS ORDER_QTY  
                                   , SUM(NVL(C.IN_QTY,0)) AS IN_QTY  
                                FROM MWIPMATDEF A     
                                   , (     
                                      SELECT MAT_ID 
                                           , SUM(INV_QTY) AS INV_QTY 
                                           , SUM(INV_L_QTY) AS INV_L_QTY 
                                        FROM ( 
                                              SELECT MAT_ID  
                                                   , SUM(DECODE(STORAGE_LOCATION, '1000', QUANTITY, '1003', QUANTITY, 0)) AS INV_QTY  
                                                   , SUM(DECODE(STORAGE_LOCATION, '1001', QUANTITY, 0)) AS INV_L_QTY    
                                                FROM CWMSLOTSTS@RPTTOMES 
                                               WHERE 1=1 
                                                 AND QUANTITY> 0 
                                                 AND STORAGE_LOCATION IN ('1000', '1001', '1003') 
                                               GROUP BY MAT_ID  
                                               UNION ALL 
                                              SELECT MAT_ID, 0 AS INV_QTY, SUM(QTY_1) AS INV_L_QTY 
                                                FROM CWIPMATSLP@RPTTOMES 
                                               WHERE 1=1 
                                                 AND RECV_FLAG = ' ' 
                                                 AND IN_TIME BETWEEN '20200407000000' AND '20200409235959' 
                                               GROUP BY MAT_ID 
                                             ) 
                                       GROUP BY MAT_ID 
                                     ) B     
                                   , (     
                                      SELECT MAT_ID  
                                           , SUM(CASE WHEN B.LOT_ID IS NOT NULL THEN 1   
                                                      ELSE 0   
                                                 END) AS IN_QTY   
                                           , COUNT(*) AS LOT_TTL   
                                           , SUM(CASE WHEN OPER LIKE 'M%' AND OPER <= 'M0330' THEN QTY_1 ELSE 0 END) AS QTY_SMT  
                                           , SUM(CASE WHEN OPER LIKE 'A%' OR OPER > 'M0330' THEN QTY_1 ELSE 0 END) AS QTY_TTL  
                                        FROM RWIPLOTSTS A   
                                           , CRASRESMAT B   
                                       WHERE 1=1    
                                         AND A.FACTORY = B.FACTORY(+)   
                                         AND A.LOT_ID = B.LOT_ID(+)   
                                         AND A.FACTORY = 'HMVA2'  
                                         AND A.LOT_TYPE != 'W'  
                                         AND A.LOT_DEL_FLAG = ' '  
                                         AND A.LOT_CMF_2 = '-'   
                                         AND A.LOT_CMF_9 != ' '   
                                         AND A.QTY_1 > 0   
                                         AND A.OPER NOT IN  ('00001', '00002', 'V0000')   
                                       GROUP BY A.MAT_ID    
                                     ) C     
                                   , (     
                                      SELECT MAT_ID, SUM(ORDER_QUAN) AS ORDER_QTY     
                                        FROM RSAPORDQNT     
                                       WHERE 1=1     
                                         AND CREATE_TIME = TO_CHAR(SYSDATE, 'YYYYMMDD')     
                                       GROUP BY MAT_ID     
                                     ) D 
                                   , ( 
                                      SELECT MAT_ID, SUM(LOT_QTY) AS WIK_WIP 
                                        FROM ISTMWIKWIP@RPTTOMES 
                                       WHERE 1=1 
                                         AND CUTOFF_DT = '20200409' || TO_CHAR(SYSDATE, 'HH24')
                                       GROUP BY MAT_ID 
                                     ) E 
                               WHERE 1=1 
                                 AND A.MAT_ID = B.MAT_ID(+) 
                                 AND A.MAT_ID = C.MAT_ID(+) 
                                 AND A.MAT_ID = D.MAT_ID(+) 
                                 AND A.MAT_ID = E.MAT_ID(+) 
                                 AND A.FACTORY = 'HMVA2' 
                               GROUP BY REPLACE(A.MAT_ID, '-O', '') 
                               HAVING SUM(NVL(B.INV_QTY,0)) + SUM(NVL(C.QTY_SMT,0)) + SUM(NVL(C.QTY_TTL,0)) + SUM(NVL(B.INV_L_QTY,0)) + SUM(NVL(D.ORDER_QTY,0)) + SUM(NVL(E.WIK_WIP,0)) + SUM(NVL(C.IN_QTY,0)) > 0 
                             ) WIP_MAT 
                       WHERE 1=1 
                         AND MAT.MAT_ID = SMM.PARTNUMBER(+) 
                         AND SMM.MATCODE = WIP_MAT.MAT_ID(+) 
                         AND MAT.FACTORY = 'HMVA2' 
                         AND MAT.DELETE_FLAG = ' ' 
                         AND MAT.MAT_TYPE = 'FG' 
                         AND MAT.MAT_ID LIKE '%' 
                         AND SMM.UNIT_QTY > 0 
                       GROUP BY MAT.MAT_ID, SMM.MAT_TYPE, SMM.DESCRIPT, SMM.MATCODE, SMM.DESCRIPT, SMM.OPER, SMM.UNIT_1 
                     ) C 
               WHERE 1=1 
                 AND MAT.MAT_ID = A.MAT_ID(+) 
                 AND MAT.MAT_ID = B.MAT_ID(+) 
                 AND MAT.MAT_ID = C.MAT_ID(+) 
                 AND MAT.FACTORY = 'HMVA2' 
                 AND MAT.DELETE_FLAG = ' ' 
                 AND MAT.VENDOR_ID <> ' ' 
               GROUP BY MAT.MAT_ID, C.MATTYPE, C.MATCODE, C.DESCRIPT, C.OPER, C.UNIT 
             ) A 
        WHERE 1=1  
          AND MAT.MAT_ID = A.MAT_ID(+) 
          AND MAT.FACTORY = 'HMVA2' 
          AND MAT.DELETE_FLAG = ' ' 
          AND A.MATCODE <> ' ' 
        GROUP BY  ' ', MAT.MAT_GRP_1, MAT.MAT_GRP_2, MAT.MAT_GRP_10,  ' ',  ' ', MAT.MAT_GRP_6, MAT.MAT_CMF_11,  ' ', REPLACE(A.MATCODE, '-O',''),  ' ',  ' ',  ' ', A.OPER
        HAVING ( 
                SUM(NVL(SOP_PLN_MON,0))+SUM(NVL(SOP_PLN_WEEK,0))+SUM(NVL(WEEK_AO,0))+SUM(NVL(WIP_STOCK,0))+SUM(NVL(REV_QTY,0))+MAX(NVL(TTL,0)) 
               +SUM(NVL(W0,0))+SUM(NVL(W1,0))+SUM(NVL(W2,0))+SUM(NVL(W3,0))+SUM(NVL(W4,0))+SUM(NVL(W5,0))+SUM(NVL(W6,0))+SUM(NVL(W7,0)) 
               ) > 0 
       ) A 
 WHERE 1=1  
   AND NVL(WIP_STOCK,0)+NVL(SOP_PLN_MON,0)+NVL(SOP_PLN_WEEK,0)+NVL(ASSY_WEEK,0)+NVL(REV_QTY,0)+NVL(MAT_TTL,0)+NVL(MAT_L_IN,0)+NVL(WIK_WIP,0)+NVL(MAT_INV_L_QTY,0)+NVL(MAT_INV_QTY,0)+NVL(ORDER_QTY,0)+NVL(W1,0)+NVL(W2,0)+NVL(W3,0)+NVL(W4,0)+NVL(W5,0)+NVL(W6,0)+NVL(W7,0) > 0 
 ORDER BY  ' ', DECODE(A.CUSTOMER, 'SE', 1, 'HX', 2, 'IM', 3, 'FC', 4, 'IG', 5, 6),CUSTOMER, FAMILY, PACKAGE,  ' ',  ' ', LD_COUNT, PKG_CODE,  ' ', MATCODE,  ' ',  ' ',  ' ', OPER

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT DISTINCT MAT_ID FROM CMATPLNINP@RPTTOMES WHERE PLAN_DATE <> ' '
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
SELECT LANGUAGE_2 FROM RWEBFUNDEF WHERE FUNC_NAME = 'PRD011014'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT (SELECT DATA_1 FROM MGCMTBLDAT@RPTTOMES WHERE FACTORY = 'HMVA2' AND TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = MAT_GRP_1) AS CUSTOMER,  ' ', MAT_GRP_10 AS PKG,  ' ', MAT_CMF_11 AS PKG_CODE,  ' ',  ' ', MAT_GRP_5 AS TYPE_2, OPER AS STEP,  ' ',  ' ',  ' ',  ' ',  ' ' 
     , RES_MODEL_S1, DECODE(SHP_MON_S1, 0, 0, ROUND(SHP_MON_S1/SHP_MON_TTL*100,2)) AS SHP_MON_S1, ROUND(UPH_S1, 0) AS UPH_S1 
     , RES_MODEL_S2, DECODE(SHP_MON_S2, 0, 0, ROUND(SHP_MON_S2/SHP_MON_TTL*100,2)) AS SHP_MON_S2, ROUND(UPH_S2, 0) AS UPH_S2 
     , RES_MODEL_S3, DECODE(SHP_MON_S3, 0, 0, ROUND(SHP_MON_S3/SHP_MON_TTL*100,2)) AS SHP_MON_S3, ROUND(UPH_S3, 0) AS UPH_S3 
     , RES_MODEL_S4, DECODE(SHP_MON_S4, 0, 0, ROUND(SHP_MON_S4/SHP_MON_TTL*100,2)) AS SHP_MON_S4, ROUND(UPH_S4, 0) AS UPH_S4 
     , RES_MODEL_S5, DECODE(SHP_MON_S5, 0, 0, ROUND(SHP_MON_S5/SHP_MON_TTL*100,2)) AS SHP_MON_S5, ROUND(UPH_S5, 0) AS UPH_S5 
     , RNAK AS SEC 
     , AMDL - RNAK AS NSEC 
     , DECODE(RNAK, 0, 0, ROUND(RNAK/AMDL*100,2)) AS RATE_COMP 
  FROM ( 
        SELECT MAT.MAT_GRP_1,  ' ', MAT.MAT_GRP_10,  ' ', MAT.MAT_CMF_11,  ' ',  ' ', MAT.MAT_GRP_5, A.OPER,  ' ',  ' ',  ' ',  ' ',  ' ' 
             , MAX(RANK)-1 AS RNAK 
             , MAX(B.AMDL) AS AMDL 
             , MAX(DECODE(RANK, 1, A.RES_MODEL, ' ')) AS RES_MODEL_TTL, SUM(DECODE(RANK, 1, A.SHP_MON, 0)) AS SHP_MON_TTL, AVG(DISTINCT DECODE(RANK, 1, A.UPH, NULL)) AS UPH_TTL 
             , MAX(DECODE(RANK, 2, A.RES_MODEL, ' ')) AS RES_MODEL_S1, SUM(DECODE(RANK, 2, A.SHP_MON, 0)) AS SHP_MON_S1, AVG(DISTINCT DECODE(RANK, 2, A.UPH, NULL)) AS UPH_S1 
             , MAX(DECODE(RANK, 3, A.RES_MODEL, ' ')) AS RES_MODEL_S2, SUM(DECODE(RANK, 3, A.SHP_MON, 0)) AS SHP_MON_S2, AVG(DISTINCT DECODE(RANK, 3, A.UPH, NULL)) AS UPH_S2 
             , MAX(DECODE(RANK, 4, A.RES_MODEL, ' ')) AS RES_MODEL_S3, SUM(DECODE(RANK, 4, A.SHP_MON, 0)) AS SHP_MON_S3, AVG(DISTINCT DECODE(RANK, 4, A.UPH, NULL)) AS UPH_S3 
             , MAX(DECODE(RANK, 5, A.RES_MODEL, ' ')) AS RES_MODEL_S4, SUM(DECODE(RANK, 5, A.SHP_MON, 0)) AS SHP_MON_S4, AVG(DISTINCT DECODE(RANK, 5, A.UPH, NULL)) AS UPH_S4 
             , MAX(DECODE(RANK, 6, A.RES_MODEL, ' ')) AS RES_MODEL_S5, SUM(DECODE(RANK, 6, A.SHP_MON, 0)) AS SHP_MON_S5, AVG(DISTINCT DECODE(RANK, 6, A.UPH, NULL)) AS UPH_S5 
          FROM MWIPMATDEF MAT 
             , ( 
                SELECT SHP.MAT_ID, SHP.OPER, SHP.RES_MODEL 
                     , SUM(NVL(SHP.QTY,0)) AS SHP_MON 
                     , SUM(NVL(UPH.UPEH,0)) AS UPH 
                     , ROW_NUMBER() OVER (PARTITION BY SHP.MAT_ID, SHP.OPER ORDER BY SHP.MAT_ID, SHP.OPER, DECODE(SHP.RES_MODEL, '', 1, 2), SUM(NVL(SHP.QTY,0)) DESC, SUM(NVL(UPH.UPEH,0)) DESC ) AS RANK   
                  FROM ( 
                        SELECT RES_MODEL, MAT_ID, OPER, SUM(MES_PROC_QTY) AS QTY 
                          FROM TSM_EQUIP_PROC_RESULT@RPTTOFA 
                         WHERE 1=1 
                           AND WORK_MONTH = '202003' 
                         GROUP BY RES_MODEL, MAT_ID, OPER 
                       ) SHP 
                     , CRASUPHDEF UPH 
                 WHERE 1=1 
                   AND UPH.FACTORY = 'HMVA2' 
                   AND SHP.MAT_ID = UPH.MAT_ID(+) 
                   AND SHP.OPER = UPH.OPER(+) 
                   AND SHP.RES_MODEL = UPH.RES_MODEL(+) 
                   AND SHP.OPER LIKE '%'
                   AND SHP.MAT_ID LIKE '%' 
                 GROUP BY GROUPING SETS ((SHP.MAT_ID, SHP.OPER, SHP.RES_MODEL), (SHP.MAT_ID, SHP.OPER)) 
               ) A 
             , ( 
                SELECT OPER, COUNT(OPER) AS AMDL 
                  FROM ( 
                        SELECT OPER, RES_MODEL 
                          FROM TSM_EQUIP_PROC_RESULT@RPTTOFA 
                         WHERE 1=1 
                           AND WORK_MONTH = '202003' 
                           AND OPER LIKE '%'
                         GROUP BY OPER, RES_MODEL 
                         ORDER BY OPER 
                       ) 
                 GROUP BY OPER 
               ) B 
         WHERE 1=1 
           AND MAT.FACTORY = 'HMVA2' 
           AND MAT.DELETE_FLAG = ' ' 
           AND MAT.MAT_TYPE = 'FG' 
           AND MAT.MAT_ID = A.MAT_ID 
           AND A.OPER = B.OPER(+) 
         GROUP BY MAT.MAT_GRP_1,  ' ', MAT.MAT_GRP_10,  ' ', MAT.MAT_CMF_11,  ' ',  ' ', MAT.MAT_GRP_5, A.OPER,  ' ',  ' ',  ' ',  ' ',  ' ' 
         ORDER BY DECODE(MAT.MAT_GRP_1, 'SE', 1, 'HX', 2, 'IM', 3, 'FC', 4, 'IG', 5, 6), MAT.MAT_GRP_1,  ' ', MAT.MAT_GRP_10,  ' ', MAT.MAT_CMF_11,  ' ',  ' ', DECODE(MAT.MAT_GRP_5, '-', 1, '1st', 2, 'Middle', 3, 'Middle1', 4, 'Middle 1', 5, 'Middle2', 6, 'Middle 2', 7, 'Merge', 8), MAT.MAT_GRP_5, A.OPER,  ' ',  ' ',  ' ',  ' ',  ' ' 
       ) 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT PLAN_WEEK V1    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_DATE = TO_CHAR(SYSDATE,'yyyymmdd')      AND ROWNUM = 1  
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT LANGUAGE_2 FROM RWEBFUNDEF WHERE FUNC_NAME = 'PRD010805'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT A.KEY_1, A.KEY_2, A.OPER, A.OPER_DESC
     , ROUND(AVG(A.UPEH), 0) AS UPEH
     , A.USER_CAPA
     , ROUND(AVG(A.UPOH), 0) AS UPOH
     , A.OP_EFFICE, A.YIELD
     , ROUND(SUM(CASE WHEN B.PLAN_DATE = '202004' THEN A.K_TIME * B.PLAN_QTY ELSE 0 END), 2) AS HUMAN_TIME_0
     , ROUND(SUM(CASE WHEN B.PLAN_DATE = '202004' THEN (A.K_TIME * B.PLAN_QTY) / B.WORK_DAY / 24 * 3 ELSE 0 END), 2) AS HUMAN_NEED_0
  FROM (
        SELECT KEY_1, KEY_2, KEY_3 AS OPER, DATA_1 AS OPER_DESC, DATA_3 AS USER_CAPA
             , DATA_4 AS OP_EFFICE, DATA_5 AS YIELD
             , B.MAT_GRP_1, B.MAT_GRP_5, B.PKG_CODE
             , AVG(B.UPEH) AS UPEH, AVG(B.UPEH * DATA_3) AS UPOH
             , AVG(CASE WHEN DATA_3 = ' ' OR DATA_4 = ' ' OR DATA_5 = ' ' THEN 0
                        WHEN B.UPEH IS NULL OR B.UPEH = 0 THEN 1000 / (B.OPER_AVG_UPEH * DATA_3 * (DATA_4/100) * (DATA_5/100)) * 1.15
                        ELSE 1000 / (B.UPEH * DATA_3 * (DATA_4/100) * (DATA_5/100)) * 1.15
                   END) AS K_TIME
             , AVG(B.OPER_AVG_UPEH) AS OPER_AVG_UPEH
          FROM MGCMTBLDAT A
             , (
                SELECT A.FACTORY, A.MAT_ID, A.OPER, A.UPEH, B.MAT_GRP_1, B.MAT_GRP_5, B.MAT_CMF_11
                     , CASE WHEN B.MAT_GRP_1 = 'HX' THEN B.MAT_ID ELSE B.MAT_CMF_11 END AS PKG_CODE
                     , AVG(A.UPEH) OVER(PARTITION BY A.OPER) AS OPER_AVG_UPEH
                  FROM CRASUPHDEF A
                     , MWIPMATDEF B
                 WHERE 1=1
                   AND A.FACTORY = B.FACTORY
                   AND A.MAT_ID = B.MAT_ID
                   AND A.FACTORY = 'HMVA2'
                   AND B.DELETE_FLAG = ' '
                   AND B.MAT_TYPE = 'FG'
               ) B
         WHERE 1=1
           AND A.FACTORY = B.FACTORY(+)
           AND A.KEY_3 = B.OPER(+)
           AND A.FACTORY = 'HMVA2'
           AND A.TABLE_NAME = 'H_RPT_HUMAN'
           AND A.DATA_2 = 'Y'
         GROUP BY KEY_1, KEY_2, KEY_3, DATA_1, DATA_3, DATA_4, DATA_5, B.MAT_GRP_1, B.MAT_GRP_5, PKG_CODE
       ) A
     , (
        SELECT PLAN_DATE, PKG_CODE, OPER, MAT_GRP_1, MAT_GRP_5, WORK_DAY
             , SUM(PLAN_QTY) AS PLAN_QTY
          FROM (
                SELECT B.PLAN_DATE, B.MAT_KEY, B.MAT_ID, C.OPER, TO_NUMBER(PLAN_QTY) AS PLAN_QTY
                     , CASE WHEN A.MAT_GRP_1 = 'HX' THEN A.MAT_ID ELSE A.MAT_CMF_11 END AS PKG_CODE
                     , MAT_GRP_1, MAT_GRP_2, MAT_GRP_4, MAT_GRP_5, MAT_GRP_6, MAT_CMF_11, FIRST_FLOW
                     , NET_DIE, COMP_CNT, HX_COMP_MIN, HX_COMP_MAX
                     , CASE WHEN MAT_GRP_4 IN ('-', 'FD', 'FU') THEN '1'
                            ELSE SUBSTR(MAT_GRP_4, 3) 
                       END AS STACK
                     , TO_CHAR(LAST_DAY(TO_DATE(B.PLAN_DATE, 'YYYYMM')), 'DD') AS WORK_DAY
                  FROM VWIPMATDEF A
                     , (
                        SELECT DISTINCT A.PLAN_MONTH AS PLAN_DATE
                             , CASE WHEN B.MAT_ID IS NULL THEN A.MAT_ID ELSE B.MCP_TO_PART END AS MAT_KEY
                             , CASE WHEN B.MAT_ID IS NULL THEN A.MAT_ID ELSE B.MAT_ID END AS MAT_ID
                             , A.RESV_FIELD1 / 1000 AS PLAN_QTY
                          FROM CWIPPLNMON A
                             , RWIPMCPBOM B
                         WHERE 1=1   
                           AND A.FACTORY = B.FACTORY(+)
                           AND A.MAT_ID = B.MCP_TO_PART(+)
                           AND A.FACTORY = 'HMVA2' 
                           AND A.PLAN_MONTH BETWEEN '202004' AND '202004'
                           AND DECODE(A.RESV_FIELD1, ' ', 0, A.RESV_FIELD1) > 0  
                       ) B 
                     , (
                        SELECT DISTINCT SUBSTR(PLNNR, 1, 4) AS FLOW, KTSCH AS OPER
                          FROM ZHPPT120@SAPREAL
                         WHERE 1=1
                           AND ARBPL != 'DUMMY'
                       ) C   
                 WHERE 1=1
                   AND A.MAT_ID = B.MAT_ID
                   AND A.FIRST_FLOW = C.FLOW(+)
                   AND A.FACTORY = 'HMVA2'
                   AND A.DELETE_FLAG = ' ' 
               )
         GROUP BY PLAN_DATE, PKG_CODE, OPER, MAT_GRP_1, MAT_GRP_5, WORK_DAY
       ) B
 WHERE 1=1
   AND A.PKG_CODE = B.PKG_CODE
   AND A.OPER = B.OPER
   AND A.MAT_GRP_1 = B.MAT_GRP_1
   AND A.MAT_GRP_5 = B.MAT_GRP_5
GROUP BY A.KEY_1, A.KEY_2, A.OPER, A.OPER_DESC, A.USER_CAPA, A.OP_EFFICE, A.YIELD
ORDER BY A.KEY_1, A.KEY_2, A.OPER, A.OPER_DESC, A.USER_CAPA, A.OP_EFFICE, A.YIELD

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
SELECT LANGUAGE_2 FROM RWEBFUNDEF WHERE FUNC_NAME = 'PRD011017'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT FACTORY Code, FAC_DESC Data
  FROM MWIPFACDEF
 WHERE FAC_GRP_5 = 'Y' 
 ORDER BY FAC_GRP_4 ASC
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT (SELECT DATA_1 FROM MGCMTBLDAT WHERE TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = MAT_GRP_1 AND ROWNUM=1) AS CUSTOMER,  ' ', MAT_GRP_10 AS PKG, MAT_GRP_6 AS LD_COUNT, CONV_MAT_ID, MAT_CMF_11 AS PKG_CODE,  ' ',  ' ', MAT_GRP_5 AS TYPE2,  ' ',  ' ',  ' ' 
     , OPER, RES_MODEL
     , ROUND(AVG(UPEH), 1) AS UPEH
     , ROUND(MIN(UPEH), 1) AS MIN_UPEH
     , ROUND(MAX(UPEH), 1) AS MAX_UPEH
     , ROUND(AVG(WPH), 1) AS WPH
  FROM (
        SELECT B.*
             , CASE WHEN B.MAT_GRP_1 = 'HX' THEN B.MAT_CMF_10
                    WHEN B.MAT_ID LIKE 'SEK%' THEN 'SEK_________-___' || SUBSTR(B.MAT_ID, -3)
                    ELSE B.MAT_ID
               END CONV_MAT_ID
             , A.OPER, A.RES_MODEL, A.UPEH
             , A.UPEH / (B.NET_DIE * (NVL(C.DAY_YIELD, 90) / 100)) AS WPH 
          FROM CRASUPHDEF A
             , VWIPMATDEF B
             , (
                SELECT MAT_ID, NET_DIE, DECODE(DAY_YIELD, 0, 90, DAY_YIELD) AS DAY_YIELD
                  FROM RSUMWAFYLD
                 WHERE 1=1
                   AND FACTORY = 'HMVA2'
                   AND WORK_DATE = TO_CHAR(SYSDATE-1, 'YYYYMMDD')
               ) C
         WHERE 1=1
           AND A.FACTORY = B.FACTORY
           AND A.MAT_ID = B.MAT_ID
           AND A.MAT_ID = C.MAT_ID(+)
           AND A.FACTORY = 'HMVA2'
           AND B.DELETE_FLAG = ' '
           AND B.MAT_TYPE = 'FG'
       )
 WHERE 1=1
   AND OPER LIKE '%'
 GROUP BY MAT_GRP_1,  ' ', MAT_GRP_10, MAT_GRP_6, CONV_MAT_ID, MAT_CMF_11,  ' ',  ' ', MAT_GRP_5,  ' ',  ' ',  ' ', OPER, RES_MODEL 
 ORDER BY MAT_GRP_1,  ' ', MAT_GRP_10, MAT_GRP_6, CONV_MAT_ID, MAT_CMF_11,  ' ',  ' ', MAT_GRP_5,  ' ',  ' ',  ' ', OPER, RES_MODEL 

-------------------------------------------------------------
SELECT * FROM RWEBUSRDEF WHERE FACTORY = :FACTORY AND USER_ID= :USER_ID
-------------------------------------------------------------
SELECT A.FUNC_GRP_SEQ,A.SEC_GRP_ID,A.FUNC_GRP_ID,NVL(A.FUNC_NAME, ' ') FUNC_NAME, NVL(B.FUNC_DESC, ' ') FUNC_DESC, LANGUAGE_1, LANGUAGE_2, LANGUAGE_3
  FROM RWEBGRPFUN A, RWEBFUNDEF B
 WHERE A.FACTORY = :p_FACTORY
   AND A.SEC_GRP_ID = :p_SEC_GRP_ID
   AND A.FUNC_NAME=B.FUNC_NAME(+)
 ORDER BY A.FUNC_GRP_SEQ, A.FUNC_SEQ
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
SELECT LANGUAGE_2 FROM RWEBFUNDEF WHERE FUNC_NAME = 'CUS060101'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
SELECT  KEY_1,DATA_3,DATA_4  
FROM    MGCMTBLDAT  
WHERE   1=1 
        AND FACTORY = '' 
        AND TABLE_NAME='LOSS_CODE' 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT PLAN_WEEK V1    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_DATE = TO_CHAR(SYSDATE,'yyyymmdd')      AND ROWNUM = 1  
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT LANGUAGE_2 FROM RWEBFUNDEF WHERE FUNC_NAME = 'YLD040601'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT FACTORY Code, FAC_DESC Data
  FROM MWIPFACDEF
 WHERE FAC_GRP_5 = 'Y' 
 ORDER BY FAC_GRP_4 ASC
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT  KEY_1,DATA_3,DATA_4  
FROM    MGCMTBLDAT  
WHERE   1=1 
        AND FACTORY = 'HMVA2' 
        AND TABLE_NAME='LOSS_CODE' 
        AND DATA_3='Y'  
ORDER BY TO_NUMBER(DATA_4) 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT  KEY_1,DATA_3,DATA_4  
FROM    MGCMTBLDAT  
WHERE   1=1 
        AND FACTORY = 'HMVA2' 
        AND TABLE_NAME='LOSS_CODE' 
        AND DATA_3='Y'  
ORDER BY TO_NUMBER(DATA_4) 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
WITH DT AS
(
 SELECT * 
   FROM CWIPLOTEND 
  WHERE 1=1 
    AND TRAN_TIME BETWEEN '20200407220000' AND '20200408215959' 
    AND TRAN_CODE = 'END' 
    AND LOT_TYPE = 'W' 
    AND FACTORY = 'HMVA2' 
    AND HIST_DEL_FLAG = ' ' 
    AND TRAN_CMF_1 = 'CLOSE' 
)
SELECT  ' ',  ' ', SUMMERY.MAT_GRP_6, SUMMERY.MAT_GRP_3,  ' ',  ' ',  ' ',  ' ', SUMMERY.MAT_ID
     , SUMMERY.LOT_ID,SUMMERY.IN_TIME,SUMMERY.SHIP_TIME 
     , SUMMERY.TAT AS TAT 
     , SUMMERY.BE_OUT + NVL(SUM(LOSS.BE_LOSS_QTY),0) + NVL(SUM(LOSS.IL_LOSS_QTY),0) AS IL_IN 
     , SUMMERY.BE_OUT + NVL(SUM(LOSS.BE_LOSS_QTY),0) AS IL_OUT 
     , ROUND(((SUMMERY.BE_OUT + NVL(SUM(LOSS.BE_LOSS_QTY),0))/(SUMMERY.BE_OUT + NVL(SUM(LOSS.BE_LOSS_QTY),0) + NVL(SUM(LOSS.IL_LOSS_QTY),0)))*100,3)||'%' AS IL_YIELD 
     , SUMMERY.BE_OUT + NVL(SUM(LOSS.BE_LOSS_QTY),0) AS BE_IN 
     , SUMMERY.BE_OUT 
     , ROUND((SUMMERY.BE_OUT/(SUMMERY.BE_OUT + NVL(SUM(LOSS.BE_LOSS_QTY),0)))*100,3)||'%' AS BE_YIELD 
     , SUMMERY.OUT_QTY + NVL(SUM(LOSS.LOSS_QTY),0) AS IN_QTY  
     , SUMMERY.OUT_QTY 
     , ROUND(SUMMERY.OUT_QTY/(SUMMERY.OUT_QTY + NVL(SUM(LOSS.LOSS_QTY),0))*100,3)||'%' AS YIELD 
     , '' AS BONUS 
     , NVL(SUM(LOSS.LOSS_QTY),0) AS LOSS_QTY 
     , SUM(DECODE(LOSS.LOSS_CODE,'80',LOSS.LOSS_QTY,0))  LOSS0
     , SUM(DECODE(LOSS.LOSS_CODE,'81',LOSS.LOSS_QTY,0))  LOSS1
     , SUM(DECODE(LOSS.LOSS_CODE,'82',LOSS.LOSS_QTY,0))  LOSS2
     , SUM(DECODE(LOSS.LOSS_CODE,'83',LOSS.LOSS_QTY,0))  LOSS3
     , SUM(DECODE(LOSS.LOSS_CODE,'84',LOSS.LOSS_QTY,0))  LOSS4
     , SUM(DECODE(LOSS.LOSS_CODE,'85',LOSS.LOSS_QTY,0))  LOSS5
     , SUM(DECODE(LOSS.LOSS_CODE,'86',LOSS.LOSS_QTY,0))  LOSS6
     , SUM(DECODE(LOSS.LOSS_CODE,'87',LOSS.LOSS_QTY,0))  LOSS7
     , SUM(DECODE(LOSS.LOSS_CODE,'88',LOSS.LOSS_QTY,0))  LOSS8
     , SUM(DECODE(LOSS.LOSS_CODE,'100',LOSS.LOSS_QTY,0))  LOSS9
     , SUM(DECODE(LOSS.LOSS_CODE,'102',LOSS.LOSS_QTY,0))  LOSS10
     , SUM(DECODE(LOSS.LOSS_CODE,'104',LOSS.LOSS_QTY,0))  LOSS11
     , SUM(DECODE(LOSS.LOSS_CODE,'105',LOSS.LOSS_QTY,0))  LOSS12
     , SUM(DECODE(LOSS.LOSS_CODE,'106',LOSS.LOSS_QTY,0))  LOSS13
     , SUM(DECODE(LOSS.LOSS_CODE,'107',LOSS.LOSS_QTY,0))  LOSS14
     , SUM(DECODE(LOSS.LOSS_CODE,'110',LOSS.LOSS_QTY,0))  LOSS15
     , SUM(DECODE(LOSS.LOSS_CODE,'111',LOSS.LOSS_QTY,0))  LOSS16
     , SUM(DECODE(LOSS.LOSS_CODE,'112',LOSS.LOSS_QTY,0))  LOSS17
     , SUM(DECODE(LOSS.LOSS_CODE,'114',LOSS.LOSS_QTY,0))  LOSS18
     , SUM(DECODE(LOSS.LOSS_CODE,'115',LOSS.LOSS_QTY,0))  LOSS19
     , SUM(DECODE(LOSS.LOSS_CODE,'116',LOSS.LOSS_QTY,0))  LOSS20
     , SUM(DECODE(LOSS.LOSS_CODE,'119',LOSS.LOSS_QTY,0))  LOSS21
     , SUM(DECODE(LOSS.LOSS_CODE,'120',LOSS.LOSS_QTY,0))  LOSS22
     , SUM(DECODE(LOSS.LOSS_CODE,'121',LOSS.LOSS_QTY,0))  LOSS23
     , SUM(DECODE(LOSS.LOSS_CODE,'122',LOSS.LOSS_QTY,0))  LOSS24
     , SUM(DECODE(LOSS.LOSS_CODE,'123',LOSS.LOSS_QTY,0))  LOSS25
     , SUM(DECODE(LOSS.LOSS_CODE,'124',LOSS.LOSS_QTY,0))  LOSS26
     , SUM(DECODE(LOSS.LOSS_CODE,'125',LOSS.LOSS_QTY,0))  LOSS27
     , SUM(DECODE(LOSS.LOSS_CODE,'127',LOSS.LOSS_QTY,0))  LOSS28
     , SUM(DECODE(LOSS.LOSS_CODE,'128',LOSS.LOSS_QTY,0))  LOSS29
     , SUM(DECODE(LOSS.LOSS_CODE,'200',LOSS.LOSS_QTY,0))  LOSS30
     , SUM(DECODE(LOSS.LOSS_CODE,'202',LOSS.LOSS_QTY,0))  LOSS31
     , SUM(DECODE(LOSS.LOSS_CODE,'203',LOSS.LOSS_QTY,0))  LOSS32
     , SUM(DECODE(LOSS.LOSS_CODE,'204',LOSS.LOSS_QTY,0))  LOSS33
     , SUM(DECODE(LOSS.LOSS_CODE,'205',LOSS.LOSS_QTY,0))  LOSS34
     , SUM(DECODE(LOSS.LOSS_CODE,'206',LOSS.LOSS_QTY,0))  LOSS35
     , SUM(DECODE(LOSS.LOSS_CODE,'207',LOSS.LOSS_QTY,0))  LOSS36
     , SUM(DECODE(LOSS.LOSS_CODE,'208',LOSS.LOSS_QTY,0))  LOSS37
     , SUM(DECODE(LOSS.LOSS_CODE,'209',LOSS.LOSS_QTY,0))  LOSS38
     , SUM(DECODE(LOSS.LOSS_CODE,'210',LOSS.LOSS_QTY,0))  LOSS39
     , SUM(DECODE(LOSS.LOSS_CODE,'211',LOSS.LOSS_QTY,0))  LOSS40
     , SUM(DECODE(LOSS.LOSS_CODE,'212',LOSS.LOSS_QTY,0))  LOSS41
     , SUM(DECODE(LOSS.LOSS_CODE,'213',LOSS.LOSS_QTY,0))  LOSS42
     , SUM(DECODE(LOSS.LOSS_CODE,'214',LOSS.LOSS_QTY,0))  LOSS43
     , SUM(DECODE(LOSS.LOSS_CODE,'215',LOSS.LOSS_QTY,0))  LOSS44
     , SUM(DECODE(LOSS.LOSS_CODE,'216',LOSS.LOSS_QTY,0))  LOSS45
     , SUM(DECODE(LOSS.LOSS_CODE,'217',LOSS.LOSS_QTY,0))  LOSS46
     , SUM(DECODE(LOSS.LOSS_CODE,'218',LOSS.LOSS_QTY,0))  LOSS47
     , SUM(DECODE(LOSS.LOSS_CODE,'219',LOSS.LOSS_QTY,0))  LOSS48
     , SUM(DECODE(LOSS.LOSS_CODE,'222',LOSS.LOSS_QTY,0))  LOSS49
     , SUM(DECODE(LOSS.LOSS_CODE,'224',LOSS.LOSS_QTY,0))  LOSS50
     , SUM(DECODE(LOSS.LOSS_CODE,'225',LOSS.LOSS_QTY,0))  LOSS51
     , SUM(DECODE(LOSS.LOSS_CODE,'250',LOSS.LOSS_QTY,0))  LOSS52
     , SUM(DECODE(LOSS.LOSS_CODE,'251',LOSS.LOSS_QTY,0))  LOSS53
     , SUM(DECODE(LOSS.LOSS_CODE,'265',LOSS.LOSS_QTY,0))  LOSS54
     , SUM(DECODE(LOSS.LOSS_CODE,'270',LOSS.LOSS_QTY,0))  LOSS55
     , SUM(DECODE(LOSS.LOSS_CODE,'291',LOSS.LOSS_QTY,0))  LOSS56
     , SUM(DECODE(LOSS.LOSS_CODE,'299',LOSS.LOSS_QTY,0))  LOSS57
     , SUM(DECODE(LOSS.LOSS_CODE,'302',LOSS.LOSS_QTY,0))  LOSS58
     , SUM(DECODE(LOSS.LOSS_CODE,'303',LOSS.LOSS_QTY,0))  LOSS59
     , SUM(DECODE(LOSS.LOSS_CODE,'304',LOSS.LOSS_QTY,0))  LOSS60
     , SUM(DECODE(LOSS.LOSS_CODE,'305',LOSS.LOSS_QTY,0))  LOSS61
     , SUM(DECODE(LOSS.LOSS_CODE,'306',LOSS.LOSS_QTY,0))  LOSS62
     , SUM(DECODE(LOSS.LOSS_CODE,'307',LOSS.LOSS_QTY,0))  LOSS63
     , SUM(DECODE(LOSS.LOSS_CODE,'308',LOSS.LOSS_QTY,0))  LOSS64
     , SUM(DECODE(LOSS.LOSS_CODE,'311',LOSS.LOSS_QTY,0))  LOSS65
     , SUM(DECODE(LOSS.LOSS_CODE,'312',LOSS.LOSS_QTY,0))  LOSS66
     , SUM(DECODE(LOSS.LOSS_CODE,'313',LOSS.LOSS_QTY,0))  LOSS67
     , SUM(DECODE(LOSS.LOSS_CODE,'314',LOSS.LOSS_QTY,0))  LOSS68
     , SUM(DECODE(LOSS.LOSS_CODE,'315',LOSS.LOSS_QTY,0))  LOSS69
     , SUM(DECODE(LOSS.LOSS_CODE,'316',LOSS.LOSS_QTY,0))  LOSS70
     , SUM(DECODE(LOSS.LOSS_CODE,'317',LOSS.LOSS_QTY,0))  LOSS71
     , SUM(DECODE(LOSS.LOSS_CODE,'318',LOSS.LOSS_QTY,0))  LOSS72
     , SUM(DECODE(LOSS.LOSS_CODE,'319',LOSS.LOSS_QTY,0))  LOSS73
     , SUM(DECODE(LOSS.LOSS_CODE,'320',LOSS.LOSS_QTY,0))  LOSS74
     , SUM(DECODE(LOSS.LOSS_CODE,'321',LOSS.LOSS_QTY,0))  LOSS75
     , SUM(DECODE(LOSS.LOSS_CODE,'322',LOSS.LOSS_QTY,0))  LOSS76
     , SUM(DECODE(LOSS.LOSS_CODE,'323',LOSS.LOSS_QTY,0))  LOSS77
     , SUM(DECODE(LOSS.LOSS_CODE,'324',LOSS.LOSS_QTY,0))  LOSS78
     , SUM(DECODE(LOSS.LOSS_CODE,'326',LOSS.LOSS_QTY,0))  LOSS79
     , SUM(DECODE(LOSS.LOSS_CODE,'330',LOSS.LOSS_QTY,0))  LOSS80
     , SUM(DECODE(LOSS.LOSS_CODE,'331',LOSS.LOSS_QTY,0))  LOSS81
     , SUM(DECODE(LOSS.LOSS_CODE,'332',LOSS.LOSS_QTY,0))  LOSS82
     , SUM(DECODE(LOSS.LOSS_CODE,'333',LOSS.LOSS_QTY,0))  LOSS83
     , SUM(DECODE(LOSS.LOSS_CODE,'368',LOSS.LOSS_QTY,0))  LOSS84
     , SUM(DECODE(LOSS.LOSS_CODE,'371',LOSS.LOSS_QTY,0))  LOSS85
     , SUM(DECODE(LOSS.LOSS_CODE,'373',LOSS.LOSS_QTY,0))  LOSS86
     , SUM(DECODE(LOSS.LOSS_CODE,'388',LOSS.LOSS_QTY,0))  LOSS87
     , SUM(DECODE(LOSS.LOSS_CODE,'392',LOSS.LOSS_QTY,0))  LOSS88
     , SUM(DECODE(LOSS.LOSS_CODE,'395',LOSS.LOSS_QTY,0))  LOSS89
     , SUM(DECODE(LOSS.LOSS_CODE,'402',LOSS.LOSS_QTY,0))  LOSS90
     , SUM(DECODE(LOSS.LOSS_CODE,'403',LOSS.LOSS_QTY,0))  LOSS91
     , SUM(DECODE(LOSS.LOSS_CODE,'404',LOSS.LOSS_QTY,0))  LOSS92
     , SUM(DECODE(LOSS.LOSS_CODE,'405',LOSS.LOSS_QTY,0))  LOSS93
     , SUM(DECODE(LOSS.LOSS_CODE,'406',LOSS.LOSS_QTY,0))  LOSS94
     , SUM(DECODE(LOSS.LOSS_CODE,'407',LOSS.LOSS_QTY,0))  LOSS95
     , SUM(DECODE(LOSS.LOSS_CODE,'408',LOSS.LOSS_QTY,0))  LOSS96
     , SUM(DECODE(LOSS.LOSS_CODE,'409',LOSS.LOSS_QTY,0))  LOSS97
     , SUM(DECODE(LOSS.LOSS_CODE,'410',LOSS.LOSS_QTY,0))  LOSS98
     , SUM(DECODE(LOSS.LOSS_CODE,'411',LOSS.LOSS_QTY,0))  LOSS99
     , SUM(DECODE(LOSS.LOSS_CODE,'412',LOSS.LOSS_QTY,0))  LOSS100
     , SUM(DECODE(LOSS.LOSS_CODE,'413',LOSS.LOSS_QTY,0))  LOSS101
     , SUM(DECODE(LOSS.LOSS_CODE,'414',LOSS.LOSS_QTY,0))  LOSS102
     , SUM(DECODE(LOSS.LOSS_CODE,'415',LOSS.LOSS_QTY,0))  LOSS103
     , SUM(DECODE(LOSS.LOSS_CODE,'417',LOSS.LOSS_QTY,0))  LOSS104
     , SUM(DECODE(LOSS.LOSS_CODE,'418',LOSS.LOSS_QTY,0))  LOSS105
     , SUM(DECODE(LOSS.LOSS_CODE,'419',LOSS.LOSS_QTY,0))  LOSS106
     , SUM(DECODE(LOSS.LOSS_CODE,'420',LOSS.LOSS_QTY,0))  LOSS107
     , SUM(DECODE(LOSS.LOSS_CODE,'421',LOSS.LOSS_QTY,0))  LOSS108
     , SUM(DECODE(LOSS.LOSS_CODE,'422',LOSS.LOSS_QTY,0))  LOSS109
     , SUM(DECODE(LOSS.LOSS_CODE,'423',LOSS.LOSS_QTY,0))  LOSS110
     , SUM(DECODE(LOSS.LOSS_CODE,'424',LOSS.LOSS_QTY,0))  LOSS111
     , SUM(DECODE(LOSS.LOSS_CODE,'425',LOSS.LOSS_QTY,0))  LOSS112
     , SUM(DECODE(LOSS.LOSS_CODE,'426',LOSS.LOSS_QTY,0))  LOSS113
     , SUM(DECODE(LOSS.LOSS_CODE,'427',LOSS.LOSS_QTY,0))  LOSS114
     , SUM(DECODE(LOSS.LOSS_CODE,'440',LOSS.LOSS_QTY,0))  LOSS115
     , SUM(DECODE(LOSS.LOSS_CODE,'472',LOSS.LOSS_QTY,0))  LOSS116
     , SUM(DECODE(LOSS.LOSS_CODE,'430',LOSS.LOSS_QTY,0))  LOSS117
     , SUM(DECODE(LOSS.LOSS_CODE,'473',LOSS.LOSS_QTY,0))  LOSS118
     , SUM(DECODE(LOSS.LOSS_CODE,'474',LOSS.LOSS_QTY,0))  LOSS119
     , SUM(DECODE(LOSS.LOSS_CODE,'475',LOSS.LOSS_QTY,0))  LOSS120
     , SUM(DECODE(LOSS.LOSS_CODE,'476',LOSS.LOSS_QTY,0))  LOSS121
     , SUM(DECODE(LOSS.LOSS_CODE,'477',LOSS.LOSS_QTY,0))  LOSS122
     , SUM(DECODE(LOSS.LOSS_CODE,'478',LOSS.LOSS_QTY,0))  LOSS123
     , SUM(DECODE(LOSS.LOSS_CODE,'479',LOSS.LOSS_QTY,0))  LOSS124
     , SUM(DECODE(LOSS.LOSS_CODE,'480',LOSS.LOSS_QTY,0))  LOSS125
     , SUM(DECODE(LOSS.LOSS_CODE,'481',LOSS.LOSS_QTY,0))  LOSS126
     , SUM(DECODE(LOSS.LOSS_CODE,'491',LOSS.LOSS_QTY,0))  LOSS127
     , SUM(DECODE(LOSS.LOSS_CODE,'492',LOSS.LOSS_QTY,0))  LOSS128
     , SUM(DECODE(LOSS.LOSS_CODE,'493',LOSS.LOSS_QTY,0))  LOSS129
     , SUM(DECODE(LOSS.LOSS_CODE,'494',LOSS.LOSS_QTY,0))  LOSS130
     , SUM(DECODE(LOSS.LOSS_CODE,'495',LOSS.LOSS_QTY,0))  LOSS131
     , SUM(DECODE(LOSS.LOSS_CODE,'503',LOSS.LOSS_QTY,0))  LOSS132
     , SUM(DECODE(LOSS.LOSS_CODE,'504',LOSS.LOSS_QTY,0))  LOSS133
     , SUM(DECODE(LOSS.LOSS_CODE,'508',LOSS.LOSS_QTY,0))  LOSS134
     , SUM(DECODE(LOSS.LOSS_CODE,'510',LOSS.LOSS_QTY,0))  LOSS135
     , SUM(DECODE(LOSS.LOSS_CODE,'512',LOSS.LOSS_QTY,0))  LOSS136
     , SUM(DECODE(LOSS.LOSS_CODE,'513',LOSS.LOSS_QTY,0))  LOSS137
     , SUM(DECODE(LOSS.LOSS_CODE,'514',LOSS.LOSS_QTY,0))  LOSS138
     , SUM(DECODE(LOSS.LOSS_CODE,'517',LOSS.LOSS_QTY,0))  LOSS139
     , SUM(DECODE(LOSS.LOSS_CODE,'520',LOSS.LOSS_QTY,0))  LOSS140
     , SUM(DECODE(LOSS.LOSS_CODE,'531',LOSS.LOSS_QTY,0))  LOSS141
     , SUM(DECODE(LOSS.LOSS_CODE,'538',LOSS.LOSS_QTY,0))  LOSS142
     , SUM(DECODE(LOSS.LOSS_CODE,'539',LOSS.LOSS_QTY,0))  LOSS143
     , SUM(DECODE(LOSS.LOSS_CODE,'563',LOSS.LOSS_QTY,0))  LOSS144
     , SUM(DECODE(LOSS.LOSS_CODE,'564',LOSS.LOSS_QTY,0))  LOSS145
     , SUM(DECODE(LOSS.LOSS_CODE,'565',LOSS.LOSS_QTY,0))  LOSS146
     , SUM(DECODE(LOSS.LOSS_CODE,'566',LOSS.LOSS_QTY,0))  LOSS147
     , SUM(DECODE(LOSS.LOSS_CODE,'567',LOSS.LOSS_QTY,0))  LOSS148
     , SUM(DECODE(LOSS.LOSS_CODE,'568',LOSS.LOSS_QTY,0))  LOSS149
     , SUM(DECODE(LOSS.LOSS_CODE,'571',LOSS.LOSS_QTY,0))  LOSS150
     , SUM(DECODE(LOSS.LOSS_CODE,'572',LOSS.LOSS_QTY,0))  LOSS151
     , SUM(DECODE(LOSS.LOSS_CODE,'573',LOSS.LOSS_QTY,0))  LOSS152
     , SUM(DECODE(LOSS.LOSS_CODE,'602',LOSS.LOSS_QTY,0))  LOSS153
     , SUM(DECODE(LOSS.LOSS_CODE,'603',LOSS.LOSS_QTY,0))  LOSS154
     , SUM(DECODE(LOSS.LOSS_CODE,'604',LOSS.LOSS_QTY,0))  LOSS155
     , SUM(DECODE(LOSS.LOSS_CODE,'605',LOSS.LOSS_QTY,0))  LOSS156
     , SUM(DECODE(LOSS.LOSS_CODE,'606',LOSS.LOSS_QTY,0))  LOSS157
     , SUM(DECODE(LOSS.LOSS_CODE,'607',LOSS.LOSS_QTY,0))  LOSS158
     , SUM(DECODE(LOSS.LOSS_CODE,'608',LOSS.LOSS_QTY,0))  LOSS159
     , SUM(DECODE(LOSS.LOSS_CODE,'609',LOSS.LOSS_QTY,0))  LOSS160
     , SUM(DECODE(LOSS.LOSS_CODE,'610',LOSS.LOSS_QTY,0))  LOSS161
     , SUM(DECODE(LOSS.LOSS_CODE,'611',LOSS.LOSS_QTY,0))  LOSS162
     , SUM(DECODE(LOSS.LOSS_CODE,'612',LOSS.LOSS_QTY,0))  LOSS163
     , SUM(DECODE(LOSS.LOSS_CODE,'613',LOSS.LOSS_QTY,0))  LOSS164
     , SUM(DECODE(LOSS.LOSS_CODE,'614',LOSS.LOSS_QTY,0))  LOSS165
     , SUM(DECODE(LOSS.LOSS_CODE,'615',LOSS.LOSS_QTY,0))  LOSS166
     , SUM(DECODE(LOSS.LOSS_CODE,'616',LOSS.LOSS_QTY,0))  LOSS167
     , SUM(DECODE(LOSS.LOSS_CODE,'619',LOSS.LOSS_QTY,0))  LOSS168
     , SUM(DECODE(LOSS.LOSS_CODE,'620',LOSS.LOSS_QTY,0))  LOSS169
     , SUM(DECODE(LOSS.LOSS_CODE,'621',LOSS.LOSS_QTY,0))  LOSS170
     , SUM(DECODE(LOSS.LOSS_CODE,'631',LOSS.LOSS_QTY,0))  LOSS171
     , SUM(DECODE(LOSS.LOSS_CODE,'633',LOSS.LOSS_QTY,0))  LOSS172
     , SUM(DECODE(LOSS.LOSS_CODE,'632',LOSS.LOSS_QTY,0))  LOSS173
     , SUM(DECODE(LOSS.LOSS_CODE,'702',LOSS.LOSS_QTY,0))  LOSS174
     , SUM(DECODE(LOSS.LOSS_CODE,'703',LOSS.LOSS_QTY,0))  LOSS175
     , SUM(DECODE(LOSS.LOSS_CODE,'704',LOSS.LOSS_QTY,0))  LOSS176
     , SUM(DECODE(LOSS.LOSS_CODE,'705',LOSS.LOSS_QTY,0))  LOSS177
     , SUM(DECODE(LOSS.LOSS_CODE,'706',LOSS.LOSS_QTY,0))  LOSS178
     , SUM(DECODE(LOSS.LOSS_CODE,'707',LOSS.LOSS_QTY,0))  LOSS179
     , SUM(DECODE(LOSS.LOSS_CODE,'708',LOSS.LOSS_QTY,0))  LOSS180
     , SUM(DECODE(LOSS.LOSS_CODE,'709',LOSS.LOSS_QTY,0))  LOSS181
     , SUM(DECODE(LOSS.LOSS_CODE,'710',LOSS.LOSS_QTY,0))  LOSS182
     , SUM(DECODE(LOSS.LOSS_CODE,'711',LOSS.LOSS_QTY,0))  LOSS183
     , SUM(DECODE(LOSS.LOSS_CODE,'712',LOSS.LOSS_QTY,0))  LOSS184
     , SUM(DECODE(LOSS.LOSS_CODE,'713',LOSS.LOSS_QTY,0))  LOSS185
     , SUM(DECODE(LOSS.LOSS_CODE,'714',LOSS.LOSS_QTY,0))  LOSS186
     , SUM(DECODE(LOSS.LOSS_CODE,'715',LOSS.LOSS_QTY,0))  LOSS187
     , SUM(DECODE(LOSS.LOSS_CODE,'716',LOSS.LOSS_QTY,0))  LOSS188
     , SUM(DECODE(LOSS.LOSS_CODE,'718',LOSS.LOSS_QTY,0))  LOSS189
     , SUM(DECODE(LOSS.LOSS_CODE,'719',LOSS.LOSS_QTY,0))  LOSS190
     , SUM(DECODE(LOSS.LOSS_CODE,'720',LOSS.LOSS_QTY,0))  LOSS191
     , SUM(DECODE(LOSS.LOSS_CODE,'721',LOSS.LOSS_QTY,0))  LOSS192
     , SUM(DECODE(LOSS.LOSS_CODE,'722',LOSS.LOSS_QTY,0))  LOSS193
     , SUM(DECODE(LOSS.LOSS_CODE,'760',LOSS.LOSS_QTY,0))  LOSS194
     , SUM(DECODE(LOSS.LOSS_CODE,'802',LOSS.LOSS_QTY,0))  LOSS195
     , SUM(DECODE(LOSS.LOSS_CODE,'803',LOSS.LOSS_QTY,0))  LOSS196
     , SUM(DECODE(LOSS.LOSS_CODE,'804',LOSS.LOSS_QTY,0))  LOSS197
     , SUM(DECODE(LOSS.LOSS_CODE,'805',LOSS.LOSS_QTY,0))  LOSS198
     , SUM(DECODE(LOSS.LOSS_CODE,'808',LOSS.LOSS_QTY,0))  LOSS199
     , SUM(DECODE(LOSS.LOSS_CODE,'809',LOSS.LOSS_QTY,0))  LOSS200
     , SUM(DECODE(LOSS.LOSS_CODE,'810',LOSS.LOSS_QTY,0))  LOSS201
     , SUM(DECODE(LOSS.LOSS_CODE,'811',LOSS.LOSS_QTY,0))  LOSS202
     , SUM(DECODE(LOSS.LOSS_CODE,'812',LOSS.LOSS_QTY,0))  LOSS203
     , SUM(DECODE(LOSS.LOSS_CODE,'813',LOSS.LOSS_QTY,0))  LOSS204
     , SUM(DECODE(LOSS.LOSS_CODE,'815',LOSS.LOSS_QTY,0))  LOSS205
     , SUM(DECODE(LOSS.LOSS_CODE,'816',LOSS.LOSS_QTY,0))  LOSS206
     , SUM(DECODE(LOSS.LOSS_CODE,'818',LOSS.LOSS_QTY,0))  LOSS207
     , SUM(DECODE(LOSS.LOSS_CODE,'819',LOSS.LOSS_QTY,0))  LOSS208
     , SUM(DECODE(LOSS.LOSS_CODE,'820',LOSS.LOSS_QTY,0))  LOSS209
     , SUM(DECODE(LOSS.LOSS_CODE,'821',LOSS.LOSS_QTY,0))  LOSS210
     , SUM(DECODE(LOSS.LOSS_CODE,'822',LOSS.LOSS_QTY,0))  LOSS211
     , SUM(DECODE(LOSS.LOSS_CODE,'823',LOSS.LOSS_QTY,0))  LOSS212
     , SUM(DECODE(LOSS.LOSS_CODE,'829',LOSS.LOSS_QTY,0))  LOSS213
     , SUM(DECODE(LOSS.LOSS_CODE,'830',LOSS.LOSS_QTY,0))  LOSS214
     , SUM(DECODE(LOSS.LOSS_CODE,'862',LOSS.LOSS_QTY,0))  LOSS215
     , SUM(DECODE(LOSS.LOSS_CODE,'866',LOSS.LOSS_QTY,0))  LOSS216
     , SUM(DECODE(LOSS.LOSS_CODE,'867',LOSS.LOSS_QTY,0))  LOSS217
     , SUM(DECODE(LOSS.LOSS_CODE,'889',LOSS.LOSS_QTY,0))  LOSS218
     , SUM(DECODE(LOSS.LOSS_CODE,'890',LOSS.LOSS_QTY,0))  LOSS219
     , SUM(DECODE(LOSS.LOSS_CODE,'891',LOSS.LOSS_QTY,0))  LOSS220
     , SUM(DECODE(LOSS.LOSS_CODE,'892',LOSS.LOSS_QTY,0))  LOSS221
     , SUM(DECODE(LOSS.LOSS_CODE,'893',LOSS.LOSS_QTY,0))  LOSS222
     , SUM(DECODE(LOSS.LOSS_CODE,'894',LOSS.LOSS_QTY,0))  LOSS223
     , SUM(DECODE(LOSS.LOSS_CODE,'903',LOSS.LOSS_QTY,0))  LOSS224
     , SUM(DECODE(LOSS.LOSS_CODE,'904',LOSS.LOSS_QTY,0))  LOSS225
     , SUM(DECODE(LOSS.LOSS_CODE,'905',LOSS.LOSS_QTY,0))  LOSS226
     , SUM(DECODE(LOSS.LOSS_CODE,'924',LOSS.LOSS_QTY,0))  LOSS227
     , SUM(DECODE(LOSS.LOSS_CODE,'925',LOSS.LOSS_QTY,0))  LOSS228
     , SUM(DECODE(LOSS.LOSS_CODE,'929',LOSS.LOSS_QTY,0))  LOSS229
     , SUM(DECODE(LOSS.LOSS_CODE,'930',LOSS.LOSS_QTY,0))  LOSS230
     , SUM(DECODE(LOSS.LOSS_CODE,'931',LOSS.LOSS_QTY,0))  LOSS231
     , SUM(DECODE(LOSS.LOSS_CODE,'932',LOSS.LOSS_QTY,0))  LOSS232
     , SUM(DECODE(LOSS.LOSS_CODE,'935',LOSS.LOSS_QTY,0))  LOSS233
     , SUM(DECODE(LOSS.LOSS_CODE,'936',LOSS.LOSS_QTY,0))  LOSS234
     , SUM(DECODE(LOSS.LOSS_CODE,'937',LOSS.LOSS_QTY,0))  LOSS235
     , SUM(DECODE(LOSS.LOSS_CODE,'940',LOSS.LOSS_QTY,0))  LOSS236
     , SUM(DECODE(LOSS.LOSS_CODE,'944',LOSS.LOSS_QTY,0))  LOSS237
     , SUM(DECODE(LOSS.LOSS_CODE,'945',LOSS.LOSS_QTY,0))  LOSS238
     , SUM(DECODE(LOSS.LOSS_CODE,'947',LOSS.LOSS_QTY,0))  LOSS239
     , SUM(DECODE(LOSS.LOSS_CODE,'948',LOSS.LOSS_QTY,0))  LOSS240
     , SUM(DECODE(LOSS.LOSS_CODE,'949',LOSS.LOSS_QTY,0))  LOSS241
     , SUM(DECODE(LOSS.LOSS_CODE,'950',LOSS.LOSS_QTY,0))  LOSS242
     , SUM(DECODE(LOSS.LOSS_CODE,'951',LOSS.LOSS_QTY,0))  LOSS243
     , SUM(DECODE(LOSS.LOSS_CODE,'953',LOSS.LOSS_QTY,0))  LOSS244
     , SUM(DECODE(LOSS.LOSS_CODE,'954',LOSS.LOSS_QTY,0))  LOSS245
     , SUM(DECODE(LOSS.LOSS_CODE,'955',LOSS.LOSS_QTY,0))  LOSS246
     , SUM(DECODE(LOSS.LOSS_CODE,'956',LOSS.LOSS_QTY,0))  LOSS247
     , SUM(DECODE(LOSS.LOSS_CODE,'957',LOSS.LOSS_QTY,0))  LOSS248
     , SUM(DECODE(LOSS.LOSS_CODE,'958',LOSS.LOSS_QTY,0))  LOSS249
     , SUM(DECODE(LOSS.LOSS_CODE,'962',LOSS.LOSS_QTY,0))  LOSS250
     , SUM(DECODE(LOSS.LOSS_CODE,'970',LOSS.LOSS_QTY,0))  LOSS251
     , SUM(DECODE(LOSS.LOSS_CODE,'971',LOSS.LOSS_QTY,0))  LOSS252
     , SUM(DECODE(LOSS.LOSS_CODE,'991',LOSS.LOSS_QTY,0))  LOSS253
     , SUM(DECODE(LOSS.LOSS_CODE,'992',LOSS.LOSS_QTY,0))  LOSS254
     , SUM(DECODE(LOSS.LOSS_CODE,'995',LOSS.LOSS_QTY,0))  LOSS255
     , SUM(DECODE(LOSS.LOSS_CODE,'996',LOSS.LOSS_QTY,0))  LOSS256
     , SUM(DECODE(LOSS.LOSS_CODE,'997',LOSS.LOSS_QTY,0))  LOSS257
     , SUM(DECODE(LOSS.LOSS_CODE,'129',LOSS.LOSS_QTY,0))  LOSS258
     , SUM(DECODE(LOSS.LOSS_CODE,'130',LOSS.LOSS_QTY,0))  LOSS259
     , SUM(DECODE(LOSS.LOSS_CODE,'131',LOSS.LOSS_QTY,0))  LOSS260
     , SUM(DECODE(LOSS.LOSS_CODE,'132',LOSS.LOSS_QTY,0))  LOSS261
     , SUM(DECODE(LOSS.LOSS_CODE,'133',LOSS.LOSS_QTY,0))  LOSS262
     , SUM(DECODE(LOSS.LOSS_CODE,'1001',LOSS.LOSS_QTY,0))  LOSS263
     , SUM(DECODE(LOSS.LOSS_CODE,'1002',LOSS.LOSS_QTY,0))  LOSS264
     , SUM(DECODE(LOSS.LOSS_CODE,'1003',LOSS.LOSS_QTY,0))  LOSS265
     , SUM(DECODE(LOSS.LOSS_CODE,'1004',LOSS.LOSS_QTY,0))  LOSS266
     , SUM(DECODE(LOSS.LOSS_CODE,'1005',LOSS.LOSS_QTY,0))  LOSS267
     , SUM(DECODE(LOSS.LOSS_CODE,'1006',LOSS.LOSS_QTY,0))  LOSS268
     , SUM(DECODE(LOSS.LOSS_CODE,'1007',LOSS.LOSS_QTY,0))  LOSS269
     , SUM(DECODE(LOSS.LOSS_CODE,'1008',LOSS.LOSS_QTY,0))  LOSS270
     , SUM(DECODE(LOSS.LOSS_CODE,'1009',LOSS.LOSS_QTY,0))  LOSS271
     , SUM(DECODE(LOSS.LOSS_CODE,'1010',LOSS.LOSS_QTY,0))  LOSS272
     , SUM(DECODE(LOSS.LOSS_CODE,'1011',LOSS.LOSS_QTY,0))  LOSS273
     , SUM(DECODE(LOSS.LOSS_CODE,'1012',LOSS.LOSS_QTY,0))  LOSS274
     , SUM(DECODE(LOSS.LOSS_CODE,'1021',LOSS.LOSS_QTY,0))  LOSS275
     , SUM(DECODE(LOSS.LOSS_CODE,'1022',LOSS.LOSS_QTY,0))  LOSS276
     , SUM(DECODE(LOSS.LOSS_CODE,'1023',LOSS.LOSS_QTY,0))  LOSS277
     , SUM(DECODE(LOSS.LOSS_CODE,'1024',LOSS.LOSS_QTY,0))  LOSS278
     , SUM(DECODE(LOSS.LOSS_CODE,'1025',LOSS.LOSS_QTY,0))  LOSS279
     , SUM(DECODE(LOSS.LOSS_CODE,'1026',LOSS.LOSS_QTY,0))  LOSS280
     , SUM(DECODE(LOSS.LOSS_CODE,'1027',LOSS.LOSS_QTY,0))  LOSS281
     , SUM(DECODE(LOSS.LOSS_CODE,'1028',LOSS.LOSS_QTY,0))  LOSS282
     , SUM(DECODE(LOSS.LOSS_CODE,'1029',LOSS.LOSS_QTY,0))  LOSS283
     , SUM(DECODE(LOSS.LOSS_CODE,'1031',LOSS.LOSS_QTY,0))  LOSS284
     , SUM(DECODE(LOSS.LOSS_CODE,'1032',LOSS.LOSS_QTY,0))  LOSS285
     , SUM(DECODE(LOSS.LOSS_CODE,'1033',LOSS.LOSS_QTY,0))  LOSS286
     , SUM(DECODE(LOSS.LOSS_CODE,'1034',LOSS.LOSS_QTY,0))  LOSS287
     , SUM(DECODE(LOSS.LOSS_CODE,'1035',LOSS.LOSS_QTY,0))  LOSS288
     , SUM(DECODE(LOSS.LOSS_CODE,'1099',LOSS.LOSS_QTY,0))  LOSS289
     , SUM(DECODE(LOSS.LOSS_CODE,'1101',LOSS.LOSS_QTY,0))  LOSS290
     , SUM(DECODE(LOSS.LOSS_CODE,'1102',LOSS.LOSS_QTY,0))  LOSS291
     , SUM(DECODE(LOSS.LOSS_CODE,'1103',LOSS.LOSS_QTY,0))  LOSS292
     , SUM(DECODE(LOSS.LOSS_CODE,'1111',LOSS.LOSS_QTY,0))  LOSS293
     , SUM(DECODE(LOSS.LOSS_CODE,'1112',LOSS.LOSS_QTY,0))  LOSS294
     , SUM(DECODE(LOSS.LOSS_CODE,'1113',LOSS.LOSS_QTY,0))  LOSS295
     , SUM(DECODE(LOSS.LOSS_CODE,'1114',LOSS.LOSS_QTY,0))  LOSS296
     , SUM(DECODE(LOSS.LOSS_CODE,'1115',LOSS.LOSS_QTY,0))  LOSS297
     , SUM(DECODE(LOSS.LOSS_CODE,'1116',LOSS.LOSS_QTY,0))  LOSS298
     , SUM(DECODE(LOSS.LOSS_CODE,'1117',LOSS.LOSS_QTY,0))  LOSS299
     , SUM(DECODE(LOSS.LOSS_CODE,'1118',LOSS.LOSS_QTY,0))  LOSS300
     , SUM(DECODE(LOSS.LOSS_CODE,'1119',LOSS.LOSS_QTY,0))  LOSS301
     , SUM(DECODE(LOSS.LOSS_CODE,'1131',LOSS.LOSS_QTY,0))  LOSS302
     , SUM(DECODE(LOSS.LOSS_CODE,'1132',LOSS.LOSS_QTY,0))  LOSS303
     , SUM(DECODE(LOSS.LOSS_CODE,'1133',LOSS.LOSS_QTY,0))  LOSS304
     , SUM(DECODE(LOSS.LOSS_CODE,'1134',LOSS.LOSS_QTY,0))  LOSS305
     , SUM(DECODE(LOSS.LOSS_CODE,'1135',LOSS.LOSS_QTY,0))  LOSS306
     , SUM(DECODE(LOSS.LOSS_CODE,'1201',LOSS.LOSS_QTY,0))  LOSS307
     , SUM(DECODE(LOSS.LOSS_CODE,'1202',LOSS.LOSS_QTY,0))  LOSS308
     , SUM(DECODE(LOSS.LOSS_CODE,'1203',LOSS.LOSS_QTY,0))  LOSS309
     , SUM(DECODE(LOSS.LOSS_CODE,'1204',LOSS.LOSS_QTY,0))  LOSS310
     , SUM(DECODE(LOSS.LOSS_CODE,'1205',LOSS.LOSS_QTY,0))  LOSS311
     , SUM(DECODE(LOSS.LOSS_CODE,'1206',LOSS.LOSS_QTY,0))  LOSS312
     , SUM(DECODE(LOSS.LOSS_CODE,'1207',LOSS.LOSS_QTY,0))  LOSS313
     , SUM(DECODE(LOSS.LOSS_CODE,'1208',LOSS.LOSS_QTY,0))  LOSS314
     , SUM(DECODE(LOSS.LOSS_CODE,'1209',LOSS.LOSS_QTY,0))  LOSS315
     , SUM(DECODE(LOSS.LOSS_CODE,'1210',LOSS.LOSS_QTY,0))  LOSS316
     , SUM(DECODE(LOSS.LOSS_CODE,'1211',LOSS.LOSS_QTY,0))  LOSS317
     , SUM(DECODE(LOSS.LOSS_CODE,'9500',LOSS.LOSS_QTY,0))  LOSS318
     , SUM(DECODE(LOSS.LOSS_CODE,'9100',LOSS.LOSS_QTY,0))  LOSS319
     , SUM(DECODE(LOSS.LOSS_CODE,'9000',LOSS.LOSS_QTY,0))  LOSS320
     , SUM(DECODE(LOSS.LOSS_CODE,'9501',LOSS.LOSS_QTY,0))  LOSS321
     , SUM(DECODE(LOSS.LOSS_CODE,'1076',LOSS.LOSS_QTY,0))  LOSS322
     , SUM(DECODE(LOSS.LOSS_CODE,'1077',LOSS.LOSS_QTY,0))  LOSS323
     , SUM(DECODE(LOSS.LOSS_CODE,'1078',LOSS.LOSS_QTY,0))  LOSS324
     , SUM(DECODE(LOSS.LOSS_CODE,'1079',LOSS.LOSS_QTY,0))  LOSS325
     , SUM(DECODE(LOSS.LOSS_CODE,'1080',LOSS.LOSS_QTY,0))  LOSS326
     , SUM(DECODE(LOSS.LOSS_CODE,'1081',LOSS.LOSS_QTY,0))  LOSS327
     , SUM(DECODE(LOSS.LOSS_CODE,'1082',LOSS.LOSS_QTY,0))  LOSS328
     , SUM(DECODE(LOSS.LOSS_CODE,'1083',LOSS.LOSS_QTY,0))  LOSS329
     , SUM(DECODE(LOSS.LOSS_CODE,'1084',LOSS.LOSS_QTY,0))  LOSS330
     , SUM(DECODE(LOSS.LOSS_CODE,'1085',LOSS.LOSS_QTY,0))  LOSS331
     , SUM(DECODE(LOSS.LOSS_CODE,'1086',LOSS.LOSS_QTY,0))  LOSS332
     , SUM(DECODE(LOSS.LOSS_CODE,'1087',LOSS.LOSS_QTY,0))  LOSS333
     , SUM(DECODE(LOSS.LOSS_CODE,'1088',LOSS.LOSS_QTY,0))  LOSS334
     , SUM(DECODE(LOSS.LOSS_CODE,'1089',LOSS.LOSS_QTY,0))  LOSS335
     , SUM(DECODE(LOSS.LOSS_CODE,'1801',LOSS.LOSS_QTY,0))  LOSS336
     , SUM(DECODE(LOSS.LOSS_CODE,'1802',LOSS.LOSS_QTY,0))  LOSS337
     , SUM(DECODE(LOSS.LOSS_CODE,'1803',LOSS.LOSS_QTY,0))  LOSS338
     , SUM(DECODE(LOSS.LOSS_CODE,'1804',LOSS.LOSS_QTY,0))  LOSS339
     , SUM(DECODE(LOSS.LOSS_CODE,'1805',LOSS.LOSS_QTY,0))  LOSS340
     , SUM(DECODE(LOSS.LOSS_CODE,'1806',LOSS.LOSS_QTY,0))  LOSS341
     , SUM(DECODE(LOSS.LOSS_CODE,'1807',LOSS.LOSS_QTY,0))  LOSS342
     , SUM(DECODE(LOSS.LOSS_CODE,'1075',LOSS.LOSS_QTY,0))  LOSS343
     , SUM(DECODE(LOSS.LOSS_CODE,'1074',LOSS.LOSS_QTY,0))  LOSS344
     , SUM(DECODE(LOSS.LOSS_CODE,'1073',LOSS.LOSS_QTY,0))  LOSS345
     , SUM(DECODE(LOSS.LOSS_CODE,'1071',LOSS.LOSS_QTY,0))  LOSS346
     , SUM(DECODE(LOSS.LOSS_CODE,'1072',LOSS.LOSS_QTY,0))  LOSS347
     , SUM(DECODE(LOSS.LOSS_CODE,'1090',LOSS.LOSS_QTY,0))  LOSS348

  FROM ( 
        SELECT  ' ',  ' ', MAT.MAT_GRP_6, MAT.MAT_GRP_3,  ' ',  ' ',  ' ',  ' ', A.MAT_ID
             , A.LOT_ID AS LOT_ID 
             , TO_CHAR(TO_DATE(C.CREATE_TIME,'yyyymmddhh24miss')) AS IN_TIME 
             , TO_CHAR(TO_DATE(A.TRAN_TIME,'yyyymmddhh24miss')) AS SHIP_TIME 
             , ROUND((TO_DATE(A.TRAN_TIME,'yyyymmddhh24miss') - TO_DATE(C.CREATE_TIME,'yyyymmddhh24miss')),2) AS TAT 
             , (  
                SELECT MIN(QTY_1)   
                  FROM RWIPLOTHIS  
                 WHERE FACTORY = 'HMVA2'  
                   AND OLD_OPER >= 'A1000'  
                   AND LOT_ID=A.LOT_ID  
                   AND TRAN_CODE IN ('END','SHIP')    
                   AND HIST_DEL_FLAG = ' '               
               ) AS BE_OUT 
             , A.QTY_1 AS OUT_QTY 
          FROM DT A
             , MWIPMATDEF MAT
             , RWIPLOTSTS C 
         WHERE 1=1
           AND A.MAT_ID=MAT.MAT_ID 
           AND A.LOT_ID=C.LOT_ID 
           AND MAT.FACTORY = 'HMVA2' 
       ) SUMMERY
     , (
        SELECT LOT_ID
             , LOSS_CODE
             , SUM(LOSS_QTY) AS LOSS_QTY 
             , SUM(CASE WHEN OPER < 'A1000' THEN LOSS_QTY 
                        ELSE 0 
                   END) IL_LOSS_QTY 
             , SUM(CASE WHEN OPER >= 'A1000' THEN LOSS_QTY 
                        ELSE 0 
                   END) BE_LOSS_QTY 
          FROM (
                SELECT LOT_ID, OPER, LOSS_CODE, LOSS_QTY
                  FROM RWIPLOTLSM
                 WHERE 1=1
                   AND FACTORY = 'HMVA2'  
                   AND HIST_DEL_FLAG = ' '
                   AND LOT_ID IN ( 
                                  SELECT LOT_ID 
                                    FROM DT 
                                 ) 
                UNION ALL 
                SELECT /*+ INDEX (LSM, RWIPLOTLSM_IDX02) */SPL.FROM_TO_LOT_ID AS LOT_ID, OPER, LOSS_CODE, LOSS_QTY
                  FROM RWIPLOTLSM LSM
                     , (
                        SELECT LOT_ID, FROM_TO_LOT_ID 
                          FROM RWIPLOTSTS 
                         WHERE 1=1
                           AND FACTORY = 'HMVA2'  
                           AND LOT_TYPE = 'W' 
                           AND ADD_ORDER_ID_2 = 'MULTIEQP' 
                           AND FROM_TO_LOT_ID IN ( 
                                                  SELECT LOT_ID 
                                                    FROM DT 
                                                 ) 
                       ) SPL
                 WHERE 1=1
                   AND LSM.LOT_ID = SPL.LOT_ID
                   AND LSM.FACTORY = 'HMVA2'  
                   AND HIST_DEL_FLAG = ' '
               )
         GROUP BY LOT_ID,LOSS_CODE,LOSS_QTY
       ) LOSS
 WHERE SUMMERY.LOT_ID=LOSS.LOT_ID(+)
 GROUP BY  ' ',  ' ', SUMMERY.MAT_GRP_6, SUMMERY.MAT_GRP_3,  ' ',  ' ',  ' ',  ' ', SUMMERY.MAT_ID
        , SUMMERY.LOT_ID,SUMMERY.IN_TIME,SUMMERY.SHIP_TIME, SUMMERY.TAT 
        , SUMMERY.BE_OUT, SUMMERY.OUT_QTY 
 ORDER BY   ' ',  ' ', SUMMERY.MAT_GRP_6, SUMMERY.MAT_GRP_3,  ' ',  ' ',  ' ',  ' ', SUMMERY.MAT_ID,SUMMERY.LOT_ID

-------------------------------------------------------------
SELECT * FROM RWEBUSRDEF WHERE FACTORY = :FACTORY AND USER_ID= :USER_ID
-------------------------------------------------------------
SELECT A.FUNC_GRP_SEQ,A.SEC_GRP_ID,A.FUNC_GRP_ID,NVL(A.FUNC_NAME, ' ') FUNC_NAME, NVL(B.FUNC_DESC, ' ') FUNC_DESC, LANGUAGE_1, LANGUAGE_2, LANGUAGE_3
  FROM RWEBGRPFUN A, RWEBFUNDEF B
 WHERE A.FACTORY = :p_FACTORY
   AND A.SEC_GRP_ID = :p_SEC_GRP_ID
   AND A.FUNC_NAME=B.FUNC_NAME(+)
 ORDER BY A.FUNC_GRP_SEQ, A.FUNC_SEQ
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT PLAN_WEEK V1    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_DATE = TO_CHAR(SYSDATE,'yyyymmdd')      AND ROWNUM = 1  
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT LANGUAGE_2 FROM RWEBFUNDEF WHERE FUNC_NAME = 'PRD010401'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT FACTORY Code, FAC_DESC Data
  FROM MWIPFACDEF
 WHERE FAC_GRP_5 = 'Y' 
 ORDER BY FAC_GRP_4 ASC
-------------------------------------------------------------
SELECT OPER, OPER_DESC  FROM MWIPOPRDEF
  WHERE FACTORY = 'HMVA2'  AND OPER NOT IN ('00001', '00002') AND OPER NOT LIKE 'V%' ORDER BY DECODE(OPER_CMF_2, ' ', 99999, TO_NUMBER(OPER_CMF_2)), OPER
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
        SELECT (SELECT DATA_1 FROM MGCMTBLDAT WHERE TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = MAT_GRP_1 AND ROWNUM=1) AS CUSTOMER,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT_CMF_10, MAT_ID, OPER,  ' ', CASE WHEN OPER <= 'A0200' THEN VENDOR_MAT_ID ELSE BASE_MAT_ID END SAP_CODE
             , SUM(TOTAL) AS TOTAL
             , SUM(ASSY_END_QTY0 ) VAL0
             , SUM(ASSY_END_QTY1 ) VAL1
             , ROUND(SUM(TOTAL)/2, 1) AVG
          FROM (
               SELECT B.MAT_GRP_1,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', B.MAT_CMF_10, B.MAT_ID, A.OPER,  ' ', BASE_MAT_ID,VENDOR_MAT_ID 
                    , DECODE(WORK_DATE, '20200408', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY0
                    , DECODE(WORK_DATE, '20200409', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY1
                    , (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END) TOTAL
                 FROM (
                      SELECT FACTORY, MAT_ID, OPER, LOT_TYPE, MAT_VER, WORK_DATE, CM_KEY_3
                           , SUM(END_LOT) AS END_LOT
                           , SUM(END_QTY_1) AS END_QTY_1
                           , SUM(END_QTY_2) AS END_QTY_2
                           , SUM(SHIP_QTY_1) AS SHIP_QTY_1
                           , SUM(SHIP_QTY_2) AS SHIP_QTY_2
                        FROM (
                             SELECT FACTORY, MAT_ID, OPER, LOT_TYPE, MAT_VER, WORK_DATE, CM_KEY_3
                           , DECODE(SUBSTR(OPER,2,4),'0000',SUM(S1_OPER_IN_LOT+S2_OPER_IN_LOT+S3_OPER_IN_LOT),SUM(S1_END_LOT+S2_END_LOT+S3_END_LOT)) END_LOT
                           , DECODE(SUBSTR(OPER,2,4),'0000',SUM(S1_OPER_IN_QTY_1+S2_OPER_IN_QTY_1+S3_OPER_IN_QTY_1),SUM(S1_END_QTY_1+S2_END_QTY_1+S3_END_QTY_1+S1_END_RWK_QTY_1 + S2_END_RWK_QTY_1 + S3_END_RWK_QTY_1)) END_QTY_1
                           , DECODE(SUBSTR(OPER,2,4),'0000',SUM(S1_OPER_IN_QTY_2+S2_OPER_IN_QTY_2+S3_OPER_IN_QTY_2),SUM(S1_END_QTY_2+S2_END_QTY_2+S3_END_QTY_2+S1_END_RWK_QTY_2 + S2_END_RWK_QTY_2 + S3_END_RWK_QTY_2)) END_QTY_2
                           , 0 SHIP_QTY_1
                           , 0 SHIP_QTY_2
                        FROM RSUMWIPMOV 
                       WHERE OPER NOT IN ('AZ010','TZ010','F0000','EZ010', 'SZ010', 'BZ010')
                    GROUP BY FACTORY, MAT_ID, OPER, LOT_TYPE, MAT_VER, WORK_DATE, CM_KEY_3
                   UNION ALL
                      SELECT CM_KEY_1 AS FACTORY, MAT_ID
                           , DECODE(CM_KEY_1,'HMVA2','AZ010','HMKT1','TZ010','FGS','F0000','HMKE1','EZ010','HMKS1','SZ010', 'BZ010') OPER
                           , LOT_TYPE, MAT_VER,  WORK_DATE,CM_KEY_3
                           , 0 END_LOT
                           , 0 END_QTY_1
                           , 0 END_QTY_2
                           , SUM(S1_FAC_OUT_QTY_1+S2_FAC_OUT_QTY_1+S3_FAC_OUT_QTY_1) SHIP_QTY_1
                           , SUM(S1_FAC_OUT_QTY_2+S2_FAC_OUT_QTY_2+S3_FAC_OUT_QTY_2) SHIP_QTY_2
                        FROM RSUMFACMOV 
                       WHERE FACTORY NOT IN ('RETURN')
                    GROUP BY CM_KEY_1, MAT_ID, OPER, LOT_TYPE, MAT_VER, WORK_DATE, CM_KEY_3
                             )
                    GROUP BY FACTORY, MAT_ID, OPER, LOT_TYPE, MAT_VER, WORK_DATE, CM_KEY_3
                    )A
                  , MWIPMATDEF B 
              WHERE 1=1 
                AND A.FACTORY  = 'HMVA2' 
                AND A.FACTORY = B.FACTORY 
                AND A.MAT_ID = B.MAT_ID                
                AND A.MAT_VER = 1 
                AND B.MAT_VER = 1 
                AND B.MAT_TYPE = 'FG' 
                AND A.OPER LIKE '%'
                AND A.MAT_ID LIKE '%'  
                AND A.OPER NOT IN ('00001','00002') 
                AND A.WORK_DATE BETWEEN '20200408' AND '20200409' 
         )   
   WHERE TOTAL > 0           
GROUP BY MAT_GRP_1,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT_CMF_10, MAT_ID, OPER,  ' ', BASE_MAT_ID,VENDOR_MAT_ID
ORDER BY MAT_GRP_1,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT_CMF_10, MAT_ID, DECODE(OPER,'AISSUE','A0001','TISSUE','T0001','EISSUE','E0001',OPER),  ' ', BASE_MAT_ID,VENDOR_MAT_ID

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
SELECT MIN(SYS_DATE) AS START_DAY 
     , MAX(SYS_DATE) AS END_DAY 
     , PLAN_YEAR||DECODE(LENGTH(PLAN_WEEK), 1, '0'||PLAN_WEEK, PLAN_WEEK) AS WEEK
  FROM MWIPCALDEF 
 WHERE CALENDAR_ID = 'OTD'
   AND (PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) IN ( 
                                                SELECT WW
                                                  FROM (
                                                        SELECT WW
                                                             , ROW_NUMBER() OVER(ORDER BY WW) AS RNK
                                                          FROM (
                                                                SELECT DISTINCT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW
                                                                  FROM MWIPCALDEF
                                                                 WHERE CALENDAR_ID = 'OTD'
                                                                   AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') >= (
                                                                                                              SELECT MAX(PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) AS WW
                                                                                                                FROM MWIPCALDEF
                                                                                                               WHERE CALENDAR_ID = 'OTD'
                                                                                                                 AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') < (SELECT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW FROM MWIPCALDEF WHERE CALENDAR_ID = 'OTD' AND SYS_DATE = '20200409')
                                                                                                                 AND SYS_DATE >= TO_CHAR(TO_DATE('20200409', 'YYYYMMDD')-14, 'YYYYMMDD')
                                                                                                             )
                                                               ) 
                                                       )
                                                 WHERE RNK <= 7
                                               ) 
 GROUP BY PLAN_YEAR, PLAN_WEEK 
 ORDER BY PLAN_YEAR, PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT LANGUAGE_2 FROM RWEBFUNDEF WHERE FUNC_NAME = 'PRD010201'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE) AS START_DAY 
     , MAX(SYS_DATE) AS END_DAY 
     , PLAN_YEAR||DECODE(LENGTH(PLAN_WEEK), 1, '0'||PLAN_WEEK, PLAN_WEEK) AS WEEK
  FROM MWIPCALDEF 
 WHERE CALENDAR_ID = 'OTD'
   AND (PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) IN ( 
                                                SELECT WW
                                                  FROM (
                                                        SELECT WW
                                                             , ROW_NUMBER() OVER(ORDER BY WW) AS RNK
                                                          FROM (
                                                                SELECT DISTINCT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW
                                                                  FROM MWIPCALDEF
                                                                 WHERE CALENDAR_ID = 'OTD'
                                                                   AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') >= (
                                                                                                              SELECT MAX(PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) AS WW
                                                                                                                FROM MWIPCALDEF
                                                                                                               WHERE CALENDAR_ID = 'OTD'
                                                                                                                 AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') < (SELECT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW FROM MWIPCALDEF WHERE CALENDAR_ID = 'OTD' AND SYS_DATE = '20200409')
                                                                                                                 AND SYS_DATE >= TO_CHAR(TO_DATE('20200409', 'YYYYMMDD')-14, 'YYYYMMDD')
                                                                                                             )
                                                               ) 
                                                       )
                                                 WHERE RNK <= 7
                                               ) 
 GROUP BY PLAN_YEAR, PLAN_WEEK 
 ORDER BY PLAN_YEAR, PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
        SELECT  
            LAST_DAY('20200409')-2 AS "SYSLSI", 
            LAST_DAY('20200409') AS "MEMO",  
            LAST_DAY('20200409')- 2 - TO_DATE('20200409') +1  AS REMAIN1,  
            LAST_DAY('20200409') - TO_DATE('20200409')+1  AS REMAIN2,  
            SYSDATE AS TODAY  
        FROM DUAL 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
(SELECT TO_CHAR(LAST_DAY(TO_DATE('202003', 'YYYYMM')),'YYYYMMDD') FROM DUAL)
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
(SELECT TO_CHAR(LAST_DAY(TO_DATE('202004', 'YYYYMM')),'YYYYMMDD') FROM DUAL)
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT NVL((SELECT DATA_1 FROM MGCMTBLDAT WHERE TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = A.MAT_GRP_1 AND ROWNUM=1), '-') AS CUSTOMER,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', A.MAT_CMF_10 AS PIN_TYPE, A.MAT_ID AS PRODUCT,  ' ', A.BASE_MAT_ID 
     , ROUND(SUM(NVL(A.ORI_PLAN,0))/1, 1) 
     , ROUND(SUM(NVL(A.MON_PLAN,0))/1, 1) 
     , ROUND((SUM(NVL(A.MON_PLAN,0)) - SUM(NVL(A.ORI_PLAN,0)))/1, 1) 
     , ROUND(SUM(NVL(A.ASSY_MON,0))/1, 1)          
     , ROUND(SUM(NVL(A.SHIP_MON,0))/1, 1) 
     , ROUND(NVL(DECODE( SUM(A.MON_PLAN), 0, 0, ROUND((SUM(A.ASSY_MON)/SUM(A.MON_PLAN))*100, 1)),0),1) AS JINDO
     , ROUND(( SUM(NVL(A.MON_PLAN,0)) - SUM(NVL(A.ASSY_MON,0)) )/1, 1) AS LACK   
     , ROUND(NVL( (SUM(NVL(A.MON_PLAN,0)) - SUM(NVL(A.ASSY_MON,0)) - SUM(NVL(B.V0+B.V1+B.V2+B.V3+B.V4+B.V5+B.V6+B.V7+B.V8+B.V9+B.V10+B.V11+B.V12+B.V13+B.V14+B.V15+B.V16,0))) ,0)/1,1) AS LACK_IN   
     , ROUND( ( SUM(NVL(A.MON_PLAN,0)) - SUM(NVL(A.ASSY_MON,0)) )/22 /1, 1) AS TARGET
     , ROUND(SUM(NVL(F.AC_T_DAY,0))/1, 1) 
     , ROUND(SUM(NVL(E.SHIP_DAY,0))/1, 1) 
     , ROUND(SUM(NVL(D.RTN_DAY,0))/1, 1) 
     , ROUND(SUM(NVL(B.V0+B.V1+B.V2+B.V3+B.V4+B.V5+B.V6+B.V7+B.V8+B.V9+B.V10+B.V11+B.V12+B.V13+B.V14+B.V15+B.V16,0))/1, 1) AS TOTAL  
     , ROUND(SUM(NVL(B.V0,0))/1, 1) 
     , ROUND(SUM(NVL(B.V1,0))/1, 1) 
     , ROUND(SUM(NVL(B.V2,0))/1, 1) 
     , ROUND(SUM(NVL(B.V3,0))/1, 1) 
     , ROUND(SUM(NVL(B.V4,0))/1, 1) 
     , ROUND(SUM(NVL(B.V5,0))/1, 1) 
     , ROUND(SUM(NVL(B.V6,0))/1, 1) 
     , ROUND(SUM(NVL(B.V7,0))/1, 1) 
     , ROUND(SUM(NVL(B.V8,0))/1, 1) 
     , ROUND(SUM(NVL(B.V9,0))/1, 1) 
     , ROUND(SUM(NVL(B.V10,0))/1, 1) 
     , ROUND(SUM(NVL(B.V11,0))/1, 1) 
     , ROUND(SUM(NVL(B.V12,0))/1, 1) 
     , ROUND(SUM(NVL(B.V13,0))/1, 1) 
     , ROUND(SUM(NVL(B.V14,0))/1, 1) 
     , ROUND(SUM(NVL(B.V15,0))/1, 1) 
     , ROUND(SUM(NVL(B.V16,0))/1, 1) 
     , ROUND(SUM(NVL(A.RCV_YESTERDAY,0))/1, 1) 
     , ROUND(SUM(NVL(C.V0,0))/1, 1) 
     , ROUND(SUM(NVL(C.V1,0))/1, 1) 
     , ROUND(SUM(NVL(C.V2,0))/1, 1) 
     , ROUND(SUM(NVL(C.V3,0))/1, 1) 
     , ROUND(SUM(NVL(C.V5,0))/1, 1) 
     , ROUND(SUM(NVL(C.V7,0))/1, 1)   
     , ROUND(SUM(NVL(A.ASSY_YESTERDAY,0))/1, 1) 
     , ROUND(SUM(NVL(A.SHIP_YESTERDAY,0))/1, 1)  
  FROM (
        SELECT A.MAT_GRP_1, A.MAT_GRP_2, A.MAT_GRP_3, A.MAT_GRP_4, A.MAT_GRP_5, A.MAT_GRP_6, A.MAT_GRP_7, A.MAT_GRP_8, A.MAT_GRP_9, A.MAT_CMF_10, A.MAT_ID, A.MAT_CMF_7, A.MAT_CMF_13,BASE_MAT_ID
             , SUM(B.RESV_FIELD1) MON_PLAN
             , SUM(B.PLAN_QTY_ASSY) ORI_PLAN
             , SUM(C.ASSY_MON) ASSY_MON
             , SUM(C.ASSY_DAY) ASSY_DAY
             , SUM(C.ASSY_YESTERDAY) ASSY_YESTERDAY
             , SUM(D.SHIP_MON) SHIP_MON 
             , SUM(D.SHIP_YESTERDAY) SHIP_YESTERDAY 
             , SUM(E.CUR_WIP) AS CUR_WIP 
             , SUM(F.RCV_DAY) RCV_DAY
             , SUM(F.RCV_YESTERDAY) RCV_YESTERDAY
          FROM MWIPMATDEF A 
             , ( 
                SELECT FACTORY,MAT_ID,PLAN_QTY_ASSY,PLAN_MONTH, RESV_FIELD1 
                  FROM ( 
                        SELECT FACTORY, MAT_ID, SUM(PLAN_QTY_ASSY) AS PLAN_QTY_ASSY, PLAN_MONTH, SUM(RESV_FIELD1) AS RESV_FIELD1  
                          FROM ( 
                                SELECT FACTORY, MAT_ID, SUM(PLAN_QTY_ASSY) AS PLAN_QTY_ASSY, PLAN_MONTH, SUM(TO_NUMBER(DECODE(RESV_FIELD1,' ',0,RESV_FIELD1))) AS RESV_FIELD1 
                                  FROM CWIPPLNMON 
                                 WHERE 1=1 
                                   AND FACTORY = 'HMVA2' 
                                 GROUP BY FACTORY, MAT_ID, PLAN_MONTH 
                               ) 
                         GROUP BY FACTORY, MAT_ID,PLAN_MONTH 
                       ) 
               ) B 
             , (
                SELECT MAT_ID 
                     , SUM(DECODE(WORK_DATE, '20200331', 0, NVL(CLS_QTY_1,0))) AS ASSY_MON 
                     , SUM(DECODE(WORK_DATE, '20200409', NVL(CLS_QTY_1,0), 0)) AS ASSY_DAY 
                     , SUM(DECODE(WORK_DATE, '20200408', NVL(CLS_QTY_1,0), 0)) AS ASSY_YESTERDAY 
                  FROM VSUMWIPCLS 
                 WHERE 1=1 
                   AND FACTORY = 'HMVA2' 
                   AND MAT_VER = 1 
                   AND LOT_TYPE = 'W'
                   AND CM_KEY_2 = 'PROD'
                   AND WORK_DATE BETWEEN '20200331' AND '20200409' 
                   AND OPER IN ('AZ009', 'AZ010') 
                 GROUP BY MAT_ID 
               ) C
             , ( 
                SELECT MAT_ID, SUM(SHIP_MON) SHIP_MON, SUM(SHIP_YESTERDAY) SHIP_YESTERDAY 
                  FROM ( 
                        SELECT MAT_ID 
                             , SUM(DECODE(WORK_DATE,'20200331', 0, NVL(SHP_QTY_1, 0))) AS SHIP_MON 
                             , SUM(CASE WHEN WORK_DATE = '20200408'
                                        THEN NVL(SHP_QTY_1, 0)  ELSE 0 END) SHIP_YESTERDAY 
                          FROM VSUMWIPSHP 
                         WHERE 1 = 1 
                           AND FACTORY = 'HMVA2' 
                           AND CM_KEY_2 = 'PROD'
                           AND LOT_TYPE = 'W'
                           AND WORK_DATE BETWEEN '20200331' AND '20200409'
                         GROUP BY MAT_ID
                       )
                 GROUP BY MAT_ID
               ) D 
             , ( 
                SELECT MAT_ID, SUM(QTY_1) AS CUR_WIP 
                  FROM RWIPLOTSTS 
                 WHERE 1 = 1 
                   AND FACTORY ='HMVA2' 
                   AND MAT_VER = 1 
                   AND LOT_DEL_FLAG = ' ' 
                   AND LOT_TYPE = 'W' 
                 GROUP BY MAT_ID 
               ) E 
             , ( 
                SELECT MAT_ID
                     , SUM(DECODE(WORK_DATE, '20200408', NVL(RCV_QTY_1,0), 0)) AS RCV_YESTERDAY
                     , SUM(DECODE(WORK_DATE, '20200409', NVL(RCV_QTY_1,0), 0)) AS RCV_DAY      
                  FROM VSUMWIPRCV 
                 WHERE 1 = 1 
                   AND FACTORY = 'HMVA2'
                   AND CM_KEY_2 = 'PROD' 
                   AND LOT_TYPE = 'W'
                   AND WORK_DATE BETWEEN '20200408' AND '20200409'
                 GROUP BY MAT_ID
               ) F 
         WHERE 1 = 1 
           AND A.FACTORY = 'HMVA2' 
           AND B.PLAN_MONTH(+) = '202004' 
           AND A.MAT_TYPE= 'FG' 
           AND A.FACTORY =B.FACTORY(+) 
           AND A.MAT_ID = B.MAT_ID(+) 
           AND A.MAT_ID = C.MAT_ID(+)  
           AND A.MAT_ID = D.MAT_ID(+) 
           AND A.MAT_ID = E.MAT_ID(+) 
           AND A.MAT_ID = F.MAT_ID(+)    
         GROUP BY A.MAT_GRP_1, A.MAT_GRP_2, A.MAT_GRP_3, A.MAT_GRP_4, A.MAT_GRP_5, A.MAT_GRP_6, A.MAT_GRP_7, A.MAT_GRP_8, A.MAT_GRP_9, A.MAT_CMF_10, A.MAT_ID, A.MAT_CMF_7, A.MAT_CMF_13, BASE_MAT_ID
       ) A  
     , ( 
        SELECT MAT_ID 
             , SUM(DECODE(OPER_GRP_1, 'HMK2A', QTY, 0)) V0 
             , SUM(DECODE(OPER_GRP_1, 'B/G', QTY, 0)) V1 
             , SUM(DECODE(OPER_GRP_1, 'SAW', QTY, 0)) V2 
             , SUM(DECODE(OPER_GRP_1, 'S/P', QTY, 0)) V3 
             , SUM(DECODE(OPER_GRP_1, 'D/A', QTY, 0)) V4 
             , SUM(DECODE(OPER_GRP_1, 'W/B', QTY, 0)) V5 
             , SUM(DECODE(OPER_GRP_1, 'GATE', QTY, 0)) V6 
             , SUM(DECODE(OPER_GRP_1, 'MOLD', QTY, 0)) V7 
             , SUM(DECODE(OPER_GRP_1, 'CURE', QTY, 0)) V8 
             , SUM(DECODE(OPER_GRP_1, 'M/K', QTY, 0)) V9 
             , SUM(DECODE(OPER_GRP_1, 'TRIM', QTY, 0)) V10 
             , SUM(DECODE(OPER_GRP_1, 'TIN', QTY, 0)) V11
             , SUM(DECODE(OPER_GRP_1, 'S/B/A', QTY, 0)) V12 
             , SUM(DECODE(OPER_GRP_1, 'SIG', QTY, 0)) V13 
             , SUM(DECODE(OPER_GRP_1, 'AVI', QTY, 0)) V14 
             , SUM(DECODE(OPER_GRP_1, 'V/I', QTY, 'QC GATE', QTY, 0)) V15 
             , SUM(DECODE(OPER_GRP_1, 'HMK3A', QTY, 0)) V16 
          FROM (  
                SELECT A.MAT_ID, B.OPER_GRP_1 
                     , SUM(A.QTY_1) QTY  
                  FROM RWIPLOTSTS A  
                     , MWIPOPRDEF B  
                 WHERE 1 = 1 
                   AND A.FACTORY = B.FACTORY(+)  
                   AND A.OPER = B.OPER(+)  
                   AND A.FACTORY = 'HMVA2'  
                   AND A.MAT_VER = 1  
                   AND A.LOT_TYPE = 'W' 
                   AND A.LOT_DEL_FLAG = ' ' 
                 GROUP BY A.MAT_ID, B.OPER_GRP_1   
               ) 
         GROUP BY MAT_ID  
       ) B   
     , (  
        SELECT MAT_ID 
             , SUM(DECODE(OPER_GRP_7, 'D/A', QTY, 0)) V0 
             , SUM(DECODE(OPER_GRP_7, 'W/B',   QTY, 0)) V1 
             , SUM(DECODE(OPER_GRP_7, 'MOLD',   QTY, 0)) V2 
             , SUM(DECODE(OPER_GRP_7, 'TRIM',   QTY, 0)) V3 
             , SUM(DECODE(OPER_GRP_7, 'TIN',  QTY, 0)) V5  
             , SUM(DECODE(OPER_GRP_7, 'SIG',  QTY, 0)) V7 
          FROM ( 
                SELECT A.MAT_ID, B.OPER_GRP_7
                     , SUM(A.S1_END_QTY_1 + A.S2_END_QTY_1 + A.S3_END_QTY_1 + A.S1_END_RWK_QTY_1 + A.S2_END_RWK_QTY_1 + A.S3_END_RWK_QTY_1 ) QTY 
                  FROM RSUMWIPMOV A 
                     , MWIPOPRDEF B 
                 WHERE 1 = 1 
                   AND A.WORK_DATE = '20200408' 
                   AND A.FACTORY = 'HMVA2' 
                   AND A.MAT_VER = 1 
                   AND A.FACTORY = B.FACTORY 
                   AND A.OPER = B.OPER 
                 GROUP BY A.MAT_ID, B.OPER_GRP_7 
               ) 
         GROUP BY MAT_ID 
       ) C
     , (
        SELECT MAT_ID
             , SUM(QTY_1) AS RTN_DAY
          FROM RWIPLOTHIS
         WHERE 1=1
           AND FACTORY = 'HMVA2'
           AND OLD_FACTORY = 'HMVA2'
           AND LOT_TYPE = 'W'
           AND OWNER_CODE = 'PROD'
           AND OPER IN ('AZ010', 'AZ009')  
           AND CREATE_CODE = 'RETN'   
           AND TRAN_TIME BETWEEN '20200408220000' AND '20200409215959' 
           AND HIST_DEL_FLAG = ' '
         GROUP BY MAT_ID
       ) D           
     , (
        SELECT MAT_ID 
            , SUM(SHP_QTY_1) AS SHIP_DAY 
         FROM VSUMWIPSHP_ONLY 
        WHERE 1 = 1 
          AND FACTORY = 'HMVA2' 
          AND CM_KEY_2 = 'PROD'
          AND LOT_TYPE = 'W'
          AND WORK_DATE = '20200409'
        GROUP BY MAT_ID
       ) E                  
     , (
        SELECT MAT_ID 
             , SUM(SHP_QTY_1) AS AC_T_DAY 
          FROM ( 
                SELECT WORK_DATE 
                     , MAT_ID 
                     , LOT_TYPE 
                     , CM_KEY_2 
                     , S1_FAC_OUT_QTY_1+S2_FAC_OUT_QTY_1+S3_FAC_OUT_QTY_1+S4_FAC_OUT_QTY_1 AS SHP_QTY_1 
                  FROM RSUMFACMOV 
                 WHERE FACTORY='HMKT1' 
                   AND CM_KEY_1='HMVA2' 
               ) 
         WHERE 1 = 1 
           AND CM_KEY_2 = 'PROD'
           AND LOT_TYPE = 'W'
           AND WORK_DATE = '20200409'
         GROUP BY MAT_ID
       ) F                  
 WHERE 1 = 1 
   AND A.MAT_ID = B.MAT_ID(+)
   AND A.MAT_ID = C.MAT_ID(+)
   AND A.MAT_ID = D.MAT_ID(+)
   AND A.MAT_ID = E.MAT_ID(+)
   AND A.MAT_ID = F.MAT_ID(+)
 GROUP BY A.MAT_GRP_1,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', A.MAT_CMF_10, A.MAT_ID,  ' ', A.BASE_MAT_ID 
HAVING (
        NVL(SUM(A.MON_PLAN), 0)+  
        NVL(SUM(A.ORI_PLAN), 0)+  
        NVL(SUM(A.ASSY_MON), 0)+          
        NVL(SUM(A.SHIP_MON), 0)+ 
        NVL(SUM(A.ASSY_DAY), 0)+ 
        NVL(SUM(A.RCV_DAY), 0)+ 
        NVL(SUM(E.SHIP_DAY), 0)+ 
        NVL(SUM(B.V0+B.V1+B.V2+B.V3+B.V4+B.V5+B.V6+B.V7+B.V8+B.V9+B.V10+B.V11+B.V12+B.V13+B.V14+B.V15+B.V16), 0)+  
        NVL(SUM(B.V0), 0)+ NVL(SUM(B.V1), 0)+ NVL(SUM(B.V2), 0)+ NVL(SUM(B.V3), 0)+ NVL(SUM(B.V4), 0)+ NVL(SUM(B.V5), 0)+
        NVL(SUM(B.V6), 0)+ NVL(SUM(B.V7), 0)+ NVL(SUM(B.V8), 0)+ NVL(SUM(B.V9), 0)+ NVL(SUM(B.V10), 0)+ NVL(SUM(B.V11), 0)+ 
        NVL(SUM(B.V12+B.V13), 0)+ NVL(SUM(B.V14), 0)+ NVL(SUM(B.V15), 0)+ NVL(SUM(B.V16), 0)+  
        NVL(SUM(D.RTN_DAY), 0)+ 
        NVL(SUM(C.V0), 0)+ NVL(SUM(C.V1), 0)+ NVL(SUM(C.V2), 0)+ NVL(SUM(C.V3), 0)+ 
        NVL(SUM(C.V5), 0)+ NVL(SUM(C.V7), 0)+ 
        NVL(SUM(A.ASSY_YESTERDAY), 0)+ 
        NVL(SUM(A.SHIP_YESTERDAY), 0)
       ) <> 0
 ORDER BY A.MAT_GRP_1,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', A.MAT_CMF_10, A.MAT_ID,  ' ', A.BASE_MAT_ID 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
SELECT LANGUAGE_2 FROM RWEBFUNDEF WHERE FUNC_NAME = 'PRD010307'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT FACTORY Code, FAC_DESC Data
  FROM MWIPFACDEF
 WHERE FAC_GRP_5 = 'Y' 
 ORDER BY FAC_GRP_4 ASC
-------------------------------------------------------------
SELECT OPER, OPER_DESC  FROM MWIPOPRDEF
  WHERE FACTORY = 'HMVA2'  AND OPER NOT IN ('00001', '00002') AND OPER NOT LIKE 'V%' ORDER BY DECODE(OPER_CMF_2, ' ', 99999, TO_NUMBER(OPER_CMF_2)), OPER
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', LOT_CMF_6 as FAB, MAT_CMF_10 as PIN_TYPE, MAT_ID AS PRODUCT, OPER || '(' || OPER_DESC || ')' AS Step,  ' ', LOT_ID AS LOT_NO,  ' ',  ' '  
     , LOT_CMF_5 AS LOT_TYPE 
     , QTY_1 AS GOOD 
     , '' AS REJECT  
     , '' AS CV  
     , CREATE_QTY_1 AS QTY  
     , DECODE(LOT_CMF_14, ' ', ' ', TO_CHAR(TO_DATE(LOT_CMF_14, 'YYYYMMDDHH24MISS'), 'YY/MM/DD HH24:MI:SS')) AS RECV_TIME  
     , DECODE(RESV_FIELD_1, ' ', ' ', TO_CHAR(TO_DATE(RESV_FIELD_1, 'YYYYMMDDHH24MISS'), 'YY/MM/DD HH24:MI:SS')) AS ISSUE_TIME 
     , TRUNC(TO_DATE('20200409085337', 'YYYYMMDDHH24MISS') - TO_DATE(NVL(TRIM(OPER_IN_TIME),'20200409085337'), 'YYYYMMDDHH24MISS'), 2) AS OPERINTIMEDIFF 
     , TRUNC(TO_DATE('20200409085337', 'YYYYMMDDHH24MISS') - TO_DATE(LOT_CMF_14, 'YYYYMMDDHH24MISS'), 2) AS CREATETIMEDIFF 
  FROM ( 
        SELECT LOT.*, OPR.OPER_DESC
             , MAT_GRP_1, MAT_GRP_2, MAT_GRP_3, MAT_GRP_4, MAT_GRP_5, MAT_GRP_6, MAT_GRP_7, MAT_GRP_8, MAT_GRP_9, MAT_GRP_10, MAT_CMF_7, MAT_CMF_10
          FROM RWIPLOTSTS LOT 
             , MWIPMATDEF MAT 
             , MWIPOPRDEF OPR 
         WHERE 1=1 
           AND LOT.FACTORY = MAT.FACTORY 
           AND LOT.FACTORY = OPR.FACTORY 
           AND LOT.MAT_ID = MAT.MAT_ID 
           AND LOT.OPER = OPR.OPER 
           AND LOT.MAT_VER = 1 
           AND LOT.LOT_DEL_FLAG = ' ' 
           AND LOT.OWNER_CODE = 'PROD' 
           AND LOT.LOT_TYPE = 'W' 
           AND LOT.FACTORY  = 'HMVA2' 
       ) 
ORDER BY LOT_CMF_6, MAT_CMF_10, MAT_ID, OPER, LOT_ID, CREATE_TIME, RESV_FIELD_1

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT PLAN_WEEK V1    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_DATE = TO_CHAR(SYSDATE,'yyyymmdd')      AND ROWNUM = 1  
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT LANGUAGE_2 FROM RWEBFUNDEF WHERE FUNC_NAME = 'PQC030901'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
SELECT  KEY_1,DATA_3,DATA_4  
FROM    MGCMTBLDAT  
WHERE   1=1 
        AND FACTORY = '' 
        AND TABLE_NAME='LOSS_CODE' 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT PLAN_WEEK V1    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_DATE = TO_CHAR(SYSDATE,'yyyymmdd')      AND ROWNUM = 1  
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT LANGUAGE_2 FROM RWEBFUNDEF WHERE FUNC_NAME = 'YLD040601'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT FACTORY Code, FAC_DESC Data
  FROM MWIPFACDEF
 WHERE FAC_GRP_5 = 'Y' 
 ORDER BY FAC_GRP_4 ASC
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT  KEY_1,DATA_3,DATA_4  
FROM    MGCMTBLDAT  
WHERE   1=1 
        AND FACTORY = 'HMVA2' 
        AND TABLE_NAME='LOSS_CODE' 
        AND DATA_3='Y'  
ORDER BY TO_NUMBER(DATA_4) 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT  KEY_1,DATA_3,DATA_4  
FROM    MGCMTBLDAT  
WHERE   1=1 
        AND FACTORY = 'HMVA2' 
        AND TABLE_NAME='LOSS_CODE' 
        AND DATA_3='Y'  
ORDER BY TO_NUMBER(DATA_4) 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
WITH DT AS
(
 SELECT * 
   FROM CWIPLOTEND 
  WHERE 1=1 
    AND TRAN_TIME BETWEEN '20200407220000' AND '20200408215959' 
    AND TRAN_CODE = 'END' 
    AND LOT_TYPE = 'W' 
    AND FACTORY = 'HMVA2' 
    AND HIST_DEL_FLAG = ' ' 
    AND TRAN_CMF_1 = 'CLOSE' 
)
SELECT  ' ',  ' ', SUMMERY.MAT_GRP_6, SUMMERY.MAT_GRP_3,  ' ',  ' ',  ' ',  ' ', SUMMERY.MAT_ID
     , SUMMERY.LOT_ID,SUMMERY.IN_TIME,SUMMERY.SHIP_TIME 
     , SUMMERY.TAT AS TAT 
     , SUMMERY.BE_OUT + NVL(SUM(LOSS.BE_LOSS_QTY),0) + NVL(SUM(LOSS.IL_LOSS_QTY),0) AS IL_IN 
     , SUMMERY.BE_OUT + NVL(SUM(LOSS.BE_LOSS_QTY),0) AS IL_OUT 
     , ROUND(((SUMMERY.BE_OUT + NVL(SUM(LOSS.BE_LOSS_QTY),0))/(SUMMERY.BE_OUT + NVL(SUM(LOSS.BE_LOSS_QTY),0) + NVL(SUM(LOSS.IL_LOSS_QTY),0)))*100,3)||'%' AS IL_YIELD 
     , SUMMERY.BE_OUT + NVL(SUM(LOSS.BE_LOSS_QTY),0) AS BE_IN 
     , SUMMERY.BE_OUT 
     , ROUND((SUMMERY.BE_OUT/(SUMMERY.BE_OUT + NVL(SUM(LOSS.BE_LOSS_QTY),0)))*100,3)||'%' AS BE_YIELD 
     , SUMMERY.OUT_QTY + NVL(SUM(LOSS.LOSS_QTY),0) AS IN_QTY  
     , SUMMERY.OUT_QTY 
     , ROUND(SUMMERY.OUT_QTY/(SUMMERY.OUT_QTY + NVL(SUM(LOSS.LOSS_QTY),0))*100,3)||'%' AS YIELD 
     , '' AS BONUS 
     , NVL(SUM(LOSS.LOSS_QTY),0) AS LOSS_QTY 
     , SUM(DECODE(LOSS.LOSS_CODE,'80',LOSS.LOSS_QTY,0))  LOSS0
     , SUM(DECODE(LOSS.LOSS_CODE,'81',LOSS.LOSS_QTY,0))  LOSS1
     , SUM(DECODE(LOSS.LOSS_CODE,'82',LOSS.LOSS_QTY,0))  LOSS2
     , SUM(DECODE(LOSS.LOSS_CODE,'83',LOSS.LOSS_QTY,0))  LOSS3
     , SUM(DECODE(LOSS.LOSS_CODE,'84',LOSS.LOSS_QTY,0))  LOSS4
     , SUM(DECODE(LOSS.LOSS_CODE,'85',LOSS.LOSS_QTY,0))  LOSS5
     , SUM(DECODE(LOSS.LOSS_CODE,'86',LOSS.LOSS_QTY,0))  LOSS6
     , SUM(DECODE(LOSS.LOSS_CODE,'87',LOSS.LOSS_QTY,0))  LOSS7
     , SUM(DECODE(LOSS.LOSS_CODE,'88',LOSS.LOSS_QTY,0))  LOSS8
     , SUM(DECODE(LOSS.LOSS_CODE,'100',LOSS.LOSS_QTY,0))  LOSS9
     , SUM(DECODE(LOSS.LOSS_CODE,'102',LOSS.LOSS_QTY,0))  LOSS10
     , SUM(DECODE(LOSS.LOSS_CODE,'104',LOSS.LOSS_QTY,0))  LOSS11
     , SUM(DECODE(LOSS.LOSS_CODE,'105',LOSS.LOSS_QTY,0))  LOSS12
     , SUM(DECODE(LOSS.LOSS_CODE,'106',LOSS.LOSS_QTY,0))  LOSS13
     , SUM(DECODE(LOSS.LOSS_CODE,'107',LOSS.LOSS_QTY,0))  LOSS14
     , SUM(DECODE(LOSS.LOSS_CODE,'110',LOSS.LOSS_QTY,0))  LOSS15
     , SUM(DECODE(LOSS.LOSS_CODE,'111',LOSS.LOSS_QTY,0))  LOSS16
     , SUM(DECODE(LOSS.LOSS_CODE,'112',LOSS.LOSS_QTY,0))  LOSS17
     , SUM(DECODE(LOSS.LOSS_CODE,'114',LOSS.LOSS_QTY,0))  LOSS18
     , SUM(DECODE(LOSS.LOSS_CODE,'115',LOSS.LOSS_QTY,0))  LOSS19
     , SUM(DECODE(LOSS.LOSS_CODE,'116',LOSS.LOSS_QTY,0))  LOSS20
     , SUM(DECODE(LOSS.LOSS_CODE,'119',LOSS.LOSS_QTY,0))  LOSS21
     , SUM(DECODE(LOSS.LOSS_CODE,'120',LOSS.LOSS_QTY,0))  LOSS22
     , SUM(DECODE(LOSS.LOSS_CODE,'121',LOSS.LOSS_QTY,0))  LOSS23
     , SUM(DECODE(LOSS.LOSS_CODE,'122',LOSS.LOSS_QTY,0))  LOSS24
     , SUM(DECODE(LOSS.LOSS_CODE,'123',LOSS.LOSS_QTY,0))  LOSS25
     , SUM(DECODE(LOSS.LOSS_CODE,'124',LOSS.LOSS_QTY,0))  LOSS26
     , SUM(DECODE(LOSS.LOSS_CODE,'125',LOSS.LOSS_QTY,0))  LOSS27
     , SUM(DECODE(LOSS.LOSS_CODE,'127',LOSS.LOSS_QTY,0))  LOSS28
     , SUM(DECODE(LOSS.LOSS_CODE,'128',LOSS.LOSS_QTY,0))  LOSS29
     , SUM(DECODE(LOSS.LOSS_CODE,'200',LOSS.LOSS_QTY,0))  LOSS30
     , SUM(DECODE(LOSS.LOSS_CODE,'202',LOSS.LOSS_QTY,0))  LOSS31
     , SUM(DECODE(LOSS.LOSS_CODE,'203',LOSS.LOSS_QTY,0))  LOSS32
     , SUM(DECODE(LOSS.LOSS_CODE,'204',LOSS.LOSS_QTY,0))  LOSS33
     , SUM(DECODE(LOSS.LOSS_CODE,'205',LOSS.LOSS_QTY,0))  LOSS34
     , SUM(DECODE(LOSS.LOSS_CODE,'206',LOSS.LOSS_QTY,0))  LOSS35
     , SUM(DECODE(LOSS.LOSS_CODE,'207',LOSS.LOSS_QTY,0))  LOSS36
     , SUM(DECODE(LOSS.LOSS_CODE,'208',LOSS.LOSS_QTY,0))  LOSS37
     , SUM(DECODE(LOSS.LOSS_CODE,'209',LOSS.LOSS_QTY,0))  LOSS38
     , SUM(DECODE(LOSS.LOSS_CODE,'210',LOSS.LOSS_QTY,0))  LOSS39
     , SUM(DECODE(LOSS.LOSS_CODE,'211',LOSS.LOSS_QTY,0))  LOSS40
     , SUM(DECODE(LOSS.LOSS_CODE,'212',LOSS.LOSS_QTY,0))  LOSS41
     , SUM(DECODE(LOSS.LOSS_CODE,'213',LOSS.LOSS_QTY,0))  LOSS42
     , SUM(DECODE(LOSS.LOSS_CODE,'214',LOSS.LOSS_QTY,0))  LOSS43
     , SUM(DECODE(LOSS.LOSS_CODE,'215',LOSS.LOSS_QTY,0))  LOSS44
     , SUM(DECODE(LOSS.LOSS_CODE,'216',LOSS.LOSS_QTY,0))  LOSS45
     , SUM(DECODE(LOSS.LOSS_CODE,'217',LOSS.LOSS_QTY,0))  LOSS46
     , SUM(DECODE(LOSS.LOSS_CODE,'218',LOSS.LOSS_QTY,0))  LOSS47
     , SUM(DECODE(LOSS.LOSS_CODE,'219',LOSS.LOSS_QTY,0))  LOSS48
     , SUM(DECODE(LOSS.LOSS_CODE,'222',LOSS.LOSS_QTY,0))  LOSS49
     , SUM(DECODE(LOSS.LOSS_CODE,'224',LOSS.LOSS_QTY,0))  LOSS50
     , SUM(DECODE(LOSS.LOSS_CODE,'225',LOSS.LOSS_QTY,0))  LOSS51
     , SUM(DECODE(LOSS.LOSS_CODE,'250',LOSS.LOSS_QTY,0))  LOSS52
     , SUM(DECODE(LOSS.LOSS_CODE,'251',LOSS.LOSS_QTY,0))  LOSS53
     , SUM(DECODE(LOSS.LOSS_CODE,'265',LOSS.LOSS_QTY,0))  LOSS54
     , SUM(DECODE(LOSS.LOSS_CODE,'270',LOSS.LOSS_QTY,0))  LOSS55
     , SUM(DECODE(LOSS.LOSS_CODE,'291',LOSS.LOSS_QTY,0))  LOSS56
     , SUM(DECODE(LOSS.LOSS_CODE,'299',LOSS.LOSS_QTY,0))  LOSS57
     , SUM(DECODE(LOSS.LOSS_CODE,'302',LOSS.LOSS_QTY,0))  LOSS58
     , SUM(DECODE(LOSS.LOSS_CODE,'303',LOSS.LOSS_QTY,0))  LOSS59
     , SUM(DECODE(LOSS.LOSS_CODE,'304',LOSS.LOSS_QTY,0))  LOSS60
     , SUM(DECODE(LOSS.LOSS_CODE,'305',LOSS.LOSS_QTY,0))  LOSS61
     , SUM(DECODE(LOSS.LOSS_CODE,'306',LOSS.LOSS_QTY,0))  LOSS62
     , SUM(DECODE(LOSS.LOSS_CODE,'307',LOSS.LOSS_QTY,0))  LOSS63
     , SUM(DECODE(LOSS.LOSS_CODE,'308',LOSS.LOSS_QTY,0))  LOSS64
     , SUM(DECODE(LOSS.LOSS_CODE,'311',LOSS.LOSS_QTY,0))  LOSS65
     , SUM(DECODE(LOSS.LOSS_CODE,'312',LOSS.LOSS_QTY,0))  LOSS66
     , SUM(DECODE(LOSS.LOSS_CODE,'313',LOSS.LOSS_QTY,0))  LOSS67
     , SUM(DECODE(LOSS.LOSS_CODE,'314',LOSS.LOSS_QTY,0))  LOSS68
     , SUM(DECODE(LOSS.LOSS_CODE,'315',LOSS.LOSS_QTY,0))  LOSS69
     , SUM(DECODE(LOSS.LOSS_CODE,'316',LOSS.LOSS_QTY,0))  LOSS70
     , SUM(DECODE(LOSS.LOSS_CODE,'317',LOSS.LOSS_QTY,0))  LOSS71
     , SUM(DECODE(LOSS.LOSS_CODE,'318',LOSS.LOSS_QTY,0))  LOSS72
     , SUM(DECODE(LOSS.LOSS_CODE,'319',LOSS.LOSS_QTY,0))  LOSS73
     , SUM(DECODE(LOSS.LOSS_CODE,'320',LOSS.LOSS_QTY,0))  LOSS74
     , SUM(DECODE(LOSS.LOSS_CODE,'321',LOSS.LOSS_QTY,0))  LOSS75
     , SUM(DECODE(LOSS.LOSS_CODE,'322',LOSS.LOSS_QTY,0))  LOSS76
     , SUM(DECODE(LOSS.LOSS_CODE,'323',LOSS.LOSS_QTY,0))  LOSS77
     , SUM(DECODE(LOSS.LOSS_CODE,'324',LOSS.LOSS_QTY,0))  LOSS78
     , SUM(DECODE(LOSS.LOSS_CODE,'326',LOSS.LOSS_QTY,0))  LOSS79
     , SUM(DECODE(LOSS.LOSS_CODE,'330',LOSS.LOSS_QTY,0))  LOSS80
     , SUM(DECODE(LOSS.LOSS_CODE,'331',LOSS.LOSS_QTY,0))  LOSS81
     , SUM(DECODE(LOSS.LOSS_CODE,'332',LOSS.LOSS_QTY,0))  LOSS82
     , SUM(DECODE(LOSS.LOSS_CODE,'333',LOSS.LOSS_QTY,0))  LOSS83
     , SUM(DECODE(LOSS.LOSS_CODE,'368',LOSS.LOSS_QTY,0))  LOSS84
     , SUM(DECODE(LOSS.LOSS_CODE,'371',LOSS.LOSS_QTY,0))  LOSS85
     , SUM(DECODE(LOSS.LOSS_CODE,'373',LOSS.LOSS_QTY,0))  LOSS86
     , SUM(DECODE(LOSS.LOSS_CODE,'388',LOSS.LOSS_QTY,0))  LOSS87
     , SUM(DECODE(LOSS.LOSS_CODE,'392',LOSS.LOSS_QTY,0))  LOSS88
     , SUM(DECODE(LOSS.LOSS_CODE,'395',LOSS.LOSS_QTY,0))  LOSS89
     , SUM(DECODE(LOSS.LOSS_CODE,'402',LOSS.LOSS_QTY,0))  LOSS90
     , SUM(DECODE(LOSS.LOSS_CODE,'403',LOSS.LOSS_QTY,0))  LOSS91
     , SUM(DECODE(LOSS.LOSS_CODE,'404',LOSS.LOSS_QTY,0))  LOSS92
     , SUM(DECODE(LOSS.LOSS_CODE,'405',LOSS.LOSS_QTY,0))  LOSS93
     , SUM(DECODE(LOSS.LOSS_CODE,'406',LOSS.LOSS_QTY,0))  LOSS94
     , SUM(DECODE(LOSS.LOSS_CODE,'407',LOSS.LOSS_QTY,0))  LOSS95
     , SUM(DECODE(LOSS.LOSS_CODE,'408',LOSS.LOSS_QTY,0))  LOSS96
     , SUM(DECODE(LOSS.LOSS_CODE,'409',LOSS.LOSS_QTY,0))  LOSS97
     , SUM(DECODE(LOSS.LOSS_CODE,'410',LOSS.LOSS_QTY,0))  LOSS98
     , SUM(DECODE(LOSS.LOSS_CODE,'411',LOSS.LOSS_QTY,0))  LOSS99
     , SUM(DECODE(LOSS.LOSS_CODE,'412',LOSS.LOSS_QTY,0))  LOSS100
     , SUM(DECODE(LOSS.LOSS_CODE,'413',LOSS.LOSS_QTY,0))  LOSS101
     , SUM(DECODE(LOSS.LOSS_CODE,'414',LOSS.LOSS_QTY,0))  LOSS102
     , SUM(DECODE(LOSS.LOSS_CODE,'415',LOSS.LOSS_QTY,0))  LOSS103
     , SUM(DECODE(LOSS.LOSS_CODE,'417',LOSS.LOSS_QTY,0))  LOSS104
     , SUM(DECODE(LOSS.LOSS_CODE,'418',LOSS.LOSS_QTY,0))  LOSS105
     , SUM(DECODE(LOSS.LOSS_CODE,'419',LOSS.LOSS_QTY,0))  LOSS106
     , SUM(DECODE(LOSS.LOSS_CODE,'420',LOSS.LOSS_QTY,0))  LOSS107
     , SUM(DECODE(LOSS.LOSS_CODE,'421',LOSS.LOSS_QTY,0))  LOSS108
     , SUM(DECODE(LOSS.LOSS_CODE,'422',LOSS.LOSS_QTY,0))  LOSS109
     , SUM(DECODE(LOSS.LOSS_CODE,'423',LOSS.LOSS_QTY,0))  LOSS110
     , SUM(DECODE(LOSS.LOSS_CODE,'424',LOSS.LOSS_QTY,0))  LOSS111
     , SUM(DECODE(LOSS.LOSS_CODE,'425',LOSS.LOSS_QTY,0))  LOSS112
     , SUM(DECODE(LOSS.LOSS_CODE,'426',LOSS.LOSS_QTY,0))  LOSS113
     , SUM(DECODE(LOSS.LOSS_CODE,'427',LOSS.LOSS_QTY,0))  LOSS114
     , SUM(DECODE(LOSS.LOSS_CODE,'440',LOSS.LOSS_QTY,0))  LOSS115
     , SUM(DECODE(LOSS.LOSS_CODE,'472',LOSS.LOSS_QTY,0))  LOSS116
     , SUM(DECODE(LOSS.LOSS_CODE,'430',LOSS.LOSS_QTY,0))  LOSS117
     , SUM(DECODE(LOSS.LOSS_CODE,'473',LOSS.LOSS_QTY,0))  LOSS118
     , SUM(DECODE(LOSS.LOSS_CODE,'474',LOSS.LOSS_QTY,0))  LOSS119
     , SUM(DECODE(LOSS.LOSS_CODE,'475',LOSS.LOSS_QTY,0))  LOSS120
     , SUM(DECODE(LOSS.LOSS_CODE,'476',LOSS.LOSS_QTY,0))  LOSS121
     , SUM(DECODE(LOSS.LOSS_CODE,'477',LOSS.LOSS_QTY,0))  LOSS122
     , SUM(DECODE(LOSS.LOSS_CODE,'478',LOSS.LOSS_QTY,0))  LOSS123
     , SUM(DECODE(LOSS.LOSS_CODE,'479',LOSS.LOSS_QTY,0))  LOSS124
     , SUM(DECODE(LOSS.LOSS_CODE,'480',LOSS.LOSS_QTY,0))  LOSS125
     , SUM(DECODE(LOSS.LOSS_CODE,'481',LOSS.LOSS_QTY,0))  LOSS126
     , SUM(DECODE(LOSS.LOSS_CODE,'491',LOSS.LOSS_QTY,0))  LOSS127
     , SUM(DECODE(LOSS.LOSS_CODE,'492',LOSS.LOSS_QTY,0))  LOSS128
     , SUM(DECODE(LOSS.LOSS_CODE,'493',LOSS.LOSS_QTY,0))  LOSS129
     , SUM(DECODE(LOSS.LOSS_CODE,'494',LOSS.LOSS_QTY,0))  LOSS130
     , SUM(DECODE(LOSS.LOSS_CODE,'495',LOSS.LOSS_QTY,0))  LOSS131
     , SUM(DECODE(LOSS.LOSS_CODE,'503',LOSS.LOSS_QTY,0))  LOSS132
     , SUM(DECODE(LOSS.LOSS_CODE,'504',LOSS.LOSS_QTY,0))  LOSS133
     , SUM(DECODE(LOSS.LOSS_CODE,'508',LOSS.LOSS_QTY,0))  LOSS134
     , SUM(DECODE(LOSS.LOSS_CODE,'510',LOSS.LOSS_QTY,0))  LOSS135
     , SUM(DECODE(LOSS.LOSS_CODE,'512',LOSS.LOSS_QTY,0))  LOSS136
     , SUM(DECODE(LOSS.LOSS_CODE,'513',LOSS.LOSS_QTY,0))  LOSS137
     , SUM(DECODE(LOSS.LOSS_CODE,'514',LOSS.LOSS_QTY,0))  LOSS138
     , SUM(DECODE(LOSS.LOSS_CODE,'517',LOSS.LOSS_QTY,0))  LOSS139
     , SUM(DECODE(LOSS.LOSS_CODE,'520',LOSS.LOSS_QTY,0))  LOSS140
     , SUM(DECODE(LOSS.LOSS_CODE,'531',LOSS.LOSS_QTY,0))  LOSS141
     , SUM(DECODE(LOSS.LOSS_CODE,'538',LOSS.LOSS_QTY,0))  LOSS142
     , SUM(DECODE(LOSS.LOSS_CODE,'539',LOSS.LOSS_QTY,0))  LOSS143
     , SUM(DECODE(LOSS.LOSS_CODE,'563',LOSS.LOSS_QTY,0))  LOSS144
     , SUM(DECODE(LOSS.LOSS_CODE,'564',LOSS.LOSS_QTY,0))  LOSS145
     , SUM(DECODE(LOSS.LOSS_CODE,'565',LOSS.LOSS_QTY,0))  LOSS146
     , SUM(DECODE(LOSS.LOSS_CODE,'566',LOSS.LOSS_QTY,0))  LOSS147
     , SUM(DECODE(LOSS.LOSS_CODE,'567',LOSS.LOSS_QTY,0))  LOSS148
     , SUM(DECODE(LOSS.LOSS_CODE,'568',LOSS.LOSS_QTY,0))  LOSS149
     , SUM(DECODE(LOSS.LOSS_CODE,'571',LOSS.LOSS_QTY,0))  LOSS150
     , SUM(DECODE(LOSS.LOSS_CODE,'572',LOSS.LOSS_QTY,0))  LOSS151
     , SUM(DECODE(LOSS.LOSS_CODE,'573',LOSS.LOSS_QTY,0))  LOSS152
     , SUM(DECODE(LOSS.LOSS_CODE,'602',LOSS.LOSS_QTY,0))  LOSS153
     , SUM(DECODE(LOSS.LOSS_CODE,'603',LOSS.LOSS_QTY,0))  LOSS154
     , SUM(DECODE(LOSS.LOSS_CODE,'604',LOSS.LOSS_QTY,0))  LOSS155
     , SUM(DECODE(LOSS.LOSS_CODE,'605',LOSS.LOSS_QTY,0))  LOSS156
     , SUM(DECODE(LOSS.LOSS_CODE,'606',LOSS.LOSS_QTY,0))  LOSS157
     , SUM(DECODE(LOSS.LOSS_CODE,'607',LOSS.LOSS_QTY,0))  LOSS158
     , SUM(DECODE(LOSS.LOSS_CODE,'608',LOSS.LOSS_QTY,0))  LOSS159
     , SUM(DECODE(LOSS.LOSS_CODE,'609',LOSS.LOSS_QTY,0))  LOSS160
     , SUM(DECODE(LOSS.LOSS_CODE,'610',LOSS.LOSS_QTY,0))  LOSS161
     , SUM(DECODE(LOSS.LOSS_CODE,'611',LOSS.LOSS_QTY,0))  LOSS162
     , SUM(DECODE(LOSS.LOSS_CODE,'612',LOSS.LOSS_QTY,0))  LOSS163
     , SUM(DECODE(LOSS.LOSS_CODE,'613',LOSS.LOSS_QTY,0))  LOSS164
     , SUM(DECODE(LOSS.LOSS_CODE,'614',LOSS.LOSS_QTY,0))  LOSS165
     , SUM(DECODE(LOSS.LOSS_CODE,'615',LOSS.LOSS_QTY,0))  LOSS166
     , SUM(DECODE(LOSS.LOSS_CODE,'616',LOSS.LOSS_QTY,0))  LOSS167
     , SUM(DECODE(LOSS.LOSS_CODE,'619',LOSS.LOSS_QTY,0))  LOSS168
     , SUM(DECODE(LOSS.LOSS_CODE,'620',LOSS.LOSS_QTY,0))  LOSS169
     , SUM(DECODE(LOSS.LOSS_CODE,'621',LOSS.LOSS_QTY,0))  LOSS170
     , SUM(DECODE(LOSS.LOSS_CODE,'631',LOSS.LOSS_QTY,0))  LOSS171
     , SUM(DECODE(LOSS.LOSS_CODE,'633',LOSS.LOSS_QTY,0))  LOSS172
     , SUM(DECODE(LOSS.LOSS_CODE,'632',LOSS.LOSS_QTY,0))  LOSS173
     , SUM(DECODE(LOSS.LOSS_CODE,'702',LOSS.LOSS_QTY,0))  LOSS174
     , SUM(DECODE(LOSS.LOSS_CODE,'703',LOSS.LOSS_QTY,0))  LOSS175
     , SUM(DECODE(LOSS.LOSS_CODE,'704',LOSS.LOSS_QTY,0))  LOSS176
     , SUM(DECODE(LOSS.LOSS_CODE,'705',LOSS.LOSS_QTY,0))  LOSS177
     , SUM(DECODE(LOSS.LOSS_CODE,'706',LOSS.LOSS_QTY,0))  LOSS178
     , SUM(DECODE(LOSS.LOSS_CODE,'707',LOSS.LOSS_QTY,0))  LOSS179
     , SUM(DECODE(LOSS.LOSS_CODE,'708',LOSS.LOSS_QTY,0))  LOSS180
     , SUM(DECODE(LOSS.LOSS_CODE,'709',LOSS.LOSS_QTY,0))  LOSS181
     , SUM(DECODE(LOSS.LOSS_CODE,'710',LOSS.LOSS_QTY,0))  LOSS182
     , SUM(DECODE(LOSS.LOSS_CODE,'711',LOSS.LOSS_QTY,0))  LOSS183
     , SUM(DECODE(LOSS.LOSS_CODE,'712',LOSS.LOSS_QTY,0))  LOSS184
     , SUM(DECODE(LOSS.LOSS_CODE,'713',LOSS.LOSS_QTY,0))  LOSS185
     , SUM(DECODE(LOSS.LOSS_CODE,'714',LOSS.LOSS_QTY,0))  LOSS186
     , SUM(DECODE(LOSS.LOSS_CODE,'715',LOSS.LOSS_QTY,0))  LOSS187
     , SUM(DECODE(LOSS.LOSS_CODE,'716',LOSS.LOSS_QTY,0))  LOSS188
     , SUM(DECODE(LOSS.LOSS_CODE,'718',LOSS.LOSS_QTY,0))  LOSS189
     , SUM(DECODE(LOSS.LOSS_CODE,'719',LOSS.LOSS_QTY,0))  LOSS190
     , SUM(DECODE(LOSS.LOSS_CODE,'720',LOSS.LOSS_QTY,0))  LOSS191
     , SUM(DECODE(LOSS.LOSS_CODE,'721',LOSS.LOSS_QTY,0))  LOSS192
     , SUM(DECODE(LOSS.LOSS_CODE,'722',LOSS.LOSS_QTY,0))  LOSS193
     , SUM(DECODE(LOSS.LOSS_CODE,'760',LOSS.LOSS_QTY,0))  LOSS194
     , SUM(DECODE(LOSS.LOSS_CODE,'802',LOSS.LOSS_QTY,0))  LOSS195
     , SUM(DECODE(LOSS.LOSS_CODE,'803',LOSS.LOSS_QTY,0))  LOSS196
     , SUM(DECODE(LOSS.LOSS_CODE,'804',LOSS.LOSS_QTY,0))  LOSS197
     , SUM(DECODE(LOSS.LOSS_CODE,'805',LOSS.LOSS_QTY,0))  LOSS198
     , SUM(DECODE(LOSS.LOSS_CODE,'808',LOSS.LOSS_QTY,0))  LOSS199
     , SUM(DECODE(LOSS.LOSS_CODE,'809',LOSS.LOSS_QTY,0))  LOSS200
     , SUM(DECODE(LOSS.LOSS_CODE,'810',LOSS.LOSS_QTY,0))  LOSS201
     , SUM(DECODE(LOSS.LOSS_CODE,'811',LOSS.LOSS_QTY,0))  LOSS202
     , SUM(DECODE(LOSS.LOSS_CODE,'812',LOSS.LOSS_QTY,0))  LOSS203
     , SUM(DECODE(LOSS.LOSS_CODE,'813',LOSS.LOSS_QTY,0))  LOSS204
     , SUM(DECODE(LOSS.LOSS_CODE,'815',LOSS.LOSS_QTY,0))  LOSS205
     , SUM(DECODE(LOSS.LOSS_CODE,'816',LOSS.LOSS_QTY,0))  LOSS206
     , SUM(DECODE(LOSS.LOSS_CODE,'818',LOSS.LOSS_QTY,0))  LOSS207
     , SUM(DECODE(LOSS.LOSS_CODE,'819',LOSS.LOSS_QTY,0))  LOSS208
     , SUM(DECODE(LOSS.LOSS_CODE,'820',LOSS.LOSS_QTY,0))  LOSS209
     , SUM(DECODE(LOSS.LOSS_CODE,'821',LOSS.LOSS_QTY,0))  LOSS210
     , SUM(DECODE(LOSS.LOSS_CODE,'822',LOSS.LOSS_QTY,0))  LOSS211
     , SUM(DECODE(LOSS.LOSS_CODE,'823',LOSS.LOSS_QTY,0))  LOSS212
     , SUM(DECODE(LOSS.LOSS_CODE,'829',LOSS.LOSS_QTY,0))  LOSS213
     , SUM(DECODE(LOSS.LOSS_CODE,'830',LOSS.LOSS_QTY,0))  LOSS214
     , SUM(DECODE(LOSS.LOSS_CODE,'862',LOSS.LOSS_QTY,0))  LOSS215
     , SUM(DECODE(LOSS.LOSS_CODE,'866',LOSS.LOSS_QTY,0))  LOSS216
     , SUM(DECODE(LOSS.LOSS_CODE,'867',LOSS.LOSS_QTY,0))  LOSS217
     , SUM(DECODE(LOSS.LOSS_CODE,'889',LOSS.LOSS_QTY,0))  LOSS218
     , SUM(DECODE(LOSS.LOSS_CODE,'890',LOSS.LOSS_QTY,0))  LOSS219
     , SUM(DECODE(LOSS.LOSS_CODE,'891',LOSS.LOSS_QTY,0))  LOSS220
     , SUM(DECODE(LOSS.LOSS_CODE,'892',LOSS.LOSS_QTY,0))  LOSS221
     , SUM(DECODE(LOSS.LOSS_CODE,'893',LOSS.LOSS_QTY,0))  LOSS222
     , SUM(DECODE(LOSS.LOSS_CODE,'894',LOSS.LOSS_QTY,0))  LOSS223
     , SUM(DECODE(LOSS.LOSS_CODE,'903',LOSS.LOSS_QTY,0))  LOSS224
     , SUM(DECODE(LOSS.LOSS_CODE,'904',LOSS.LOSS_QTY,0))  LOSS225
     , SUM(DECODE(LOSS.LOSS_CODE,'905',LOSS.LOSS_QTY,0))  LOSS226
     , SUM(DECODE(LOSS.LOSS_CODE,'924',LOSS.LOSS_QTY,0))  LOSS227
     , SUM(DECODE(LOSS.LOSS_CODE,'925',LOSS.LOSS_QTY,0))  LOSS228
     , SUM(DECODE(LOSS.LOSS_CODE,'929',LOSS.LOSS_QTY,0))  LOSS229
     , SUM(DECODE(LOSS.LOSS_CODE,'930',LOSS.LOSS_QTY,0))  LOSS230
     , SUM(DECODE(LOSS.LOSS_CODE,'931',LOSS.LOSS_QTY,0))  LOSS231
     , SUM(DECODE(LOSS.LOSS_CODE,'932',LOSS.LOSS_QTY,0))  LOSS232
     , SUM(DECODE(LOSS.LOSS_CODE,'935',LOSS.LOSS_QTY,0))  LOSS233
     , SUM(DECODE(LOSS.LOSS_CODE,'936',LOSS.LOSS_QTY,0))  LOSS234
     , SUM(DECODE(LOSS.LOSS_CODE,'937',LOSS.LOSS_QTY,0))  LOSS235
     , SUM(DECODE(LOSS.LOSS_CODE,'940',LOSS.LOSS_QTY,0))  LOSS236
     , SUM(DECODE(LOSS.LOSS_CODE,'944',LOSS.LOSS_QTY,0))  LOSS237
     , SUM(DECODE(LOSS.LOSS_CODE,'945',LOSS.LOSS_QTY,0))  LOSS238
     , SUM(DECODE(LOSS.LOSS_CODE,'947',LOSS.LOSS_QTY,0))  LOSS239
     , SUM(DECODE(LOSS.LOSS_CODE,'948',LOSS.LOSS_QTY,0))  LOSS240
     , SUM(DECODE(LOSS.LOSS_CODE,'949',LOSS.LOSS_QTY,0))  LOSS241
     , SUM(DECODE(LOSS.LOSS_CODE,'950',LOSS.LOSS_QTY,0))  LOSS242
     , SUM(DECODE(LOSS.LOSS_CODE,'951',LOSS.LOSS_QTY,0))  LOSS243
     , SUM(DECODE(LOSS.LOSS_CODE,'953',LOSS.LOSS_QTY,0))  LOSS244
     , SUM(DECODE(LOSS.LOSS_CODE,'954',LOSS.LOSS_QTY,0))  LOSS245
     , SUM(DECODE(LOSS.LOSS_CODE,'955',LOSS.LOSS_QTY,0))  LOSS246
     , SUM(DECODE(LOSS.LOSS_CODE,'956',LOSS.LOSS_QTY,0))  LOSS247
     , SUM(DECODE(LOSS.LOSS_CODE,'957',LOSS.LOSS_QTY,0))  LOSS248
     , SUM(DECODE(LOSS.LOSS_CODE,'958',LOSS.LOSS_QTY,0))  LOSS249
     , SUM(DECODE(LOSS.LOSS_CODE,'962',LOSS.LOSS_QTY,0))  LOSS250
     , SUM(DECODE(LOSS.LOSS_CODE,'970',LOSS.LOSS_QTY,0))  LOSS251
     , SUM(DECODE(LOSS.LOSS_CODE,'971',LOSS.LOSS_QTY,0))  LOSS252
     , SUM(DECODE(LOSS.LOSS_CODE,'991',LOSS.LOSS_QTY,0))  LOSS253
     , SUM(DECODE(LOSS.LOSS_CODE,'992',LOSS.LOSS_QTY,0))  LOSS254
     , SUM(DECODE(LOSS.LOSS_CODE,'995',LOSS.LOSS_QTY,0))  LOSS255
     , SUM(DECODE(LOSS.LOSS_CODE,'996',LOSS.LOSS_QTY,0))  LOSS256
     , SUM(DECODE(LOSS.LOSS_CODE,'997',LOSS.LOSS_QTY,0))  LOSS257
     , SUM(DECODE(LOSS.LOSS_CODE,'129',LOSS.LOSS_QTY,0))  LOSS258
     , SUM(DECODE(LOSS.LOSS_CODE,'130',LOSS.LOSS_QTY,0))  LOSS259
     , SUM(DECODE(LOSS.LOSS_CODE,'131',LOSS.LOSS_QTY,0))  LOSS260
     , SUM(DECODE(LOSS.LOSS_CODE,'132',LOSS.LOSS_QTY,0))  LOSS261
     , SUM(DECODE(LOSS.LOSS_CODE,'133',LOSS.LOSS_QTY,0))  LOSS262
     , SUM(DECODE(LOSS.LOSS_CODE,'1001',LOSS.LOSS_QTY,0))  LOSS263
     , SUM(DECODE(LOSS.LOSS_CODE,'1002',LOSS.LOSS_QTY,0))  LOSS264
     , SUM(DECODE(LOSS.LOSS_CODE,'1003',LOSS.LOSS_QTY,0))  LOSS265
     , SUM(DECODE(LOSS.LOSS_CODE,'1004',LOSS.LOSS_QTY,0))  LOSS266
     , SUM(DECODE(LOSS.LOSS_CODE,'1005',LOSS.LOSS_QTY,0))  LOSS267
     , SUM(DECODE(LOSS.LOSS_CODE,'1006',LOSS.LOSS_QTY,0))  LOSS268
     , SUM(DECODE(LOSS.LOSS_CODE,'1007',LOSS.LOSS_QTY,0))  LOSS269
     , SUM(DECODE(LOSS.LOSS_CODE,'1008',LOSS.LOSS_QTY,0))  LOSS270
     , SUM(DECODE(LOSS.LOSS_CODE,'1009',LOSS.LOSS_QTY,0))  LOSS271
     , SUM(DECODE(LOSS.LOSS_CODE,'1010',LOSS.LOSS_QTY,0))  LOSS272
     , SUM(DECODE(LOSS.LOSS_CODE,'1011',LOSS.LOSS_QTY,0))  LOSS273
     , SUM(DECODE(LOSS.LOSS_CODE,'1012',LOSS.LOSS_QTY,0))  LOSS274
     , SUM(DECODE(LOSS.LOSS_CODE,'1021',LOSS.LOSS_QTY,0))  LOSS275
     , SUM(DECODE(LOSS.LOSS_CODE,'1022',LOSS.LOSS_QTY,0))  LOSS276
     , SUM(DECODE(LOSS.LOSS_CODE,'1023',LOSS.LOSS_QTY,0))  LOSS277
     , SUM(DECODE(LOSS.LOSS_CODE,'1024',LOSS.LOSS_QTY,0))  LOSS278
     , SUM(DECODE(LOSS.LOSS_CODE,'1025',LOSS.LOSS_QTY,0))  LOSS279
     , SUM(DECODE(LOSS.LOSS_CODE,'1026',LOSS.LOSS_QTY,0))  LOSS280
     , SUM(DECODE(LOSS.LOSS_CODE,'1027',LOSS.LOSS_QTY,0))  LOSS281
     , SUM(DECODE(LOSS.LOSS_CODE,'1028',LOSS.LOSS_QTY,0))  LOSS282
     , SUM(DECODE(LOSS.LOSS_CODE,'1029',LOSS.LOSS_QTY,0))  LOSS283
     , SUM(DECODE(LOSS.LOSS_CODE,'1031',LOSS.LOSS_QTY,0))  LOSS284
     , SUM(DECODE(LOSS.LOSS_CODE,'1032',LOSS.LOSS_QTY,0))  LOSS285
     , SUM(DECODE(LOSS.LOSS_CODE,'1033',LOSS.LOSS_QTY,0))  LOSS286
     , SUM(DECODE(LOSS.LOSS_CODE,'1034',LOSS.LOSS_QTY,0))  LOSS287
     , SUM(DECODE(LOSS.LOSS_CODE,'1035',LOSS.LOSS_QTY,0))  LOSS288
     , SUM(DECODE(LOSS.LOSS_CODE,'1099',LOSS.LOSS_QTY,0))  LOSS289
     , SUM(DECODE(LOSS.LOSS_CODE,'1101',LOSS.LOSS_QTY,0))  LOSS290
     , SUM(DECODE(LOSS.LOSS_CODE,'1102',LOSS.LOSS_QTY,0))  LOSS291
     , SUM(DECODE(LOSS.LOSS_CODE,'1103',LOSS.LOSS_QTY,0))  LOSS292
     , SUM(DECODE(LOSS.LOSS_CODE,'1111',LOSS.LOSS_QTY,0))  LOSS293
     , SUM(DECODE(LOSS.LOSS_CODE,'1112',LOSS.LOSS_QTY,0))  LOSS294
     , SUM(DECODE(LOSS.LOSS_CODE,'1113',LOSS.LOSS_QTY,0))  LOSS295
     , SUM(DECODE(LOSS.LOSS_CODE,'1114',LOSS.LOSS_QTY,0))  LOSS296
     , SUM(DECODE(LOSS.LOSS_CODE,'1115',LOSS.LOSS_QTY,0))  LOSS297
     , SUM(DECODE(LOSS.LOSS_CODE,'1116',LOSS.LOSS_QTY,0))  LOSS298
     , SUM(DECODE(LOSS.LOSS_CODE,'1117',LOSS.LOSS_QTY,0))  LOSS299
     , SUM(DECODE(LOSS.LOSS_CODE,'1118',LOSS.LOSS_QTY,0))  LOSS300
     , SUM(DECODE(LOSS.LOSS_CODE,'1119',LOSS.LOSS_QTY,0))  LOSS301
     , SUM(DECODE(LOSS.LOSS_CODE,'1131',LOSS.LOSS_QTY,0))  LOSS302
     , SUM(DECODE(LOSS.LOSS_CODE,'1132',LOSS.LOSS_QTY,0))  LOSS303
     , SUM(DECODE(LOSS.LOSS_CODE,'1133',LOSS.LOSS_QTY,0))  LOSS304
     , SUM(DECODE(LOSS.LOSS_CODE,'1134',LOSS.LOSS_QTY,0))  LOSS305
     , SUM(DECODE(LOSS.LOSS_CODE,'1135',LOSS.LOSS_QTY,0))  LOSS306
     , SUM(DECODE(LOSS.LOSS_CODE,'1201',LOSS.LOSS_QTY,0))  LOSS307
     , SUM(DECODE(LOSS.LOSS_CODE,'1202',LOSS.LOSS_QTY,0))  LOSS308
     , SUM(DECODE(LOSS.LOSS_CODE,'1203',LOSS.LOSS_QTY,0))  LOSS309
     , SUM(DECODE(LOSS.LOSS_CODE,'1204',LOSS.LOSS_QTY,0))  LOSS310
     , SUM(DECODE(LOSS.LOSS_CODE,'1205',LOSS.LOSS_QTY,0))  LOSS311
     , SUM(DECODE(LOSS.LOSS_CODE,'1206',LOSS.LOSS_QTY,0))  LOSS312
     , SUM(DECODE(LOSS.LOSS_CODE,'1207',LOSS.LOSS_QTY,0))  LOSS313
     , SUM(DECODE(LOSS.LOSS_CODE,'1208',LOSS.LOSS_QTY,0))  LOSS314
     , SUM(DECODE(LOSS.LOSS_CODE,'1209',LOSS.LOSS_QTY,0))  LOSS315
     , SUM(DECODE(LOSS.LOSS_CODE,'1210',LOSS.LOSS_QTY,0))  LOSS316
     , SUM(DECODE(LOSS.LOSS_CODE,'1211',LOSS.LOSS_QTY,0))  LOSS317
     , SUM(DECODE(LOSS.LOSS_CODE,'9500',LOSS.LOSS_QTY,0))  LOSS318
     , SUM(DECODE(LOSS.LOSS_CODE,'9100',LOSS.LOSS_QTY,0))  LOSS319
     , SUM(DECODE(LOSS.LOSS_CODE,'9000',LOSS.LOSS_QTY,0))  LOSS320
     , SUM(DECODE(LOSS.LOSS_CODE,'9501',LOSS.LOSS_QTY,0))  LOSS321
     , SUM(DECODE(LOSS.LOSS_CODE,'1076',LOSS.LOSS_QTY,0))  LOSS322
     , SUM(DECODE(LOSS.LOSS_CODE,'1077',LOSS.LOSS_QTY,0))  LOSS323
     , SUM(DECODE(LOSS.LOSS_CODE,'1078',LOSS.LOSS_QTY,0))  LOSS324
     , SUM(DECODE(LOSS.LOSS_CODE,'1079',LOSS.LOSS_QTY,0))  LOSS325
     , SUM(DECODE(LOSS.LOSS_CODE,'1080',LOSS.LOSS_QTY,0))  LOSS326
     , SUM(DECODE(LOSS.LOSS_CODE,'1081',LOSS.LOSS_QTY,0))  LOSS327
     , SUM(DECODE(LOSS.LOSS_CODE,'1082',LOSS.LOSS_QTY,0))  LOSS328
     , SUM(DECODE(LOSS.LOSS_CODE,'1083',LOSS.LOSS_QTY,0))  LOSS329
     , SUM(DECODE(LOSS.LOSS_CODE,'1084',LOSS.LOSS_QTY,0))  LOSS330
     , SUM(DECODE(LOSS.LOSS_CODE,'1085',LOSS.LOSS_QTY,0))  LOSS331
     , SUM(DECODE(LOSS.LOSS_CODE,'1086',LOSS.LOSS_QTY,0))  LOSS332
     , SUM(DECODE(LOSS.LOSS_CODE,'1087',LOSS.LOSS_QTY,0))  LOSS333
     , SUM(DECODE(LOSS.LOSS_CODE,'1088',LOSS.LOSS_QTY,0))  LOSS334
     , SUM(DECODE(LOSS.LOSS_CODE,'1089',LOSS.LOSS_QTY,0))  LOSS335
     , SUM(DECODE(LOSS.LOSS_CODE,'1801',LOSS.LOSS_QTY,0))  LOSS336
     , SUM(DECODE(LOSS.LOSS_CODE,'1802',LOSS.LOSS_QTY,0))  LOSS337
     , SUM(DECODE(LOSS.LOSS_CODE,'1803',LOSS.LOSS_QTY,0))  LOSS338
     , SUM(DECODE(LOSS.LOSS_CODE,'1804',LOSS.LOSS_QTY,0))  LOSS339
     , SUM(DECODE(LOSS.LOSS_CODE,'1805',LOSS.LOSS_QTY,0))  LOSS340
     , SUM(DECODE(LOSS.LOSS_CODE,'1806',LOSS.LOSS_QTY,0))  LOSS341
     , SUM(DECODE(LOSS.LOSS_CODE,'1807',LOSS.LOSS_QTY,0))  LOSS342
     , SUM(DECODE(LOSS.LOSS_CODE,'1075',LOSS.LOSS_QTY,0))  LOSS343
     , SUM(DECODE(LOSS.LOSS_CODE,'1074',LOSS.LOSS_QTY,0))  LOSS344
     , SUM(DECODE(LOSS.LOSS_CODE,'1073',LOSS.LOSS_QTY,0))  LOSS345
     , SUM(DECODE(LOSS.LOSS_CODE,'1071',LOSS.LOSS_QTY,0))  LOSS346
     , SUM(DECODE(LOSS.LOSS_CODE,'1072',LOSS.LOSS_QTY,0))  LOSS347
     , SUM(DECODE(LOSS.LOSS_CODE,'1090',LOSS.LOSS_QTY,0))  LOSS348

  FROM ( 
        SELECT  ' ',  ' ', MAT.MAT_GRP_6, MAT.MAT_GRP_3,  ' ',  ' ',  ' ',  ' ', A.MAT_ID
             , A.LOT_ID AS LOT_ID 
             , TO_CHAR(TO_DATE(C.CREATE_TIME,'yyyymmddhh24miss')) AS IN_TIME 
             , TO_CHAR(TO_DATE(A.TRAN_TIME,'yyyymmddhh24miss')) AS SHIP_TIME 
             , ROUND((TO_DATE(A.TRAN_TIME,'yyyymmddhh24miss') - TO_DATE(C.CREATE_TIME,'yyyymmddhh24miss')),2) AS TAT 
             , (  
                SELECT MIN(QTY_1)   
                  FROM RWIPLOTHIS  
                 WHERE FACTORY = 'HMVA2'  
                   AND OLD_OPER >= 'A1000'  
                   AND LOT_ID=A.LOT_ID  
                   AND TRAN_CODE IN ('END','SHIP')    
                   AND HIST_DEL_FLAG = ' '               
               ) AS BE_OUT 
             , A.QTY_1 AS OUT_QTY 
          FROM DT A
             , MWIPMATDEF MAT
             , RWIPLOTSTS C 
         WHERE 1=1
           AND A.MAT_ID=MAT.MAT_ID 
           AND A.LOT_ID=C.LOT_ID 
           AND MAT.FACTORY = 'HMVA2' 
       ) SUMMERY
     , (
        SELECT LOT_ID
             , LOSS_CODE
             , SUM(LOSS_QTY) AS LOSS_QTY 
             , SUM(CASE WHEN OPER < 'A1000' THEN LOSS_QTY 
                        ELSE 0 
                   END) IL_LOSS_QTY 
             , SUM(CASE WHEN OPER >= 'A1000' THEN LOSS_QTY 
                        ELSE 0 
                   END) BE_LOSS_QTY 
          FROM (
                SELECT LOT_ID, OPER, LOSS_CODE, LOSS_QTY
                  FROM RWIPLOTLSM
                 WHERE 1=1
                   AND FACTORY = 'HMVA2'  
                   AND HIST_DEL_FLAG = ' '
                   AND LOT_ID IN ( 
                                  SELECT LOT_ID 
                                    FROM DT 
                                 ) 
                UNION ALL 
                SELECT /*+ INDEX (LSM, RWIPLOTLSM_IDX02) */SPL.FROM_TO_LOT_ID AS LOT_ID, OPER, LOSS_CODE, LOSS_QTY
                  FROM RWIPLOTLSM LSM
                     , (
                        SELECT LOT_ID, FROM_TO_LOT_ID 
                          FROM RWIPLOTSTS 
                         WHERE 1=1
                           AND FACTORY = 'HMVA2'  
                           AND LOT_TYPE = 'W' 
                           AND ADD_ORDER_ID_2 = 'MULTIEQP' 
                           AND FROM_TO_LOT_ID IN ( 
                                                  SELECT LOT_ID 
                                                    FROM DT 
                                                 ) 
                       ) SPL
                 WHERE 1=1
                   AND LSM.LOT_ID = SPL.LOT_ID
                   AND LSM.FACTORY = 'HMVA2'  
                   AND HIST_DEL_FLAG = ' '
               )
         GROUP BY LOT_ID,LOSS_CODE,LOSS_QTY
       ) LOSS
 WHERE SUMMERY.LOT_ID=LOSS.LOT_ID(+)
 GROUP BY  ' ',  ' ', SUMMERY.MAT_GRP_6, SUMMERY.MAT_GRP_3,  ' ',  ' ',  ' ',  ' ', SUMMERY.MAT_ID
        , SUMMERY.LOT_ID,SUMMERY.IN_TIME,SUMMERY.SHIP_TIME, SUMMERY.TAT 
        , SUMMERY.BE_OUT, SUMMERY.OUT_QTY 
 ORDER BY   ' ',  ' ', SUMMERY.MAT_GRP_6, SUMMERY.MAT_GRP_3,  ' ',  ' ',  ' ',  ' ', SUMMERY.MAT_ID,SUMMERY.LOT_ID

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
SELECT LANGUAGE_2 FROM RWEBFUNDEF WHERE FUNC_NAME = 'PRD010803'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT FACTORY Code, FAC_DESC Data
  FROM MWIPFACDEF
 WHERE FAC_GRP_5 = 'Y' 
 ORDER BY FAC_GRP_4 ASC
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT KEY_1 AS Code, DATA_1 AS Data 
  FROM MGCMTBLDAT 
 WHERE FACTORY= 'HMVA2'
   AND TABLE_NAME = 'MATERIAL_TYPE' 
   AND KEY_1 <> 'ALL' 
 ORDER BY KEY_1 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT A.MAT_ID AS PRODUCT, (SELECT DATA_1 FROM MGCMTBLDAT WHERE TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = A.MAT_GRP_1 AND ROWNUM=1) AS CUSTOMER, MAT_GRP_2 AS FAMILY, MAT_GRP_3 AS PKG, MAT_GRP_4 AS TYPE1, MAT_GRP_5 AS TYPE2, MAT_GRP_6 AS LEAD_COUNT, MAT_GRP_7 AS DENSITY, MAT_GRP_8 AS GENERATION, MAT_GRP_9 AS MAJOR_CODE, MAT_GRP_10 AS PACKAGE2 
     , MAT_DESC, MAT_TYPE 
     , MAT_CMF_1 AS PLATING, MAT_CMF_2 AS LEAD_FREE, MAT_CMF_3 AS HALOGEN_FREE, MAT_CMF_4 AS STD_MG_QTY, MAT_CMF_5 AS STD_SP_QTY 
     , MAT_CMF_6 AS MA_RULE, MAT_CMF_7 AS CUSTOMER_DEVICE, MAT_CMF_8 AS SALES_CODE, MAT_CMF_9 AS BODY_SIZE, MAT_CMF_10 AS PIN_TYPE 
     , MAT_CMF_11 AS PACK_CODE, MAT_CMF_12 AS EMP_NO, MAT_CMF_13 AS NET_DIE, MAT_CMF_14 AS WF_INCH 
     , FIRST_FLOW, LAST_FLOW, VENDOR_MAT_ID AS ERP_CODE_BG, BASE_MAT_ID AS ERP_CODE_ASSY_TEST 
     , LF_MATERIAL, BD_DIAGRAM, MK_DIAGRAM 
     , GW_1, CAP_1, EMC_1, SB, TRAY, LM_1, BG_1, WM_TYPE1, BLADE_1 
     , RESV_FIELD_1 AS CUT_METHOD, BLADE_8 AS PMC_TIME 
     , BOM_LF_PB, BOM_GW_CW, BOM_LM, BOM_WBL, BOM_AE, BOM_NT, BOM_MC, BOM_SB, BOM_PKG_SAW 
     , UNIT, ADH_8 AS POLISHING, ADH_6 AS GDP, ADH_5 AS NCH, ADH_9 AS GEMAN 
     , (SELECT SUM(DECODE(TCD_CMF_2, ' ', 0, TCD_CMF_2)) FROM CWIPTCDDEF@RPTTOMES WHERE FACTORY = A.FACTORY AND MAT_ID = A.MAT_ID) AS WIRE_COUNT 
  FROM MWIPMATDEF A 
     , CLOTCRDDAT@RPTTOMES B 
     , ( 
        SELECT MAT_ID, MAX(UNIT) AS UNIT 
          FROM ( 
                SELECT DISTINCT B.PARTNUMBER AS MAT_ID, A.C_MAT_CMF_4 AS UNIT 
                  FROM CWIPMATDEF@RPTTOMES A 
                     , CWIPBOMDEF B 
                 WHERE 1=1 
                   AND A.MAT_ID = B.MATCODE 
                   AND A.FACTORY = 'HMVA2' 
                   AND B.RESV_FIELD_2 IN ('LF','PB') 
                   AND B.RESV_FLAG_1 = 'Y' 
                   AND A.C_MAT_CMF_4 <> ' ' 
               ) 
         GROUP BY MAT_ID 
       ) C
     , ( 
        SELECT MAT_ID 
             , MAX(CASE WHEN RESV_FIELD_2 IN ('LF', 'PB') THEN MATCODE ELSE ' ' END) BOM_LF_PB 
             , MAX(CASE WHEN RESV_FIELD_2 IN ('GW', 'CW') THEN MATCODE ELSE ' ' END) BOM_GW_CW 
             , MAX(CASE WHEN RESV_FIELD_2 = 'LM' THEN MATCODE ELSE ' ' END) BOM_LM 
             , MAX(CASE WHEN RESV_FIELD_2 = 'WBL' THEN MATCODE ELSE ' ' END) BOM_WBL 
             , MAX(CASE WHEN RESV_FIELD_2 = 'AE' THEN MATCODE ELSE ' ' END) BOM_AE 
             , MAX(CASE WHEN RESV_FIELD_2 = 'NT' THEN MATCODE ELSE ' ' END) BOM_NT 
             , MAX(CASE WHEN RESV_FIELD_2 = 'MC' THEN MATCODE ELSE ' ' END) BOM_MC 
             , MAX(CASE WHEN RESV_FIELD_2 = 'SB' THEN MATCODE ELSE ' ' END) BOM_SB 
             , MAX(CASE WHEN RESV_FIELD_2 = 'BD' THEN MATCODE ELSE ' ' END) BOM_PKG_SAW 
          FROM ( 
                SELECT MAT_ID, RESV_FIELD_2 
                     , MAX(MATCODE) KEEP(DENSE_RANK FIRST ORDER BY CREATE_DT DESC) MATCODE 
                  FROM ( 
                        SELECT PARTNUMBER AS MAT_ID, MATCODE
                             , CASE WHEN RESV_FIELD_2 = 'TE' AND STEPID = 'A0020' THEN 'LM'
                                    WHEN RESV_FIELD_2 = 'TE' AND STEPID = 'A0040' THEN 'WBL'
                                    ELSE RESV_FIELD_2
                               END AS RESV_FIELD_2
                             , CREATE_DT 
                          FROM CWIPBOMDEF 
                         WHERE 1=1 
                           AND RESV_FLAG_1 = 'Y' 
                           AND (RESV_FIELD_2 IN ('LF', 'PB', 'GW', 'CW', 'TE', 'AE', 'NT', 'MC', 'SB') OR (RESV_FIELD_2 = 'BD' AND STEPID = 'A1750'))
                       ) 
                 GROUP BY MAT_ID, RESV_FIELD_2 
               ) 
         GROUP BY MAT_ID 
       ) D
 WHERE 1=1 
   AND A.FACTORY = B.FACTORY(+)
   AND A.MAT_ID = B.MAT_ID(+)
   AND A.MAT_ID = C.MAT_ID(+)
   AND A.MAT_ID = D.MAT_ID(+)
   AND A.FACTORY = 'HMVA2'
   AND A.DELETE_FLAG = ' ' 
   AND A.MAT_ID LIKE '%' 
   AND A.MAT_TYPE = 'FG'
 ORDER BY A.MAT_ID, A.MAT_GRP_1, A.MAT_GRP_2, A.MAT_GRP_3, A.MAT_GRP_4, A.MAT_GRP_5, A.MAT_GRP_6, A.MAT_GRP_7, A.MAT_GRP_8, A.MAT_GRP_9, A.MAT_GRP_10 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
 SELECT PLAN_WEEK V1    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_DATE = TO_CHAR(SYSDATE,'yyyymmdd')      AND ROWNUM = 1  
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT LANGUAGE_2 FROM RWEBFUNDEF WHERE FUNC_NAME = 'PRD010603'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT FACTORY Code, FAC_DESC Data
  FROM MWIPFACDEF
 WHERE FAC_GRP_5 = 'Y' 
 ORDER BY FAC_GRP_4 ASC
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT (SELECT DATA_1 FROM MGCMTBLDAT WHERE TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = A.MAT_GRP_1 AND ROWNUM=1) AS CUSTOMER,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', A.MAT_CMF_10, A.MAT_ID,  ' ',  ' ' 
     , A.INVOICE_NO
     , A.LOT_CMF_11 
     , A.LOT_ID
     , A.TRAN_TIME             
     , A.WORK_DATE
     , A.LOT_CMF_5
     , SUM(NVL(A.QTY_1,0)) +  SUM(NVL(LOSS_QTY,0)) - SUM(NVL(D.TOTAL_BONUS_QTY,0)) AS IN_QTY 
     , NVL(SUM(A.QTY_1),0) AS SHIP_QTY  
     , DECODE( NVL(SUM(A.QTY_1), 0), 0, 0, ROUND((SUM(A.QTY_1)/   (SUM(NVL(A.QTY_1,0)) + SUM(NVL(LOSS_QTY,0)) - SUM(NVL(D.TOTAL_BONUS_QTY,0))))*100,3)) AS YIELD
     , NVL(ROUND(SUM(TO_DATE(A.TRAN_TIME, 'YYYYMMDDHH24MISS') - TO_DATE(A.LOT_CMF_14, 'YYYYMMDDHH24MISS')) * 1,2), 0) AS TAT
     , 0 AS WAFER_QTY 
     , SUM(NVL(C.LOSS_QTY,0)) 
     , SUM(NVL(C.CV100,0))
     , SUM(NVL(C.CV200,0))
     , SUM(NVL(C.CV991,0))
     , SUM(NVL(C.BCV,0))
     , SUM(NVL(C.ECV,0))
     , SUM(NVL(C.HBCV,0))
     , SUM(NVL(C.HDCV,0))
     , SUM(NVL(C.HECV,0))
     , SUM(NVL(C.HQCV,0))
     , SUM(NVL(C.HSCV,0))
     , SUM(NVL(D.TOTAL_BONUS_QTY,0)) AS BONUS
     , A.NCF
     , A.NCH
     , A.LOT_CMF_10
     , DECODE(A.CREATE_CODE,'PROD', '','Y') AS RETN
     , A.LOT_CMF_3
  FROM (
        SELECT B.MAT_GRP_1, B.MAT_GRP_2, B.MAT_GRP_3, B.MAT_GRP_4, B.MAT_GRP_5, B.MAT_GRP_6, B.MAT_GRP_7, B.MAT_GRP_8, B.MAT_CMF_10, A.MAT_ID, B.MAT_CMF_7, A.LOT_CMF_4 
             , A.FACTORY
             , A.INVOICE_NO
             , A.LOT_CMF_10 
             , A.LOT_CMF_11 
             , A.LOT_CMF_14 
             , A.LOT_ID
             , NVL(SUM(A.QTY_1),0) QTY_1
             , NVL(SUM(A.QTY_2),0) QTY_2
             , (SELECT COUNT(A.LOT_ID) FROM CWIPLOTWFR WHERE LOT_ID = A.LOT_ID) AS WAFER_QTY
             , GET_WORK_DATE(A.TRAN_TIME,'D') AS WORK_DATE
             , A.TRAN_TIME     
             , A.LOT_CMF_5     
             , NVL(SUM(A.IN_QTY),0) IN_QTY
             , MESMGR.F_GET_MCP_NCF_SINGLE@RPTTOMES(A.LOT_ID) AS NCF
             , MESMGR.F_GET_SEC_NCX@RPTTOMES(A.FACTORY, 'NCHCODE', A.LOT_ID, 'V') AS NCH
             , A.CREATE_CODE
             , A.CREATE_TIME
             , A.RESV_FIELD_1
             , A.LOT_CMF_3
          FROM (
                SELECT FROM_FACTORY AS FACTORY
                     , INVOICE_NO
                     , MAT_ID
                     , LOT_ID
                     , SHIP_QTY_1 AS QTY_1
                     , SHIP_QTY_2 AS QTY_2 
                     , TRAN_TIME   
                     , LOT_CMF_3   
                     , LOT_CMF_4   
                     , LOT_CMF_5   
                     , LOT_CMF_10   
                     , LOT_CMF_11   
                     , LOT_CMF_14   
                     , IN_QTY 
                     , CREATE_CODE 
                     , CREATE_TIME 
                     , RESV_FIELD_1 
                  FROM VWIPSHPLOT   
                 WHERE 1=1   
                   AND FROM_FACTORY  = 'HMVA2' 
                   AND OWNER_CODE = 'PROD' 
                   AND TO_FACTORY IN ('CUSTOMER', 'HMKT1') 
                   AND LOT_TYPE = 'W' 
                   AND FROM_OPER IN ('AZ010','AZ009','TZ010','EZ010','SZ010','F0000', 'BZ010')
                   AND TRAN_TIME BETWEEN '20200331220000' AND '20200409215959' 
                   AND LOT_CMF_5 LIKE 'P%'
             ) A 
             , MWIPMATDEF@RPTTOMES B 
         WHERE 1=1 
           AND A.MAT_ID = B.MAT_ID(+) 
           AND A.FACTORY = B.FACTORY(+) 
           AND B.MAT_VER(+) = 1 
         GROUP BY B.MAT_GRP_1, B.MAT_GRP_2, B.MAT_GRP_3, B.MAT_GRP_4, B.MAT_GRP_5, B.MAT_GRP_6, B.MAT_GRP_7, B.MAT_GRP_8, B.MAT_CMF_10, A.MAT_ID, B.MAT_CMF_7
                , A.FACTORY, A.INVOICE_NO, A.LOT_CMF_10, A.LOT_CMF_11, A.LOT_CMF_14, A.LOT_ID, A.TRAN_TIME,  A.LOT_CMF_4, A.LOT_CMF_5, A.CREATE_CODE, A.CREATE_TIME, A.RESV_FIELD_1, A.LOT_CMF_3
       ) A
       , ( 
          SELECT FACTORY, MAT_VER, LOT_ID, SUM(LOSS_QTY) AS LOSS_QTY, SUM(CV100) CV100, SUM(CV200) CV200, SUM(CV991) CV991 , SUM(BCV) BCV, SUM(ECV) ECV, SUM(HBCV) HBCV, SUM(HDCV) HDCV, SUM(HECV) HECV, SUM(HQCV) HQCV, SUM(HSCV) HSCV
            FROM ( 
                  SELECT FACTORY, MAT_ID, MAT_VER, LOT_ID   
                       , SUM(DECODE(LOSS_CODE, '100', LOSS_QTY, 0)) AS CV100  
                       , SUM(DECODE(LOSS_CODE, '200', LOSS_QTY, 0)) AS CV200  
                       , SUM(DECODE(LOSS_CODE, '991', LOSS_QTY, 0)) AS CV991  
                       , SUM(DECODE(LOSS_CODE, '992-BCV', LOSS_QTY, 0)) AS BCV  
                       , SUM(DECODE(LOSS_CODE, '992-ECV', LOSS_QTY, 0)) AS ECV  
                       , SUM(DECODE(LOSS_CODE, '992-HBCV', LOSS_QTY, 0)) AS HBCV  
                       , SUM(DECODE(LOSS_CODE, '992-HDCV', LOSS_QTY, 0)) AS HDCV  
                       , SUM(DECODE(LOSS_CODE, '992-HECV', LOSS_QTY, 0)) AS HECV  
                       , SUM(DECODE(LOSS_CODE, '992-HQCV', LOSS_QTY, 0)) AS HQCV  
                       , SUM(DECODE(LOSS_CODE, '992-HSCV', LOSS_QTY, 0)) AS HSCV  
                       , SUM(LOSS_QTY) AS LOSS_QTY  
                    FROM RWIPLOTLSM  
                   WHERE HIST_DEL_FLAG= ' '  
                     AND LOT_ID IN ( 
                                    SELECT LOT_ID
                                      FROM VWIPSHPLOT   
                                     WHERE 1=1   
                                       AND FROM_FACTORY  = 'HMVA2' 
                                       AND OWNER_CODE = 'PROD' 
                                       AND TO_FACTORY IN ('CUSTOMER', 'HMKT1') 
                                       AND LOT_TYPE = 'W' 
                                       AND FROM_OPER IN ('AZ010','AZ009','TZ010','EZ010','SZ010','F0000', 'BZ010')
                                       AND TRAN_TIME BETWEEN '20200331220000' AND '20200409215959' 
                                       AND LOT_CMF_5 LIKE 'P%'
                                   ) 
                   GROUP BY FACTORY, MAT_ID, MAT_VER, LOT_ID 
                 )  
           GROUP BY FACTORY, MAT_VER, LOT_ID
         ) C  
         , RWIPLOTBNS D 
     WHERE 1=1  
       AND A.FACTORY  = 'HMVA2' 
       AND A.FACTORY = C.FACTORY(+)  
       AND A.FACTORY = D.FACTORY(+) 
       AND A.LOT_ID = C.LOT_ID(+) 
       AND A.LOT_ID = D.LOT_ID(+) 
       AND C.MAT_VER(+)=1   
       AND D.MAT_VER(+)=1  
 GROUP BY A.MAT_GRP_1,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', A.MAT_CMF_10, A.MAT_ID,  ' ',  ' ', A.MAT_ID 
        , A.INVOICE_NO, A.LOT_CMF_11, A.LOT_ID, A.TRAN_TIME, A.WORK_DATE, A.LOT_CMF_5, A.NCF, A.NCH, A.LOT_CMF_10,A.CREATE_CODE, A.LOT_CMF_3  
 ORDER BY A.MAT_GRP_1,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', A.MAT_CMF_10, A.MAT_ID,  ' ',  ' ', A.MAT_ID 
        , A.INVOICE_NO, A.LOT_CMF_11, A.LOT_ID, A.TRAN_TIME, A.WORK_DATE, A.LOT_CMF_5, A.NCF, A.NCH, A.LOT_CMF_10  

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM','HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM','HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM','HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT PLAN_WEEK V1    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('HM', 'SYSTEM')     AND SYS_DATE = TO_CHAR(SYSDATE,'yyyymmdd')      AND ROWNUM = 1  
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM','HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM','HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT PLAN_WEEK V1    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_DATE = TO_CHAR(SYSDATE,'yyyymmdd')      AND ROWNUM = 1  
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT LANGUAGE_2 FROM RWEBFUNDEF WHERE FUNC_NAME = 'RAS020208'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT FACTORY Code, FAC_DESC Data
  FROM MWIPFACDEF
 WHERE FAC_GRP_5 = 'Y' 
 ORDER BY FAC_GRP_4 ASC
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT TEAM,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', RES_ID
     , CASE WHEN NVL(SUM(VALUE_RUN_TIME), 0) = 0 THEN 0 
            WHEN (NVL(SUM(RUN_TIME), 1440) - (NVL(SUM(TIME_SUM), 0) / 60)) = 0 THEN 0 
            ELSE ROUND(((NVL(SUM(RUN_TIME), 1440) / DECODE(SUM(TOTAL_RUN_TIME), 0, 1440, SUM(TOTAL_RUN_TIME))) * 100) * (NVL(ROUND((SUM(VALUE_RUN_TIME) / DECODE(SUM(RUN_TIME), 0, 1440, SUM(RUN_TIME))) * 100, 2), 0)) / 100, 2) 
       END AS TOTAL_PERCENT 
     , CASE WHEN NVL(SUM(VALUE_RUN_TIME), 0) = 0 THEN 0 
            WHEN NVL(SUM(RUN_TIME),0) = 0 THEN 0 
            ELSE NVL(ROUND((SUM(VALUE_RUN_TIME) / DECODE(SUM(RUN_TIME), 0, 1440, SUM(RUN_TIME))) * 100, 2), 0) 
       END AS ABILITY_PERCENT 
     , ROUND((NVL(SUM(RUN_TIME), 1440) / NVL(SUM(TOTAL_RUN_TIME), 1440)) * 100, 2) AS TIME_PERCENT 
     , ROUND((NVL(SUM(REALTIME), 1440) / NVL(SUM(TOTAL_RUN_TIME), 1440)) * 100, 2) AS AUTO_TIME_PERCENT 
     , ROUND((NVL(SUM(TOTAL_RUN_TIME), 1440) - SUM(DOWN_TIME_RUNDOWN)) / NVL(SUM(TOTAL_RUN_TIME), 1440) * 100, 2) AS LOSS_PERCENT 
     , SUM(TOTAL_RUN_TIME) AS TOTAL_RUN_TIME 
     , SUM(VALUE_RUN_TIME) AS VALUE_RUN_TIME
     , SUM(RUN_TIME) AS RUN_TIME
     , ROUND(SUM(REALTIME), 2) AS AUTO_REALTIME
     , SUM(DOWN_TIME) AS DOWN_TIME
     , SUM(QTY) AS QTY
     , ROUND(CASE WHEN SUM(TOTAL_RUN_TIME) = SUM(DOWN_TIME) THEN 0 
                  WHEN NVL(SUM(RUN_TIME),0) = 0 THEN 0  
                  WHEN SUM(DOWN_CNT_BM) = 0 THEN SUM(TOTAL_RUN_TIME) 
                  WHEN SUM(DOWN_CNT_BM) = 1 THEN (SUM(TOTAL_RUN_TIME) - SUM(DOWN_TIME)) / 2 
                  ELSE (SUM(TOTAL_RUN_TIME) - SUM(DOWN_TIME)) / SUM(DOWN_CNT_BM) 
             END, 0) AS MTBF 
     , SUM(MTTC) AS MTTC
     , ROUND(SUM(RAITO_BM) / SUM(RAITO_RUN_TIME)*100,2) AS RAITO_BM
     , ROUND(SUM(RAITO_RUNDOWN) / SUM(RAITO_RUN_TIME)*100,2) AS RAITO_BM
     , ROUND(SUM(RAITO_PM) / SUM(RAITO_RUN_TIME)*100,2) AS RAITO_BM
     , ROUND(SUM(RAITO_DEVCHG) / SUM(RAITO_RUN_TIME)*100,2) AS RAITO_BM
     , ROUND(SUM(RAITO_ENGDOWN) / SUM(RAITO_RUN_TIME)*100,2) AS RAITO_BM
     , ROUND(SUM(RAITO_SUPERDOWN) / SUM(RAITO_RUN_TIME)*100,2) AS RAITO_BM
     , ROUND(SUM(RAITO_UTILDOWN) / SUM(RAITO_RUN_TIME)*100,2) AS RAITO_BM
     , ROUND(SUM(RAITO_ETC) / SUM(RAITO_RUN_TIME)*100,2) AS RAITO_BM
     , SUM(DOWN_TIME_BM)
     , SUM(DOWN_TIME_RUNDOWN)
     , SUM(DOWN_TIME_PM)
     , SUM(DOWN_TIME_DEVCHG)
     , SUM(DOWN_TIME_ENGDOWN)
     , SUM(DOWN_TIME_SUPERDOWN)
     , SUM(DOWN_TIME_UTILDOWN)
     , SUM(DOWN_TIME_ETC)
     , SUM(DOWN_CNT_BM)
     , SUM(DOWN_CNT_RUNDOWN)
     , SUM(DOWN_CNT_PM)
     , SUM(DOWN_CNT_DEVCHG)
     , SUM(DOWN_CNT_ENGDOWN)
     , SUM(DOWN_CNT_SUPERDOWN)
     , SUM(DOWN_CNT_UTILDOWN)
     , SUM(DOWN_CNT_ETC)
     , ROUND(CASE WHEN SUM(TOTAL_RUN_TIME) = SUM(DOWN_TIME) THEN 0 
                  WHEN SUM(DOWN_CNT_H) = 0 THEN SUM(RUN_TIME) 
                  ELSE (SUM(TOTAL_RUN_TIME) - SUM(DOWN_TIME)) / SUM(DOWN_CNT_H) 
             END, 0) AS MTBF_TEST 
  FROM (
        SELECT NVL((SELECT DATA_1 FROM MGCMTBLDAT WHERE FACTORY = RES.FACTORY AND TABLE_NAME = 'H_DEPARTMENT' AND ROWNUM=1 AND KEY_1 = RES.RES_GRP_1), '-') AS TEAM 
             , NVL((SELECT DATA_1 FROM MGCMTBLDAT WHERE FACTORY = RES.FACTORY AND TABLE_NAME = 'H_DEPARTMENT' AND ROWNUM=1 AND KEY_1 = RES.RES_GRP_2), '-') AS PART
             , RES.RES_GRP_3 AS EQP_TYPE, RES.RES_GRP_5 AS MAKER, RES.RES_GRP_6 AS MODEL, RES.RES_ID AS RES_ID, RES.SUB_AREA_ID
             , RES_CMF_1 AS SERIAL, RES_CMF_4 AS ASSET_TYPE, RES_CMF_19 AS OLD_NEW
             , CASE WHEN SUM(NVL(MOV.VALUE_RUN_TIME,0)) = 0 THEN 0
                    WHEN (SUM(NVL(MOV.RUN_TIME,1440)) - (SUM(NVL(DWH.TIME_SUM,0)) / 60)) = 0 THEN 0
                    ELSE ROUND((ROUND((SUM(MOV.VALUE_RUN_TIME) / (SUM(NVL(MOV.RUN_TIME,1440)) - NVL((SUM(DWH.TIME_SUM)/60),0)))*100,2) * ROUND(((SUM(NVL(MOV.RUN_TIME,1440)) - (SUM(NVL(DWH.TIME_SUM,0))/60)) / SUM(NVL(MOV.RUN_TIME,1440)))*100,2))/100,2)
               END  AS TOTAL_PERCENT
             , CASE WHEN SUM(NVL(MOV.VALUE_RUN_TIME,0)) = 0 THEN 0
                    WHEN SUM(NVL(MOV.RUN_TIME,1440)) - (SUM(NVL(DWH.TIME_SUM,0))/60) = 0 THEN 0
                    ELSE NVL(ROUND((SUM(MOV.VALUE_RUN_TIME) / (SUM(NVL(MOV.RUN_TIME,1440)) - NVL((SUM(DWH.TIME_SUM)/60),0)))*100,2),0)
               END  AS ABILITY_PERCENT
             , ROUND(((SUM(NVL(MOV.RUN_TIME,1440)) - NVL((SUM(TIME_SUM)/60),0)) / SUM(NVL(MOV.RUN_TIME,1440)))*100,2) AS TIME_PERCENT
             , DECODE(SUM(DWH.DOWN_TIME_RUNDOWN),0,100, ROUND((((SUM(NVL(MOV.RUN_TIME,1440)) - SUM(DWH.DOWN_TIME_RUNDOWN)))/SUM(NVL(MOV.RUN_TIME,1440))*100),2)) AS LOSS_PERCENT
             , DECODE(NVL(MOV.RUN_TIME,1440),'', 1440, NVL(MOV.RUN_TIME,1440)) AS TOTAL_RUN_TIME
             , NVL(SUM(MOV.VALUE_RUN_TIME),0) AS VALUE_RUN_TIME
             , CASE WHEN SUM(NVL(MOV.RUN_TIME,0)) = 0 THEN 0
                    ELSE ROUND(SUM(NVL(MOV.RUN_TIME,0)) - NVL(ROUND((SUM(DWH.TIME_SUM)/60),2),0),2)
               END AS RUN_TIME
             , NVL(ROUND((SUM(DWH.TIME_SUM)/60),2),0) AS DOWN_TIME
             , NVL(SUM(MOV.QTY),0) AS QTY
             , DECODE(SUM(NVL(DWH.DOWN_CNT_BM,0)),0,0,ROUND((SUM(NVL(MOV.RUN_TIME,1440)) - (SUM(DWH.TIME_SUM)/60))/(SUM(DWH.DOWN_CNT_BM)+SUM(DWH.DOWN_CNT_PM) + SUM(DWH.DOWN_CNT_ETC)),2)) AS MTBF
             , DECODE(SUM(NVL(DWH.DOWN_CNT_DEVCHG,0)),0,0,ROUND((SUM(DWH.DOWN_TIME_DEVCHG)) / SUM(DWH.DOWN_CNT_DEVCHG),2)) AS MTTC
             , SUM(NVL(DWH.RAITO_BM,0)) AS RAITO_BM
             , SUM(NVL(MOV.RUN_TIME,1440)) AS RAITO_RUN_TIME
             , SUM(NVL(DWH.RAITO_RUNDOWN,0)) AS RAITO_RUNDOWN
             , SUM(NVL(DWH.RAITO_PM,0)) AS RAITO_PM
             , SUM(NVL(DWH.RAITO_DEVCHG,0)) AS RAITO_DEVCHG
             , SUM(NVL(DWH.RAITO_ENGDOWN,0)) AS RAITO_ENGDOWN
             , SUM(NVL(DWH.RAITO_SUPERDOWN,0)) AS RAITO_SUPERDOWN
             , SUM(NVL(DWH.RAITO_UTILDOWN,0)) AS RAITO_UTILDOWN
             , SUM(NVL(DWH.RAITO_ETC,0)) AS RAITO_ETC
             , SUM(NVL(DWH.DOWN_TIME_BM,0)) AS DOWN_TIME_BM
             , SUM(NVL(DWH.DOWN_TIME_RUNDOWN,0)) AS DOWN_TIME_RUNDOWN
             , SUM(NVL(DWH.DOWN_TIME_PM,0)) AS DOWN_TIME_PM
             , SUM(NVL(DWH.DOWN_TIME_DEVCHG,0)) AS DOWN_TIME_DEVCHG
             , SUM(NVL(DWH.DOWN_TIME_ENGDOWN,0)) AS DOWN_TIME_ENGDOWN
             , SUM(NVL(DWH.DOWN_TIME_SUPERDOWN,0)) AS DOWN_TIME_SUPERDOWN
             , SUM(NVL(DWH.DOWN_TIME_UTILDOWN,0)) AS DOWN_TIME_UTILDOWN
             , SUM(NVL(DWH.DOWN_TIME_ETC,0)) AS DOWN_TIME_ETC
             , SUM(NVL(TIME_SUM,0)) AS TIME_SUM 
             , SUM(NVL(DWH.DOWN_CNT_BM,0)) AS DOWN_CNT_BM
             , SUM(NVL(DWH.DOWN_CNT_RUNDOWN,0)) AS DOWN_CNT_RUNDOWN
             , SUM(NVL(DWH.DOWN_CNT_PM,0)) AS DOWN_CNT_PM
             , SUM(NVL(DWH.DOWN_CNT_DEVCHG,0)) AS DOWN_CNT_DEVCHG
             , SUM(NVL(DWH.DOWN_CNT_ENGDOWN,0)) AS DOWN_CNT_ENGDOWN
             , SUM(NVL(DWH.DOWN_CNT_SUPERDOWN,0)) AS DOWN_CNT_SUPERDOWN
             , SUM(NVL(DWH.DOWN_CNT_UTILDOWN,0)) AS DOWN_CNT_UTILDOWN
             , SUM(NVL(DWH.DOWN_CNT_ETC,0)) AS DOWN_CNT_ETC
             , SUM(NVL(DWH.DOWN_CNT_H,0)) + SUM(NVL(DWH.DOWN_CNT_BM,0)) AS DOWN_CNT_H
             , SUM(NVL(RAL.RUN_TIME/60,0)) AS REALTIME
          FROM (
                SELECT FACTORY,RES_ID
                     , SUM(DECODE(DOWN_EVENT_ID, 'BM',TIME_SUM/60, 0)) AS RAITO_BM
                     , SUM(DECODE(DOWN_EVENT_ID, 'RUNDOWN', TIME_SUM/60, 0)) AS RAITO_RUNDOWN
                     , SUM(DECODE(DOWN_EVENT_ID, 'PM',TIME_SUM/60, 0)) AS RAITO_PM
                     , SUM(DECODE(DOWN_EVENT_ID, 'DEVCHG', TIME_SUM/60, 0)) AS RAITO_DEVCHG
                     , SUM(DECODE(DOWN_EVENT_ID, 'ENGDOWN', TIME_SUM/60, 0)) AS RAITO_ENGDOWN
                     , SUM(DECODE(DOWN_EVENT_ID, 'SUPERDOWN', TIME_SUM/60, 0)) AS RAITO_SUPERDOWN
                     , SUM(DECODE(DOWN_EVENT_ID, 'UTILDOWN', TIME_SUM/60, 0)) AS RAITO_UTILDOWN
                     , SUM(DECODE(DOWN_EVENT_ID, 'ETC', TIME_SUM/60, 0)) AS RAITO_ETC
                     , ROUND(SUM(DECODE(DOWN_EVENT_ID, 'BM', TIME_SUM/60, 0)), 2) AS DOWN_TIME_BM
                     , ROUND(SUM(DECODE(DOWN_EVENT_ID, 'RUNDOWN', TIME_SUM/60, 0)), 2) AS DOWN_TIME_RUNDOWN
                     , ROUND(SUM(DECODE(DOWN_EVENT_ID, 'PM', TIME_SUM/60, 0)), 2) AS DOWN_TIME_PM
                     , ROUND(SUM(DECODE(DOWN_EVENT_ID, 'DEVCHG', TIME_SUM/60, 0)), 2) AS DOWN_TIME_DEVCHG
                     , ROUND(SUM(DECODE(DOWN_EVENT_ID, 'ENGDOWN', TIME_SUM/60, 0)), 2) AS DOWN_TIME_ENGDOWN
                     , ROUND(SUM(DECODE(DOWN_EVENT_ID, 'SUPERDOWN', TIME_SUM/60, 0)), 2) AS DOWN_TIME_SUPERDOWN
                     , ROUND(SUM(DECODE(DOWN_EVENT_ID, 'UTILDOWN', TIME_SUM/60, 0)), 2) AS DOWN_TIME_UTILDOWN
                     , ROUND(SUM(DECODE(DOWN_EVENT_ID, 'ETC', TIME_SUM/60, 0)), 2) AS DOWN_TIME_ETC
                     , SUM(TIME_SUM) AS TIME_SUM
                     , SUM(DECODE(DOWN_EVENT_ID, 'BM', DOWN_CNT, 0)) AS DOWN_CNT_BM
                     , SUM(DECODE(DOWN_EVENT_ID, 'RUNDOWN', DOWN_CNT, 0)) AS DOWN_CNT_RUNDOWN
                     , SUM(DECODE(DOWN_EVENT_ID, 'PM', DOWN_CNT, 0)) AS DOWN_CNT_PM
                     , SUM(DECODE(DOWN_EVENT_ID, 'DEVCHG', DOWN_CNT, 0)) AS DOWN_CNT_DEVCHG
                     , SUM(DECODE(DOWN_EVENT_ID, 'ENGDOWN', DOWN_CNT, 0)) AS DOWN_CNT_ENGDOWN
                     , SUM(DECODE(DOWN_EVENT_ID, 'SUPERDOWN', DOWN_CNT, 0)) AS DOWN_CNT_SUPERDOWN
                     , SUM(DECODE(DOWN_EVENT_ID, 'UTILDOWN', DOWN_CNT, 0)) AS DOWN_CNT_UTILDOWN
                     , SUM(DECODE(DOWN_EVENT_ID, 'ETC', DOWN_CNT, 0)) AS DOWN_CNT_ETC
                     , SUM(DECODE(H_CODE, 'H', DOWN_CNT, 0)) AS DOWN_CNT_H
                  FROM (
                        SELECT MNT.FACTORY,MNT.RES_ID, MNT.MAINT_CODE
                             , CASE WHEN SUBSTR(MAINT_CODE,0,2) IN ('H1','H2','H3','H4') THEN 'H' END AS H_CODE
                             , CASE WHEN SUBSTR(MAINT_CODE,0,1)='A' THEN 'BM'
                                    WHEN SUBSTR(MAINT_CODE,0,1)='B' THEN 'RUNDOWN'
                                    WHEN SUBSTR(MAINT_CODE,0,1)='C' THEN 'PM'
                                    WHEN SUBSTR(MAINT_CODE,0,1)='D' THEN 'DEVCHG'
                                    WHEN SUBSTR(MAINT_CODE,0,1)='E' THEN 'ENGDOWN'
                                    WHEN SUBSTR(MAINT_CODE,0,1)='F' THEN 'SUPERDOWN'
                                    WHEN SUBSTR(MAINT_CODE,0,1)='G' THEN 'UTILDOWN'
                                    WHEN SUBSTR(MAINT_CODE,0,1)='H' THEN 'ETC'
                               END AS DOWN_EVENT_ID,NVL(SUM(TIME_SUM),0) AS TIME_SUM
                             , DECODE(SUBSTR(MAINT_CODE,0,1) 
                                      , 'B', NVL(DECODE(MAINT_STEP,'D_WAIT',SUM(FREQUENCY)),0)
                                      , 'D', NVL(DECODE(MAINT_STEP,'D_WAIT',SUM(FREQUENCY)),0) 
                                      , 'E', NVL(DECODE(MAINT_STEP,'D_WAIT',SUM(FREQUENCY)),0) 
                                      , 'F', NVL(DECODE(MAINT_STEP,'D_WAIT',SUM(FREQUENCY)),0)
                                      , 'G', NVL(DECODE(MAINT_STEP,'D_WAIT',SUM(FREQUENCY)),0)
                                      ,  NVL(DECODE(MAINT_STEP,'D_MAINT',SUM(FREQUENCY)),0)
                               ) AS DOWN_CNT
                          FROM CSUMRESMNT@RPTTOMES MNT
                             , MRASRESDEF RES
                         WHERE 1=1
                           AND MNT.FACTORY = RES.FACTORY
                           AND MNT.RES_ID = RES.RES_ID
                           AND RES.RES_CMF_20 < '20200407220000'
                           AND MNT.FACTORY  = 'HMVA2' 
                           AND MNT.WORK_DATE BETWEEN '20200408' AND '20200408' 
                           AND MNT.MAINT_CODE NOT IN ('D126','D216','D316')
                         GROUP BY MNT.FACTORY, MNT.RES_ID, MNT.MAINT_CODE, MNT.MAINT_STEP
                       ) RES
                 GROUP BY FACTORY, RES_ID
                 ORDER BY RES_ID
               ) DWH
             , (
                SELECT RES_ID,SUM(RUN_TIME) AS RUN_TIME 
                  FROM CSUMRASTIM@RPTTOMES
                 WHERE 1 = 1
                   AND WORK_DATE BETWEEN '20200408' AND '20200408'
                 GROUP BY RES_ID 
               ) RAL
             , (
                SELECT MOV.FACTORY
                     , MOV.RES_ID
                     , SUM(LOSS_QTY) AS LOSS_QTY
                     , 1440 AS RUN_TIME
                     , SUM(VALUE_RUN_TIME) AS VALUE_RUN_TIME
                     , SUM(QTY + LOSS_QTY) AS QTY
                  FROM CSUMRASMOV@RPTTOMES MOV
                     , MWIPMATDEF MAT 
                 WHERE 1=1
                   AND MOV.FACTORY = MAT.FACTORY 
                   AND MOV.MAT_ID = MAT.MAT_ID 
                   AND MOV.FACTORY = 'HMVA2'
                   AND MOV.WORK_DAY BETWEEN '20200408' AND '20200408'
                   AND MOV.OPER LIKE '%'
                 GROUP BY MOV.FACTORY,MOV.RES_ID
               ) MOV
             , MRASRESDEF RES
         WHERE 1=1 
           AND RES.FACTORY = DWH.FACTORY(+)  
           AND RES.FACTORY = MOV.FACTORY(+)   
           AND RES.RES_ID = DWH.RES_ID(+)  
           AND RES.RES_ID = RAL.RES_ID(+)  
           AND RES.RES_ID = MOV.RES_ID(+)   
           AND RES.FACTORY  = 'HMVA2' 
           AND RES.RES_CMF_20 < '20200407220000'   
           AND RES.RES_TYPE IN ('EQUIPMENT', 'LINE')
           AND RES.RES_CMF_9='Y'
           AND RES.DELETE_FLAG = ' '
           AND RES.RES_ID NOT LIKE '%$$$%'
         GROUP BY RES.FACTORY,RES.RES_GRP_1, RES.RES_GRP_2, RES_GRP_3, RES.RES_GRP_5, RES.RES_GRP_6, RES.RES_ID, MOV.RUN_TIME, RES.SUB_AREA_ID, RES.RES_CMF_1, RES.RES_CMF_4, RES.RES_CMF_19
         ORDER BY RES.FACTORY,RES.RES_GRP_1, RES.RES_GRP_2, RES_GRP_3, RES.RES_GRP_5, RES.RES_GRP_6, RES.RES_ID, RES.SUB_AREA_ID, RES.RES_CMF_1, RES.RES_CMF_4, RES.RES_CMF_19
       )
 GROUP BY TEAM,TEAM,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', RES_ID
 ORDER BY TEAM,TEAM,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', RES_ID

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT PLAN_WEEK V1    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_DATE = TO_CHAR(SYSDATE,'yyyymmdd')      AND ROWNUM = 1  
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT LANGUAGE_2 FROM RWEBFUNDEF WHERE FUNC_NAME = 'MAT070601'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT OPER AS CODE, OPER_DESC AS DATA 
  FROM MWIPOPRDEF 
 WHERE 1=1 
   AND FACTORY = 'HMVA2'
   AND (OPER LIKE 'V%' OR OPER LIKE 'M%') 
 ORDER BY OPER 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT B.MAT_TYPE
     , A.MAT_ID
     , B.MAT_DESC
     , A.OPER
     , SUM(END_QTY) AS TOTAL_QTY
     , SUM(DECODE(WORK_DATE, '20200331', END_QTY)) AS END_QTY_0
     , SUM(DECODE(WORK_DATE, '20200401', END_QTY)) AS END_QTY_1
     , SUM(DECODE(WORK_DATE, '20200402', END_QTY)) AS END_QTY_2
     , SUM(DECODE(WORK_DATE, '20200403', END_QTY)) AS END_QTY_3
     , SUM(DECODE(WORK_DATE, '20200404', END_QTY)) AS END_QTY_4
     , SUM(DECODE(WORK_DATE, '20200405', END_QTY)) AS END_QTY_5
     , SUM(DECODE(WORK_DATE, '20200406', END_QTY)) AS END_QTY_6
     , SUM(DECODE(WORK_DATE, '20200407', END_QTY)) AS END_QTY_7
     , SUM(DECODE(WORK_DATE, '20200408', END_QTY)) AS END_QTY_8
     , SUM(DECODE(WORK_DATE, '20200409', END_QTY)) AS END_QTY_9
     , ROUND(SUM(END_QTY)/10, 1) AS AVG
  FROM (
        SELECT FACTORY, MAT_ID, OPER, WORK_DATE, CM_KEY_3
             , SUM(S1_END_QTY_1+S2_END_QTY_1+S3_END_QTY_1) AS END_QTY
          FROM RSUMWIPMOV
         WHERE 1=1
           AND FACTORY = 'HMVA2'
           AND WORK_DATE BETWEEN '20200331' AND '20200409'
           AND (OPER LIKE 'V%' OR OPER LIKE 'M%')
         GROUP BY FACTORY, MAT_ID, OPER, WORK_DATE, CM_KEY_3 
       ) A
     , MWIPMATDEF B
 WHERE 1=1
   AND A.FACTORY = B.FACTORY
   AND A.MAT_ID = B.MAT_ID
   AND A.END_QTY > 0
   AND A.OPER IN ('M0330')
   AND A.MAT_ID LIKE '%'  
 GROUP BY B.MAT_TYPE, B.MAT_DESC, A.MAT_ID, A.OPER
 ORDER BY B.MAT_TYPE, B.MAT_DESC, A.MAT_ID, A.OPER

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
 SELECT PLAN_WEEK V1    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_DATE = TO_CHAR(SYSDATE,'yyyymmdd')      AND ROWNUM = 1  
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT LANGUAGE_2 FROM RWEBFUNDEF WHERE FUNC_NAME = 'PRD010405'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT FACTORY Code, FAC_DESC Data
  FROM MWIPFACDEF
 WHERE FAC_GRP_5 = 'Y' 
 ORDER BY FAC_GRP_4 ASC
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', SUMMERY.OPER,  ' ',  ' '
     , SUMMERY.MAT_ID 
     , SUMMERY.LOT_ID 
     , SUMMERY.LOT_CMF_5 
     , SUMMERY.END_RES_ID 
     , SUMMERY.QTY_1 + SUMMERY.LOSS_QTY AS OPER_IN_QTY_1 
     , SUMMERY.QTY_1 
     , ROUND(SUMMERY.QTY_1/(SUMMERY.QTY_1 + SUMMERY.LOSS_QTY)*100,3) AS YIELD 
     , TO_CHAR(TO_DATE(SUMMERY.OPER_IN_TIME,'yyyymmddhh24miss')) AS OPER_IN_TIME 
     , TO_CHAR(TO_DATE(SUMMERY.TRAN_TIME,'yyyymmddhh24miss')) AS TRAN_TIME 
     , DECODE(SUMMERY.TRAN_CMF_18, ' ', ' ', SUMMERY.IN_USER_DESC || '(' || SUMMERY.TRAN_CMF_18 || ')') AS IN_USER_ID 
     , SUMMERY.END_USER_DESC || '(' || SUMMERY.TRAN_USER_ID || ')' AS END_USER_ID 
     , SUMMERY.LOT_CMF_10 
     , SUMMERY.TRAN_CMF_2 AS HD 
     , SUMMERY.TRAN_CMF_3 AS PGM 
     , SUMMERY.CRR_ID 
     , '' EPOXY 
     , '' LF 
     , '' GW 
     , '' MATAL_CARD 
     , '' EMC_LOT 
     , '' EMC_CAN 
     , '' EMC_TYPE 
     , SUMMERY.TRAN_COMMENT 
     , SUMMERY.QTY_2 
     , SUMMERY.TRAN_CMF_17 AS CV 
     , SUMMERY.LOT_CMF_7 AS ASSY_SITE 
     , SUMMERY.LOT_CMF_11 AS SHIP_SITE 
     , SUMMERY.TRAN_CMF_7 AS REWORK_BALL 
     , SUMMERY.TRAN_CMF_8 AS REWORK_CLEAN 
     , SUMMERY.TRAN_CMF_9 AS REWORK_PRINT 
     , LOT_CMF_3 
  FROM (  
        SELECT MAT_ID 
             , LOT_ID 
             , LOT_CMF_5 
             , LOT_CMF_10 
             , OLD_OPER AS OPER 
             , END_RES_ID 
             , TRAN_CMF_2 
             , TRAN_CMF_3 
             , NVL(( 
                    SELECT SUM(LOSS_QTY) AS LOSS_QTY 
                      FROM RWIPLOTLSM 
                     WHERE LOT_ID = A.LOT_ID 
                       AND OPER = A.OLD_OPER 
                     GROUP BY LOT_ID 
                  ), 0) AS LOSS_QTY 
             , CASE WHEN TRAN_CODE = 'SHIP' AND FACTORY = OLD_FACTORY THEN OLD_QTY_1 - QTY_1 
                    ELSE QTY_1 
               END QTY_1 
             , DECODE(START_TIME, ' ', OLD_OPER_IN_TIME, START_TIME) AS OPER_IN_TIME 
             , TRAN_TIME 
             , TRAN_USER_ID 
             , CRR_ID 
             , TRAN_COMMENT 
             , ( 
                SELECT USER_DESC FROM RWEBUSRDEF WHERE FACTORY = 'SYSTEM' AND USER_ID = A.TRAN_USER_ID 
               ) AS END_USER_DESC 
             , QTY_2 
             , CASE WHEN A.OLD_OPER LIKE 'A040%' AND A.RESV_FLAG_5 = 'Y' AND (SELECT CASE WHEN (TRAN_CMF_4 = 'RFID TAG WRITE : SUCCESS') 
                                                                                            OR (RESV_FLAG_5 = 'Y' AND TRAN_CMF_19 = 'RFID' AND TRAN_USER_ID = 'EIS') THEN 'RFID' 
                                                                                          ELSE ' ' 
                                                                                     END  
                                                                                FROM RWIPLOTHIS 
                                                                               WHERE FACTORY = A.OLD_FACTORY 
                                                                                 AND LOT_TYPE = A.OLD_LOT_TYPE 
                                                                                 AND LOT_ID = A.LOT_ID 
                                                                                 AND OPER = A.OLD_OPER 
                                                                                 AND TRAN_TIME < A.TRAN_TIME 
                                                                                 AND FACTORY = 'HMVA2' 
                                                                                 AND LOT_TYPE = 'W' 
                                                                                 AND RESV_FLAG_5 = 'Y' 
                                                                                 AND TRAN_CODE = 'START' 
                                                                                 AND HIST_DEL_FLAG = ' ') = 'RFID' THEN TRAN_CMF_18 || '[RFID]' 
                     WHEN A.OLD_OPER NOT LIKE 'A040%' AND A.RESV_FLAG_5 = 'Y' AND A.TRAN_CMF_19 = 'RFID' AND A.TRAN_USER_ID = 'EIS' THEN TRAN_CMF_18 || '[' || TRIM(TRAN_CMF_19) || ']' 
                     ELSE TRAN_CMF_18 
               END AS TRAN_CMF_18 
             , ( 
                SELECT USER_DESC FROM RWEBUSRDEF WHERE FACTORY = 'SYSTEM' AND USER_ID = A.TRAN_CMF_18 
               ) AS IN_USER_DESC 
             , LOT_CMF_7 
             , TRAN_CMF_17 
             , LOT_CMF_11 
             , TRAN_CMF_7 
             , TRAN_CMF_8 
             , TRAN_CMF_9 
             , LOT_CMF_3 
          FROM RWIPLOTHIS A 
         WHERE 1=1 
           AND TRAN_TIME BETWEEN '20200408220000' AND '20200409215959' 
           AND OLD_FACTORY = 'HMVA2' 
           AND TRAN_CODE IN ('END','SHIP') 
           AND LOT_TYPE = 'W' 
           AND HIST_DEL_FLAG = ' ' 
           AND OLD_OPER LIKE '%'
           AND END_RES_ID LIKE '%'
           AND LOT_CMF_5 LIKE '%'
       ) SUMMERY 
     , MWIPMATDEF MAT 
 WHERE 1=1 
   AND SUMMERY.MAT_ID = MAT.MAT_ID 
   AND MAT.FACTORY = 'HMVA2' 
   AND MAT.MAT_TYPE = 'FG' 
 ORDER BY  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', SUMMERY.OPER,  ' ',  ' ',SUMMERY.END_RES_ID,LOT_ID,MAT_ID 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT PLAN_WEEK V1    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_DATE = TO_CHAR(SYSDATE,'yyyymmdd')      AND ROWNUM = 1  
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT LANGUAGE_2 FROM RWEBFUNDEF WHERE FUNC_NAME = 'PRD011004'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT B.MAT_CMF_11, B.MAT_GRP_2, B.MAT_GRP_10, B.MAT_GRP_6 
     , MAX(PCB_DENSITY) AS PCB_DENSITY 
     , SUM(USE_STRIP) AS USE_STRIP 
     , SUM(THEORY_QTY) AS THEORY_QTY 
     , SUM(GOOD_QTY) - SUM(PVI_LOSS) - SUM(TERMINATE) AS GOOD_QTY  
     , SUM(REJECT_QTY) AS REJECT_QTY 
     , ROUND(MAX(NVL((SELECT DATA_1 FROM MESMGR.MGCMTBLDAT@RPTTOMES WHERE FACTORY = 'HMVA2' AND TABLE_NAME = 'PKG_CD_WEIGHT' AND KEY_1 = B.MAT_CMF_11 ),0)),4) AS ST_WEIGHT 
     , ROUND(SUM(REJECT_QTY) * MAX(NVL((SELECT DATA_1 FROM MESMGR.MGCMTBLDAT@RPTTOMES WHERE FACTORY = 'HMVA2' AND TABLE_NAME = 'PKG_CD_WEIGHT' AND KEY_1 = B.MAT_CMF_11 ),0)),4) AS THEORY_WEIGHT 
  FROM RSUMREJEIC A
     , MWIPMATDEF B
 WHERE 1=1
   AND A.MAT_ID = B.MAT_ID
   AND B.FACTORY = 'HMVA2'
   AND B.DELETE_FLAG = ' '
   AND WORK_DATE BETWEEN '20200407' AND '20200408'
 GROUP BY B.MAT_CMF_11, B.MAT_GRP_2, B.MAT_GRP_10, B.MAT_GRP_6
 ORDER BY B.MAT_CMF_11, B.MAT_GRP_2, B.MAT_GRP_10, B.MAT_GRP_6

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
 SELECT PLAN_WEEK V1    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_DATE = TO_CHAR(SYSDATE,'yyyymmdd')      AND ROWNUM = 1  
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT LANGUAGE_2 FROM RWEBFUNDEF WHERE FUNC_NAME = 'TAT050501'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT PLAN_WEEK V1    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_DATE = TO_CHAR(SYSDATE,'yyyymmdd')      AND ROWNUM = 1  
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT LANGUAGE_2 FROM RWEBFUNDEF WHERE FUNC_NAME = 'TAT050401'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT FACTORY Code, FAC_DESC Data
  FROM MWIPFACDEF
 WHERE FAC_GRP_5 = 'Y' 
 ORDER BY FAC_GRP_4 ASC
-------------------------------------------------------------
SELECT OPER, OPER_DESC  FROM MWIPOPRDEF
  WHERE FACTORY = 'HMVA2'  AND OPER NOT IN ('00001', '00002') AND OPER NOT LIKE 'V%' ORDER BY DECODE(OPER_CMF_2, ' ', 99999, TO_NUMBER(OPER_CMF_2)), OPER
-------------------------------------------------------------
SELECT OPER, OPER_DESC  FROM MWIPOPRDEF
  WHERE FACTORY = 'HMVA2'  AND OPER NOT IN ('00001', '00002') AND OPER NOT LIKE 'V%' ORDER BY DECODE(OPER_CMF_2, ' ', 99999, TO_NUMBER(OPER_CMF_2)), OPER
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT DISTINCT FLW.FLOW AS Code, '' AS Data 
  FROM MWIPMATFLW@RPTTOMES FLW 
     , MWIPMATDEF MAT 
 WHERE FLW.FACTORY = MAT.FACTORY 
   AND FLW.MAT_ID = MAT.MAT_ID 
   AND FLW.FACTORY= 'HMVA2'
   AND MAT.MAT_TYPE = 'FG' 
   AND MAT.DELETE_FLAG = ' ' 
   AND FLW.FLOW <> ' ' 
 ORDER BY FLOW 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT OPER
  FROM MWIPOPRDEF 
 WHERE 1=1 
   AND FACTORY='HMVA2'
   AND DECODE(OPER_CMF_2, ' ', 99999, TO_NUMBER(OPER_CMF_2)) BETWEEN (SELECT OPER_CMF_2 FROM MWIPOPRDEF WHERE OPER = 'A0000') AND (SELECT OPER_CMF_2 FROM MWIPOPRDEF WHERE OPER = 'AZ010') 
   AND OPER IN (
                SELECT DISTINCT OPER
                  FROM MWIPFLWOPR@RPTTOMES
                 WHERE FACTORY = 'HMVA2'
                   AND FLOW IN (
                                SELECT DISTINCT FIRST_FLOW 
                                  FROM MWIPMATDEF 
                                 WHERE FACTORY = 'HMVA2'
                                   AND MAT_TYPE = 'FG' 
                                   AND DELETE_FLAG = ' ' 
                               )
               )
 ORDER BY DECODE(OPER_CMF_2, ' ', 99999, TO_NUMBER(OPER_CMF_2)), OPER

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT OPR.OPER AS OPER
     , ROUND(SUM(TOTAL_TAT_QTY)/SUM(SHIP.SHIP_QTY),2) AS TAT
  FROM CSUMTATMAT@RPTTOMES TAT 
      , MWIPOPRDEF OPR 
      , MWIPMATDEF MAT
      , (      
        SELECT TAT.FACTORY 
             , TAT.MAT_ID 
             , TAT.SHIP_DATE AS WORK_DATE 
             , SHIP_QTY 
          FROM CSUMTATMAT@RPTTOMES TAT 
         WHERE 1=1      
           AND TAT.FACTORY='HMVA2'      
           AND OPER ='AZ010'      
           AND TAT.SHIP_DATE BETWEEN '20200408' AND '20200409' 
        ) SHIP      
  WHERE TAT.FACTORY = 'HMVA2'
    AND TAT.FACTORY = MAT.FACTORY
    AND TAT.FACTORY = OPR.FACTORY
    AND TAT.MAT_ID = MAT.MAT_ID
    AND TAT.MAT_ID = SHIP.MAT_ID
    AND TAT.SHIP_DATE = SHIP.WORK_DATE       
    AND MAT.MAT_VER = 1
    AND MAT.MAT_TYPE = 'FG' 
    AND MAT.DELETE_FLAG = ' ' 
    AND TAT.TOTAL_TIME <> 0
    AND OPR.OPER_GRP_1 NOT IN (' ')
    AND OPR.OPER = TAT.OPER
    AND TAT.OPER BETWEEN 'A0000' AND 'AZ010'  
    AND TAT.SHIP_DATE BETWEEN '20200408' AND '20200409' 
  GROUP BY OPR.OPER
  ORDER BY OPR.OPER

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT SHIP_DATE, MAT_GRP_1, MAT_CMF_10,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ' 
     , ROUND(SUM(CTOT),2) AS  CTOT   
     , 0 AS  Wait   
     , 0 AS  Run   
     , ROUND(SUM(W0),2) AS W0
     , ROUND(SUM(WSUM0),2) AS WSUM0
     , ROUND(SUM(WCNT0),2) AS WCNT0
     , ROUND(SUM(R0),2) AS R0
     , ROUND(SUM(RSUM0),2) AS RSUM0
     , ROUND(SUM(RCNT0),2) AS RCNT0
     , ROUND(SUM(W1),2) AS W1
     , ROUND(SUM(WSUM1),2) AS WSUM1
     , ROUND(SUM(WCNT1),2) AS WCNT1
     , ROUND(SUM(R1),2) AS R1
     , ROUND(SUM(RSUM1),2) AS RSUM1
     , ROUND(SUM(RCNT1),2) AS RCNT1
     , ROUND(SUM(W2),2) AS W2
     , ROUND(SUM(WSUM2),2) AS WSUM2
     , ROUND(SUM(WCNT2),2) AS WCNT2
     , ROUND(SUM(R2),2) AS R2
     , ROUND(SUM(RSUM2),2) AS RSUM2
     , ROUND(SUM(RCNT2),2) AS RCNT2
     , ROUND(SUM(W3),2) AS W3
     , ROUND(SUM(WSUM3),2) AS WSUM3
     , ROUND(SUM(WCNT3),2) AS WCNT3
     , ROUND(SUM(R3),2) AS R3
     , ROUND(SUM(RSUM3),2) AS RSUM3
     , ROUND(SUM(RCNT3),2) AS RCNT3
     , ROUND(SUM(W4),2) AS W4
     , ROUND(SUM(WSUM4),2) AS WSUM4
     , ROUND(SUM(WCNT4),2) AS WCNT4
     , ROUND(SUM(R4),2) AS R4
     , ROUND(SUM(RSUM4),2) AS RSUM4
     , ROUND(SUM(RCNT4),2) AS RCNT4
     , ROUND(SUM(W5),2) AS W5
     , ROUND(SUM(WSUM5),2) AS WSUM5
     , ROUND(SUM(WCNT5),2) AS WCNT5
     , ROUND(SUM(R5),2) AS R5
     , ROUND(SUM(RSUM5),2) AS RSUM5
     , ROUND(SUM(RCNT5),2) AS RCNT5
     , ROUND(SUM(W6),2) AS W6
     , ROUND(SUM(WSUM6),2) AS WSUM6
     , ROUND(SUM(WCNT6),2) AS WCNT6
     , ROUND(SUM(R6),2) AS R6
     , ROUND(SUM(RSUM6),2) AS RSUM6
     , ROUND(SUM(RCNT6),2) AS RCNT6
     , ROUND(SUM(W7),2) AS W7
     , ROUND(SUM(WSUM7),2) AS WSUM7
     , ROUND(SUM(WCNT7),2) AS WCNT7
     , ROUND(SUM(R7),2) AS R7
     , ROUND(SUM(RSUM7),2) AS RSUM7
     , ROUND(SUM(RCNT7),2) AS RCNT7
     , ROUND(SUM(W8),2) AS W8
     , ROUND(SUM(WSUM8),2) AS WSUM8
     , ROUND(SUM(WCNT8),2) AS WCNT8
     , ROUND(SUM(R8),2) AS R8
     , ROUND(SUM(RSUM8),2) AS RSUM8
     , ROUND(SUM(RCNT8),2) AS RCNT8
     , ROUND(SUM(W9),2) AS W9
     , ROUND(SUM(WSUM9),2) AS WSUM9
     , ROUND(SUM(WCNT9),2) AS WCNT9
     , ROUND(SUM(R9),2) AS R9
     , ROUND(SUM(RSUM9),2) AS RSUM9
     , ROUND(SUM(RCNT9),2) AS RCNT9
     , ROUND(SUM(W10),2) AS W10
     , ROUND(SUM(WSUM10),2) AS WSUM10
     , ROUND(SUM(WCNT10),2) AS WCNT10
     , ROUND(SUM(R10),2) AS R10
     , ROUND(SUM(RSUM10),2) AS RSUM10
     , ROUND(SUM(RCNT10),2) AS RCNT10
     , ROUND(SUM(W11),2) AS W11
     , ROUND(SUM(WSUM11),2) AS WSUM11
     , ROUND(SUM(WCNT11),2) AS WCNT11
     , ROUND(SUM(R11),2) AS R11
     , ROUND(SUM(RSUM11),2) AS RSUM11
     , ROUND(SUM(RCNT11),2) AS RCNT11
     , ROUND(SUM(W12),2) AS W12
     , ROUND(SUM(WSUM12),2) AS WSUM12
     , ROUND(SUM(WCNT12),2) AS WCNT12
     , ROUND(SUM(R12),2) AS R12
     , ROUND(SUM(RSUM12),2) AS RSUM12
     , ROUND(SUM(RCNT12),2) AS RCNT12
     , ROUND(SUM(W13),2) AS W13
     , ROUND(SUM(WSUM13),2) AS WSUM13
     , ROUND(SUM(WCNT13),2) AS WCNT13
     , ROUND(SUM(R13),2) AS R13
     , ROUND(SUM(RSUM13),2) AS RSUM13
     , ROUND(SUM(RCNT13),2) AS RCNT13
     , ROUND(SUM(W14),2) AS W14
     , ROUND(SUM(WSUM14),2) AS WSUM14
     , ROUND(SUM(WCNT14),2) AS WCNT14
     , ROUND(SUM(R14),2) AS R14
     , ROUND(SUM(RSUM14),2) AS RSUM14
     , ROUND(SUM(RCNT14),2) AS RCNT14
     , ROUND(SUM(W15),2) AS W15
     , ROUND(SUM(WSUM15),2) AS WSUM15
     , ROUND(SUM(WCNT15),2) AS WCNT15
     , ROUND(SUM(R15),2) AS R15
     , ROUND(SUM(RSUM15),2) AS RSUM15
     , ROUND(SUM(RCNT15),2) AS RCNT15
     , ROUND(SUM(W16),2) AS W16
     , ROUND(SUM(WSUM16),2) AS WSUM16
     , ROUND(SUM(WCNT16),2) AS WCNT16
     , ROUND(SUM(R16),2) AS R16
     , ROUND(SUM(RSUM16),2) AS RSUM16
     , ROUND(SUM(RCNT16),2) AS RCNT16
     , ROUND(SUM(W17),2) AS W17
     , ROUND(SUM(WSUM17),2) AS WSUM17
     , ROUND(SUM(WCNT17),2) AS WCNT17
     , ROUND(SUM(R17),2) AS R17
     , ROUND(SUM(RSUM17),2) AS RSUM17
     , ROUND(SUM(RCNT17),2) AS RCNT17
     , ROUND(SUM(W18),2) AS W18
     , ROUND(SUM(WSUM18),2) AS WSUM18
     , ROUND(SUM(WCNT18),2) AS WCNT18
     , ROUND(SUM(R18),2) AS R18
     , ROUND(SUM(RSUM18),2) AS RSUM18
     , ROUND(SUM(RCNT18),2) AS RCNT18
     , ROUND(SUM(W19),2) AS W19
     , ROUND(SUM(WSUM19),2) AS WSUM19
     , ROUND(SUM(WCNT19),2) AS WCNT19
     , ROUND(SUM(R19),2) AS R19
     , ROUND(SUM(RSUM19),2) AS RSUM19
     , ROUND(SUM(RCNT19),2) AS RCNT19
     , ROUND(SUM(W20),2) AS W20
     , ROUND(SUM(WSUM20),2) AS WSUM20
     , ROUND(SUM(WCNT20),2) AS WCNT20
     , ROUND(SUM(R20),2) AS R20
     , ROUND(SUM(RSUM20),2) AS RSUM20
     , ROUND(SUM(RCNT20),2) AS RCNT20
     , ROUND(SUM(W21),2) AS W21
     , ROUND(SUM(WSUM21),2) AS WSUM21
     , ROUND(SUM(WCNT21),2) AS WCNT21
     , ROUND(SUM(R21),2) AS R21
     , ROUND(SUM(RSUM21),2) AS RSUM21
     , ROUND(SUM(RCNT21),2) AS RCNT21
     , ROUND(SUM(W22),2) AS W22
     , ROUND(SUM(WSUM22),2) AS WSUM22
     , ROUND(SUM(WCNT22),2) AS WCNT22
     , ROUND(SUM(R22),2) AS R22
     , ROUND(SUM(RSUM22),2) AS RSUM22
     , ROUND(SUM(RCNT22),2) AS RCNT22
     , ROUND(SUM(W23),2) AS W23
     , ROUND(SUM(WSUM23),2) AS WSUM23
     , ROUND(SUM(WCNT23),2) AS WCNT23
     , ROUND(SUM(R23),2) AS R23
     , ROUND(SUM(RSUM23),2) AS RSUM23
     , ROUND(SUM(RCNT23),2) AS RCNT23
     , ROUND(SUM(W24),2) AS W24
     , ROUND(SUM(WSUM24),2) AS WSUM24
     , ROUND(SUM(WCNT24),2) AS WCNT24
     , ROUND(SUM(R24),2) AS R24
     , ROUND(SUM(RSUM24),2) AS RSUM24
     , ROUND(SUM(RCNT24),2) AS RCNT24
     , ROUND(SUM(W25),2) AS W25
     , ROUND(SUM(WSUM25),2) AS WSUM25
     , ROUND(SUM(WCNT25),2) AS WCNT25
     , ROUND(SUM(R25),2) AS R25
     , ROUND(SUM(RSUM25),2) AS RSUM25
     , ROUND(SUM(RCNT25),2) AS RCNT25
     , ROUND(SUM(W26),2) AS W26
     , ROUND(SUM(WSUM26),2) AS WSUM26
     , ROUND(SUM(WCNT26),2) AS WCNT26
     , ROUND(SUM(R26),2) AS R26
     , ROUND(SUM(RSUM26),2) AS RSUM26
     , ROUND(SUM(RCNT26),2) AS RCNT26
     , ROUND(SUM(W27),2) AS W27
     , ROUND(SUM(WSUM27),2) AS WSUM27
     , ROUND(SUM(WCNT27),2) AS WCNT27
     , ROUND(SUM(R27),2) AS R27
     , ROUND(SUM(RSUM27),2) AS RSUM27
     , ROUND(SUM(RCNT27),2) AS RCNT27
     , ROUND(SUM(W28),2) AS W28
     , ROUND(SUM(WSUM28),2) AS WSUM28
     , ROUND(SUM(WCNT28),2) AS WCNT28
     , ROUND(SUM(R28),2) AS R28
     , ROUND(SUM(RSUM28),2) AS RSUM28
     , ROUND(SUM(RCNT28),2) AS RCNT28
     , ROUND(SUM(W29),2) AS W29
     , ROUND(SUM(WSUM29),2) AS WSUM29
     , ROUND(SUM(WCNT29),2) AS WCNT29
     , ROUND(SUM(R29),2) AS R29
     , ROUND(SUM(RSUM29),2) AS RSUM29
     , ROUND(SUM(RCNT29),2) AS RCNT29
     , ROUND(SUM(W30),2) AS W30
     , ROUND(SUM(WSUM30),2) AS WSUM30
     , ROUND(SUM(WCNT30),2) AS WCNT30
     , ROUND(SUM(R30),2) AS R30
     , ROUND(SUM(RSUM30),2) AS RSUM30
     , ROUND(SUM(RCNT30),2) AS RCNT30
     , ROUND(SUM(W31),2) AS W31
     , ROUND(SUM(WSUM31),2) AS WSUM31
     , ROUND(SUM(WCNT31),2) AS WCNT31
     , ROUND(SUM(R31),2) AS R31
     , ROUND(SUM(RSUM31),2) AS RSUM31
     , ROUND(SUM(RCNT31),2) AS RCNT31
     , ROUND(SUM(W32),2) AS W32
     , ROUND(SUM(WSUM32),2) AS WSUM32
     , ROUND(SUM(WCNT32),2) AS WCNT32
     , ROUND(SUM(R32),2) AS R32
     , ROUND(SUM(RSUM32),2) AS RSUM32
     , ROUND(SUM(RCNT32),2) AS RCNT32
     , ROUND(SUM(W33),2) AS W33
     , ROUND(SUM(WSUM33),2) AS WSUM33
     , ROUND(SUM(WCNT33),2) AS WCNT33
     , ROUND(SUM(R33),2) AS R33
     , ROUND(SUM(RSUM33),2) AS RSUM33
     , ROUND(SUM(RCNT33),2) AS RCNT33
     , ROUND(SUM(W34),2) AS W34
     , ROUND(SUM(WSUM34),2) AS WSUM34
     , ROUND(SUM(WCNT34),2) AS WCNT34
     , ROUND(SUM(R34),2) AS R34
     , ROUND(SUM(RSUM34),2) AS RSUM34
     , ROUND(SUM(RCNT34),2) AS RCNT34
     , ROUND(SUM(W35),2) AS W35
     , ROUND(SUM(WSUM35),2) AS WSUM35
     , ROUND(SUM(WCNT35),2) AS WCNT35
     , ROUND(SUM(R35),2) AS R35
     , ROUND(SUM(RSUM35),2) AS RSUM35
     , ROUND(SUM(RCNT35),2) AS RCNT35
     , ROUND(SUM(W36),2) AS W36
     , ROUND(SUM(WSUM36),2) AS WSUM36
     , ROUND(SUM(WCNT36),2) AS WCNT36
     , ROUND(SUM(R36),2) AS R36
     , ROUND(SUM(RSUM36),2) AS RSUM36
     , ROUND(SUM(RCNT36),2) AS RCNT36
     , ROUND(SUM(W37),2) AS W37
     , ROUND(SUM(WSUM37),2) AS WSUM37
     , ROUND(SUM(WCNT37),2) AS WCNT37
     , ROUND(SUM(R37),2) AS R37
     , ROUND(SUM(RSUM37),2) AS RSUM37
     , ROUND(SUM(RCNT37),2) AS RCNT37
     , ROUND(SUM(W38),2) AS W38
     , ROUND(SUM(WSUM38),2) AS WSUM38
     , ROUND(SUM(WCNT38),2) AS WCNT38
     , ROUND(SUM(R38),2) AS R38
     , ROUND(SUM(RSUM38),2) AS RSUM38
     , ROUND(SUM(RCNT38),2) AS RCNT38
     , ROUND(SUM(W39),2) AS W39
     , ROUND(SUM(WSUM39),2) AS WSUM39
     , ROUND(SUM(WCNT39),2) AS WCNT39
     , ROUND(SUM(R39),2) AS R39
     , ROUND(SUM(RSUM39),2) AS RSUM39
     , ROUND(SUM(RCNT39),2) AS RCNT39
     , ROUND(SUM(W40),2) AS W40
     , ROUND(SUM(WSUM40),2) AS WSUM40
     , ROUND(SUM(WCNT40),2) AS WCNT40
     , ROUND(SUM(R40),2) AS R40
     , ROUND(SUM(RSUM40),2) AS RSUM40
     , ROUND(SUM(RCNT40),2) AS RCNT40
     , ROUND(SUM(W41),2) AS W41
     , ROUND(SUM(WSUM41),2) AS WSUM41
     , ROUND(SUM(WCNT41),2) AS WCNT41
     , ROUND(SUM(R41),2) AS R41
     , ROUND(SUM(RSUM41),2) AS RSUM41
     , ROUND(SUM(RCNT41),2) AS RCNT41
     , ROUND(SUM(W42),2) AS W42
     , ROUND(SUM(WSUM42),2) AS WSUM42
     , ROUND(SUM(WCNT42),2) AS WCNT42
     , ROUND(SUM(R42),2) AS R42
     , ROUND(SUM(RSUM42),2) AS RSUM42
     , ROUND(SUM(RCNT42),2) AS RCNT42
     , ROUND(SUM(W43),2) AS W43
     , ROUND(SUM(WSUM43),2) AS WSUM43
     , ROUND(SUM(WCNT43),2) AS WCNT43
     , ROUND(SUM(R43),2) AS R43
     , ROUND(SUM(RSUM43),2) AS RSUM43
     , ROUND(SUM(RCNT43),2) AS RCNT43
     , ROUND(SUM(W44),2) AS W44
     , ROUND(SUM(WSUM44),2) AS WSUM44
     , ROUND(SUM(WCNT44),2) AS WCNT44
     , ROUND(SUM(R44),2) AS R44
     , ROUND(SUM(RSUM44),2) AS RSUM44
     , ROUND(SUM(RCNT44),2) AS RCNT44
     , ROUND(SUM(W45),2) AS W45
     , ROUND(SUM(WSUM45),2) AS WSUM45
     , ROUND(SUM(WCNT45),2) AS WCNT45
     , ROUND(SUM(R45),2) AS R45
     , ROUND(SUM(RSUM45),2) AS RSUM45
     , ROUND(SUM(RCNT45),2) AS RCNT45
     , ROUND(SUM(W46),2) AS W46
     , ROUND(SUM(WSUM46),2) AS WSUM46
     , ROUND(SUM(WCNT46),2) AS WCNT46
     , ROUND(SUM(R46),2) AS R46
     , ROUND(SUM(RSUM46),2) AS RSUM46
     , ROUND(SUM(RCNT46),2) AS RCNT46
     , ROUND(SUM(W47),2) AS W47
     , ROUND(SUM(WSUM47),2) AS WSUM47
     , ROUND(SUM(WCNT47),2) AS WCNT47
     , ROUND(SUM(R47),2) AS R47
     , ROUND(SUM(RSUM47),2) AS RSUM47
     , ROUND(SUM(RCNT47),2) AS RCNT47
     , ROUND(SUM(W48),2) AS W48
     , ROUND(SUM(WSUM48),2) AS WSUM48
     , ROUND(SUM(WCNT48),2) AS WCNT48
     , ROUND(SUM(R48),2) AS R48
     , ROUND(SUM(RSUM48),2) AS RSUM48
     , ROUND(SUM(RCNT48),2) AS RCNT48
     , ROUND(SUM(W49),2) AS W49
     , ROUND(SUM(WSUM49),2) AS WSUM49
     , ROUND(SUM(WCNT49),2) AS WCNT49
     , ROUND(SUM(R49),2) AS R49
     , ROUND(SUM(RSUM49),2) AS RSUM49
     , ROUND(SUM(RCNT49),2) AS RCNT49
     , ROUND(SUM(W50),2) AS W50
     , ROUND(SUM(WSUM50),2) AS WSUM50
     , ROUND(SUM(WCNT50),2) AS WCNT50
     , ROUND(SUM(R50),2) AS R50
     , ROUND(SUM(RSUM50),2) AS RSUM50
     , ROUND(SUM(RCNT50),2) AS RCNT50
     , ROUND(SUM(W51),2) AS W51
     , ROUND(SUM(WSUM51),2) AS WSUM51
     , ROUND(SUM(WCNT51),2) AS WCNT51
     , ROUND(SUM(R51),2) AS R51
     , ROUND(SUM(RSUM51),2) AS RSUM51
     , ROUND(SUM(RCNT51),2) AS RCNT51
     , ROUND(SUM(W52),2) AS W52
     , ROUND(SUM(WSUM52),2) AS WSUM52
     , ROUND(SUM(WCNT52),2) AS WCNT52
     , ROUND(SUM(R52),2) AS R52
     , ROUND(SUM(RSUM52),2) AS RSUM52
     , ROUND(SUM(RCNT52),2) AS RCNT52
     , ROUND(SUM(W53),2) AS W53
     , ROUND(SUM(WSUM53),2) AS WSUM53
     , ROUND(SUM(WCNT53),2) AS WCNT53
     , ROUND(SUM(R53),2) AS R53
     , ROUND(SUM(RSUM53),2) AS RSUM53
     , ROUND(SUM(RCNT53),2) AS RCNT53
     , ROUND(SUM(W54),2) AS W54
     , ROUND(SUM(WSUM54),2) AS WSUM54
     , ROUND(SUM(WCNT54),2) AS WCNT54
     , ROUND(SUM(R54),2) AS R54
     , ROUND(SUM(RSUM54),2) AS RSUM54
     , ROUND(SUM(RCNT54),2) AS RCNT54
     , ROUND(SUM(W55),2) AS W55
     , ROUND(SUM(WSUM55),2) AS WSUM55
     , ROUND(SUM(WCNT55),2) AS WCNT55
     , ROUND(SUM(R55),2) AS R55
     , ROUND(SUM(RSUM55),2) AS RSUM55
     , ROUND(SUM(RCNT55),2) AS RCNT55
     , ROUND(SUM(W56),2) AS W56
     , ROUND(SUM(WSUM56),2) AS WSUM56
     , ROUND(SUM(WCNT56),2) AS WCNT56
     , ROUND(SUM(R56),2) AS R56
     , ROUND(SUM(RSUM56),2) AS RSUM56
     , ROUND(SUM(RCNT56),2) AS RCNT56
     , ROUND(SUM(W57),2) AS W57
     , ROUND(SUM(WSUM57),2) AS WSUM57
     , ROUND(SUM(WCNT57),2) AS WCNT57
     , ROUND(SUM(R57),2) AS R57
     , ROUND(SUM(RSUM57),2) AS RSUM57
     , ROUND(SUM(RCNT57),2) AS RCNT57
     , ROUND(SUM(W58),2) AS W58
     , ROUND(SUM(WSUM58),2) AS WSUM58
     , ROUND(SUM(WCNT58),2) AS WCNT58
     , ROUND(SUM(R58),2) AS R58
     , ROUND(SUM(RSUM58),2) AS RSUM58
     , ROUND(SUM(RCNT58),2) AS RCNT58
     , ROUND(SUM(W59),2) AS W59
     , ROUND(SUM(WSUM59),2) AS WSUM59
     , ROUND(SUM(WCNT59),2) AS WCNT59
     , ROUND(SUM(R59),2) AS R59
     , ROUND(SUM(RSUM59),2) AS RSUM59
     , ROUND(SUM(RCNT59),2) AS RCNT59
     , ROUND(SUM(W60),2) AS W60
     , ROUND(SUM(WSUM60),2) AS WSUM60
     , ROUND(SUM(WCNT60),2) AS WCNT60
     , ROUND(SUM(R60),2) AS R60
     , ROUND(SUM(RSUM60),2) AS RSUM60
     , ROUND(SUM(RCNT60),2) AS RCNT60
     , ROUND(SUM(W61),2) AS W61
     , ROUND(SUM(WSUM61),2) AS WSUM61
     , ROUND(SUM(WCNT61),2) AS WCNT61
     , ROUND(SUM(R61),2) AS R61
     , ROUND(SUM(RSUM61),2) AS RSUM61
     , ROUND(SUM(RCNT61),2) AS RCNT61
     , ROUND(SUM(W62),2) AS W62
     , ROUND(SUM(WSUM62),2) AS WSUM62
     , ROUND(SUM(WCNT62),2) AS WCNT62
     , ROUND(SUM(R62),2) AS R62
     , ROUND(SUM(RSUM62),2) AS RSUM62
     , ROUND(SUM(RCNT62),2) AS RCNT62
     , ROUND(SUM(W63),2) AS W63
     , ROUND(SUM(WSUM63),2) AS WSUM63
     , ROUND(SUM(WCNT63),2) AS WCNT63
     , ROUND(SUM(R63),2) AS R63
     , ROUND(SUM(RSUM63),2) AS RSUM63
     , ROUND(SUM(RCNT63),2) AS RCNT63
     , ROUND(SUM(W64),2) AS W64
     , ROUND(SUM(WSUM64),2) AS WSUM64
     , ROUND(SUM(WCNT64),2) AS WCNT64
     , ROUND(SUM(R64),2) AS R64
     , ROUND(SUM(RSUM64),2) AS RSUM64
     , ROUND(SUM(RCNT64),2) AS RCNT64
     , ROUND(SUM(W65),2) AS W65
     , ROUND(SUM(WSUM65),2) AS WSUM65
     , ROUND(SUM(WCNT65),2) AS WCNT65
     , ROUND(SUM(R65),2) AS R65
     , ROUND(SUM(RSUM65),2) AS RSUM65
     , ROUND(SUM(RCNT65),2) AS RCNT65
     , ROUND(SUM(W66),2) AS W66
     , ROUND(SUM(WSUM66),2) AS WSUM66
     , ROUND(SUM(WCNT66),2) AS WCNT66
     , ROUND(SUM(R66),2) AS R66
     , ROUND(SUM(RSUM66),2) AS RSUM66
     , ROUND(SUM(RCNT66),2) AS RCNT66
     , ROUND(SUM(W67),2) AS W67
     , ROUND(SUM(WSUM67),2) AS WSUM67
     , ROUND(SUM(WCNT67),2) AS WCNT67
     , ROUND(SUM(R67),2) AS R67
     , ROUND(SUM(RSUM67),2) AS RSUM67
     , ROUND(SUM(RCNT67),2) AS RCNT67
     , ROUND(SUM(W68),2) AS W68
     , ROUND(SUM(WSUM68),2) AS WSUM68
     , ROUND(SUM(WCNT68),2) AS WCNT68
     , ROUND(SUM(R68),2) AS R68
     , ROUND(SUM(RSUM68),2) AS RSUM68
     , ROUND(SUM(RCNT68),2) AS RCNT68
     , ROUND(SUM(W69),2) AS W69
     , ROUND(SUM(WSUM69),2) AS WSUM69
     , ROUND(SUM(WCNT69),2) AS WCNT69
     , ROUND(SUM(R69),2) AS R69
     , ROUND(SUM(RSUM69),2) AS RSUM69
     , ROUND(SUM(RCNT69),2) AS RCNT69
     , ROUND(SUM(W70),2) AS W70
     , ROUND(SUM(WSUM70),2) AS WSUM70
     , ROUND(SUM(WCNT70),2) AS WCNT70
     , ROUND(SUM(R70),2) AS R70
     , ROUND(SUM(RSUM70),2) AS RSUM70
     , ROUND(SUM(RCNT70),2) AS RCNT70
     , ROUND(SUM(W71),2) AS W71
     , ROUND(SUM(WSUM71),2) AS WSUM71
     , ROUND(SUM(WCNT71),2) AS WCNT71
     , ROUND(SUM(R71),2) AS R71
     , ROUND(SUM(RSUM71),2) AS RSUM71
     , ROUND(SUM(RCNT71),2) AS RCNT71
     , ROUND(SUM(W72),2) AS W72
     , ROUND(SUM(WSUM72),2) AS WSUM72
     , ROUND(SUM(WCNT72),2) AS WCNT72
     , ROUND(SUM(R72),2) AS R72
     , ROUND(SUM(RSUM72),2) AS RSUM72
     , ROUND(SUM(RCNT72),2) AS RCNT72
     , ROUND(SUM(W73),2) AS W73
     , ROUND(SUM(WSUM73),2) AS WSUM73
     , ROUND(SUM(WCNT73),2) AS WCNT73
     , ROUND(SUM(R73),2) AS R73
     , ROUND(SUM(RSUM73),2) AS RSUM73
     , ROUND(SUM(RCNT73),2) AS RCNT73
     , ROUND(SUM(W74),2) AS W74
     , ROUND(SUM(WSUM74),2) AS WSUM74
     , ROUND(SUM(WCNT74),2) AS WCNT74
     , ROUND(SUM(R74),2) AS R74
     , ROUND(SUM(RSUM74),2) AS RSUM74
     , ROUND(SUM(RCNT74),2) AS RCNT74
     , ROUND(SUM(W75),2) AS W75
     , ROUND(SUM(WSUM75),2) AS WSUM75
     , ROUND(SUM(WCNT75),2) AS WCNT75
     , ROUND(SUM(R75),2) AS R75
     , ROUND(SUM(RSUM75),2) AS RSUM75
     , ROUND(SUM(RCNT75),2) AS RCNT75
     , ROUND(SUM(W76),2) AS W76
     , ROUND(SUM(WSUM76),2) AS WSUM76
     , ROUND(SUM(WCNT76),2) AS WCNT76
     , ROUND(SUM(R76),2) AS R76
     , ROUND(SUM(RSUM76),2) AS RSUM76
     , ROUND(SUM(RCNT76),2) AS RCNT76
     , ROUND(SUM(W77),2) AS W77
     , ROUND(SUM(WSUM77),2) AS WSUM77
     , ROUND(SUM(WCNT77),2) AS WCNT77
     , ROUND(SUM(R77),2) AS R77
     , ROUND(SUM(RSUM77),2) AS RSUM77
     , ROUND(SUM(RCNT77),2) AS RCNT77
     , ROUND(SUM(W78),2) AS W78
     , ROUND(SUM(WSUM78),2) AS WSUM78
     , ROUND(SUM(WCNT78),2) AS WCNT78
     , ROUND(SUM(R78),2) AS R78
     , ROUND(SUM(RSUM78),2) AS RSUM78
     , ROUND(SUM(RCNT78),2) AS RCNT78
     , ROUND(SUM(W79),2) AS W79
     , ROUND(SUM(WSUM79),2) AS WSUM79
     , ROUND(SUM(WCNT79),2) AS WCNT79
     , ROUND(SUM(R79),2) AS R79
     , ROUND(SUM(RSUM79),2) AS RSUM79
     , ROUND(SUM(RCNT79),2) AS RCNT79
     , ROUND(SUM(W80),2) AS W80
     , ROUND(SUM(WSUM80),2) AS WSUM80
     , ROUND(SUM(WCNT80),2) AS WCNT80
     , ROUND(SUM(R80),2) AS R80
     , ROUND(SUM(RSUM80),2) AS RSUM80
     , ROUND(SUM(RCNT80),2) AS RCNT80
     , ROUND(SUM(W81),2) AS W81
     , ROUND(SUM(WSUM81),2) AS WSUM81
     , ROUND(SUM(WCNT81),2) AS WCNT81
     , ROUND(SUM(R81),2) AS R81
     , ROUND(SUM(RSUM81),2) AS RSUM81
     , ROUND(SUM(RCNT81),2) AS RCNT81
     , ROUND(SUM(W82),2) AS W82
     , ROUND(SUM(WSUM82),2) AS WSUM82
     , ROUND(SUM(WCNT82),2) AS WCNT82
     , ROUND(SUM(R82),2) AS R82
     , ROUND(SUM(RSUM82),2) AS RSUM82
     , ROUND(SUM(RCNT82),2) AS RCNT82
     , ROUND(SUM(W83),2) AS W83
     , ROUND(SUM(WSUM83),2) AS WSUM83
     , ROUND(SUM(WCNT83),2) AS WCNT83
     , ROUND(SUM(R83),2) AS R83
     , ROUND(SUM(RSUM83),2) AS RSUM83
     , ROUND(SUM(RCNT83),2) AS RCNT83
     , ROUND(SUM(W84),2) AS W84
     , ROUND(SUM(WSUM84),2) AS WSUM84
     , ROUND(SUM(WCNT84),2) AS WCNT84
     , ROUND(SUM(R84),2) AS R84
     , ROUND(SUM(RSUM84),2) AS RSUM84
     , ROUND(SUM(RCNT84),2) AS RCNT84
     , ROUND(SUM(W85),2) AS W85
     , ROUND(SUM(WSUM85),2) AS WSUM85
     , ROUND(SUM(WCNT85),2) AS WCNT85
     , ROUND(SUM(R85),2) AS R85
     , ROUND(SUM(RSUM85),2) AS RSUM85
     , ROUND(SUM(RCNT85),2) AS RCNT85
     , ROUND(SUM(W86),2) AS W86
     , ROUND(SUM(WSUM86),2) AS WSUM86
     , ROUND(SUM(WCNT86),2) AS WCNT86
     , ROUND(SUM(R86),2) AS R86
     , ROUND(SUM(RSUM86),2) AS RSUM86
     , ROUND(SUM(RCNT86),2) AS RCNT86
     , ROUND(SUM(W87),2) AS W87
     , ROUND(SUM(WSUM87),2) AS WSUM87
     , ROUND(SUM(WCNT87),2) AS WCNT87
     , ROUND(SUM(R87),2) AS R87
     , ROUND(SUM(RSUM87),2) AS RSUM87
     , ROUND(SUM(RCNT87),2) AS RCNT87
     , ROUND(SUM(W88),2) AS W88
     , ROUND(SUM(WSUM88),2) AS WSUM88
     , ROUND(SUM(WCNT88),2) AS WCNT88
     , ROUND(SUM(R88),2) AS R88
     , ROUND(SUM(RSUM88),2) AS RSUM88
     , ROUND(SUM(RCNT88),2) AS RCNT88
     , ROUND(SUM(W89),2) AS W89
     , ROUND(SUM(WSUM89),2) AS WSUM89
     , ROUND(SUM(WCNT89),2) AS WCNT89
     , ROUND(SUM(R89),2) AS R89
     , ROUND(SUM(RSUM89),2) AS RSUM89
     , ROUND(SUM(RCNT89),2) AS RCNT89
     , ROUND(SUM(W90),2) AS W90
     , ROUND(SUM(WSUM90),2) AS WSUM90
     , ROUND(SUM(WCNT90),2) AS WCNT90
     , ROUND(SUM(R90),2) AS R90
     , ROUND(SUM(RSUM90),2) AS RSUM90
     , ROUND(SUM(RCNT90),2) AS RCNT90
     , ROUND(SUM(W91),2) AS W91
     , ROUND(SUM(WSUM91),2) AS WSUM91
     , ROUND(SUM(WCNT91),2) AS WCNT91
     , ROUND(SUM(R91),2) AS R91
     , ROUND(SUM(RSUM91),2) AS RSUM91
     , ROUND(SUM(RCNT91),2) AS RCNT91
     , ROUND(SUM(W92),2) AS W92
     , ROUND(SUM(WSUM92),2) AS WSUM92
     , ROUND(SUM(WCNT92),2) AS WCNT92
     , ROUND(SUM(R92),2) AS R92
     , ROUND(SUM(RSUM92),2) AS RSUM92
     , ROUND(SUM(RCNT92),2) AS RCNT92
     , ROUND(SUM(W93),2) AS W93
     , ROUND(SUM(WSUM93),2) AS WSUM93
     , ROUND(SUM(WCNT93),2) AS WCNT93
     , ROUND(SUM(R93),2) AS R93
     , ROUND(SUM(RSUM93),2) AS RSUM93
     , ROUND(SUM(RCNT93),2) AS RCNT93
     , ROUND(SUM(W94),2) AS W94
     , ROUND(SUM(WSUM94),2) AS WSUM94
     , ROUND(SUM(WCNT94),2) AS WCNT94
     , ROUND(SUM(R94),2) AS R94
     , ROUND(SUM(RSUM94),2) AS RSUM94
     , ROUND(SUM(RCNT94),2) AS RCNT94
     , ROUND(SUM(W95),2) AS W95
     , ROUND(SUM(WSUM95),2) AS WSUM95
     , ROUND(SUM(WCNT95),2) AS WCNT95
     , ROUND(SUM(R95),2) AS R95
     , ROUND(SUM(RSUM95),2) AS RSUM95
     , ROUND(SUM(RCNT95),2) AS RCNT95
     , ROUND(SUM(W96),2) AS W96
     , ROUND(SUM(WSUM96),2) AS WSUM96
     , ROUND(SUM(WCNT96),2) AS WCNT96
     , ROUND(SUM(R96),2) AS R96
     , ROUND(SUM(RSUM96),2) AS RSUM96
     , ROUND(SUM(RCNT96),2) AS RCNT96
     , ROUND(SUM(W97),2) AS W97
     , ROUND(SUM(WSUM97),2) AS WSUM97
     , ROUND(SUM(WCNT97),2) AS WCNT97
     , ROUND(SUM(R97),2) AS R97
     , ROUND(SUM(RSUM97),2) AS RSUM97
     , ROUND(SUM(RCNT97),2) AS RCNT97
     , ROUND(SUM(W98),2) AS W98
     , ROUND(SUM(WSUM98),2) AS WSUM98
     , ROUND(SUM(WCNT98),2) AS WCNT98
     , ROUND(SUM(R98),2) AS R98
     , ROUND(SUM(RSUM98),2) AS RSUM98
     , ROUND(SUM(RCNT98),2) AS RCNT98
     , ROUND(SUM(W99),2) AS W99
     , ROUND(SUM(WSUM99),2) AS WSUM99
     , ROUND(SUM(WCNT99),2) AS WCNT99
     , ROUND(SUM(R99),2) AS R99
     , ROUND(SUM(RSUM99),2) AS RSUM99
     , ROUND(SUM(RCNT99),2) AS RCNT99
     , ROUND(SUM(W100),2) AS W100
     , ROUND(SUM(WSUM100),2) AS WSUM100
     , ROUND(SUM(WCNT100),2) AS WCNT100
     , ROUND(SUM(R100),2) AS R100
     , ROUND(SUM(RSUM100),2) AS RSUM100
     , ROUND(SUM(RCNT100),2) AS RCNT100
     , ROUND(SUM(W101),2) AS W101
     , ROUND(SUM(WSUM101),2) AS WSUM101
     , ROUND(SUM(WCNT101),2) AS WCNT101
     , ROUND(SUM(R101),2) AS R101
     , ROUND(SUM(RSUM101),2) AS RSUM101
     , ROUND(SUM(RCNT101),2) AS RCNT101
     , ROUND(SUM(W102),2) AS W102
     , ROUND(SUM(WSUM102),2) AS WSUM102
     , ROUND(SUM(WCNT102),2) AS WCNT102
     , ROUND(SUM(R102),2) AS R102
     , ROUND(SUM(RSUM102),2) AS RSUM102
     , ROUND(SUM(RCNT102),2) AS RCNT102
     , ROUND(SUM(W103),2) AS W103
     , ROUND(SUM(WSUM103),2) AS WSUM103
     , ROUND(SUM(WCNT103),2) AS WCNT103
     , ROUND(SUM(R103),2) AS R103
     , ROUND(SUM(RSUM103),2) AS RSUM103
     , ROUND(SUM(RCNT103),2) AS RCNT103
     , ROUND(SUM(W104),2) AS W104
     , ROUND(SUM(WSUM104),2) AS WSUM104
     , ROUND(SUM(WCNT104),2) AS WCNT104
     , ROUND(SUM(R104),2) AS R104
     , ROUND(SUM(RSUM104),2) AS RSUM104
     , ROUND(SUM(RCNT104),2) AS RCNT104
     , ROUND(SUM(W105),2) AS W105
     , ROUND(SUM(WSUM105),2) AS WSUM105
     , ROUND(SUM(WCNT105),2) AS WCNT105
     , ROUND(SUM(R105),2) AS R105
     , ROUND(SUM(RSUM105),2) AS RSUM105
     , ROUND(SUM(RCNT105),2) AS RCNT105
     , ROUND(SUM(W106),2) AS W106
     , ROUND(SUM(WSUM106),2) AS WSUM106
     , ROUND(SUM(WCNT106),2) AS WCNT106
     , ROUND(SUM(R106),2) AS R106
     , ROUND(SUM(RSUM106),2) AS RSUM106
     , ROUND(SUM(RCNT106),2) AS RCNT106
     , ROUND(SUM(W107),2) AS W107
     , ROUND(SUM(WSUM107),2) AS WSUM107
     , ROUND(SUM(WCNT107),2) AS WCNT107
     , ROUND(SUM(R107),2) AS R107
     , ROUND(SUM(RSUM107),2) AS RSUM107
     , ROUND(SUM(RCNT107),2) AS RCNT107
     , ROUND(SUM(W108),2) AS W108
     , ROUND(SUM(WSUM108),2) AS WSUM108
     , ROUND(SUM(WCNT108),2) AS WCNT108
     , ROUND(SUM(R108),2) AS R108
     , ROUND(SUM(RSUM108),2) AS RSUM108
     , ROUND(SUM(RCNT108),2) AS RCNT108
     , ROUND(SUM(W109),2) AS W109
     , ROUND(SUM(WSUM109),2) AS WSUM109
     , ROUND(SUM(WCNT109),2) AS WCNT109
     , ROUND(SUM(R109),2) AS R109
     , ROUND(SUM(RSUM109),2) AS RSUM109
     , ROUND(SUM(RCNT109),2) AS RCNT109
     , ROUND(SUM(W110),2) AS W110
     , ROUND(SUM(WSUM110),2) AS WSUM110
     , ROUND(SUM(WCNT110),2) AS WCNT110
     , ROUND(SUM(R110),2) AS R110
     , ROUND(SUM(RSUM110),2) AS RSUM110
     , ROUND(SUM(RCNT110),2) AS RCNT110
     , ROUND(SUM(W111),2) AS W111
     , ROUND(SUM(WSUM111),2) AS WSUM111
     , ROUND(SUM(WCNT111),2) AS WCNT111
     , ROUND(SUM(R111),2) AS R111
     , ROUND(SUM(RSUM111),2) AS RSUM111
     , ROUND(SUM(RCNT111),2) AS RCNT111
     , ROUND(SUM(W112),2) AS W112
     , ROUND(SUM(WSUM112),2) AS WSUM112
     , ROUND(SUM(WCNT112),2) AS WCNT112
     , ROUND(SUM(R112),2) AS R112
     , ROUND(SUM(RSUM112),2) AS RSUM112
     , ROUND(SUM(RCNT112),2) AS RCNT112
     , ROUND(SUM(W113),2) AS W113
     , ROUND(SUM(WSUM113),2) AS WSUM113
     , ROUND(SUM(WCNT113),2) AS WCNT113
     , ROUND(SUM(R113),2) AS R113
     , ROUND(SUM(RSUM113),2) AS RSUM113
     , ROUND(SUM(RCNT113),2) AS RCNT113
     , ROUND(SUM(W114),2) AS W114
     , ROUND(SUM(WSUM114),2) AS WSUM114
     , ROUND(SUM(WCNT114),2) AS WCNT114
     , ROUND(SUM(R114),2) AS R114
     , ROUND(SUM(RSUM114),2) AS RSUM114
     , ROUND(SUM(RCNT114),2) AS RCNT114
     , ROUND(SUM(W115),2) AS W115
     , ROUND(SUM(WSUM115),2) AS WSUM115
     , ROUND(SUM(WCNT115),2) AS WCNT115
     , ROUND(SUM(R115),2) AS R115
     , ROUND(SUM(RSUM115),2) AS RSUM115
     , ROUND(SUM(RCNT115),2) AS RCNT115
     , ROUND(SUM(W116),2) AS W116
     , ROUND(SUM(WSUM116),2) AS WSUM116
     , ROUND(SUM(WCNT116),2) AS WCNT116
     , ROUND(SUM(R116),2) AS R116
     , ROUND(SUM(RSUM116),2) AS RSUM116
     , ROUND(SUM(RCNT116),2) AS RCNT116
     , ROUND(SUM(W117),2) AS W117
     , ROUND(SUM(WSUM117),2) AS WSUM117
     , ROUND(SUM(WCNT117),2) AS WCNT117
     , ROUND(SUM(R117),2) AS R117
     , ROUND(SUM(RSUM117),2) AS RSUM117
     , ROUND(SUM(RCNT117),2) AS RCNT117
     , ROUND(SUM(W118),2) AS W118
     , ROUND(SUM(WSUM118),2) AS WSUM118
     , ROUND(SUM(WCNT118),2) AS WCNT118
     , ROUND(SUM(R118),2) AS R118
     , ROUND(SUM(RSUM118),2) AS RSUM118
     , ROUND(SUM(RCNT118),2) AS RCNT118
     , ROUND(SUM(W119),2) AS W119
     , ROUND(SUM(WSUM119),2) AS WSUM119
     , ROUND(SUM(WCNT119),2) AS WCNT119
     , ROUND(SUM(R119),2) AS R119
     , ROUND(SUM(RSUM119),2) AS RSUM119
     , ROUND(SUM(RCNT119),2) AS RCNT119
     , ROUND(SUM(W120),2) AS W120
     , ROUND(SUM(WSUM120),2) AS WSUM120
     , ROUND(SUM(WCNT120),2) AS WCNT120
     , ROUND(SUM(R120),2) AS R120
     , ROUND(SUM(RSUM120),2) AS RSUM120
     , ROUND(SUM(RCNT120),2) AS RCNT120
     , ROUND(SUM(W121),2) AS W121
     , ROUND(SUM(WSUM121),2) AS WSUM121
     , ROUND(SUM(WCNT121),2) AS WCNT121
     , ROUND(SUM(R121),2) AS R121
     , ROUND(SUM(RSUM121),2) AS RSUM121
     , ROUND(SUM(RCNT121),2) AS RCNT121
     , ROUND(SUM(W122),2) AS W122
     , ROUND(SUM(WSUM122),2) AS WSUM122
     , ROUND(SUM(WCNT122),2) AS WCNT122
     , ROUND(SUM(R122),2) AS R122
     , ROUND(SUM(RSUM122),2) AS RSUM122
     , ROUND(SUM(RCNT122),2) AS RCNT122
     , ROUND(SUM(W123),2) AS W123
     , ROUND(SUM(WSUM123),2) AS WSUM123
     , ROUND(SUM(WCNT123),2) AS WCNT123
     , ROUND(SUM(R123),2) AS R123
     , ROUND(SUM(RSUM123),2) AS RSUM123
     , ROUND(SUM(RCNT123),2) AS RCNT123
     , ROUND(SUM(W124),2) AS W124
     , ROUND(SUM(WSUM124),2) AS WSUM124
     , ROUND(SUM(WCNT124),2) AS WCNT124
     , ROUND(SUM(R124),2) AS R124
     , ROUND(SUM(RSUM124),2) AS RSUM124
     , ROUND(SUM(RCNT124),2) AS RCNT124
     , ROUND(SUM(W125),2) AS W125
     , ROUND(SUM(WSUM125),2) AS WSUM125
     , ROUND(SUM(WCNT125),2) AS WCNT125
     , ROUND(SUM(R125),2) AS R125
     , ROUND(SUM(RSUM125),2) AS RSUM125
     , ROUND(SUM(RCNT125),2) AS RCNT125
     , ROUND(SUM(W126),2) AS W126
     , ROUND(SUM(WSUM126),2) AS WSUM126
     , ROUND(SUM(WCNT126),2) AS WCNT126
     , ROUND(SUM(R126),2) AS R126
     , ROUND(SUM(RSUM126),2) AS RSUM126
     , ROUND(SUM(RCNT126),2) AS RCNT126
     , ROUND(SUM(W127),2) AS W127
     , ROUND(SUM(WSUM127),2) AS WSUM127
     , ROUND(SUM(WCNT127),2) AS WCNT127
     , ROUND(SUM(R127),2) AS R127
     , ROUND(SUM(RSUM127),2) AS RSUM127
     , ROUND(SUM(RCNT127),2) AS RCNT127
     , ROUND(SUM(W128),2) AS W128
     , ROUND(SUM(WSUM128),2) AS WSUM128
     , ROUND(SUM(WCNT128),2) AS WCNT128
     , ROUND(SUM(R128),2) AS R128
     , ROUND(SUM(RSUM128),2) AS RSUM128
     , ROUND(SUM(RCNT128),2) AS RCNT128
     , ROUND(SUM(W129),2) AS W129
     , ROUND(SUM(WSUM129),2) AS WSUM129
     , ROUND(SUM(WCNT129),2) AS WCNT129
     , ROUND(SUM(R129),2) AS R129
     , ROUND(SUM(RSUM129),2) AS RSUM129
     , ROUND(SUM(RCNT129),2) AS RCNT129
     , ROUND(SUM(W130),2) AS W130
     , ROUND(SUM(WSUM130),2) AS WSUM130
     , ROUND(SUM(WCNT130),2) AS WCNT130
     , ROUND(SUM(R130),2) AS R130
     , ROUND(SUM(RSUM130),2) AS RSUM130
     , ROUND(SUM(RCNT130),2) AS RCNT130
     , ROUND(SUM(W131),2) AS W131
     , ROUND(SUM(WSUM131),2) AS WSUM131
     , ROUND(SUM(WCNT131),2) AS WCNT131
     , ROUND(SUM(R131),2) AS R131
     , ROUND(SUM(RSUM131),2) AS RSUM131
     , ROUND(SUM(RCNT131),2) AS RCNT131
     , ROUND(SUM(W132),2) AS W132
     , ROUND(SUM(WSUM132),2) AS WSUM132
     , ROUND(SUM(WCNT132),2) AS WCNT132
     , ROUND(SUM(R132),2) AS R132
     , ROUND(SUM(RSUM132),2) AS RSUM132
     , ROUND(SUM(RCNT132),2) AS RCNT132
     , ROUND(SUM(W133),2) AS W133
     , ROUND(SUM(WSUM133),2) AS WSUM133
     , ROUND(SUM(WCNT133),2) AS WCNT133
     , ROUND(SUM(R133),2) AS R133
     , ROUND(SUM(RSUM133),2) AS RSUM133
     , ROUND(SUM(RCNT133),2) AS RCNT133
     , ROUND(SUM(W134),2) AS W134
     , ROUND(SUM(WSUM134),2) AS WSUM134
     , ROUND(SUM(WCNT134),2) AS WCNT134
     , ROUND(SUM(R134),2) AS R134
     , ROUND(SUM(RSUM134),2) AS RSUM134
     , ROUND(SUM(RCNT134),2) AS RCNT134
     , ROUND(SUM(W135),2) AS W135
     , ROUND(SUM(WSUM135),2) AS WSUM135
     , ROUND(SUM(WCNT135),2) AS WCNT135
     , ROUND(SUM(R135),2) AS R135
     , ROUND(SUM(RSUM135),2) AS RSUM135
     , ROUND(SUM(RCNT135),2) AS RCNT135
     , ROUND(SUM(W136),2) AS W136
     , ROUND(SUM(WSUM136),2) AS WSUM136
     , ROUND(SUM(WCNT136),2) AS WCNT136
     , ROUND(SUM(R136),2) AS R136
     , ROUND(SUM(RSUM136),2) AS RSUM136
     , ROUND(SUM(RCNT136),2) AS RCNT136
     , ROUND(SUM(W137),2) AS W137
     , ROUND(SUM(WSUM137),2) AS WSUM137
     , ROUND(SUM(WCNT137),2) AS WCNT137
     , ROUND(SUM(R137),2) AS R137
     , ROUND(SUM(RSUM137),2) AS RSUM137
     , ROUND(SUM(RCNT137),2) AS RCNT137
     , ROUND(SUM(W138),2) AS W138
     , ROUND(SUM(WSUM138),2) AS WSUM138
     , ROUND(SUM(WCNT138),2) AS WCNT138
     , ROUND(SUM(R138),2) AS R138
     , ROUND(SUM(RSUM138),2) AS RSUM138
     , ROUND(SUM(RCNT138),2) AS RCNT138
     , ROUND(SUM(W139),2) AS W139
     , ROUND(SUM(WSUM139),2) AS WSUM139
     , ROUND(SUM(WCNT139),2) AS WCNT139
     , ROUND(SUM(R139),2) AS R139
     , ROUND(SUM(RSUM139),2) AS RSUM139
     , ROUND(SUM(RCNT139),2) AS RCNT139
     , ROUND(SUM(W140),2) AS W140
     , ROUND(SUM(WSUM140),2) AS WSUM140
     , ROUND(SUM(WCNT140),2) AS WCNT140
     , ROUND(SUM(R140),2) AS R140
     , ROUND(SUM(RSUM140),2) AS RSUM140
     , ROUND(SUM(RCNT140),2) AS RCNT140
     , ROUND(SUM(W141),2) AS W141
     , ROUND(SUM(WSUM141),2) AS WSUM141
     , ROUND(SUM(WCNT141),2) AS WCNT141
     , ROUND(SUM(R141),2) AS R141
     , ROUND(SUM(RSUM141),2) AS RSUM141
     , ROUND(SUM(RCNT141),2) AS RCNT141
     , ROUND(SUM(W142),2) AS W142
     , ROUND(SUM(WSUM142),2) AS WSUM142
     , ROUND(SUM(WCNT142),2) AS WCNT142
     , ROUND(SUM(R142),2) AS R142
     , ROUND(SUM(RSUM142),2) AS RSUM142
     , ROUND(SUM(RCNT142),2) AS RCNT142
     , ROUND(SUM(W143),2) AS W143
     , ROUND(SUM(WSUM143),2) AS WSUM143
     , ROUND(SUM(WCNT143),2) AS WCNT143
     , ROUND(SUM(R143),2) AS R143
     , ROUND(SUM(RSUM143),2) AS RSUM143
     , ROUND(SUM(RCNT143),2) AS RCNT143
     , ROUND(SUM(W144),2) AS W144
     , ROUND(SUM(WSUM144),2) AS WSUM144
     , ROUND(SUM(WCNT144),2) AS WCNT144
     , ROUND(SUM(R144),2) AS R144
     , ROUND(SUM(RSUM144),2) AS RSUM144
     , ROUND(SUM(RCNT144),2) AS RCNT144
     , ROUND(SUM(W145),2) AS W145
     , ROUND(SUM(WSUM145),2) AS WSUM145
     , ROUND(SUM(WCNT145),2) AS WCNT145
     , ROUND(SUM(R145),2) AS R145
     , ROUND(SUM(RSUM145),2) AS RSUM145
     , ROUND(SUM(RCNT145),2) AS RCNT145
     , ROUND(SUM(W146),2) AS W146
     , ROUND(SUM(WSUM146),2) AS WSUM146
     , ROUND(SUM(WCNT146),2) AS WCNT146
     , ROUND(SUM(R146),2) AS R146
     , ROUND(SUM(RSUM146),2) AS RSUM146
     , ROUND(SUM(RCNT146),2) AS RCNT146
     , ROUND(SUM(W147),2) AS W147
     , ROUND(SUM(WSUM147),2) AS WSUM147
     , ROUND(SUM(WCNT147),2) AS WCNT147
     , ROUND(SUM(R147),2) AS R147
     , ROUND(SUM(RSUM147),2) AS RSUM147
     , ROUND(SUM(RCNT147),2) AS RCNT147
     , ROUND(SUM(W148),2) AS W148
     , ROUND(SUM(WSUM148),2) AS WSUM148
     , ROUND(SUM(WCNT148),2) AS WCNT148
     , ROUND(SUM(R148),2) AS R148
     , ROUND(SUM(RSUM148),2) AS RSUM148
     , ROUND(SUM(RCNT148),2) AS RCNT148
     , ROUND(SUM(W149),2) AS W149
     , ROUND(SUM(WSUM149),2) AS WSUM149
     , ROUND(SUM(WCNT149),2) AS WCNT149
     , ROUND(SUM(R149),2) AS R149
     , ROUND(SUM(RSUM149),2) AS RSUM149
     , ROUND(SUM(RCNT149),2) AS RCNT149
     , ROUND(SUM(W150),2) AS W150
     , ROUND(SUM(WSUM150),2) AS WSUM150
     , ROUND(SUM(WCNT150),2) AS WCNT150
     , ROUND(SUM(R150),2) AS R150
     , ROUND(SUM(RSUM150),2) AS RSUM150
     , ROUND(SUM(RCNT150),2) AS RCNT150
     , ROUND(SUM(W151),2) AS W151
     , ROUND(SUM(WSUM151),2) AS WSUM151
     , ROUND(SUM(WCNT151),2) AS WCNT151
     , ROUND(SUM(R151),2) AS R151
     , ROUND(SUM(RSUM151),2) AS RSUM151
     , ROUND(SUM(RCNT151),2) AS RCNT151
     , ROUND(SUM(W152),2) AS W152
     , ROUND(SUM(WSUM152),2) AS WSUM152
     , ROUND(SUM(WCNT152),2) AS WCNT152
     , ROUND(SUM(R152),2) AS R152
     , ROUND(SUM(RSUM152),2) AS RSUM152
     , ROUND(SUM(RCNT152),2) AS RCNT152
     , ROUND(SUM(W153),2) AS W153
     , ROUND(SUM(WSUM153),2) AS WSUM153
     , ROUND(SUM(WCNT153),2) AS WCNT153
     , ROUND(SUM(R153),2) AS R153
     , ROUND(SUM(RSUM153),2) AS RSUM153
     , ROUND(SUM(RCNT153),2) AS RCNT153
     , ROUND(SUM(W154),2) AS W154
     , ROUND(SUM(WSUM154),2) AS WSUM154
     , ROUND(SUM(WCNT154),2) AS WCNT154
     , ROUND(SUM(R154),2) AS R154
     , ROUND(SUM(RSUM154),2) AS RSUM154
     , ROUND(SUM(RCNT154),2) AS RCNT154
     , ROUND(SUM(W155),2) AS W155
     , ROUND(SUM(WSUM155),2) AS WSUM155
     , ROUND(SUM(WCNT155),2) AS WCNT155
     , ROUND(SUM(R155),2) AS R155
     , ROUND(SUM(RSUM155),2) AS RSUM155
     , ROUND(SUM(RCNT155),2) AS RCNT155
     , ROUND(SUM(W156),2) AS W156
     , ROUND(SUM(WSUM156),2) AS WSUM156
     , ROUND(SUM(WCNT156),2) AS WCNT156
     , ROUND(SUM(R156),2) AS R156
     , ROUND(SUM(RSUM156),2) AS RSUM156
     , ROUND(SUM(RCNT156),2) AS RCNT156
     , ROUND(SUM(W157),2) AS W157
     , ROUND(SUM(WSUM157),2) AS WSUM157
     , ROUND(SUM(WCNT157),2) AS WCNT157
     , ROUND(SUM(R157),2) AS R157
     , ROUND(SUM(RSUM157),2) AS RSUM157
     , ROUND(SUM(RCNT157),2) AS RCNT157
     , ROUND(SUM(W158),2) AS W158
     , ROUND(SUM(WSUM158),2) AS WSUM158
     , ROUND(SUM(WCNT158),2) AS WCNT158
     , ROUND(SUM(R158),2) AS R158
     , ROUND(SUM(RSUM158),2) AS RSUM158
     , ROUND(SUM(RCNT158),2) AS RCNT158
     , ROUND(SUM(W159),2) AS W159
     , ROUND(SUM(WSUM159),2) AS WSUM159
     , ROUND(SUM(WCNT159),2) AS WCNT159
     , ROUND(SUM(R159),2) AS R159
     , ROUND(SUM(RSUM159),2) AS RSUM159
     , ROUND(SUM(RCNT159),2) AS RCNT159
     , ROUND(SUM(W160),2) AS W160
     , ROUND(SUM(WSUM160),2) AS WSUM160
     , ROUND(SUM(WCNT160),2) AS WCNT160
     , ROUND(SUM(R160),2) AS R160
     , ROUND(SUM(RSUM160),2) AS RSUM160
     , ROUND(SUM(RCNT160),2) AS RCNT160
     , ROUND(SUM(W161),2) AS W161
     , ROUND(SUM(WSUM161),2) AS WSUM161
     , ROUND(SUM(WCNT161),2) AS WCNT161
     , ROUND(SUM(R161),2) AS R161
     , ROUND(SUM(RSUM161),2) AS RSUM161
     , ROUND(SUM(RCNT161),2) AS RCNT161
     , ROUND(SUM(W162),2) AS W162
     , ROUND(SUM(WSUM162),2) AS WSUM162
     , ROUND(SUM(WCNT162),2) AS WCNT162
     , ROUND(SUM(R162),2) AS R162
     , ROUND(SUM(RSUM162),2) AS RSUM162
     , ROUND(SUM(RCNT162),2) AS RCNT162
     , ROUND(SUM(W163),2) AS W163
     , ROUND(SUM(WSUM163),2) AS WSUM163
     , ROUND(SUM(WCNT163),2) AS WCNT163
     , ROUND(SUM(R163),2) AS R163
     , ROUND(SUM(RSUM163),2) AS RSUM163
     , ROUND(SUM(RCNT163),2) AS RCNT163
     , ROUND(SUM(W164),2) AS W164
     , ROUND(SUM(WSUM164),2) AS WSUM164
     , ROUND(SUM(WCNT164),2) AS WCNT164
     , ROUND(SUM(R164),2) AS R164
     , ROUND(SUM(RSUM164),2) AS RSUM164
     , ROUND(SUM(RCNT164),2) AS RCNT164
     , ROUND(SUM(W165),2) AS W165
     , ROUND(SUM(WSUM165),2) AS WSUM165
     , ROUND(SUM(WCNT165),2) AS WCNT165
     , ROUND(SUM(R165),2) AS R165
     , ROUND(SUM(RSUM165),2) AS RSUM165
     , ROUND(SUM(RCNT165),2) AS RCNT165
     , ROUND(SUM(W166),2) AS W166
     , ROUND(SUM(WSUM166),2) AS WSUM166
     , ROUND(SUM(WCNT166),2) AS WCNT166
     , ROUND(SUM(R166),2) AS R166
     , ROUND(SUM(RSUM166),2) AS RSUM166
     , ROUND(SUM(RCNT166),2) AS RCNT166
     , ROUND(SUM(W167),2) AS W167
     , ROUND(SUM(WSUM167),2) AS WSUM167
     , ROUND(SUM(WCNT167),2) AS WCNT167
     , ROUND(SUM(R167),2) AS R167
     , ROUND(SUM(RSUM167),2) AS RSUM167
     , ROUND(SUM(RCNT167),2) AS RCNT167
     , ROUND(SUM(W168),2) AS W168
     , ROUND(SUM(WSUM168),2) AS WSUM168
     , ROUND(SUM(WCNT168),2) AS WCNT168
     , ROUND(SUM(R168),2) AS R168
     , ROUND(SUM(RSUM168),2) AS RSUM168
     , ROUND(SUM(RCNT168),2) AS RCNT168
     , ROUND(SUM(W169),2) AS W169
     , ROUND(SUM(WSUM169),2) AS WSUM169
     , ROUND(SUM(WCNT169),2) AS WCNT169
     , ROUND(SUM(R169),2) AS R169
     , ROUND(SUM(RSUM169),2) AS RSUM169
     , ROUND(SUM(RCNT169),2) AS RCNT169
     , ROUND(SUM(W170),2) AS W170
     , ROUND(SUM(WSUM170),2) AS WSUM170
     , ROUND(SUM(WCNT170),2) AS WCNT170
     , ROUND(SUM(R170),2) AS R170
     , ROUND(SUM(RSUM170),2) AS RSUM170
     , ROUND(SUM(RCNT170),2) AS RCNT170
     , ROUND(SUM(W171),2) AS W171
     , ROUND(SUM(WSUM171),2) AS WSUM171
     , ROUND(SUM(WCNT171),2) AS WCNT171
     , ROUND(SUM(R171),2) AS R171
     , ROUND(SUM(RSUM171),2) AS RSUM171
     , ROUND(SUM(RCNT171),2) AS RCNT171
     , ROUND(SUM(W172),2) AS W172
     , ROUND(SUM(WSUM172),2) AS WSUM172
     , ROUND(SUM(WCNT172),2) AS WCNT172
     , ROUND(SUM(R172),2) AS R172
     , ROUND(SUM(RSUM172),2) AS RSUM172
     , ROUND(SUM(RCNT172),2) AS RCNT172
     , ROUND(SUM(W173),2) AS W173
     , ROUND(SUM(WSUM173),2) AS WSUM173
     , ROUND(SUM(WCNT173),2) AS WCNT173
     , ROUND(SUM(R173),2) AS R173
     , ROUND(SUM(RSUM173),2) AS RSUM173
     , ROUND(SUM(RCNT173),2) AS RCNT173
     , ROUND(SUM(W174),2) AS W174
     , ROUND(SUM(WSUM174),2) AS WSUM174
     , ROUND(SUM(WCNT174),2) AS WCNT174
     , ROUND(SUM(R174),2) AS R174
     , ROUND(SUM(RSUM174),2) AS RSUM174
     , ROUND(SUM(RCNT174),2) AS RCNT174
     , ROUND(SUM(W175),2) AS W175
     , ROUND(SUM(WSUM175),2) AS WSUM175
     , ROUND(SUM(WCNT175),2) AS WCNT175
     , ROUND(SUM(R175),2) AS R175
     , ROUND(SUM(RSUM175),2) AS RSUM175
     , ROUND(SUM(RCNT175),2) AS RCNT175
     , ROUND(SUM(W176),2) AS W176
     , ROUND(SUM(WSUM176),2) AS WSUM176
     , ROUND(SUM(WCNT176),2) AS WCNT176
     , ROUND(SUM(R176),2) AS R176
     , ROUND(SUM(RSUM176),2) AS RSUM176
     , ROUND(SUM(RCNT176),2) AS RCNT176
     , ROUND(SUM(W177),2) AS W177
     , ROUND(SUM(WSUM177),2) AS WSUM177
     , ROUND(SUM(WCNT177),2) AS WCNT177
     , ROUND(SUM(R177),2) AS R177
     , ROUND(SUM(RSUM177),2) AS RSUM177
     , ROUND(SUM(RCNT177),2) AS RCNT177
     , ROUND(SUM(W178),2) AS W178
     , ROUND(SUM(WSUM178),2) AS WSUM178
     , ROUND(SUM(WCNT178),2) AS WCNT178
     , ROUND(SUM(R178),2) AS R178
     , ROUND(SUM(RSUM178),2) AS RSUM178
     , ROUND(SUM(RCNT178),2) AS RCNT178
     , ROUND(SUM(W179),2) AS W179
     , ROUND(SUM(WSUM179),2) AS WSUM179
     , ROUND(SUM(WCNT179),2) AS WCNT179
     , ROUND(SUM(R179),2) AS R179
     , ROUND(SUM(RSUM179),2) AS RSUM179
     , ROUND(SUM(RCNT179),2) AS RCNT179
     , ROUND(SUM(W180),2) AS W180
     , ROUND(SUM(WSUM180),2) AS WSUM180
     , ROUND(SUM(WCNT180),2) AS WCNT180
     , ROUND(SUM(R180),2) AS R180
     , ROUND(SUM(RSUM180),2) AS RSUM180
     , ROUND(SUM(RCNT180),2) AS RCNT180
     , ROUND(SUM(W181),2) AS W181
     , ROUND(SUM(WSUM181),2) AS WSUM181
     , ROUND(SUM(WCNT181),2) AS WCNT181
     , ROUND(SUM(R181),2) AS R181
     , ROUND(SUM(RSUM181),2) AS RSUM181
     , ROUND(SUM(RCNT181),2) AS RCNT181
     , ROUND(SUM(W182),2) AS W182
     , ROUND(SUM(WSUM182),2) AS WSUM182
     , ROUND(SUM(WCNT182),2) AS WCNT182
     , ROUND(SUM(R182),2) AS R182
     , ROUND(SUM(RSUM182),2) AS RSUM182
     , ROUND(SUM(RCNT182),2) AS RCNT182
     , ROUND(SUM(W183),2) AS W183
     , ROUND(SUM(WSUM183),2) AS WSUM183
     , ROUND(SUM(WCNT183),2) AS WCNT183
     , ROUND(SUM(R183),2) AS R183
     , ROUND(SUM(RSUM183),2) AS RSUM183
     , ROUND(SUM(RCNT183),2) AS RCNT183
     , ROUND(SUM(W184),2) AS W184
     , ROUND(SUM(WSUM184),2) AS WSUM184
     , ROUND(SUM(WCNT184),2) AS WCNT184
     , ROUND(SUM(R184),2) AS R184
     , ROUND(SUM(RSUM184),2) AS RSUM184
     , ROUND(SUM(RCNT184),2) AS RCNT184
     , ROUND(SUM(W185),2) AS W185
     , ROUND(SUM(WSUM185),2) AS WSUM185
     , ROUND(SUM(WCNT185),2) AS WCNT185
     , ROUND(SUM(R185),2) AS R185
     , ROUND(SUM(RSUM185),2) AS RSUM185
     , ROUND(SUM(RCNT185),2) AS RCNT185
     , ROUND(SUM(W186),2) AS W186
     , ROUND(SUM(WSUM186),2) AS WSUM186
     , ROUND(SUM(WCNT186),2) AS WCNT186
     , ROUND(SUM(R186),2) AS R186
     , ROUND(SUM(RSUM186),2) AS RSUM186
     , ROUND(SUM(RCNT186),2) AS RCNT186
     , ROUND(SUM(W187),2) AS W187
     , ROUND(SUM(WSUM187),2) AS WSUM187
     , ROUND(SUM(WCNT187),2) AS WCNT187
     , ROUND(SUM(R187),2) AS R187
     , ROUND(SUM(RSUM187),2) AS RSUM187
     , ROUND(SUM(RCNT187),2) AS RCNT187
     , ROUND(SUM(W188),2) AS W188
     , ROUND(SUM(WSUM188),2) AS WSUM188
     , ROUND(SUM(WCNT188),2) AS WCNT188
     , ROUND(SUM(R188),2) AS R188
     , ROUND(SUM(RSUM188),2) AS RSUM188
     , ROUND(SUM(RCNT188),2) AS RCNT188
     , ROUND(SUM(W189),2) AS W189
     , ROUND(SUM(WSUM189),2) AS WSUM189
     , ROUND(SUM(WCNT189),2) AS WCNT189
     , ROUND(SUM(R189),2) AS R189
     , ROUND(SUM(RSUM189),2) AS RSUM189
     , ROUND(SUM(RCNT189),2) AS RCNT189
     , ROUND(SUM(W190),2) AS W190
     , ROUND(SUM(WSUM190),2) AS WSUM190
     , ROUND(SUM(WCNT190),2) AS WCNT190
     , ROUND(SUM(R190),2) AS R190
     , ROUND(SUM(RSUM190),2) AS RSUM190
     , ROUND(SUM(RCNT190),2) AS RCNT190
     , ROUND(SUM(W191),2) AS W191
     , ROUND(SUM(WSUM191),2) AS WSUM191
     , ROUND(SUM(WCNT191),2) AS WCNT191
     , ROUND(SUM(R191),2) AS R191
     , ROUND(SUM(RSUM191),2) AS RSUM191
     , ROUND(SUM(RCNT191),2) AS RCNT191
     , ROUND(SUM(W192),2) AS W192
     , ROUND(SUM(WSUM192),2) AS WSUM192
     , ROUND(SUM(WCNT192),2) AS WCNT192
     , ROUND(SUM(R192),2) AS R192
     , ROUND(SUM(RSUM192),2) AS RSUM192
     , ROUND(SUM(RCNT192),2) AS RCNT192
     , ROUND(SUM(W193),2) AS W193
     , ROUND(SUM(WSUM193),2) AS WSUM193
     , ROUND(SUM(WCNT193),2) AS WCNT193
     , ROUND(SUM(R193),2) AS R193
     , ROUND(SUM(RSUM193),2) AS RSUM193
     , ROUND(SUM(RCNT193),2) AS RCNT193
     , ROUND(SUM(W194),2) AS W194
     , ROUND(SUM(WSUM194),2) AS WSUM194
     , ROUND(SUM(WCNT194),2) AS WCNT194
     , ROUND(SUM(R194),2) AS R194
     , ROUND(SUM(RSUM194),2) AS RSUM194
     , ROUND(SUM(RCNT194),2) AS RCNT194
     , ROUND(SUM(W195),2) AS W195
     , ROUND(SUM(WSUM195),2) AS WSUM195
     , ROUND(SUM(WCNT195),2) AS WCNT195
     , ROUND(SUM(R195),2) AS R195
     , ROUND(SUM(RSUM195),2) AS RSUM195
     , ROUND(SUM(RCNT195),2) AS RCNT195
     , ROUND(SUM(W196),2) AS W196
     , ROUND(SUM(WSUM196),2) AS WSUM196
     , ROUND(SUM(WCNT196),2) AS WCNT196
     , ROUND(SUM(R196),2) AS R196
     , ROUND(SUM(RSUM196),2) AS RSUM196
     , ROUND(SUM(RCNT196),2) AS RCNT196
     , ROUND(SUM(W197),2) AS W197
     , ROUND(SUM(WSUM197),2) AS WSUM197
     , ROUND(SUM(WCNT197),2) AS WCNT197
     , ROUND(SUM(R197),2) AS R197
     , ROUND(SUM(RSUM197),2) AS RSUM197
     , ROUND(SUM(RCNT197),2) AS RCNT197
     , ROUND(SUM(W198),2) AS W198
     , ROUND(SUM(WSUM198),2) AS WSUM198
     , ROUND(SUM(WCNT198),2) AS WCNT198
     , ROUND(SUM(R198),2) AS R198
     , ROUND(SUM(RSUM198),2) AS RSUM198
     , ROUND(SUM(RCNT198),2) AS RCNT198
     , ROUND(SUM(W199),2) AS W199
     , ROUND(SUM(WSUM199),2) AS WSUM199
     , ROUND(SUM(WCNT199),2) AS WCNT199
     , ROUND(SUM(R199),2) AS R199
     , ROUND(SUM(RSUM199),2) AS RSUM199
     , ROUND(SUM(RCNT199),2) AS RCNT199
     , ROUND(SUM(W200),2) AS W200
     , ROUND(SUM(WSUM200),2) AS WSUM200
     , ROUND(SUM(WCNT200),2) AS WCNT200
     , ROUND(SUM(R200),2) AS R200
     , ROUND(SUM(RSUM200),2) AS RSUM200
     , ROUND(SUM(RCNT200),2) AS RCNT200
     , ROUND(SUM(W201),2) AS W201
     , ROUND(SUM(WSUM201),2) AS WSUM201
     , ROUND(SUM(WCNT201),2) AS WCNT201
     , ROUND(SUM(R201),2) AS R201
     , ROUND(SUM(RSUM201),2) AS RSUM201
     , ROUND(SUM(RCNT201),2) AS RCNT201
     , ROUND(SUM(W202),2) AS W202
     , ROUND(SUM(WSUM202),2) AS WSUM202
     , ROUND(SUM(WCNT202),2) AS WCNT202
     , ROUND(SUM(R202),2) AS R202
     , ROUND(SUM(RSUM202),2) AS RSUM202
     , ROUND(SUM(RCNT202),2) AS RCNT202
     , ROUND(SUM(W203),2) AS W203
     , ROUND(SUM(WSUM203),2) AS WSUM203
     , ROUND(SUM(WCNT203),2) AS WCNT203
     , ROUND(SUM(R203),2) AS R203
     , ROUND(SUM(RSUM203),2) AS RSUM203
     , ROUND(SUM(RCNT203),2) AS RCNT203
     , ROUND(SUM(W204),2) AS W204
     , ROUND(SUM(WSUM204),2) AS WSUM204
     , ROUND(SUM(WCNT204),2) AS WCNT204
     , ROUND(SUM(R204),2) AS R204
     , ROUND(SUM(RSUM204),2) AS RSUM204
     , ROUND(SUM(RCNT204),2) AS RCNT204
     , ROUND(SUM(W205),2) AS W205
     , ROUND(SUM(WSUM205),2) AS WSUM205
     , ROUND(SUM(WCNT205),2) AS WCNT205
     , ROUND(SUM(R205),2) AS R205
     , ROUND(SUM(RSUM205),2) AS RSUM205
     , ROUND(SUM(RCNT205),2) AS RCNT205
     , ROUND(SUM(W206),2) AS W206
     , ROUND(SUM(WSUM206),2) AS WSUM206
     , ROUND(SUM(WCNT206),2) AS WCNT206
     , ROUND(SUM(R206),2) AS R206
     , ROUND(SUM(RSUM206),2) AS RSUM206
     , ROUND(SUM(RCNT206),2) AS RCNT206
     , ROUND(SUM(W207),2) AS W207
     , ROUND(SUM(WSUM207),2) AS WSUM207
     , ROUND(SUM(WCNT207),2) AS WCNT207
     , ROUND(SUM(R207),2) AS R207
     , ROUND(SUM(RSUM207),2) AS RSUM207
     , ROUND(SUM(RCNT207),2) AS RCNT207
     , ROUND(SUM(W208),2) AS W208
     , ROUND(SUM(WSUM208),2) AS WSUM208
     , ROUND(SUM(WCNT208),2) AS WCNT208
     , ROUND(SUM(R208),2) AS R208
     , ROUND(SUM(RSUM208),2) AS RSUM208
     , ROUND(SUM(RCNT208),2) AS RCNT208
     , ROUND(SUM(W209),2) AS W209
     , ROUND(SUM(WSUM209),2) AS WSUM209
     , ROUND(SUM(WCNT209),2) AS WCNT209
     , ROUND(SUM(R209),2) AS R209
     , ROUND(SUM(RSUM209),2) AS RSUM209
     , ROUND(SUM(RCNT209),2) AS RCNT209
     , ROUND(SUM(W210),2) AS W210
     , ROUND(SUM(WSUM210),2) AS WSUM210
     , ROUND(SUM(WCNT210),2) AS WCNT210
     , ROUND(SUM(R210),2) AS R210
     , ROUND(SUM(RSUM210),2) AS RSUM210
     , ROUND(SUM(RCNT210),2) AS RCNT210
     , ROUND(SUM(W211),2) AS W211
     , ROUND(SUM(WSUM211),2) AS WSUM211
     , ROUND(SUM(WCNT211),2) AS WCNT211
     , ROUND(SUM(R211),2) AS R211
     , ROUND(SUM(RSUM211),2) AS RSUM211
     , ROUND(SUM(RCNT211),2) AS RCNT211
     , ROUND(SUM(W212),2) AS W212
     , ROUND(SUM(WSUM212),2) AS WSUM212
     , ROUND(SUM(WCNT212),2) AS WCNT212
     , ROUND(SUM(R212),2) AS R212
     , ROUND(SUM(RSUM212),2) AS RSUM212
     , ROUND(SUM(RCNT212),2) AS RCNT212
     , ROUND(SUM(W213),2) AS W213
     , ROUND(SUM(WSUM213),2) AS WSUM213
     , ROUND(SUM(WCNT213),2) AS WCNT213
     , ROUND(SUM(R213),2) AS R213
     , ROUND(SUM(RSUM213),2) AS RSUM213
     , ROUND(SUM(RCNT213),2) AS RCNT213
     , ROUND(SUM(W214),2) AS W214
     , ROUND(SUM(WSUM214),2) AS WSUM214
     , ROUND(SUM(WCNT214),2) AS WCNT214
     , ROUND(SUM(R214),2) AS R214
     , ROUND(SUM(RSUM214),2) AS RSUM214
     , ROUND(SUM(RCNT214),2) AS RCNT214
     , ROUND(SUM(W215),2) AS W215
     , ROUND(SUM(WSUM215),2) AS WSUM215
     , ROUND(SUM(WCNT215),2) AS WCNT215
     , ROUND(SUM(R215),2) AS R215
     , ROUND(SUM(RSUM215),2) AS RSUM215
     , ROUND(SUM(RCNT215),2) AS RCNT215
     , ROUND(SUM(W216),2) AS W216
     , ROUND(SUM(WSUM216),2) AS WSUM216
     , ROUND(SUM(WCNT216),2) AS WCNT216
     , ROUND(SUM(R216),2) AS R216
     , ROUND(SUM(RSUM216),2) AS RSUM216
     , ROUND(SUM(RCNT216),2) AS RCNT216
  FROM ( 
        SELECT SHIP_DATE, MAT_GRP_1, MAT_CMF_10,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ' 
              , DECODE(SUM(SHIP_QTY),0,0,SUM(TOTAL_TAT_QTY)/SUM(SHIP_QTY)) AS CTOT   
              , DECODE(OPER, 'A0000', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W0
              , DECODE(OPER, 'A0000', SUM(WAIT_TAT_QTY), 0) AS WSUM0
              , DECODE(OPER, 'A0000', SUM(SHIP_QTY), 0) AS WCNT0
              , DECODE(OPER, 'A0000', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R0
              , DECODE(OPER, 'A0000', SUM(PROC_TAT_QTY), 0) AS RSUM0
              , DECODE(OPER, 'A0000', SUM(SHIP_QTY), 0) AS RCNT0
              , DECODE(OPER, 'A0005', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W1
              , DECODE(OPER, 'A0005', SUM(WAIT_TAT_QTY), 0) AS WSUM1
              , DECODE(OPER, 'A0005', SUM(SHIP_QTY), 0) AS WCNT1
              , DECODE(OPER, 'A0005', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R1
              , DECODE(OPER, 'A0005', SUM(PROC_TAT_QTY), 0) AS RSUM1
              , DECODE(OPER, 'A0005', SUM(SHIP_QTY), 0) AS RCNT1
              , DECODE(OPER, 'A0010', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W2
              , DECODE(OPER, 'A0010', SUM(WAIT_TAT_QTY), 0) AS WSUM2
              , DECODE(OPER, 'A0010', SUM(SHIP_QTY), 0) AS WCNT2
              , DECODE(OPER, 'A0010', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R2
              , DECODE(OPER, 'A0010', SUM(PROC_TAT_QTY), 0) AS RSUM2
              , DECODE(OPER, 'A0010', SUM(SHIP_QTY), 0) AS RCNT2
              , DECODE(OPER, 'A0012', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W3
              , DECODE(OPER, 'A0012', SUM(WAIT_TAT_QTY), 0) AS WSUM3
              , DECODE(OPER, 'A0012', SUM(SHIP_QTY), 0) AS WCNT3
              , DECODE(OPER, 'A0012', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R3
              , DECODE(OPER, 'A0012', SUM(PROC_TAT_QTY), 0) AS RSUM3
              , DECODE(OPER, 'A0012', SUM(SHIP_QTY), 0) AS RCNT3
              , DECODE(OPER, 'A0013', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W4
              , DECODE(OPER, 'A0013', SUM(WAIT_TAT_QTY), 0) AS WSUM4
              , DECODE(OPER, 'A0013', SUM(SHIP_QTY), 0) AS WCNT4
              , DECODE(OPER, 'A0013', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R4
              , DECODE(OPER, 'A0013', SUM(PROC_TAT_QTY), 0) AS RSUM4
              , DECODE(OPER, 'A0013', SUM(SHIP_QTY), 0) AS RCNT4
              , DECODE(OPER, 'A0015', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W5
              , DECODE(OPER, 'A0015', SUM(WAIT_TAT_QTY), 0) AS WSUM5
              , DECODE(OPER, 'A0015', SUM(SHIP_QTY), 0) AS WCNT5
              , DECODE(OPER, 'A0015', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R5
              , DECODE(OPER, 'A0015', SUM(PROC_TAT_QTY), 0) AS RSUM5
              , DECODE(OPER, 'A0015', SUM(SHIP_QTY), 0) AS RCNT5
              , DECODE(OPER, 'A0020', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W6
              , DECODE(OPER, 'A0020', SUM(WAIT_TAT_QTY), 0) AS WSUM6
              , DECODE(OPER, 'A0020', SUM(SHIP_QTY), 0) AS WCNT6
              , DECODE(OPER, 'A0020', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R6
              , DECODE(OPER, 'A0020', SUM(PROC_TAT_QTY), 0) AS RSUM6
              , DECODE(OPER, 'A0020', SUM(SHIP_QTY), 0) AS RCNT6
              , DECODE(OPER, 'A0055', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W7
              , DECODE(OPER, 'A0055', SUM(WAIT_TAT_QTY), 0) AS WSUM7
              , DECODE(OPER, 'A0055', SUM(SHIP_QTY), 0) AS WCNT7
              , DECODE(OPER, 'A0055', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R7
              , DECODE(OPER, 'A0055', SUM(PROC_TAT_QTY), 0) AS RSUM7
              , DECODE(OPER, 'A0055', SUM(SHIP_QTY), 0) AS RCNT7
              , DECODE(OPER, 'A0023', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W8
              , DECODE(OPER, 'A0023', SUM(WAIT_TAT_QTY), 0) AS WSUM8
              , DECODE(OPER, 'A0023', SUM(SHIP_QTY), 0) AS WCNT8
              , DECODE(OPER, 'A0023', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R8
              , DECODE(OPER, 'A0023', SUM(PROC_TAT_QTY), 0) AS RSUM8
              , DECODE(OPER, 'A0023', SUM(SHIP_QTY), 0) AS RCNT8
              , DECODE(OPER, 'A0025', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W9
              , DECODE(OPER, 'A0025', SUM(WAIT_TAT_QTY), 0) AS WSUM9
              , DECODE(OPER, 'A0025', SUM(SHIP_QTY), 0) AS WCNT9
              , DECODE(OPER, 'A0025', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R9
              , DECODE(OPER, 'A0025', SUM(PROC_TAT_QTY), 0) AS RSUM9
              , DECODE(OPER, 'A0025', SUM(SHIP_QTY), 0) AS RCNT9
              , DECODE(OPER, 'A0030', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W10
              , DECODE(OPER, 'A0030', SUM(WAIT_TAT_QTY), 0) AS WSUM10
              , DECODE(OPER, 'A0030', SUM(SHIP_QTY), 0) AS WCNT10
              , DECODE(OPER, 'A0030', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R10
              , DECODE(OPER, 'A0030', SUM(PROC_TAT_QTY), 0) AS RSUM10
              , DECODE(OPER, 'A0030', SUM(SHIP_QTY), 0) AS RCNT10
              , DECODE(OPER, 'A0190', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W11
              , DECODE(OPER, 'A0190', SUM(WAIT_TAT_QTY), 0) AS WSUM11
              , DECODE(OPER, 'A0190', SUM(SHIP_QTY), 0) AS WCNT11
              , DECODE(OPER, 'A0190', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R11
              , DECODE(OPER, 'A0190', SUM(PROC_TAT_QTY), 0) AS RSUM11
              , DECODE(OPER, 'A0190', SUM(SHIP_QTY), 0) AS RCNT11
              , DECODE(OPER, 'A0033', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W12
              , DECODE(OPER, 'A0033', SUM(WAIT_TAT_QTY), 0) AS WSUM12
              , DECODE(OPER, 'A0033', SUM(SHIP_QTY), 0) AS WCNT12
              , DECODE(OPER, 'A0033', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R12
              , DECODE(OPER, 'A0033', SUM(PROC_TAT_QTY), 0) AS RSUM12
              , DECODE(OPER, 'A0033', SUM(SHIP_QTY), 0) AS RCNT12
              , DECODE(OPER, 'A0040', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W13
              , DECODE(OPER, 'A0040', SUM(WAIT_TAT_QTY), 0) AS WSUM13
              , DECODE(OPER, 'A0040', SUM(SHIP_QTY), 0) AS WCNT13
              , DECODE(OPER, 'A0040', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R13
              , DECODE(OPER, 'A0040', SUM(PROC_TAT_QTY), 0) AS RSUM13
              , DECODE(OPER, 'A0040', SUM(SHIP_QTY), 0) AS RCNT13
              , DECODE(OPER, 'A0041', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W14
              , DECODE(OPER, 'A0041', SUM(WAIT_TAT_QTY), 0) AS WSUM14
              , DECODE(OPER, 'A0041', SUM(SHIP_QTY), 0) AS WCNT14
              , DECODE(OPER, 'A0041', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R14
              , DECODE(OPER, 'A0041', SUM(PROC_TAT_QTY), 0) AS RSUM14
              , DECODE(OPER, 'A0041', SUM(SHIP_QTY), 0) AS RCNT14
              , DECODE(OPER, 'A0042', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W15
              , DECODE(OPER, 'A0042', SUM(WAIT_TAT_QTY), 0) AS WSUM15
              , DECODE(OPER, 'A0042', SUM(SHIP_QTY), 0) AS WCNT15
              , DECODE(OPER, 'A0042', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R15
              , DECODE(OPER, 'A0042', SUM(PROC_TAT_QTY), 0) AS RSUM15
              , DECODE(OPER, 'A0042', SUM(SHIP_QTY), 0) AS RCNT15
              , DECODE(OPER, 'A0050', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W16
              , DECODE(OPER, 'A0050', SUM(WAIT_TAT_QTY), 0) AS WSUM16
              , DECODE(OPER, 'A0050', SUM(SHIP_QTY), 0) AS WCNT16
              , DECODE(OPER, 'A0050', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R16
              , DECODE(OPER, 'A0050', SUM(PROC_TAT_QTY), 0) AS RSUM16
              , DECODE(OPER, 'A0050', SUM(SHIP_QTY), 0) AS RCNT16
              , DECODE(OPER, 'A0060', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W17
              , DECODE(OPER, 'A0060', SUM(WAIT_TAT_QTY), 0) AS WSUM17
              , DECODE(OPER, 'A0060', SUM(SHIP_QTY), 0) AS WCNT17
              , DECODE(OPER, 'A0060', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R17
              , DECODE(OPER, 'A0060', SUM(PROC_TAT_QTY), 0) AS RSUM17
              , DECODE(OPER, 'A0060', SUM(SHIP_QTY), 0) AS RCNT17
              , DECODE(OPER, 'A0070', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W18
              , DECODE(OPER, 'A0070', SUM(WAIT_TAT_QTY), 0) AS WSUM18
              , DECODE(OPER, 'A0070', SUM(SHIP_QTY), 0) AS WCNT18
              , DECODE(OPER, 'A0070', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R18
              , DECODE(OPER, 'A0070', SUM(PROC_TAT_QTY), 0) AS RSUM18
              , DECODE(OPER, 'A0070', SUM(SHIP_QTY), 0) AS RCNT18
              , DECODE(OPER, 'A0080', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W19
              , DECODE(OPER, 'A0080', SUM(WAIT_TAT_QTY), 0) AS WSUM19
              , DECODE(OPER, 'A0080', SUM(SHIP_QTY), 0) AS WCNT19
              , DECODE(OPER, 'A0080', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R19
              , DECODE(OPER, 'A0080', SUM(PROC_TAT_QTY), 0) AS RSUM19
              , DECODE(OPER, 'A0080', SUM(SHIP_QTY), 0) AS RCNT19
              , DECODE(OPER, 'A0090', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W20
              , DECODE(OPER, 'A0090', SUM(WAIT_TAT_QTY), 0) AS WSUM20
              , DECODE(OPER, 'A0090', SUM(SHIP_QTY), 0) AS WCNT20
              , DECODE(OPER, 'A0090', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R20
              , DECODE(OPER, 'A0090', SUM(PROC_TAT_QTY), 0) AS RSUM20
              , DECODE(OPER, 'A0090', SUM(SHIP_QTY), 0) AS RCNT20
              , DECODE(OPER, 'A0095', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W21
              , DECODE(OPER, 'A0095', SUM(WAIT_TAT_QTY), 0) AS WSUM21
              , DECODE(OPER, 'A0095', SUM(SHIP_QTY), 0) AS WCNT21
              , DECODE(OPER, 'A0095', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R21
              , DECODE(OPER, 'A0095', SUM(PROC_TAT_QTY), 0) AS RSUM21
              , DECODE(OPER, 'A0095', SUM(SHIP_QTY), 0) AS RCNT21
              , DECODE(OPER, 'A0130', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W22
              , DECODE(OPER, 'A0130', SUM(WAIT_TAT_QTY), 0) AS WSUM22
              , DECODE(OPER, 'A0130', SUM(SHIP_QTY), 0) AS WCNT22
              , DECODE(OPER, 'A0130', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R22
              , DECODE(OPER, 'A0130', SUM(PROC_TAT_QTY), 0) AS RSUM22
              , DECODE(OPER, 'A0130', SUM(SHIP_QTY), 0) AS RCNT22
              , DECODE(OPER, 'A0140', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W23
              , DECODE(OPER, 'A0140', SUM(WAIT_TAT_QTY), 0) AS WSUM23
              , DECODE(OPER, 'A0140', SUM(SHIP_QTY), 0) AS WCNT23
              , DECODE(OPER, 'A0140', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R23
              , DECODE(OPER, 'A0140', SUM(PROC_TAT_QTY), 0) AS RSUM23
              , DECODE(OPER, 'A0140', SUM(SHIP_QTY), 0) AS RCNT23
              , DECODE(OPER, 'A0160', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W24
              , DECODE(OPER, 'A0160', SUM(WAIT_TAT_QTY), 0) AS WSUM24
              , DECODE(OPER, 'A0160', SUM(SHIP_QTY), 0) AS WCNT24
              , DECODE(OPER, 'A0160', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R24
              , DECODE(OPER, 'A0160', SUM(PROC_TAT_QTY), 0) AS RSUM24
              , DECODE(OPER, 'A0160', SUM(SHIP_QTY), 0) AS RCNT24
              , DECODE(OPER, 'A0165', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W25
              , DECODE(OPER, 'A0165', SUM(WAIT_TAT_QTY), 0) AS WSUM25
              , DECODE(OPER, 'A0165', SUM(SHIP_QTY), 0) AS WCNT25
              , DECODE(OPER, 'A0165', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R25
              , DECODE(OPER, 'A0165', SUM(PROC_TAT_QTY), 0) AS RSUM25
              , DECODE(OPER, 'A0165', SUM(SHIP_QTY), 0) AS RCNT25
              , DECODE(OPER, 'A0065', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W26
              , DECODE(OPER, 'A0065', SUM(WAIT_TAT_QTY), 0) AS WSUM26
              , DECODE(OPER, 'A0065', SUM(SHIP_QTY), 0) AS WCNT26
              , DECODE(OPER, 'A0065', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R26
              , DECODE(OPER, 'A0065', SUM(PROC_TAT_QTY), 0) AS RSUM26
              , DECODE(OPER, 'A0065', SUM(SHIP_QTY), 0) AS RCNT26
              , DECODE(OPER, 'A0100', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W27
              , DECODE(OPER, 'A0100', SUM(WAIT_TAT_QTY), 0) AS WSUM27
              , DECODE(OPER, 'A0100', SUM(SHIP_QTY), 0) AS WCNT27
              , DECODE(OPER, 'A0100', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R27
              , DECODE(OPER, 'A0100', SUM(PROC_TAT_QTY), 0) AS RSUM27
              , DECODE(OPER, 'A0100', SUM(SHIP_QTY), 0) AS RCNT27
              , DECODE(OPER, 'A0150', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W28
              , DECODE(OPER, 'A0150', SUM(WAIT_TAT_QTY), 0) AS WSUM28
              , DECODE(OPER, 'A0150', SUM(SHIP_QTY), 0) AS WCNT28
              , DECODE(OPER, 'A0150', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R28
              , DECODE(OPER, 'A0150', SUM(PROC_TAT_QTY), 0) AS RSUM28
              , DECODE(OPER, 'A0150', SUM(SHIP_QTY), 0) AS RCNT28
              , DECODE(OPER, 'A0175', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W29
              , DECODE(OPER, 'A0175', SUM(WAIT_TAT_QTY), 0) AS WSUM29
              , DECODE(OPER, 'A0175', SUM(SHIP_QTY), 0) AS WCNT29
              , DECODE(OPER, 'A0175', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R29
              , DECODE(OPER, 'A0175', SUM(PROC_TAT_QTY), 0) AS RSUM29
              , DECODE(OPER, 'A0175', SUM(SHIP_QTY), 0) AS RCNT29
              , DECODE(OPER, 'A0170', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W30
              , DECODE(OPER, 'A0170', SUM(WAIT_TAT_QTY), 0) AS WSUM30
              , DECODE(OPER, 'A0170', SUM(SHIP_QTY), 0) AS WCNT30
              , DECODE(OPER, 'A0170', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R30
              , DECODE(OPER, 'A0170', SUM(PROC_TAT_QTY), 0) AS RSUM30
              , DECODE(OPER, 'A0170', SUM(SHIP_QTY), 0) AS RCNT30
              , DECODE(OPER, 'A0180', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W31
              , DECODE(OPER, 'A0180', SUM(WAIT_TAT_QTY), 0) AS WSUM31
              , DECODE(OPER, 'A0180', SUM(SHIP_QTY), 0) AS WCNT31
              , DECODE(OPER, 'A0180', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R31
              , DECODE(OPER, 'A0180', SUM(PROC_TAT_QTY), 0) AS RSUM31
              , DECODE(OPER, 'A0180', SUM(SHIP_QTY), 0) AS RCNT31
              , DECODE(OPER, 'A0200', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W32
              , DECODE(OPER, 'A0200', SUM(WAIT_TAT_QTY), 0) AS WSUM32
              , DECODE(OPER, 'A0200', SUM(SHIP_QTY), 0) AS WCNT32
              , DECODE(OPER, 'A0200', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R32
              , DECODE(OPER, 'A0200', SUM(PROC_TAT_QTY), 0) AS RSUM32
              , DECODE(OPER, 'A0200', SUM(SHIP_QTY), 0) AS RCNT32
              , DECODE(OPER, 'A0201', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W33
              , DECODE(OPER, 'A0201', SUM(WAIT_TAT_QTY), 0) AS WSUM33
              , DECODE(OPER, 'A0201', SUM(SHIP_QTY), 0) AS WCNT33
              , DECODE(OPER, 'A0201', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R33
              , DECODE(OPER, 'A0201', SUM(PROC_TAT_QTY), 0) AS RSUM33
              , DECODE(OPER, 'A0201', SUM(SHIP_QTY), 0) AS RCNT33
              , DECODE(OPER, 'A0202', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W34
              , DECODE(OPER, 'A0202', SUM(WAIT_TAT_QTY), 0) AS WSUM34
              , DECODE(OPER, 'A0202', SUM(SHIP_QTY), 0) AS WCNT34
              , DECODE(OPER, 'A0202', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R34
              , DECODE(OPER, 'A0202', SUM(PROC_TAT_QTY), 0) AS RSUM34
              , DECODE(OPER, 'A0202', SUM(SHIP_QTY), 0) AS RCNT34
              , DECODE(OPER, 'A0210', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W35
              , DECODE(OPER, 'A0210', SUM(WAIT_TAT_QTY), 0) AS WSUM35
              , DECODE(OPER, 'A0210', SUM(SHIP_QTY), 0) AS WCNT35
              , DECODE(OPER, 'A0210', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R35
              , DECODE(OPER, 'A0210', SUM(PROC_TAT_QTY), 0) AS RSUM35
              , DECODE(OPER, 'A0210', SUM(SHIP_QTY), 0) AS RCNT35
              , DECODE(OPER, 'A0220', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W36
              , DECODE(OPER, 'A0220', SUM(WAIT_TAT_QTY), 0) AS WSUM36
              , DECODE(OPER, 'A0220', SUM(SHIP_QTY), 0) AS WCNT36
              , DECODE(OPER, 'A0220', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R36
              , DECODE(OPER, 'A0220', SUM(PROC_TAT_QTY), 0) AS RSUM36
              , DECODE(OPER, 'A0220', SUM(SHIP_QTY), 0) AS RCNT36
              , DECODE(OPER, 'A0230', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W37
              , DECODE(OPER, 'A0230', SUM(WAIT_TAT_QTY), 0) AS WSUM37
              , DECODE(OPER, 'A0230', SUM(SHIP_QTY), 0) AS WCNT37
              , DECODE(OPER, 'A0230', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R37
              , DECODE(OPER, 'A0230', SUM(PROC_TAT_QTY), 0) AS RSUM37
              , DECODE(OPER, 'A0230', SUM(SHIP_QTY), 0) AS RCNT37
              , DECODE(OPER, 'A0300', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W38
              , DECODE(OPER, 'A0300', SUM(WAIT_TAT_QTY), 0) AS WSUM38
              , DECODE(OPER, 'A0300', SUM(SHIP_QTY), 0) AS WCNT38
              , DECODE(OPER, 'A0300', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R38
              , DECODE(OPER, 'A0300', SUM(PROC_TAT_QTY), 0) AS RSUM38
              , DECODE(OPER, 'A0300', SUM(SHIP_QTY), 0) AS RCNT38
              , DECODE(OPER, 'A0250', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W39
              , DECODE(OPER, 'A0250', SUM(WAIT_TAT_QTY), 0) AS WSUM39
              , DECODE(OPER, 'A0250', SUM(SHIP_QTY), 0) AS WCNT39
              , DECODE(OPER, 'A0250', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R39
              , DECODE(OPER, 'A0250', SUM(PROC_TAT_QTY), 0) AS RSUM39
              , DECODE(OPER, 'A0250', SUM(SHIP_QTY), 0) AS RCNT39
              , DECODE(OPER, 'A0240', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W40
              , DECODE(OPER, 'A0240', SUM(WAIT_TAT_QTY), 0) AS WSUM40
              , DECODE(OPER, 'A0240', SUM(SHIP_QTY), 0) AS WCNT40
              , DECODE(OPER, 'A0240', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R40
              , DECODE(OPER, 'A0240', SUM(PROC_TAT_QTY), 0) AS RSUM40
              , DECODE(OPER, 'A0240', SUM(SHIP_QTY), 0) AS RCNT40
              , DECODE(OPER, 'A0260', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W41
              , DECODE(OPER, 'A0260', SUM(WAIT_TAT_QTY), 0) AS WSUM41
              , DECODE(OPER, 'A0260', SUM(SHIP_QTY), 0) AS WCNT41
              , DECODE(OPER, 'A0260', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R41
              , DECODE(OPER, 'A0260', SUM(PROC_TAT_QTY), 0) AS RSUM41
              , DECODE(OPER, 'A0260', SUM(SHIP_QTY), 0) AS RCNT41
              , DECODE(OPER, 'A0270', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W42
              , DECODE(OPER, 'A0270', SUM(WAIT_TAT_QTY), 0) AS WSUM42
              , DECODE(OPER, 'A0270', SUM(SHIP_QTY), 0) AS WCNT42
              , DECODE(OPER, 'A0270', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R42
              , DECODE(OPER, 'A0270', SUM(PROC_TAT_QTY), 0) AS RSUM42
              , DECODE(OPER, 'A0270', SUM(SHIP_QTY), 0) AS RCNT42
              , DECODE(OPER, 'A0290', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W43
              , DECODE(OPER, 'A0290', SUM(WAIT_TAT_QTY), 0) AS WSUM43
              , DECODE(OPER, 'A0290', SUM(SHIP_QTY), 0) AS WCNT43
              , DECODE(OPER, 'A0290', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R43
              , DECODE(OPER, 'A0290', SUM(PROC_TAT_QTY), 0) AS RSUM43
              , DECODE(OPER, 'A0290', SUM(SHIP_QTY), 0) AS RCNT43
              , DECODE(OPER, 'A0295', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W44
              , DECODE(OPER, 'A0295', SUM(WAIT_TAT_QTY), 0) AS WSUM44
              , DECODE(OPER, 'A0295', SUM(SHIP_QTY), 0) AS WCNT44
              , DECODE(OPER, 'A0295', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R44
              , DECODE(OPER, 'A0295', SUM(PROC_TAT_QTY), 0) AS RSUM44
              , DECODE(OPER, 'A0295', SUM(SHIP_QTY), 0) AS RCNT44
              , DECODE(OPER, 'A0280', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W45
              , DECODE(OPER, 'A0280', SUM(WAIT_TAT_QTY), 0) AS WSUM45
              , DECODE(OPER, 'A0280', SUM(SHIP_QTY), 0) AS WCNT45
              , DECODE(OPER, 'A0280', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R45
              , DECODE(OPER, 'A0280', SUM(PROC_TAT_QTY), 0) AS RSUM45
              , DECODE(OPER, 'A0280', SUM(SHIP_QTY), 0) AS RCNT45
              , DECODE(OPER, 'A0307', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W46
              , DECODE(OPER, 'A0307', SUM(WAIT_TAT_QTY), 0) AS WSUM46
              , DECODE(OPER, 'A0307', SUM(SHIP_QTY), 0) AS WCNT46
              , DECODE(OPER, 'A0307', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R46
              , DECODE(OPER, 'A0307', SUM(PROC_TAT_QTY), 0) AS RSUM46
              , DECODE(OPER, 'A0307', SUM(SHIP_QTY), 0) AS RCNT46
              , DECODE(OPER, 'A0310', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W47
              , DECODE(OPER, 'A0310', SUM(WAIT_TAT_QTY), 0) AS WSUM47
              , DECODE(OPER, 'A0310', SUM(SHIP_QTY), 0) AS WCNT47
              , DECODE(OPER, 'A0310', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R47
              , DECODE(OPER, 'A0310', SUM(PROC_TAT_QTY), 0) AS RSUM47
              , DECODE(OPER, 'A0310', SUM(SHIP_QTY), 0) AS RCNT47
              , DECODE(OPER, 'A0320', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W48
              , DECODE(OPER, 'A0320', SUM(WAIT_TAT_QTY), 0) AS WSUM48
              , DECODE(OPER, 'A0320', SUM(SHIP_QTY), 0) AS WCNT48
              , DECODE(OPER, 'A0320', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R48
              , DECODE(OPER, 'A0320', SUM(PROC_TAT_QTY), 0) AS RSUM48
              , DECODE(OPER, 'A0320', SUM(SHIP_QTY), 0) AS RCNT48
              , DECODE(OPER, 'A0330', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W49
              , DECODE(OPER, 'A0330', SUM(WAIT_TAT_QTY), 0) AS WSUM49
              , DECODE(OPER, 'A0330', SUM(SHIP_QTY), 0) AS WCNT49
              , DECODE(OPER, 'A0330', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R49
              , DECODE(OPER, 'A0330', SUM(PROC_TAT_QTY), 0) AS RSUM49
              , DECODE(OPER, 'A0330', SUM(SHIP_QTY), 0) AS RCNT49
              , DECODE(OPER, 'A0333', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W50
              , DECODE(OPER, 'A0333', SUM(WAIT_TAT_QTY), 0) AS WSUM50
              , DECODE(OPER, 'A0333', SUM(SHIP_QTY), 0) AS WCNT50
              , DECODE(OPER, 'A0333', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R50
              , DECODE(OPER, 'A0333', SUM(PROC_TAT_QTY), 0) AS RSUM50
              , DECODE(OPER, 'A0333', SUM(SHIP_QTY), 0) AS RCNT50
              , DECODE(OPER, 'A0337', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W51
              , DECODE(OPER, 'A0337', SUM(WAIT_TAT_QTY), 0) AS WSUM51
              , DECODE(OPER, 'A0337', SUM(SHIP_QTY), 0) AS WCNT51
              , DECODE(OPER, 'A0337', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R51
              , DECODE(OPER, 'A0337', SUM(PROC_TAT_QTY), 0) AS RSUM51
              , DECODE(OPER, 'A0337', SUM(SHIP_QTY), 0) AS RCNT51
              , DECODE(OPER, 'A0372', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W52
              , DECODE(OPER, 'A0372', SUM(WAIT_TAT_QTY), 0) AS WSUM52
              , DECODE(OPER, 'A0372', SUM(SHIP_QTY), 0) AS WCNT52
              , DECODE(OPER, 'A0372', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R52
              , DECODE(OPER, 'A0372', SUM(PROC_TAT_QTY), 0) AS RSUM52
              , DECODE(OPER, 'A0372', SUM(SHIP_QTY), 0) AS RCNT52
              , DECODE(OPER, 'A0395', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W53
              , DECODE(OPER, 'A0395', SUM(WAIT_TAT_QTY), 0) AS WSUM53
              , DECODE(OPER, 'A0395', SUM(SHIP_QTY), 0) AS WCNT53
              , DECODE(OPER, 'A0395', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R53
              , DECODE(OPER, 'A0395', SUM(PROC_TAT_QTY), 0) AS RSUM53
              , DECODE(OPER, 'A0395', SUM(SHIP_QTY), 0) AS RCNT53
              , DECODE(OPER, 'A0397', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W54
              , DECODE(OPER, 'A0397', SUM(WAIT_TAT_QTY), 0) AS WSUM54
              , DECODE(OPER, 'A0397', SUM(SHIP_QTY), 0) AS WCNT54
              , DECODE(OPER, 'A0397', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R54
              , DECODE(OPER, 'A0397', SUM(PROC_TAT_QTY), 0) AS RSUM54
              , DECODE(OPER, 'A0397', SUM(SHIP_QTY), 0) AS RCNT54
              , DECODE(OPER, 'A0340', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W55
              , DECODE(OPER, 'A0340', SUM(WAIT_TAT_QTY), 0) AS WSUM55
              , DECODE(OPER, 'A0340', SUM(SHIP_QTY), 0) AS WCNT55
              , DECODE(OPER, 'A0340', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R55
              , DECODE(OPER, 'A0340', SUM(PROC_TAT_QTY), 0) AS RSUM55
              , DECODE(OPER, 'A0340', SUM(SHIP_QTY), 0) AS RCNT55
              , DECODE(OPER, 'A0350', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W56
              , DECODE(OPER, 'A0350', SUM(WAIT_TAT_QTY), 0) AS WSUM56
              , DECODE(OPER, 'A0350', SUM(SHIP_QTY), 0) AS WCNT56
              , DECODE(OPER, 'A0350', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R56
              , DECODE(OPER, 'A0350', SUM(PROC_TAT_QTY), 0) AS RSUM56
              , DECODE(OPER, 'A0350', SUM(SHIP_QTY), 0) AS RCNT56
              , DECODE(OPER, 'A0370', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W57
              , DECODE(OPER, 'A0370', SUM(WAIT_TAT_QTY), 0) AS WSUM57
              , DECODE(OPER, 'A0370', SUM(SHIP_QTY), 0) AS WCNT57
              , DECODE(OPER, 'A0370', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R57
              , DECODE(OPER, 'A0370', SUM(PROC_TAT_QTY), 0) AS RSUM57
              , DECODE(OPER, 'A0370', SUM(SHIP_QTY), 0) AS RCNT57
              , DECODE(OPER, 'A0375', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W58
              , DECODE(OPER, 'A0375', SUM(WAIT_TAT_QTY), 0) AS WSUM58
              , DECODE(OPER, 'A0375', SUM(SHIP_QTY), 0) AS WCNT58
              , DECODE(OPER, 'A0375', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R58
              , DECODE(OPER, 'A0375', SUM(PROC_TAT_QTY), 0) AS RSUM58
              , DECODE(OPER, 'A0375', SUM(SHIP_QTY), 0) AS RCNT58
              , DECODE(OPER, 'A0380', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W59
              , DECODE(OPER, 'A0380', SUM(WAIT_TAT_QTY), 0) AS WSUM59
              , DECODE(OPER, 'A0380', SUM(SHIP_QTY), 0) AS WCNT59
              , DECODE(OPER, 'A0380', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R59
              , DECODE(OPER, 'A0380', SUM(PROC_TAT_QTY), 0) AS RSUM59
              , DECODE(OPER, 'A0380', SUM(SHIP_QTY), 0) AS RCNT59
              , DECODE(OPER, 'A0381', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W60
              , DECODE(OPER, 'A0381', SUM(WAIT_TAT_QTY), 0) AS WSUM60
              , DECODE(OPER, 'A0381', SUM(SHIP_QTY), 0) AS WCNT60
              , DECODE(OPER, 'A0381', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R60
              , DECODE(OPER, 'A0381', SUM(PROC_TAT_QTY), 0) AS RSUM60
              , DECODE(OPER, 'A0381', SUM(SHIP_QTY), 0) AS RCNT60
              , DECODE(OPER, 'A0382', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W61
              , DECODE(OPER, 'A0382', SUM(WAIT_TAT_QTY), 0) AS WSUM61
              , DECODE(OPER, 'A0382', SUM(SHIP_QTY), 0) AS WCNT61
              , DECODE(OPER, 'A0382', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R61
              , DECODE(OPER, 'A0382', SUM(PROC_TAT_QTY), 0) AS RSUM61
              , DECODE(OPER, 'A0382', SUM(SHIP_QTY), 0) AS RCNT61
              , DECODE(OPER, 'A0383', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W62
              , DECODE(OPER, 'A0383', SUM(WAIT_TAT_QTY), 0) AS WSUM62
              , DECODE(OPER, 'A0383', SUM(SHIP_QTY), 0) AS WCNT62
              , DECODE(OPER, 'A0383', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R62
              , DECODE(OPER, 'A0383', SUM(PROC_TAT_QTY), 0) AS RSUM62
              , DECODE(OPER, 'A0383', SUM(SHIP_QTY), 0) AS RCNT62
              , DECODE(OPER, 'A0385', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W63
              , DECODE(OPER, 'A0385', SUM(WAIT_TAT_QTY), 0) AS WSUM63
              , DECODE(OPER, 'A0385', SUM(SHIP_QTY), 0) AS WCNT63
              , DECODE(OPER, 'A0385', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R63
              , DECODE(OPER, 'A0385', SUM(PROC_TAT_QTY), 0) AS RSUM63
              , DECODE(OPER, 'A0385', SUM(SHIP_QTY), 0) AS RCNT63
              , DECODE(OPER, 'A0391', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W64
              , DECODE(OPER, 'A0391', SUM(WAIT_TAT_QTY), 0) AS WSUM64
              , DECODE(OPER, 'A0391', SUM(SHIP_QTY), 0) AS WCNT64
              , DECODE(OPER, 'A0391', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R64
              , DECODE(OPER, 'A0391', SUM(PROC_TAT_QTY), 0) AS RSUM64
              , DECODE(OPER, 'A0391', SUM(SHIP_QTY), 0) AS RCNT64
              , DECODE(OPER, 'A0399', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W65
              , DECODE(OPER, 'A0399', SUM(WAIT_TAT_QTY), 0) AS WSUM65
              , DECODE(OPER, 'A0399', SUM(SHIP_QTY), 0) AS WCNT65
              , DECODE(OPER, 'A0399', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R65
              , DECODE(OPER, 'A0399', SUM(PROC_TAT_QTY), 0) AS RSUM65
              , DECODE(OPER, 'A0399', SUM(SHIP_QTY), 0) AS RCNT65
              , DECODE(OPER, 'A0400', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W66
              , DECODE(OPER, 'A0400', SUM(WAIT_TAT_QTY), 0) AS WSUM66
              , DECODE(OPER, 'A0400', SUM(SHIP_QTY), 0) AS WCNT66
              , DECODE(OPER, 'A0400', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R66
              , DECODE(OPER, 'A0400', SUM(PROC_TAT_QTY), 0) AS RSUM66
              , DECODE(OPER, 'A0400', SUM(SHIP_QTY), 0) AS RCNT66
              , DECODE(OPER, 'A0401', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W67
              , DECODE(OPER, 'A0401', SUM(WAIT_TAT_QTY), 0) AS WSUM67
              , DECODE(OPER, 'A0401', SUM(SHIP_QTY), 0) AS WCNT67
              , DECODE(OPER, 'A0401', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R67
              , DECODE(OPER, 'A0401', SUM(PROC_TAT_QTY), 0) AS RSUM67
              , DECODE(OPER, 'A0401', SUM(SHIP_QTY), 0) AS RCNT67
              , DECODE(OPER, 'A0500', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W68
              , DECODE(OPER, 'A0500', SUM(WAIT_TAT_QTY), 0) AS WSUM68
              , DECODE(OPER, 'A0500', SUM(SHIP_QTY), 0) AS WCNT68
              , DECODE(OPER, 'A0500', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R68
              , DECODE(OPER, 'A0500', SUM(PROC_TAT_QTY), 0) AS RSUM68
              , DECODE(OPER, 'A0500', SUM(SHIP_QTY), 0) AS RCNT68
              , DECODE(OPER, 'A0530', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W69
              , DECODE(OPER, 'A0530', SUM(WAIT_TAT_QTY), 0) AS WSUM69
              , DECODE(OPER, 'A0530', SUM(SHIP_QTY), 0) AS WCNT69
              , DECODE(OPER, 'A0530', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R69
              , DECODE(OPER, 'A0530', SUM(PROC_TAT_QTY), 0) AS RSUM69
              , DECODE(OPER, 'A0530', SUM(SHIP_QTY), 0) AS RCNT69
              , DECODE(OPER, 'A0531', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W70
              , DECODE(OPER, 'A0531', SUM(WAIT_TAT_QTY), 0) AS WSUM70
              , DECODE(OPER, 'A0531', SUM(SHIP_QTY), 0) AS WCNT70
              , DECODE(OPER, 'A0531', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R70
              , DECODE(OPER, 'A0531', SUM(PROC_TAT_QTY), 0) AS RSUM70
              , DECODE(OPER, 'A0531', SUM(SHIP_QTY), 0) AS RCNT70
              , DECODE(OPER, 'A0501', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W71
              , DECODE(OPER, 'A0501', SUM(WAIT_TAT_QTY), 0) AS WSUM71
              , DECODE(OPER, 'A0501', SUM(SHIP_QTY), 0) AS WCNT71
              , DECODE(OPER, 'A0501', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R71
              , DECODE(OPER, 'A0501', SUM(PROC_TAT_QTY), 0) AS RSUM71
              , DECODE(OPER, 'A0501', SUM(SHIP_QTY), 0) AS RCNT71
              , DECODE(OPER, 'A0550', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W72
              , DECODE(OPER, 'A0550', SUM(WAIT_TAT_QTY), 0) AS WSUM72
              , DECODE(OPER, 'A0550', SUM(SHIP_QTY), 0) AS WCNT72
              , DECODE(OPER, 'A0550', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R72
              , DECODE(OPER, 'A0550', SUM(PROC_TAT_QTY), 0) AS RSUM72
              , DECODE(OPER, 'A0550', SUM(SHIP_QTY), 0) AS RCNT72
              , DECODE(OPER, 'A0600', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W73
              , DECODE(OPER, 'A0600', SUM(WAIT_TAT_QTY), 0) AS WSUM73
              , DECODE(OPER, 'A0600', SUM(SHIP_QTY), 0) AS WCNT73
              , DECODE(OPER, 'A0600', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R73
              , DECODE(OPER, 'A0600', SUM(PROC_TAT_QTY), 0) AS RSUM73
              , DECODE(OPER, 'A0600', SUM(SHIP_QTY), 0) AS RCNT73
              , DECODE(OPER, 'A0720', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W74
              , DECODE(OPER, 'A0720', SUM(WAIT_TAT_QTY), 0) AS WSUM74
              , DECODE(OPER, 'A0720', SUM(SHIP_QTY), 0) AS WCNT74
              , DECODE(OPER, 'A0720', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R74
              , DECODE(OPER, 'A0720', SUM(PROC_TAT_QTY), 0) AS RSUM74
              , DECODE(OPER, 'A0720', SUM(SHIP_QTY), 0) AS RCNT74
              , DECODE(OPER, 'A0700', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W75
              , DECODE(OPER, 'A0700', SUM(WAIT_TAT_QTY), 0) AS WSUM75
              , DECODE(OPER, 'A0700', SUM(SHIP_QTY), 0) AS WCNT75
              , DECODE(OPER, 'A0700', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R75
              , DECODE(OPER, 'A0700', SUM(PROC_TAT_QTY), 0) AS RSUM75
              , DECODE(OPER, 'A0700', SUM(SHIP_QTY), 0) AS RCNT75
              , DECODE(OPER, 'A0339', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W76
              , DECODE(OPER, 'A0339', SUM(WAIT_TAT_QTY), 0) AS WSUM76
              , DECODE(OPER, 'A0339', SUM(SHIP_QTY), 0) AS WCNT76
              , DECODE(OPER, 'A0339', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R76
              , DECODE(OPER, 'A0339', SUM(PROC_TAT_QTY), 0) AS RSUM76
              , DECODE(OPER, 'A0339', SUM(SHIP_QTY), 0) AS RCNT76
              , DECODE(OPER, 'A0541', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W77
              , DECODE(OPER, 'A0541', SUM(WAIT_TAT_QTY), 0) AS WSUM77
              , DECODE(OPER, 'A0541', SUM(SHIP_QTY), 0) AS WCNT77
              , DECODE(OPER, 'A0541', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R77
              , DECODE(OPER, 'A0541', SUM(PROC_TAT_QTY), 0) AS RSUM77
              , DECODE(OPER, 'A0541', SUM(SHIP_QTY), 0) AS RCNT77
              , DECODE(OPER, 'A0551', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W78
              , DECODE(OPER, 'A0551', SUM(WAIT_TAT_QTY), 0) AS WSUM78
              , DECODE(OPER, 'A0551', SUM(SHIP_QTY), 0) AS WCNT78
              , DECODE(OPER, 'A0551', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R78
              , DECODE(OPER, 'A0551', SUM(PROC_TAT_QTY), 0) AS RSUM78
              , DECODE(OPER, 'A0551', SUM(SHIP_QTY), 0) AS RCNT78
              , DECODE(OPER, 'A0601', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W79
              , DECODE(OPER, 'A0601', SUM(WAIT_TAT_QTY), 0) AS WSUM79
              , DECODE(OPER, 'A0601', SUM(SHIP_QTY), 0) AS WCNT79
              , DECODE(OPER, 'A0601', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R79
              , DECODE(OPER, 'A0601', SUM(PROC_TAT_QTY), 0) AS RSUM79
              , DECODE(OPER, 'A0601', SUM(SHIP_QTY), 0) AS RCNT79
              , DECODE(OPER, 'A0710', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W80
              , DECODE(OPER, 'A0710', SUM(WAIT_TAT_QTY), 0) AS WSUM80
              , DECODE(OPER, 'A0710', SUM(SHIP_QTY), 0) AS WCNT80
              , DECODE(OPER, 'A0710', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R80
              , DECODE(OPER, 'A0710', SUM(PROC_TAT_QTY), 0) AS RSUM80
              , DECODE(OPER, 'A0710', SUM(SHIP_QTY), 0) AS RCNT80
              , DECODE(OPER, 'A0800', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W81
              , DECODE(OPER, 'A0800', SUM(WAIT_TAT_QTY), 0) AS WSUM81
              , DECODE(OPER, 'A0800', SUM(SHIP_QTY), 0) AS WCNT81
              , DECODE(OPER, 'A0800', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R81
              , DECODE(OPER, 'A0800', SUM(PROC_TAT_QTY), 0) AS RSUM81
              , DECODE(OPER, 'A0800', SUM(SHIP_QTY), 0) AS RCNT81
              , DECODE(OPER, 'A0402', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W82
              , DECODE(OPER, 'A0402', SUM(WAIT_TAT_QTY), 0) AS WSUM82
              , DECODE(OPER, 'A0402', SUM(SHIP_QTY), 0) AS WCNT82
              , DECODE(OPER, 'A0402', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R82
              , DECODE(OPER, 'A0402', SUM(PROC_TAT_QTY), 0) AS RSUM82
              , DECODE(OPER, 'A0402', SUM(SHIP_QTY), 0) AS RCNT82
              , DECODE(OPER, 'A0502', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W83
              , DECODE(OPER, 'A0502', SUM(WAIT_TAT_QTY), 0) AS WSUM83
              , DECODE(OPER, 'A0502', SUM(SHIP_QTY), 0) AS WCNT83
              , DECODE(OPER, 'A0502', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R83
              , DECODE(OPER, 'A0502', SUM(PROC_TAT_QTY), 0) AS RSUM83
              , DECODE(OPER, 'A0502', SUM(SHIP_QTY), 0) AS RCNT83
              , DECODE(OPER, 'A0532', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W84
              , DECODE(OPER, 'A0532', SUM(WAIT_TAT_QTY), 0) AS WSUM84
              , DECODE(OPER, 'A0532', SUM(SHIP_QTY), 0) AS WCNT84
              , DECODE(OPER, 'A0532', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R84
              , DECODE(OPER, 'A0532', SUM(PROC_TAT_QTY), 0) AS RSUM84
              , DECODE(OPER, 'A0532', SUM(SHIP_QTY), 0) AS RCNT84
              , DECODE(OPER, 'A0801', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W85
              , DECODE(OPER, 'A0801', SUM(WAIT_TAT_QTY), 0) AS WSUM85
              , DECODE(OPER, 'A0801', SUM(SHIP_QTY), 0) AS WCNT85
              , DECODE(OPER, 'A0801', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R85
              , DECODE(OPER, 'A0801', SUM(PROC_TAT_QTY), 0) AS RSUM85
              , DECODE(OPER, 'A0801', SUM(SHIP_QTY), 0) AS RCNT85
              , DECODE(OPER, 'A0542', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W86
              , DECODE(OPER, 'A0542', SUM(WAIT_TAT_QTY), 0) AS WSUM86
              , DECODE(OPER, 'A0542', SUM(SHIP_QTY), 0) AS WCNT86
              , DECODE(OPER, 'A0542', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R86
              , DECODE(OPER, 'A0542', SUM(PROC_TAT_QTY), 0) AS RSUM86
              , DECODE(OPER, 'A0542', SUM(SHIP_QTY), 0) AS RCNT86
              , DECODE(OPER, 'A0552', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W87
              , DECODE(OPER, 'A0552', SUM(WAIT_TAT_QTY), 0) AS WSUM87
              , DECODE(OPER, 'A0552', SUM(SHIP_QTY), 0) AS WCNT87
              , DECODE(OPER, 'A0552', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R87
              , DECODE(OPER, 'A0552', SUM(PROC_TAT_QTY), 0) AS RSUM87
              , DECODE(OPER, 'A0552', SUM(SHIP_QTY), 0) AS RCNT87
              , DECODE(OPER, 'A0602', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W88
              , DECODE(OPER, 'A0602', SUM(WAIT_TAT_QTY), 0) AS WSUM88
              , DECODE(OPER, 'A0602', SUM(SHIP_QTY), 0) AS WCNT88
              , DECODE(OPER, 'A0602', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R88
              , DECODE(OPER, 'A0602', SUM(PROC_TAT_QTY), 0) AS RSUM88
              , DECODE(OPER, 'A0602', SUM(SHIP_QTY), 0) AS RCNT88
              , DECODE(OPER, 'A0802', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W89
              , DECODE(OPER, 'A0802', SUM(WAIT_TAT_QTY), 0) AS WSUM89
              , DECODE(OPER, 'A0802', SUM(SHIP_QTY), 0) AS WCNT89
              , DECODE(OPER, 'A0802', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R89
              , DECODE(OPER, 'A0802', SUM(PROC_TAT_QTY), 0) AS RSUM89
              , DECODE(OPER, 'A0802', SUM(SHIP_QTY), 0) AS RCNT89
              , DECODE(OPER, 'A0403', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W90
              , DECODE(OPER, 'A0403', SUM(WAIT_TAT_QTY), 0) AS WSUM90
              , DECODE(OPER, 'A0403', SUM(SHIP_QTY), 0) AS WCNT90
              , DECODE(OPER, 'A0403', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R90
              , DECODE(OPER, 'A0403', SUM(PROC_TAT_QTY), 0) AS RSUM90
              , DECODE(OPER, 'A0403', SUM(SHIP_QTY), 0) AS RCNT90
              , DECODE(OPER, 'A0503', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W91
              , DECODE(OPER, 'A0503', SUM(WAIT_TAT_QTY), 0) AS WSUM91
              , DECODE(OPER, 'A0503', SUM(SHIP_QTY), 0) AS WCNT91
              , DECODE(OPER, 'A0503', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R91
              , DECODE(OPER, 'A0503', SUM(PROC_TAT_QTY), 0) AS RSUM91
              , DECODE(OPER, 'A0503', SUM(SHIP_QTY), 0) AS RCNT91
              , DECODE(OPER, 'A0533', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W92
              , DECODE(OPER, 'A0533', SUM(WAIT_TAT_QTY), 0) AS WSUM92
              , DECODE(OPER, 'A0533', SUM(SHIP_QTY), 0) AS WCNT92
              , DECODE(OPER, 'A0533', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R92
              , DECODE(OPER, 'A0533', SUM(PROC_TAT_QTY), 0) AS RSUM92
              , DECODE(OPER, 'A0533', SUM(SHIP_QTY), 0) AS RCNT92
              , DECODE(OPER, 'A0543', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W93
              , DECODE(OPER, 'A0543', SUM(WAIT_TAT_QTY), 0) AS WSUM93
              , DECODE(OPER, 'A0543', SUM(SHIP_QTY), 0) AS WCNT93
              , DECODE(OPER, 'A0543', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R93
              , DECODE(OPER, 'A0543', SUM(PROC_TAT_QTY), 0) AS RSUM93
              , DECODE(OPER, 'A0543', SUM(SHIP_QTY), 0) AS RCNT93
              , DECODE(OPER, 'A0553', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W94
              , DECODE(OPER, 'A0553', SUM(WAIT_TAT_QTY), 0) AS WSUM94
              , DECODE(OPER, 'A0553', SUM(SHIP_QTY), 0) AS WCNT94
              , DECODE(OPER, 'A0553', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R94
              , DECODE(OPER, 'A0553', SUM(PROC_TAT_QTY), 0) AS RSUM94
              , DECODE(OPER, 'A0553', SUM(SHIP_QTY), 0) AS RCNT94
              , DECODE(OPER, 'A0603', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W95
              , DECODE(OPER, 'A0603', SUM(WAIT_TAT_QTY), 0) AS WSUM95
              , DECODE(OPER, 'A0603', SUM(SHIP_QTY), 0) AS WCNT95
              , DECODE(OPER, 'A0603', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R95
              , DECODE(OPER, 'A0603', SUM(PROC_TAT_QTY), 0) AS RSUM95
              , DECODE(OPER, 'A0603', SUM(SHIP_QTY), 0) AS RCNT95
              , DECODE(OPER, 'A0712', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W96
              , DECODE(OPER, 'A0712', SUM(WAIT_TAT_QTY), 0) AS WSUM96
              , DECODE(OPER, 'A0712', SUM(SHIP_QTY), 0) AS WCNT96
              , DECODE(OPER, 'A0712', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R96
              , DECODE(OPER, 'A0712', SUM(PROC_TAT_QTY), 0) AS RSUM96
              , DECODE(OPER, 'A0712', SUM(SHIP_QTY), 0) AS RCNT96
              , DECODE(OPER, 'A0713', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W97
              , DECODE(OPER, 'A0713', SUM(WAIT_TAT_QTY), 0) AS WSUM97
              , DECODE(OPER, 'A0713', SUM(SHIP_QTY), 0) AS WCNT97
              , DECODE(OPER, 'A0713', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R97
              , DECODE(OPER, 'A0713', SUM(PROC_TAT_QTY), 0) AS RSUM97
              , DECODE(OPER, 'A0713', SUM(SHIP_QTY), 0) AS RCNT97
              , DECODE(OPER, 'A0803', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W98
              , DECODE(OPER, 'A0803', SUM(WAIT_TAT_QTY), 0) AS WSUM98
              , DECODE(OPER, 'A0803', SUM(SHIP_QTY), 0) AS WCNT98
              , DECODE(OPER, 'A0803', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R98
              , DECODE(OPER, 'A0803', SUM(PROC_TAT_QTY), 0) AS RSUM98
              , DECODE(OPER, 'A0803', SUM(SHIP_QTY), 0) AS RCNT98
              , DECODE(OPER, 'A0404', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W99
              , DECODE(OPER, 'A0404', SUM(WAIT_TAT_QTY), 0) AS WSUM99
              , DECODE(OPER, 'A0404', SUM(SHIP_QTY), 0) AS WCNT99
              , DECODE(OPER, 'A0404', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R99
              , DECODE(OPER, 'A0404', SUM(PROC_TAT_QTY), 0) AS RSUM99
              , DECODE(OPER, 'A0404', SUM(SHIP_QTY), 0) AS RCNT99
              , DECODE(OPER, 'A0504', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W100
              , DECODE(OPER, 'A0504', SUM(WAIT_TAT_QTY), 0) AS WSUM100
              , DECODE(OPER, 'A0504', SUM(SHIP_QTY), 0) AS WCNT100
              , DECODE(OPER, 'A0504', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R100
              , DECODE(OPER, 'A0504', SUM(PROC_TAT_QTY), 0) AS RSUM100
              , DECODE(OPER, 'A0504', SUM(SHIP_QTY), 0) AS RCNT100
              , DECODE(OPER, 'A0534', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W101
              , DECODE(OPER, 'A0534', SUM(WAIT_TAT_QTY), 0) AS WSUM101
              , DECODE(OPER, 'A0534', SUM(SHIP_QTY), 0) AS WCNT101
              , DECODE(OPER, 'A0534', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R101
              , DECODE(OPER, 'A0534', SUM(PROC_TAT_QTY), 0) AS RSUM101
              , DECODE(OPER, 'A0534', SUM(SHIP_QTY), 0) AS RCNT101
              , DECODE(OPER, 'A0544', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W102
              , DECODE(OPER, 'A0544', SUM(WAIT_TAT_QTY), 0) AS WSUM102
              , DECODE(OPER, 'A0544', SUM(SHIP_QTY), 0) AS WCNT102
              , DECODE(OPER, 'A0544', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R102
              , DECODE(OPER, 'A0544', SUM(PROC_TAT_QTY), 0) AS RSUM102
              , DECODE(OPER, 'A0544', SUM(SHIP_QTY), 0) AS RCNT102
              , DECODE(OPER, 'A0554', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W103
              , DECODE(OPER, 'A0554', SUM(WAIT_TAT_QTY), 0) AS WSUM103
              , DECODE(OPER, 'A0554', SUM(SHIP_QTY), 0) AS WCNT103
              , DECODE(OPER, 'A0554', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R103
              , DECODE(OPER, 'A0554', SUM(PROC_TAT_QTY), 0) AS RSUM103
              , DECODE(OPER, 'A0554', SUM(SHIP_QTY), 0) AS RCNT103
              , DECODE(OPER, 'A0604', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W104
              , DECODE(OPER, 'A0604', SUM(WAIT_TAT_QTY), 0) AS WSUM104
              , DECODE(OPER, 'A0604', SUM(SHIP_QTY), 0) AS WCNT104
              , DECODE(OPER, 'A0604', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R104
              , DECODE(OPER, 'A0604', SUM(PROC_TAT_QTY), 0) AS RSUM104
              , DECODE(OPER, 'A0604', SUM(SHIP_QTY), 0) AS RCNT104
              , DECODE(OPER, 'A0714', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W105
              , DECODE(OPER, 'A0714', SUM(WAIT_TAT_QTY), 0) AS WSUM105
              , DECODE(OPER, 'A0714', SUM(SHIP_QTY), 0) AS WCNT105
              , DECODE(OPER, 'A0714', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R105
              , DECODE(OPER, 'A0714', SUM(PROC_TAT_QTY), 0) AS RSUM105
              , DECODE(OPER, 'A0714', SUM(SHIP_QTY), 0) AS RCNT105
              , DECODE(OPER, 'A0804', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W106
              , DECODE(OPER, 'A0804', SUM(WAIT_TAT_QTY), 0) AS WSUM106
              , DECODE(OPER, 'A0804', SUM(SHIP_QTY), 0) AS WCNT106
              , DECODE(OPER, 'A0804', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R106
              , DECODE(OPER, 'A0804', SUM(PROC_TAT_QTY), 0) AS RSUM106
              , DECODE(OPER, 'A0804', SUM(SHIP_QTY), 0) AS RCNT106
              , DECODE(OPER, 'A0405', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W107
              , DECODE(OPER, 'A0405', SUM(WAIT_TAT_QTY), 0) AS WSUM107
              , DECODE(OPER, 'A0405', SUM(SHIP_QTY), 0) AS WCNT107
              , DECODE(OPER, 'A0405', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R107
              , DECODE(OPER, 'A0405', SUM(PROC_TAT_QTY), 0) AS RSUM107
              , DECODE(OPER, 'A0405', SUM(SHIP_QTY), 0) AS RCNT107
              , DECODE(OPER, 'A0505', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W108
              , DECODE(OPER, 'A0505', SUM(WAIT_TAT_QTY), 0) AS WSUM108
              , DECODE(OPER, 'A0505', SUM(SHIP_QTY), 0) AS WCNT108
              , DECODE(OPER, 'A0505', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R108
              , DECODE(OPER, 'A0505', SUM(PROC_TAT_QTY), 0) AS RSUM108
              , DECODE(OPER, 'A0505', SUM(SHIP_QTY), 0) AS RCNT108
              , DECODE(OPER, 'A0535', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W109
              , DECODE(OPER, 'A0535', SUM(WAIT_TAT_QTY), 0) AS WSUM109
              , DECODE(OPER, 'A0535', SUM(SHIP_QTY), 0) AS WCNT109
              , DECODE(OPER, 'A0535', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R109
              , DECODE(OPER, 'A0535', SUM(PROC_TAT_QTY), 0) AS RSUM109
              , DECODE(OPER, 'A0535', SUM(SHIP_QTY), 0) AS RCNT109
              , DECODE(OPER, 'A0545', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W110
              , DECODE(OPER, 'A0545', SUM(WAIT_TAT_QTY), 0) AS WSUM110
              , DECODE(OPER, 'A0545', SUM(SHIP_QTY), 0) AS WCNT110
              , DECODE(OPER, 'A0545', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R110
              , DECODE(OPER, 'A0545', SUM(PROC_TAT_QTY), 0) AS RSUM110
              , DECODE(OPER, 'A0545', SUM(SHIP_QTY), 0) AS RCNT110
              , DECODE(OPER, 'A0555', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W111
              , DECODE(OPER, 'A0555', SUM(WAIT_TAT_QTY), 0) AS WSUM111
              , DECODE(OPER, 'A0555', SUM(SHIP_QTY), 0) AS WCNT111
              , DECODE(OPER, 'A0555', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R111
              , DECODE(OPER, 'A0555', SUM(PROC_TAT_QTY), 0) AS RSUM111
              , DECODE(OPER, 'A0555', SUM(SHIP_QTY), 0) AS RCNT111
              , DECODE(OPER, 'A0605', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W112
              , DECODE(OPER, 'A0605', SUM(WAIT_TAT_QTY), 0) AS WSUM112
              , DECODE(OPER, 'A0605', SUM(SHIP_QTY), 0) AS WCNT112
              , DECODE(OPER, 'A0605', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R112
              , DECODE(OPER, 'A0605', SUM(PROC_TAT_QTY), 0) AS RSUM112
              , DECODE(OPER, 'A0605', SUM(SHIP_QTY), 0) AS RCNT112
              , DECODE(OPER, 'A0715', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W113
              , DECODE(OPER, 'A0715', SUM(WAIT_TAT_QTY), 0) AS WSUM113
              , DECODE(OPER, 'A0715', SUM(SHIP_QTY), 0) AS WCNT113
              , DECODE(OPER, 'A0715', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R113
              , DECODE(OPER, 'A0715', SUM(PROC_TAT_QTY), 0) AS RSUM113
              , DECODE(OPER, 'A0715', SUM(SHIP_QTY), 0) AS RCNT113
              , DECODE(OPER, 'A0805', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W114
              , DECODE(OPER, 'A0805', SUM(WAIT_TAT_QTY), 0) AS WSUM114
              , DECODE(OPER, 'A0805', SUM(SHIP_QTY), 0) AS WCNT114
              , DECODE(OPER, 'A0805', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R114
              , DECODE(OPER, 'A0805', SUM(PROC_TAT_QTY), 0) AS RSUM114
              , DECODE(OPER, 'A0805', SUM(SHIP_QTY), 0) AS RCNT114
              , DECODE(OPER, 'A0406', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W115
              , DECODE(OPER, 'A0406', SUM(WAIT_TAT_QTY), 0) AS WSUM115
              , DECODE(OPER, 'A0406', SUM(SHIP_QTY), 0) AS WCNT115
              , DECODE(OPER, 'A0406', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R115
              , DECODE(OPER, 'A0406', SUM(PROC_TAT_QTY), 0) AS RSUM115
              , DECODE(OPER, 'A0406', SUM(SHIP_QTY), 0) AS RCNT115
              , DECODE(OPER, 'A0506', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W116
              , DECODE(OPER, 'A0506', SUM(WAIT_TAT_QTY), 0) AS WSUM116
              , DECODE(OPER, 'A0506', SUM(SHIP_QTY), 0) AS WCNT116
              , DECODE(OPER, 'A0506', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R116
              , DECODE(OPER, 'A0506', SUM(PROC_TAT_QTY), 0) AS RSUM116
              , DECODE(OPER, 'A0506', SUM(SHIP_QTY), 0) AS RCNT116
              , DECODE(OPER, 'A0536', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W117
              , DECODE(OPER, 'A0536', SUM(WAIT_TAT_QTY), 0) AS WSUM117
              , DECODE(OPER, 'A0536', SUM(SHIP_QTY), 0) AS WCNT117
              , DECODE(OPER, 'A0536', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R117
              , DECODE(OPER, 'A0536', SUM(PROC_TAT_QTY), 0) AS RSUM117
              , DECODE(OPER, 'A0536', SUM(SHIP_QTY), 0) AS RCNT117
              , DECODE(OPER, 'A0546', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W118
              , DECODE(OPER, 'A0546', SUM(WAIT_TAT_QTY), 0) AS WSUM118
              , DECODE(OPER, 'A0546', SUM(SHIP_QTY), 0) AS WCNT118
              , DECODE(OPER, 'A0546', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R118
              , DECODE(OPER, 'A0546', SUM(PROC_TAT_QTY), 0) AS RSUM118
              , DECODE(OPER, 'A0546', SUM(SHIP_QTY), 0) AS RCNT118
              , DECODE(OPER, 'A0556', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W119
              , DECODE(OPER, 'A0556', SUM(WAIT_TAT_QTY), 0) AS WSUM119
              , DECODE(OPER, 'A0556', SUM(SHIP_QTY), 0) AS WCNT119
              , DECODE(OPER, 'A0556', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R119
              , DECODE(OPER, 'A0556', SUM(PROC_TAT_QTY), 0) AS RSUM119
              , DECODE(OPER, 'A0556', SUM(SHIP_QTY), 0) AS RCNT119
              , DECODE(OPER, 'A0606', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W120
              , DECODE(OPER, 'A0606', SUM(WAIT_TAT_QTY), 0) AS WSUM120
              , DECODE(OPER, 'A0606', SUM(SHIP_QTY), 0) AS WCNT120
              , DECODE(OPER, 'A0606', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R120
              , DECODE(OPER, 'A0606', SUM(PROC_TAT_QTY), 0) AS RSUM120
              , DECODE(OPER, 'A0606', SUM(SHIP_QTY), 0) AS RCNT120
              , DECODE(OPER, 'A0806', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W121
              , DECODE(OPER, 'A0806', SUM(WAIT_TAT_QTY), 0) AS WSUM121
              , DECODE(OPER, 'A0806', SUM(SHIP_QTY), 0) AS WCNT121
              , DECODE(OPER, 'A0806', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R121
              , DECODE(OPER, 'A0806', SUM(PROC_TAT_QTY), 0) AS RSUM121
              , DECODE(OPER, 'A0806', SUM(SHIP_QTY), 0) AS RCNT121
              , DECODE(OPER, 'A0407', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W122
              , DECODE(OPER, 'A0407', SUM(WAIT_TAT_QTY), 0) AS WSUM122
              , DECODE(OPER, 'A0407', SUM(SHIP_QTY), 0) AS WCNT122
              , DECODE(OPER, 'A0407', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R122
              , DECODE(OPER, 'A0407', SUM(PROC_TAT_QTY), 0) AS RSUM122
              , DECODE(OPER, 'A0407', SUM(SHIP_QTY), 0) AS RCNT122
              , DECODE(OPER, 'A0507', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W123
              , DECODE(OPER, 'A0507', SUM(WAIT_TAT_QTY), 0) AS WSUM123
              , DECODE(OPER, 'A0507', SUM(SHIP_QTY), 0) AS WCNT123
              , DECODE(OPER, 'A0507', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R123
              , DECODE(OPER, 'A0507', SUM(PROC_TAT_QTY), 0) AS RSUM123
              , DECODE(OPER, 'A0507', SUM(SHIP_QTY), 0) AS RCNT123
              , DECODE(OPER, 'A0537', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W124
              , DECODE(OPER, 'A0537', SUM(WAIT_TAT_QTY), 0) AS WSUM124
              , DECODE(OPER, 'A0537', SUM(SHIP_QTY), 0) AS WCNT124
              , DECODE(OPER, 'A0537', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R124
              , DECODE(OPER, 'A0537', SUM(PROC_TAT_QTY), 0) AS RSUM124
              , DECODE(OPER, 'A0537', SUM(SHIP_QTY), 0) AS RCNT124
              , DECODE(OPER, 'A0557', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W125
              , DECODE(OPER, 'A0557', SUM(WAIT_TAT_QTY), 0) AS WSUM125
              , DECODE(OPER, 'A0557', SUM(SHIP_QTY), 0) AS WCNT125
              , DECODE(OPER, 'A0557', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R125
              , DECODE(OPER, 'A0557', SUM(PROC_TAT_QTY), 0) AS RSUM125
              , DECODE(OPER, 'A0557', SUM(SHIP_QTY), 0) AS RCNT125
              , DECODE(OPER, 'A0607', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W126
              , DECODE(OPER, 'A0607', SUM(WAIT_TAT_QTY), 0) AS WSUM126
              , DECODE(OPER, 'A0607', SUM(SHIP_QTY), 0) AS WCNT126
              , DECODE(OPER, 'A0607', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R126
              , DECODE(OPER, 'A0607', SUM(PROC_TAT_QTY), 0) AS RSUM126
              , DECODE(OPER, 'A0607', SUM(SHIP_QTY), 0) AS RCNT126
              , DECODE(OPER, 'A0717', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W127
              , DECODE(OPER, 'A0717', SUM(WAIT_TAT_QTY), 0) AS WSUM127
              , DECODE(OPER, 'A0717', SUM(SHIP_QTY), 0) AS WCNT127
              , DECODE(OPER, 'A0717', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R127
              , DECODE(OPER, 'A0717', SUM(PROC_TAT_QTY), 0) AS RSUM127
              , DECODE(OPER, 'A0717', SUM(SHIP_QTY), 0) AS RCNT127
              , DECODE(OPER, 'A0807', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W128
              , DECODE(OPER, 'A0807', SUM(WAIT_TAT_QTY), 0) AS WSUM128
              , DECODE(OPER, 'A0807', SUM(SHIP_QTY), 0) AS WCNT128
              , DECODE(OPER, 'A0807', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R128
              , DECODE(OPER, 'A0807', SUM(PROC_TAT_QTY), 0) AS RSUM128
              , DECODE(OPER, 'A0807', SUM(SHIP_QTY), 0) AS RCNT128
              , DECODE(OPER, 'A0408', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W129
              , DECODE(OPER, 'A0408', SUM(WAIT_TAT_QTY), 0) AS WSUM129
              , DECODE(OPER, 'A0408', SUM(SHIP_QTY), 0) AS WCNT129
              , DECODE(OPER, 'A0408', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R129
              , DECODE(OPER, 'A0408', SUM(PROC_TAT_QTY), 0) AS RSUM129
              , DECODE(OPER, 'A0408', SUM(SHIP_QTY), 0) AS RCNT129
              , DECODE(OPER, 'A0538', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W130
              , DECODE(OPER, 'A0538', SUM(WAIT_TAT_QTY), 0) AS WSUM130
              , DECODE(OPER, 'A0538', SUM(SHIP_QTY), 0) AS WCNT130
              , DECODE(OPER, 'A0538', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R130
              , DECODE(OPER, 'A0538', SUM(PROC_TAT_QTY), 0) AS RSUM130
              , DECODE(OPER, 'A0538', SUM(SHIP_QTY), 0) AS RCNT130
              , DECODE(OPER, 'A0558', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W131
              , DECODE(OPER, 'A0558', SUM(WAIT_TAT_QTY), 0) AS WSUM131
              , DECODE(OPER, 'A0558', SUM(SHIP_QTY), 0) AS WCNT131
              , DECODE(OPER, 'A0558', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R131
              , DECODE(OPER, 'A0558', SUM(PROC_TAT_QTY), 0) AS RSUM131
              , DECODE(OPER, 'A0558', SUM(SHIP_QTY), 0) AS RCNT131
              , DECODE(OPER, 'A0608', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W132
              , DECODE(OPER, 'A0608', SUM(WAIT_TAT_QTY), 0) AS WSUM132
              , DECODE(OPER, 'A0608', SUM(SHIP_QTY), 0) AS WCNT132
              , DECODE(OPER, 'A0608', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R132
              , DECODE(OPER, 'A0608', SUM(PROC_TAT_QTY), 0) AS RSUM132
              , DECODE(OPER, 'A0608', SUM(SHIP_QTY), 0) AS RCNT132
              , DECODE(OPER, 'A0808', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W133
              , DECODE(OPER, 'A0808', SUM(WAIT_TAT_QTY), 0) AS WSUM133
              , DECODE(OPER, 'A0808', SUM(SHIP_QTY), 0) AS WCNT133
              , DECODE(OPER, 'A0808', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R133
              , DECODE(OPER, 'A0808', SUM(PROC_TAT_QTY), 0) AS RSUM133
              , DECODE(OPER, 'A0808', SUM(SHIP_QTY), 0) AS RCNT133
              , DECODE(OPER, 'A0409', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W134
              , DECODE(OPER, 'A0409', SUM(WAIT_TAT_QTY), 0) AS WSUM134
              , DECODE(OPER, 'A0409', SUM(SHIP_QTY), 0) AS WCNT134
              , DECODE(OPER, 'A0409', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R134
              , DECODE(OPER, 'A0409', SUM(PROC_TAT_QTY), 0) AS RSUM134
              , DECODE(OPER, 'A0409', SUM(SHIP_QTY), 0) AS RCNT134
              , DECODE(OPER, 'A0509', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W135
              , DECODE(OPER, 'A0509', SUM(WAIT_TAT_QTY), 0) AS WSUM135
              , DECODE(OPER, 'A0509', SUM(SHIP_QTY), 0) AS WCNT135
              , DECODE(OPER, 'A0509', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R135
              , DECODE(OPER, 'A0509', SUM(PROC_TAT_QTY), 0) AS RSUM135
              , DECODE(OPER, 'A0509', SUM(SHIP_QTY), 0) AS RCNT135
              , DECODE(OPER, 'A0539', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W136
              , DECODE(OPER, 'A0539', SUM(WAIT_TAT_QTY), 0) AS WSUM136
              , DECODE(OPER, 'A0539', SUM(SHIP_QTY), 0) AS WCNT136
              , DECODE(OPER, 'A0539', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R136
              , DECODE(OPER, 'A0539', SUM(PROC_TAT_QTY), 0) AS RSUM136
              , DECODE(OPER, 'A0539', SUM(SHIP_QTY), 0) AS RCNT136
              , DECODE(OPER, 'A0559', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W137
              , DECODE(OPER, 'A0559', SUM(WAIT_TAT_QTY), 0) AS WSUM137
              , DECODE(OPER, 'A0559', SUM(SHIP_QTY), 0) AS WCNT137
              , DECODE(OPER, 'A0559', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R137
              , DECODE(OPER, 'A0559', SUM(PROC_TAT_QTY), 0) AS RSUM137
              , DECODE(OPER, 'A0559', SUM(SHIP_QTY), 0) AS RCNT137
              , DECODE(OPER, 'A0609', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W138
              , DECODE(OPER, 'A0609', SUM(WAIT_TAT_QTY), 0) AS WSUM138
              , DECODE(OPER, 'A0609', SUM(SHIP_QTY), 0) AS WCNT138
              , DECODE(OPER, 'A0609', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R138
              , DECODE(OPER, 'A0609', SUM(PROC_TAT_QTY), 0) AS RSUM138
              , DECODE(OPER, 'A0609', SUM(SHIP_QTY), 0) AS RCNT138
              , DECODE(OPER, 'A0809', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W139
              , DECODE(OPER, 'A0809', SUM(WAIT_TAT_QTY), 0) AS WSUM139
              , DECODE(OPER, 'A0809', SUM(SHIP_QTY), 0) AS WCNT139
              , DECODE(OPER, 'A0809', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R139
              , DECODE(OPER, 'A0809', SUM(PROC_TAT_QTY), 0) AS RSUM139
              , DECODE(OPER, 'A0809', SUM(SHIP_QTY), 0) AS RCNT139
              , DECODE(OPER, 'A080A', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W140
              , DECODE(OPER, 'A080A', SUM(WAIT_TAT_QTY), 0) AS WSUM140
              , DECODE(OPER, 'A080A', SUM(SHIP_QTY), 0) AS WCNT140
              , DECODE(OPER, 'A080A', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R140
              , DECODE(OPER, 'A080A', SUM(PROC_TAT_QTY), 0) AS RSUM140
              , DECODE(OPER, 'A080A', SUM(SHIP_QTY), 0) AS RCNT140
              , DECODE(OPER, 'A0900', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W141
              , DECODE(OPER, 'A0900', SUM(WAIT_TAT_QTY), 0) AS WSUM141
              , DECODE(OPER, 'A0900', SUM(SHIP_QTY), 0) AS WCNT141
              , DECODE(OPER, 'A0900', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R141
              , DECODE(OPER, 'A0900', SUM(PROC_TAT_QTY), 0) AS RSUM141
              , DECODE(OPER, 'A0900', SUM(SHIP_QTY), 0) AS RCNT141
              , DECODE(OPER, 'A0910', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W142
              , DECODE(OPER, 'A0910', SUM(WAIT_TAT_QTY), 0) AS WSUM142
              , DECODE(OPER, 'A0910', SUM(SHIP_QTY), 0) AS WCNT142
              , DECODE(OPER, 'A0910', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R142
              , DECODE(OPER, 'A0910', SUM(PROC_TAT_QTY), 0) AS RSUM142
              , DECODE(OPER, 'A0910', SUM(SHIP_QTY), 0) AS RCNT142
              , DECODE(OPER, 'A0920', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W143
              , DECODE(OPER, 'A0920', SUM(WAIT_TAT_QTY), 0) AS WSUM143
              , DECODE(OPER, 'A0920', SUM(SHIP_QTY), 0) AS WCNT143
              , DECODE(OPER, 'A0920', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R143
              , DECODE(OPER, 'A0920', SUM(PROC_TAT_QTY), 0) AS RSUM143
              , DECODE(OPER, 'A0920', SUM(SHIP_QTY), 0) AS RCNT143
              , DECODE(OPER, 'A0930', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W144
              , DECODE(OPER, 'A0930', SUM(WAIT_TAT_QTY), 0) AS WSUM144
              , DECODE(OPER, 'A0930', SUM(SHIP_QTY), 0) AS WCNT144
              , DECODE(OPER, 'A0930', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R144
              , DECODE(OPER, 'A0930', SUM(PROC_TAT_QTY), 0) AS RSUM144
              , DECODE(OPER, 'A0930', SUM(SHIP_QTY), 0) AS RCNT144
              , DECODE(OPER, 'A0935', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W145
              , DECODE(OPER, 'A0935', SUM(WAIT_TAT_QTY), 0) AS WSUM145
              , DECODE(OPER, 'A0935', SUM(SHIP_QTY), 0) AS WCNT145
              , DECODE(OPER, 'A0935', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R145
              , DECODE(OPER, 'A0935', SUM(PROC_TAT_QTY), 0) AS RSUM145
              , DECODE(OPER, 'A0935', SUM(SHIP_QTY), 0) AS RCNT145
              , DECODE(OPER, 'A040A', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W146
              , DECODE(OPER, 'A040A', SUM(WAIT_TAT_QTY), 0) AS WSUM146
              , DECODE(OPER, 'A040A', SUM(SHIP_QTY), 0) AS WCNT146
              , DECODE(OPER, 'A040A', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R146
              , DECODE(OPER, 'A040A', SUM(PROC_TAT_QTY), 0) AS RSUM146
              , DECODE(OPER, 'A040A', SUM(SHIP_QTY), 0) AS RCNT146
              , DECODE(OPER, 'A0950', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W147
              , DECODE(OPER, 'A0950', SUM(WAIT_TAT_QTY), 0) AS WSUM147
              , DECODE(OPER, 'A0950', SUM(SHIP_QTY), 0) AS WCNT147
              , DECODE(OPER, 'A0950', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R147
              , DECODE(OPER, 'A0950', SUM(PROC_TAT_QTY), 0) AS RSUM147
              , DECODE(OPER, 'A0950', SUM(SHIP_QTY), 0) AS RCNT147
              , DECODE(OPER, 'A053A', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W148
              , DECODE(OPER, 'A053A', SUM(WAIT_TAT_QTY), 0) AS WSUM148
              , DECODE(OPER, 'A053A', SUM(SHIP_QTY), 0) AS WCNT148
              , DECODE(OPER, 'A053A', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R148
              , DECODE(OPER, 'A053A', SUM(PROC_TAT_QTY), 0) AS RSUM148
              , DECODE(OPER, 'A053A', SUM(SHIP_QTY), 0) AS RCNT148
              , DECODE(OPER, 'A0940', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W149
              , DECODE(OPER, 'A0940', SUM(WAIT_TAT_QTY), 0) AS WSUM149
              , DECODE(OPER, 'A0940', SUM(SHIP_QTY), 0) AS WCNT149
              , DECODE(OPER, 'A0940', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R149
              , DECODE(OPER, 'A0940', SUM(PROC_TAT_QTY), 0) AS RSUM149
              , DECODE(OPER, 'A0940', SUM(SHIP_QTY), 0) AS RCNT149
              , DECODE(OPER, 'A0980', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W150
              , DECODE(OPER, 'A0980', SUM(WAIT_TAT_QTY), 0) AS WSUM150
              , DECODE(OPER, 'A0980', SUM(SHIP_QTY), 0) AS WCNT150
              , DECODE(OPER, 'A0980', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R150
              , DECODE(OPER, 'A0980', SUM(PROC_TAT_QTY), 0) AS RSUM150
              , DECODE(OPER, 'A0980', SUM(SHIP_QTY), 0) AS RCNT150
              , DECODE(OPER, 'A1000', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W151
              , DECODE(OPER, 'A1000', SUM(WAIT_TAT_QTY), 0) AS WSUM151
              , DECODE(OPER, 'A1000', SUM(SHIP_QTY), 0) AS WCNT151
              , DECODE(OPER, 'A1000', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R151
              , DECODE(OPER, 'A1000', SUM(PROC_TAT_QTY), 0) AS RSUM151
              , DECODE(OPER, 'A1000', SUM(SHIP_QTY), 0) AS RCNT151
              , DECODE(OPER, 'A055A', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W152
              , DECODE(OPER, 'A055A', SUM(WAIT_TAT_QTY), 0) AS WSUM152
              , DECODE(OPER, 'A055A', SUM(SHIP_QTY), 0) AS WCNT152
              , DECODE(OPER, 'A055A', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R152
              , DECODE(OPER, 'A055A', SUM(PROC_TAT_QTY), 0) AS RSUM152
              , DECODE(OPER, 'A055A', SUM(SHIP_QTY), 0) AS RCNT152
              , DECODE(OPER, 'A060A', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W153
              , DECODE(OPER, 'A060A', SUM(WAIT_TAT_QTY), 0) AS WSUM153
              , DECODE(OPER, 'A060A', SUM(SHIP_QTY), 0) AS WCNT153
              , DECODE(OPER, 'A060A', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R153
              , DECODE(OPER, 'A060A', SUM(PROC_TAT_QTY), 0) AS RSUM153
              , DECODE(OPER, 'A060A', SUM(SHIP_QTY), 0) AS RCNT153
              , DECODE(OPER, 'A1020', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W154
              , DECODE(OPER, 'A1020', SUM(WAIT_TAT_QTY), 0) AS WSUM154
              , DECODE(OPER, 'A1020', SUM(SHIP_QTY), 0) AS WCNT154
              , DECODE(OPER, 'A1020', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R154
              , DECODE(OPER, 'A1020', SUM(PROC_TAT_QTY), 0) AS RSUM154
              , DECODE(OPER, 'A1020', SUM(SHIP_QTY), 0) AS RCNT154
              , DECODE(OPER, 'A1100', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W155
              , DECODE(OPER, 'A1100', SUM(WAIT_TAT_QTY), 0) AS WSUM155
              , DECODE(OPER, 'A1100', SUM(SHIP_QTY), 0) AS WCNT155
              , DECODE(OPER, 'A1100', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R155
              , DECODE(OPER, 'A1100', SUM(PROC_TAT_QTY), 0) AS RSUM155
              , DECODE(OPER, 'A1100', SUM(SHIP_QTY), 0) AS RCNT155
              , DECODE(OPER, 'A1140', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W156
              , DECODE(OPER, 'A1140', SUM(WAIT_TAT_QTY), 0) AS WSUM156
              , DECODE(OPER, 'A1140', SUM(SHIP_QTY), 0) AS WCNT156
              , DECODE(OPER, 'A1140', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R156
              , DECODE(OPER, 'A1140', SUM(PROC_TAT_QTY), 0) AS RSUM156
              , DECODE(OPER, 'A1140', SUM(SHIP_QTY), 0) AS RCNT156
              , DECODE(OPER, 'A1150', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W157
              , DECODE(OPER, 'A1150', SUM(WAIT_TAT_QTY), 0) AS WSUM157
              , DECODE(OPER, 'A1150', SUM(SHIP_QTY), 0) AS WCNT157
              , DECODE(OPER, 'A1150', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R157
              , DECODE(OPER, 'A1150', SUM(PROC_TAT_QTY), 0) AS RSUM157
              , DECODE(OPER, 'A1150', SUM(SHIP_QTY), 0) AS RCNT157
              , DECODE(OPER, 'A1650', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W158
              , DECODE(OPER, 'A1650', SUM(WAIT_TAT_QTY), 0) AS WSUM158
              , DECODE(OPER, 'A1650', SUM(SHIP_QTY), 0) AS WCNT158
              , DECODE(OPER, 'A1650', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R158
              , DECODE(OPER, 'A1650', SUM(PROC_TAT_QTY), 0) AS RSUM158
              , DECODE(OPER, 'A1650', SUM(SHIP_QTY), 0) AS RCNT158
              , DECODE(OPER, 'A1180', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W159
              , DECODE(OPER, 'A1180', SUM(WAIT_TAT_QTY), 0) AS WSUM159
              , DECODE(OPER, 'A1180', SUM(SHIP_QTY), 0) AS WCNT159
              , DECODE(OPER, 'A1180', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R159
              , DECODE(OPER, 'A1180', SUM(PROC_TAT_QTY), 0) AS RSUM159
              , DECODE(OPER, 'A1180', SUM(SHIP_QTY), 0) AS RCNT159
              , DECODE(OPER, 'A1200', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W160
              , DECODE(OPER, 'A1200', SUM(WAIT_TAT_QTY), 0) AS WSUM160
              , DECODE(OPER, 'A1200', SUM(SHIP_QTY), 0) AS WCNT160
              , DECODE(OPER, 'A1200', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R160
              , DECODE(OPER, 'A1200', SUM(PROC_TAT_QTY), 0) AS RSUM160
              , DECODE(OPER, 'A1200', SUM(SHIP_QTY), 0) AS RCNT160
              , DECODE(OPER, 'A1230', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W161
              , DECODE(OPER, 'A1230', SUM(WAIT_TAT_QTY), 0) AS WSUM161
              , DECODE(OPER, 'A1230', SUM(SHIP_QTY), 0) AS WCNT161
              , DECODE(OPER, 'A1230', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R161
              , DECODE(OPER, 'A1230', SUM(PROC_TAT_QTY), 0) AS RSUM161
              , DECODE(OPER, 'A1230', SUM(SHIP_QTY), 0) AS RCNT161
              , DECODE(OPER, 'A1240', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W162
              , DECODE(OPER, 'A1240', SUM(WAIT_TAT_QTY), 0) AS WSUM162
              , DECODE(OPER, 'A1240', SUM(SHIP_QTY), 0) AS WCNT162
              , DECODE(OPER, 'A1240', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R162
              , DECODE(OPER, 'A1240', SUM(PROC_TAT_QTY), 0) AS RSUM162
              , DECODE(OPER, 'A1240', SUM(SHIP_QTY), 0) AS RCNT162
              , DECODE(OPER, 'A1250', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W163
              , DECODE(OPER, 'A1250', SUM(WAIT_TAT_QTY), 0) AS WSUM163
              , DECODE(OPER, 'A1250', SUM(SHIP_QTY), 0) AS WCNT163
              , DECODE(OPER, 'A1250', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R163
              , DECODE(OPER, 'A1250', SUM(PROC_TAT_QTY), 0) AS RSUM163
              , DECODE(OPER, 'A1250', SUM(SHIP_QTY), 0) AS RCNT163
              , DECODE(OPER, 'A1260', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W164
              , DECODE(OPER, 'A1260', SUM(WAIT_TAT_QTY), 0) AS WSUM164
              , DECODE(OPER, 'A1260', SUM(SHIP_QTY), 0) AS WCNT164
              , DECODE(OPER, 'A1260', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R164
              , DECODE(OPER, 'A1260', SUM(PROC_TAT_QTY), 0) AS RSUM164
              , DECODE(OPER, 'A1260', SUM(SHIP_QTY), 0) AS RCNT164
              , DECODE(OPER, 'A1300', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W165
              , DECODE(OPER, 'A1300', SUM(WAIT_TAT_QTY), 0) AS WSUM165
              , DECODE(OPER, 'A1300', SUM(SHIP_QTY), 0) AS WCNT165
              , DECODE(OPER, 'A1300', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R165
              , DECODE(OPER, 'A1300', SUM(PROC_TAT_QTY), 0) AS RSUM165
              , DECODE(OPER, 'A1300', SUM(SHIP_QTY), 0) AS RCNT165
              , DECODE(OPER, 'A1350', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W166
              , DECODE(OPER, 'A1350', SUM(WAIT_TAT_QTY), 0) AS WSUM166
              , DECODE(OPER, 'A1350', SUM(SHIP_QTY), 0) AS WCNT166
              , DECODE(OPER, 'A1350', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R166
              , DECODE(OPER, 'A1350', SUM(PROC_TAT_QTY), 0) AS RSUM166
              , DECODE(OPER, 'A1350', SUM(SHIP_QTY), 0) AS RCNT166
              , DECODE(OPER, 'A1370', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W167
              , DECODE(OPER, 'A1370', SUM(WAIT_TAT_QTY), 0) AS WSUM167
              , DECODE(OPER, 'A1370', SUM(SHIP_QTY), 0) AS WCNT167
              , DECODE(OPER, 'A1370', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R167
              , DECODE(OPER, 'A1370', SUM(PROC_TAT_QTY), 0) AS RSUM167
              , DECODE(OPER, 'A1370', SUM(SHIP_QTY), 0) AS RCNT167
              , DECODE(OPER, 'A1380', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W168
              , DECODE(OPER, 'A1380', SUM(WAIT_TAT_QTY), 0) AS WSUM168
              , DECODE(OPER, 'A1380', SUM(SHIP_QTY), 0) AS WCNT168
              , DECODE(OPER, 'A1380', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R168
              , DECODE(OPER, 'A1380', SUM(PROC_TAT_QTY), 0) AS RSUM168
              , DECODE(OPER, 'A1380', SUM(SHIP_QTY), 0) AS RCNT168
              , DECODE(OPER, 'A1050', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W169
              , DECODE(OPER, 'A1050', SUM(WAIT_TAT_QTY), 0) AS WSUM169
              , DECODE(OPER, 'A1050', SUM(SHIP_QTY), 0) AS WCNT169
              , DECODE(OPER, 'A1050', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R169
              , DECODE(OPER, 'A1050', SUM(PROC_TAT_QTY), 0) AS RSUM169
              , DECODE(OPER, 'A1050', SUM(SHIP_QTY), 0) AS RCNT169
              , DECODE(OPER, 'A1420', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W170
              , DECODE(OPER, 'A1420', SUM(WAIT_TAT_QTY), 0) AS WSUM170
              , DECODE(OPER, 'A1420', SUM(SHIP_QTY), 0) AS WCNT170
              , DECODE(OPER, 'A1420', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R170
              , DECODE(OPER, 'A1420', SUM(PROC_TAT_QTY), 0) AS RSUM170
              , DECODE(OPER, 'A1420', SUM(SHIP_QTY), 0) AS RCNT170
              , DECODE(OPER, 'A1440', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W171
              , DECODE(OPER, 'A1440', SUM(WAIT_TAT_QTY), 0) AS WSUM171
              , DECODE(OPER, 'A1440', SUM(SHIP_QTY), 0) AS WCNT171
              , DECODE(OPER, 'A1440', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R171
              , DECODE(OPER, 'A1440', SUM(PROC_TAT_QTY), 0) AS RSUM171
              , DECODE(OPER, 'A1440', SUM(SHIP_QTY), 0) AS RCNT171
              , DECODE(OPER, 'A1450', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W172
              , DECODE(OPER, 'A1450', SUM(WAIT_TAT_QTY), 0) AS WSUM172
              , DECODE(OPER, 'A1450', SUM(SHIP_QTY), 0) AS WCNT172
              , DECODE(OPER, 'A1450', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R172
              , DECODE(OPER, 'A1450', SUM(PROC_TAT_QTY), 0) AS RSUM172
              , DECODE(OPER, 'A1450', SUM(SHIP_QTY), 0) AS RCNT172
              , DECODE(OPER, 'A1821', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W173
              , DECODE(OPER, 'A1821', SUM(WAIT_TAT_QTY), 0) AS WSUM173
              , DECODE(OPER, 'A1821', SUM(SHIP_QTY), 0) AS WCNT173
              , DECODE(OPER, 'A1821', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R173
              , DECODE(OPER, 'A1821', SUM(PROC_TAT_QTY), 0) AS RSUM173
              , DECODE(OPER, 'A1821', SUM(SHIP_QTY), 0) AS RCNT173
              , DECODE(OPER, 'A1460', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W174
              , DECODE(OPER, 'A1460', SUM(WAIT_TAT_QTY), 0) AS WSUM174
              , DECODE(OPER, 'A1460', SUM(SHIP_QTY), 0) AS WCNT174
              , DECODE(OPER, 'A1460', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R174
              , DECODE(OPER, 'A1460', SUM(PROC_TAT_QTY), 0) AS RSUM174
              , DECODE(OPER, 'A1460', SUM(SHIP_QTY), 0) AS RCNT174
              , DECODE(OPER, 'A1470', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W175
              , DECODE(OPER, 'A1470', SUM(WAIT_TAT_QTY), 0) AS WSUM175
              , DECODE(OPER, 'A1470', SUM(SHIP_QTY), 0) AS WCNT175
              , DECODE(OPER, 'A1470', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R175
              , DECODE(OPER, 'A1470', SUM(PROC_TAT_QTY), 0) AS RSUM175
              , DECODE(OPER, 'A1470', SUM(SHIP_QTY), 0) AS RCNT175
              , DECODE(OPER, 'A1500', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W176
              , DECODE(OPER, 'A1500', SUM(WAIT_TAT_QTY), 0) AS WSUM176
              , DECODE(OPER, 'A1500', SUM(SHIP_QTY), 0) AS WCNT176
              , DECODE(OPER, 'A1500', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R176
              , DECODE(OPER, 'A1500', SUM(PROC_TAT_QTY), 0) AS RSUM176
              , DECODE(OPER, 'A1500', SUM(SHIP_QTY), 0) AS RCNT176
              , DECODE(OPER, 'A1550', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W177
              , DECODE(OPER, 'A1550', SUM(WAIT_TAT_QTY), 0) AS WSUM177
              , DECODE(OPER, 'A1550', SUM(SHIP_QTY), 0) AS WCNT177
              , DECODE(OPER, 'A1550', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R177
              , DECODE(OPER, 'A1550', SUM(PROC_TAT_QTY), 0) AS RSUM177
              , DECODE(OPER, 'A1550', SUM(SHIP_QTY), 0) AS RCNT177
              , DECODE(OPER, 'A1610', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W178
              , DECODE(OPER, 'A1610', SUM(WAIT_TAT_QTY), 0) AS WSUM178
              , DECODE(OPER, 'A1610', SUM(SHIP_QTY), 0) AS WCNT178
              , DECODE(OPER, 'A1610', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R178
              , DECODE(OPER, 'A1610', SUM(PROC_TAT_QTY), 0) AS RSUM178
              , DECODE(OPER, 'A1610', SUM(SHIP_QTY), 0) AS RCNT178
              , DECODE(OPER, 'A1560', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W179
              , DECODE(OPER, 'A1560', SUM(WAIT_TAT_QTY), 0) AS WSUM179
              , DECODE(OPER, 'A1560', SUM(SHIP_QTY), 0) AS WCNT179
              , DECODE(OPER, 'A1560', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R179
              , DECODE(OPER, 'A1560', SUM(PROC_TAT_QTY), 0) AS RSUM179
              , DECODE(OPER, 'A1560', SUM(SHIP_QTY), 0) AS RCNT179
              , DECODE(OPER, 'A1730', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W180
              , DECODE(OPER, 'A1730', SUM(WAIT_TAT_QTY), 0) AS WSUM180
              , DECODE(OPER, 'A1730', SUM(SHIP_QTY), 0) AS WCNT180
              , DECODE(OPER, 'A1730', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R180
              , DECODE(OPER, 'A1730', SUM(PROC_TAT_QTY), 0) AS RSUM180
              , DECODE(OPER, 'A1730', SUM(SHIP_QTY), 0) AS RCNT180
              , DECODE(OPER, 'A1740', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W181
              , DECODE(OPER, 'A1740', SUM(WAIT_TAT_QTY), 0) AS WSUM181
              , DECODE(OPER, 'A1740', SUM(SHIP_QTY), 0) AS WCNT181
              , DECODE(OPER, 'A1740', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R181
              , DECODE(OPER, 'A1740', SUM(PROC_TAT_QTY), 0) AS RSUM181
              , DECODE(OPER, 'A1740', SUM(SHIP_QTY), 0) AS RCNT181
              , DECODE(OPER, 'A1750', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W182
              , DECODE(OPER, 'A1750', SUM(WAIT_TAT_QTY), 0) AS WSUM182
              , DECODE(OPER, 'A1750', SUM(SHIP_QTY), 0) AS WCNT182
              , DECODE(OPER, 'A1750', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R182
              , DECODE(OPER, 'A1750', SUM(PROC_TAT_QTY), 0) AS RSUM182
              , DECODE(OPER, 'A1750', SUM(SHIP_QTY), 0) AS RCNT182
              , DECODE(OPER, 'A1755', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W183
              , DECODE(OPER, 'A1755', SUM(WAIT_TAT_QTY), 0) AS WSUM183
              , DECODE(OPER, 'A1755', SUM(SHIP_QTY), 0) AS WCNT183
              , DECODE(OPER, 'A1755', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R183
              , DECODE(OPER, 'A1755', SUM(PROC_TAT_QTY), 0) AS RSUM183
              , DECODE(OPER, 'A1755', SUM(SHIP_QTY), 0) AS RCNT183
              , DECODE(OPER, 'A1760', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W184
              , DECODE(OPER, 'A1760', SUM(WAIT_TAT_QTY), 0) AS WSUM184
              , DECODE(OPER, 'A1760', SUM(SHIP_QTY), 0) AS WCNT184
              , DECODE(OPER, 'A1760', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R184
              , DECODE(OPER, 'A1760', SUM(PROC_TAT_QTY), 0) AS RSUM184
              , DECODE(OPER, 'A1760', SUM(SHIP_QTY), 0) AS RCNT184
              , DECODE(OPER, 'A1765', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W185
              , DECODE(OPER, 'A1765', SUM(WAIT_TAT_QTY), 0) AS WSUM185
              , DECODE(OPER, 'A1765', SUM(SHIP_QTY), 0) AS WCNT185
              , DECODE(OPER, 'A1765', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R185
              , DECODE(OPER, 'A1765', SUM(PROC_TAT_QTY), 0) AS RSUM185
              , DECODE(OPER, 'A1765', SUM(SHIP_QTY), 0) AS RCNT185
              , DECODE(OPER, 'A1763', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W186
              , DECODE(OPER, 'A1763', SUM(WAIT_TAT_QTY), 0) AS WSUM186
              , DECODE(OPER, 'A1763', SUM(SHIP_QTY), 0) AS WCNT186
              , DECODE(OPER, 'A1763', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R186
              , DECODE(OPER, 'A1763', SUM(PROC_TAT_QTY), 0) AS RSUM186
              , DECODE(OPER, 'A1763', SUM(SHIP_QTY), 0) AS RCNT186
              , DECODE(OPER, 'A1770', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W187
              , DECODE(OPER, 'A1770', SUM(WAIT_TAT_QTY), 0) AS WSUM187
              , DECODE(OPER, 'A1770', SUM(SHIP_QTY), 0) AS WCNT187
              , DECODE(OPER, 'A1770', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R187
              , DECODE(OPER, 'A1770', SUM(PROC_TAT_QTY), 0) AS RSUM187
              , DECODE(OPER, 'A1770', SUM(SHIP_QTY), 0) AS RCNT187
              , DECODE(OPER, 'A1790', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W188
              , DECODE(OPER, 'A1790', SUM(WAIT_TAT_QTY), 0) AS WSUM188
              , DECODE(OPER, 'A1790', SUM(SHIP_QTY), 0) AS WCNT188
              , DECODE(OPER, 'A1790', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R188
              , DECODE(OPER, 'A1790', SUM(PROC_TAT_QTY), 0) AS RSUM188
              , DECODE(OPER, 'A1790', SUM(SHIP_QTY), 0) AS RCNT188
              , DECODE(OPER, 'A1795', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W189
              , DECODE(OPER, 'A1795', SUM(WAIT_TAT_QTY), 0) AS WSUM189
              , DECODE(OPER, 'A1795', SUM(SHIP_QTY), 0) AS WCNT189
              , DECODE(OPER, 'A1795', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R189
              , DECODE(OPER, 'A1795', SUM(PROC_TAT_QTY), 0) AS RSUM189
              , DECODE(OPER, 'A1795', SUM(SHIP_QTY), 0) AS RCNT189
              , DECODE(OPER, 'A1800', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W190
              , DECODE(OPER, 'A1800', SUM(WAIT_TAT_QTY), 0) AS WSUM190
              , DECODE(OPER, 'A1800', SUM(SHIP_QTY), 0) AS WCNT190
              , DECODE(OPER, 'A1800', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R190
              , DECODE(OPER, 'A1800', SUM(PROC_TAT_QTY), 0) AS RSUM190
              , DECODE(OPER, 'A1800', SUM(SHIP_QTY), 0) AS RCNT190
              , DECODE(OPER, 'A1810', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W191
              , DECODE(OPER, 'A1810', SUM(WAIT_TAT_QTY), 0) AS WSUM191
              , DECODE(OPER, 'A1810', SUM(SHIP_QTY), 0) AS WCNT191
              , DECODE(OPER, 'A1810', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R191
              , DECODE(OPER, 'A1810', SUM(PROC_TAT_QTY), 0) AS RSUM191
              , DECODE(OPER, 'A1810', SUM(SHIP_QTY), 0) AS RCNT191
              , DECODE(OPER, 'A1812', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W192
              , DECODE(OPER, 'A1812', SUM(WAIT_TAT_QTY), 0) AS WSUM192
              , DECODE(OPER, 'A1812', SUM(SHIP_QTY), 0) AS WCNT192
              , DECODE(OPER, 'A1812', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R192
              , DECODE(OPER, 'A1812', SUM(PROC_TAT_QTY), 0) AS RSUM192
              , DECODE(OPER, 'A1812', SUM(SHIP_QTY), 0) AS RCNT192
              , DECODE(OPER, 'A1816', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W193
              , DECODE(OPER, 'A1816', SUM(WAIT_TAT_QTY), 0) AS WSUM193
              , DECODE(OPER, 'A1816', SUM(SHIP_QTY), 0) AS WCNT193
              , DECODE(OPER, 'A1816', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R193
              , DECODE(OPER, 'A1816', SUM(PROC_TAT_QTY), 0) AS RSUM193
              , DECODE(OPER, 'A1816', SUM(SHIP_QTY), 0) AS RCNT193
              , DECODE(OPER, 'A1820', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W194
              , DECODE(OPER, 'A1820', SUM(WAIT_TAT_QTY), 0) AS WSUM194
              , DECODE(OPER, 'A1820', SUM(SHIP_QTY), 0) AS WCNT194
              , DECODE(OPER, 'A1820', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R194
              , DECODE(OPER, 'A1820', SUM(PROC_TAT_QTY), 0) AS RSUM194
              , DECODE(OPER, 'A1820', SUM(SHIP_QTY), 0) AS RCNT194
              , DECODE(OPER, 'A1825', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W195
              , DECODE(OPER, 'A1825', SUM(WAIT_TAT_QTY), 0) AS WSUM195
              , DECODE(OPER, 'A1825', SUM(SHIP_QTY), 0) AS WCNT195
              , DECODE(OPER, 'A1825', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R195
              , DECODE(OPER, 'A1825', SUM(PROC_TAT_QTY), 0) AS RSUM195
              , DECODE(OPER, 'A1825', SUM(SHIP_QTY), 0) AS RCNT195
              , DECODE(OPER, 'A1960', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W196
              , DECODE(OPER, 'A1960', SUM(WAIT_TAT_QTY), 0) AS WSUM196
              , DECODE(OPER, 'A1960', SUM(SHIP_QTY), 0) AS WCNT196
              , DECODE(OPER, 'A1960', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R196
              , DECODE(OPER, 'A1960', SUM(PROC_TAT_QTY), 0) AS RSUM196
              , DECODE(OPER, 'A1960', SUM(SHIP_QTY), 0) AS RCNT196
              , DECODE(OPER, 'A1815', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W197
              , DECODE(OPER, 'A1815', SUM(WAIT_TAT_QTY), 0) AS WSUM197
              , DECODE(OPER, 'A1815', SUM(SHIP_QTY), 0) AS WCNT197
              , DECODE(OPER, 'A1815', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R197
              , DECODE(OPER, 'A1815', SUM(PROC_TAT_QTY), 0) AS RSUM197
              , DECODE(OPER, 'A1815', SUM(SHIP_QTY), 0) AS RCNT197
              , DECODE(OPER, 'A1830', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W198
              , DECODE(OPER, 'A1830', SUM(WAIT_TAT_QTY), 0) AS WSUM198
              , DECODE(OPER, 'A1830', SUM(SHIP_QTY), 0) AS WCNT198
              , DECODE(OPER, 'A1830', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R198
              , DECODE(OPER, 'A1830', SUM(PROC_TAT_QTY), 0) AS RSUM198
              , DECODE(OPER, 'A1830', SUM(SHIP_QTY), 0) AS RCNT198
              , DECODE(OPER, 'A1710', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W199
              , DECODE(OPER, 'A1710', SUM(WAIT_TAT_QTY), 0) AS WSUM199
              , DECODE(OPER, 'A1710', SUM(SHIP_QTY), 0) AS WCNT199
              , DECODE(OPER, 'A1710', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R199
              , DECODE(OPER, 'A1710', SUM(PROC_TAT_QTY), 0) AS RSUM199
              , DECODE(OPER, 'A1710', SUM(SHIP_QTY), 0) AS RCNT199
              , DECODE(OPER, 'A1840', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W200
              , DECODE(OPER, 'A1840', SUM(WAIT_TAT_QTY), 0) AS WSUM200
              , DECODE(OPER, 'A1840', SUM(SHIP_QTY), 0) AS WCNT200
              , DECODE(OPER, 'A1840', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R200
              , DECODE(OPER, 'A1840', SUM(PROC_TAT_QTY), 0) AS RSUM200
              , DECODE(OPER, 'A1840', SUM(SHIP_QTY), 0) AS RCNT200
              , DECODE(OPER, 'A1900', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W201
              , DECODE(OPER, 'A1900', SUM(WAIT_TAT_QTY), 0) AS WSUM201
              , DECODE(OPER, 'A1900', SUM(SHIP_QTY), 0) AS WCNT201
              , DECODE(OPER, 'A1900', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R201
              , DECODE(OPER, 'A1900', SUM(PROC_TAT_QTY), 0) AS RSUM201
              , DECODE(OPER, 'A1900', SUM(SHIP_QTY), 0) AS RCNT201
              , DECODE(OPER, 'A2000', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W202
              , DECODE(OPER, 'A2000', SUM(WAIT_TAT_QTY), 0) AS WSUM202
              , DECODE(OPER, 'A2000', SUM(SHIP_QTY), 0) AS WCNT202
              , DECODE(OPER, 'A2000', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R202
              , DECODE(OPER, 'A2000', SUM(PROC_TAT_QTY), 0) AS RSUM202
              , DECODE(OPER, 'A2000', SUM(SHIP_QTY), 0) AS RCNT202
              , DECODE(OPER, 'A2010', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W203
              , DECODE(OPER, 'A2010', SUM(WAIT_TAT_QTY), 0) AS WSUM203
              , DECODE(OPER, 'A2010', SUM(SHIP_QTY), 0) AS WCNT203
              , DECODE(OPER, 'A2010', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R203
              , DECODE(OPER, 'A2010', SUM(PROC_TAT_QTY), 0) AS RSUM203
              , DECODE(OPER, 'A2010', SUM(SHIP_QTY), 0) AS RCNT203
              , DECODE(OPER, 'A2020', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W204
              , DECODE(OPER, 'A2020', SUM(WAIT_TAT_QTY), 0) AS WSUM204
              , DECODE(OPER, 'A2020', SUM(SHIP_QTY), 0) AS WCNT204
              , DECODE(OPER, 'A2020', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R204
              , DECODE(OPER, 'A2020', SUM(PROC_TAT_QTY), 0) AS RSUM204
              , DECODE(OPER, 'A2020', SUM(SHIP_QTY), 0) AS RCNT204
              , DECODE(OPER, 'A2025', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W205
              , DECODE(OPER, 'A2025', SUM(WAIT_TAT_QTY), 0) AS WSUM205
              , DECODE(OPER, 'A2025', SUM(SHIP_QTY), 0) AS WCNT205
              , DECODE(OPER, 'A2025', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R205
              , DECODE(OPER, 'A2025', SUM(PROC_TAT_QTY), 0) AS RSUM205
              , DECODE(OPER, 'A2025', SUM(SHIP_QTY), 0) AS RCNT205
              , DECODE(OPER, 'A1819', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W206
              , DECODE(OPER, 'A1819', SUM(WAIT_TAT_QTY), 0) AS WSUM206
              , DECODE(OPER, 'A1819', SUM(SHIP_QTY), 0) AS WCNT206
              , DECODE(OPER, 'A1819', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R206
              , DECODE(OPER, 'A1819', SUM(PROC_TAT_QTY), 0) AS RSUM206
              , DECODE(OPER, 'A1819', SUM(SHIP_QTY), 0) AS RCNT206
              , DECODE(OPER, 'A2030', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W207
              , DECODE(OPER, 'A2030', SUM(WAIT_TAT_QTY), 0) AS WSUM207
              , DECODE(OPER, 'A2030', SUM(SHIP_QTY), 0) AS WCNT207
              , DECODE(OPER, 'A2030', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R207
              , DECODE(OPER, 'A2030', SUM(PROC_TAT_QTY), 0) AS RSUM207
              , DECODE(OPER, 'A2030', SUM(SHIP_QTY), 0) AS RCNT207
              , DECODE(OPER, 'A2040', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W208
              , DECODE(OPER, 'A2040', SUM(WAIT_TAT_QTY), 0) AS WSUM208
              , DECODE(OPER, 'A2040', SUM(SHIP_QTY), 0) AS WCNT208
              , DECODE(OPER, 'A2040', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R208
              , DECODE(OPER, 'A2040', SUM(PROC_TAT_QTY), 0) AS RSUM208
              , DECODE(OPER, 'A2040', SUM(SHIP_QTY), 0) AS RCNT208
              , DECODE(OPER, 'A2041', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W209
              , DECODE(OPER, 'A2041', SUM(WAIT_TAT_QTY), 0) AS WSUM209
              , DECODE(OPER, 'A2041', SUM(SHIP_QTY), 0) AS WCNT209
              , DECODE(OPER, 'A2041', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R209
              , DECODE(OPER, 'A2041', SUM(PROC_TAT_QTY), 0) AS RSUM209
              , DECODE(OPER, 'A2041', SUM(SHIP_QTY), 0) AS RCNT209
              , DECODE(OPER, 'A2042', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W210
              , DECODE(OPER, 'A2042', SUM(WAIT_TAT_QTY), 0) AS WSUM210
              , DECODE(OPER, 'A2042', SUM(SHIP_QTY), 0) AS WCNT210
              , DECODE(OPER, 'A2042', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R210
              , DECODE(OPER, 'A2042', SUM(PROC_TAT_QTY), 0) AS RSUM210
              , DECODE(OPER, 'A2042', SUM(SHIP_QTY), 0) AS RCNT210
              , DECODE(OPER, 'A2050', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W211
              , DECODE(OPER, 'A2050', SUM(WAIT_TAT_QTY), 0) AS WSUM211
              , DECODE(OPER, 'A2050', SUM(SHIP_QTY), 0) AS WCNT211
              , DECODE(OPER, 'A2050', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R211
              , DECODE(OPER, 'A2050', SUM(PROC_TAT_QTY), 0) AS RSUM211
              , DECODE(OPER, 'A2050', SUM(SHIP_QTY), 0) AS RCNT211
              , DECODE(OPER, 'A2150', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W212
              , DECODE(OPER, 'A2150', SUM(WAIT_TAT_QTY), 0) AS WSUM212
              , DECODE(OPER, 'A2150', SUM(SHIP_QTY), 0) AS WCNT212
              , DECODE(OPER, 'A2150', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R212
              , DECODE(OPER, 'A2150', SUM(PROC_TAT_QTY), 0) AS RSUM212
              , DECODE(OPER, 'A2150', SUM(SHIP_QTY), 0) AS RCNT212
              , DECODE(OPER, 'A2100', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W213
              , DECODE(OPER, 'A2100', SUM(WAIT_TAT_QTY), 0) AS WSUM213
              , DECODE(OPER, 'A2100', SUM(SHIP_QTY), 0) AS WCNT213
              , DECODE(OPER, 'A2100', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R213
              , DECODE(OPER, 'A2100', SUM(PROC_TAT_QTY), 0) AS RSUM213
              , DECODE(OPER, 'A2100', SUM(SHIP_QTY), 0) AS RCNT213
              , DECODE(OPER, 'A2300', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W214
              , DECODE(OPER, 'A2300', SUM(WAIT_TAT_QTY), 0) AS WSUM214
              , DECODE(OPER, 'A2300', SUM(SHIP_QTY), 0) AS WCNT214
              , DECODE(OPER, 'A2300', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R214
              , DECODE(OPER, 'A2300', SUM(PROC_TAT_QTY), 0) AS RSUM214
              , DECODE(OPER, 'A2300', SUM(SHIP_QTY), 0) AS RCNT214
              , DECODE(OPER, 'A2350', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W215
              , DECODE(OPER, 'A2350', SUM(WAIT_TAT_QTY), 0) AS WSUM215
              , DECODE(OPER, 'A2350', SUM(SHIP_QTY), 0) AS WCNT215
              , DECODE(OPER, 'A2350', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R215
              , DECODE(OPER, 'A2350', SUM(PROC_TAT_QTY), 0) AS RSUM215
              , DECODE(OPER, 'A2350', SUM(SHIP_QTY), 0) AS RCNT215
              , DECODE(OPER, 'AZ010', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W216
              , DECODE(OPER, 'AZ010', SUM(WAIT_TAT_QTY), 0) AS WSUM216
              , DECODE(OPER, 'AZ010', SUM(SHIP_QTY), 0) AS WCNT216
              , DECODE(OPER, 'AZ010', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R216
              , DECODE(OPER, 'AZ010', SUM(PROC_TAT_QTY), 0) AS RSUM216
              , DECODE(OPER, 'AZ010', SUM(SHIP_QTY), 0) AS RCNT216
           FROM ( 
                  SELECT SHIP_DATE, (SELECT DATA_1 FROM MGCMTBLDAT WHERE TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = MAT_GRP_1 AND ROWNUM=1) AS MAT_GRP_1, MAT_CMF_10,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', OPER 
                       , TAT.TOTAL_TAT_QTY AS TOTAL_TAT_QTY
                       , TAT.WAIT_TAT_QTY AS WAIT_TAT_QTY
                       , TAT.PROC_TAT_QTY AS PROC_TAT_QTY
                       , SHIP.SHIP_QTY AS SHIP_QTY
                    FROM CSUMTATMAT@RPTTOMES TAT, MWIPMATDEF MAT       
                       , (      
                           SELECT TAT.FACTORY, TAT.MAT_ID, TAT.SHIP_DATE AS WORK_DATE 
                                , SHIP_QTY      
                             FROM CSUMTATMAT@RPTTOMES TAT      
                            WHERE 1=1      
                              AND TAT.FACTORY='HMVA2'      
                              AND OPER ='AZ010'      
                              AND TAT.SHIP_DATE BETWEEN '20200408' AND '20200409' 
                         ) SHIP      
                   WHERE 1=1      
                     AND TAT.FACTORY = MAT.FACTORY    
                     AND TAT.MAT_ID = MAT.MAT_ID      
                     AND TAT.MAT_ID = SHIP.MAT_ID       
                     AND TAT.SHIP_DATE = SHIP.WORK_DATE       
                     AND MAT.MAT_VER = 1 
                     AND MAT.MAT_TYPE = 'FG' 
                     AND MAT.DELETE_FLAG <> 'Y' 
                     AND TAT.FACTORY = 'HMVA2'        
                     AND TAT.SHIP_DATE BETWEEN '20200408' AND '20200409' 
                 AND MAT.FIRST_FLOW LIKE '%'
                     AND TAT.OPER BETWEEN 'A0000' AND 'AZ010' 
                ) A 
          GROUP BY SHIP_DATE, MAT_GRP_1, MAT_CMF_10,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', OPER  
       )         
  GROUP BY SHIP_DATE, MAT_GRP_1, MAT_CMF_10,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' '
  ORDER BY SHIP_DATE, MAT_GRP_1, MAT_CMF_10,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' '

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT OPER
  FROM MWIPOPRDEF 
 WHERE 1=1 
   AND FACTORY='HMVA2'
   AND DECODE(OPER_CMF_2, ' ', 99999, TO_NUMBER(OPER_CMF_2)) BETWEEN (SELECT OPER_CMF_2 FROM MWIPOPRDEF WHERE OPER = 'A0000') AND (SELECT OPER_CMF_2 FROM MWIPOPRDEF WHERE OPER = 'AZ010') 
   AND OPER IN (
                SELECT DISTINCT OPER
                  FROM MWIPFLWOPR@RPTTOMES
                 WHERE FACTORY = 'HMVA2'
                   AND FLOW IN (
                                SELECT DISTINCT FIRST_FLOW 
                                  FROM MWIPMATDEF 
                                 WHERE FACTORY = 'HMVA2'
                                   AND MAT_TYPE = 'FG' 
                                   AND DELETE_FLAG = ' ' 
                               )
               )
 ORDER BY DECODE(OPER_CMF_2, ' ', 99999, TO_NUMBER(OPER_CMF_2)), OPER

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT OPR.OPER AS OPER
     , ROUND(SUM(TOTAL_TAT_QTY)/SUM(SHIP.SHIP_QTY),2) AS TAT
  FROM CSUMTATMAT@RPTTOMES TAT 
      , MWIPOPRDEF OPR 
      , MWIPMATDEF MAT
      , (      
        SELECT TAT.FACTORY 
             , TAT.MAT_ID 
             , TAT.SHIP_DATE AS WORK_DATE 
             , SHIP_QTY 
          FROM CSUMTATMAT@RPTTOMES TAT 
         WHERE 1=1      
           AND TAT.FACTORY='HMVA2'      
           AND OPER ='AZ010'      
           AND TAT.SHIP_DATE BETWEEN '20200401' AND '20200409' 
        ) SHIP      
  WHERE TAT.FACTORY = 'HMVA2'
    AND TAT.FACTORY = MAT.FACTORY
    AND TAT.FACTORY = OPR.FACTORY
    AND TAT.MAT_ID = MAT.MAT_ID
    AND TAT.MAT_ID = SHIP.MAT_ID
    AND TAT.SHIP_DATE = SHIP.WORK_DATE       
    AND MAT.MAT_VER = 1
    AND MAT.MAT_TYPE = 'FG' 
    AND MAT.DELETE_FLAG = ' ' 
    AND TAT.TOTAL_TIME <> 0
    AND OPR.OPER_GRP_1 NOT IN (' ')
    AND OPR.OPER = TAT.OPER
    AND TAT.OPER BETWEEN 'A0000' AND 'AZ010'  
    AND TAT.SHIP_DATE BETWEEN '20200401' AND '20200409' 
  GROUP BY OPR.OPER
  ORDER BY OPR.OPER

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT SHIP_DATE, MAT_GRP_1, MAT_CMF_10,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ' 
     , ROUND(SUM(CTOT),2) AS  CTOT   
     , 0 AS  Wait   
     , 0 AS  Run   
     , ROUND(SUM(W0),2) AS W0
     , ROUND(SUM(WSUM0),2) AS WSUM0
     , ROUND(SUM(WCNT0),2) AS WCNT0
     , ROUND(SUM(R0),2) AS R0
     , ROUND(SUM(RSUM0),2) AS RSUM0
     , ROUND(SUM(RCNT0),2) AS RCNT0
     , ROUND(SUM(W1),2) AS W1
     , ROUND(SUM(WSUM1),2) AS WSUM1
     , ROUND(SUM(WCNT1),2) AS WCNT1
     , ROUND(SUM(R1),2) AS R1
     , ROUND(SUM(RSUM1),2) AS RSUM1
     , ROUND(SUM(RCNT1),2) AS RCNT1
     , ROUND(SUM(W2),2) AS W2
     , ROUND(SUM(WSUM2),2) AS WSUM2
     , ROUND(SUM(WCNT2),2) AS WCNT2
     , ROUND(SUM(R2),2) AS R2
     , ROUND(SUM(RSUM2),2) AS RSUM2
     , ROUND(SUM(RCNT2),2) AS RCNT2
     , ROUND(SUM(W3),2) AS W3
     , ROUND(SUM(WSUM3),2) AS WSUM3
     , ROUND(SUM(WCNT3),2) AS WCNT3
     , ROUND(SUM(R3),2) AS R3
     , ROUND(SUM(RSUM3),2) AS RSUM3
     , ROUND(SUM(RCNT3),2) AS RCNT3
     , ROUND(SUM(W4),2) AS W4
     , ROUND(SUM(WSUM4),2) AS WSUM4
     , ROUND(SUM(WCNT4),2) AS WCNT4
     , ROUND(SUM(R4),2) AS R4
     , ROUND(SUM(RSUM4),2) AS RSUM4
     , ROUND(SUM(RCNT4),2) AS RCNT4
     , ROUND(SUM(W5),2) AS W5
     , ROUND(SUM(WSUM5),2) AS WSUM5
     , ROUND(SUM(WCNT5),2) AS WCNT5
     , ROUND(SUM(R5),2) AS R5
     , ROUND(SUM(RSUM5),2) AS RSUM5
     , ROUND(SUM(RCNT5),2) AS RCNT5
     , ROUND(SUM(W6),2) AS W6
     , ROUND(SUM(WSUM6),2) AS WSUM6
     , ROUND(SUM(WCNT6),2) AS WCNT6
     , ROUND(SUM(R6),2) AS R6
     , ROUND(SUM(RSUM6),2) AS RSUM6
     , ROUND(SUM(RCNT6),2) AS RCNT6
     , ROUND(SUM(W7),2) AS W7
     , ROUND(SUM(WSUM7),2) AS WSUM7
     , ROUND(SUM(WCNT7),2) AS WCNT7
     , ROUND(SUM(R7),2) AS R7
     , ROUND(SUM(RSUM7),2) AS RSUM7
     , ROUND(SUM(RCNT7),2) AS RCNT7
     , ROUND(SUM(W8),2) AS W8
     , ROUND(SUM(WSUM8),2) AS WSUM8
     , ROUND(SUM(WCNT8),2) AS WCNT8
     , ROUND(SUM(R8),2) AS R8
     , ROUND(SUM(RSUM8),2) AS RSUM8
     , ROUND(SUM(RCNT8),2) AS RCNT8
     , ROUND(SUM(W9),2) AS W9
     , ROUND(SUM(WSUM9),2) AS WSUM9
     , ROUND(SUM(WCNT9),2) AS WCNT9
     , ROUND(SUM(R9),2) AS R9
     , ROUND(SUM(RSUM9),2) AS RSUM9
     , ROUND(SUM(RCNT9),2) AS RCNT9
     , ROUND(SUM(W10),2) AS W10
     , ROUND(SUM(WSUM10),2) AS WSUM10
     , ROUND(SUM(WCNT10),2) AS WCNT10
     , ROUND(SUM(R10),2) AS R10
     , ROUND(SUM(RSUM10),2) AS RSUM10
     , ROUND(SUM(RCNT10),2) AS RCNT10
     , ROUND(SUM(W11),2) AS W11
     , ROUND(SUM(WSUM11),2) AS WSUM11
     , ROUND(SUM(WCNT11),2) AS WCNT11
     , ROUND(SUM(R11),2) AS R11
     , ROUND(SUM(RSUM11),2) AS RSUM11
     , ROUND(SUM(RCNT11),2) AS RCNT11
     , ROUND(SUM(W12),2) AS W12
     , ROUND(SUM(WSUM12),2) AS WSUM12
     , ROUND(SUM(WCNT12),2) AS WCNT12
     , ROUND(SUM(R12),2) AS R12
     , ROUND(SUM(RSUM12),2) AS RSUM12
     , ROUND(SUM(RCNT12),2) AS RCNT12
     , ROUND(SUM(W13),2) AS W13
     , ROUND(SUM(WSUM13),2) AS WSUM13
     , ROUND(SUM(WCNT13),2) AS WCNT13
     , ROUND(SUM(R13),2) AS R13
     , ROUND(SUM(RSUM13),2) AS RSUM13
     , ROUND(SUM(RCNT13),2) AS RCNT13
     , ROUND(SUM(W14),2) AS W14
     , ROUND(SUM(WSUM14),2) AS WSUM14
     , ROUND(SUM(WCNT14),2) AS WCNT14
     , ROUND(SUM(R14),2) AS R14
     , ROUND(SUM(RSUM14),2) AS RSUM14
     , ROUND(SUM(RCNT14),2) AS RCNT14
     , ROUND(SUM(W15),2) AS W15
     , ROUND(SUM(WSUM15),2) AS WSUM15
     , ROUND(SUM(WCNT15),2) AS WCNT15
     , ROUND(SUM(R15),2) AS R15
     , ROUND(SUM(RSUM15),2) AS RSUM15
     , ROUND(SUM(RCNT15),2) AS RCNT15
     , ROUND(SUM(W16),2) AS W16
     , ROUND(SUM(WSUM16),2) AS WSUM16
     , ROUND(SUM(WCNT16),2) AS WCNT16
     , ROUND(SUM(R16),2) AS R16
     , ROUND(SUM(RSUM16),2) AS RSUM16
     , ROUND(SUM(RCNT16),2) AS RCNT16
     , ROUND(SUM(W17),2) AS W17
     , ROUND(SUM(WSUM17),2) AS WSUM17
     , ROUND(SUM(WCNT17),2) AS WCNT17
     , ROUND(SUM(R17),2) AS R17
     , ROUND(SUM(RSUM17),2) AS RSUM17
     , ROUND(SUM(RCNT17),2) AS RCNT17
     , ROUND(SUM(W18),2) AS W18
     , ROUND(SUM(WSUM18),2) AS WSUM18
     , ROUND(SUM(WCNT18),2) AS WCNT18
     , ROUND(SUM(R18),2) AS R18
     , ROUND(SUM(RSUM18),2) AS RSUM18
     , ROUND(SUM(RCNT18),2) AS RCNT18
     , ROUND(SUM(W19),2) AS W19
     , ROUND(SUM(WSUM19),2) AS WSUM19
     , ROUND(SUM(WCNT19),2) AS WCNT19
     , ROUND(SUM(R19),2) AS R19
     , ROUND(SUM(RSUM19),2) AS RSUM19
     , ROUND(SUM(RCNT19),2) AS RCNT19
     , ROUND(SUM(W20),2) AS W20
     , ROUND(SUM(WSUM20),2) AS WSUM20
     , ROUND(SUM(WCNT20),2) AS WCNT20
     , ROUND(SUM(R20),2) AS R20
     , ROUND(SUM(RSUM20),2) AS RSUM20
     , ROUND(SUM(RCNT20),2) AS RCNT20
     , ROUND(SUM(W21),2) AS W21
     , ROUND(SUM(WSUM21),2) AS WSUM21
     , ROUND(SUM(WCNT21),2) AS WCNT21
     , ROUND(SUM(R21),2) AS R21
     , ROUND(SUM(RSUM21),2) AS RSUM21
     , ROUND(SUM(RCNT21),2) AS RCNT21
     , ROUND(SUM(W22),2) AS W22
     , ROUND(SUM(WSUM22),2) AS WSUM22
     , ROUND(SUM(WCNT22),2) AS WCNT22
     , ROUND(SUM(R22),2) AS R22
     , ROUND(SUM(RSUM22),2) AS RSUM22
     , ROUND(SUM(RCNT22),2) AS RCNT22
     , ROUND(SUM(W23),2) AS W23
     , ROUND(SUM(WSUM23),2) AS WSUM23
     , ROUND(SUM(WCNT23),2) AS WCNT23
     , ROUND(SUM(R23),2) AS R23
     , ROUND(SUM(RSUM23),2) AS RSUM23
     , ROUND(SUM(RCNT23),2) AS RCNT23
     , ROUND(SUM(W24),2) AS W24
     , ROUND(SUM(WSUM24),2) AS WSUM24
     , ROUND(SUM(WCNT24),2) AS WCNT24
     , ROUND(SUM(R24),2) AS R24
     , ROUND(SUM(RSUM24),2) AS RSUM24
     , ROUND(SUM(RCNT24),2) AS RCNT24
     , ROUND(SUM(W25),2) AS W25
     , ROUND(SUM(WSUM25),2) AS WSUM25
     , ROUND(SUM(WCNT25),2) AS WCNT25
     , ROUND(SUM(R25),2) AS R25
     , ROUND(SUM(RSUM25),2) AS RSUM25
     , ROUND(SUM(RCNT25),2) AS RCNT25
     , ROUND(SUM(W26),2) AS W26
     , ROUND(SUM(WSUM26),2) AS WSUM26
     , ROUND(SUM(WCNT26),2) AS WCNT26
     , ROUND(SUM(R26),2) AS R26
     , ROUND(SUM(RSUM26),2) AS RSUM26
     , ROUND(SUM(RCNT26),2) AS RCNT26
     , ROUND(SUM(W27),2) AS W27
     , ROUND(SUM(WSUM27),2) AS WSUM27
     , ROUND(SUM(WCNT27),2) AS WCNT27
     , ROUND(SUM(R27),2) AS R27
     , ROUND(SUM(RSUM27),2) AS RSUM27
     , ROUND(SUM(RCNT27),2) AS RCNT27
     , ROUND(SUM(W28),2) AS W28
     , ROUND(SUM(WSUM28),2) AS WSUM28
     , ROUND(SUM(WCNT28),2) AS WCNT28
     , ROUND(SUM(R28),2) AS R28
     , ROUND(SUM(RSUM28),2) AS RSUM28
     , ROUND(SUM(RCNT28),2) AS RCNT28
     , ROUND(SUM(W29),2) AS W29
     , ROUND(SUM(WSUM29),2) AS WSUM29
     , ROUND(SUM(WCNT29),2) AS WCNT29
     , ROUND(SUM(R29),2) AS R29
     , ROUND(SUM(RSUM29),2) AS RSUM29
     , ROUND(SUM(RCNT29),2) AS RCNT29
     , ROUND(SUM(W30),2) AS W30
     , ROUND(SUM(WSUM30),2) AS WSUM30
     , ROUND(SUM(WCNT30),2) AS WCNT30
     , ROUND(SUM(R30),2) AS R30
     , ROUND(SUM(RSUM30),2) AS RSUM30
     , ROUND(SUM(RCNT30),2) AS RCNT30
     , ROUND(SUM(W31),2) AS W31
     , ROUND(SUM(WSUM31),2) AS WSUM31
     , ROUND(SUM(WCNT31),2) AS WCNT31
     , ROUND(SUM(R31),2) AS R31
     , ROUND(SUM(RSUM31),2) AS RSUM31
     , ROUND(SUM(RCNT31),2) AS RCNT31
     , ROUND(SUM(W32),2) AS W32
     , ROUND(SUM(WSUM32),2) AS WSUM32
     , ROUND(SUM(WCNT32),2) AS WCNT32
     , ROUND(SUM(R32),2) AS R32
     , ROUND(SUM(RSUM32),2) AS RSUM32
     , ROUND(SUM(RCNT32),2) AS RCNT32
     , ROUND(SUM(W33),2) AS W33
     , ROUND(SUM(WSUM33),2) AS WSUM33
     , ROUND(SUM(WCNT33),2) AS WCNT33
     , ROUND(SUM(R33),2) AS R33
     , ROUND(SUM(RSUM33),2) AS RSUM33
     , ROUND(SUM(RCNT33),2) AS RCNT33
     , ROUND(SUM(W34),2) AS W34
     , ROUND(SUM(WSUM34),2) AS WSUM34
     , ROUND(SUM(WCNT34),2) AS WCNT34
     , ROUND(SUM(R34),2) AS R34
     , ROUND(SUM(RSUM34),2) AS RSUM34
     , ROUND(SUM(RCNT34),2) AS RCNT34
     , ROUND(SUM(W35),2) AS W35
     , ROUND(SUM(WSUM35),2) AS WSUM35
     , ROUND(SUM(WCNT35),2) AS WCNT35
     , ROUND(SUM(R35),2) AS R35
     , ROUND(SUM(RSUM35),2) AS RSUM35
     , ROUND(SUM(RCNT35),2) AS RCNT35
     , ROUND(SUM(W36),2) AS W36
     , ROUND(SUM(WSUM36),2) AS WSUM36
     , ROUND(SUM(WCNT36),2) AS WCNT36
     , ROUND(SUM(R36),2) AS R36
     , ROUND(SUM(RSUM36),2) AS RSUM36
     , ROUND(SUM(RCNT36),2) AS RCNT36
     , ROUND(SUM(W37),2) AS W37
     , ROUND(SUM(WSUM37),2) AS WSUM37
     , ROUND(SUM(WCNT37),2) AS WCNT37
     , ROUND(SUM(R37),2) AS R37
     , ROUND(SUM(RSUM37),2) AS RSUM37
     , ROUND(SUM(RCNT37),2) AS RCNT37
     , ROUND(SUM(W38),2) AS W38
     , ROUND(SUM(WSUM38),2) AS WSUM38
     , ROUND(SUM(WCNT38),2) AS WCNT38
     , ROUND(SUM(R38),2) AS R38
     , ROUND(SUM(RSUM38),2) AS RSUM38
     , ROUND(SUM(RCNT38),2) AS RCNT38
     , ROUND(SUM(W39),2) AS W39
     , ROUND(SUM(WSUM39),2) AS WSUM39
     , ROUND(SUM(WCNT39),2) AS WCNT39
     , ROUND(SUM(R39),2) AS R39
     , ROUND(SUM(RSUM39),2) AS RSUM39
     , ROUND(SUM(RCNT39),2) AS RCNT39
     , ROUND(SUM(W40),2) AS W40
     , ROUND(SUM(WSUM40),2) AS WSUM40
     , ROUND(SUM(WCNT40),2) AS WCNT40
     , ROUND(SUM(R40),2) AS R40
     , ROUND(SUM(RSUM40),2) AS RSUM40
     , ROUND(SUM(RCNT40),2) AS RCNT40
     , ROUND(SUM(W41),2) AS W41
     , ROUND(SUM(WSUM41),2) AS WSUM41
     , ROUND(SUM(WCNT41),2) AS WCNT41
     , ROUND(SUM(R41),2) AS R41
     , ROUND(SUM(RSUM41),2) AS RSUM41
     , ROUND(SUM(RCNT41),2) AS RCNT41
     , ROUND(SUM(W42),2) AS W42
     , ROUND(SUM(WSUM42),2) AS WSUM42
     , ROUND(SUM(WCNT42),2) AS WCNT42
     , ROUND(SUM(R42),2) AS R42
     , ROUND(SUM(RSUM42),2) AS RSUM42
     , ROUND(SUM(RCNT42),2) AS RCNT42
     , ROUND(SUM(W43),2) AS W43
     , ROUND(SUM(WSUM43),2) AS WSUM43
     , ROUND(SUM(WCNT43),2) AS WCNT43
     , ROUND(SUM(R43),2) AS R43
     , ROUND(SUM(RSUM43),2) AS RSUM43
     , ROUND(SUM(RCNT43),2) AS RCNT43
     , ROUND(SUM(W44),2) AS W44
     , ROUND(SUM(WSUM44),2) AS WSUM44
     , ROUND(SUM(WCNT44),2) AS WCNT44
     , ROUND(SUM(R44),2) AS R44
     , ROUND(SUM(RSUM44),2) AS RSUM44
     , ROUND(SUM(RCNT44),2) AS RCNT44
     , ROUND(SUM(W45),2) AS W45
     , ROUND(SUM(WSUM45),2) AS WSUM45
     , ROUND(SUM(WCNT45),2) AS WCNT45
     , ROUND(SUM(R45),2) AS R45
     , ROUND(SUM(RSUM45),2) AS RSUM45
     , ROUND(SUM(RCNT45),2) AS RCNT45
     , ROUND(SUM(W46),2) AS W46
     , ROUND(SUM(WSUM46),2) AS WSUM46
     , ROUND(SUM(WCNT46),2) AS WCNT46
     , ROUND(SUM(R46),2) AS R46
     , ROUND(SUM(RSUM46),2) AS RSUM46
     , ROUND(SUM(RCNT46),2) AS RCNT46
     , ROUND(SUM(W47),2) AS W47
     , ROUND(SUM(WSUM47),2) AS WSUM47
     , ROUND(SUM(WCNT47),2) AS WCNT47
     , ROUND(SUM(R47),2) AS R47
     , ROUND(SUM(RSUM47),2) AS RSUM47
     , ROUND(SUM(RCNT47),2) AS RCNT47
     , ROUND(SUM(W48),2) AS W48
     , ROUND(SUM(WSUM48),2) AS WSUM48
     , ROUND(SUM(WCNT48),2) AS WCNT48
     , ROUND(SUM(R48),2) AS R48
     , ROUND(SUM(RSUM48),2) AS RSUM48
     , ROUND(SUM(RCNT48),2) AS RCNT48
     , ROUND(SUM(W49),2) AS W49
     , ROUND(SUM(WSUM49),2) AS WSUM49
     , ROUND(SUM(WCNT49),2) AS WCNT49
     , ROUND(SUM(R49),2) AS R49
     , ROUND(SUM(RSUM49),2) AS RSUM49
     , ROUND(SUM(RCNT49),2) AS RCNT49
     , ROUND(SUM(W50),2) AS W50
     , ROUND(SUM(WSUM50),2) AS WSUM50
     , ROUND(SUM(WCNT50),2) AS WCNT50
     , ROUND(SUM(R50),2) AS R50
     , ROUND(SUM(RSUM50),2) AS RSUM50
     , ROUND(SUM(RCNT50),2) AS RCNT50
     , ROUND(SUM(W51),2) AS W51
     , ROUND(SUM(WSUM51),2) AS WSUM51
     , ROUND(SUM(WCNT51),2) AS WCNT51
     , ROUND(SUM(R51),2) AS R51
     , ROUND(SUM(RSUM51),2) AS RSUM51
     , ROUND(SUM(RCNT51),2) AS RCNT51
     , ROUND(SUM(W52),2) AS W52
     , ROUND(SUM(WSUM52),2) AS WSUM52
     , ROUND(SUM(WCNT52),2) AS WCNT52
     , ROUND(SUM(R52),2) AS R52
     , ROUND(SUM(RSUM52),2) AS RSUM52
     , ROUND(SUM(RCNT52),2) AS RCNT52
     , ROUND(SUM(W53),2) AS W53
     , ROUND(SUM(WSUM53),2) AS WSUM53
     , ROUND(SUM(WCNT53),2) AS WCNT53
     , ROUND(SUM(R53),2) AS R53
     , ROUND(SUM(RSUM53),2) AS RSUM53
     , ROUND(SUM(RCNT53),2) AS RCNT53
     , ROUND(SUM(W54),2) AS W54
     , ROUND(SUM(WSUM54),2) AS WSUM54
     , ROUND(SUM(WCNT54),2) AS WCNT54
     , ROUND(SUM(R54),2) AS R54
     , ROUND(SUM(RSUM54),2) AS RSUM54
     , ROUND(SUM(RCNT54),2) AS RCNT54
     , ROUND(SUM(W55),2) AS W55
     , ROUND(SUM(WSUM55),2) AS WSUM55
     , ROUND(SUM(WCNT55),2) AS WCNT55
     , ROUND(SUM(R55),2) AS R55
     , ROUND(SUM(RSUM55),2) AS RSUM55
     , ROUND(SUM(RCNT55),2) AS RCNT55
     , ROUND(SUM(W56),2) AS W56
     , ROUND(SUM(WSUM56),2) AS WSUM56
     , ROUND(SUM(WCNT56),2) AS WCNT56
     , ROUND(SUM(R56),2) AS R56
     , ROUND(SUM(RSUM56),2) AS RSUM56
     , ROUND(SUM(RCNT56),2) AS RCNT56
     , ROUND(SUM(W57),2) AS W57
     , ROUND(SUM(WSUM57),2) AS WSUM57
     , ROUND(SUM(WCNT57),2) AS WCNT57
     , ROUND(SUM(R57),2) AS R57
     , ROUND(SUM(RSUM57),2) AS RSUM57
     , ROUND(SUM(RCNT57),2) AS RCNT57
     , ROUND(SUM(W58),2) AS W58
     , ROUND(SUM(WSUM58),2) AS WSUM58
     , ROUND(SUM(WCNT58),2) AS WCNT58
     , ROUND(SUM(R58),2) AS R58
     , ROUND(SUM(RSUM58),2) AS RSUM58
     , ROUND(SUM(RCNT58),2) AS RCNT58
     , ROUND(SUM(W59),2) AS W59
     , ROUND(SUM(WSUM59),2) AS WSUM59
     , ROUND(SUM(WCNT59),2) AS WCNT59
     , ROUND(SUM(R59),2) AS R59
     , ROUND(SUM(RSUM59),2) AS RSUM59
     , ROUND(SUM(RCNT59),2) AS RCNT59
     , ROUND(SUM(W60),2) AS W60
     , ROUND(SUM(WSUM60),2) AS WSUM60
     , ROUND(SUM(WCNT60),2) AS WCNT60
     , ROUND(SUM(R60),2) AS R60
     , ROUND(SUM(RSUM60),2) AS RSUM60
     , ROUND(SUM(RCNT60),2) AS RCNT60
     , ROUND(SUM(W61),2) AS W61
     , ROUND(SUM(WSUM61),2) AS WSUM61
     , ROUND(SUM(WCNT61),2) AS WCNT61
     , ROUND(SUM(R61),2) AS R61
     , ROUND(SUM(RSUM61),2) AS RSUM61
     , ROUND(SUM(RCNT61),2) AS RCNT61
     , ROUND(SUM(W62),2) AS W62
     , ROUND(SUM(WSUM62),2) AS WSUM62
     , ROUND(SUM(WCNT62),2) AS WCNT62
     , ROUND(SUM(R62),2) AS R62
     , ROUND(SUM(RSUM62),2) AS RSUM62
     , ROUND(SUM(RCNT62),2) AS RCNT62
     , ROUND(SUM(W63),2) AS W63
     , ROUND(SUM(WSUM63),2) AS WSUM63
     , ROUND(SUM(WCNT63),2) AS WCNT63
     , ROUND(SUM(R63),2) AS R63
     , ROUND(SUM(RSUM63),2) AS RSUM63
     , ROUND(SUM(RCNT63),2) AS RCNT63
     , ROUND(SUM(W64),2) AS W64
     , ROUND(SUM(WSUM64),2) AS WSUM64
     , ROUND(SUM(WCNT64),2) AS WCNT64
     , ROUND(SUM(R64),2) AS R64
     , ROUND(SUM(RSUM64),2) AS RSUM64
     , ROUND(SUM(RCNT64),2) AS RCNT64
     , ROUND(SUM(W65),2) AS W65
     , ROUND(SUM(WSUM65),2) AS WSUM65
     , ROUND(SUM(WCNT65),2) AS WCNT65
     , ROUND(SUM(R65),2) AS R65
     , ROUND(SUM(RSUM65),2) AS RSUM65
     , ROUND(SUM(RCNT65),2) AS RCNT65
     , ROUND(SUM(W66),2) AS W66
     , ROUND(SUM(WSUM66),2) AS WSUM66
     , ROUND(SUM(WCNT66),2) AS WCNT66
     , ROUND(SUM(R66),2) AS R66
     , ROUND(SUM(RSUM66),2) AS RSUM66
     , ROUND(SUM(RCNT66),2) AS RCNT66
     , ROUND(SUM(W67),2) AS W67
     , ROUND(SUM(WSUM67),2) AS WSUM67
     , ROUND(SUM(WCNT67),2) AS WCNT67
     , ROUND(SUM(R67),2) AS R67
     , ROUND(SUM(RSUM67),2) AS RSUM67
     , ROUND(SUM(RCNT67),2) AS RCNT67
     , ROUND(SUM(W68),2) AS W68
     , ROUND(SUM(WSUM68),2) AS WSUM68
     , ROUND(SUM(WCNT68),2) AS WCNT68
     , ROUND(SUM(R68),2) AS R68
     , ROUND(SUM(RSUM68),2) AS RSUM68
     , ROUND(SUM(RCNT68),2) AS RCNT68
     , ROUND(SUM(W69),2) AS W69
     , ROUND(SUM(WSUM69),2) AS WSUM69
     , ROUND(SUM(WCNT69),2) AS WCNT69
     , ROUND(SUM(R69),2) AS R69
     , ROUND(SUM(RSUM69),2) AS RSUM69
     , ROUND(SUM(RCNT69),2) AS RCNT69
     , ROUND(SUM(W70),2) AS W70
     , ROUND(SUM(WSUM70),2) AS WSUM70
     , ROUND(SUM(WCNT70),2) AS WCNT70
     , ROUND(SUM(R70),2) AS R70
     , ROUND(SUM(RSUM70),2) AS RSUM70
     , ROUND(SUM(RCNT70),2) AS RCNT70
     , ROUND(SUM(W71),2) AS W71
     , ROUND(SUM(WSUM71),2) AS WSUM71
     , ROUND(SUM(WCNT71),2) AS WCNT71
     , ROUND(SUM(R71),2) AS R71
     , ROUND(SUM(RSUM71),2) AS RSUM71
     , ROUND(SUM(RCNT71),2) AS RCNT71
     , ROUND(SUM(W72),2) AS W72
     , ROUND(SUM(WSUM72),2) AS WSUM72
     , ROUND(SUM(WCNT72),2) AS WCNT72
     , ROUND(SUM(R72),2) AS R72
     , ROUND(SUM(RSUM72),2) AS RSUM72
     , ROUND(SUM(RCNT72),2) AS RCNT72
     , ROUND(SUM(W73),2) AS W73
     , ROUND(SUM(WSUM73),2) AS WSUM73
     , ROUND(SUM(WCNT73),2) AS WCNT73
     , ROUND(SUM(R73),2) AS R73
     , ROUND(SUM(RSUM73),2) AS RSUM73
     , ROUND(SUM(RCNT73),2) AS RCNT73
     , ROUND(SUM(W74),2) AS W74
     , ROUND(SUM(WSUM74),2) AS WSUM74
     , ROUND(SUM(WCNT74),2) AS WCNT74
     , ROUND(SUM(R74),2) AS R74
     , ROUND(SUM(RSUM74),2) AS RSUM74
     , ROUND(SUM(RCNT74),2) AS RCNT74
     , ROUND(SUM(W75),2) AS W75
     , ROUND(SUM(WSUM75),2) AS WSUM75
     , ROUND(SUM(WCNT75),2) AS WCNT75
     , ROUND(SUM(R75),2) AS R75
     , ROUND(SUM(RSUM75),2) AS RSUM75
     , ROUND(SUM(RCNT75),2) AS RCNT75
     , ROUND(SUM(W76),2) AS W76
     , ROUND(SUM(WSUM76),2) AS WSUM76
     , ROUND(SUM(WCNT76),2) AS WCNT76
     , ROUND(SUM(R76),2) AS R76
     , ROUND(SUM(RSUM76),2) AS RSUM76
     , ROUND(SUM(RCNT76),2) AS RCNT76
     , ROUND(SUM(W77),2) AS W77
     , ROUND(SUM(WSUM77),2) AS WSUM77
     , ROUND(SUM(WCNT77),2) AS WCNT77
     , ROUND(SUM(R77),2) AS R77
     , ROUND(SUM(RSUM77),2) AS RSUM77
     , ROUND(SUM(RCNT77),2) AS RCNT77
     , ROUND(SUM(W78),2) AS W78
     , ROUND(SUM(WSUM78),2) AS WSUM78
     , ROUND(SUM(WCNT78),2) AS WCNT78
     , ROUND(SUM(R78),2) AS R78
     , ROUND(SUM(RSUM78),2) AS RSUM78
     , ROUND(SUM(RCNT78),2) AS RCNT78
     , ROUND(SUM(W79),2) AS W79
     , ROUND(SUM(WSUM79),2) AS WSUM79
     , ROUND(SUM(WCNT79),2) AS WCNT79
     , ROUND(SUM(R79),2) AS R79
     , ROUND(SUM(RSUM79),2) AS RSUM79
     , ROUND(SUM(RCNT79),2) AS RCNT79
     , ROUND(SUM(W80),2) AS W80
     , ROUND(SUM(WSUM80),2) AS WSUM80
     , ROUND(SUM(WCNT80),2) AS WCNT80
     , ROUND(SUM(R80),2) AS R80
     , ROUND(SUM(RSUM80),2) AS RSUM80
     , ROUND(SUM(RCNT80),2) AS RCNT80
     , ROUND(SUM(W81),2) AS W81
     , ROUND(SUM(WSUM81),2) AS WSUM81
     , ROUND(SUM(WCNT81),2) AS WCNT81
     , ROUND(SUM(R81),2) AS R81
     , ROUND(SUM(RSUM81),2) AS RSUM81
     , ROUND(SUM(RCNT81),2) AS RCNT81
     , ROUND(SUM(W82),2) AS W82
     , ROUND(SUM(WSUM82),2) AS WSUM82
     , ROUND(SUM(WCNT82),2) AS WCNT82
     , ROUND(SUM(R82),2) AS R82
     , ROUND(SUM(RSUM82),2) AS RSUM82
     , ROUND(SUM(RCNT82),2) AS RCNT82
     , ROUND(SUM(W83),2) AS W83
     , ROUND(SUM(WSUM83),2) AS WSUM83
     , ROUND(SUM(WCNT83),2) AS WCNT83
     , ROUND(SUM(R83),2) AS R83
     , ROUND(SUM(RSUM83),2) AS RSUM83
     , ROUND(SUM(RCNT83),2) AS RCNT83
     , ROUND(SUM(W84),2) AS W84
     , ROUND(SUM(WSUM84),2) AS WSUM84
     , ROUND(SUM(WCNT84),2) AS WCNT84
     , ROUND(SUM(R84),2) AS R84
     , ROUND(SUM(RSUM84),2) AS RSUM84
     , ROUND(SUM(RCNT84),2) AS RCNT84
     , ROUND(SUM(W85),2) AS W85
     , ROUND(SUM(WSUM85),2) AS WSUM85
     , ROUND(SUM(WCNT85),2) AS WCNT85
     , ROUND(SUM(R85),2) AS R85
     , ROUND(SUM(RSUM85),2) AS RSUM85
     , ROUND(SUM(RCNT85),2) AS RCNT85
     , ROUND(SUM(W86),2) AS W86
     , ROUND(SUM(WSUM86),2) AS WSUM86
     , ROUND(SUM(WCNT86),2) AS WCNT86
     , ROUND(SUM(R86),2) AS R86
     , ROUND(SUM(RSUM86),2) AS RSUM86
     , ROUND(SUM(RCNT86),2) AS RCNT86
     , ROUND(SUM(W87),2) AS W87
     , ROUND(SUM(WSUM87),2) AS WSUM87
     , ROUND(SUM(WCNT87),2) AS WCNT87
     , ROUND(SUM(R87),2) AS R87
     , ROUND(SUM(RSUM87),2) AS RSUM87
     , ROUND(SUM(RCNT87),2) AS RCNT87
     , ROUND(SUM(W88),2) AS W88
     , ROUND(SUM(WSUM88),2) AS WSUM88
     , ROUND(SUM(WCNT88),2) AS WCNT88
     , ROUND(SUM(R88),2) AS R88
     , ROUND(SUM(RSUM88),2) AS RSUM88
     , ROUND(SUM(RCNT88),2) AS RCNT88
     , ROUND(SUM(W89),2) AS W89
     , ROUND(SUM(WSUM89),2) AS WSUM89
     , ROUND(SUM(WCNT89),2) AS WCNT89
     , ROUND(SUM(R89),2) AS R89
     , ROUND(SUM(RSUM89),2) AS RSUM89
     , ROUND(SUM(RCNT89),2) AS RCNT89
     , ROUND(SUM(W90),2) AS W90
     , ROUND(SUM(WSUM90),2) AS WSUM90
     , ROUND(SUM(WCNT90),2) AS WCNT90
     , ROUND(SUM(R90),2) AS R90
     , ROUND(SUM(RSUM90),2) AS RSUM90
     , ROUND(SUM(RCNT90),2) AS RCNT90
     , ROUND(SUM(W91),2) AS W91
     , ROUND(SUM(WSUM91),2) AS WSUM91
     , ROUND(SUM(WCNT91),2) AS WCNT91
     , ROUND(SUM(R91),2) AS R91
     , ROUND(SUM(RSUM91),2) AS RSUM91
     , ROUND(SUM(RCNT91),2) AS RCNT91
     , ROUND(SUM(W92),2) AS W92
     , ROUND(SUM(WSUM92),2) AS WSUM92
     , ROUND(SUM(WCNT92),2) AS WCNT92
     , ROUND(SUM(R92),2) AS R92
     , ROUND(SUM(RSUM92),2) AS RSUM92
     , ROUND(SUM(RCNT92),2) AS RCNT92
     , ROUND(SUM(W93),2) AS W93
     , ROUND(SUM(WSUM93),2) AS WSUM93
     , ROUND(SUM(WCNT93),2) AS WCNT93
     , ROUND(SUM(R93),2) AS R93
     , ROUND(SUM(RSUM93),2) AS RSUM93
     , ROUND(SUM(RCNT93),2) AS RCNT93
     , ROUND(SUM(W94),2) AS W94
     , ROUND(SUM(WSUM94),2) AS WSUM94
     , ROUND(SUM(WCNT94),2) AS WCNT94
     , ROUND(SUM(R94),2) AS R94
     , ROUND(SUM(RSUM94),2) AS RSUM94
     , ROUND(SUM(RCNT94),2) AS RCNT94
     , ROUND(SUM(W95),2) AS W95
     , ROUND(SUM(WSUM95),2) AS WSUM95
     , ROUND(SUM(WCNT95),2) AS WCNT95
     , ROUND(SUM(R95),2) AS R95
     , ROUND(SUM(RSUM95),2) AS RSUM95
     , ROUND(SUM(RCNT95),2) AS RCNT95
     , ROUND(SUM(W96),2) AS W96
     , ROUND(SUM(WSUM96),2) AS WSUM96
     , ROUND(SUM(WCNT96),2) AS WCNT96
     , ROUND(SUM(R96),2) AS R96
     , ROUND(SUM(RSUM96),2) AS RSUM96
     , ROUND(SUM(RCNT96),2) AS RCNT96
     , ROUND(SUM(W97),2) AS W97
     , ROUND(SUM(WSUM97),2) AS WSUM97
     , ROUND(SUM(WCNT97),2) AS WCNT97
     , ROUND(SUM(R97),2) AS R97
     , ROUND(SUM(RSUM97),2) AS RSUM97
     , ROUND(SUM(RCNT97),2) AS RCNT97
     , ROUND(SUM(W98),2) AS W98
     , ROUND(SUM(WSUM98),2) AS WSUM98
     , ROUND(SUM(WCNT98),2) AS WCNT98
     , ROUND(SUM(R98),2) AS R98
     , ROUND(SUM(RSUM98),2) AS RSUM98
     , ROUND(SUM(RCNT98),2) AS RCNT98
     , ROUND(SUM(W99),2) AS W99
     , ROUND(SUM(WSUM99),2) AS WSUM99
     , ROUND(SUM(WCNT99),2) AS WCNT99
     , ROUND(SUM(R99),2) AS R99
     , ROUND(SUM(RSUM99),2) AS RSUM99
     , ROUND(SUM(RCNT99),2) AS RCNT99
     , ROUND(SUM(W100),2) AS W100
     , ROUND(SUM(WSUM100),2) AS WSUM100
     , ROUND(SUM(WCNT100),2) AS WCNT100
     , ROUND(SUM(R100),2) AS R100
     , ROUND(SUM(RSUM100),2) AS RSUM100
     , ROUND(SUM(RCNT100),2) AS RCNT100
     , ROUND(SUM(W101),2) AS W101
     , ROUND(SUM(WSUM101),2) AS WSUM101
     , ROUND(SUM(WCNT101),2) AS WCNT101
     , ROUND(SUM(R101),2) AS R101
     , ROUND(SUM(RSUM101),2) AS RSUM101
     , ROUND(SUM(RCNT101),2) AS RCNT101
     , ROUND(SUM(W102),2) AS W102
     , ROUND(SUM(WSUM102),2) AS WSUM102
     , ROUND(SUM(WCNT102),2) AS WCNT102
     , ROUND(SUM(R102),2) AS R102
     , ROUND(SUM(RSUM102),2) AS RSUM102
     , ROUND(SUM(RCNT102),2) AS RCNT102
     , ROUND(SUM(W103),2) AS W103
     , ROUND(SUM(WSUM103),2) AS WSUM103
     , ROUND(SUM(WCNT103),2) AS WCNT103
     , ROUND(SUM(R103),2) AS R103
     , ROUND(SUM(RSUM103),2) AS RSUM103
     , ROUND(SUM(RCNT103),2) AS RCNT103
     , ROUND(SUM(W104),2) AS W104
     , ROUND(SUM(WSUM104),2) AS WSUM104
     , ROUND(SUM(WCNT104),2) AS WCNT104
     , ROUND(SUM(R104),2) AS R104
     , ROUND(SUM(RSUM104),2) AS RSUM104
     , ROUND(SUM(RCNT104),2) AS RCNT104
     , ROUND(SUM(W105),2) AS W105
     , ROUND(SUM(WSUM105),2) AS WSUM105
     , ROUND(SUM(WCNT105),2) AS WCNT105
     , ROUND(SUM(R105),2) AS R105
     , ROUND(SUM(RSUM105),2) AS RSUM105
     , ROUND(SUM(RCNT105),2) AS RCNT105
     , ROUND(SUM(W106),2) AS W106
     , ROUND(SUM(WSUM106),2) AS WSUM106
     , ROUND(SUM(WCNT106),2) AS WCNT106
     , ROUND(SUM(R106),2) AS R106
     , ROUND(SUM(RSUM106),2) AS RSUM106
     , ROUND(SUM(RCNT106),2) AS RCNT106
     , ROUND(SUM(W107),2) AS W107
     , ROUND(SUM(WSUM107),2) AS WSUM107
     , ROUND(SUM(WCNT107),2) AS WCNT107
     , ROUND(SUM(R107),2) AS R107
     , ROUND(SUM(RSUM107),2) AS RSUM107
     , ROUND(SUM(RCNT107),2) AS RCNT107
     , ROUND(SUM(W108),2) AS W108
     , ROUND(SUM(WSUM108),2) AS WSUM108
     , ROUND(SUM(WCNT108),2) AS WCNT108
     , ROUND(SUM(R108),2) AS R108
     , ROUND(SUM(RSUM108),2) AS RSUM108
     , ROUND(SUM(RCNT108),2) AS RCNT108
     , ROUND(SUM(W109),2) AS W109
     , ROUND(SUM(WSUM109),2) AS WSUM109
     , ROUND(SUM(WCNT109),2) AS WCNT109
     , ROUND(SUM(R109),2) AS R109
     , ROUND(SUM(RSUM109),2) AS RSUM109
     , ROUND(SUM(RCNT109),2) AS RCNT109
     , ROUND(SUM(W110),2) AS W110
     , ROUND(SUM(WSUM110),2) AS WSUM110
     , ROUND(SUM(WCNT110),2) AS WCNT110
     , ROUND(SUM(R110),2) AS R110
     , ROUND(SUM(RSUM110),2) AS RSUM110
     , ROUND(SUM(RCNT110),2) AS RCNT110
     , ROUND(SUM(W111),2) AS W111
     , ROUND(SUM(WSUM111),2) AS WSUM111
     , ROUND(SUM(WCNT111),2) AS WCNT111
     , ROUND(SUM(R111),2) AS R111
     , ROUND(SUM(RSUM111),2) AS RSUM111
     , ROUND(SUM(RCNT111),2) AS RCNT111
     , ROUND(SUM(W112),2) AS W112
     , ROUND(SUM(WSUM112),2) AS WSUM112
     , ROUND(SUM(WCNT112),2) AS WCNT112
     , ROUND(SUM(R112),2) AS R112
     , ROUND(SUM(RSUM112),2) AS RSUM112
     , ROUND(SUM(RCNT112),2) AS RCNT112
     , ROUND(SUM(W113),2) AS W113
     , ROUND(SUM(WSUM113),2) AS WSUM113
     , ROUND(SUM(WCNT113),2) AS WCNT113
     , ROUND(SUM(R113),2) AS R113
     , ROUND(SUM(RSUM113),2) AS RSUM113
     , ROUND(SUM(RCNT113),2) AS RCNT113
     , ROUND(SUM(W114),2) AS W114
     , ROUND(SUM(WSUM114),2) AS WSUM114
     , ROUND(SUM(WCNT114),2) AS WCNT114
     , ROUND(SUM(R114),2) AS R114
     , ROUND(SUM(RSUM114),2) AS RSUM114
     , ROUND(SUM(RCNT114),2) AS RCNT114
     , ROUND(SUM(W115),2) AS W115
     , ROUND(SUM(WSUM115),2) AS WSUM115
     , ROUND(SUM(WCNT115),2) AS WCNT115
     , ROUND(SUM(R115),2) AS R115
     , ROUND(SUM(RSUM115),2) AS RSUM115
     , ROUND(SUM(RCNT115),2) AS RCNT115
     , ROUND(SUM(W116),2) AS W116
     , ROUND(SUM(WSUM116),2) AS WSUM116
     , ROUND(SUM(WCNT116),2) AS WCNT116
     , ROUND(SUM(R116),2) AS R116
     , ROUND(SUM(RSUM116),2) AS RSUM116
     , ROUND(SUM(RCNT116),2) AS RCNT116
     , ROUND(SUM(W117),2) AS W117
     , ROUND(SUM(WSUM117),2) AS WSUM117
     , ROUND(SUM(WCNT117),2) AS WCNT117
     , ROUND(SUM(R117),2) AS R117
     , ROUND(SUM(RSUM117),2) AS RSUM117
     , ROUND(SUM(RCNT117),2) AS RCNT117
     , ROUND(SUM(W118),2) AS W118
     , ROUND(SUM(WSUM118),2) AS WSUM118
     , ROUND(SUM(WCNT118),2) AS WCNT118
     , ROUND(SUM(R118),2) AS R118
     , ROUND(SUM(RSUM118),2) AS RSUM118
     , ROUND(SUM(RCNT118),2) AS RCNT118
     , ROUND(SUM(W119),2) AS W119
     , ROUND(SUM(WSUM119),2) AS WSUM119
     , ROUND(SUM(WCNT119),2) AS WCNT119
     , ROUND(SUM(R119),2) AS R119
     , ROUND(SUM(RSUM119),2) AS RSUM119
     , ROUND(SUM(RCNT119),2) AS RCNT119
     , ROUND(SUM(W120),2) AS W120
     , ROUND(SUM(WSUM120),2) AS WSUM120
     , ROUND(SUM(WCNT120),2) AS WCNT120
     , ROUND(SUM(R120),2) AS R120
     , ROUND(SUM(RSUM120),2) AS RSUM120
     , ROUND(SUM(RCNT120),2) AS RCNT120
     , ROUND(SUM(W121),2) AS W121
     , ROUND(SUM(WSUM121),2) AS WSUM121
     , ROUND(SUM(WCNT121),2) AS WCNT121
     , ROUND(SUM(R121),2) AS R121
     , ROUND(SUM(RSUM121),2) AS RSUM121
     , ROUND(SUM(RCNT121),2) AS RCNT121
     , ROUND(SUM(W122),2) AS W122
     , ROUND(SUM(WSUM122),2) AS WSUM122
     , ROUND(SUM(WCNT122),2) AS WCNT122
     , ROUND(SUM(R122),2) AS R122
     , ROUND(SUM(RSUM122),2) AS RSUM122
     , ROUND(SUM(RCNT122),2) AS RCNT122
     , ROUND(SUM(W123),2) AS W123
     , ROUND(SUM(WSUM123),2) AS WSUM123
     , ROUND(SUM(WCNT123),2) AS WCNT123
     , ROUND(SUM(R123),2) AS R123
     , ROUND(SUM(RSUM123),2) AS RSUM123
     , ROUND(SUM(RCNT123),2) AS RCNT123
     , ROUND(SUM(W124),2) AS W124
     , ROUND(SUM(WSUM124),2) AS WSUM124
     , ROUND(SUM(WCNT124),2) AS WCNT124
     , ROUND(SUM(R124),2) AS R124
     , ROUND(SUM(RSUM124),2) AS RSUM124
     , ROUND(SUM(RCNT124),2) AS RCNT124
     , ROUND(SUM(W125),2) AS W125
     , ROUND(SUM(WSUM125),2) AS WSUM125
     , ROUND(SUM(WCNT125),2) AS WCNT125
     , ROUND(SUM(R125),2) AS R125
     , ROUND(SUM(RSUM125),2) AS RSUM125
     , ROUND(SUM(RCNT125),2) AS RCNT125
     , ROUND(SUM(W126),2) AS W126
     , ROUND(SUM(WSUM126),2) AS WSUM126
     , ROUND(SUM(WCNT126),2) AS WCNT126
     , ROUND(SUM(R126),2) AS R126
     , ROUND(SUM(RSUM126),2) AS RSUM126
     , ROUND(SUM(RCNT126),2) AS RCNT126
     , ROUND(SUM(W127),2) AS W127
     , ROUND(SUM(WSUM127),2) AS WSUM127
     , ROUND(SUM(WCNT127),2) AS WCNT127
     , ROUND(SUM(R127),2) AS R127
     , ROUND(SUM(RSUM127),2) AS RSUM127
     , ROUND(SUM(RCNT127),2) AS RCNT127
     , ROUND(SUM(W128),2) AS W128
     , ROUND(SUM(WSUM128),2) AS WSUM128
     , ROUND(SUM(WCNT128),2) AS WCNT128
     , ROUND(SUM(R128),2) AS R128
     , ROUND(SUM(RSUM128),2) AS RSUM128
     , ROUND(SUM(RCNT128),2) AS RCNT128
     , ROUND(SUM(W129),2) AS W129
     , ROUND(SUM(WSUM129),2) AS WSUM129
     , ROUND(SUM(WCNT129),2) AS WCNT129
     , ROUND(SUM(R129),2) AS R129
     , ROUND(SUM(RSUM129),2) AS RSUM129
     , ROUND(SUM(RCNT129),2) AS RCNT129
     , ROUND(SUM(W130),2) AS W130
     , ROUND(SUM(WSUM130),2) AS WSUM130
     , ROUND(SUM(WCNT130),2) AS WCNT130
     , ROUND(SUM(R130),2) AS R130
     , ROUND(SUM(RSUM130),2) AS RSUM130
     , ROUND(SUM(RCNT130),2) AS RCNT130
     , ROUND(SUM(W131),2) AS W131
     , ROUND(SUM(WSUM131),2) AS WSUM131
     , ROUND(SUM(WCNT131),2) AS WCNT131
     , ROUND(SUM(R131),2) AS R131
     , ROUND(SUM(RSUM131),2) AS RSUM131
     , ROUND(SUM(RCNT131),2) AS RCNT131
     , ROUND(SUM(W132),2) AS W132
     , ROUND(SUM(WSUM132),2) AS WSUM132
     , ROUND(SUM(WCNT132),2) AS WCNT132
     , ROUND(SUM(R132),2) AS R132
     , ROUND(SUM(RSUM132),2) AS RSUM132
     , ROUND(SUM(RCNT132),2) AS RCNT132
     , ROUND(SUM(W133),2) AS W133
     , ROUND(SUM(WSUM133),2) AS WSUM133
     , ROUND(SUM(WCNT133),2) AS WCNT133
     , ROUND(SUM(R133),2) AS R133
     , ROUND(SUM(RSUM133),2) AS RSUM133
     , ROUND(SUM(RCNT133),2) AS RCNT133
     , ROUND(SUM(W134),2) AS W134
     , ROUND(SUM(WSUM134),2) AS WSUM134
     , ROUND(SUM(WCNT134),2) AS WCNT134
     , ROUND(SUM(R134),2) AS R134
     , ROUND(SUM(RSUM134),2) AS RSUM134
     , ROUND(SUM(RCNT134),2) AS RCNT134
     , ROUND(SUM(W135),2) AS W135
     , ROUND(SUM(WSUM135),2) AS WSUM135
     , ROUND(SUM(WCNT135),2) AS WCNT135
     , ROUND(SUM(R135),2) AS R135
     , ROUND(SUM(RSUM135),2) AS RSUM135
     , ROUND(SUM(RCNT135),2) AS RCNT135
     , ROUND(SUM(W136),2) AS W136
     , ROUND(SUM(WSUM136),2) AS WSUM136
     , ROUND(SUM(WCNT136),2) AS WCNT136
     , ROUND(SUM(R136),2) AS R136
     , ROUND(SUM(RSUM136),2) AS RSUM136
     , ROUND(SUM(RCNT136),2) AS RCNT136
     , ROUND(SUM(W137),2) AS W137
     , ROUND(SUM(WSUM137),2) AS WSUM137
     , ROUND(SUM(WCNT137),2) AS WCNT137
     , ROUND(SUM(R137),2) AS R137
     , ROUND(SUM(RSUM137),2) AS RSUM137
     , ROUND(SUM(RCNT137),2) AS RCNT137
     , ROUND(SUM(W138),2) AS W138
     , ROUND(SUM(WSUM138),2) AS WSUM138
     , ROUND(SUM(WCNT138),2) AS WCNT138
     , ROUND(SUM(R138),2) AS R138
     , ROUND(SUM(RSUM138),2) AS RSUM138
     , ROUND(SUM(RCNT138),2) AS RCNT138
     , ROUND(SUM(W139),2) AS W139
     , ROUND(SUM(WSUM139),2) AS WSUM139
     , ROUND(SUM(WCNT139),2) AS WCNT139
     , ROUND(SUM(R139),2) AS R139
     , ROUND(SUM(RSUM139),2) AS RSUM139
     , ROUND(SUM(RCNT139),2) AS RCNT139
     , ROUND(SUM(W140),2) AS W140
     , ROUND(SUM(WSUM140),2) AS WSUM140
     , ROUND(SUM(WCNT140),2) AS WCNT140
     , ROUND(SUM(R140),2) AS R140
     , ROUND(SUM(RSUM140),2) AS RSUM140
     , ROUND(SUM(RCNT140),2) AS RCNT140
     , ROUND(SUM(W141),2) AS W141
     , ROUND(SUM(WSUM141),2) AS WSUM141
     , ROUND(SUM(WCNT141),2) AS WCNT141
     , ROUND(SUM(R141),2) AS R141
     , ROUND(SUM(RSUM141),2) AS RSUM141
     , ROUND(SUM(RCNT141),2) AS RCNT141
     , ROUND(SUM(W142),2) AS W142
     , ROUND(SUM(WSUM142),2) AS WSUM142
     , ROUND(SUM(WCNT142),2) AS WCNT142
     , ROUND(SUM(R142),2) AS R142
     , ROUND(SUM(RSUM142),2) AS RSUM142
     , ROUND(SUM(RCNT142),2) AS RCNT142
     , ROUND(SUM(W143),2) AS W143
     , ROUND(SUM(WSUM143),2) AS WSUM143
     , ROUND(SUM(WCNT143),2) AS WCNT143
     , ROUND(SUM(R143),2) AS R143
     , ROUND(SUM(RSUM143),2) AS RSUM143
     , ROUND(SUM(RCNT143),2) AS RCNT143
     , ROUND(SUM(W144),2) AS W144
     , ROUND(SUM(WSUM144),2) AS WSUM144
     , ROUND(SUM(WCNT144),2) AS WCNT144
     , ROUND(SUM(R144),2) AS R144
     , ROUND(SUM(RSUM144),2) AS RSUM144
     , ROUND(SUM(RCNT144),2) AS RCNT144
     , ROUND(SUM(W145),2) AS W145
     , ROUND(SUM(WSUM145),2) AS WSUM145
     , ROUND(SUM(WCNT145),2) AS WCNT145
     , ROUND(SUM(R145),2) AS R145
     , ROUND(SUM(RSUM145),2) AS RSUM145
     , ROUND(SUM(RCNT145),2) AS RCNT145
     , ROUND(SUM(W146),2) AS W146
     , ROUND(SUM(WSUM146),2) AS WSUM146
     , ROUND(SUM(WCNT146),2) AS WCNT146
     , ROUND(SUM(R146),2) AS R146
     , ROUND(SUM(RSUM146),2) AS RSUM146
     , ROUND(SUM(RCNT146),2) AS RCNT146
     , ROUND(SUM(W147),2) AS W147
     , ROUND(SUM(WSUM147),2) AS WSUM147
     , ROUND(SUM(WCNT147),2) AS WCNT147
     , ROUND(SUM(R147),2) AS R147
     , ROUND(SUM(RSUM147),2) AS RSUM147
     , ROUND(SUM(RCNT147),2) AS RCNT147
     , ROUND(SUM(W148),2) AS W148
     , ROUND(SUM(WSUM148),2) AS WSUM148
     , ROUND(SUM(WCNT148),2) AS WCNT148
     , ROUND(SUM(R148),2) AS R148
     , ROUND(SUM(RSUM148),2) AS RSUM148
     , ROUND(SUM(RCNT148),2) AS RCNT148
     , ROUND(SUM(W149),2) AS W149
     , ROUND(SUM(WSUM149),2) AS WSUM149
     , ROUND(SUM(WCNT149),2) AS WCNT149
     , ROUND(SUM(R149),2) AS R149
     , ROUND(SUM(RSUM149),2) AS RSUM149
     , ROUND(SUM(RCNT149),2) AS RCNT149
     , ROUND(SUM(W150),2) AS W150
     , ROUND(SUM(WSUM150),2) AS WSUM150
     , ROUND(SUM(WCNT150),2) AS WCNT150
     , ROUND(SUM(R150),2) AS R150
     , ROUND(SUM(RSUM150),2) AS RSUM150
     , ROUND(SUM(RCNT150),2) AS RCNT150
     , ROUND(SUM(W151),2) AS W151
     , ROUND(SUM(WSUM151),2) AS WSUM151
     , ROUND(SUM(WCNT151),2) AS WCNT151
     , ROUND(SUM(R151),2) AS R151
     , ROUND(SUM(RSUM151),2) AS RSUM151
     , ROUND(SUM(RCNT151),2) AS RCNT151
     , ROUND(SUM(W152),2) AS W152
     , ROUND(SUM(WSUM152),2) AS WSUM152
     , ROUND(SUM(WCNT152),2) AS WCNT152
     , ROUND(SUM(R152),2) AS R152
     , ROUND(SUM(RSUM152),2) AS RSUM152
     , ROUND(SUM(RCNT152),2) AS RCNT152
     , ROUND(SUM(W153),2) AS W153
     , ROUND(SUM(WSUM153),2) AS WSUM153
     , ROUND(SUM(WCNT153),2) AS WCNT153
     , ROUND(SUM(R153),2) AS R153
     , ROUND(SUM(RSUM153),2) AS RSUM153
     , ROUND(SUM(RCNT153),2) AS RCNT153
     , ROUND(SUM(W154),2) AS W154
     , ROUND(SUM(WSUM154),2) AS WSUM154
     , ROUND(SUM(WCNT154),2) AS WCNT154
     , ROUND(SUM(R154),2) AS R154
     , ROUND(SUM(RSUM154),2) AS RSUM154
     , ROUND(SUM(RCNT154),2) AS RCNT154
     , ROUND(SUM(W155),2) AS W155
     , ROUND(SUM(WSUM155),2) AS WSUM155
     , ROUND(SUM(WCNT155),2) AS WCNT155
     , ROUND(SUM(R155),2) AS R155
     , ROUND(SUM(RSUM155),2) AS RSUM155
     , ROUND(SUM(RCNT155),2) AS RCNT155
     , ROUND(SUM(W156),2) AS W156
     , ROUND(SUM(WSUM156),2) AS WSUM156
     , ROUND(SUM(WCNT156),2) AS WCNT156
     , ROUND(SUM(R156),2) AS R156
     , ROUND(SUM(RSUM156),2) AS RSUM156
     , ROUND(SUM(RCNT156),2) AS RCNT156
     , ROUND(SUM(W157),2) AS W157
     , ROUND(SUM(WSUM157),2) AS WSUM157
     , ROUND(SUM(WCNT157),2) AS WCNT157
     , ROUND(SUM(R157),2) AS R157
     , ROUND(SUM(RSUM157),2) AS RSUM157
     , ROUND(SUM(RCNT157),2) AS RCNT157
     , ROUND(SUM(W158),2) AS W158
     , ROUND(SUM(WSUM158),2) AS WSUM158
     , ROUND(SUM(WCNT158),2) AS WCNT158
     , ROUND(SUM(R158),2) AS R158
     , ROUND(SUM(RSUM158),2) AS RSUM158
     , ROUND(SUM(RCNT158),2) AS RCNT158
     , ROUND(SUM(W159),2) AS W159
     , ROUND(SUM(WSUM159),2) AS WSUM159
     , ROUND(SUM(WCNT159),2) AS WCNT159
     , ROUND(SUM(R159),2) AS R159
     , ROUND(SUM(RSUM159),2) AS RSUM159
     , ROUND(SUM(RCNT159),2) AS RCNT159
     , ROUND(SUM(W160),2) AS W160
     , ROUND(SUM(WSUM160),2) AS WSUM160
     , ROUND(SUM(WCNT160),2) AS WCNT160
     , ROUND(SUM(R160),2) AS R160
     , ROUND(SUM(RSUM160),2) AS RSUM160
     , ROUND(SUM(RCNT160),2) AS RCNT160
     , ROUND(SUM(W161),2) AS W161
     , ROUND(SUM(WSUM161),2) AS WSUM161
     , ROUND(SUM(WCNT161),2) AS WCNT161
     , ROUND(SUM(R161),2) AS R161
     , ROUND(SUM(RSUM161),2) AS RSUM161
     , ROUND(SUM(RCNT161),2) AS RCNT161
     , ROUND(SUM(W162),2) AS W162
     , ROUND(SUM(WSUM162),2) AS WSUM162
     , ROUND(SUM(WCNT162),2) AS WCNT162
     , ROUND(SUM(R162),2) AS R162
     , ROUND(SUM(RSUM162),2) AS RSUM162
     , ROUND(SUM(RCNT162),2) AS RCNT162
     , ROUND(SUM(W163),2) AS W163
     , ROUND(SUM(WSUM163),2) AS WSUM163
     , ROUND(SUM(WCNT163),2) AS WCNT163
     , ROUND(SUM(R163),2) AS R163
     , ROUND(SUM(RSUM163),2) AS RSUM163
     , ROUND(SUM(RCNT163),2) AS RCNT163
     , ROUND(SUM(W164),2) AS W164
     , ROUND(SUM(WSUM164),2) AS WSUM164
     , ROUND(SUM(WCNT164),2) AS WCNT164
     , ROUND(SUM(R164),2) AS R164
     , ROUND(SUM(RSUM164),2) AS RSUM164
     , ROUND(SUM(RCNT164),2) AS RCNT164
     , ROUND(SUM(W165),2) AS W165
     , ROUND(SUM(WSUM165),2) AS WSUM165
     , ROUND(SUM(WCNT165),2) AS WCNT165
     , ROUND(SUM(R165),2) AS R165
     , ROUND(SUM(RSUM165),2) AS RSUM165
     , ROUND(SUM(RCNT165),2) AS RCNT165
     , ROUND(SUM(W166),2) AS W166
     , ROUND(SUM(WSUM166),2) AS WSUM166
     , ROUND(SUM(WCNT166),2) AS WCNT166
     , ROUND(SUM(R166),2) AS R166
     , ROUND(SUM(RSUM166),2) AS RSUM166
     , ROUND(SUM(RCNT166),2) AS RCNT166
     , ROUND(SUM(W167),2) AS W167
     , ROUND(SUM(WSUM167),2) AS WSUM167
     , ROUND(SUM(WCNT167),2) AS WCNT167
     , ROUND(SUM(R167),2) AS R167
     , ROUND(SUM(RSUM167),2) AS RSUM167
     , ROUND(SUM(RCNT167),2) AS RCNT167
     , ROUND(SUM(W168),2) AS W168
     , ROUND(SUM(WSUM168),2) AS WSUM168
     , ROUND(SUM(WCNT168),2) AS WCNT168
     , ROUND(SUM(R168),2) AS R168
     , ROUND(SUM(RSUM168),2) AS RSUM168
     , ROUND(SUM(RCNT168),2) AS RCNT168
     , ROUND(SUM(W169),2) AS W169
     , ROUND(SUM(WSUM169),2) AS WSUM169
     , ROUND(SUM(WCNT169),2) AS WCNT169
     , ROUND(SUM(R169),2) AS R169
     , ROUND(SUM(RSUM169),2) AS RSUM169
     , ROUND(SUM(RCNT169),2) AS RCNT169
     , ROUND(SUM(W170),2) AS W170
     , ROUND(SUM(WSUM170),2) AS WSUM170
     , ROUND(SUM(WCNT170),2) AS WCNT170
     , ROUND(SUM(R170),2) AS R170
     , ROUND(SUM(RSUM170),2) AS RSUM170
     , ROUND(SUM(RCNT170),2) AS RCNT170
     , ROUND(SUM(W171),2) AS W171
     , ROUND(SUM(WSUM171),2) AS WSUM171
     , ROUND(SUM(WCNT171),2) AS WCNT171
     , ROUND(SUM(R171),2) AS R171
     , ROUND(SUM(RSUM171),2) AS RSUM171
     , ROUND(SUM(RCNT171),2) AS RCNT171
     , ROUND(SUM(W172),2) AS W172
     , ROUND(SUM(WSUM172),2) AS WSUM172
     , ROUND(SUM(WCNT172),2) AS WCNT172
     , ROUND(SUM(R172),2) AS R172
     , ROUND(SUM(RSUM172),2) AS RSUM172
     , ROUND(SUM(RCNT172),2) AS RCNT172
     , ROUND(SUM(W173),2) AS W173
     , ROUND(SUM(WSUM173),2) AS WSUM173
     , ROUND(SUM(WCNT173),2) AS WCNT173
     , ROUND(SUM(R173),2) AS R173
     , ROUND(SUM(RSUM173),2) AS RSUM173
     , ROUND(SUM(RCNT173),2) AS RCNT173
     , ROUND(SUM(W174),2) AS W174
     , ROUND(SUM(WSUM174),2) AS WSUM174
     , ROUND(SUM(WCNT174),2) AS WCNT174
     , ROUND(SUM(R174),2) AS R174
     , ROUND(SUM(RSUM174),2) AS RSUM174
     , ROUND(SUM(RCNT174),2) AS RCNT174
     , ROUND(SUM(W175),2) AS W175
     , ROUND(SUM(WSUM175),2) AS WSUM175
     , ROUND(SUM(WCNT175),2) AS WCNT175
     , ROUND(SUM(R175),2) AS R175
     , ROUND(SUM(RSUM175),2) AS RSUM175
     , ROUND(SUM(RCNT175),2) AS RCNT175
     , ROUND(SUM(W176),2) AS W176
     , ROUND(SUM(WSUM176),2) AS WSUM176
     , ROUND(SUM(WCNT176),2) AS WCNT176
     , ROUND(SUM(R176),2) AS R176
     , ROUND(SUM(RSUM176),2) AS RSUM176
     , ROUND(SUM(RCNT176),2) AS RCNT176
     , ROUND(SUM(W177),2) AS W177
     , ROUND(SUM(WSUM177),2) AS WSUM177
     , ROUND(SUM(WCNT177),2) AS WCNT177
     , ROUND(SUM(R177),2) AS R177
     , ROUND(SUM(RSUM177),2) AS RSUM177
     , ROUND(SUM(RCNT177),2) AS RCNT177
     , ROUND(SUM(W178),2) AS W178
     , ROUND(SUM(WSUM178),2) AS WSUM178
     , ROUND(SUM(WCNT178),2) AS WCNT178
     , ROUND(SUM(R178),2) AS R178
     , ROUND(SUM(RSUM178),2) AS RSUM178
     , ROUND(SUM(RCNT178),2) AS RCNT178
     , ROUND(SUM(W179),2) AS W179
     , ROUND(SUM(WSUM179),2) AS WSUM179
     , ROUND(SUM(WCNT179),2) AS WCNT179
     , ROUND(SUM(R179),2) AS R179
     , ROUND(SUM(RSUM179),2) AS RSUM179
     , ROUND(SUM(RCNT179),2) AS RCNT179
     , ROUND(SUM(W180),2) AS W180
     , ROUND(SUM(WSUM180),2) AS WSUM180
     , ROUND(SUM(WCNT180),2) AS WCNT180
     , ROUND(SUM(R180),2) AS R180
     , ROUND(SUM(RSUM180),2) AS RSUM180
     , ROUND(SUM(RCNT180),2) AS RCNT180
     , ROUND(SUM(W181),2) AS W181
     , ROUND(SUM(WSUM181),2) AS WSUM181
     , ROUND(SUM(WCNT181),2) AS WCNT181
     , ROUND(SUM(R181),2) AS R181
     , ROUND(SUM(RSUM181),2) AS RSUM181
     , ROUND(SUM(RCNT181),2) AS RCNT181
     , ROUND(SUM(W182),2) AS W182
     , ROUND(SUM(WSUM182),2) AS WSUM182
     , ROUND(SUM(WCNT182),2) AS WCNT182
     , ROUND(SUM(R182),2) AS R182
     , ROUND(SUM(RSUM182),2) AS RSUM182
     , ROUND(SUM(RCNT182),2) AS RCNT182
     , ROUND(SUM(W183),2) AS W183
     , ROUND(SUM(WSUM183),2) AS WSUM183
     , ROUND(SUM(WCNT183),2) AS WCNT183
     , ROUND(SUM(R183),2) AS R183
     , ROUND(SUM(RSUM183),2) AS RSUM183
     , ROUND(SUM(RCNT183),2) AS RCNT183
     , ROUND(SUM(W184),2) AS W184
     , ROUND(SUM(WSUM184),2) AS WSUM184
     , ROUND(SUM(WCNT184),2) AS WCNT184
     , ROUND(SUM(R184),2) AS R184
     , ROUND(SUM(RSUM184),2) AS RSUM184
     , ROUND(SUM(RCNT184),2) AS RCNT184
     , ROUND(SUM(W185),2) AS W185
     , ROUND(SUM(WSUM185),2) AS WSUM185
     , ROUND(SUM(WCNT185),2) AS WCNT185
     , ROUND(SUM(R185),2) AS R185
     , ROUND(SUM(RSUM185),2) AS RSUM185
     , ROUND(SUM(RCNT185),2) AS RCNT185
     , ROUND(SUM(W186),2) AS W186
     , ROUND(SUM(WSUM186),2) AS WSUM186
     , ROUND(SUM(WCNT186),2) AS WCNT186
     , ROUND(SUM(R186),2) AS R186
     , ROUND(SUM(RSUM186),2) AS RSUM186
     , ROUND(SUM(RCNT186),2) AS RCNT186
     , ROUND(SUM(W187),2) AS W187
     , ROUND(SUM(WSUM187),2) AS WSUM187
     , ROUND(SUM(WCNT187),2) AS WCNT187
     , ROUND(SUM(R187),2) AS R187
     , ROUND(SUM(RSUM187),2) AS RSUM187
     , ROUND(SUM(RCNT187),2) AS RCNT187
     , ROUND(SUM(W188),2) AS W188
     , ROUND(SUM(WSUM188),2) AS WSUM188
     , ROUND(SUM(WCNT188),2) AS WCNT188
     , ROUND(SUM(R188),2) AS R188
     , ROUND(SUM(RSUM188),2) AS RSUM188
     , ROUND(SUM(RCNT188),2) AS RCNT188
     , ROUND(SUM(W189),2) AS W189
     , ROUND(SUM(WSUM189),2) AS WSUM189
     , ROUND(SUM(WCNT189),2) AS WCNT189
     , ROUND(SUM(R189),2) AS R189
     , ROUND(SUM(RSUM189),2) AS RSUM189
     , ROUND(SUM(RCNT189),2) AS RCNT189
     , ROUND(SUM(W190),2) AS W190
     , ROUND(SUM(WSUM190),2) AS WSUM190
     , ROUND(SUM(WCNT190),2) AS WCNT190
     , ROUND(SUM(R190),2) AS R190
     , ROUND(SUM(RSUM190),2) AS RSUM190
     , ROUND(SUM(RCNT190),2) AS RCNT190
     , ROUND(SUM(W191),2) AS W191
     , ROUND(SUM(WSUM191),2) AS WSUM191
     , ROUND(SUM(WCNT191),2) AS WCNT191
     , ROUND(SUM(R191),2) AS R191
     , ROUND(SUM(RSUM191),2) AS RSUM191
     , ROUND(SUM(RCNT191),2) AS RCNT191
     , ROUND(SUM(W192),2) AS W192
     , ROUND(SUM(WSUM192),2) AS WSUM192
     , ROUND(SUM(WCNT192),2) AS WCNT192
     , ROUND(SUM(R192),2) AS R192
     , ROUND(SUM(RSUM192),2) AS RSUM192
     , ROUND(SUM(RCNT192),2) AS RCNT192
     , ROUND(SUM(W193),2) AS W193
     , ROUND(SUM(WSUM193),2) AS WSUM193
     , ROUND(SUM(WCNT193),2) AS WCNT193
     , ROUND(SUM(R193),2) AS R193
     , ROUND(SUM(RSUM193),2) AS RSUM193
     , ROUND(SUM(RCNT193),2) AS RCNT193
     , ROUND(SUM(W194),2) AS W194
     , ROUND(SUM(WSUM194),2) AS WSUM194
     , ROUND(SUM(WCNT194),2) AS WCNT194
     , ROUND(SUM(R194),2) AS R194
     , ROUND(SUM(RSUM194),2) AS RSUM194
     , ROUND(SUM(RCNT194),2) AS RCNT194
     , ROUND(SUM(W195),2) AS W195
     , ROUND(SUM(WSUM195),2) AS WSUM195
     , ROUND(SUM(WCNT195),2) AS WCNT195
     , ROUND(SUM(R195),2) AS R195
     , ROUND(SUM(RSUM195),2) AS RSUM195
     , ROUND(SUM(RCNT195),2) AS RCNT195
     , ROUND(SUM(W196),2) AS W196
     , ROUND(SUM(WSUM196),2) AS WSUM196
     , ROUND(SUM(WCNT196),2) AS WCNT196
     , ROUND(SUM(R196),2) AS R196
     , ROUND(SUM(RSUM196),2) AS RSUM196
     , ROUND(SUM(RCNT196),2) AS RCNT196
     , ROUND(SUM(W197),2) AS W197
     , ROUND(SUM(WSUM197),2) AS WSUM197
     , ROUND(SUM(WCNT197),2) AS WCNT197
     , ROUND(SUM(R197),2) AS R197
     , ROUND(SUM(RSUM197),2) AS RSUM197
     , ROUND(SUM(RCNT197),2) AS RCNT197
     , ROUND(SUM(W198),2) AS W198
     , ROUND(SUM(WSUM198),2) AS WSUM198
     , ROUND(SUM(WCNT198),2) AS WCNT198
     , ROUND(SUM(R198),2) AS R198
     , ROUND(SUM(RSUM198),2) AS RSUM198
     , ROUND(SUM(RCNT198),2) AS RCNT198
     , ROUND(SUM(W199),2) AS W199
     , ROUND(SUM(WSUM199),2) AS WSUM199
     , ROUND(SUM(WCNT199),2) AS WCNT199
     , ROUND(SUM(R199),2) AS R199
     , ROUND(SUM(RSUM199),2) AS RSUM199
     , ROUND(SUM(RCNT199),2) AS RCNT199
     , ROUND(SUM(W200),2) AS W200
     , ROUND(SUM(WSUM200),2) AS WSUM200
     , ROUND(SUM(WCNT200),2) AS WCNT200
     , ROUND(SUM(R200),2) AS R200
     , ROUND(SUM(RSUM200),2) AS RSUM200
     , ROUND(SUM(RCNT200),2) AS RCNT200
     , ROUND(SUM(W201),2) AS W201
     , ROUND(SUM(WSUM201),2) AS WSUM201
     , ROUND(SUM(WCNT201),2) AS WCNT201
     , ROUND(SUM(R201),2) AS R201
     , ROUND(SUM(RSUM201),2) AS RSUM201
     , ROUND(SUM(RCNT201),2) AS RCNT201
     , ROUND(SUM(W202),2) AS W202
     , ROUND(SUM(WSUM202),2) AS WSUM202
     , ROUND(SUM(WCNT202),2) AS WCNT202
     , ROUND(SUM(R202),2) AS R202
     , ROUND(SUM(RSUM202),2) AS RSUM202
     , ROUND(SUM(RCNT202),2) AS RCNT202
     , ROUND(SUM(W203),2) AS W203
     , ROUND(SUM(WSUM203),2) AS WSUM203
     , ROUND(SUM(WCNT203),2) AS WCNT203
     , ROUND(SUM(R203),2) AS R203
     , ROUND(SUM(RSUM203),2) AS RSUM203
     , ROUND(SUM(RCNT203),2) AS RCNT203
     , ROUND(SUM(W204),2) AS W204
     , ROUND(SUM(WSUM204),2) AS WSUM204
     , ROUND(SUM(WCNT204),2) AS WCNT204
     , ROUND(SUM(R204),2) AS R204
     , ROUND(SUM(RSUM204),2) AS RSUM204
     , ROUND(SUM(RCNT204),2) AS RCNT204
     , ROUND(SUM(W205),2) AS W205
     , ROUND(SUM(WSUM205),2) AS WSUM205
     , ROUND(SUM(WCNT205),2) AS WCNT205
     , ROUND(SUM(R205),2) AS R205
     , ROUND(SUM(RSUM205),2) AS RSUM205
     , ROUND(SUM(RCNT205),2) AS RCNT205
     , ROUND(SUM(W206),2) AS W206
     , ROUND(SUM(WSUM206),2) AS WSUM206
     , ROUND(SUM(WCNT206),2) AS WCNT206
     , ROUND(SUM(R206),2) AS R206
     , ROUND(SUM(RSUM206),2) AS RSUM206
     , ROUND(SUM(RCNT206),2) AS RCNT206
     , ROUND(SUM(W207),2) AS W207
     , ROUND(SUM(WSUM207),2) AS WSUM207
     , ROUND(SUM(WCNT207),2) AS WCNT207
     , ROUND(SUM(R207),2) AS R207
     , ROUND(SUM(RSUM207),2) AS RSUM207
     , ROUND(SUM(RCNT207),2) AS RCNT207
     , ROUND(SUM(W208),2) AS W208
     , ROUND(SUM(WSUM208),2) AS WSUM208
     , ROUND(SUM(WCNT208),2) AS WCNT208
     , ROUND(SUM(R208),2) AS R208
     , ROUND(SUM(RSUM208),2) AS RSUM208
     , ROUND(SUM(RCNT208),2) AS RCNT208
     , ROUND(SUM(W209),2) AS W209
     , ROUND(SUM(WSUM209),2) AS WSUM209
     , ROUND(SUM(WCNT209),2) AS WCNT209
     , ROUND(SUM(R209),2) AS R209
     , ROUND(SUM(RSUM209),2) AS RSUM209
     , ROUND(SUM(RCNT209),2) AS RCNT209
     , ROUND(SUM(W210),2) AS W210
     , ROUND(SUM(WSUM210),2) AS WSUM210
     , ROUND(SUM(WCNT210),2) AS WCNT210
     , ROUND(SUM(R210),2) AS R210
     , ROUND(SUM(RSUM210),2) AS RSUM210
     , ROUND(SUM(RCNT210),2) AS RCNT210
     , ROUND(SUM(W211),2) AS W211
     , ROUND(SUM(WSUM211),2) AS WSUM211
     , ROUND(SUM(WCNT211),2) AS WCNT211
     , ROUND(SUM(R211),2) AS R211
     , ROUND(SUM(RSUM211),2) AS RSUM211
     , ROUND(SUM(RCNT211),2) AS RCNT211
     , ROUND(SUM(W212),2) AS W212
     , ROUND(SUM(WSUM212),2) AS WSUM212
     , ROUND(SUM(WCNT212),2) AS WCNT212
     , ROUND(SUM(R212),2) AS R212
     , ROUND(SUM(RSUM212),2) AS RSUM212
     , ROUND(SUM(RCNT212),2) AS RCNT212
     , ROUND(SUM(W213),2) AS W213
     , ROUND(SUM(WSUM213),2) AS WSUM213
     , ROUND(SUM(WCNT213),2) AS WCNT213
     , ROUND(SUM(R213),2) AS R213
     , ROUND(SUM(RSUM213),2) AS RSUM213
     , ROUND(SUM(RCNT213),2) AS RCNT213
     , ROUND(SUM(W214),2) AS W214
     , ROUND(SUM(WSUM214),2) AS WSUM214
     , ROUND(SUM(WCNT214),2) AS WCNT214
     , ROUND(SUM(R214),2) AS R214
     , ROUND(SUM(RSUM214),2) AS RSUM214
     , ROUND(SUM(RCNT214),2) AS RCNT214
     , ROUND(SUM(W215),2) AS W215
     , ROUND(SUM(WSUM215),2) AS WSUM215
     , ROUND(SUM(WCNT215),2) AS WCNT215
     , ROUND(SUM(R215),2) AS R215
     , ROUND(SUM(RSUM215),2) AS RSUM215
     , ROUND(SUM(RCNT215),2) AS RCNT215
     , ROUND(SUM(W216),2) AS W216
     , ROUND(SUM(WSUM216),2) AS WSUM216
     , ROUND(SUM(WCNT216),2) AS WCNT216
     , ROUND(SUM(R216),2) AS R216
     , ROUND(SUM(RSUM216),2) AS RSUM216
     , ROUND(SUM(RCNT216),2) AS RCNT216
  FROM ( 
        SELECT SHIP_DATE, MAT_GRP_1, MAT_CMF_10,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ' 
              , DECODE(SUM(SHIP_QTY),0,0,SUM(TOTAL_TAT_QTY)/SUM(SHIP_QTY)) AS CTOT   
              , DECODE(OPER, 'A0000', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W0
              , DECODE(OPER, 'A0000', SUM(WAIT_TAT_QTY), 0) AS WSUM0
              , DECODE(OPER, 'A0000', SUM(SHIP_QTY), 0) AS WCNT0
              , DECODE(OPER, 'A0000', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R0
              , DECODE(OPER, 'A0000', SUM(PROC_TAT_QTY), 0) AS RSUM0
              , DECODE(OPER, 'A0000', SUM(SHIP_QTY), 0) AS RCNT0
              , DECODE(OPER, 'A0005', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W1
              , DECODE(OPER, 'A0005', SUM(WAIT_TAT_QTY), 0) AS WSUM1
              , DECODE(OPER, 'A0005', SUM(SHIP_QTY), 0) AS WCNT1
              , DECODE(OPER, 'A0005', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R1
              , DECODE(OPER, 'A0005', SUM(PROC_TAT_QTY), 0) AS RSUM1
              , DECODE(OPER, 'A0005', SUM(SHIP_QTY), 0) AS RCNT1
              , DECODE(OPER, 'A0010', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W2
              , DECODE(OPER, 'A0010', SUM(WAIT_TAT_QTY), 0) AS WSUM2
              , DECODE(OPER, 'A0010', SUM(SHIP_QTY), 0) AS WCNT2
              , DECODE(OPER, 'A0010', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R2
              , DECODE(OPER, 'A0010', SUM(PROC_TAT_QTY), 0) AS RSUM2
              , DECODE(OPER, 'A0010', SUM(SHIP_QTY), 0) AS RCNT2
              , DECODE(OPER, 'A0012', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W3
              , DECODE(OPER, 'A0012', SUM(WAIT_TAT_QTY), 0) AS WSUM3
              , DECODE(OPER, 'A0012', SUM(SHIP_QTY), 0) AS WCNT3
              , DECODE(OPER, 'A0012', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R3
              , DECODE(OPER, 'A0012', SUM(PROC_TAT_QTY), 0) AS RSUM3
              , DECODE(OPER, 'A0012', SUM(SHIP_QTY), 0) AS RCNT3
              , DECODE(OPER, 'A0013', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W4
              , DECODE(OPER, 'A0013', SUM(WAIT_TAT_QTY), 0) AS WSUM4
              , DECODE(OPER, 'A0013', SUM(SHIP_QTY), 0) AS WCNT4
              , DECODE(OPER, 'A0013', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R4
              , DECODE(OPER, 'A0013', SUM(PROC_TAT_QTY), 0) AS RSUM4
              , DECODE(OPER, 'A0013', SUM(SHIP_QTY), 0) AS RCNT4
              , DECODE(OPER, 'A0015', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W5
              , DECODE(OPER, 'A0015', SUM(WAIT_TAT_QTY), 0) AS WSUM5
              , DECODE(OPER, 'A0015', SUM(SHIP_QTY), 0) AS WCNT5
              , DECODE(OPER, 'A0015', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R5
              , DECODE(OPER, 'A0015', SUM(PROC_TAT_QTY), 0) AS RSUM5
              , DECODE(OPER, 'A0015', SUM(SHIP_QTY), 0) AS RCNT5
              , DECODE(OPER, 'A0020', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W6
              , DECODE(OPER, 'A0020', SUM(WAIT_TAT_QTY), 0) AS WSUM6
              , DECODE(OPER, 'A0020', SUM(SHIP_QTY), 0) AS WCNT6
              , DECODE(OPER, 'A0020', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R6
              , DECODE(OPER, 'A0020', SUM(PROC_TAT_QTY), 0) AS RSUM6
              , DECODE(OPER, 'A0020', SUM(SHIP_QTY), 0) AS RCNT6
              , DECODE(OPER, 'A0055', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W7
              , DECODE(OPER, 'A0055', SUM(WAIT_TAT_QTY), 0) AS WSUM7
              , DECODE(OPER, 'A0055', SUM(SHIP_QTY), 0) AS WCNT7
              , DECODE(OPER, 'A0055', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R7
              , DECODE(OPER, 'A0055', SUM(PROC_TAT_QTY), 0) AS RSUM7
              , DECODE(OPER, 'A0055', SUM(SHIP_QTY), 0) AS RCNT7
              , DECODE(OPER, 'A0023', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W8
              , DECODE(OPER, 'A0023', SUM(WAIT_TAT_QTY), 0) AS WSUM8
              , DECODE(OPER, 'A0023', SUM(SHIP_QTY), 0) AS WCNT8
              , DECODE(OPER, 'A0023', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R8
              , DECODE(OPER, 'A0023', SUM(PROC_TAT_QTY), 0) AS RSUM8
              , DECODE(OPER, 'A0023', SUM(SHIP_QTY), 0) AS RCNT8
              , DECODE(OPER, 'A0025', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W9
              , DECODE(OPER, 'A0025', SUM(WAIT_TAT_QTY), 0) AS WSUM9
              , DECODE(OPER, 'A0025', SUM(SHIP_QTY), 0) AS WCNT9
              , DECODE(OPER, 'A0025', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R9
              , DECODE(OPER, 'A0025', SUM(PROC_TAT_QTY), 0) AS RSUM9
              , DECODE(OPER, 'A0025', SUM(SHIP_QTY), 0) AS RCNT9
              , DECODE(OPER, 'A0030', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W10
              , DECODE(OPER, 'A0030', SUM(WAIT_TAT_QTY), 0) AS WSUM10
              , DECODE(OPER, 'A0030', SUM(SHIP_QTY), 0) AS WCNT10
              , DECODE(OPER, 'A0030', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R10
              , DECODE(OPER, 'A0030', SUM(PROC_TAT_QTY), 0) AS RSUM10
              , DECODE(OPER, 'A0030', SUM(SHIP_QTY), 0) AS RCNT10
              , DECODE(OPER, 'A0190', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W11
              , DECODE(OPER, 'A0190', SUM(WAIT_TAT_QTY), 0) AS WSUM11
              , DECODE(OPER, 'A0190', SUM(SHIP_QTY), 0) AS WCNT11
              , DECODE(OPER, 'A0190', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R11
              , DECODE(OPER, 'A0190', SUM(PROC_TAT_QTY), 0) AS RSUM11
              , DECODE(OPER, 'A0190', SUM(SHIP_QTY), 0) AS RCNT11
              , DECODE(OPER, 'A0033', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W12
              , DECODE(OPER, 'A0033', SUM(WAIT_TAT_QTY), 0) AS WSUM12
              , DECODE(OPER, 'A0033', SUM(SHIP_QTY), 0) AS WCNT12
              , DECODE(OPER, 'A0033', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R12
              , DECODE(OPER, 'A0033', SUM(PROC_TAT_QTY), 0) AS RSUM12
              , DECODE(OPER, 'A0033', SUM(SHIP_QTY), 0) AS RCNT12
              , DECODE(OPER, 'A0040', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W13
              , DECODE(OPER, 'A0040', SUM(WAIT_TAT_QTY), 0) AS WSUM13
              , DECODE(OPER, 'A0040', SUM(SHIP_QTY), 0) AS WCNT13
              , DECODE(OPER, 'A0040', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R13
              , DECODE(OPER, 'A0040', SUM(PROC_TAT_QTY), 0) AS RSUM13
              , DECODE(OPER, 'A0040', SUM(SHIP_QTY), 0) AS RCNT13
              , DECODE(OPER, 'A0041', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W14
              , DECODE(OPER, 'A0041', SUM(WAIT_TAT_QTY), 0) AS WSUM14
              , DECODE(OPER, 'A0041', SUM(SHIP_QTY), 0) AS WCNT14
              , DECODE(OPER, 'A0041', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R14
              , DECODE(OPER, 'A0041', SUM(PROC_TAT_QTY), 0) AS RSUM14
              , DECODE(OPER, 'A0041', SUM(SHIP_QTY), 0) AS RCNT14
              , DECODE(OPER, 'A0042', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W15
              , DECODE(OPER, 'A0042', SUM(WAIT_TAT_QTY), 0) AS WSUM15
              , DECODE(OPER, 'A0042', SUM(SHIP_QTY), 0) AS WCNT15
              , DECODE(OPER, 'A0042', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R15
              , DECODE(OPER, 'A0042', SUM(PROC_TAT_QTY), 0) AS RSUM15
              , DECODE(OPER, 'A0042', SUM(SHIP_QTY), 0) AS RCNT15
              , DECODE(OPER, 'A0050', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W16
              , DECODE(OPER, 'A0050', SUM(WAIT_TAT_QTY), 0) AS WSUM16
              , DECODE(OPER, 'A0050', SUM(SHIP_QTY), 0) AS WCNT16
              , DECODE(OPER, 'A0050', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R16
              , DECODE(OPER, 'A0050', SUM(PROC_TAT_QTY), 0) AS RSUM16
              , DECODE(OPER, 'A0050', SUM(SHIP_QTY), 0) AS RCNT16
              , DECODE(OPER, 'A0060', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W17
              , DECODE(OPER, 'A0060', SUM(WAIT_TAT_QTY), 0) AS WSUM17
              , DECODE(OPER, 'A0060', SUM(SHIP_QTY), 0) AS WCNT17
              , DECODE(OPER, 'A0060', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R17
              , DECODE(OPER, 'A0060', SUM(PROC_TAT_QTY), 0) AS RSUM17
              , DECODE(OPER, 'A0060', SUM(SHIP_QTY), 0) AS RCNT17
              , DECODE(OPER, 'A0070', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W18
              , DECODE(OPER, 'A0070', SUM(WAIT_TAT_QTY), 0) AS WSUM18
              , DECODE(OPER, 'A0070', SUM(SHIP_QTY), 0) AS WCNT18
              , DECODE(OPER, 'A0070', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R18
              , DECODE(OPER, 'A0070', SUM(PROC_TAT_QTY), 0) AS RSUM18
              , DECODE(OPER, 'A0070', SUM(SHIP_QTY), 0) AS RCNT18
              , DECODE(OPER, 'A0080', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W19
              , DECODE(OPER, 'A0080', SUM(WAIT_TAT_QTY), 0) AS WSUM19
              , DECODE(OPER, 'A0080', SUM(SHIP_QTY), 0) AS WCNT19
              , DECODE(OPER, 'A0080', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R19
              , DECODE(OPER, 'A0080', SUM(PROC_TAT_QTY), 0) AS RSUM19
              , DECODE(OPER, 'A0080', SUM(SHIP_QTY), 0) AS RCNT19
              , DECODE(OPER, 'A0090', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W20
              , DECODE(OPER, 'A0090', SUM(WAIT_TAT_QTY), 0) AS WSUM20
              , DECODE(OPER, 'A0090', SUM(SHIP_QTY), 0) AS WCNT20
              , DECODE(OPER, 'A0090', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R20
              , DECODE(OPER, 'A0090', SUM(PROC_TAT_QTY), 0) AS RSUM20
              , DECODE(OPER, 'A0090', SUM(SHIP_QTY), 0) AS RCNT20
              , DECODE(OPER, 'A0095', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W21
              , DECODE(OPER, 'A0095', SUM(WAIT_TAT_QTY), 0) AS WSUM21
              , DECODE(OPER, 'A0095', SUM(SHIP_QTY), 0) AS WCNT21
              , DECODE(OPER, 'A0095', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R21
              , DECODE(OPER, 'A0095', SUM(PROC_TAT_QTY), 0) AS RSUM21
              , DECODE(OPER, 'A0095', SUM(SHIP_QTY), 0) AS RCNT21
              , DECODE(OPER, 'A0130', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W22
              , DECODE(OPER, 'A0130', SUM(WAIT_TAT_QTY), 0) AS WSUM22
              , DECODE(OPER, 'A0130', SUM(SHIP_QTY), 0) AS WCNT22
              , DECODE(OPER, 'A0130', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R22
              , DECODE(OPER, 'A0130', SUM(PROC_TAT_QTY), 0) AS RSUM22
              , DECODE(OPER, 'A0130', SUM(SHIP_QTY), 0) AS RCNT22
              , DECODE(OPER, 'A0140', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W23
              , DECODE(OPER, 'A0140', SUM(WAIT_TAT_QTY), 0) AS WSUM23
              , DECODE(OPER, 'A0140', SUM(SHIP_QTY), 0) AS WCNT23
              , DECODE(OPER, 'A0140', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R23
              , DECODE(OPER, 'A0140', SUM(PROC_TAT_QTY), 0) AS RSUM23
              , DECODE(OPER, 'A0140', SUM(SHIP_QTY), 0) AS RCNT23
              , DECODE(OPER, 'A0160', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W24
              , DECODE(OPER, 'A0160', SUM(WAIT_TAT_QTY), 0) AS WSUM24
              , DECODE(OPER, 'A0160', SUM(SHIP_QTY), 0) AS WCNT24
              , DECODE(OPER, 'A0160', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R24
              , DECODE(OPER, 'A0160', SUM(PROC_TAT_QTY), 0) AS RSUM24
              , DECODE(OPER, 'A0160', SUM(SHIP_QTY), 0) AS RCNT24
              , DECODE(OPER, 'A0165', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W25
              , DECODE(OPER, 'A0165', SUM(WAIT_TAT_QTY), 0) AS WSUM25
              , DECODE(OPER, 'A0165', SUM(SHIP_QTY), 0) AS WCNT25
              , DECODE(OPER, 'A0165', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R25
              , DECODE(OPER, 'A0165', SUM(PROC_TAT_QTY), 0) AS RSUM25
              , DECODE(OPER, 'A0165', SUM(SHIP_QTY), 0) AS RCNT25
              , DECODE(OPER, 'A0065', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W26
              , DECODE(OPER, 'A0065', SUM(WAIT_TAT_QTY), 0) AS WSUM26
              , DECODE(OPER, 'A0065', SUM(SHIP_QTY), 0) AS WCNT26
              , DECODE(OPER, 'A0065', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R26
              , DECODE(OPER, 'A0065', SUM(PROC_TAT_QTY), 0) AS RSUM26
              , DECODE(OPER, 'A0065', SUM(SHIP_QTY), 0) AS RCNT26
              , DECODE(OPER, 'A0100', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W27
              , DECODE(OPER, 'A0100', SUM(WAIT_TAT_QTY), 0) AS WSUM27
              , DECODE(OPER, 'A0100', SUM(SHIP_QTY), 0) AS WCNT27
              , DECODE(OPER, 'A0100', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R27
              , DECODE(OPER, 'A0100', SUM(PROC_TAT_QTY), 0) AS RSUM27
              , DECODE(OPER, 'A0100', SUM(SHIP_QTY), 0) AS RCNT27
              , DECODE(OPER, 'A0150', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W28
              , DECODE(OPER, 'A0150', SUM(WAIT_TAT_QTY), 0) AS WSUM28
              , DECODE(OPER, 'A0150', SUM(SHIP_QTY), 0) AS WCNT28
              , DECODE(OPER, 'A0150', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R28
              , DECODE(OPER, 'A0150', SUM(PROC_TAT_QTY), 0) AS RSUM28
              , DECODE(OPER, 'A0150', SUM(SHIP_QTY), 0) AS RCNT28
              , DECODE(OPER, 'A0175', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W29
              , DECODE(OPER, 'A0175', SUM(WAIT_TAT_QTY), 0) AS WSUM29
              , DECODE(OPER, 'A0175', SUM(SHIP_QTY), 0) AS WCNT29
              , DECODE(OPER, 'A0175', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R29
              , DECODE(OPER, 'A0175', SUM(PROC_TAT_QTY), 0) AS RSUM29
              , DECODE(OPER, 'A0175', SUM(SHIP_QTY), 0) AS RCNT29
              , DECODE(OPER, 'A0170', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W30
              , DECODE(OPER, 'A0170', SUM(WAIT_TAT_QTY), 0) AS WSUM30
              , DECODE(OPER, 'A0170', SUM(SHIP_QTY), 0) AS WCNT30
              , DECODE(OPER, 'A0170', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R30
              , DECODE(OPER, 'A0170', SUM(PROC_TAT_QTY), 0) AS RSUM30
              , DECODE(OPER, 'A0170', SUM(SHIP_QTY), 0) AS RCNT30
              , DECODE(OPER, 'A0180', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W31
              , DECODE(OPER, 'A0180', SUM(WAIT_TAT_QTY), 0) AS WSUM31
              , DECODE(OPER, 'A0180', SUM(SHIP_QTY), 0) AS WCNT31
              , DECODE(OPER, 'A0180', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R31
              , DECODE(OPER, 'A0180', SUM(PROC_TAT_QTY), 0) AS RSUM31
              , DECODE(OPER, 'A0180', SUM(SHIP_QTY), 0) AS RCNT31
              , DECODE(OPER, 'A0200', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W32
              , DECODE(OPER, 'A0200', SUM(WAIT_TAT_QTY), 0) AS WSUM32
              , DECODE(OPER, 'A0200', SUM(SHIP_QTY), 0) AS WCNT32
              , DECODE(OPER, 'A0200', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R32
              , DECODE(OPER, 'A0200', SUM(PROC_TAT_QTY), 0) AS RSUM32
              , DECODE(OPER, 'A0200', SUM(SHIP_QTY), 0) AS RCNT32
              , DECODE(OPER, 'A0201', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W33
              , DECODE(OPER, 'A0201', SUM(WAIT_TAT_QTY), 0) AS WSUM33
              , DECODE(OPER, 'A0201', SUM(SHIP_QTY), 0) AS WCNT33
              , DECODE(OPER, 'A0201', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R33
              , DECODE(OPER, 'A0201', SUM(PROC_TAT_QTY), 0) AS RSUM33
              , DECODE(OPER, 'A0201', SUM(SHIP_QTY), 0) AS RCNT33
              , DECODE(OPER, 'A0202', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W34
              , DECODE(OPER, 'A0202', SUM(WAIT_TAT_QTY), 0) AS WSUM34
              , DECODE(OPER, 'A0202', SUM(SHIP_QTY), 0) AS WCNT34
              , DECODE(OPER, 'A0202', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R34
              , DECODE(OPER, 'A0202', SUM(PROC_TAT_QTY), 0) AS RSUM34
              , DECODE(OPER, 'A0202', SUM(SHIP_QTY), 0) AS RCNT34
              , DECODE(OPER, 'A0210', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W35
              , DECODE(OPER, 'A0210', SUM(WAIT_TAT_QTY), 0) AS WSUM35
              , DECODE(OPER, 'A0210', SUM(SHIP_QTY), 0) AS WCNT35
              , DECODE(OPER, 'A0210', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R35
              , DECODE(OPER, 'A0210', SUM(PROC_TAT_QTY), 0) AS RSUM35
              , DECODE(OPER, 'A0210', SUM(SHIP_QTY), 0) AS RCNT35
              , DECODE(OPER, 'A0220', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W36
              , DECODE(OPER, 'A0220', SUM(WAIT_TAT_QTY), 0) AS WSUM36
              , DECODE(OPER, 'A0220', SUM(SHIP_QTY), 0) AS WCNT36
              , DECODE(OPER, 'A0220', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R36
              , DECODE(OPER, 'A0220', SUM(PROC_TAT_QTY), 0) AS RSUM36
              , DECODE(OPER, 'A0220', SUM(SHIP_QTY), 0) AS RCNT36
              , DECODE(OPER, 'A0230', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W37
              , DECODE(OPER, 'A0230', SUM(WAIT_TAT_QTY), 0) AS WSUM37
              , DECODE(OPER, 'A0230', SUM(SHIP_QTY), 0) AS WCNT37
              , DECODE(OPER, 'A0230', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R37
              , DECODE(OPER, 'A0230', SUM(PROC_TAT_QTY), 0) AS RSUM37
              , DECODE(OPER, 'A0230', SUM(SHIP_QTY), 0) AS RCNT37
              , DECODE(OPER, 'A0300', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W38
              , DECODE(OPER, 'A0300', SUM(WAIT_TAT_QTY), 0) AS WSUM38
              , DECODE(OPER, 'A0300', SUM(SHIP_QTY), 0) AS WCNT38
              , DECODE(OPER, 'A0300', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R38
              , DECODE(OPER, 'A0300', SUM(PROC_TAT_QTY), 0) AS RSUM38
              , DECODE(OPER, 'A0300', SUM(SHIP_QTY), 0) AS RCNT38
              , DECODE(OPER, 'A0250', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W39
              , DECODE(OPER, 'A0250', SUM(WAIT_TAT_QTY), 0) AS WSUM39
              , DECODE(OPER, 'A0250', SUM(SHIP_QTY), 0) AS WCNT39
              , DECODE(OPER, 'A0250', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R39
              , DECODE(OPER, 'A0250', SUM(PROC_TAT_QTY), 0) AS RSUM39
              , DECODE(OPER, 'A0250', SUM(SHIP_QTY), 0) AS RCNT39
              , DECODE(OPER, 'A0240', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W40
              , DECODE(OPER, 'A0240', SUM(WAIT_TAT_QTY), 0) AS WSUM40
              , DECODE(OPER, 'A0240', SUM(SHIP_QTY), 0) AS WCNT40
              , DECODE(OPER, 'A0240', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R40
              , DECODE(OPER, 'A0240', SUM(PROC_TAT_QTY), 0) AS RSUM40
              , DECODE(OPER, 'A0240', SUM(SHIP_QTY), 0) AS RCNT40
              , DECODE(OPER, 'A0260', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W41
              , DECODE(OPER, 'A0260', SUM(WAIT_TAT_QTY), 0) AS WSUM41
              , DECODE(OPER, 'A0260', SUM(SHIP_QTY), 0) AS WCNT41
              , DECODE(OPER, 'A0260', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R41
              , DECODE(OPER, 'A0260', SUM(PROC_TAT_QTY), 0) AS RSUM41
              , DECODE(OPER, 'A0260', SUM(SHIP_QTY), 0) AS RCNT41
              , DECODE(OPER, 'A0270', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W42
              , DECODE(OPER, 'A0270', SUM(WAIT_TAT_QTY), 0) AS WSUM42
              , DECODE(OPER, 'A0270', SUM(SHIP_QTY), 0) AS WCNT42
              , DECODE(OPER, 'A0270', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R42
              , DECODE(OPER, 'A0270', SUM(PROC_TAT_QTY), 0) AS RSUM42
              , DECODE(OPER, 'A0270', SUM(SHIP_QTY), 0) AS RCNT42
              , DECODE(OPER, 'A0290', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W43
              , DECODE(OPER, 'A0290', SUM(WAIT_TAT_QTY), 0) AS WSUM43
              , DECODE(OPER, 'A0290', SUM(SHIP_QTY), 0) AS WCNT43
              , DECODE(OPER, 'A0290', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R43
              , DECODE(OPER, 'A0290', SUM(PROC_TAT_QTY), 0) AS RSUM43
              , DECODE(OPER, 'A0290', SUM(SHIP_QTY), 0) AS RCNT43
              , DECODE(OPER, 'A0295', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W44
              , DECODE(OPER, 'A0295', SUM(WAIT_TAT_QTY), 0) AS WSUM44
              , DECODE(OPER, 'A0295', SUM(SHIP_QTY), 0) AS WCNT44
              , DECODE(OPER, 'A0295', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R44
              , DECODE(OPER, 'A0295', SUM(PROC_TAT_QTY), 0) AS RSUM44
              , DECODE(OPER, 'A0295', SUM(SHIP_QTY), 0) AS RCNT44
              , DECODE(OPER, 'A0280', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W45
              , DECODE(OPER, 'A0280', SUM(WAIT_TAT_QTY), 0) AS WSUM45
              , DECODE(OPER, 'A0280', SUM(SHIP_QTY), 0) AS WCNT45
              , DECODE(OPER, 'A0280', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R45
              , DECODE(OPER, 'A0280', SUM(PROC_TAT_QTY), 0) AS RSUM45
              , DECODE(OPER, 'A0280', SUM(SHIP_QTY), 0) AS RCNT45
              , DECODE(OPER, 'A0307', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W46
              , DECODE(OPER, 'A0307', SUM(WAIT_TAT_QTY), 0) AS WSUM46
              , DECODE(OPER, 'A0307', SUM(SHIP_QTY), 0) AS WCNT46
              , DECODE(OPER, 'A0307', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R46
              , DECODE(OPER, 'A0307', SUM(PROC_TAT_QTY), 0) AS RSUM46
              , DECODE(OPER, 'A0307', SUM(SHIP_QTY), 0) AS RCNT46
              , DECODE(OPER, 'A0310', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W47
              , DECODE(OPER, 'A0310', SUM(WAIT_TAT_QTY), 0) AS WSUM47
              , DECODE(OPER, 'A0310', SUM(SHIP_QTY), 0) AS WCNT47
              , DECODE(OPER, 'A0310', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R47
              , DECODE(OPER, 'A0310', SUM(PROC_TAT_QTY), 0) AS RSUM47
              , DECODE(OPER, 'A0310', SUM(SHIP_QTY), 0) AS RCNT47
              , DECODE(OPER, 'A0320', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W48
              , DECODE(OPER, 'A0320', SUM(WAIT_TAT_QTY), 0) AS WSUM48
              , DECODE(OPER, 'A0320', SUM(SHIP_QTY), 0) AS WCNT48
              , DECODE(OPER, 'A0320', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R48
              , DECODE(OPER, 'A0320', SUM(PROC_TAT_QTY), 0) AS RSUM48
              , DECODE(OPER, 'A0320', SUM(SHIP_QTY), 0) AS RCNT48
              , DECODE(OPER, 'A0330', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W49
              , DECODE(OPER, 'A0330', SUM(WAIT_TAT_QTY), 0) AS WSUM49
              , DECODE(OPER, 'A0330', SUM(SHIP_QTY), 0) AS WCNT49
              , DECODE(OPER, 'A0330', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R49
              , DECODE(OPER, 'A0330', SUM(PROC_TAT_QTY), 0) AS RSUM49
              , DECODE(OPER, 'A0330', SUM(SHIP_QTY), 0) AS RCNT49
              , DECODE(OPER, 'A0333', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W50
              , DECODE(OPER, 'A0333', SUM(WAIT_TAT_QTY), 0) AS WSUM50
              , DECODE(OPER, 'A0333', SUM(SHIP_QTY), 0) AS WCNT50
              , DECODE(OPER, 'A0333', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R50
              , DECODE(OPER, 'A0333', SUM(PROC_TAT_QTY), 0) AS RSUM50
              , DECODE(OPER, 'A0333', SUM(SHIP_QTY), 0) AS RCNT50
              , DECODE(OPER, 'A0337', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W51
              , DECODE(OPER, 'A0337', SUM(WAIT_TAT_QTY), 0) AS WSUM51
              , DECODE(OPER, 'A0337', SUM(SHIP_QTY), 0) AS WCNT51
              , DECODE(OPER, 'A0337', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R51
              , DECODE(OPER, 'A0337', SUM(PROC_TAT_QTY), 0) AS RSUM51
              , DECODE(OPER, 'A0337', SUM(SHIP_QTY), 0) AS RCNT51
              , DECODE(OPER, 'A0372', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W52
              , DECODE(OPER, 'A0372', SUM(WAIT_TAT_QTY), 0) AS WSUM52
              , DECODE(OPER, 'A0372', SUM(SHIP_QTY), 0) AS WCNT52
              , DECODE(OPER, 'A0372', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R52
              , DECODE(OPER, 'A0372', SUM(PROC_TAT_QTY), 0) AS RSUM52
              , DECODE(OPER, 'A0372', SUM(SHIP_QTY), 0) AS RCNT52
              , DECODE(OPER, 'A0395', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W53
              , DECODE(OPER, 'A0395', SUM(WAIT_TAT_QTY), 0) AS WSUM53
              , DECODE(OPER, 'A0395', SUM(SHIP_QTY), 0) AS WCNT53
              , DECODE(OPER, 'A0395', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R53
              , DECODE(OPER, 'A0395', SUM(PROC_TAT_QTY), 0) AS RSUM53
              , DECODE(OPER, 'A0395', SUM(SHIP_QTY), 0) AS RCNT53
              , DECODE(OPER, 'A0397', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W54
              , DECODE(OPER, 'A0397', SUM(WAIT_TAT_QTY), 0) AS WSUM54
              , DECODE(OPER, 'A0397', SUM(SHIP_QTY), 0) AS WCNT54
              , DECODE(OPER, 'A0397', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R54
              , DECODE(OPER, 'A0397', SUM(PROC_TAT_QTY), 0) AS RSUM54
              , DECODE(OPER, 'A0397', SUM(SHIP_QTY), 0) AS RCNT54
              , DECODE(OPER, 'A0340', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W55
              , DECODE(OPER, 'A0340', SUM(WAIT_TAT_QTY), 0) AS WSUM55
              , DECODE(OPER, 'A0340', SUM(SHIP_QTY), 0) AS WCNT55
              , DECODE(OPER, 'A0340', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R55
              , DECODE(OPER, 'A0340', SUM(PROC_TAT_QTY), 0) AS RSUM55
              , DECODE(OPER, 'A0340', SUM(SHIP_QTY), 0) AS RCNT55
              , DECODE(OPER, 'A0350', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W56
              , DECODE(OPER, 'A0350', SUM(WAIT_TAT_QTY), 0) AS WSUM56
              , DECODE(OPER, 'A0350', SUM(SHIP_QTY), 0) AS WCNT56
              , DECODE(OPER, 'A0350', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R56
              , DECODE(OPER, 'A0350', SUM(PROC_TAT_QTY), 0) AS RSUM56
              , DECODE(OPER, 'A0350', SUM(SHIP_QTY), 0) AS RCNT56
              , DECODE(OPER, 'A0370', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W57
              , DECODE(OPER, 'A0370', SUM(WAIT_TAT_QTY), 0) AS WSUM57
              , DECODE(OPER, 'A0370', SUM(SHIP_QTY), 0) AS WCNT57
              , DECODE(OPER, 'A0370', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R57
              , DECODE(OPER, 'A0370', SUM(PROC_TAT_QTY), 0) AS RSUM57
              , DECODE(OPER, 'A0370', SUM(SHIP_QTY), 0) AS RCNT57
              , DECODE(OPER, 'A0375', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W58
              , DECODE(OPER, 'A0375', SUM(WAIT_TAT_QTY), 0) AS WSUM58
              , DECODE(OPER, 'A0375', SUM(SHIP_QTY), 0) AS WCNT58
              , DECODE(OPER, 'A0375', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R58
              , DECODE(OPER, 'A0375', SUM(PROC_TAT_QTY), 0) AS RSUM58
              , DECODE(OPER, 'A0375', SUM(SHIP_QTY), 0) AS RCNT58
              , DECODE(OPER, 'A0380', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W59
              , DECODE(OPER, 'A0380', SUM(WAIT_TAT_QTY), 0) AS WSUM59
              , DECODE(OPER, 'A0380', SUM(SHIP_QTY), 0) AS WCNT59
              , DECODE(OPER, 'A0380', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R59
              , DECODE(OPER, 'A0380', SUM(PROC_TAT_QTY), 0) AS RSUM59
              , DECODE(OPER, 'A0380', SUM(SHIP_QTY), 0) AS RCNT59
              , DECODE(OPER, 'A0381', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W60
              , DECODE(OPER, 'A0381', SUM(WAIT_TAT_QTY), 0) AS WSUM60
              , DECODE(OPER, 'A0381', SUM(SHIP_QTY), 0) AS WCNT60
              , DECODE(OPER, 'A0381', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R60
              , DECODE(OPER, 'A0381', SUM(PROC_TAT_QTY), 0) AS RSUM60
              , DECODE(OPER, 'A0381', SUM(SHIP_QTY), 0) AS RCNT60
              , DECODE(OPER, 'A0382', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W61
              , DECODE(OPER, 'A0382', SUM(WAIT_TAT_QTY), 0) AS WSUM61
              , DECODE(OPER, 'A0382', SUM(SHIP_QTY), 0) AS WCNT61
              , DECODE(OPER, 'A0382', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R61
              , DECODE(OPER, 'A0382', SUM(PROC_TAT_QTY), 0) AS RSUM61
              , DECODE(OPER, 'A0382', SUM(SHIP_QTY), 0) AS RCNT61
              , DECODE(OPER, 'A0383', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W62
              , DECODE(OPER, 'A0383', SUM(WAIT_TAT_QTY), 0) AS WSUM62
              , DECODE(OPER, 'A0383', SUM(SHIP_QTY), 0) AS WCNT62
              , DECODE(OPER, 'A0383', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R62
              , DECODE(OPER, 'A0383', SUM(PROC_TAT_QTY), 0) AS RSUM62
              , DECODE(OPER, 'A0383', SUM(SHIP_QTY), 0) AS RCNT62
              , DECODE(OPER, 'A0385', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W63
              , DECODE(OPER, 'A0385', SUM(WAIT_TAT_QTY), 0) AS WSUM63
              , DECODE(OPER, 'A0385', SUM(SHIP_QTY), 0) AS WCNT63
              , DECODE(OPER, 'A0385', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R63
              , DECODE(OPER, 'A0385', SUM(PROC_TAT_QTY), 0) AS RSUM63
              , DECODE(OPER, 'A0385', SUM(SHIP_QTY), 0) AS RCNT63
              , DECODE(OPER, 'A0391', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W64
              , DECODE(OPER, 'A0391', SUM(WAIT_TAT_QTY), 0) AS WSUM64
              , DECODE(OPER, 'A0391', SUM(SHIP_QTY), 0) AS WCNT64
              , DECODE(OPER, 'A0391', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R64
              , DECODE(OPER, 'A0391', SUM(PROC_TAT_QTY), 0) AS RSUM64
              , DECODE(OPER, 'A0391', SUM(SHIP_QTY), 0) AS RCNT64
              , DECODE(OPER, 'A0399', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W65
              , DECODE(OPER, 'A0399', SUM(WAIT_TAT_QTY), 0) AS WSUM65
              , DECODE(OPER, 'A0399', SUM(SHIP_QTY), 0) AS WCNT65
              , DECODE(OPER, 'A0399', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R65
              , DECODE(OPER, 'A0399', SUM(PROC_TAT_QTY), 0) AS RSUM65
              , DECODE(OPER, 'A0399', SUM(SHIP_QTY), 0) AS RCNT65
              , DECODE(OPER, 'A0400', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W66
              , DECODE(OPER, 'A0400', SUM(WAIT_TAT_QTY), 0) AS WSUM66
              , DECODE(OPER, 'A0400', SUM(SHIP_QTY), 0) AS WCNT66
              , DECODE(OPER, 'A0400', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R66
              , DECODE(OPER, 'A0400', SUM(PROC_TAT_QTY), 0) AS RSUM66
              , DECODE(OPER, 'A0400', SUM(SHIP_QTY), 0) AS RCNT66
              , DECODE(OPER, 'A0401', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W67
              , DECODE(OPER, 'A0401', SUM(WAIT_TAT_QTY), 0) AS WSUM67
              , DECODE(OPER, 'A0401', SUM(SHIP_QTY), 0) AS WCNT67
              , DECODE(OPER, 'A0401', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R67
              , DECODE(OPER, 'A0401', SUM(PROC_TAT_QTY), 0) AS RSUM67
              , DECODE(OPER, 'A0401', SUM(SHIP_QTY), 0) AS RCNT67
              , DECODE(OPER, 'A0500', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W68
              , DECODE(OPER, 'A0500', SUM(WAIT_TAT_QTY), 0) AS WSUM68
              , DECODE(OPER, 'A0500', SUM(SHIP_QTY), 0) AS WCNT68
              , DECODE(OPER, 'A0500', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R68
              , DECODE(OPER, 'A0500', SUM(PROC_TAT_QTY), 0) AS RSUM68
              , DECODE(OPER, 'A0500', SUM(SHIP_QTY), 0) AS RCNT68
              , DECODE(OPER, 'A0530', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W69
              , DECODE(OPER, 'A0530', SUM(WAIT_TAT_QTY), 0) AS WSUM69
              , DECODE(OPER, 'A0530', SUM(SHIP_QTY), 0) AS WCNT69
              , DECODE(OPER, 'A0530', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R69
              , DECODE(OPER, 'A0530', SUM(PROC_TAT_QTY), 0) AS RSUM69
              , DECODE(OPER, 'A0530', SUM(SHIP_QTY), 0) AS RCNT69
              , DECODE(OPER, 'A0531', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W70
              , DECODE(OPER, 'A0531', SUM(WAIT_TAT_QTY), 0) AS WSUM70
              , DECODE(OPER, 'A0531', SUM(SHIP_QTY), 0) AS WCNT70
              , DECODE(OPER, 'A0531', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R70
              , DECODE(OPER, 'A0531', SUM(PROC_TAT_QTY), 0) AS RSUM70
              , DECODE(OPER, 'A0531', SUM(SHIP_QTY), 0) AS RCNT70
              , DECODE(OPER, 'A0501', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W71
              , DECODE(OPER, 'A0501', SUM(WAIT_TAT_QTY), 0) AS WSUM71
              , DECODE(OPER, 'A0501', SUM(SHIP_QTY), 0) AS WCNT71
              , DECODE(OPER, 'A0501', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R71
              , DECODE(OPER, 'A0501', SUM(PROC_TAT_QTY), 0) AS RSUM71
              , DECODE(OPER, 'A0501', SUM(SHIP_QTY), 0) AS RCNT71
              , DECODE(OPER, 'A0550', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W72
              , DECODE(OPER, 'A0550', SUM(WAIT_TAT_QTY), 0) AS WSUM72
              , DECODE(OPER, 'A0550', SUM(SHIP_QTY), 0) AS WCNT72
              , DECODE(OPER, 'A0550', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R72
              , DECODE(OPER, 'A0550', SUM(PROC_TAT_QTY), 0) AS RSUM72
              , DECODE(OPER, 'A0550', SUM(SHIP_QTY), 0) AS RCNT72
              , DECODE(OPER, 'A0600', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W73
              , DECODE(OPER, 'A0600', SUM(WAIT_TAT_QTY), 0) AS WSUM73
              , DECODE(OPER, 'A0600', SUM(SHIP_QTY), 0) AS WCNT73
              , DECODE(OPER, 'A0600', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R73
              , DECODE(OPER, 'A0600', SUM(PROC_TAT_QTY), 0) AS RSUM73
              , DECODE(OPER, 'A0600', SUM(SHIP_QTY), 0) AS RCNT73
              , DECODE(OPER, 'A0720', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W74
              , DECODE(OPER, 'A0720', SUM(WAIT_TAT_QTY), 0) AS WSUM74
              , DECODE(OPER, 'A0720', SUM(SHIP_QTY), 0) AS WCNT74
              , DECODE(OPER, 'A0720', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R74
              , DECODE(OPER, 'A0720', SUM(PROC_TAT_QTY), 0) AS RSUM74
              , DECODE(OPER, 'A0720', SUM(SHIP_QTY), 0) AS RCNT74
              , DECODE(OPER, 'A0700', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W75
              , DECODE(OPER, 'A0700', SUM(WAIT_TAT_QTY), 0) AS WSUM75
              , DECODE(OPER, 'A0700', SUM(SHIP_QTY), 0) AS WCNT75
              , DECODE(OPER, 'A0700', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R75
              , DECODE(OPER, 'A0700', SUM(PROC_TAT_QTY), 0) AS RSUM75
              , DECODE(OPER, 'A0700', SUM(SHIP_QTY), 0) AS RCNT75
              , DECODE(OPER, 'A0339', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W76
              , DECODE(OPER, 'A0339', SUM(WAIT_TAT_QTY), 0) AS WSUM76
              , DECODE(OPER, 'A0339', SUM(SHIP_QTY), 0) AS WCNT76
              , DECODE(OPER, 'A0339', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R76
              , DECODE(OPER, 'A0339', SUM(PROC_TAT_QTY), 0) AS RSUM76
              , DECODE(OPER, 'A0339', SUM(SHIP_QTY), 0) AS RCNT76
              , DECODE(OPER, 'A0541', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W77
              , DECODE(OPER, 'A0541', SUM(WAIT_TAT_QTY), 0) AS WSUM77
              , DECODE(OPER, 'A0541', SUM(SHIP_QTY), 0) AS WCNT77
              , DECODE(OPER, 'A0541', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R77
              , DECODE(OPER, 'A0541', SUM(PROC_TAT_QTY), 0) AS RSUM77
              , DECODE(OPER, 'A0541', SUM(SHIP_QTY), 0) AS RCNT77
              , DECODE(OPER, 'A0551', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W78
              , DECODE(OPER, 'A0551', SUM(WAIT_TAT_QTY), 0) AS WSUM78
              , DECODE(OPER, 'A0551', SUM(SHIP_QTY), 0) AS WCNT78
              , DECODE(OPER, 'A0551', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R78
              , DECODE(OPER, 'A0551', SUM(PROC_TAT_QTY), 0) AS RSUM78
              , DECODE(OPER, 'A0551', SUM(SHIP_QTY), 0) AS RCNT78
              , DECODE(OPER, 'A0601', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W79
              , DECODE(OPER, 'A0601', SUM(WAIT_TAT_QTY), 0) AS WSUM79
              , DECODE(OPER, 'A0601', SUM(SHIP_QTY), 0) AS WCNT79
              , DECODE(OPER, 'A0601', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R79
              , DECODE(OPER, 'A0601', SUM(PROC_TAT_QTY), 0) AS RSUM79
              , DECODE(OPER, 'A0601', SUM(SHIP_QTY), 0) AS RCNT79
              , DECODE(OPER, 'A0710', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W80
              , DECODE(OPER, 'A0710', SUM(WAIT_TAT_QTY), 0) AS WSUM80
              , DECODE(OPER, 'A0710', SUM(SHIP_QTY), 0) AS WCNT80
              , DECODE(OPER, 'A0710', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R80
              , DECODE(OPER, 'A0710', SUM(PROC_TAT_QTY), 0) AS RSUM80
              , DECODE(OPER, 'A0710', SUM(SHIP_QTY), 0) AS RCNT80
              , DECODE(OPER, 'A0800', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W81
              , DECODE(OPER, 'A0800', SUM(WAIT_TAT_QTY), 0) AS WSUM81
              , DECODE(OPER, 'A0800', SUM(SHIP_QTY), 0) AS WCNT81
              , DECODE(OPER, 'A0800', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R81
              , DECODE(OPER, 'A0800', SUM(PROC_TAT_QTY), 0) AS RSUM81
              , DECODE(OPER, 'A0800', SUM(SHIP_QTY), 0) AS RCNT81
              , DECODE(OPER, 'A0402', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W82
              , DECODE(OPER, 'A0402', SUM(WAIT_TAT_QTY), 0) AS WSUM82
              , DECODE(OPER, 'A0402', SUM(SHIP_QTY), 0) AS WCNT82
              , DECODE(OPER, 'A0402', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R82
              , DECODE(OPER, 'A0402', SUM(PROC_TAT_QTY), 0) AS RSUM82
              , DECODE(OPER, 'A0402', SUM(SHIP_QTY), 0) AS RCNT82
              , DECODE(OPER, 'A0502', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W83
              , DECODE(OPER, 'A0502', SUM(WAIT_TAT_QTY), 0) AS WSUM83
              , DECODE(OPER, 'A0502', SUM(SHIP_QTY), 0) AS WCNT83
              , DECODE(OPER, 'A0502', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R83
              , DECODE(OPER, 'A0502', SUM(PROC_TAT_QTY), 0) AS RSUM83
              , DECODE(OPER, 'A0502', SUM(SHIP_QTY), 0) AS RCNT83
              , DECODE(OPER, 'A0532', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W84
              , DECODE(OPER, 'A0532', SUM(WAIT_TAT_QTY), 0) AS WSUM84
              , DECODE(OPER, 'A0532', SUM(SHIP_QTY), 0) AS WCNT84
              , DECODE(OPER, 'A0532', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R84
              , DECODE(OPER, 'A0532', SUM(PROC_TAT_QTY), 0) AS RSUM84
              , DECODE(OPER, 'A0532', SUM(SHIP_QTY), 0) AS RCNT84
              , DECODE(OPER, 'A0801', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W85
              , DECODE(OPER, 'A0801', SUM(WAIT_TAT_QTY), 0) AS WSUM85
              , DECODE(OPER, 'A0801', SUM(SHIP_QTY), 0) AS WCNT85
              , DECODE(OPER, 'A0801', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R85
              , DECODE(OPER, 'A0801', SUM(PROC_TAT_QTY), 0) AS RSUM85
              , DECODE(OPER, 'A0801', SUM(SHIP_QTY), 0) AS RCNT85
              , DECODE(OPER, 'A0542', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W86
              , DECODE(OPER, 'A0542', SUM(WAIT_TAT_QTY), 0) AS WSUM86
              , DECODE(OPER, 'A0542', SUM(SHIP_QTY), 0) AS WCNT86
              , DECODE(OPER, 'A0542', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R86
              , DECODE(OPER, 'A0542', SUM(PROC_TAT_QTY), 0) AS RSUM86
              , DECODE(OPER, 'A0542', SUM(SHIP_QTY), 0) AS RCNT86
              , DECODE(OPER, 'A0552', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W87
              , DECODE(OPER, 'A0552', SUM(WAIT_TAT_QTY), 0) AS WSUM87
              , DECODE(OPER, 'A0552', SUM(SHIP_QTY), 0) AS WCNT87
              , DECODE(OPER, 'A0552', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R87
              , DECODE(OPER, 'A0552', SUM(PROC_TAT_QTY), 0) AS RSUM87
              , DECODE(OPER, 'A0552', SUM(SHIP_QTY), 0) AS RCNT87
              , DECODE(OPER, 'A0602', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W88
              , DECODE(OPER, 'A0602', SUM(WAIT_TAT_QTY), 0) AS WSUM88
              , DECODE(OPER, 'A0602', SUM(SHIP_QTY), 0) AS WCNT88
              , DECODE(OPER, 'A0602', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R88
              , DECODE(OPER, 'A0602', SUM(PROC_TAT_QTY), 0) AS RSUM88
              , DECODE(OPER, 'A0602', SUM(SHIP_QTY), 0) AS RCNT88
              , DECODE(OPER, 'A0802', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W89
              , DECODE(OPER, 'A0802', SUM(WAIT_TAT_QTY), 0) AS WSUM89
              , DECODE(OPER, 'A0802', SUM(SHIP_QTY), 0) AS WCNT89
              , DECODE(OPER, 'A0802', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R89
              , DECODE(OPER, 'A0802', SUM(PROC_TAT_QTY), 0) AS RSUM89
              , DECODE(OPER, 'A0802', SUM(SHIP_QTY), 0) AS RCNT89
              , DECODE(OPER, 'A0403', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W90
              , DECODE(OPER, 'A0403', SUM(WAIT_TAT_QTY), 0) AS WSUM90
              , DECODE(OPER, 'A0403', SUM(SHIP_QTY), 0) AS WCNT90
              , DECODE(OPER, 'A0403', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R90
              , DECODE(OPER, 'A0403', SUM(PROC_TAT_QTY), 0) AS RSUM90
              , DECODE(OPER, 'A0403', SUM(SHIP_QTY), 0) AS RCNT90
              , DECODE(OPER, 'A0503', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W91
              , DECODE(OPER, 'A0503', SUM(WAIT_TAT_QTY), 0) AS WSUM91
              , DECODE(OPER, 'A0503', SUM(SHIP_QTY), 0) AS WCNT91
              , DECODE(OPER, 'A0503', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R91
              , DECODE(OPER, 'A0503', SUM(PROC_TAT_QTY), 0) AS RSUM91
              , DECODE(OPER, 'A0503', SUM(SHIP_QTY), 0) AS RCNT91
              , DECODE(OPER, 'A0533', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W92
              , DECODE(OPER, 'A0533', SUM(WAIT_TAT_QTY), 0) AS WSUM92
              , DECODE(OPER, 'A0533', SUM(SHIP_QTY), 0) AS WCNT92
              , DECODE(OPER, 'A0533', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R92
              , DECODE(OPER, 'A0533', SUM(PROC_TAT_QTY), 0) AS RSUM92
              , DECODE(OPER, 'A0533', SUM(SHIP_QTY), 0) AS RCNT92
              , DECODE(OPER, 'A0543', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W93
              , DECODE(OPER, 'A0543', SUM(WAIT_TAT_QTY), 0) AS WSUM93
              , DECODE(OPER, 'A0543', SUM(SHIP_QTY), 0) AS WCNT93
              , DECODE(OPER, 'A0543', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R93
              , DECODE(OPER, 'A0543', SUM(PROC_TAT_QTY), 0) AS RSUM93
              , DECODE(OPER, 'A0543', SUM(SHIP_QTY), 0) AS RCNT93
              , DECODE(OPER, 'A0553', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W94
              , DECODE(OPER, 'A0553', SUM(WAIT_TAT_QTY), 0) AS WSUM94
              , DECODE(OPER, 'A0553', SUM(SHIP_QTY), 0) AS WCNT94
              , DECODE(OPER, 'A0553', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R94
              , DECODE(OPER, 'A0553', SUM(PROC_TAT_QTY), 0) AS RSUM94
              , DECODE(OPER, 'A0553', SUM(SHIP_QTY), 0) AS RCNT94
              , DECODE(OPER, 'A0603', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W95
              , DECODE(OPER, 'A0603', SUM(WAIT_TAT_QTY), 0) AS WSUM95
              , DECODE(OPER, 'A0603', SUM(SHIP_QTY), 0) AS WCNT95
              , DECODE(OPER, 'A0603', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R95
              , DECODE(OPER, 'A0603', SUM(PROC_TAT_QTY), 0) AS RSUM95
              , DECODE(OPER, 'A0603', SUM(SHIP_QTY), 0) AS RCNT95
              , DECODE(OPER, 'A0712', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W96
              , DECODE(OPER, 'A0712', SUM(WAIT_TAT_QTY), 0) AS WSUM96
              , DECODE(OPER, 'A0712', SUM(SHIP_QTY), 0) AS WCNT96
              , DECODE(OPER, 'A0712', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R96
              , DECODE(OPER, 'A0712', SUM(PROC_TAT_QTY), 0) AS RSUM96
              , DECODE(OPER, 'A0712', SUM(SHIP_QTY), 0) AS RCNT96
              , DECODE(OPER, 'A0713', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W97
              , DECODE(OPER, 'A0713', SUM(WAIT_TAT_QTY), 0) AS WSUM97
              , DECODE(OPER, 'A0713', SUM(SHIP_QTY), 0) AS WCNT97
              , DECODE(OPER, 'A0713', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R97
              , DECODE(OPER, 'A0713', SUM(PROC_TAT_QTY), 0) AS RSUM97
              , DECODE(OPER, 'A0713', SUM(SHIP_QTY), 0) AS RCNT97
              , DECODE(OPER, 'A0803', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W98
              , DECODE(OPER, 'A0803', SUM(WAIT_TAT_QTY), 0) AS WSUM98
              , DECODE(OPER, 'A0803', SUM(SHIP_QTY), 0) AS WCNT98
              , DECODE(OPER, 'A0803', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R98
              , DECODE(OPER, 'A0803', SUM(PROC_TAT_QTY), 0) AS RSUM98
              , DECODE(OPER, 'A0803', SUM(SHIP_QTY), 0) AS RCNT98
              , DECODE(OPER, 'A0404', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W99
              , DECODE(OPER, 'A0404', SUM(WAIT_TAT_QTY), 0) AS WSUM99
              , DECODE(OPER, 'A0404', SUM(SHIP_QTY), 0) AS WCNT99
              , DECODE(OPER, 'A0404', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R99
              , DECODE(OPER, 'A0404', SUM(PROC_TAT_QTY), 0) AS RSUM99
              , DECODE(OPER, 'A0404', SUM(SHIP_QTY), 0) AS RCNT99
              , DECODE(OPER, 'A0504', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W100
              , DECODE(OPER, 'A0504', SUM(WAIT_TAT_QTY), 0) AS WSUM100
              , DECODE(OPER, 'A0504', SUM(SHIP_QTY), 0) AS WCNT100
              , DECODE(OPER, 'A0504', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R100
              , DECODE(OPER, 'A0504', SUM(PROC_TAT_QTY), 0) AS RSUM100
              , DECODE(OPER, 'A0504', SUM(SHIP_QTY), 0) AS RCNT100
              , DECODE(OPER, 'A0534', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W101
              , DECODE(OPER, 'A0534', SUM(WAIT_TAT_QTY), 0) AS WSUM101
              , DECODE(OPER, 'A0534', SUM(SHIP_QTY), 0) AS WCNT101
              , DECODE(OPER, 'A0534', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R101
              , DECODE(OPER, 'A0534', SUM(PROC_TAT_QTY), 0) AS RSUM101
              , DECODE(OPER, 'A0534', SUM(SHIP_QTY), 0) AS RCNT101
              , DECODE(OPER, 'A0544', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W102
              , DECODE(OPER, 'A0544', SUM(WAIT_TAT_QTY), 0) AS WSUM102
              , DECODE(OPER, 'A0544', SUM(SHIP_QTY), 0) AS WCNT102
              , DECODE(OPER, 'A0544', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R102
              , DECODE(OPER, 'A0544', SUM(PROC_TAT_QTY), 0) AS RSUM102
              , DECODE(OPER, 'A0544', SUM(SHIP_QTY), 0) AS RCNT102
              , DECODE(OPER, 'A0554', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W103
              , DECODE(OPER, 'A0554', SUM(WAIT_TAT_QTY), 0) AS WSUM103
              , DECODE(OPER, 'A0554', SUM(SHIP_QTY), 0) AS WCNT103
              , DECODE(OPER, 'A0554', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R103
              , DECODE(OPER, 'A0554', SUM(PROC_TAT_QTY), 0) AS RSUM103
              , DECODE(OPER, 'A0554', SUM(SHIP_QTY), 0) AS RCNT103
              , DECODE(OPER, 'A0604', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W104
              , DECODE(OPER, 'A0604', SUM(WAIT_TAT_QTY), 0) AS WSUM104
              , DECODE(OPER, 'A0604', SUM(SHIP_QTY), 0) AS WCNT104
              , DECODE(OPER, 'A0604', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R104
              , DECODE(OPER, 'A0604', SUM(PROC_TAT_QTY), 0) AS RSUM104
              , DECODE(OPER, 'A0604', SUM(SHIP_QTY), 0) AS RCNT104
              , DECODE(OPER, 'A0714', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W105
              , DECODE(OPER, 'A0714', SUM(WAIT_TAT_QTY), 0) AS WSUM105
              , DECODE(OPER, 'A0714', SUM(SHIP_QTY), 0) AS WCNT105
              , DECODE(OPER, 'A0714', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R105
              , DECODE(OPER, 'A0714', SUM(PROC_TAT_QTY), 0) AS RSUM105
              , DECODE(OPER, 'A0714', SUM(SHIP_QTY), 0) AS RCNT105
              , DECODE(OPER, 'A0804', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W106
              , DECODE(OPER, 'A0804', SUM(WAIT_TAT_QTY), 0) AS WSUM106
              , DECODE(OPER, 'A0804', SUM(SHIP_QTY), 0) AS WCNT106
              , DECODE(OPER, 'A0804', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R106
              , DECODE(OPER, 'A0804', SUM(PROC_TAT_QTY), 0) AS RSUM106
              , DECODE(OPER, 'A0804', SUM(SHIP_QTY), 0) AS RCNT106
              , DECODE(OPER, 'A0405', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W107
              , DECODE(OPER, 'A0405', SUM(WAIT_TAT_QTY), 0) AS WSUM107
              , DECODE(OPER, 'A0405', SUM(SHIP_QTY), 0) AS WCNT107
              , DECODE(OPER, 'A0405', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R107
              , DECODE(OPER, 'A0405', SUM(PROC_TAT_QTY), 0) AS RSUM107
              , DECODE(OPER, 'A0405', SUM(SHIP_QTY), 0) AS RCNT107
              , DECODE(OPER, 'A0505', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W108
              , DECODE(OPER, 'A0505', SUM(WAIT_TAT_QTY), 0) AS WSUM108
              , DECODE(OPER, 'A0505', SUM(SHIP_QTY), 0) AS WCNT108
              , DECODE(OPER, 'A0505', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R108
              , DECODE(OPER, 'A0505', SUM(PROC_TAT_QTY), 0) AS RSUM108
              , DECODE(OPER, 'A0505', SUM(SHIP_QTY), 0) AS RCNT108
              , DECODE(OPER, 'A0535', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W109
              , DECODE(OPER, 'A0535', SUM(WAIT_TAT_QTY), 0) AS WSUM109
              , DECODE(OPER, 'A0535', SUM(SHIP_QTY), 0) AS WCNT109
              , DECODE(OPER, 'A0535', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R109
              , DECODE(OPER, 'A0535', SUM(PROC_TAT_QTY), 0) AS RSUM109
              , DECODE(OPER, 'A0535', SUM(SHIP_QTY), 0) AS RCNT109
              , DECODE(OPER, 'A0545', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W110
              , DECODE(OPER, 'A0545', SUM(WAIT_TAT_QTY), 0) AS WSUM110
              , DECODE(OPER, 'A0545', SUM(SHIP_QTY), 0) AS WCNT110
              , DECODE(OPER, 'A0545', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R110
              , DECODE(OPER, 'A0545', SUM(PROC_TAT_QTY), 0) AS RSUM110
              , DECODE(OPER, 'A0545', SUM(SHIP_QTY), 0) AS RCNT110
              , DECODE(OPER, 'A0555', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W111
              , DECODE(OPER, 'A0555', SUM(WAIT_TAT_QTY), 0) AS WSUM111
              , DECODE(OPER, 'A0555', SUM(SHIP_QTY), 0) AS WCNT111
              , DECODE(OPER, 'A0555', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R111
              , DECODE(OPER, 'A0555', SUM(PROC_TAT_QTY), 0) AS RSUM111
              , DECODE(OPER, 'A0555', SUM(SHIP_QTY), 0) AS RCNT111
              , DECODE(OPER, 'A0605', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W112
              , DECODE(OPER, 'A0605', SUM(WAIT_TAT_QTY), 0) AS WSUM112
              , DECODE(OPER, 'A0605', SUM(SHIP_QTY), 0) AS WCNT112
              , DECODE(OPER, 'A0605', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R112
              , DECODE(OPER, 'A0605', SUM(PROC_TAT_QTY), 0) AS RSUM112
              , DECODE(OPER, 'A0605', SUM(SHIP_QTY), 0) AS RCNT112
              , DECODE(OPER, 'A0715', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W113
              , DECODE(OPER, 'A0715', SUM(WAIT_TAT_QTY), 0) AS WSUM113
              , DECODE(OPER, 'A0715', SUM(SHIP_QTY), 0) AS WCNT113
              , DECODE(OPER, 'A0715', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R113
              , DECODE(OPER, 'A0715', SUM(PROC_TAT_QTY), 0) AS RSUM113
              , DECODE(OPER, 'A0715', SUM(SHIP_QTY), 0) AS RCNT113
              , DECODE(OPER, 'A0805', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W114
              , DECODE(OPER, 'A0805', SUM(WAIT_TAT_QTY), 0) AS WSUM114
              , DECODE(OPER, 'A0805', SUM(SHIP_QTY), 0) AS WCNT114
              , DECODE(OPER, 'A0805', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R114
              , DECODE(OPER, 'A0805', SUM(PROC_TAT_QTY), 0) AS RSUM114
              , DECODE(OPER, 'A0805', SUM(SHIP_QTY), 0) AS RCNT114
              , DECODE(OPER, 'A0406', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W115
              , DECODE(OPER, 'A0406', SUM(WAIT_TAT_QTY), 0) AS WSUM115
              , DECODE(OPER, 'A0406', SUM(SHIP_QTY), 0) AS WCNT115
              , DECODE(OPER, 'A0406', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R115
              , DECODE(OPER, 'A0406', SUM(PROC_TAT_QTY), 0) AS RSUM115
              , DECODE(OPER, 'A0406', SUM(SHIP_QTY), 0) AS RCNT115
              , DECODE(OPER, 'A0506', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W116
              , DECODE(OPER, 'A0506', SUM(WAIT_TAT_QTY), 0) AS WSUM116
              , DECODE(OPER, 'A0506', SUM(SHIP_QTY), 0) AS WCNT116
              , DECODE(OPER, 'A0506', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R116
              , DECODE(OPER, 'A0506', SUM(PROC_TAT_QTY), 0) AS RSUM116
              , DECODE(OPER, 'A0506', SUM(SHIP_QTY), 0) AS RCNT116
              , DECODE(OPER, 'A0536', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W117
              , DECODE(OPER, 'A0536', SUM(WAIT_TAT_QTY), 0) AS WSUM117
              , DECODE(OPER, 'A0536', SUM(SHIP_QTY), 0) AS WCNT117
              , DECODE(OPER, 'A0536', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R117
              , DECODE(OPER, 'A0536', SUM(PROC_TAT_QTY), 0) AS RSUM117
              , DECODE(OPER, 'A0536', SUM(SHIP_QTY), 0) AS RCNT117
              , DECODE(OPER, 'A0546', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W118
              , DECODE(OPER, 'A0546', SUM(WAIT_TAT_QTY), 0) AS WSUM118
              , DECODE(OPER, 'A0546', SUM(SHIP_QTY), 0) AS WCNT118
              , DECODE(OPER, 'A0546', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R118
              , DECODE(OPER, 'A0546', SUM(PROC_TAT_QTY), 0) AS RSUM118
              , DECODE(OPER, 'A0546', SUM(SHIP_QTY), 0) AS RCNT118
              , DECODE(OPER, 'A0556', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W119
              , DECODE(OPER, 'A0556', SUM(WAIT_TAT_QTY), 0) AS WSUM119
              , DECODE(OPER, 'A0556', SUM(SHIP_QTY), 0) AS WCNT119
              , DECODE(OPER, 'A0556', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R119
              , DECODE(OPER, 'A0556', SUM(PROC_TAT_QTY), 0) AS RSUM119
              , DECODE(OPER, 'A0556', SUM(SHIP_QTY), 0) AS RCNT119
              , DECODE(OPER, 'A0606', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W120
              , DECODE(OPER, 'A0606', SUM(WAIT_TAT_QTY), 0) AS WSUM120
              , DECODE(OPER, 'A0606', SUM(SHIP_QTY), 0) AS WCNT120
              , DECODE(OPER, 'A0606', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R120
              , DECODE(OPER, 'A0606', SUM(PROC_TAT_QTY), 0) AS RSUM120
              , DECODE(OPER, 'A0606', SUM(SHIP_QTY), 0) AS RCNT120
              , DECODE(OPER, 'A0806', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W121
              , DECODE(OPER, 'A0806', SUM(WAIT_TAT_QTY), 0) AS WSUM121
              , DECODE(OPER, 'A0806', SUM(SHIP_QTY), 0) AS WCNT121
              , DECODE(OPER, 'A0806', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R121
              , DECODE(OPER, 'A0806', SUM(PROC_TAT_QTY), 0) AS RSUM121
              , DECODE(OPER, 'A0806', SUM(SHIP_QTY), 0) AS RCNT121
              , DECODE(OPER, 'A0407', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W122
              , DECODE(OPER, 'A0407', SUM(WAIT_TAT_QTY), 0) AS WSUM122
              , DECODE(OPER, 'A0407', SUM(SHIP_QTY), 0) AS WCNT122
              , DECODE(OPER, 'A0407', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R122
              , DECODE(OPER, 'A0407', SUM(PROC_TAT_QTY), 0) AS RSUM122
              , DECODE(OPER, 'A0407', SUM(SHIP_QTY), 0) AS RCNT122
              , DECODE(OPER, 'A0507', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W123
              , DECODE(OPER, 'A0507', SUM(WAIT_TAT_QTY), 0) AS WSUM123
              , DECODE(OPER, 'A0507', SUM(SHIP_QTY), 0) AS WCNT123
              , DECODE(OPER, 'A0507', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R123
              , DECODE(OPER, 'A0507', SUM(PROC_TAT_QTY), 0) AS RSUM123
              , DECODE(OPER, 'A0507', SUM(SHIP_QTY), 0) AS RCNT123
              , DECODE(OPER, 'A0537', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W124
              , DECODE(OPER, 'A0537', SUM(WAIT_TAT_QTY), 0) AS WSUM124
              , DECODE(OPER, 'A0537', SUM(SHIP_QTY), 0) AS WCNT124
              , DECODE(OPER, 'A0537', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R124
              , DECODE(OPER, 'A0537', SUM(PROC_TAT_QTY), 0) AS RSUM124
              , DECODE(OPER, 'A0537', SUM(SHIP_QTY), 0) AS RCNT124
              , DECODE(OPER, 'A0557', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W125
              , DECODE(OPER, 'A0557', SUM(WAIT_TAT_QTY), 0) AS WSUM125
              , DECODE(OPER, 'A0557', SUM(SHIP_QTY), 0) AS WCNT125
              , DECODE(OPER, 'A0557', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R125
              , DECODE(OPER, 'A0557', SUM(PROC_TAT_QTY), 0) AS RSUM125
              , DECODE(OPER, 'A0557', SUM(SHIP_QTY), 0) AS RCNT125
              , DECODE(OPER, 'A0607', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W126
              , DECODE(OPER, 'A0607', SUM(WAIT_TAT_QTY), 0) AS WSUM126
              , DECODE(OPER, 'A0607', SUM(SHIP_QTY), 0) AS WCNT126
              , DECODE(OPER, 'A0607', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R126
              , DECODE(OPER, 'A0607', SUM(PROC_TAT_QTY), 0) AS RSUM126
              , DECODE(OPER, 'A0607', SUM(SHIP_QTY), 0) AS RCNT126
              , DECODE(OPER, 'A0717', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W127
              , DECODE(OPER, 'A0717', SUM(WAIT_TAT_QTY), 0) AS WSUM127
              , DECODE(OPER, 'A0717', SUM(SHIP_QTY), 0) AS WCNT127
              , DECODE(OPER, 'A0717', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R127
              , DECODE(OPER, 'A0717', SUM(PROC_TAT_QTY), 0) AS RSUM127
              , DECODE(OPER, 'A0717', SUM(SHIP_QTY), 0) AS RCNT127
              , DECODE(OPER, 'A0807', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W128
              , DECODE(OPER, 'A0807', SUM(WAIT_TAT_QTY), 0) AS WSUM128
              , DECODE(OPER, 'A0807', SUM(SHIP_QTY), 0) AS WCNT128
              , DECODE(OPER, 'A0807', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R128
              , DECODE(OPER, 'A0807', SUM(PROC_TAT_QTY), 0) AS RSUM128
              , DECODE(OPER, 'A0807', SUM(SHIP_QTY), 0) AS RCNT128
              , DECODE(OPER, 'A0408', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W129
              , DECODE(OPER, 'A0408', SUM(WAIT_TAT_QTY), 0) AS WSUM129
              , DECODE(OPER, 'A0408', SUM(SHIP_QTY), 0) AS WCNT129
              , DECODE(OPER, 'A0408', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R129
              , DECODE(OPER, 'A0408', SUM(PROC_TAT_QTY), 0) AS RSUM129
              , DECODE(OPER, 'A0408', SUM(SHIP_QTY), 0) AS RCNT129
              , DECODE(OPER, 'A0538', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W130
              , DECODE(OPER, 'A0538', SUM(WAIT_TAT_QTY), 0) AS WSUM130
              , DECODE(OPER, 'A0538', SUM(SHIP_QTY), 0) AS WCNT130
              , DECODE(OPER, 'A0538', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R130
              , DECODE(OPER, 'A0538', SUM(PROC_TAT_QTY), 0) AS RSUM130
              , DECODE(OPER, 'A0538', SUM(SHIP_QTY), 0) AS RCNT130
              , DECODE(OPER, 'A0558', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W131
              , DECODE(OPER, 'A0558', SUM(WAIT_TAT_QTY), 0) AS WSUM131
              , DECODE(OPER, 'A0558', SUM(SHIP_QTY), 0) AS WCNT131
              , DECODE(OPER, 'A0558', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R131
              , DECODE(OPER, 'A0558', SUM(PROC_TAT_QTY), 0) AS RSUM131
              , DECODE(OPER, 'A0558', SUM(SHIP_QTY), 0) AS RCNT131
              , DECODE(OPER, 'A0608', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W132
              , DECODE(OPER, 'A0608', SUM(WAIT_TAT_QTY), 0) AS WSUM132
              , DECODE(OPER, 'A0608', SUM(SHIP_QTY), 0) AS WCNT132
              , DECODE(OPER, 'A0608', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R132
              , DECODE(OPER, 'A0608', SUM(PROC_TAT_QTY), 0) AS RSUM132
              , DECODE(OPER, 'A0608', SUM(SHIP_QTY), 0) AS RCNT132
              , DECODE(OPER, 'A0808', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W133
              , DECODE(OPER, 'A0808', SUM(WAIT_TAT_QTY), 0) AS WSUM133
              , DECODE(OPER, 'A0808', SUM(SHIP_QTY), 0) AS WCNT133
              , DECODE(OPER, 'A0808', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R133
              , DECODE(OPER, 'A0808', SUM(PROC_TAT_QTY), 0) AS RSUM133
              , DECODE(OPER, 'A0808', SUM(SHIP_QTY), 0) AS RCNT133
              , DECODE(OPER, 'A0409', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W134
              , DECODE(OPER, 'A0409', SUM(WAIT_TAT_QTY), 0) AS WSUM134
              , DECODE(OPER, 'A0409', SUM(SHIP_QTY), 0) AS WCNT134
              , DECODE(OPER, 'A0409', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R134
              , DECODE(OPER, 'A0409', SUM(PROC_TAT_QTY), 0) AS RSUM134
              , DECODE(OPER, 'A0409', SUM(SHIP_QTY), 0) AS RCNT134
              , DECODE(OPER, 'A0509', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W135
              , DECODE(OPER, 'A0509', SUM(WAIT_TAT_QTY), 0) AS WSUM135
              , DECODE(OPER, 'A0509', SUM(SHIP_QTY), 0) AS WCNT135
              , DECODE(OPER, 'A0509', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R135
              , DECODE(OPER, 'A0509', SUM(PROC_TAT_QTY), 0) AS RSUM135
              , DECODE(OPER, 'A0509', SUM(SHIP_QTY), 0) AS RCNT135
              , DECODE(OPER, 'A0539', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W136
              , DECODE(OPER, 'A0539', SUM(WAIT_TAT_QTY), 0) AS WSUM136
              , DECODE(OPER, 'A0539', SUM(SHIP_QTY), 0) AS WCNT136
              , DECODE(OPER, 'A0539', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R136
              , DECODE(OPER, 'A0539', SUM(PROC_TAT_QTY), 0) AS RSUM136
              , DECODE(OPER, 'A0539', SUM(SHIP_QTY), 0) AS RCNT136
              , DECODE(OPER, 'A0559', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W137
              , DECODE(OPER, 'A0559', SUM(WAIT_TAT_QTY), 0) AS WSUM137
              , DECODE(OPER, 'A0559', SUM(SHIP_QTY), 0) AS WCNT137
              , DECODE(OPER, 'A0559', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R137
              , DECODE(OPER, 'A0559', SUM(PROC_TAT_QTY), 0) AS RSUM137
              , DECODE(OPER, 'A0559', SUM(SHIP_QTY), 0) AS RCNT137
              , DECODE(OPER, 'A0609', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W138
              , DECODE(OPER, 'A0609', SUM(WAIT_TAT_QTY), 0) AS WSUM138
              , DECODE(OPER, 'A0609', SUM(SHIP_QTY), 0) AS WCNT138
              , DECODE(OPER, 'A0609', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R138
              , DECODE(OPER, 'A0609', SUM(PROC_TAT_QTY), 0) AS RSUM138
              , DECODE(OPER, 'A0609', SUM(SHIP_QTY), 0) AS RCNT138
              , DECODE(OPER, 'A0809', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W139
              , DECODE(OPER, 'A0809', SUM(WAIT_TAT_QTY), 0) AS WSUM139
              , DECODE(OPER, 'A0809', SUM(SHIP_QTY), 0) AS WCNT139
              , DECODE(OPER, 'A0809', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R139
              , DECODE(OPER, 'A0809', SUM(PROC_TAT_QTY), 0) AS RSUM139
              , DECODE(OPER, 'A0809', SUM(SHIP_QTY), 0) AS RCNT139
              , DECODE(OPER, 'A080A', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W140
              , DECODE(OPER, 'A080A', SUM(WAIT_TAT_QTY), 0) AS WSUM140
              , DECODE(OPER, 'A080A', SUM(SHIP_QTY), 0) AS WCNT140
              , DECODE(OPER, 'A080A', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R140
              , DECODE(OPER, 'A080A', SUM(PROC_TAT_QTY), 0) AS RSUM140
              , DECODE(OPER, 'A080A', SUM(SHIP_QTY), 0) AS RCNT140
              , DECODE(OPER, 'A0900', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W141
              , DECODE(OPER, 'A0900', SUM(WAIT_TAT_QTY), 0) AS WSUM141
              , DECODE(OPER, 'A0900', SUM(SHIP_QTY), 0) AS WCNT141
              , DECODE(OPER, 'A0900', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R141
              , DECODE(OPER, 'A0900', SUM(PROC_TAT_QTY), 0) AS RSUM141
              , DECODE(OPER, 'A0900', SUM(SHIP_QTY), 0) AS RCNT141
              , DECODE(OPER, 'A0910', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W142
              , DECODE(OPER, 'A0910', SUM(WAIT_TAT_QTY), 0) AS WSUM142
              , DECODE(OPER, 'A0910', SUM(SHIP_QTY), 0) AS WCNT142
              , DECODE(OPER, 'A0910', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R142
              , DECODE(OPER, 'A0910', SUM(PROC_TAT_QTY), 0) AS RSUM142
              , DECODE(OPER, 'A0910', SUM(SHIP_QTY), 0) AS RCNT142
              , DECODE(OPER, 'A0920', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W143
              , DECODE(OPER, 'A0920', SUM(WAIT_TAT_QTY), 0) AS WSUM143
              , DECODE(OPER, 'A0920', SUM(SHIP_QTY), 0) AS WCNT143
              , DECODE(OPER, 'A0920', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R143
              , DECODE(OPER, 'A0920', SUM(PROC_TAT_QTY), 0) AS RSUM143
              , DECODE(OPER, 'A0920', SUM(SHIP_QTY), 0) AS RCNT143
              , DECODE(OPER, 'A0930', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W144
              , DECODE(OPER, 'A0930', SUM(WAIT_TAT_QTY), 0) AS WSUM144
              , DECODE(OPER, 'A0930', SUM(SHIP_QTY), 0) AS WCNT144
              , DECODE(OPER, 'A0930', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R144
              , DECODE(OPER, 'A0930', SUM(PROC_TAT_QTY), 0) AS RSUM144
              , DECODE(OPER, 'A0930', SUM(SHIP_QTY), 0) AS RCNT144
              , DECODE(OPER, 'A0935', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W145
              , DECODE(OPER, 'A0935', SUM(WAIT_TAT_QTY), 0) AS WSUM145
              , DECODE(OPER, 'A0935', SUM(SHIP_QTY), 0) AS WCNT145
              , DECODE(OPER, 'A0935', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R145
              , DECODE(OPER, 'A0935', SUM(PROC_TAT_QTY), 0) AS RSUM145
              , DECODE(OPER, 'A0935', SUM(SHIP_QTY), 0) AS RCNT145
              , DECODE(OPER, 'A040A', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W146
              , DECODE(OPER, 'A040A', SUM(WAIT_TAT_QTY), 0) AS WSUM146
              , DECODE(OPER, 'A040A', SUM(SHIP_QTY), 0) AS WCNT146
              , DECODE(OPER, 'A040A', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R146
              , DECODE(OPER, 'A040A', SUM(PROC_TAT_QTY), 0) AS RSUM146
              , DECODE(OPER, 'A040A', SUM(SHIP_QTY), 0) AS RCNT146
              , DECODE(OPER, 'A0950', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W147
              , DECODE(OPER, 'A0950', SUM(WAIT_TAT_QTY), 0) AS WSUM147
              , DECODE(OPER, 'A0950', SUM(SHIP_QTY), 0) AS WCNT147
              , DECODE(OPER, 'A0950', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R147
              , DECODE(OPER, 'A0950', SUM(PROC_TAT_QTY), 0) AS RSUM147
              , DECODE(OPER, 'A0950', SUM(SHIP_QTY), 0) AS RCNT147
              , DECODE(OPER, 'A053A', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W148
              , DECODE(OPER, 'A053A', SUM(WAIT_TAT_QTY), 0) AS WSUM148
              , DECODE(OPER, 'A053A', SUM(SHIP_QTY), 0) AS WCNT148
              , DECODE(OPER, 'A053A', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R148
              , DECODE(OPER, 'A053A', SUM(PROC_TAT_QTY), 0) AS RSUM148
              , DECODE(OPER, 'A053A', SUM(SHIP_QTY), 0) AS RCNT148
              , DECODE(OPER, 'A0940', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W149
              , DECODE(OPER, 'A0940', SUM(WAIT_TAT_QTY), 0) AS WSUM149
              , DECODE(OPER, 'A0940', SUM(SHIP_QTY), 0) AS WCNT149
              , DECODE(OPER, 'A0940', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R149
              , DECODE(OPER, 'A0940', SUM(PROC_TAT_QTY), 0) AS RSUM149
              , DECODE(OPER, 'A0940', SUM(SHIP_QTY), 0) AS RCNT149
              , DECODE(OPER, 'A0980', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W150
              , DECODE(OPER, 'A0980', SUM(WAIT_TAT_QTY), 0) AS WSUM150
              , DECODE(OPER, 'A0980', SUM(SHIP_QTY), 0) AS WCNT150
              , DECODE(OPER, 'A0980', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R150
              , DECODE(OPER, 'A0980', SUM(PROC_TAT_QTY), 0) AS RSUM150
              , DECODE(OPER, 'A0980', SUM(SHIP_QTY), 0) AS RCNT150
              , DECODE(OPER, 'A1000', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W151
              , DECODE(OPER, 'A1000', SUM(WAIT_TAT_QTY), 0) AS WSUM151
              , DECODE(OPER, 'A1000', SUM(SHIP_QTY), 0) AS WCNT151
              , DECODE(OPER, 'A1000', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R151
              , DECODE(OPER, 'A1000', SUM(PROC_TAT_QTY), 0) AS RSUM151
              , DECODE(OPER, 'A1000', SUM(SHIP_QTY), 0) AS RCNT151
              , DECODE(OPER, 'A055A', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W152
              , DECODE(OPER, 'A055A', SUM(WAIT_TAT_QTY), 0) AS WSUM152
              , DECODE(OPER, 'A055A', SUM(SHIP_QTY), 0) AS WCNT152
              , DECODE(OPER, 'A055A', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R152
              , DECODE(OPER, 'A055A', SUM(PROC_TAT_QTY), 0) AS RSUM152
              , DECODE(OPER, 'A055A', SUM(SHIP_QTY), 0) AS RCNT152
              , DECODE(OPER, 'A060A', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W153
              , DECODE(OPER, 'A060A', SUM(WAIT_TAT_QTY), 0) AS WSUM153
              , DECODE(OPER, 'A060A', SUM(SHIP_QTY), 0) AS WCNT153
              , DECODE(OPER, 'A060A', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R153
              , DECODE(OPER, 'A060A', SUM(PROC_TAT_QTY), 0) AS RSUM153
              , DECODE(OPER, 'A060A', SUM(SHIP_QTY), 0) AS RCNT153
              , DECODE(OPER, 'A1020', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W154
              , DECODE(OPER, 'A1020', SUM(WAIT_TAT_QTY), 0) AS WSUM154
              , DECODE(OPER, 'A1020', SUM(SHIP_QTY), 0) AS WCNT154
              , DECODE(OPER, 'A1020', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R154
              , DECODE(OPER, 'A1020', SUM(PROC_TAT_QTY), 0) AS RSUM154
              , DECODE(OPER, 'A1020', SUM(SHIP_QTY), 0) AS RCNT154
              , DECODE(OPER, 'A1100', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W155
              , DECODE(OPER, 'A1100', SUM(WAIT_TAT_QTY), 0) AS WSUM155
              , DECODE(OPER, 'A1100', SUM(SHIP_QTY), 0) AS WCNT155
              , DECODE(OPER, 'A1100', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R155
              , DECODE(OPER, 'A1100', SUM(PROC_TAT_QTY), 0) AS RSUM155
              , DECODE(OPER, 'A1100', SUM(SHIP_QTY), 0) AS RCNT155
              , DECODE(OPER, 'A1140', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W156
              , DECODE(OPER, 'A1140', SUM(WAIT_TAT_QTY), 0) AS WSUM156
              , DECODE(OPER, 'A1140', SUM(SHIP_QTY), 0) AS WCNT156
              , DECODE(OPER, 'A1140', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R156
              , DECODE(OPER, 'A1140', SUM(PROC_TAT_QTY), 0) AS RSUM156
              , DECODE(OPER, 'A1140', SUM(SHIP_QTY), 0) AS RCNT156
              , DECODE(OPER, 'A1150', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W157
              , DECODE(OPER, 'A1150', SUM(WAIT_TAT_QTY), 0) AS WSUM157
              , DECODE(OPER, 'A1150', SUM(SHIP_QTY), 0) AS WCNT157
              , DECODE(OPER, 'A1150', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R157
              , DECODE(OPER, 'A1150', SUM(PROC_TAT_QTY), 0) AS RSUM157
              , DECODE(OPER, 'A1150', SUM(SHIP_QTY), 0) AS RCNT157
              , DECODE(OPER, 'A1650', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W158
              , DECODE(OPER, 'A1650', SUM(WAIT_TAT_QTY), 0) AS WSUM158
              , DECODE(OPER, 'A1650', SUM(SHIP_QTY), 0) AS WCNT158
              , DECODE(OPER, 'A1650', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R158
              , DECODE(OPER, 'A1650', SUM(PROC_TAT_QTY), 0) AS RSUM158
              , DECODE(OPER, 'A1650', SUM(SHIP_QTY), 0) AS RCNT158
              , DECODE(OPER, 'A1180', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W159
              , DECODE(OPER, 'A1180', SUM(WAIT_TAT_QTY), 0) AS WSUM159
              , DECODE(OPER, 'A1180', SUM(SHIP_QTY), 0) AS WCNT159
              , DECODE(OPER, 'A1180', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R159
              , DECODE(OPER, 'A1180', SUM(PROC_TAT_QTY), 0) AS RSUM159
              , DECODE(OPER, 'A1180', SUM(SHIP_QTY), 0) AS RCNT159
              , DECODE(OPER, 'A1200', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W160
              , DECODE(OPER, 'A1200', SUM(WAIT_TAT_QTY), 0) AS WSUM160
              , DECODE(OPER, 'A1200', SUM(SHIP_QTY), 0) AS WCNT160
              , DECODE(OPER, 'A1200', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R160
              , DECODE(OPER, 'A1200', SUM(PROC_TAT_QTY), 0) AS RSUM160
              , DECODE(OPER, 'A1200', SUM(SHIP_QTY), 0) AS RCNT160
              , DECODE(OPER, 'A1230', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W161
              , DECODE(OPER, 'A1230', SUM(WAIT_TAT_QTY), 0) AS WSUM161
              , DECODE(OPER, 'A1230', SUM(SHIP_QTY), 0) AS WCNT161
              , DECODE(OPER, 'A1230', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R161
              , DECODE(OPER, 'A1230', SUM(PROC_TAT_QTY), 0) AS RSUM161
              , DECODE(OPER, 'A1230', SUM(SHIP_QTY), 0) AS RCNT161
              , DECODE(OPER, 'A1240', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W162
              , DECODE(OPER, 'A1240', SUM(WAIT_TAT_QTY), 0) AS WSUM162
              , DECODE(OPER, 'A1240', SUM(SHIP_QTY), 0) AS WCNT162
              , DECODE(OPER, 'A1240', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R162
              , DECODE(OPER, 'A1240', SUM(PROC_TAT_QTY), 0) AS RSUM162
              , DECODE(OPER, 'A1240', SUM(SHIP_QTY), 0) AS RCNT162
              , DECODE(OPER, 'A1250', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W163
              , DECODE(OPER, 'A1250', SUM(WAIT_TAT_QTY), 0) AS WSUM163
              , DECODE(OPER, 'A1250', SUM(SHIP_QTY), 0) AS WCNT163
              , DECODE(OPER, 'A1250', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R163
              , DECODE(OPER, 'A1250', SUM(PROC_TAT_QTY), 0) AS RSUM163
              , DECODE(OPER, 'A1250', SUM(SHIP_QTY), 0) AS RCNT163
              , DECODE(OPER, 'A1260', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W164
              , DECODE(OPER, 'A1260', SUM(WAIT_TAT_QTY), 0) AS WSUM164
              , DECODE(OPER, 'A1260', SUM(SHIP_QTY), 0) AS WCNT164
              , DECODE(OPER, 'A1260', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R164
              , DECODE(OPER, 'A1260', SUM(PROC_TAT_QTY), 0) AS RSUM164
              , DECODE(OPER, 'A1260', SUM(SHIP_QTY), 0) AS RCNT164
              , DECODE(OPER, 'A1300', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W165
              , DECODE(OPER, 'A1300', SUM(WAIT_TAT_QTY), 0) AS WSUM165
              , DECODE(OPER, 'A1300', SUM(SHIP_QTY), 0) AS WCNT165
              , DECODE(OPER, 'A1300', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R165
              , DECODE(OPER, 'A1300', SUM(PROC_TAT_QTY), 0) AS RSUM165
              , DECODE(OPER, 'A1300', SUM(SHIP_QTY), 0) AS RCNT165
              , DECODE(OPER, 'A1350', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W166
              , DECODE(OPER, 'A1350', SUM(WAIT_TAT_QTY), 0) AS WSUM166
              , DECODE(OPER, 'A1350', SUM(SHIP_QTY), 0) AS WCNT166
              , DECODE(OPER, 'A1350', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R166
              , DECODE(OPER, 'A1350', SUM(PROC_TAT_QTY), 0) AS RSUM166
              , DECODE(OPER, 'A1350', SUM(SHIP_QTY), 0) AS RCNT166
              , DECODE(OPER, 'A1370', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W167
              , DECODE(OPER, 'A1370', SUM(WAIT_TAT_QTY), 0) AS WSUM167
              , DECODE(OPER, 'A1370', SUM(SHIP_QTY), 0) AS WCNT167
              , DECODE(OPER, 'A1370', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R167
              , DECODE(OPER, 'A1370', SUM(PROC_TAT_QTY), 0) AS RSUM167
              , DECODE(OPER, 'A1370', SUM(SHIP_QTY), 0) AS RCNT167
              , DECODE(OPER, 'A1380', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W168
              , DECODE(OPER, 'A1380', SUM(WAIT_TAT_QTY), 0) AS WSUM168
              , DECODE(OPER, 'A1380', SUM(SHIP_QTY), 0) AS WCNT168
              , DECODE(OPER, 'A1380', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R168
              , DECODE(OPER, 'A1380', SUM(PROC_TAT_QTY), 0) AS RSUM168
              , DECODE(OPER, 'A1380', SUM(SHIP_QTY), 0) AS RCNT168
              , DECODE(OPER, 'A1050', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W169
              , DECODE(OPER, 'A1050', SUM(WAIT_TAT_QTY), 0) AS WSUM169
              , DECODE(OPER, 'A1050', SUM(SHIP_QTY), 0) AS WCNT169
              , DECODE(OPER, 'A1050', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R169
              , DECODE(OPER, 'A1050', SUM(PROC_TAT_QTY), 0) AS RSUM169
              , DECODE(OPER, 'A1050', SUM(SHIP_QTY), 0) AS RCNT169
              , DECODE(OPER, 'A1420', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W170
              , DECODE(OPER, 'A1420', SUM(WAIT_TAT_QTY), 0) AS WSUM170
              , DECODE(OPER, 'A1420', SUM(SHIP_QTY), 0) AS WCNT170
              , DECODE(OPER, 'A1420', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R170
              , DECODE(OPER, 'A1420', SUM(PROC_TAT_QTY), 0) AS RSUM170
              , DECODE(OPER, 'A1420', SUM(SHIP_QTY), 0) AS RCNT170
              , DECODE(OPER, 'A1440', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W171
              , DECODE(OPER, 'A1440', SUM(WAIT_TAT_QTY), 0) AS WSUM171
              , DECODE(OPER, 'A1440', SUM(SHIP_QTY), 0) AS WCNT171
              , DECODE(OPER, 'A1440', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R171
              , DECODE(OPER, 'A1440', SUM(PROC_TAT_QTY), 0) AS RSUM171
              , DECODE(OPER, 'A1440', SUM(SHIP_QTY), 0) AS RCNT171
              , DECODE(OPER, 'A1450', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W172
              , DECODE(OPER, 'A1450', SUM(WAIT_TAT_QTY), 0) AS WSUM172
              , DECODE(OPER, 'A1450', SUM(SHIP_QTY), 0) AS WCNT172
              , DECODE(OPER, 'A1450', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R172
              , DECODE(OPER, 'A1450', SUM(PROC_TAT_QTY), 0) AS RSUM172
              , DECODE(OPER, 'A1450', SUM(SHIP_QTY), 0) AS RCNT172
              , DECODE(OPER, 'A1821', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W173
              , DECODE(OPER, 'A1821', SUM(WAIT_TAT_QTY), 0) AS WSUM173
              , DECODE(OPER, 'A1821', SUM(SHIP_QTY), 0) AS WCNT173
              , DECODE(OPER, 'A1821', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R173
              , DECODE(OPER, 'A1821', SUM(PROC_TAT_QTY), 0) AS RSUM173
              , DECODE(OPER, 'A1821', SUM(SHIP_QTY), 0) AS RCNT173
              , DECODE(OPER, 'A1460', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W174
              , DECODE(OPER, 'A1460', SUM(WAIT_TAT_QTY), 0) AS WSUM174
              , DECODE(OPER, 'A1460', SUM(SHIP_QTY), 0) AS WCNT174
              , DECODE(OPER, 'A1460', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R174
              , DECODE(OPER, 'A1460', SUM(PROC_TAT_QTY), 0) AS RSUM174
              , DECODE(OPER, 'A1460', SUM(SHIP_QTY), 0) AS RCNT174
              , DECODE(OPER, 'A1470', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W175
              , DECODE(OPER, 'A1470', SUM(WAIT_TAT_QTY), 0) AS WSUM175
              , DECODE(OPER, 'A1470', SUM(SHIP_QTY), 0) AS WCNT175
              , DECODE(OPER, 'A1470', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R175
              , DECODE(OPER, 'A1470', SUM(PROC_TAT_QTY), 0) AS RSUM175
              , DECODE(OPER, 'A1470', SUM(SHIP_QTY), 0) AS RCNT175
              , DECODE(OPER, 'A1500', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W176
              , DECODE(OPER, 'A1500', SUM(WAIT_TAT_QTY), 0) AS WSUM176
              , DECODE(OPER, 'A1500', SUM(SHIP_QTY), 0) AS WCNT176
              , DECODE(OPER, 'A1500', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R176
              , DECODE(OPER, 'A1500', SUM(PROC_TAT_QTY), 0) AS RSUM176
              , DECODE(OPER, 'A1500', SUM(SHIP_QTY), 0) AS RCNT176
              , DECODE(OPER, 'A1550', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W177
              , DECODE(OPER, 'A1550', SUM(WAIT_TAT_QTY), 0) AS WSUM177
              , DECODE(OPER, 'A1550', SUM(SHIP_QTY), 0) AS WCNT177
              , DECODE(OPER, 'A1550', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R177
              , DECODE(OPER, 'A1550', SUM(PROC_TAT_QTY), 0) AS RSUM177
              , DECODE(OPER, 'A1550', SUM(SHIP_QTY), 0) AS RCNT177
              , DECODE(OPER, 'A1610', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W178
              , DECODE(OPER, 'A1610', SUM(WAIT_TAT_QTY), 0) AS WSUM178
              , DECODE(OPER, 'A1610', SUM(SHIP_QTY), 0) AS WCNT178
              , DECODE(OPER, 'A1610', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R178
              , DECODE(OPER, 'A1610', SUM(PROC_TAT_QTY), 0) AS RSUM178
              , DECODE(OPER, 'A1610', SUM(SHIP_QTY), 0) AS RCNT178
              , DECODE(OPER, 'A1560', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W179
              , DECODE(OPER, 'A1560', SUM(WAIT_TAT_QTY), 0) AS WSUM179
              , DECODE(OPER, 'A1560', SUM(SHIP_QTY), 0) AS WCNT179
              , DECODE(OPER, 'A1560', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R179
              , DECODE(OPER, 'A1560', SUM(PROC_TAT_QTY), 0) AS RSUM179
              , DECODE(OPER, 'A1560', SUM(SHIP_QTY), 0) AS RCNT179
              , DECODE(OPER, 'A1730', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W180
              , DECODE(OPER, 'A1730', SUM(WAIT_TAT_QTY), 0) AS WSUM180
              , DECODE(OPER, 'A1730', SUM(SHIP_QTY), 0) AS WCNT180
              , DECODE(OPER, 'A1730', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R180
              , DECODE(OPER, 'A1730', SUM(PROC_TAT_QTY), 0) AS RSUM180
              , DECODE(OPER, 'A1730', SUM(SHIP_QTY), 0) AS RCNT180
              , DECODE(OPER, 'A1740', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W181
              , DECODE(OPER, 'A1740', SUM(WAIT_TAT_QTY), 0) AS WSUM181
              , DECODE(OPER, 'A1740', SUM(SHIP_QTY), 0) AS WCNT181
              , DECODE(OPER, 'A1740', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R181
              , DECODE(OPER, 'A1740', SUM(PROC_TAT_QTY), 0) AS RSUM181
              , DECODE(OPER, 'A1740', SUM(SHIP_QTY), 0) AS RCNT181
              , DECODE(OPER, 'A1750', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W182
              , DECODE(OPER, 'A1750', SUM(WAIT_TAT_QTY), 0) AS WSUM182
              , DECODE(OPER, 'A1750', SUM(SHIP_QTY), 0) AS WCNT182
              , DECODE(OPER, 'A1750', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R182
              , DECODE(OPER, 'A1750', SUM(PROC_TAT_QTY), 0) AS RSUM182
              , DECODE(OPER, 'A1750', SUM(SHIP_QTY), 0) AS RCNT182
              , DECODE(OPER, 'A1755', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W183
              , DECODE(OPER, 'A1755', SUM(WAIT_TAT_QTY), 0) AS WSUM183
              , DECODE(OPER, 'A1755', SUM(SHIP_QTY), 0) AS WCNT183
              , DECODE(OPER, 'A1755', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R183
              , DECODE(OPER, 'A1755', SUM(PROC_TAT_QTY), 0) AS RSUM183
              , DECODE(OPER, 'A1755', SUM(SHIP_QTY), 0) AS RCNT183
              , DECODE(OPER, 'A1760', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W184
              , DECODE(OPER, 'A1760', SUM(WAIT_TAT_QTY), 0) AS WSUM184
              , DECODE(OPER, 'A1760', SUM(SHIP_QTY), 0) AS WCNT184
              , DECODE(OPER, 'A1760', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R184
              , DECODE(OPER, 'A1760', SUM(PROC_TAT_QTY), 0) AS RSUM184
              , DECODE(OPER, 'A1760', SUM(SHIP_QTY), 0) AS RCNT184
              , DECODE(OPER, 'A1765', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W185
              , DECODE(OPER, 'A1765', SUM(WAIT_TAT_QTY), 0) AS WSUM185
              , DECODE(OPER, 'A1765', SUM(SHIP_QTY), 0) AS WCNT185
              , DECODE(OPER, 'A1765', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R185
              , DECODE(OPER, 'A1765', SUM(PROC_TAT_QTY), 0) AS RSUM185
              , DECODE(OPER, 'A1765', SUM(SHIP_QTY), 0) AS RCNT185
              , DECODE(OPER, 'A1763', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W186
              , DECODE(OPER, 'A1763', SUM(WAIT_TAT_QTY), 0) AS WSUM186
              , DECODE(OPER, 'A1763', SUM(SHIP_QTY), 0) AS WCNT186
              , DECODE(OPER, 'A1763', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R186
              , DECODE(OPER, 'A1763', SUM(PROC_TAT_QTY), 0) AS RSUM186
              , DECODE(OPER, 'A1763', SUM(SHIP_QTY), 0) AS RCNT186
              , DECODE(OPER, 'A1770', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W187
              , DECODE(OPER, 'A1770', SUM(WAIT_TAT_QTY), 0) AS WSUM187
              , DECODE(OPER, 'A1770', SUM(SHIP_QTY), 0) AS WCNT187
              , DECODE(OPER, 'A1770', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R187
              , DECODE(OPER, 'A1770', SUM(PROC_TAT_QTY), 0) AS RSUM187
              , DECODE(OPER, 'A1770', SUM(SHIP_QTY), 0) AS RCNT187
              , DECODE(OPER, 'A1790', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W188
              , DECODE(OPER, 'A1790', SUM(WAIT_TAT_QTY), 0) AS WSUM188
              , DECODE(OPER, 'A1790', SUM(SHIP_QTY), 0) AS WCNT188
              , DECODE(OPER, 'A1790', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R188
              , DECODE(OPER, 'A1790', SUM(PROC_TAT_QTY), 0) AS RSUM188
              , DECODE(OPER, 'A1790', SUM(SHIP_QTY), 0) AS RCNT188
              , DECODE(OPER, 'A1795', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W189
              , DECODE(OPER, 'A1795', SUM(WAIT_TAT_QTY), 0) AS WSUM189
              , DECODE(OPER, 'A1795', SUM(SHIP_QTY), 0) AS WCNT189
              , DECODE(OPER, 'A1795', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R189
              , DECODE(OPER, 'A1795', SUM(PROC_TAT_QTY), 0) AS RSUM189
              , DECODE(OPER, 'A1795', SUM(SHIP_QTY), 0) AS RCNT189
              , DECODE(OPER, 'A1800', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W190
              , DECODE(OPER, 'A1800', SUM(WAIT_TAT_QTY), 0) AS WSUM190
              , DECODE(OPER, 'A1800', SUM(SHIP_QTY), 0) AS WCNT190
              , DECODE(OPER, 'A1800', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R190
              , DECODE(OPER, 'A1800', SUM(PROC_TAT_QTY), 0) AS RSUM190
              , DECODE(OPER, 'A1800', SUM(SHIP_QTY), 0) AS RCNT190
              , DECODE(OPER, 'A1810', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W191
              , DECODE(OPER, 'A1810', SUM(WAIT_TAT_QTY), 0) AS WSUM191
              , DECODE(OPER, 'A1810', SUM(SHIP_QTY), 0) AS WCNT191
              , DECODE(OPER, 'A1810', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R191
              , DECODE(OPER, 'A1810', SUM(PROC_TAT_QTY), 0) AS RSUM191
              , DECODE(OPER, 'A1810', SUM(SHIP_QTY), 0) AS RCNT191
              , DECODE(OPER, 'A1812', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W192
              , DECODE(OPER, 'A1812', SUM(WAIT_TAT_QTY), 0) AS WSUM192
              , DECODE(OPER, 'A1812', SUM(SHIP_QTY), 0) AS WCNT192
              , DECODE(OPER, 'A1812', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R192
              , DECODE(OPER, 'A1812', SUM(PROC_TAT_QTY), 0) AS RSUM192
              , DECODE(OPER, 'A1812', SUM(SHIP_QTY), 0) AS RCNT192
              , DECODE(OPER, 'A1816', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W193
              , DECODE(OPER, 'A1816', SUM(WAIT_TAT_QTY), 0) AS WSUM193
              , DECODE(OPER, 'A1816', SUM(SHIP_QTY), 0) AS WCNT193
              , DECODE(OPER, 'A1816', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R193
              , DECODE(OPER, 'A1816', SUM(PROC_TAT_QTY), 0) AS RSUM193
              , DECODE(OPER, 'A1816', SUM(SHIP_QTY), 0) AS RCNT193
              , DECODE(OPER, 'A1820', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W194
              , DECODE(OPER, 'A1820', SUM(WAIT_TAT_QTY), 0) AS WSUM194
              , DECODE(OPER, 'A1820', SUM(SHIP_QTY), 0) AS WCNT194
              , DECODE(OPER, 'A1820', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R194
              , DECODE(OPER, 'A1820', SUM(PROC_TAT_QTY), 0) AS RSUM194
              , DECODE(OPER, 'A1820', SUM(SHIP_QTY), 0) AS RCNT194
              , DECODE(OPER, 'A1825', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W195
              , DECODE(OPER, 'A1825', SUM(WAIT_TAT_QTY), 0) AS WSUM195
              , DECODE(OPER, 'A1825', SUM(SHIP_QTY), 0) AS WCNT195
              , DECODE(OPER, 'A1825', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R195
              , DECODE(OPER, 'A1825', SUM(PROC_TAT_QTY), 0) AS RSUM195
              , DECODE(OPER, 'A1825', SUM(SHIP_QTY), 0) AS RCNT195
              , DECODE(OPER, 'A1960', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W196
              , DECODE(OPER, 'A1960', SUM(WAIT_TAT_QTY), 0) AS WSUM196
              , DECODE(OPER, 'A1960', SUM(SHIP_QTY), 0) AS WCNT196
              , DECODE(OPER, 'A1960', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R196
              , DECODE(OPER, 'A1960', SUM(PROC_TAT_QTY), 0) AS RSUM196
              , DECODE(OPER, 'A1960', SUM(SHIP_QTY), 0) AS RCNT196
              , DECODE(OPER, 'A1815', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W197
              , DECODE(OPER, 'A1815', SUM(WAIT_TAT_QTY), 0) AS WSUM197
              , DECODE(OPER, 'A1815', SUM(SHIP_QTY), 0) AS WCNT197
              , DECODE(OPER, 'A1815', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R197
              , DECODE(OPER, 'A1815', SUM(PROC_TAT_QTY), 0) AS RSUM197
              , DECODE(OPER, 'A1815', SUM(SHIP_QTY), 0) AS RCNT197
              , DECODE(OPER, 'A1830', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W198
              , DECODE(OPER, 'A1830', SUM(WAIT_TAT_QTY), 0) AS WSUM198
              , DECODE(OPER, 'A1830', SUM(SHIP_QTY), 0) AS WCNT198
              , DECODE(OPER, 'A1830', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R198
              , DECODE(OPER, 'A1830', SUM(PROC_TAT_QTY), 0) AS RSUM198
              , DECODE(OPER, 'A1830', SUM(SHIP_QTY), 0) AS RCNT198
              , DECODE(OPER, 'A1710', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W199
              , DECODE(OPER, 'A1710', SUM(WAIT_TAT_QTY), 0) AS WSUM199
              , DECODE(OPER, 'A1710', SUM(SHIP_QTY), 0) AS WCNT199
              , DECODE(OPER, 'A1710', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R199
              , DECODE(OPER, 'A1710', SUM(PROC_TAT_QTY), 0) AS RSUM199
              , DECODE(OPER, 'A1710', SUM(SHIP_QTY), 0) AS RCNT199
              , DECODE(OPER, 'A1840', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W200
              , DECODE(OPER, 'A1840', SUM(WAIT_TAT_QTY), 0) AS WSUM200
              , DECODE(OPER, 'A1840', SUM(SHIP_QTY), 0) AS WCNT200
              , DECODE(OPER, 'A1840', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R200
              , DECODE(OPER, 'A1840', SUM(PROC_TAT_QTY), 0) AS RSUM200
              , DECODE(OPER, 'A1840', SUM(SHIP_QTY), 0) AS RCNT200
              , DECODE(OPER, 'A1900', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W201
              , DECODE(OPER, 'A1900', SUM(WAIT_TAT_QTY), 0) AS WSUM201
              , DECODE(OPER, 'A1900', SUM(SHIP_QTY), 0) AS WCNT201
              , DECODE(OPER, 'A1900', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R201
              , DECODE(OPER, 'A1900', SUM(PROC_TAT_QTY), 0) AS RSUM201
              , DECODE(OPER, 'A1900', SUM(SHIP_QTY), 0) AS RCNT201
              , DECODE(OPER, 'A2000', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W202
              , DECODE(OPER, 'A2000', SUM(WAIT_TAT_QTY), 0) AS WSUM202
              , DECODE(OPER, 'A2000', SUM(SHIP_QTY), 0) AS WCNT202
              , DECODE(OPER, 'A2000', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R202
              , DECODE(OPER, 'A2000', SUM(PROC_TAT_QTY), 0) AS RSUM202
              , DECODE(OPER, 'A2000', SUM(SHIP_QTY), 0) AS RCNT202
              , DECODE(OPER, 'A2010', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W203
              , DECODE(OPER, 'A2010', SUM(WAIT_TAT_QTY), 0) AS WSUM203
              , DECODE(OPER, 'A2010', SUM(SHIP_QTY), 0) AS WCNT203
              , DECODE(OPER, 'A2010', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R203
              , DECODE(OPER, 'A2010', SUM(PROC_TAT_QTY), 0) AS RSUM203
              , DECODE(OPER, 'A2010', SUM(SHIP_QTY), 0) AS RCNT203
              , DECODE(OPER, 'A2020', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W204
              , DECODE(OPER, 'A2020', SUM(WAIT_TAT_QTY), 0) AS WSUM204
              , DECODE(OPER, 'A2020', SUM(SHIP_QTY), 0) AS WCNT204
              , DECODE(OPER, 'A2020', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R204
              , DECODE(OPER, 'A2020', SUM(PROC_TAT_QTY), 0) AS RSUM204
              , DECODE(OPER, 'A2020', SUM(SHIP_QTY), 0) AS RCNT204
              , DECODE(OPER, 'A2025', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W205
              , DECODE(OPER, 'A2025', SUM(WAIT_TAT_QTY), 0) AS WSUM205
              , DECODE(OPER, 'A2025', SUM(SHIP_QTY), 0) AS WCNT205
              , DECODE(OPER, 'A2025', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R205
              , DECODE(OPER, 'A2025', SUM(PROC_TAT_QTY), 0) AS RSUM205
              , DECODE(OPER, 'A2025', SUM(SHIP_QTY), 0) AS RCNT205
              , DECODE(OPER, 'A1819', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W206
              , DECODE(OPER, 'A1819', SUM(WAIT_TAT_QTY), 0) AS WSUM206
              , DECODE(OPER, 'A1819', SUM(SHIP_QTY), 0) AS WCNT206
              , DECODE(OPER, 'A1819', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R206
              , DECODE(OPER, 'A1819', SUM(PROC_TAT_QTY), 0) AS RSUM206
              , DECODE(OPER, 'A1819', SUM(SHIP_QTY), 0) AS RCNT206
              , DECODE(OPER, 'A2030', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W207
              , DECODE(OPER, 'A2030', SUM(WAIT_TAT_QTY), 0) AS WSUM207
              , DECODE(OPER, 'A2030', SUM(SHIP_QTY), 0) AS WCNT207
              , DECODE(OPER, 'A2030', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R207
              , DECODE(OPER, 'A2030', SUM(PROC_TAT_QTY), 0) AS RSUM207
              , DECODE(OPER, 'A2030', SUM(SHIP_QTY), 0) AS RCNT207
              , DECODE(OPER, 'A2040', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W208
              , DECODE(OPER, 'A2040', SUM(WAIT_TAT_QTY), 0) AS WSUM208
              , DECODE(OPER, 'A2040', SUM(SHIP_QTY), 0) AS WCNT208
              , DECODE(OPER, 'A2040', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R208
              , DECODE(OPER, 'A2040', SUM(PROC_TAT_QTY), 0) AS RSUM208
              , DECODE(OPER, 'A2040', SUM(SHIP_QTY), 0) AS RCNT208
              , DECODE(OPER, 'A2041', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W209
              , DECODE(OPER, 'A2041', SUM(WAIT_TAT_QTY), 0) AS WSUM209
              , DECODE(OPER, 'A2041', SUM(SHIP_QTY), 0) AS WCNT209
              , DECODE(OPER, 'A2041', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R209
              , DECODE(OPER, 'A2041', SUM(PROC_TAT_QTY), 0) AS RSUM209
              , DECODE(OPER, 'A2041', SUM(SHIP_QTY), 0) AS RCNT209
              , DECODE(OPER, 'A2042', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W210
              , DECODE(OPER, 'A2042', SUM(WAIT_TAT_QTY), 0) AS WSUM210
              , DECODE(OPER, 'A2042', SUM(SHIP_QTY), 0) AS WCNT210
              , DECODE(OPER, 'A2042', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R210
              , DECODE(OPER, 'A2042', SUM(PROC_TAT_QTY), 0) AS RSUM210
              , DECODE(OPER, 'A2042', SUM(SHIP_QTY), 0) AS RCNT210
              , DECODE(OPER, 'A2050', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W211
              , DECODE(OPER, 'A2050', SUM(WAIT_TAT_QTY), 0) AS WSUM211
              , DECODE(OPER, 'A2050', SUM(SHIP_QTY), 0) AS WCNT211
              , DECODE(OPER, 'A2050', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R211
              , DECODE(OPER, 'A2050', SUM(PROC_TAT_QTY), 0) AS RSUM211
              , DECODE(OPER, 'A2050', SUM(SHIP_QTY), 0) AS RCNT211
              , DECODE(OPER, 'A2150', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W212
              , DECODE(OPER, 'A2150', SUM(WAIT_TAT_QTY), 0) AS WSUM212
              , DECODE(OPER, 'A2150', SUM(SHIP_QTY), 0) AS WCNT212
              , DECODE(OPER, 'A2150', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R212
              , DECODE(OPER, 'A2150', SUM(PROC_TAT_QTY), 0) AS RSUM212
              , DECODE(OPER, 'A2150', SUM(SHIP_QTY), 0) AS RCNT212
              , DECODE(OPER, 'A2100', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W213
              , DECODE(OPER, 'A2100', SUM(WAIT_TAT_QTY), 0) AS WSUM213
              , DECODE(OPER, 'A2100', SUM(SHIP_QTY), 0) AS WCNT213
              , DECODE(OPER, 'A2100', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R213
              , DECODE(OPER, 'A2100', SUM(PROC_TAT_QTY), 0) AS RSUM213
              , DECODE(OPER, 'A2100', SUM(SHIP_QTY), 0) AS RCNT213
              , DECODE(OPER, 'A2300', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W214
              , DECODE(OPER, 'A2300', SUM(WAIT_TAT_QTY), 0) AS WSUM214
              , DECODE(OPER, 'A2300', SUM(SHIP_QTY), 0) AS WCNT214
              , DECODE(OPER, 'A2300', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R214
              , DECODE(OPER, 'A2300', SUM(PROC_TAT_QTY), 0) AS RSUM214
              , DECODE(OPER, 'A2300', SUM(SHIP_QTY), 0) AS RCNT214
              , DECODE(OPER, 'A2350', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W215
              , DECODE(OPER, 'A2350', SUM(WAIT_TAT_QTY), 0) AS WSUM215
              , DECODE(OPER, 'A2350', SUM(SHIP_QTY), 0) AS WCNT215
              , DECODE(OPER, 'A2350', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R215
              , DECODE(OPER, 'A2350', SUM(PROC_TAT_QTY), 0) AS RSUM215
              , DECODE(OPER, 'A2350', SUM(SHIP_QTY), 0) AS RCNT215
              , DECODE(OPER, 'AZ010', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W216
              , DECODE(OPER, 'AZ010', SUM(WAIT_TAT_QTY), 0) AS WSUM216
              , DECODE(OPER, 'AZ010', SUM(SHIP_QTY), 0) AS WCNT216
              , DECODE(OPER, 'AZ010', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R216
              , DECODE(OPER, 'AZ010', SUM(PROC_TAT_QTY), 0) AS RSUM216
              , DECODE(OPER, 'AZ010', SUM(SHIP_QTY), 0) AS RCNT216
           FROM ( 
                  SELECT SHIP_DATE, (SELECT DATA_1 FROM MGCMTBLDAT WHERE TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = MAT_GRP_1 AND ROWNUM=1) AS MAT_GRP_1, MAT_CMF_10,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', OPER 
                       , TAT.TOTAL_TAT_QTY AS TOTAL_TAT_QTY
                       , TAT.WAIT_TAT_QTY AS WAIT_TAT_QTY
                       , TAT.PROC_TAT_QTY AS PROC_TAT_QTY
                       , SHIP.SHIP_QTY AS SHIP_QTY
                    FROM CSUMTATMAT@RPTTOMES TAT, MWIPMATDEF MAT       
                       , (      
                           SELECT TAT.FACTORY, TAT.MAT_ID, TAT.SHIP_DATE AS WORK_DATE 
                                , SHIP_QTY      
                             FROM CSUMTATMAT@RPTTOMES TAT      
                            WHERE 1=1      
                              AND TAT.FACTORY='HMVA2'      
                              AND OPER ='AZ010'      
                              AND TAT.SHIP_DATE BETWEEN '20200401' AND '20200409' 
                         ) SHIP      
                   WHERE 1=1      
                     AND TAT.FACTORY = MAT.FACTORY    
                     AND TAT.MAT_ID = MAT.MAT_ID      
                     AND TAT.MAT_ID = SHIP.MAT_ID       
                     AND TAT.SHIP_DATE = SHIP.WORK_DATE       
                     AND MAT.MAT_VER = 1 
                     AND MAT.MAT_TYPE = 'FG' 
                     AND MAT.DELETE_FLAG <> 'Y' 
                     AND TAT.FACTORY = 'HMVA2'        
                     AND TAT.SHIP_DATE BETWEEN '20200401' AND '20200409' 
                 AND MAT.FIRST_FLOW LIKE '%'
                     AND TAT.OPER BETWEEN 'A0000' AND 'AZ010' 
                ) A 
          GROUP BY SHIP_DATE, MAT_GRP_1, MAT_CMF_10,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', OPER  
       )         
  GROUP BY SHIP_DATE, MAT_GRP_1, MAT_CMF_10,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' '
  ORDER BY SHIP_DATE, MAT_GRP_1, MAT_CMF_10,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' '

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
SELECT LANGUAGE_2 FROM RWEBFUNDEF WHERE FUNC_NAME = 'PRD011010'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT PLAN_WEEK V1    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_DATE = TO_CHAR(SYSDATE,'yyyymmdd')      AND ROWNUM = 1  
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT LANGUAGE_2 FROM RWEBFUNDEF WHERE FUNC_NAME = 'PRD010423'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT A.OPER_GRP, (SELECT TO_NUMBER(DATA_1) FROM MGCMTBLDAT WHERE FACTORY = 'HMVA2' AND TABLE_NAME = 'H_OPER_GRP_TARGET' AND KEY_1 = A.OPER_GRP) AS TARGET,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ' 
     , B.GUBUN
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_0 ELSE WIP_0 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_0 ELSE END_0 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_0 ELSE EXP_0 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_0
                      WHEN B.GUBUN = 'RUN' THEN RUN_0
                 END), 0) AS D0
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_1 ELSE WIP_1 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_1 ELSE END_1 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_1 ELSE EXP_1 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_1
                      WHEN B.GUBUN = 'RUN' THEN RUN_1
                 END), 0) AS D1
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_TTL ELSE WIP_TTL / 1000 END)
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_TTL ELSE END_TTL / 1000 END)
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_TTL ELSE EXP_TTL / 1000 END)
                      WHEN B.GUBUN = '설비대수' THEN RES_TTL
                      WHEN B.GUBUN = 'RUN' THEN RUN_TTL
                 END), 0) AS TTL
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_TTL ELSE WIP_TTL / 1000 END)
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_TTL ELSE END_TTL / 1000 END)
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_TTL ELSE EXP_TTL / 1000 END)
                      WHEN B.GUBUN = '설비대수' THEN RES_TTL
                      WHEN B.GUBUN = 'RUN' THEN RUN_TTL
                 END) / 2, 0) AS AVG
  FROM (
        SELECT *
          FROM (
                SELECT *
                  FROM (
                        SELECT A.*
                             , B.*
                             , NVL((SELECT DATA_10 FROM MGCMTBLDAT WHERE TABLE_NAME = 'H_CUSTOMER' AND FACTORY = 'HMVA2' AND  KEY_1 = B.MAT_GRP_1), '-') AS CUST_TYPE
                             , (SELECT KEY_3 FROM MGCMTBLDAT WHERE FACTORY = 'HMVA2' AND TABLE_NAME = 'H_PKG_2D_CMOLD' AND KEY_1 = 'C-MOLD' AND KEY_2 = B.MAT_GRP_1 AND KEY_3 = B.MAT_CMF_11 AND (KEY_4 = '%' OR KEY_4 = B.MAT_ID)) AS KEY_3
                          FROM (
                                SELECT DECODE(LEVEL, 1, 'STOCK', 2, 'LAMI', 3, 'Stealth Saw', 4, 'BG', 5, 'DDS', 6, 'SAW', 7, 'DA(Epoxy)', 8, 'DA(DFN)', 9, 'WB', 10, 'C-MOLD', 11, 'SST', 12, 'HMK3') AS OPER_GRP
                                  FROM DUAL CONNECT BY LEVEL <= 12 
                               ) A 
                             , MWIPMATDEF B 
                         WHERE B.FACTORY = 'HMVA2'
                           AND B.MAT_TYPE = 'FG'
                           AND B.DELETE_FLAG = ' '
                       )
                 WHERE (OPER_GRP <> 'C-MOLD' OR KEY_3 IS NOT NULL)
               ) MAT
             , (
                SELECT MAT_ID AS END_MAT_ID
                     , OPER_GRP AS END_OPER_GRP
                     , SUM(CONV_END_QTY) AS END_TTL
                     , SUM(DECODE(WORK_DATE, '20200409', 0, CONV_END_QTY)) + (SUM(DECODE(WORK_DATE, '20200409', CONV_END_QTY , 0)) / 11.0315489366667 * 24) AS EXP_TTL
                     , SUM(DECODE(WORK_DATE, '20200408', CONV_END_QTY, 0)) AS END_0
                     , SUM(DECODE(WORK_DATE, '20200409', CONV_END_QTY, 0)) AS END_1
                     , SUM(DECODE(WORK_DATE, '20200408', CONV_END_QTY, 0)) AS EXP_0
                     , SUM(DECODE(WORK_DATE, '20200409', CONV_END_QTY, 0)) / 11.0315489366667 * 24 AS EXP_1
                  FROM (
                        SELECT A.MAT_ID
                             , A.WORK_DATE
                             , CASE WHEN A.OPER = 'A0033' THEN 'Stealth Saw'
                                    WHEN A.OPER IN ('A0040', 'A0030') THEN 'BG'
                                    WHEN A.OPER = 'A0230' THEN 'DDS'
                                    WHEN A.OPER = 'A1000' THEN 'C-MOLD'
                                    WHEN A.OPER LIKE 'A060%' THEN 'WB'
                                    WHEN A.OPER IN ('A1750', 'A1825') THEN 'SST'
                                    WHEN A.OPER = 'A0200' THEN 'SAW'
                                    WHEN A.OPER LIKE 'A040%' AND B.MAT_GRP_2 = 'DFN' THEN 'DA(DFN)'
                                    WHEN A.OPER LIKE 'A040%' AND E.DA_TYPE = 'Epoxy' THEN 'DA(Epoxy)'
                                    WHEN A.OPER = 'A0000' THEN 'STOCK'
                                    WHEN A.OPER = 'A0020' THEN 'LAMI'
                                    WHEN A.OPER = 'AZ010' THEN 'HMK3'
                                    ELSE ''
                               END OPER_GRP
                             , CASE WHEN A.OPER = 'AZ010' THEN DECODE(B.MAT_GRP_3, 'COB', 0, 'BGN', 0, (S1_MOVE_QTY_1+S2_MOVE_QTY_1+S3_MOVE_QTY_1))
                                    WHEN A.OPER = 'A0000' THEN (S1_OPER_IN_QTY_1+S2_OPER_IN_QTY_1+S3_OPER_IN_QTY_1)
                                    ELSE (S1_END_QTY_1+S2_END_QTY_1+S3_END_QTY_1)
                               END AS END_QTY
                             , CASE WHEN A.OPER = 'A0000' THEN (S1_OPER_IN_QTY_2+S2_OPER_IN_QTY_2+S3_OPER_IN_QTY_2)
                                    WHEN A.OPER IN ('A0033', 'A0040', 'A0230', 'A0030', 'A0200', 'A0020') THEN (S1_END_QTY_2+S2_END_QTY_2+S3_END_QTY_2)
                                    WHEN A.OPER LIKE 'A040%' AND B.MAT_ID LIKE 'SEK%' THEN (S1_END_QTY_1+S2_END_QTY_1+S3_END_QTY_1) * NVL(C.DATA_1,1)
                                    WHEN A.OPER LIKE 'A040%' AND (B.MAT_GRP_5 IN ('1st', 'Merge') OR B.MAT_GRP_5 LIKE 'Middle%') THEN (S1_END_QTY_1+S2_END_QTY_1+S3_END_QTY_1) * NVL(C.DATA_1,1)
                                    WHEN A.OPER LIKE 'A060%' THEN (S1_END_QTY_1+S2_END_QTY_1+S3_END_QTY_1) * (CASE WHEN D.WIRE_CNT IS NOT NULL THEN D.WIRE_CNT
                                                                                           WHEN B.MAT_GRP_6 NOT IN ('-','0') THEN B.MAT_GRP_6
                                                                                           ELSE '1' END)
                                    WHEN A.OPER = 'AZ010' THEN DECODE(B.MAT_GRP_3, 'COB', 0, 'BGN', 0, (S1_MOVE_QTY_1+S2_MOVE_QTY_1+S3_MOVE_QTY_1))
                                    ELSE (S1_END_QTY_1+S2_END_QTY_1+S3_END_QTY_1)
                               END AS CONV_END_QTY
                          FROM RSUMWIPMOV A
                             , MWIPMATDEF B
                             , (
                                SELECT KEY_1 AS MAT_ID, DATA_1
                                  FROM MGCMTBLDAT 
                                 WHERE FACTORY = 'HMVA2'
                                   AND TABLE_NAME IN ('H_SEC_AUTO_LOSS','H_HX_AUTO_LOSS')
                               ) C
                             , (
                                SELECT MAT_ID, OPER, TCD_CMF_2 AS WIRE_CNT
                                  FROM CWIPTCDDEF@RPTTOMES 
                                 WHERE FACTORY = 'HMVA2'
                                   AND OPER LIKE 'A060%'
                                   AND SET_FLAG = 'Y'
                                   AND TCD_CMF_2 <> ' '
                               ) D
                             , (
                                SELECT KEY_1 AS MAT_GRP_2, DATA_2 AS DA_TYPE
                                  FROM MGCMTBLDAT 
                                 WHERE FACTORY = 'HMVA2'
                                   AND TABLE_NAME = 'H_FAMILY'
                               ) E
                         WHERE 1=1
                           AND A.FACTORY = B.FACTORY
                           AND A.MAT_ID = B.MAT_ID
                           AND A.MAT_ID = C.MAT_ID(+)
                           AND A.MAT_ID = D.MAT_ID(+)
                           AND A.OPER = D.OPER(+)
                           AND B.MAT_GRP_2 = E.MAT_GRP_2(+)
                           AND A.FACTORY = 'HMVA2'
                           AND A.WORK_DATE BETWEEN '20200408' AND '20200409'
                           AND A.LOT_TYPE = 'W'
                           AND B.DELETE_FLAG = ' '
                           AND B.MAT_TYPE = 'FG'
                           AND A.FACTORY NOT IN ('RETURN') 
                           AND A.CM_KEY_3 LIKE 'P%' 
                           AND REGEXP_LIKE(A.OPER, 'A040*|A0033|A0040|A0230|A1000|A060*|A1750|A0030|A0000|A0020|AZ010|A1825|A0200')
                       )
                 GROUP BY MAT_ID, OPER_GRP
               ) SHP
             , (
                SELECT MAT_ID AS WIP_MAT_ID
                     , OPER_GRP AS WIP_OPER_GRP
                     , SUM(CONV_WIP_QTY) AS WIP_TTL
                     , SUM(DECODE(WORK_DATE, '20200408', CONV_WIP_QTY, 0)) AS WIP_0
                     , SUM(DECODE(WORK_DATE, '20200409', CONV_WIP_QTY, 0)) AS WIP_1
                  FROM (
                        SELECT A.MAT_ID, WORK_DATE
                             , CASE WHEN A.OPER = 'A0033' THEN 'Stealth Saw'
                                    WHEN A.OPER IN ('A0040', 'A0030') THEN 'BG'
                                    WHEN A.OPER = 'A0230' THEN 'DDS'
                                    WHEN A.OPER IN ('A1000', 'A0950') THEN 'C-MOLD'
                                    WHEN A.OPER LIKE 'A060%' OR A.OPER LIKE 'A055%' THEN 'WB'
                                    WHEN A.OPER IN ('A1750', 'A1825') THEN 'SST'
                                    WHEN A.OPER = 'A0200' THEN 'SAW'
                                    WHEN (A.OPER LIKE 'A040%' OR A.OPER = 'A0250') AND B.MAT_GRP_2 = 'DFN' THEN 'DA(DFN)'
                                    WHEN (A.OPER LIKE 'A040%' OR A.OPER = 'A0250') AND B.DA_TYPE = 'Epoxy' THEN 'DA(Epoxy)'
                                    WHEN A.OPER = 'A0000' THEN 'STOCK'
                                    WHEN A.OPER = 'A0020' THEN 'LAMI'
                                    WHEN A.OPER = 'AZ010' THEN 'HMK3'
                                    ELSE ''
                               END OPER_GRP
                             , CASE WHEN A.OPER IN ('A0033', 'A0040', 'A0030', 'A0230', 'A0200', 'A0000', 'A0020') THEN WIP_QTY
                                    WHEN B.GUBUN = 'O' THEN WIP_QTY
                                    ELSE 0
                               END WIP_QTY
                             , CASE WHEN A.OPER IN ('A0033', 'A0040', 'A0030', 'A0230', 'A0200', 'A0000', 'A0020') THEN WIP_QTY_2
                                    WHEN A.OPER LIKE 'A040%' AND B.GUBUN = 'O' THEN WIP_QTY * COMP_CNT
                                    WHEN A.OPER LIKE 'A060%' AND B.GUBUN = 'O' THEN WIP_QTY * (CASE WHEN C.WIRE_CNT IS NOT NULL THEN C.WIRE_CNT
                                                                                                    WHEN B.MAT_GRP_6 NOT IN ('-','0') THEN B.MAT_GRP_6
                                                                                                    ELSE '1' END)
                                    WHEN B.GUBUN = 'O' THEN WIP_QTY
                                    ELSE 0
                               END AS CONV_WIP_QTY
                          FROM (
                                SELECT MAT_ID
                                     , '20200409' AS WORK_DATE
                                     , OPER
                                     , QTY_1 AS WIP_QTY
                                     , QTY_2 AS WIP_QTY_2
                                  FROM RWIPLOTSTS
                                 WHERE FACTORY = 'HMVA2'
                                   AND LOT_TYPE = 'W'
                                   AND LOT_DEL_FLAG = ' '
                                   AND REGEXP_LIKE(OPER, 'A040*|A0033|A0040|A0230|A1000|A0950|A060*|A1750|A0030|A0200|A0000|A0020|AZ010|A0250|A050*|A053*|A055*|A1825') 
                                   AND LOT_CMF_5 LIKE 'P%' 
                                 UNION ALL
                                SELECT MAT_ID
                                     , WORK_DATE
                                     , OPER
                                     , EOH_QTY_1 AS WIP_QTY
                                     , EOH_QTY_2 AS WIP_QTY_2
                                  FROM RSUMWIPEOH
                                 WHERE FACTORY = 'HMVA2'
                                   AND LOT_TYPE = 'W'
                                   AND REGEXP_LIKE(OPER, 'A040*|A0033|A0040|A0230|A1000|A0950|A060*|A1750|A0030|A0200|A0000|A0020|AZ010|A0250|A050*|A053*|A055*|A1825')
                                   AND WORK_DATE BETWEEN '20200408' AND '20200408'
                                   AND SHIFT = '3'
                                   AND CM_KEY_3 LIKE 'P%' 
                               ) A
                             , (
                                SELECT *
                                  FROM (
                                        SELECT MAT_ID, MAT_GRP_2, MAT_GRP_4, MAT_GRP_5, MAT_GRP_6, MAT_CMF_11
                                             , CASE WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-'
                                                         THEN (CASE WHEN MAT_GRP_5 IN ('1st','Merge') OR MAT_GRP_5 LIKE 'Middle%' THEN 'O' ELSE '' END)
                                                    WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 = '-' THEN '' 
                                                    ELSE 'O'
                                               END GUBUN
                                             , (SELECT DATA_2 FROM MGCMTBLDAT WHERE FACTORY = 'HMVA2' AND TABLE_NAME = 'H_FAMILY' AND KEY_1 = MAT_GRP_2) AS DA_TYPE
                                             , COMP_CNT
                                          FROM VWIPMATDEF
                                         WHERE FACTORY = 'HMVA2'
                                           AND MAT_TYPE = 'FG'
                                           AND DELETE_FLAG = ' '
                                           AND MAT_GRP_2 <> '-'
                                       )
                               ) B
                             , (
                                SELECT MAT_ID, OPER, TCD_CMF_2 AS WIRE_CNT
                                  FROM CWIPTCDDEF@RPTTOMES
                                 WHERE FACTORY = 'HMVA2'
                                   AND OPER LIKE 'A060%'
                                   AND SET_FLAG = 'Y'
                                   AND TCD_CMF_2 <> ' '
                               ) C
                         WHERE A.MAT_ID = B.MAT_ID
                           AND A.MAT_ID = C.MAT_ID(+)
                           AND A.OPER = C.OPER(+)
                       )
                 GROUP BY MAT_ID, OPER_GRP
               ) WIP
             , (
                SELECT RES_STS_2 AS RES_MAT_ID
                     , OPER_GRP AS RES_OPER_GRP 
                     , SUM(RES_CNT) AS RES_TTL
                     , SUM(RUN_CNT) AS RUN_TTL
                     , SUM(DECODE(WORK_DATE, '20200408', RES_CNT, 0)) AS RES_0
                     , SUM(DECODE(WORK_DATE, '20200409', RES_CNT, 0)) AS RES_1
                     , SUM(DECODE(WORK_DATE, '20200408', RUN_CNT, 0)) AS RUN_0
                     , SUM(DECODE(WORK_DATE, '20200409', RUN_CNT, 0)) AS RUN_1
                  FROM (
                        SELECT RES_STS_2
                             , WORK_DATE
                             , CASE WHEN A.RES_GRP_3 = 'SDBG' THEN 'Stealth Saw'
                                    WHEN A.RES_GRP_3 = 'BACK LAP' THEN 'BG'
                                    WHEN A.RES_GRP_3 = 'WAFER EXPANDING' THEN 'DDS'
                                    WHEN A.RES_GRP_3 = 'MOLD' THEN 'C-MOLD'
                                    WHEN A.RES_GRP_3 = 'WIRE BOND' THEN 'WB'
                                    WHEN A.RES_GRP_3 = 'SAW SORTER' THEN 'SST'
                                    WHEN A.RES_GRP_3 = 'SAW' THEN 'SAW'
                                    WHEN A.RES_GRP_3 = 'DIE ATTACH' AND B.MAT_GRP_2 = 'DFN' THEN 'DA(DFN)'
                                    WHEN A.RES_GRP_3 = 'DIE ATTACH' AND REGEXP_LIKE(A.RES_GRP_6, 'ESEC2100SD|SDB-30UST|^DB*|^SPA*') THEN 'DA(Epoxy)'
                                    WHEN A.RES_GRP_3 = 'LAMINATION' THEN 'LAMI'
                                    ELSE 'DA'
                               END OPER_GRP
                             , RES_CNT
                             , RUN_CNT
                          FROM (
                                SELECT A.RES_STS_2
                                     , '20200409' AS WORK_DATE
                                     , A.RES_GRP_3
                                     , A.RES_GRP_6
                                     , COUNT(A.RES_ID) AS RES_CNT
                                     , NVL(SUM(DECODE(RES_UP_DOWN_FLAG, 'U', DECODE(NVL(B.START_RES_ID, '-'), '-', 0, 1))), 0) AS RUN_CNT
                                  FROM MRASRESDEF A
                                     , (
                                        SELECT DISTINCT START_RES_ID
                                          FROM MWIPLOTSTS
                                         WHERE FACTORY = 'HMVA2'
                                           AND LOT_TYPE = 'W'
                                           AND LOT_DEL_FLAG = ' '
                                           AND LOT_CMF_5 LIKE 'P%' 
                                           AND REGEXP_LIKE(OPER, 'A040*|A0033|A0040|A0230|A1000|A060*|A1750|A0030|A0200|A0020|A1825')
                                           AND LOT_STATUS = 'PROC'
                                       ) B
                                 WHERE 1=1
                                   AND A.RES_ID = B.START_RES_ID(+)
                                   AND A.FACTORY = 'HMVA2'
                                   AND A.RES_CMF_9 = 'Y'
                                   AND A.RES_CMF_7 = 'Y'
                                   AND (A.RES_STS_1 NOT IN ('C200', 'B199') OR A.RES_UP_DOWN_FLAG = 'U') 
                                   AND A.DELETE_FLAG  = ' '
                                   AND A.RES_TYPE  = 'EQUIPMENT'
                                   AND (A.RES_GRP_3 IN ('SDBG','BACK LAP','WAFER EXPANDING','DIE ATTACH', 'WIRE BOND', 'SAW SORTER', 'SAW', 'LAMINATION') OR A.RES_ID IN ('M-A57','M-A59','M-A60'))
                                 GROUP BY A.RES_STS_2, A.RES_GRP_3, A.RES_GRP_6
                                 UNION ALL
                                SELECT RES_STS_2
                                     , SUBSTR(CUTOFF_DT, 1, 8) AS WORK_DATE
                                     , RES_GRP_3
                                     , RES_GRP_6
                                     , COUNT(RES_ID) AS RES_CNT
                                     , SUM(DECODE(RES_UP_DOWN_FLAG, 'U', 1, 0)) AS RUN_CNT
                                  FROM MRASRESDEF_BOH
                                 WHERE FACTORY = 'HMVA2'
                                   AND CUTOFF_DT BETWEEN '2020040822' AND '2020040822'
                                   AND SUBSTR(CUTOFF_DT, -2) = '22'
                                   AND RES_CMF_9 = 'Y'
                                   AND RES_CMF_7 = 'Y'
                                   AND (RES_STS_1 NOT IN ('C200', 'B199') OR RES_UP_DOWN_FLAG = 'U') 
                                   AND DELETE_FLAG  = ' '
                                   AND RES_TYPE  = 'EQUIPMENT'
                                   AND (RES_GRP_3 IN ('SDBG','BACK LAP','WAFER EXPANDING','DIE ATTACH', 'WIRE BOND', 'SAW SORTER', 'SAW', 'LAMINATION') OR RES_ID IN ('M-A57','M-A59','M-A60'))
                                 GROUP BY RES_STS_2, SUBSTR(CUTOFF_DT, 1, 8), RES_GRP_3, RES_GRP_6
                               ) A
                             , (
                                SELECT MAT_ID, MAT_GRP_2
                                     , (SELECT DATA_2 FROM MGCMTBLDAT WHERE FACTORY = 'HMVA2' AND TABLE_NAME = 'H_FAMILY' AND KEY_1 = MAT_GRP_2) AS DA_TYPE
                                  FROM MWIPMATDEF
                                 WHERE FACTORY = 'HMVA2'
                                   AND MAT_TYPE = 'FG'
                               ) B
                 WHERE A.RES_STS_2 = B.MAT_ID(+)
                       )
                 GROUP BY RES_STS_2, OPER_GRP
               ) RES
         WHERE 1=1
           AND MAT.OPER_GRP = SHP.END_OPER_GRP(+)
           AND MAT.OPER_GRP = WIP.WIP_OPER_GRP(+)
           AND MAT.OPER_GRP = RES.RES_OPER_GRP(+)
           AND MAT.MAT_ID = SHP.END_MAT_ID(+)
           AND MAT.MAT_ID = WIP.WIP_MAT_ID(+)
           AND MAT.MAT_ID = RES.RES_MAT_ID(+)
           AND NVL(SHP.END_TTL,0) + NVL(WIP.WIP_TTL,0) + NVL(RES.RES_TTL,0) > 0
       ) A
     , (SELECT DECODE(LEVEL, 1, '재공', 2, '실적', 3, '예상실적', 4, '설비대수', 5, 'RUN') AS GUBUN FROM DUAL CONNECT BY LEVEL <= 5 ) B
 GROUP BY A.OPER_GRP, A.OPER_GRP,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', B.GUBUN 
 ORDER BY DECODE(A.OPER_GRP, 'STOCK', 1, 'LAMI', 2, 'Stealth Saw', 3, 'BG', 4, 'DDS', 5, 'SAW', 6, 'DA', 7, 'DA(Epoxy)', 8, 'DA(DFN)', 9, 'WB', 10, 'C-MOLD', 11, 'SST', 12, 13), A.OPER_GRP,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', DECODE(B.GUBUN, '재공', 1, '실적', 2, '예상실적', 3, '설비대수', 4, 5) 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT A.OPER_GRP, (SELECT TO_NUMBER(DATA_1) FROM MGCMTBLDAT WHERE FACTORY = 'HMVA2' AND TABLE_NAME = 'H_OPER_GRP_TARGET' AND KEY_1 = A.OPER_GRP) AS TARGET,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ' 
     , B.GUBUN
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_0 ELSE WIP_0 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_0 ELSE END_0 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_0 ELSE EXP_0 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_0
                      WHEN B.GUBUN = 'RUN' THEN RUN_0
                 END), 0) AS D0
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_1 ELSE WIP_1 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_1 ELSE END_1 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_1 ELSE EXP_1 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_1
                      WHEN B.GUBUN = 'RUN' THEN RUN_1
                 END), 0) AS D1
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_2 ELSE WIP_2 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_2 ELSE END_2 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_2 ELSE EXP_2 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_2
                      WHEN B.GUBUN = 'RUN' THEN RUN_2
                 END), 0) AS D2
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_3 ELSE WIP_3 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_3 ELSE END_3 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_3 ELSE EXP_3 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_3
                      WHEN B.GUBUN = 'RUN' THEN RUN_3
                 END), 0) AS D3
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_4 ELSE WIP_4 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_4 ELSE END_4 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_4 ELSE EXP_4 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_4
                      WHEN B.GUBUN = 'RUN' THEN RUN_4
                 END), 0) AS D4
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_5 ELSE WIP_5 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_5 ELSE END_5 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_5 ELSE EXP_5 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_5
                      WHEN B.GUBUN = 'RUN' THEN RUN_5
                 END), 0) AS D5
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_6 ELSE WIP_6 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_6 ELSE END_6 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_6 ELSE EXP_6 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_6
                      WHEN B.GUBUN = 'RUN' THEN RUN_6
                 END), 0) AS D6
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_7 ELSE WIP_7 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_7 ELSE END_7 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_7 ELSE EXP_7 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_7
                      WHEN B.GUBUN = 'RUN' THEN RUN_7
                 END), 0) AS D7
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_8 ELSE WIP_8 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_8 ELSE END_8 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_8 ELSE EXP_8 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_8
                      WHEN B.GUBUN = 'RUN' THEN RUN_8
                 END), 0) AS D8
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_TTL ELSE WIP_TTL / 1000 END)
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_TTL ELSE END_TTL / 1000 END)
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_TTL ELSE EXP_TTL / 1000 END)
                      WHEN B.GUBUN = '설비대수' THEN RES_TTL
                      WHEN B.GUBUN = 'RUN' THEN RUN_TTL
                 END), 0) AS TTL
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_TTL ELSE WIP_TTL / 1000 END)
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_TTL ELSE END_TTL / 1000 END)
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_TTL ELSE EXP_TTL / 1000 END)
                      WHEN B.GUBUN = '설비대수' THEN RES_TTL
                      WHEN B.GUBUN = 'RUN' THEN RUN_TTL
                 END) / 9, 0) AS AVG
  FROM (
        SELECT *
          FROM (
                SELECT *
                  FROM (
                        SELECT A.*
                             , B.*
                             , NVL((SELECT DATA_10 FROM MGCMTBLDAT WHERE TABLE_NAME = 'H_CUSTOMER' AND FACTORY = 'HMVA2' AND  KEY_1 = B.MAT_GRP_1), '-') AS CUST_TYPE
                             , (SELECT KEY_3 FROM MGCMTBLDAT WHERE FACTORY = 'HMVA2' AND TABLE_NAME = 'H_PKG_2D_CMOLD' AND KEY_1 = 'C-MOLD' AND KEY_2 = B.MAT_GRP_1 AND KEY_3 = B.MAT_CMF_11 AND (KEY_4 = '%' OR KEY_4 = B.MAT_ID)) AS KEY_3
                          FROM (
                                SELECT DECODE(LEVEL, 1, 'STOCK', 2, 'LAMI', 3, 'Stealth Saw', 4, 'BG', 5, 'DDS', 6, 'SAW', 7, 'DA(Epoxy)', 8, 'DA(DFN)', 9, 'WB', 10, 'C-MOLD', 11, 'SST', 12, 'HMK3') AS OPER_GRP
                                  FROM DUAL CONNECT BY LEVEL <= 12 
                               ) A 
                             , MWIPMATDEF B 
                         WHERE B.FACTORY = 'HMVA2'
                           AND B.MAT_TYPE = 'FG'
                           AND B.DELETE_FLAG = ' '
                       )
                 WHERE (OPER_GRP <> 'C-MOLD' OR KEY_3 IS NOT NULL)
               ) MAT
             , (
                SELECT MAT_ID AS END_MAT_ID
                     , OPER_GRP AS END_OPER_GRP
                     , SUM(CONV_END_QTY) AS END_TTL
                     , SUM(DECODE(WORK_DATE, '20200409', 0, CONV_END_QTY)) + (SUM(DECODE(WORK_DATE, '20200409', CONV_END_QTY , 0)) / 11.0369006133611 * 24) AS EXP_TTL
                     , SUM(DECODE(WORK_DATE, '20200401', CONV_END_QTY, 0)) AS END_0
                     , SUM(DECODE(WORK_DATE, '20200402', CONV_END_QTY, 0)) AS END_1
                     , SUM(DECODE(WORK_DATE, '20200403', CONV_END_QTY, 0)) AS END_2
                     , SUM(DECODE(WORK_DATE, '20200404', CONV_END_QTY, 0)) AS END_3
                     , SUM(DECODE(WORK_DATE, '20200405', CONV_END_QTY, 0)) AS END_4
                     , SUM(DECODE(WORK_DATE, '20200406', CONV_END_QTY, 0)) AS END_5
                     , SUM(DECODE(WORK_DATE, '20200407', CONV_END_QTY, 0)) AS END_6
                     , SUM(DECODE(WORK_DATE, '20200408', CONV_END_QTY, 0)) AS END_7
                     , SUM(DECODE(WORK_DATE, '20200409', CONV_END_QTY, 0)) AS END_8
                     , SUM(DECODE(WORK_DATE, '20200401', CONV_END_QTY, 0)) AS EXP_0
                     , SUM(DECODE(WORK_DATE, '20200402', CONV_END_QTY, 0)) AS EXP_1
                     , SUM(DECODE(WORK_DATE, '20200403', CONV_END_QTY, 0)) AS EXP_2
                     , SUM(DECODE(WORK_DATE, '20200404', CONV_END_QTY, 0)) AS EXP_3
                     , SUM(DECODE(WORK_DATE, '20200405', CONV_END_QTY, 0)) AS EXP_4
                     , SUM(DECODE(WORK_DATE, '20200406', CONV_END_QTY, 0)) AS EXP_5
                     , SUM(DECODE(WORK_DATE, '20200407', CONV_END_QTY, 0)) AS EXP_6
                     , SUM(DECODE(WORK_DATE, '20200408', CONV_END_QTY, 0)) AS EXP_7
                     , SUM(DECODE(WORK_DATE, '20200409', CONV_END_QTY, 0)) / 11.0369006133611 * 24 AS EXP_8
                  FROM (
                        SELECT A.MAT_ID
                             , A.WORK_DATE
                             , CASE WHEN A.OPER = 'A0033' THEN 'Stealth Saw'
                                    WHEN A.OPER IN ('A0040', 'A0030') THEN 'BG'
                                    WHEN A.OPER = 'A0230' THEN 'DDS'
                                    WHEN A.OPER = 'A1000' THEN 'C-MOLD'
                                    WHEN A.OPER LIKE 'A060%' THEN 'WB'
                                    WHEN A.OPER IN ('A1750', 'A1825') THEN 'SST'
                                    WHEN A.OPER = 'A0200' THEN 'SAW'
                                    WHEN A.OPER LIKE 'A040%' AND B.MAT_GRP_2 = 'DFN' THEN 'DA(DFN)'
                                    WHEN A.OPER LIKE 'A040%' AND E.DA_TYPE = 'Epoxy' THEN 'DA(Epoxy)'
                                    WHEN A.OPER = 'A0000' THEN 'STOCK'
                                    WHEN A.OPER = 'A0020' THEN 'LAMI'
                                    WHEN A.OPER = 'AZ010' THEN 'HMK3'
                                    ELSE ''
                               END OPER_GRP
                             , CASE WHEN A.OPER = 'AZ010' THEN DECODE(B.MAT_GRP_3, 'COB', 0, 'BGN', 0, (S1_MOVE_QTY_1+S2_MOVE_QTY_1+S3_MOVE_QTY_1))
                                    WHEN A.OPER = 'A0000' THEN (S1_OPER_IN_QTY_1+S2_OPER_IN_QTY_1+S3_OPER_IN_QTY_1)
                                    ELSE (S1_END_QTY_1+S2_END_QTY_1+S3_END_QTY_1)
                               END AS END_QTY
                             , CASE WHEN A.OPER = 'A0000' THEN (S1_OPER_IN_QTY_2+S2_OPER_IN_QTY_2+S3_OPER_IN_QTY_2)
                                    WHEN A.OPER IN ('A0033', 'A0040', 'A0230', 'A0030', 'A0200', 'A0020') THEN (S1_END_QTY_2+S2_END_QTY_2+S3_END_QTY_2)
                                    WHEN A.OPER LIKE 'A040%' AND B.MAT_ID LIKE 'SEK%' THEN (S1_END_QTY_1+S2_END_QTY_1+S3_END_QTY_1) * NVL(C.DATA_1,1)
                                    WHEN A.OPER LIKE 'A040%' AND (B.MAT_GRP_5 IN ('1st', 'Merge') OR B.MAT_GRP_5 LIKE 'Middle%') THEN (S1_END_QTY_1+S2_END_QTY_1+S3_END_QTY_1) * NVL(C.DATA_1,1)
                                    WHEN A.OPER LIKE 'A060%' THEN (S1_END_QTY_1+S2_END_QTY_1+S3_END_QTY_1) * (CASE WHEN D.WIRE_CNT IS NOT NULL THEN D.WIRE_CNT
                                                                                           WHEN B.MAT_GRP_6 NOT IN ('-','0') THEN B.MAT_GRP_6
                                                                                           ELSE '1' END)
                                    WHEN A.OPER = 'AZ010' THEN DECODE(B.MAT_GRP_3, 'COB', 0, 'BGN', 0, (S1_MOVE_QTY_1+S2_MOVE_QTY_1+S3_MOVE_QTY_1))
                                    ELSE (S1_END_QTY_1+S2_END_QTY_1+S3_END_QTY_1)
                               END AS CONV_END_QTY
                          FROM RSUMWIPMOV A
                             , MWIPMATDEF B
                             , (
                                SELECT KEY_1 AS MAT_ID, DATA_1
                                  FROM MGCMTBLDAT 
                                 WHERE FACTORY = 'HMVA2'
                                   AND TABLE_NAME IN ('H_SEC_AUTO_LOSS','H_HX_AUTO_LOSS')
                               ) C
                             , (
                                SELECT MAT_ID, OPER, TCD_CMF_2 AS WIRE_CNT
                                  FROM CWIPTCDDEF@RPTTOMES 
                                 WHERE FACTORY = 'HMVA2'
                                   AND OPER LIKE 'A060%'
                                   AND SET_FLAG = 'Y'
                                   AND TCD_CMF_2 <> ' '
                               ) D
                             , (
                                SELECT KEY_1 AS MAT_GRP_2, DATA_2 AS DA_TYPE
                                  FROM MGCMTBLDAT 
                                 WHERE FACTORY = 'HMVA2'
                                   AND TABLE_NAME = 'H_FAMILY'
                               ) E
                         WHERE 1=1
                           AND A.FACTORY = B.FACTORY
                           AND A.MAT_ID = B.MAT_ID
                           AND A.MAT_ID = C.MAT_ID(+)
                           AND A.MAT_ID = D.MAT_ID(+)
                           AND A.OPER = D.OPER(+)
                           AND B.MAT_GRP_2 = E.MAT_GRP_2(+)
                           AND A.FACTORY = 'HMVA2'
                           AND A.WORK_DATE BETWEEN '20200401' AND '20200409'
                           AND A.LOT_TYPE = 'W'
                           AND B.DELETE_FLAG = ' '
                           AND B.MAT_TYPE = 'FG'
                           AND A.FACTORY NOT IN ('RETURN') 
                           AND A.CM_KEY_3 LIKE 'P%' 
                           AND REGEXP_LIKE(A.OPER, 'A040*|A0033|A0040|A0230|A1000|A060*|A1750|A0030|A0000|A0020|AZ010|A1825|A0200')
                       )
                 GROUP BY MAT_ID, OPER_GRP
               ) SHP
             , (
                SELECT MAT_ID AS WIP_MAT_ID
                     , OPER_GRP AS WIP_OPER_GRP
                     , SUM(CONV_WIP_QTY) AS WIP_TTL
                     , SUM(DECODE(WORK_DATE, '20200401', CONV_WIP_QTY, 0)) AS WIP_0
                     , SUM(DECODE(WORK_DATE, '20200402', CONV_WIP_QTY, 0)) AS WIP_1
                     , SUM(DECODE(WORK_DATE, '20200403', CONV_WIP_QTY, 0)) AS WIP_2
                     , SUM(DECODE(WORK_DATE, '20200404', CONV_WIP_QTY, 0)) AS WIP_3
                     , SUM(DECODE(WORK_DATE, '20200405', CONV_WIP_QTY, 0)) AS WIP_4
                     , SUM(DECODE(WORK_DATE, '20200406', CONV_WIP_QTY, 0)) AS WIP_5
                     , SUM(DECODE(WORK_DATE, '20200407', CONV_WIP_QTY, 0)) AS WIP_6
                     , SUM(DECODE(WORK_DATE, '20200408', CONV_WIP_QTY, 0)) AS WIP_7
                     , SUM(DECODE(WORK_DATE, '20200409', CONV_WIP_QTY, 0)) AS WIP_8
                  FROM (
                        SELECT A.MAT_ID, WORK_DATE
                             , CASE WHEN A.OPER = 'A0033' THEN 'Stealth Saw'
                                    WHEN A.OPER IN ('A0040', 'A0030') THEN 'BG'
                                    WHEN A.OPER = 'A0230' THEN 'DDS'
                                    WHEN A.OPER IN ('A1000', 'A0950') THEN 'C-MOLD'
                                    WHEN A.OPER LIKE 'A060%' OR A.OPER LIKE 'A055%' THEN 'WB'
                                    WHEN A.OPER IN ('A1750', 'A1825') THEN 'SST'
                                    WHEN A.OPER = 'A0200' THEN 'SAW'
                                    WHEN (A.OPER LIKE 'A040%' OR A.OPER = 'A0250') AND B.MAT_GRP_2 = 'DFN' THEN 'DA(DFN)'
                                    WHEN (A.OPER LIKE 'A040%' OR A.OPER = 'A0250') AND B.DA_TYPE = 'Epoxy' THEN 'DA(Epoxy)'
                                    WHEN A.OPER = 'A0000' THEN 'STOCK'
                                    WHEN A.OPER = 'A0020' THEN 'LAMI'
                                    WHEN A.OPER = 'AZ010' THEN 'HMK3'
                                    ELSE ''
                               END OPER_GRP
                             , CASE WHEN A.OPER IN ('A0033', 'A0040', 'A0030', 'A0230', 'A0200', 'A0000', 'A0020') THEN WIP_QTY
                                    WHEN B.GUBUN = 'O' THEN WIP_QTY
                                    ELSE 0
                               END WIP_QTY
                             , CASE WHEN A.OPER IN ('A0033', 'A0040', 'A0030', 'A0230', 'A0200', 'A0000', 'A0020') THEN WIP_QTY_2
                                    WHEN A.OPER LIKE 'A040%' AND B.GUBUN = 'O' THEN WIP_QTY * COMP_CNT
                                    WHEN A.OPER LIKE 'A060%' AND B.GUBUN = 'O' THEN WIP_QTY * (CASE WHEN C.WIRE_CNT IS NOT NULL THEN C.WIRE_CNT
                                                                                                    WHEN B.MAT_GRP_6 NOT IN ('-','0') THEN B.MAT_GRP_6
                                                                                                    ELSE '1' END)
                                    WHEN B.GUBUN = 'O' THEN WIP_QTY
                                    ELSE 0
                               END AS CONV_WIP_QTY
                          FROM (
                                SELECT MAT_ID
                                     , '20200409' AS WORK_DATE
                                     , OPER
                                     , QTY_1 AS WIP_QTY
                                     , QTY_2 AS WIP_QTY_2
                                  FROM RWIPLOTSTS
                                 WHERE FACTORY = 'HMVA2'
                                   AND LOT_TYPE = 'W'
                                   AND LOT_DEL_FLAG = ' '
                                   AND REGEXP_LIKE(OPER, 'A040*|A0033|A0040|A0230|A1000|A0950|A060*|A1750|A0030|A0200|A0000|A0020|AZ010|A0250|A050*|A053*|A055*|A1825') 
                                   AND LOT_CMF_5 LIKE 'P%' 
                                 UNION ALL
                                SELECT MAT_ID
                                     , WORK_DATE
                                     , OPER
                                     , EOH_QTY_1 AS WIP_QTY
                                     , EOH_QTY_2 AS WIP_QTY_2
                                  FROM RSUMWIPEOH
                                 WHERE FACTORY = 'HMVA2'
                                   AND LOT_TYPE = 'W'
                                   AND REGEXP_LIKE(OPER, 'A040*|A0033|A0040|A0230|A1000|A0950|A060*|A1750|A0030|A0200|A0000|A0020|AZ010|A0250|A050*|A053*|A055*|A1825')
                                   AND WORK_DATE BETWEEN '20200401' AND '20200408'
                                   AND SHIFT = '3'
                                   AND CM_KEY_3 LIKE 'P%' 
                               ) A
                             , (
                                SELECT *
                                  FROM (
                                        SELECT MAT_ID, MAT_GRP_2, MAT_GRP_4, MAT_GRP_5, MAT_GRP_6, MAT_CMF_11
                                             , CASE WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-'
                                                         THEN (CASE WHEN MAT_GRP_5 IN ('1st','Merge') OR MAT_GRP_5 LIKE 'Middle%' THEN 'O' ELSE '' END)
                                                    WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 = '-' THEN '' 
                                                    ELSE 'O'
                                               END GUBUN
                                             , (SELECT DATA_2 FROM MGCMTBLDAT WHERE FACTORY = 'HMVA2' AND TABLE_NAME = 'H_FAMILY' AND KEY_1 = MAT_GRP_2) AS DA_TYPE
                                             , COMP_CNT
                                          FROM VWIPMATDEF
                                         WHERE FACTORY = 'HMVA2'
                                           AND MAT_TYPE = 'FG'
                                           AND DELETE_FLAG = ' '
                                           AND MAT_GRP_2 <> '-'
                                       )
                               ) B
                             , (
                                SELECT MAT_ID, OPER, TCD_CMF_2 AS WIRE_CNT
                                  FROM CWIPTCDDEF@RPTTOMES
                                 WHERE FACTORY = 'HMVA2'
                                   AND OPER LIKE 'A060%'
                                   AND SET_FLAG = 'Y'
                                   AND TCD_CMF_2 <> ' '
                               ) C
                         WHERE A.MAT_ID = B.MAT_ID
                           AND A.MAT_ID = C.MAT_ID(+)
                           AND A.OPER = C.OPER(+)
                       )
                 GROUP BY MAT_ID, OPER_GRP
               ) WIP
             , (
                SELECT RES_STS_2 AS RES_MAT_ID
                     , OPER_GRP AS RES_OPER_GRP 
                     , SUM(RES_CNT) AS RES_TTL
                     , SUM(RUN_CNT) AS RUN_TTL
                     , SUM(DECODE(WORK_DATE, '20200401', RES_CNT, 0)) AS RES_0
                     , SUM(DECODE(WORK_DATE, '20200402', RES_CNT, 0)) AS RES_1
                     , SUM(DECODE(WORK_DATE, '20200403', RES_CNT, 0)) AS RES_2
                     , SUM(DECODE(WORK_DATE, '20200404', RES_CNT, 0)) AS RES_3
                     , SUM(DECODE(WORK_DATE, '20200405', RES_CNT, 0)) AS RES_4
                     , SUM(DECODE(WORK_DATE, '20200406', RES_CNT, 0)) AS RES_5
                     , SUM(DECODE(WORK_DATE, '20200407', RES_CNT, 0)) AS RES_6
                     , SUM(DECODE(WORK_DATE, '20200408', RES_CNT, 0)) AS RES_7
                     , SUM(DECODE(WORK_DATE, '20200409', RES_CNT, 0)) AS RES_8
                     , SUM(DECODE(WORK_DATE, '20200401', RUN_CNT, 0)) AS RUN_0
                     , SUM(DECODE(WORK_DATE, '20200402', RUN_CNT, 0)) AS RUN_1
                     , SUM(DECODE(WORK_DATE, '20200403', RUN_CNT, 0)) AS RUN_2
                     , SUM(DECODE(WORK_DATE, '20200404', RUN_CNT, 0)) AS RUN_3
                     , SUM(DECODE(WORK_DATE, '20200405', RUN_CNT, 0)) AS RUN_4
                     , SUM(DECODE(WORK_DATE, '20200406', RUN_CNT, 0)) AS RUN_5
                     , SUM(DECODE(WORK_DATE, '20200407', RUN_CNT, 0)) AS RUN_6
                     , SUM(DECODE(WORK_DATE, '20200408', RUN_CNT, 0)) AS RUN_7
                     , SUM(DECODE(WORK_DATE, '20200409', RUN_CNT, 0)) AS RUN_8
                  FROM (
                        SELECT RES_STS_2
                             , WORK_DATE
                             , CASE WHEN A.RES_GRP_3 = 'SDBG' THEN 'Stealth Saw'
                                    WHEN A.RES_GRP_3 = 'BACK LAP' THEN 'BG'
                                    WHEN A.RES_GRP_3 = 'WAFER EXPANDING' THEN 'DDS'
                                    WHEN A.RES_GRP_3 = 'MOLD' THEN 'C-MOLD'
                                    WHEN A.RES_GRP_3 = 'WIRE BOND' THEN 'WB'
                                    WHEN A.RES_GRP_3 = 'SAW SORTER' THEN 'SST'
                                    WHEN A.RES_GRP_3 = 'SAW' THEN 'SAW'
                                    WHEN A.RES_GRP_3 = 'DIE ATTACH' AND B.MAT_GRP_2 = 'DFN' THEN 'DA(DFN)'
                                    WHEN A.RES_GRP_3 = 'DIE ATTACH' AND REGEXP_LIKE(A.RES_GRP_6, 'ESEC2100SD|SDB-30UST|^DB*|^SPA*') THEN 'DA(Epoxy)'
                                    WHEN A.RES_GRP_3 = 'LAMINATION' THEN 'LAMI'
                                    ELSE 'DA'
                               END OPER_GRP
                             , RES_CNT
                             , RUN_CNT
                          FROM (
                                SELECT A.RES_STS_2
                                     , '20200409' AS WORK_DATE
                                     , A.RES_GRP_3
                                     , A.RES_GRP_6
                                     , COUNT(A.RES_ID) AS RES_CNT
                                     , NVL(SUM(DECODE(RES_UP_DOWN_FLAG, 'U', DECODE(NVL(B.START_RES_ID, '-'), '-', 0, 1))), 0) AS RUN_CNT
                                  FROM MRASRESDEF A
                                     , (
                                        SELECT DISTINCT START_RES_ID
                                          FROM MWIPLOTSTS
                                         WHERE FACTORY = 'HMVA2'
                                           AND LOT_TYPE = 'W'
                                           AND LOT_DEL_FLAG = ' '
                                           AND LOT_CMF_5 LIKE 'P%' 
                                           AND REGEXP_LIKE(OPER, 'A040*|A0033|A0040|A0230|A1000|A060*|A1750|A0030|A0200|A0020|A1825')
                                           AND LOT_STATUS = 'PROC'
                                       ) B
                                 WHERE 1=1
                                   AND A.RES_ID = B.START_RES_ID(+)
                                   AND A.FACTORY = 'HMVA2'
                                   AND A.RES_CMF_9 = 'Y'
                                   AND A.RES_CMF_7 = 'Y'
                                   AND (A.RES_STS_1 NOT IN ('C200', 'B199') OR A.RES_UP_DOWN_FLAG = 'U') 
                                   AND A.DELETE_FLAG  = ' '
                                   AND A.RES_TYPE  = 'EQUIPMENT'
                                   AND (A.RES_GRP_3 IN ('SDBG','BACK LAP','WAFER EXPANDING','DIE ATTACH', 'WIRE BOND', 'SAW SORTER', 'SAW', 'LAMINATION') OR A.RES_ID IN ('M-A57','M-A59','M-A60'))
                                 GROUP BY A.RES_STS_2, A.RES_GRP_3, A.RES_GRP_6
                                 UNION ALL
                                SELECT RES_STS_2
                                     , SUBSTR(CUTOFF_DT, 1, 8) AS WORK_DATE
                                     , RES_GRP_3
                                     , RES_GRP_6
                                     , COUNT(RES_ID) AS RES_CNT
                                     , SUM(DECODE(RES_UP_DOWN_FLAG, 'U', 1, 0)) AS RUN_CNT
                                  FROM MRASRESDEF_BOH
                                 WHERE FACTORY = 'HMVA2'
                                   AND CUTOFF_DT BETWEEN '2020040122' AND '2020040822'
                                   AND SUBSTR(CUTOFF_DT, -2) = '22'
                                   AND RES_CMF_9 = 'Y'
                                   AND RES_CMF_7 = 'Y'
                                   AND (RES_STS_1 NOT IN ('C200', 'B199') OR RES_UP_DOWN_FLAG = 'U') 
                                   AND DELETE_FLAG  = ' '
                                   AND RES_TYPE  = 'EQUIPMENT'
                                   AND (RES_GRP_3 IN ('SDBG','BACK LAP','WAFER EXPANDING','DIE ATTACH', 'WIRE BOND', 'SAW SORTER', 'SAW', 'LAMINATION') OR RES_ID IN ('M-A57','M-A59','M-A60'))
                                 GROUP BY RES_STS_2, SUBSTR(CUTOFF_DT, 1, 8), RES_GRP_3, RES_GRP_6
                               ) A
                             , (
                                SELECT MAT_ID, MAT_GRP_2
                                     , (SELECT DATA_2 FROM MGCMTBLDAT WHERE FACTORY = 'HMVA2' AND TABLE_NAME = 'H_FAMILY' AND KEY_1 = MAT_GRP_2) AS DA_TYPE
                                  FROM MWIPMATDEF
                                 WHERE FACTORY = 'HMVA2'
                                   AND MAT_TYPE = 'FG'
                               ) B
                 WHERE A.RES_STS_2 = B.MAT_ID(+)
                       )
                 GROUP BY RES_STS_2, OPER_GRP
               ) RES
         WHERE 1=1
           AND MAT.OPER_GRP = SHP.END_OPER_GRP(+)
           AND MAT.OPER_GRP = WIP.WIP_OPER_GRP(+)
           AND MAT.OPER_GRP = RES.RES_OPER_GRP(+)
           AND MAT.MAT_ID = SHP.END_MAT_ID(+)
           AND MAT.MAT_ID = WIP.WIP_MAT_ID(+)
           AND MAT.MAT_ID = RES.RES_MAT_ID(+)
           AND NVL(SHP.END_TTL,0) + NVL(WIP.WIP_TTL,0) + NVL(RES.RES_TTL,0) > 0
       ) A
     , (SELECT DECODE(LEVEL, 1, '재공', 2, '실적', 3, '예상실적', 4, '설비대수', 5, 'RUN') AS GUBUN FROM DUAL CONNECT BY LEVEL <= 5 ) B
 GROUP BY A.OPER_GRP, A.OPER_GRP,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', B.GUBUN 
 ORDER BY DECODE(A.OPER_GRP, 'STOCK', 1, 'LAMI', 2, 'Stealth Saw', 3, 'BG', 4, 'DDS', 5, 'SAW', 6, 'DA', 7, 'DA(Epoxy)', 8, 'DA(DFN)', 9, 'WB', 10, 'C-MOLD', 11, 'SST', 12, 13), A.OPER_GRP,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', DECODE(B.GUBUN, '재공', 1, '실적', 2, '예상실적', 3, '설비대수', 4, 5) 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
SELECT PLAN_YEAR || LPAD(PLAN_WEEK,2,0) AS WEEK
  FROM MWIPCALDEF
 WHERE CALENDAR_ID = 'OTD'
   AND SYS_DATE IN ('20200409', '20200416', '20200423', '20200430', '20200507')
 ORDER BY PLAN_YEAR || LPAD(PLAN_WEEK,2,0)

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT LANGUAGE_2 FROM RWEBFUNDEF WHERE FUNC_NAME = 'MAT070505'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT PLAN_YEAR || LPAD(PLAN_WEEK,2,0) AS WEEK
  FROM MWIPCALDEF
 WHERE CALENDAR_ID = 'OTD'
   AND SYS_DATE IN ('20200409', '20200416', '20200423', '20200430', '20200507')
 ORDER BY PLAN_YEAR || LPAD(PLAN_WEEK,2,0)

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE) AS START_DAY 
     , MAX(SYS_DATE) AS END_DAY 
     , PLAN_YEAR||DECODE(LENGTH(PLAN_WEEK), 1, '0'||PLAN_WEEK, PLAN_WEEK) AS WEEK
  FROM MWIPCALDEF 
 WHERE CALENDAR_ID = 'OTD'
   AND (PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) IN ( 
                                                SELECT WW
                                                  FROM (
                                                        SELECT WW
                                                             , ROW_NUMBER() OVER(ORDER BY WW) AS RNK
                                                          FROM (
                                                                SELECT DISTINCT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW
                                                                  FROM MWIPCALDEF
                                                                 WHERE CALENDAR_ID = 'OTD'
                                                                   AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') >= (
                                                                                                              SELECT MAX(PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) AS WW
                                                                                                                FROM MWIPCALDEF
                                                                                                               WHERE CALENDAR_ID = 'OTD'
                                                                                                                 AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') < (SELECT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW FROM MWIPCALDEF WHERE CALENDAR_ID = 'OTD' AND SYS_DATE = '20200409')
                                                                                                                 AND SYS_DATE >= TO_CHAR(TO_DATE('20200409', 'YYYYMMDD')-14, 'YYYYMMDD')
                                                                                                             )
                                                               ) 
                                                       )
                                                 WHERE RNK <= 7
                                               ) 
 GROUP BY PLAN_YEAR, PLAN_WEEK 
 ORDER BY PLAN_YEAR, PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MAT_CODE, MAT_CODE_DESC,  ' ', MAT_CMF_11,  ' '
     , ROUND(SUM(PLN_W1) / 1, 0) AS PLN_W1
     , ROUND(SUM(SMT) / 1, 0) AS SMT_END
     , ROUND(SUM(AO_QTY) / 1, 0) AS AO_QTY
     , ROUND(SUM(AFTER_DA1) / 1, 0) AS AFTER_DA1
     , ROUND(SUM(SMT_DEF) / 1, 0) AS SMT_DEF
     , ROUND(SUM(SMT_DEF2) / 1, 0) AS SMT_DEF2
     , ROUND(SUM(SMT_DEF3) / 1, 0) AS SMT_DEF3
     , ROUND(SUM(SMT_OUT_TODAY) / 1, 0) AS SMT_OUT_TODAY
     , ROUND(SUM(SMT_OUT_YESTERDAY) / 1, 0) AS SMT_OUT_YESTERDAY
     , ROUND(SUM(SMT_TARGET) / 1, 0) AS SMT_TARGET
     , ROUND(SUM(DA1_CAPA) / 1, 0) AS DA1_CAPA
     , ROUND(SUM(BEFORE_DA1) / 1, 0) AS BEFORE_DA1
     , ROUND(SUM(DA_SMT) / 1, 0) AS DA_SMT
     , ROUND(SUM(PCB_SCH) / 1, 0) AS PCB_SCH
     , CASE WHEN SUM(PCB_SCH) = 0 THEN 0
            ELSE ROW_NUMBER() OVER(ORDER BY DECODE(SUM(PCB_SCH),0, 999, SUM(PCB_SCH)))
       END AS RNK
     , ROUND(SUM(TTL_WIP) / 1, 0) AS TTL_WIP
     , ROUND(SUM(SMT) / 1, 0) AS SMT
     , ROUND(SUM(SMT_WAIT) / 1, 0) AS SMT_WAIT
     , ROUND(SUM(WIK_WIP) / 1, 0) AS WIK_WIP
     , ROUND(SUM(INV_L_QTY) / 1, 0) AS INV_L_QTY
     , ROUND(SUM(INV_QTY) / 1, 0) AS INV_QTY
     , ROUND(CASE WHEN SUM(SMT_TARGET) > SUM(DA1_CAPA) THEN (CASE WHEN SUM(TTL_WAIT) > SUM(SMT_TARGET) THEN SUM(SMT_TARGET) ELSE SUM(TTL_WAIT) END)
                  ELSE (CASE WHEN SUM(TTL_WAIT) > SUM(DA1_CAPA) THEN SUM(DA1_CAPA) ELSE SUM(TTL_WAIT) END)
       END / 1, 0) AS GUIDE_D1
     , ROUND(CASE WHEN SUM(SMT_TARGET) > SUM(DA1_CAPA) THEN (CASE WHEN SUM(TTL_WAIT) > (SUM(SMT_TARGET) * 2) THEN SUM(SMT_TARGET) 
                                                                  WHEN SUM(TTL_WAIT) - SUM(SMT_TARGET) <= 0 THEN 0
                                                                  ELSE SUM(TTL_WAIT) - SUM(SMT_TARGET) END)
                  ELSE (CASE WHEN SUM(TTL_WAIT) > (SUM(DA1_CAPA) * 2) THEN SUM(DA1_CAPA) 
                             WHEN SUM(TTL_WAIT) - SUM(DA1_CAPA) <= 0 THEN 0
                             ELSE SUM(TTL_WAIT) - SUM(DA1_CAPA) END)
       END / 1, 0) AS GUIDE_D2
     , ROUND(CASE WHEN SUM(SMT_TARGET) > SUM(DA1_CAPA) THEN (CASE WHEN SUM(TTL_WAIT) > (SUM(SMT_TARGET) * 3) THEN SUM(SMT_TARGET) 
                                                                  WHEN SUM(TTL_WAIT) - (SUM(SMT_TARGET) * 2) <= 0 THEN 0
                                                                  ELSE SUM(TTL_WAIT) - (SUM(SMT_TARGET) * 2) END)
                  ELSE (CASE WHEN SUM(TTL_WAIT) > (SUM(DA1_CAPA) * 3) THEN SUM(DA1_CAPA) 
                             WHEN SUM(TTL_WAIT) - (SUM(DA1_CAPA) * 2) <= 0 THEN 0
                             ELSE SUM(TTL_WAIT) - (SUM(DA1_CAPA) * 2) END)
       END / 1, 0) AS GUIDE_D3
     , ROUND(CASE WHEN SUM(SMT_TARGET) > SUM(DA1_CAPA) THEN (CASE WHEN SUM(TTL_WAIT) > (SUM(SMT_TARGET) * 4) THEN SUM(SMT_TARGET) 
                                                                  WHEN SUM(TTL_WAIT) - (SUM(SMT_TARGET) * 3) <= 0 THEN 0
                                                                  ELSE SUM(TTL_WAIT) - (SUM(SMT_TARGET) * 3) END)
                  ELSE (CASE WHEN SUM(TTL_WAIT) > (SUM(DA1_CAPA) * 4) THEN SUM(DA1_CAPA) 
                             WHEN SUM(TTL_WAIT) - (SUM(DA1_CAPA) * 3) <= 0 THEN 0
                             ELSE SUM(TTL_WAIT) - (SUM(DA1_CAPA) * 3) END)
       END / 1, 0) AS GUIDE_D4
     , ROUND(SUM(ORDER_QTY) / 1, 0) AS ORDER_QTY
     , ROUND(SUM(PLN_W2) / 1, 0) AS PLN_W2
     , ROUND(SUM(PLN_W3) / 1, 0) AS PLN_W3
     , ROUND(SUM(PLN_W4) / 1, 0) AS PLN_W4
     , ROUND(SUM(PLN_W5) / 1, 0) AS PLN_W5
  FROM (
        SELECT MAT.MAT_CODE, MAT.MAT_CODE_DESC,  ' ', MAT.MAT_CMF_11,  ' '
             , SUM(NVL(MAT.PLN_W1,0)) AS PLN_W1
             , SUM(NVL(MAT.AO_QTY,0) + NVL(MAT.AFTER_DA1,0) + NVL(WIP.SMT,0)) AS SMT_END
             , SUM(NVL(MAT.PLN_W1,0) - (NVL(MAT.AO_QTY,0) + NVL(MAT.AFTER_DA1,0) + NVL(WIP.SMT,0))) AS SMT_DEF
             , SUM((NVL(MAT.PLN_W1,0) + NVL(MAT.PLN_W2,0)) - (NVL(MAT.AO_QTY,0) + NVL(MAT.AFTER_DA1,0) + NVL(WIP.SMT,0))) AS SMT_DEF2
             , SUM((NVL(MAT.PLN_W1,0) + NVL(MAT.PLN_W2,0) + NVL(MAT.PLN_W3,0)) - (NVL(MAT.AO_QTY,0) + NVL(MAT.AFTER_DA1,0) + NVL(WIP.SMT,0))) AS SMT_DEF3
             , SUM(NVL(MOV.SMT_OUT_YESTERDAY,0)) AS SMT_OUT_YESTERDAY
             , SUM(NVL(MOV.SMT_OUT_TODAY,0)) AS SMT_OUT_TODAY
             , ROUND(CASE TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'DY') WHEN '월' THEN SUM(NVL(MAT.PLN_W1,0) - (NVL(MAT.AO_QTY,0) + NVL(MAT.AFTER_DA1,0) + NVL(WIP.SMT,0)))
                                                                         WHEN '화' THEN SUM((NVL(MAT.PLN_W1,0) + NVL(MAT.PLN_W2,0)) - (NVL(MAT.AO_QTY,0) + NVL(MAT.AFTER_DA1,0) + NVL(WIP.SMT,0))) / 7
                                                                         WHEN '수' THEN SUM((NVL(MAT.PLN_W1,0) + NVL(MAT.PLN_W2,0)) - (NVL(MAT.AO_QTY,0) + NVL(MAT.AFTER_DA1,0) + NVL(WIP.SMT,0))) / 6
                                                                         WHEN '목' THEN SUM((NVL(MAT.PLN_W1,0) + NVL(MAT.PLN_W2,0)) - (NVL(MAT.AO_QTY,0) + NVL(MAT.AFTER_DA1,0) + NVL(WIP.SMT,0))) / 5
                                                                         WHEN '금' THEN SUM((NVL(MAT.PLN_W1,0) + NVL(MAT.PLN_W2,0)) - (NVL(MAT.AO_QTY,0) + NVL(MAT.AFTER_DA1,0) + NVL(WIP.SMT,0))) / 4
                                                                         WHEN '토' THEN SUM(NVL(MAT.PLN_W1,0) - (NVL(MAT.AO_QTY,0) + NVL(MAT.AFTER_DA1,0) + NVL(WIP.SMT,0))) / 3
                                                                         ELSE SUM(NVL(MAT.PLN_W1,0) - (NVL(MAT.AO_QTY,0) + NVL(MAT.AFTER_DA1,0) + NVL(WIP.SMT,0))) / 2
               END, 0) AS SMT_TARGET 
             , SUM(NVL(MAT.DA1_CAPA,0)) AS DA1_CAPA
             , SUM(NVL(MAT.BEFORE_DA1,0)) AS BEFORE_DA1
             , SUM(NVL(WIP.SMT,0) - NVL(MAT.BEFORE_DA1,0)) AS DA_SMT
             , CASE WHEN SUM(NVL(MAT.DA1_CAPA,0)) = 0 AND SUM(NVL(MAT.BEFORE_DA1,0)) > 0 THEN 72
                    WHEN SUM(NVL(MAT.DA1_CAPA,0)) = 0 THEN 0
                    ELSE ROUND(SUM(NVL(WIP.SMT,0)) / SUM(NVL(MAT.DA1_CAPA,0)) * 24, 2)
               END AS PCB_SCH
             , SUM(NVL(WIP.SMT,0) + NVL(WIP.SMT_WAIT,0) + NVL(WIK.WIK_WIP,0) + NVL(WMS.INV_L_QTY,0) + NVL(WMS.INV_QTY,0)) AS TTL_WIP
             , SUM(NVL(WIP.SMT_WAIT,0) + NVL(WMS.INV_L_QTY,0) + NVL(WMS.INV_QTY,0)) AS TTL_WAIT
             , SUM(NVL(WIP.SMT_WAIT,0)) AS SMT_WAIT
             , SUM(NVL(WIK.WIK_WIP,0)) AS WIK_WIP
             , SUM(NVL(WMS.INV_L_QTY,0)) AS INV_L_QTY
             , SUM(NVL(WMS.INV_QTY,0)) AS INV_QTY
             , SUM(NVL(ORD.ORDER_QTY,0)) AS ORDER_QTY
             , SUM(NVL(MAT.PLN_W2,0)) AS PLN_W2
             , SUM(NVL(MAT.PLN_W3,0)) AS PLN_W3
             , SUM(NVL(MAT.PLN_W4,0)) AS PLN_W4
             , SUM(NVL(MAT.PLN_W5,0)) AS PLN_W5
             , SUM(NVL(WIP.SMT,0)) AS SMT
             , SUM(NVL(MAT.AO_QTY,0)) AS AO_QTY
             , SUM(NVL(MAT.AFTER_DA1,0)) AS AFTER_DA1
          FROM (
                SELECT A.MAT_CODE, A.MAT_CODE_DESC,  ' ', A.MAT_CMF_11,  ' '
                     , SUM(NVL(B.PLN_W1,0)) AS PLN_W1
                     , SUM(NVL(B.PLN_W2,0)) AS PLN_W2
                     , SUM(NVL(B.PLN_W3,0)) AS PLN_W3
                     , SUM(NVL(B.PLN_W4,0)) AS PLN_W4
                     , SUM(NVL(B.PLN_W5,0)) AS PLN_W5
                     , SUM(NVL(C.AO_QTY,0)) AS AO_QTY
                     , SUM(NVL(D.AFTER_DA1,0)) AS AFTER_DA1
                     , SUM(NVL(D.BEFORE_DA1,0)) AS BEFORE_DA1
                     , SUM(NVL(E.DA1_CAPA,0)) AS DA1_CAPA 
                  FROM (
                        SELECT DISTINCT MAT_CODE, MAT_CODE_DESC, B.VENDOR_ID, B.MAT_CMF_11, B.MAT_ID
                          FROM (
                                SELECT DISTINCT A.MAT_ID AS MAT_CODE, A.MAT_DESC AS MAT_CODE_DESC, B.PARTNUMBER
                                  FROM MWIPMATDEF A
                                     , CWIPBOMDEF B
                                 WHERE 1=1
                                   AND A.MAT_ID = B.MATCODE
                                   AND A.FACTORY = 'HMVA2'
                                   AND A.DELETE_FLAG = ' '
                                   AND A.FIRST_FLOW IN ('HMAI','HMAJ','HMAR','HMBF', 'HMBJ')
                                   AND B.RESV_FLAG_1 = 'Y'
                                   AND B.RESV_FIELD_2 = 'PB'
                                   AND LENGTH(A.MAT_ID) = 10
                               ) A
                             , MWIPMATDEF B
                         WHERE A.PARTNUMBER = B.MAT_ID
                           AND B.FACTORY = 'HMVA2'
                           AND B.DELETE_FLAG = ' '
                           AND REGEXP_LIKE(B.MAT_GRP_5, '-|1st|Merge|Middle*')
                       ) A
                     , (
                        SELECT MAT_ID
                             , SUM(DECODE(PLAN_WEEK, '202015', WW_QTY, 0)) AS PLN_W1
                             , SUM(DECODE(PLAN_WEEK, '202016', WW_QTY, 0)) AS PLN_W2
                             , SUM(DECODE(PLAN_WEEK, '202017', WW_QTY, 0)) AS PLN_W3
                             , SUM(DECODE(PLAN_WEEK, '202018', WW_QTY, 0)) AS PLN_W4
                             , SUM(DECODE(PLAN_WEEK, '202019', WW_QTY, 0)) AS PLN_W5
                          FROM RWIPPLNWEK
                         WHERE 1=1
                           AND FACTORY = 'HMVA2'
                           AND GUBUN = '3'
                           AND PLAN_WEEK BETWEEN '202015' AND '202019'
                         GROUP BY MAT_ID
                       ) B
                     , (
                        SELECT MAT_ID 
                             , SUM(S1_FAC_OUT_QTY_1+S2_FAC_OUT_QTY_1+S3_FAC_OUT_QTY_1) AS AO_QTY
                          FROM RSUMFACMOV
                         WHERE 1=1
                           AND CM_KEY_1 = 'HMVA2'
                           AND WORK_DATE BETWEEN '20200404' AND '20200410'
                           AND LOT_TYPE = 'W'
                           AND FACTORY <> 'RETURN'
                         GROUP BY MAT_ID
                       ) C
                     , (
                        SELECT MAT_ID 
                             , SUM(CASE WHEN OPER > 'A0401' THEN QTY_1 ELSE 0 END) AS AFTER_DA1
                             , SUM(CASE WHEN OPER <= 'A0395' THEN QTY_1 / NVL(COMP_CNT,1)
                                        WHEN OPER <= 'A0401' THEN QTY_1
                                        ELSE 0 
                                   END) AS BEFORE_DA1 
                          FROM ( 
                                SELECT MAT_ID, OPER, QTY_1 
                                     , (SELECT DATA_1 FROM MGCMTBLDAT WHERE FACTORY = 'HMVA2' AND TABLE_NAME IN ('H_SEC_AUTO_LOSS','H_HX_AUTO_LOSS') AND KEY_1 = A.MAT_ID) AS COMP_CNT 
                                  FROM RWIPLOTSTS A
                                 WHERE 1=1   
                                   AND FACTORY = 'HMVA2'
                                   AND LOT_DEL_FLAG = ' '
                                   AND LOT_TYPE = 'W'
                                   AND OPER <> 'A0000'
                               ) 
                         GROUP BY MAT_ID
                       ) D
                     , (
                        SELECT RES.MAT_ID
                             , SUM(TRUNC(NVL(NVL(UPH.UPEH,0) * 24 * 0.68 * RES.RAS_CNT, 0))) AS DA1_CAPA
                          FROM ( 
                                SELECT FACTORY, RES_STS_2 AS MAT_ID, RES_STS_8 AS OPER                      
                                     , RES_GRP_6 AS RES_MODEL, RES_GRP_7 AS UPEH_GRP, COUNT(RES_ID) AS RAS_CNT 
                                  FROM MRASRESDEF 
                                 WHERE 1 = 1  
                                   AND FACTORY  = 'HMVA2' 
                                   AND RES_CMF_9 = 'Y' 
                                   AND RES_CMF_7 = 'Y' 
                                   AND DELETE_FLAG = ' ' 
                                   AND RES_STS_8 IN ('A0333', 'A0400', 'A0401')
                                 GROUP BY FACTORY,RES_STS_2,RES_STS_8,RES_GRP_6,RES_GRP_7 
                               ) RES 
                             , CRASUPHDEF UPH 
                         WHERE 1 = 1 
                           AND RES.FACTORY = UPH.FACTORY(+) 
                           AND RES.OPER = UPH.OPER(+) 
                           AND RES.RES_MODEL = UPH.RES_MODEL(+) 
                           AND RES.UPEH_GRP = UPH.UPEH_GRP(+) 
                           AND RES.MAT_ID = UPH.MAT_ID(+)
                         GROUP BY RES.MAT_ID 
                       ) E
                 WHERE 1=1
                   AND A.MAT_ID = B.MAT_ID(+)
                   AND A.MAT_ID = C.MAT_ID(+)
                   AND A.MAT_ID = D.MAT_ID(+)
                   AND A.MAT_ID = E.MAT_ID(+)
                 GROUP BY A.MAT_CODE, A.MAT_CODE_DESC,  ' ', A.MAT_CMF_11,  ' '
               ) MAT
             , (
                SELECT REPLACE(MAT_ID, '-O', '') AS MAT_CODE
                     , SUM(CASE WHEN GUBUN = 'SMT' THEN QTY_1 ELSE 0 END) SMT
                     , SUM(CASE WHEN GUBUN = 'SMT_WAIT' THEN QTY_1 ELSE 0 END) SMT_WAIT
                  FROM (
                        SELECT MAT_ID, OPER
                             , CASE WHEN OPER <= 'M0330' THEN 'SMT_WAIT' ELSE 'SMT' END AS GUBUN
                             , QTY_1
                          FROM RWIPLOTSTS
                         WHERE 1=1   
                           AND FACTORY = 'HMVA2'
                           AND LOT_TYPE = 'P'
                           AND LOT_DEL_FLAG = ' '
                           AND LOT_CMF_2 = '-'
                           AND LOT_CMF_9 != ' '
                           AND QTY_1 > 0
                           AND OPER <>  'V0000'
                           AND (OPER LIKE 'M%' OR OPER LIKE 'V%')
                       )
                 GROUP BY REPLACE(MAT_ID, '-O', '')
               ) WIP
             , (
                SELECT MAT_CODE
                     , SUM(INV_QTY) AS INV_QTY
                     , SUM(INV_L_QTY) AS INV_L_QTY
                  FROM (
                        SELECT MAT_ID AS MAT_CODE
                             , SUM(DECODE(STORAGE_LOCATION, '1000', QUANTITY, '1003', QUANTITY, 0)) AS INV_QTY
                             , SUM(DECODE(STORAGE_LOCATION, '1001', QUANTITY, 0)) AS INV_L_QTY
                          FROM CWMSLOTSTS@RPTTOMES
                         WHERE 1=1
                           AND QUANTITY> 0
                           AND STORAGE_LOCATION IN ('1000', '1001', '1003')
                           AND MAT_ID LIKE 'R16%'
                         GROUP BY MAT_ID 
                         UNION ALL 
                        SELECT MAT_ID, 0 AS INV_QTY, SUM(QTY_1) AS INV_L_QTY 
                          FROM CWIPMATSLP@RPTTOMES 
                         WHERE 1=1 
                           AND RECV_FLAG = ' ' 
                           AND MAT_ID LIKE 'R16%' 
                           AND IN_TIME BETWEEN '20200407000000' AND '20200409235959' 
                         GROUP BY MAT_ID 
                       )
                 GROUP BY MAT_CODE 
               ) WMS
             , (          
                SELECT REPLACE(MAT_ID, '-O', '') AS MAT_CODE
                     , SUM(LOT_QTY) AS WIK_WIP           
                  FROM ISTMWIKWIP@RPTTOMES
                 WHERE 1=1
                   AND CUTOFF_DT = '20200409' || TO_CHAR(SYSDATE, 'HH24')
                 GROUP BY REPLACE(MAT_ID, '-O', '')
               ) WIK
             , (
                SELECT REPLACE(MATCODE, '-O', '') AS MAT_CODE
                     , SUM(ORDER_QTY) AS ORDER_QTY
                  FROM RSUMWIPMAT
                 WHERE MAT_TYPE = 'PB'
                 GROUP BY REPLACE(MATCODE, '-O', '')  
               ) ORD
             , (
                SELECT MAT_ID AS MAT_CODE
                     , SUM(DECODE(WORK_DATE, '20200408', S1_END_QTY_1+S2_END_QTY_1+S3_END_QTY_1, 0)) AS SMT_OUT_YESTERDAY
                     , SUM(DECODE(WORK_DATE, '20200409', S1_END_QTY_1+S2_END_QTY_1+S3_END_QTY_1, 0)) AS SMT_OUT_TODAY
                  FROM RSUMWIPMOV
                 WHERE 1=1
                   AND FACTORY = 'HMVA2'
                   AND WORK_DATE IN ('20200408','20200409')
                   AND OPER = 'M0330'
                 GROUP BY MAT_ID
               ) MOV
         WHERE 1=1
           AND MAT.MAT_CODE = WIP.MAT_CODE(+)
           AND MAT.MAT_CODE = WMS.MAT_CODE(+)
           AND MAT.MAT_CODE = WIK.MAT_CODE(+)
           AND MAT.MAT_CODE = ORD.MAT_CODE(+)
           AND MAT.MAT_CODE = MOV.MAT_CODE(+)
         GROUP BY MAT.MAT_CODE, MAT.MAT_CODE_DESC,  ' ', MAT.MAT_CMF_11,  ' '
       )
 GROUP BY MAT_CODE, MAT_CODE_DESC,  ' ', MAT_CMF_11,  ' '

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
SELECT LANGUAGE_2 FROM RWEBFUNDEF WHERE FUNC_NAME = 'PRD010314'
-------------------------------------------------------------
SELECT OPER, OPER_DESC  FROM MWIPOPRDEF
  WHERE FACTORY = 'HMVA2'  AND OPER NOT IN ('00001', '00002') AND OPER NOT LIKE 'V%' ORDER BY DECODE(OPER_CMF_2, ' ', 99999, TO_NUMBER(OPER_CMF_2)), OPER
-------------------------------------------------------------
SELECT OPER, OPER_DESC  FROM MWIPOPRDEF
  WHERE FACTORY = 'HMVA2'  AND OPER NOT IN ('00001', '00002') AND OPER NOT LIKE 'V%' ORDER BY DECODE(OPER_CMF_2, ' ', 99999, TO_NUMBER(OPER_CMF_2)), OPER
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT NVL((SELECT DATA_1 FROM MGCMTBLDAT WHERE TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = MAT_GRP_1 AND ROWNUM=1), '-') AS CUSTOMER,  ' ', NVL(MAT_GRP_3, ' ') AS PACKAGE,  ' ',  ' ',  ' ',  ' ',  ' ', NVL(MAT_CMF_10, ' ') AS PIN_TYPE,  ' ', NVL(B.MAT_ID, ' ') AS PRODUCT 
     , A.HOLD_GUBUN  
     , A.HOLD_OPER 
     , A.RUN_ID 
     , A.LOT_ID
     , A.QTY_1
     , A.WIP_OPER
     , A.LOT_COMMENT
     , A.HOLD_TIME
     , CASE WHEN A.HOLD_GUBUN = 'P' THEN A.HOLD_USER_ID
            ELSE (SELECT USER_DESC || '(' || USER_ID || ')' FROM RWEBUSRDEF WHERE USER_ID = A.HOLD_USER_ID)
       END AS OPER_USER
  FROM (
        SELECT A.*
             , ROW_NUMBER() OVER(PARTITION BY MAT_ID, HOLD_OPER, RUN_ID, LOT_ID ORDER BY HOLD_GUBUN) AS RNK
          FROM (
                SELECT 'Y' AS HOLD_GUBUN, B.MAT_ID, A.OPER AS HOLD_OPER, B.LOT_CMF_4 AS RUN_ID, A.LOT_ID
                     , B.QTY_1, B.OPER AS WIP_OPER, A.LOT_COMMENT, A.CREATE_TIME AS HOLD_TIME, A.CREATE_USER_ID AS HOLD_USER_ID
                  FROM MWIPFATDEF@RPTTOMES A
                     , RWIPLOTSTS B
                 WHERE 1=1
                   AND A.LOT_ID = B.LOT_ID(+)
                   AND A.FACTORY = 'HMVA2' 
                   AND A.LOT_ID <> ' '
                   AND A.LOT_TYPE = 'W'
                   AND B.LOT_TYPE(+) = 'W' 
                   AND B.LOT_DEL_FLAG = ' ' 
                   AND B.OPER LIKE 'A%' 
                   AND A.OPER >= B.OPER 
                 UNION ALL
                SELECT ' ' AS HOLD_GUBUN, MAT_ID, OPER, LOT_CMF_4, LOT_ID, QTY_1, OPER, LAST_COMMENT, LAST_TRAN_TIME
                     , (SELECT HOLD_USER_ID FROM RWIPLOTHLD WHERE LOT_ID = A.LOT_ID AND HIST_SEQ = A.LAST_HIST_SEQ) AS HOLD_USER_ID
                  FROM RWIPLOTSTS A
                 WHERE 1=1
                   AND FACTORY = 'HMVA2'
                   AND LOT_TYPE = 'W'
                   AND LOT_DEL_FLAG = ' '
                   AND HOLD_FLAG = 'Y' 
                 UNION ALL
                SELECT 'P' AS HOLD_GUBUN, MAT_ID, 'A1790' AS HOLD_OPER, LOT_CMF_4, LOT_ID, QTY_1, OPER AS WIP_OPER
                     , (SELECT DATA_1 FROM MGCMTBLDAT@RPTTOMES WHERE FACTORY = A.FACTORY AND TABLE_NAME = 'H_QCM_PCLCODE' AND KEY_1 = A.LOT_CMF_16) AS LAST_COMMENT
                     , LAST_TRAN_TIME, A.LOT_CMF_16 AS HOLD_USER_ID
                  FROM RWIPLOTSTS A
                 WHERE 1=1
                   AND FACTORY = 'HMVA2'
                   AND LOT_TYPE = 'W'
                   AND LOT_DEL_FLAG = ' '
                   AND LOT_CMF_16 <> ' ' 
                   AND OPER <= 'A1790'  
               ) A
       ) A
     , MWIPMATDEF B
 WHERE 1=1   
   AND A.MAT_ID = B.MAT_ID(+)
   AND B.FACTORY(+) = 'HMVA2'
   AND A.WIP_OPER BETWEEN 'A0000' AND 'AZ010' 
   AND A.RNK = 1 
 ORDER BY MAT_GRP_1,  ' ', MAT_GRP_3,  ' ',  ' ',  ' ',  ' ',  ' ', MAT_CMF_10,  ' ', B.MAT_ID, A.WIP_OPER 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT NVL((SELECT DATA_1 FROM MGCMTBLDAT WHERE TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = MAT_GRP_1 AND ROWNUM=1), '-') AS CUSTOMER,  ' ', NVL(MAT_GRP_3, ' ') AS PACKAGE,  ' ',  ' ',  ' ',  ' ',  ' ', NVL(MAT_CMF_10, ' ') AS PIN_TYPE,  ' ', NVL(B.MAT_ID, ' ') AS PRODUCT 
     , A.HOLD_GUBUN  
     , A.HOLD_OPER 
     , A.RUN_ID 
     , A.LOT_ID
     , A.QTY_1
     , A.WIP_OPER
     , A.LOT_COMMENT
     , A.HOLD_TIME
     , CASE WHEN A.HOLD_GUBUN = 'P' THEN A.HOLD_USER_ID
            ELSE (SELECT USER_DESC || '(' || USER_ID || ')' FROM RWEBUSRDEF WHERE USER_ID = A.HOLD_USER_ID)
       END AS OPER_USER
  FROM (
        SELECT A.*
             , ROW_NUMBER() OVER(PARTITION BY MAT_ID, HOLD_OPER, RUN_ID, LOT_ID ORDER BY HOLD_GUBUN) AS RNK
          FROM (
                SELECT 'Y' AS HOLD_GUBUN, B.MAT_ID, A.OPER AS HOLD_OPER, B.LOT_CMF_4 AS RUN_ID, A.LOT_ID
                     , B.QTY_1, B.OPER AS WIP_OPER, A.LOT_COMMENT, A.CREATE_TIME AS HOLD_TIME, A.CREATE_USER_ID AS HOLD_USER_ID
                  FROM MWIPFATDEF@RPTTOMES A
                     , RWIPLOTSTS B
                 WHERE 1=1
                   AND A.LOT_ID = B.LOT_ID(+)
                   AND A.FACTORY = 'HMVA2' 
                   AND A.LOT_ID <> ' '
                   AND A.LOT_TYPE = 'W'
                   AND B.LOT_TYPE(+) = 'W' 
                   AND B.LOT_DEL_FLAG = ' ' 
                   AND B.OPER LIKE 'A%' 
                   AND A.OPER >= B.OPER 
                 UNION ALL
                SELECT ' ' AS HOLD_GUBUN, MAT_ID, OPER, LOT_CMF_4, LOT_ID, QTY_1, OPER, LAST_COMMENT, LAST_TRAN_TIME
                     , (SELECT HOLD_USER_ID FROM RWIPLOTHLD WHERE LOT_ID = A.LOT_ID AND HIST_SEQ = A.LAST_HIST_SEQ) AS HOLD_USER_ID
                  FROM RWIPLOTSTS A
                 WHERE 1=1
                   AND FACTORY = 'HMVA2'
                   AND LOT_TYPE = 'W'
                   AND LOT_DEL_FLAG = ' '
                   AND HOLD_FLAG = 'Y' 
                 UNION ALL
                SELECT 'P' AS HOLD_GUBUN, MAT_ID, 'A1790' AS HOLD_OPER, LOT_CMF_4, LOT_ID, QTY_1, OPER AS WIP_OPER
                     , (SELECT DATA_1 FROM MGCMTBLDAT@RPTTOMES WHERE FACTORY = A.FACTORY AND TABLE_NAME = 'H_QCM_PCLCODE' AND KEY_1 = A.LOT_CMF_16) AS LAST_COMMENT
                     , LAST_TRAN_TIME, A.LOT_CMF_16 AS HOLD_USER_ID
                  FROM RWIPLOTSTS A
                 WHERE 1=1
                   AND FACTORY = 'HMVA2'
                   AND LOT_TYPE = 'W'
                   AND LOT_DEL_FLAG = ' '
                   AND LOT_CMF_16 <> ' ' 
                   AND OPER <= 'A1790'  
               ) A
       ) A
     , MWIPMATDEF B
 WHERE 1=1   
   AND A.MAT_ID = B.MAT_ID(+)
   AND B.FACTORY(+) = 'HMVA2'
   AND A.WIP_OPER BETWEEN 'A0000' AND 'AZ010' 
   AND A.RNK = 1 
 ORDER BY MAT_GRP_1,  ' ', MAT_GRP_3,  ' ',  ' ',  ' ',  ' ',  ' ', MAT_CMF_10,  ' ', B.MAT_ID, A.WIP_OPER 

-------------------------------------------------------------
SELECT * FROM RWEBUSRDEF WHERE FACTORY = :FACTORY AND USER_ID= :USER_ID
-------------------------------------------------------------
SELECT A.FUNC_GRP_SEQ,A.SEC_GRP_ID,A.FUNC_GRP_ID,NVL(A.FUNC_NAME, ' ') FUNC_NAME, NVL(B.FUNC_DESC, ' ') FUNC_DESC, LANGUAGE_1, LANGUAGE_2, LANGUAGE_3
  FROM RWEBGRPFUN A, RWEBFUNDEF B
 WHERE A.FACTORY = :p_FACTORY
   AND A.SEC_GRP_ID = :p_SEC_GRP_ID
   AND A.FUNC_NAME=B.FUNC_NAME(+)
 ORDER BY A.FUNC_GRP_SEQ, A.FUNC_SEQ
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
SELECT LANGUAGE_2 FROM RWEBFUNDEF WHERE FUNC_NAME = 'PRD010226'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT A.CUST_TYPE, A.MAT_GRP_9 AS MAJOR,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ' 
     , ROUND(SUM(MON_PLN) / 1000, 0) AS MON_PLN
     , ROUND(SUM(SHP_TTL) / 1000, 0) AS SHP_TTL
     , CASE WHEN SUM(MON_PLN) = 0 THEN 0
            ELSE ROUND((SUM(SHP_TTL) / (SUM(MON_PLN) / 30)) - 9, 1)
       END AS SHP_JINDO
     , ROUND((SUM(SHP_TTL) + SUM(WIP_TTL)) / 1000, 0) AS RCV_TTL
     , CASE WHEN SUM(MON_PLN) = 0 THEN 0
            ELSE ROUND(( ((SUM(SHP_TTL) + SUM(WIP_TTL)) / SUM(MON_PLN)) - ((9 + 5) / 30) ) * 30, 1)
       END AS RCV_JINDO
     , ROUND(SUM(WIP_TTL) / 1000, 0) AS WIP_TTL
     , CASE WHEN SUM(MON_PLN) = 0 THEN 0
            ELSE ROUND(SUM(WIP_TTL) / (SUM(MON_PLN) / 30), 1)
       END AS WIP_DAY
     , ROUND((SUM(MON_PLN) - SUM(SHP_TTL)) / 21.5380728737731 / 1000, 0) AS TARGET_QTY
     , ROUND(SUM(RCV_TODAY) / 1000, 0) AS RCV_TODAY
     , ROUND(SUM(OUT_DP) / 1000, 0) AS OUT_DP
     , ROUND(SUM(OUT_DA) / 1000, 0) AS OUT_DA
     , ROUND(SUM(OUT_WB) / 1000, 0) AS OUT_WB
     , ROUND(SUM(OUT_CLOSE) / 1000, 0) AS OUT_CLOSE
     , ROUND(SUM(SHP_TODAY) / 1000, 0) AS SHP_TODAY
  FROM (
        SELECT NVL((SELECT DATA_10 FROM MGCMTBLDAT WHERE TABLE_NAME = 'H_CUSTOMER' AND FACTORY = 'HMVA2' AND  KEY_1 = MAT_GRP_1), '-') AS CUST_TYPE
             , MAT.CONV_MAT_ID, MAT_GRP_1, MAT_GRP_2, MAT_GRP_3, MAT_GRP_4, MAT_GRP_5
             , MAT_GRP_6, MAT_GRP_7, MAT_GRP_8, MAT_GRP_9, MAT_GRP_10, MAT_CMF_10, MAT_CMF_11
             , NVL(CASE WHEN MAT.MAT_GRP_3 IN ('COB') THEN ROUND(PLN.MON_PLN/MAT.NET_DIE,0) ELSE PLN.MON_PLN END, 0) * PRICE AS MON_PLN
             , NVL(CASE WHEN MAT.MAT_GRP_3 IN ('COB') THEN ROUND(SHP.SHP_TTL/MAT.NET_DIE,0) ELSE SHP.SHP_TTL END, 0) * PRICE AS SHP_TTL 
             , NVL(CASE WHEN MAT.MAT_CMF_11 = 'JZH' THEN NVL(RCV.RCV_TTL,0)/MAT.COMP_CNT/2
                        WHEN MAT.MAT_CMF_11 IN ('DHL', 'DQZ', 'DRA', 'DQA', 'DND', 'DWG', 'DUT', 'HAU', 'HF8', 'HDM', 'HDR', 'HEN', 'HQA', 'HQC') THEN DECODE(MAT.MAT_GRP_5, '3rd', NVL(RCV.RCV_TTL,0)/MAT.COMP_CNT, 0)
                        WHEN MAT.MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND (MAT_ID LIKE 'SEKS%' OR MAT_ID LIKE 'SEKY%')) THEN DECODE(MAT.MAT_GRP_5, '2nd', NVL(RCV.RCV_TTL,0)/MAT.COMP_CNT, 0)
                        WHEN MAT.MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT.MAT_GRP_5 <> '-' THEN CASE WHEN MAT.MAT_GRP_5 IN ('1st','Merge') OR MAT.MAT_GRP_5 LIKE 'Middle%' THEN NVL(RCV.RCV_TTL,0)/MAT.COMP_CNT ELSE 0 END
                        WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN ROUND(RCV.RCV_TTL/NET_DIE,0)
                        ELSE NVL(RCV.RCV_TTL,0)/MAT.COMP_CNT
                   END,0) * PRICE AS RCV_TTL
             , NVL(CASE WHEN MAT.MAT_CMF_11 = 'JZH' THEN NVL(RCV.RCV_TODAY,0)/MAT.COMP_CNT/2
                        WHEN MAT.MAT_CMF_11 IN ('DHL', 'DQZ', 'DRA', 'DQA', 'DND', 'DWG', 'DUT', 'HAU', 'HF8', 'HDM', 'HDR', 'HEN', 'HQA', 'HQC') THEN DECODE(MAT.MAT_GRP_5, '3rd', NVL(RCV.RCV_TODAY,0)/MAT.COMP_CNT, 0)
                        WHEN MAT.MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND (MAT_ID LIKE 'SEKS%' OR MAT_ID LIKE 'SEKY%')) THEN DECODE(MAT.MAT_GRP_5, '2nd', NVL(RCV.RCV_TODAY,0)/MAT.COMP_CNT, 0)
                        WHEN MAT.MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT.MAT_GRP_5 <> '-' THEN CASE WHEN MAT.MAT_GRP_5 IN ('1st','Merge') OR MAT.MAT_GRP_5 LIKE 'Middle%' THEN NVL(RCV.RCV_TODAY,0)/MAT.COMP_CNT ELSE 0 END
                        WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN ROUND(RCV.RCV_TODAY/NET_DIE,0)
                        ELSE NVL(RCV.RCV_TODAY,0)/MAT.COMP_CNT
                   END,0) * PRICE AS RCV_TODAY
             , NVL(WIP.WIP_TTL,0) * PRICE AS WIP_TTL
             , NVL(WIP.WIP_AZ010,0) * PRICE AS WIP_AZ010
             , NVL(OUT_DP,0) * PRICE AS OUT_DP
             , NVL(OUT_DA,0) * PRICE AS OUT_DA
             , NVL(OUT_WB,0) * PRICE AS OUT_WB
             , NVL(OUT_CLOSE,0) * PRICE AS OUT_CLOSE
             , NVL(CASE WHEN MAT.MAT_GRP_3 IN ('COB') THEN ROUND(SHP.SHP_TODAY/MAT.NET_DIE,0) ELSE SHP.SHP_TODAY END, 0) * PRICE AS SHP_TODAY 
          FROM (
                SELECT A.MAT_ID, MAT_GRP_1, MAT_GRP_2, MAT_GRP_3, MAT_GRP_4, MAT_GRP_5
                     , MAT_GRP_6, MAT_GRP_7, MAT_GRP_8, MAT_GRP_9, MAT_GRP_10, MAT_CMF_10, MAT_CMF_11
                     , NET_DIE, COMP_CNT, HX_COMP_MIN, HX_COMP_MAX 
                     , CASE WHEN MAT_GRP_1 = 'SE' AND MAT_GRP_9 = 'MEMORY' THEN 'SEK_________-___' || SUBSTR(A.MAT_ID, -3) 
                            WHEN MAT_GRP_1 = 'HX' THEN MAT_CMF_10 
                            ELSE A.MAT_ID 
                       END CONV_MAT_ID 
                     , 1 AS PRICE
                  FROM VWIPMATDEF A
                 WHERE 1=1
                   AND A.FACTORY = 'HMVA2'
                   AND A.DELETE_FLAG = ' '
                   AND A.MAT_TYPE = 'FG' 
                   AND A.MAT_GRP_2 NOT IN ('-', 'PW') 
               ) MAT
             , (                
                SELECT MAT_ID
                     , SUM(PLAN_QTY_ASSY) AS MON_PLN
                  FROM (
                        SELECT MAT_ID, SUM(PLAN_QTY_ASSY) AS PLAN_QTY_ASSY, SUM(TO_NUMBER(DECODE(RESV_FIELD1,' ',0,RESV_FIELD1))) AS RESV_FIELD1
                          FROM CWIPPLNMON 
                         WHERE 1=1 
                           AND FACTORY = 'HMVA2'
                           AND PLAN_MONTH = '202004'
                         GROUP BY MAT_ID 
                       ) 
                 GROUP BY MAT_ID
               ) PLN
             , (
                SELECT MAT_ID
                     , SUM(SHP_QTY_1) AS SHP_TTL 
                     , SUM(DECODE(WORK_DATE, '20200409', SHP_QTY_1, 0)) AS SHP_TODAY
                  FROM VSUMWIPOUT
                 WHERE 1=1
                   AND WORK_DATE BETWEEN '20200401' AND '20200409' 
                   AND FACTORY = 'HMVA2' 
                   AND LOT_TYPE = 'W' 
                   AND CM_KEY_2 = 'PROD' 
                   AND CM_KEY_3 LIKE 'P%'
                   AND MAT_ID NOT LIKE 'HX%'
                 GROUP BY MAT_ID
                 UNION ALL
                SELECT MAT_ID
                     , SUM(SHP_QTY_1) AS SHP_TTL 
                     , SUM(DECODE(WORK_DATE, '20200409', SHP_QTY_1, 0)) AS SHP_TODAY
                  FROM VSUMWIPOUT_06
                 WHERE 1=1
                   AND WORK_DATE BETWEEN '20200401' AND '20200409' 
                   AND FACTORY = 'HMVA2' 
                   AND LOT_TYPE = 'W' 
                   AND CM_KEY_2 = 'PROD' 
                   AND CM_KEY_3 LIKE 'P%'
                   AND MAT_ID LIKE 'HX%'
                 GROUP BY MAT_ID
               ) SHP
             , (
                SELECT MAT_ID
                     , SUM(RCV_QTY_1) AS RCV_TTL
                     , SUM(DECODE(WORK_DATE, '20200409', RCV_QTY_1, 0)) AS RCV_TODAY
                  FROM VSUMWIPRCV
                 WHERE FACTORY = 'HMVA2'
                   AND WORK_DATE BETWEEN '20200401' AND '20200409'
                   AND LOT_TYPE = 'W'
                   AND CM_KEY_3 LIKE 'P%' 
                   AND MAT_ID NOT LIKE 'HX%'
                 GROUP BY MAT_ID
                 UNION ALL
                SELECT MAT_ID
                     , SUM(RCV_QTY_1) AS RCV_TTL
                     , SUM(DECODE(WORK_DATE, '20200409', RCV_QTY_1, 0)) AS RCV_TODAY
                  FROM VSUMWIPRCV_HX
                 WHERE FACTORY = 'HMVA2'
                   AND WORK_DATE BETWEEN '20200401' AND '20200409'
                   AND LOT_TYPE = 'W'
                   AND CM_KEY_3 LIKE 'P%' 
                   AND MAT_ID LIKE 'HX%'
                 GROUP BY MAT_ID
               ) RCV
             , (
                SELECT MAT_ID
                     , SUM(QTY) AS WIP_TTL
                     , SUM(DECODE(OPER, 'AZ010', QTY, 0)) AS WIP_AZ010
                  FROM (
                        SELECT MAT_ID, OPER, OPER_GRP_1, MAT_GRP_1, MAT_GRP_4, MAT_GRP_5
                             , CASE WHEN HX_COMP_MIN IS NOT NULL
                                         THEN (CASE WHEN HX_COMP_MIN <> HX_COMP_MAX AND OPER > HX_COMP_MIN AND OPER <= HX_COMP_MAX THEN QTY_1 / NVL(COMP_CNT / 2,1)
                                                    WHEN OPER <= HX_COMP_MAX THEN QTY_1 / NVL(COMP_CNT,1)
                                                    ELSE QTY_1 END)
                                    WHEN OPER <= 'A0395' THEN QTY_1 / NVL(COMP_CNT,1) 
                                    ELSE QTY_1 
                               END QTY 
                          FROM (
                                SELECT A.MAT_ID, B.OPER, B.OPER_GRP_1, C.MAT_GRP_1, C.MAT_GRP_4, C.MAT_GRP_5
                                     , CASE WHEN MAT_CMF_11 IN ('DHL', 'DQZ', 'DRA', 'DQA', 'DND', 'DWG', 'DUT', 'HAU', 'HF8', 'HDM', 'HDR', 'HEN', 'HQA', 'HQC') THEN (CASE WHEN MAT_GRP_5 IN ('3rd','Merge') THEN QTY_1
                                                                               WHEN MAT_GRP_5 LIKE 'Middle%' AND MAT_GRP_5 <> 'Middle' THEN QTY_1
                                                                               ELSE 0 END)
                                            WHEN MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND (MAT_ID LIKE 'SEKS%' OR MAT_ID LIKE 'SEKY%')) THEN CASE WHEN MAT_GRP_5 IN ('2nd','Merge') OR MAT_GRP_5 LIKE 'Middle%' THEN QTY_1 ELSE 0 END
                                            WHEN MAT_GRP_1 = 'HX' AND MESMGR.F_GET_ATTR_VALUE@RPTTOMES(A.MAT_ID, 'MAT_ETC', 'HX_VERSION') = 'A-376' THEN CASE WHEN MAT_GRP_5 IN ('5th','Merge') THEN QTY_1 ELSE 0 END
                                            WHEN MAT_GRP_1 = 'HX' AND MESMGR.F_GET_ATTR_VALUE@RPTTOMES(A.MAT_ID, 'MAT_ETC', 'HX_VERSION') IN ('A-445', 'A-525') THEN CASE WHEN MAT_GRP_5 IN ('6th','Merge') THEN QTY_1 ELSE 0 END
                                            WHEN MAT_GRP_1 = 'HX' AND MESMGR.F_GET_ATTR_VALUE@RPTTOMES(A.MAT_ID, 'MAT_ETC', 'HX_VERSION') = 'A-524' THEN CASE WHEN MAT_GRP_5 IN ('7th','Merge') THEN QTY_1 ELSE 0 END
                                            WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN CASE WHEN MAT_GRP_5 IN ('1st','Merge') OR MAT_GRP_5 LIKE 'Middle%' THEN QTY_1 ELSE 0 END
                                            WHEN MAT_GRP_3 IN ('COB', 'BGN') THEN ROUND(QTY_1/C.NET_DIE,0)
                                            ELSE QTY_1
                                       END AS QTY_1
                                     , C.COMP_CNT, C.HX_COMP_MIN, C.HX_COMP_MAX 
                                     , A.HOLD_CODE 
                                     , CASE WHEN A.HOLD_CODE = 'H72' AND A.OPER = 'A0000' THEN 'Y' ELSE 'N' END AS CK_STOCK_H72 
                                  FROM RWIPLOTSTS A  
                                     , MWIPOPRDEF B  
                                     , VWIPMATDEF C
                                 WHERE 1 = 1 
                                   AND A.FACTORY = B.FACTORY
                                   AND A.FACTORY = C.FACTORY
                                   AND A.OPER = B.OPER
                                   AND A.MAT_ID = C.MAT_ID
                                   AND A.FACTORY = 'HMVA2'  
                                   AND A.LOT_TYPE = 'W' 
                                   AND A.LOT_CMF_5 LIKE 'P%' 
                                   AND A.LOT_DEL_FLAG = ' ' 
                                   AND C.MAT_GRP_2 <> '-'
                                   AND C.DELETE_FLAG = ' '
                                   AND A.HOLD_CODE NOT IN ('H71','H54') 
                               )
                         WHERE CK_STOCK_H72 = 'N'
                       )
                 GROUP BY MAT_ID
               ) WIP
             , (
                SELECT MAT_ID
                     , SUM(CASE WHEN OPER IN ('A0200', 'A0230') THEN QTY ELSE 0 END) AS OUT_DP
                     , SUM(CASE WHEN OPER LIKE 'A04%' THEN QTY
                                WHEN OPER = 'A0333' THEN QTY
                                ELSE 0
                           END) AS OUT_DA                     
                     , SUM(CASE WHEN OPER LIKE 'A06%' THEN QTY ELSE 0 END) AS OUT_WB
                     , SUM(CASE WHEN OPER = 'A2100' THEN QTY ELSE 0 END) AS OUT_CLOSE 
                  FROM (    
                        SELECT MAT_ID, OPER, MAT_GRP_1, MAT_GRP_4, MAT_GRP_5
                             , CASE WHEN HX_COMP_MIN IS NOT NULL
                                         THEN (CASE WHEN HX_COMP_MIN <> HX_COMP_MAX AND OPER > HX_COMP_MIN AND OPER <= HX_COMP_MAX THEN QTY_1 / NVL(COMP_CNT / 2,1)
                                                    WHEN OPER <= HX_COMP_MAX THEN QTY_1 / NVL(COMP_CNT,1)
                                                    ELSE QTY_1 END)
                                    WHEN OPER <= 'A0395' THEN QTY_1 / NVL(COMP_CNT,1) 
                                    ELSE QTY_1 
                               END QTY
                          FROM (
                                SELECT MAT_ID, OPER, MAT_GRP_1, MAT_GRP_4, MAT_GRP_5, MAT_GRP_9, MAT_CMF_11
                                     , CASE WHEN MAT_CMF_11 IN ('DHL', 'DQZ', 'DRA', 'DQA', 'DND', 'DWG', 'DUT', 'HAU', 'HF8', 'HDM', 'HDR', 'HEN', 'HQA', 'HQC') THEN (CASE WHEN MAT_GRP_5 IN ('3rd','Merge') THEN END_QTY ELSE 0 END)
                                            WHEN MAT_ID LIKE 'SEK%' AND MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND (MAT_ID LIKE 'SEKS%' OR MAT_ID LIKE 'SEKY%'))
                                                 THEN (CASE WHEN MAT_GRP_5 IN ('2nd','Merge') THEN END_QTY ELSE 0 END)
                                            WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-'
                                                 THEN (CASE WHEN MAT_GRP_5 IN ('1st','Merge') THEN END_QTY ELSE 0 END)
                                            WHEN MAT_GRP_3 IN ('COB', 'BGN') THEN ROUND(END_QTY/NET_DIE,0)
                                            ELSE END_QTY
                                       END QTY_1 
                                     , COMP_CNT, HX_COMP_MIN, HX_COMP_MAX 
                                  FROM ( 
                                        SELECT A.OPER
                                             , (S1_END_QTY_1+S2_END_QTY_1+S3_END_QTY_1) AS END_QTY
                                             , B.*
                                          FROM RSUMWIPMOV A
                                             , VWIPMATDEF B
                                         WHERE 1=1
                                           AND A.FACTORY = B.FACTORY
                                           AND A.MAT_ID = B.MAT_ID
                                           AND A.FACTORY = 'HMVA2'
                                           AND A.WORK_DATE = '20200409'
                                           AND A.LOT_TYPE = 'W'
                                           AND A.CM_KEY_3 LIKE 'P%' 
                                           AND B.MAT_GRP_5 NOT LIKE 'Middle%'
                                           AND REGEXP_LIKE(A.OPER, 'A0200|A0230|A0333|A040*|A060*|A2100')
                                           AND ((A.OPER >= 'A0400' AND B.MAT_GRP_5 IN ('-', 'Merge')) OR (A.OPER < 'A0400'))
                                           AND A.MAT_ID NOT LIKE 'HX%'
                                         UNION ALL
                                        SELECT A.OPER
                                             , (S1_END_QTY_1+S2_END_QTY_1+S3_END_QTY_1) AS END_QTY
                                             , B.*
                                          FROM RSUMWIPMOV A
                                             , VWIPMATDEF B
                                         WHERE 1=1
                                           AND A.FACTORY = B.FACTORY
                                           AND A.MAT_ID = B.MAT_ID
                                           AND A.FACTORY = 'HMVA2'
                                           AND A.WORK_DATE = '20200409'
                                           AND A.LOT_TYPE = 'W'
                                           AND A.CM_KEY_3 LIKE 'P%' 
                                           AND B.MAT_GRP_5 NOT LIKE 'Middle%'
                                           AND REGEXP_LIKE(A.OPER, 'A0200|A0230|A0333|A040*|A060*|A2100')
                                           AND ((A.OPER >= 'A0400' AND B.MAT_GRP_5 IN ('-', 'Merge')) OR (A.OPER < 'A0400'))
                                           AND A.MAT_ID LIKE 'HX%'
                                       ) 
                               )
                       )
                 GROUP BY MAT_ID
               ) MOV
         WHERE 1=1
           AND MAT.MAT_ID = PLN.MAT_ID(+)
           AND MAT.MAT_ID = SHP.MAT_ID(+)
           AND MAT.MAT_ID = RCV.MAT_ID(+)
           AND MAT.MAT_ID = WIP.MAT_ID(+)
           AND MAT.MAT_ID = MOV.MAT_ID(+)
       ) A
 GROUP BY A.CUST_TYPE, A.MAT_GRP_9,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' '
 HAVING SUM(MON_PLN) + SUM(SHP_TTL) + SUM(WIP_TTL) + SUM(RCV_TODAY) + SUM(OUT_DP) + SUM(OUT_DA) + SUM(OUT_WB) + SUM(OUT_CLOSE) + SUM(SHP_TODAY) <> 0
 ORDER BY DECODE(CUST_TYPE, 'SEC', 1, 'Hynix', 2, 'Fabless', 3, 4), A.MAT_GRP_9,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' '

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT A.CUST_TYPE, A.MAT_GRP_9 AS MAJOR, (SELECT DATA_1 FROM MGCMTBLDAT@RPTTOMES WHERE FACTORY = 'HMVA2' AND TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = A.MAT_GRP_1) AS CUSTOMER, A.MAT_GRP_10 AS PKG,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ' 
     , ROUND(SUM(MON_PLN) / 1000, 0) AS MON_PLN
     , ROUND(SUM(SHP_TTL) / 1000, 0) AS SHP_TTL
     , CASE WHEN SUM(MON_PLN) = 0 THEN 0
            ELSE ROUND((SUM(SHP_TTL) / (SUM(MON_PLN) / 30)) - 9, 1)
       END AS SHP_JINDO
     , ROUND((SUM(SHP_TTL) + SUM(WIP_TTL)) / 1000, 0) AS RCV_TTL
     , CASE WHEN SUM(MON_PLN) = 0 THEN 0
            ELSE ROUND(( ((SUM(SHP_TTL) + SUM(WIP_TTL)) / SUM(MON_PLN)) - ((9 + 5) / 30) ) * 30, 1)
       END AS RCV_JINDO
     , ROUND(SUM(WIP_TTL) / 1000, 0) AS WIP_TTL
     , CASE WHEN SUM(MON_PLN) = 0 THEN 0
            ELSE ROUND(SUM(WIP_TTL) / (SUM(MON_PLN) / 30), 1)
       END AS WIP_DAY
     , ROUND((SUM(MON_PLN) - SUM(SHP_TTL)) / 21.537929083125 / 1000, 0) AS TARGET_QTY
     , ROUND(SUM(RCV_TODAY) / 1000, 0) AS RCV_TODAY
     , ROUND(SUM(OUT_DP) / 1000, 0) AS OUT_DP
     , ROUND(SUM(OUT_DA) / 1000, 0) AS OUT_DA
     , ROUND(SUM(OUT_WB) / 1000, 0) AS OUT_WB
     , ROUND(SUM(OUT_CLOSE) / 1000, 0) AS OUT_CLOSE
     , ROUND(SUM(SHP_TODAY) / 1000, 0) AS SHP_TODAY
  FROM (
        SELECT NVL((SELECT DATA_10 FROM MGCMTBLDAT WHERE TABLE_NAME = 'H_CUSTOMER' AND FACTORY = 'HMVA2' AND  KEY_1 = MAT_GRP_1), '-') AS CUST_TYPE
             , MAT.CONV_MAT_ID, MAT_GRP_1, MAT_GRP_2, MAT_GRP_3, MAT_GRP_4, MAT_GRP_5
             , MAT_GRP_6, MAT_GRP_7, MAT_GRP_8, MAT_GRP_9, MAT_GRP_10, MAT_CMF_10, MAT_CMF_11
             , NVL(CASE WHEN MAT.MAT_GRP_3 IN ('COB') THEN ROUND(PLN.MON_PLN/MAT.NET_DIE,0) ELSE PLN.MON_PLN END, 0) * PRICE AS MON_PLN
             , NVL(CASE WHEN MAT.MAT_GRP_3 IN ('COB') THEN ROUND(SHP.SHP_TTL/MAT.NET_DIE,0) ELSE SHP.SHP_TTL END, 0) * PRICE AS SHP_TTL 
             , NVL(CASE WHEN MAT.MAT_CMF_11 = 'JZH' THEN NVL(RCV.RCV_TTL,0)/MAT.COMP_CNT/2
                        WHEN MAT.MAT_CMF_11 IN ('DHL', 'DQZ', 'DRA', 'DQA', 'DND', 'DWG', 'DUT', 'HAU', 'HF8', 'HDM', 'HDR', 'HEN', 'HQA', 'HQC') THEN DECODE(MAT.MAT_GRP_5, '3rd', NVL(RCV.RCV_TTL,0)/MAT.COMP_CNT, 0)
                        WHEN MAT.MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND (MAT_ID LIKE 'SEKS%' OR MAT_ID LIKE 'SEKY%')) THEN DECODE(MAT.MAT_GRP_5, '2nd', NVL(RCV.RCV_TTL,0)/MAT.COMP_CNT, 0)
                        WHEN MAT.MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT.MAT_GRP_5 <> '-' THEN CASE WHEN MAT.MAT_GRP_5 IN ('1st','Merge') OR MAT.MAT_GRP_5 LIKE 'Middle%' THEN NVL(RCV.RCV_TTL,0)/MAT.COMP_CNT ELSE 0 END
                        WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN ROUND(RCV.RCV_TTL/NET_DIE,0)
                        ELSE NVL(RCV.RCV_TTL,0)/MAT.COMP_CNT
                   END,0) * PRICE AS RCV_TTL
             , NVL(CASE WHEN MAT.MAT_CMF_11 = 'JZH' THEN NVL(RCV.RCV_TODAY,0)/MAT.COMP_CNT/2
                        WHEN MAT.MAT_CMF_11 IN ('DHL', 'DQZ', 'DRA', 'DQA', 'DND', 'DWG', 'DUT', 'HAU', 'HF8', 'HDM', 'HDR', 'HEN', 'HQA', 'HQC') THEN DECODE(MAT.MAT_GRP_5, '3rd', NVL(RCV.RCV_TODAY,0)/MAT.COMP_CNT, 0)
                        WHEN MAT.MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND (MAT_ID LIKE 'SEKS%' OR MAT_ID LIKE 'SEKY%')) THEN DECODE(MAT.MAT_GRP_5, '2nd', NVL(RCV.RCV_TODAY,0)/MAT.COMP_CNT, 0)
                        WHEN MAT.MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT.MAT_GRP_5 <> '-' THEN CASE WHEN MAT.MAT_GRP_5 IN ('1st','Merge') OR MAT.MAT_GRP_5 LIKE 'Middle%' THEN NVL(RCV.RCV_TODAY,0)/MAT.COMP_CNT ELSE 0 END
                        WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN ROUND(RCV.RCV_TODAY/NET_DIE,0)
                        ELSE NVL(RCV.RCV_TODAY,0)/MAT.COMP_CNT
                   END,0) * PRICE AS RCV_TODAY
             , NVL(WIP.WIP_TTL,0) * PRICE AS WIP_TTL
             , NVL(WIP.WIP_AZ010,0) * PRICE AS WIP_AZ010
             , NVL(OUT_DP,0) * PRICE AS OUT_DP
             , NVL(OUT_DA,0) * PRICE AS OUT_DA
             , NVL(OUT_WB,0) * PRICE AS OUT_WB
             , NVL(OUT_CLOSE,0) * PRICE AS OUT_CLOSE
             , NVL(CASE WHEN MAT.MAT_GRP_3 IN ('COB') THEN ROUND(SHP.SHP_TODAY/MAT.NET_DIE,0) ELSE SHP.SHP_TODAY END, 0) * PRICE AS SHP_TODAY 
          FROM (
                SELECT A.MAT_ID, MAT_GRP_1, MAT_GRP_2, MAT_GRP_3, MAT_GRP_4, MAT_GRP_5
                     , MAT_GRP_6, MAT_GRP_7, MAT_GRP_8, MAT_GRP_9, MAT_GRP_10, MAT_CMF_10, MAT_CMF_11
                     , NET_DIE, COMP_CNT, HX_COMP_MIN, HX_COMP_MAX 
                     , CASE WHEN MAT_GRP_1 = 'SE' AND MAT_GRP_9 = 'MEMORY' THEN 'SEK_________-___' || SUBSTR(A.MAT_ID, -3) 
                            WHEN MAT_GRP_1 = 'HX' THEN MAT_CMF_10 
                            ELSE A.MAT_ID 
                       END CONV_MAT_ID 
                     , 1 AS PRICE
                  FROM VWIPMATDEF A
                 WHERE 1=1
                   AND A.FACTORY = 'HMVA2'
                   AND A.DELETE_FLAG = ' '
                   AND A.MAT_TYPE = 'FG' 
                   AND A.MAT_GRP_2 NOT IN ('-', 'PW') 
               ) MAT
             , (                
                SELECT MAT_ID
                     , SUM(PLAN_QTY_ASSY) AS MON_PLN
                  FROM (
                        SELECT MAT_ID, SUM(PLAN_QTY_ASSY) AS PLAN_QTY_ASSY, SUM(TO_NUMBER(DECODE(RESV_FIELD1,' ',0,RESV_FIELD1))) AS RESV_FIELD1
                          FROM CWIPPLNMON 
                         WHERE 1=1 
                           AND FACTORY = 'HMVA2'
                           AND PLAN_MONTH = '202004'
                         GROUP BY MAT_ID 
                       ) 
                 GROUP BY MAT_ID
               ) PLN
             , (
                SELECT MAT_ID
                     , SUM(SHP_QTY_1) AS SHP_TTL 
                     , SUM(DECODE(WORK_DATE, '20200409', SHP_QTY_1, 0)) AS SHP_TODAY
                  FROM VSUMWIPOUT
                 WHERE 1=1
                   AND WORK_DATE BETWEEN '20200401' AND '20200409' 
                   AND FACTORY = 'HMVA2' 
                   AND LOT_TYPE = 'W' 
                   AND CM_KEY_2 = 'PROD' 
                   AND CM_KEY_3 LIKE 'P%'
                   AND MAT_ID NOT LIKE 'HX%'
                 GROUP BY MAT_ID
                 UNION ALL
                SELECT MAT_ID
                     , SUM(SHP_QTY_1) AS SHP_TTL 
                     , SUM(DECODE(WORK_DATE, '20200409', SHP_QTY_1, 0)) AS SHP_TODAY
                  FROM VSUMWIPOUT_06
                 WHERE 1=1
                   AND WORK_DATE BETWEEN '20200401' AND '20200409' 
                   AND FACTORY = 'HMVA2' 
                   AND LOT_TYPE = 'W' 
                   AND CM_KEY_2 = 'PROD' 
                   AND CM_KEY_3 LIKE 'P%'
                   AND MAT_ID LIKE 'HX%'
                 GROUP BY MAT_ID
               ) SHP
             , (
                SELECT MAT_ID
                     , SUM(RCV_QTY_1) AS RCV_TTL
                     , SUM(DECODE(WORK_DATE, '20200409', RCV_QTY_1, 0)) AS RCV_TODAY
                  FROM VSUMWIPRCV
                 WHERE FACTORY = 'HMVA2'
                   AND WORK_DATE BETWEEN '20200401' AND '20200409'
                   AND LOT_TYPE = 'W'
                   AND CM_KEY_3 LIKE 'P%' 
                   AND MAT_ID NOT LIKE 'HX%'
                 GROUP BY MAT_ID
                 UNION ALL
                SELECT MAT_ID
                     , SUM(RCV_QTY_1) AS RCV_TTL
                     , SUM(DECODE(WORK_DATE, '20200409', RCV_QTY_1, 0)) AS RCV_TODAY
                  FROM VSUMWIPRCV_HX
                 WHERE FACTORY = 'HMVA2'
                   AND WORK_DATE BETWEEN '20200401' AND '20200409'
                   AND LOT_TYPE = 'W'
                   AND CM_KEY_3 LIKE 'P%' 
                   AND MAT_ID LIKE 'HX%'
                 GROUP BY MAT_ID
               ) RCV
             , (
                SELECT MAT_ID
                     , SUM(QTY) AS WIP_TTL
                     , SUM(DECODE(OPER, 'AZ010', QTY, 0)) AS WIP_AZ010
                  FROM (
                        SELECT MAT_ID, OPER, OPER_GRP_1, MAT_GRP_1, MAT_GRP_4, MAT_GRP_5
                             , CASE WHEN HX_COMP_MIN IS NOT NULL
                                         THEN (CASE WHEN HX_COMP_MIN <> HX_COMP_MAX AND OPER > HX_COMP_MIN AND OPER <= HX_COMP_MAX THEN QTY_1 / NVL(COMP_CNT / 2,1)
                                                    WHEN OPER <= HX_COMP_MAX THEN QTY_1 / NVL(COMP_CNT,1)
                                                    ELSE QTY_1 END)
                                    WHEN OPER <= 'A0395' THEN QTY_1 / NVL(COMP_CNT,1) 
                                    ELSE QTY_1 
                               END QTY 
                          FROM (
                                SELECT A.MAT_ID, B.OPER, B.OPER_GRP_1, C.MAT_GRP_1, C.MAT_GRP_4, C.MAT_GRP_5
                                     , CASE WHEN MAT_CMF_11 IN ('DHL', 'DQZ', 'DRA', 'DQA', 'DND', 'DWG', 'DUT', 'HAU', 'HF8', 'HDM', 'HDR', 'HEN', 'HQA', 'HQC') THEN (CASE WHEN MAT_GRP_5 IN ('3rd','Merge') THEN QTY_1
                                                                               WHEN MAT_GRP_5 LIKE 'Middle%' AND MAT_GRP_5 <> 'Middle' THEN QTY_1
                                                                               ELSE 0 END)
                                            WHEN MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND (MAT_ID LIKE 'SEKS%' OR MAT_ID LIKE 'SEKY%')) THEN CASE WHEN MAT_GRP_5 IN ('2nd','Merge') OR MAT_GRP_5 LIKE 'Middle%' THEN QTY_1 ELSE 0 END
                                            WHEN MAT_GRP_1 = 'HX' AND MESMGR.F_GET_ATTR_VALUE@RPTTOMES(A.MAT_ID, 'MAT_ETC', 'HX_VERSION') = 'A-376' THEN CASE WHEN MAT_GRP_5 IN ('5th','Merge') THEN QTY_1 ELSE 0 END
                                            WHEN MAT_GRP_1 = 'HX' AND MESMGR.F_GET_ATTR_VALUE@RPTTOMES(A.MAT_ID, 'MAT_ETC', 'HX_VERSION') IN ('A-445', 'A-525') THEN CASE WHEN MAT_GRP_5 IN ('6th','Merge') THEN QTY_1 ELSE 0 END
                                            WHEN MAT_GRP_1 = 'HX' AND MESMGR.F_GET_ATTR_VALUE@RPTTOMES(A.MAT_ID, 'MAT_ETC', 'HX_VERSION') = 'A-524' THEN CASE WHEN MAT_GRP_5 IN ('7th','Merge') THEN QTY_1 ELSE 0 END
                                            WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN CASE WHEN MAT_GRP_5 IN ('1st','Merge') OR MAT_GRP_5 LIKE 'Middle%' THEN QTY_1 ELSE 0 END
                                            WHEN MAT_GRP_3 IN ('COB', 'BGN') THEN ROUND(QTY_1/C.NET_DIE,0)
                                            ELSE QTY_1
                                       END AS QTY_1
                                     , C.COMP_CNT, C.HX_COMP_MIN, C.HX_COMP_MAX 
                                     , A.HOLD_CODE 
                                     , CASE WHEN A.HOLD_CODE = 'H72' AND A.OPER = 'A0000' THEN 'Y' ELSE 'N' END AS CK_STOCK_H72 
                                  FROM RWIPLOTSTS A  
                                     , MWIPOPRDEF B  
                                     , VWIPMATDEF C
                                 WHERE 1 = 1 
                                   AND A.FACTORY = B.FACTORY
                                   AND A.FACTORY = C.FACTORY
                                   AND A.OPER = B.OPER
                                   AND A.MAT_ID = C.MAT_ID
                                   AND A.FACTORY = 'HMVA2'  
                                   AND A.LOT_TYPE = 'W' 
                                   AND A.LOT_CMF_5 LIKE 'P%' 
                                   AND A.LOT_DEL_FLAG = ' ' 
                                   AND C.MAT_GRP_2 <> '-'
                                   AND C.DELETE_FLAG = ' '
                                   AND A.HOLD_CODE NOT IN ('H71','H54') 
                               )
                         WHERE CK_STOCK_H72 = 'N'
                       )
                 GROUP BY MAT_ID
               ) WIP
             , (
                SELECT MAT_ID
                     , SUM(CASE WHEN OPER IN ('A0200', 'A0230') THEN QTY ELSE 0 END) AS OUT_DP
                     , SUM(CASE WHEN OPER LIKE 'A04%' THEN QTY
                                WHEN OPER = 'A0333' THEN QTY
                                ELSE 0
                           END) AS OUT_DA                     
                     , SUM(CASE WHEN OPER LIKE 'A06%' THEN QTY ELSE 0 END) AS OUT_WB
                     , SUM(CASE WHEN OPER = 'A2100' THEN QTY ELSE 0 END) AS OUT_CLOSE 
                  FROM (    
                        SELECT MAT_ID, OPER, MAT_GRP_1, MAT_GRP_4, MAT_GRP_5
                             , CASE WHEN HX_COMP_MIN IS NOT NULL
                                         THEN (CASE WHEN HX_COMP_MIN <> HX_COMP_MAX AND OPER > HX_COMP_MIN AND OPER <= HX_COMP_MAX THEN QTY_1 / NVL(COMP_CNT / 2,1)
                                                    WHEN OPER <= HX_COMP_MAX THEN QTY_1 / NVL(COMP_CNT,1)
                                                    ELSE QTY_1 END)
                                    WHEN OPER <= 'A0395' THEN QTY_1 / NVL(COMP_CNT,1) 
                                    ELSE QTY_1 
                               END QTY
                          FROM (
                                SELECT MAT_ID, OPER, MAT_GRP_1, MAT_GRP_4, MAT_GRP_5, MAT_GRP_9, MAT_CMF_11
                                     , CASE WHEN MAT_CMF_11 IN ('DHL', 'DQZ', 'DRA', 'DQA', 'DND', 'DWG', 'DUT', 'HAU', 'HF8', 'HDM', 'HDR', 'HEN', 'HQA', 'HQC') THEN (CASE WHEN MAT_GRP_5 IN ('3rd','Merge') THEN END_QTY ELSE 0 END)
                                            WHEN MAT_ID LIKE 'SEK%' AND MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND (MAT_ID LIKE 'SEKS%' OR MAT_ID LIKE 'SEKY%'))
                                                 THEN (CASE WHEN MAT_GRP_5 IN ('2nd','Merge') THEN END_QTY ELSE 0 END)
                                            WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-'
                                                 THEN (CASE WHEN MAT_GRP_5 IN ('1st','Merge') THEN END_QTY ELSE 0 END)
                                            WHEN MAT_GRP_3 IN ('COB', 'BGN') THEN ROUND(END_QTY/NET_DIE,0)
                                            ELSE END_QTY
                                       END QTY_1 
                                     , COMP_CNT, HX_COMP_MIN, HX_COMP_MAX 
                                  FROM ( 
                                        SELECT A.OPER
                                             , (S1_END_QTY_1+S2_END_QTY_1+S3_END_QTY_1) AS END_QTY
                                             , B.*
                                          FROM RSUMWIPMOV A
                                             , VWIPMATDEF B
                                         WHERE 1=1
                                           AND A.FACTORY = B.FACTORY
                                           AND A.MAT_ID = B.MAT_ID
                                           AND A.FACTORY = 'HMVA2'
                                           AND A.WORK_DATE = '20200409'
                                           AND A.LOT_TYPE = 'W'
                                           AND A.CM_KEY_3 LIKE 'P%' 
                                           AND B.MAT_GRP_5 NOT LIKE 'Middle%'
                                           AND REGEXP_LIKE(A.OPER, 'A0200|A0230|A0333|A040*|A060*|A2100')
                                           AND ((A.OPER >= 'A0400' AND B.MAT_GRP_5 IN ('-', 'Merge')) OR (A.OPER < 'A0400'))
                                           AND A.MAT_ID NOT LIKE 'HX%'
                                         UNION ALL
                                        SELECT A.OPER
                                             , (S1_END_QTY_1+S2_END_QTY_1+S3_END_QTY_1) AS END_QTY
                                             , B.*
                                          FROM RSUMWIPMOV A
                                             , VWIPMATDEF B
                                         WHERE 1=1
                                           AND A.FACTORY = B.FACTORY
                                           AND A.MAT_ID = B.MAT_ID
                                           AND A.FACTORY = 'HMVA2'
                                           AND A.WORK_DATE = '20200409'
                                           AND A.LOT_TYPE = 'W'
                                           AND A.CM_KEY_3 LIKE 'P%' 
                                           AND B.MAT_GRP_5 NOT LIKE 'Middle%'
                                           AND REGEXP_LIKE(A.OPER, 'A0200|A0230|A0333|A040*|A060*|A2100')
                                           AND ((A.OPER >= 'A0400' AND B.MAT_GRP_5 IN ('-', 'Merge')) OR (A.OPER < 'A0400'))
                                           AND A.MAT_ID LIKE 'HX%'
                                       ) 
                               )
                       )
                 GROUP BY MAT_ID
               ) MOV
         WHERE 1=1
           AND MAT.MAT_ID = PLN.MAT_ID(+)
           AND MAT.MAT_ID = SHP.MAT_ID(+)
           AND MAT.MAT_ID = RCV.MAT_ID(+)
           AND MAT.MAT_ID = WIP.MAT_ID(+)
           AND MAT.MAT_ID = MOV.MAT_ID(+)
       ) A
 GROUP BY A.CUST_TYPE, A.MAT_GRP_9, A.MAT_GRP_1, A.MAT_GRP_10,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' '
 HAVING SUM(MON_PLN) + SUM(SHP_TTL) + SUM(WIP_TTL) + SUM(RCV_TODAY) + SUM(OUT_DP) + SUM(OUT_DA) + SUM(OUT_WB) + SUM(OUT_CLOSE) + SUM(SHP_TODAY) <> 0
 ORDER BY DECODE(CUST_TYPE, 'SEC', 1, 'Hynix', 2, 'Fabless', 3, 4), A.MAT_GRP_9, DECODE(A.MAT_GRP_1, 'SE', 1, 'HX', 2, 3),CUSTOMER, A.MAT_GRP_10,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' '

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT PLAN_WEEK V1    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_DATE = TO_CHAR(SYSDATE,'yyyymmdd')      AND ROWNUM = 1  
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT DISTINCT PLAN_YEAR||LPAD(PLAN_WEEK,2,'0') AS PLAN_WEEK 
  FROM MWIPCALDEF
 WHERE 1=1 
   AND CALENDAR_ID = 'OTD' 
   AND SYS_YEAR||LPAD(SYS_MONTH,2,'0') = '202004' 
 ORDER BY PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT DISTINCT PLAN_YEAR||LPAD(PLAN_WEEK,2,'0') AS PLAN_WEEK 
  FROM MWIPCALDEF
 WHERE 1=1 
   AND CALENDAR_ID = 'OTD' 
   AND SYS_YEAR||LPAD(SYS_MONTH,2,'0') = '202004' 
   AND SYS_DATE <= '20200409' 
 ORDER BY PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT LANGUAGE_2 FROM RWEBFUNDEF WHERE FUNC_NAME = 'PRD010907'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT DISTINCT PLAN_YEAR||LPAD(PLAN_WEEK,2,'0') AS PLAN_WEEK 
  FROM MWIPCALDEF
 WHERE 1=1 
   AND CALENDAR_ID = 'OTD' 
   AND SYS_YEAR||LPAD(SYS_MONTH,2,'0') = '202004' 
 ORDER BY PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT DISTINCT PLAN_YEAR||LPAD(PLAN_WEEK,2,'0') AS PLAN_WEEK 
  FROM MWIPCALDEF
 WHERE 1=1 
   AND CALENDAR_ID = 'OTD' 
   AND SYS_YEAR||LPAD(SYS_MONTH,2,'0') = '202004' 
   AND SYS_DATE <= '20200409' 
 ORDER BY PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE) AS START_DAY 
     , MAX(SYS_DATE) AS END_DAY 
     , PLAN_YEAR||DECODE(LENGTH(PLAN_WEEK), 1, '0'||PLAN_WEEK, PLAN_WEEK) AS WEEK
  FROM MWIPCALDEF 
 WHERE CALENDAR_ID = 'OTD'
   AND (PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) IN ( 
                                                SELECT WW
                                                  FROM (
                                                        SELECT WW
                                                             , ROW_NUMBER() OVER(ORDER BY WW) AS RNK
                                                          FROM (
                                                                SELECT DISTINCT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW
                                                                  FROM MWIPCALDEF
                                                                 WHERE CALENDAR_ID = 'OTD'
                                                                   AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') >= (
                                                                                                              SELECT MAX(PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) AS WW
                                                                                                                FROM MWIPCALDEF
                                                                                                               WHERE CALENDAR_ID = 'OTD'
                                                                                                                 AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') < (SELECT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW FROM MWIPCALDEF WHERE CALENDAR_ID = 'OTD' AND SYS_DATE = '20200409')
                                                                                                                 AND SYS_DATE >= TO_CHAR(TO_DATE('20200409', 'YYYYMMDD')-14, 'YYYYMMDD')
                                                                                                             )
                                                               ) 
                                                       )
                                                 WHERE RNK <= 7
                                               ) 
 GROUP BY PLAN_YEAR, PLAN_WEEK 
 ORDER BY PLAN_YEAR, PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
WITH DT AS
(
 SELECT B.PLAN_MONTH, A.PLAN_WEEK, A.GUBUN, B.CKD_WEEK, A.MAT_ID, A.WW_QTY, B.CNT
      , ROUND((A.WW_QTY / 7) * B.CNT, 0) AS REV_QTY
   FROM RWIPPLNWEK A
      , (
         SELECT MAX(TRIM(TO_CHAR(PLAN_YEAR))||LPAD(PLAN_MONTH,2,'0')) PLAN_MONTH
              , MAX(TRIM(TO_CHAR(PLAN_YEAR))||LPAD(PLAN_WEEK,2,'0')) PLAN_WEEK
              , COUNT(*) AS CNT
              , (SELECT MAX(TRIM(TO_CHAR(PLAN_YEAR))||LPAD(PLAN_WEEK,2,'0')) PLAN_WEEK FROM MWIPCALDEF WHERE CALENDAR_ID = 'OTD' AND SYS_DATE = '20200409') AS CKD_WEEK
           FROM MWIPCALDEF
          WHERE 1=1
            AND CALENDAR_ID = 'OTD'
            AND SYS_YEAR||LPAD(SYS_MONTH,2,'0') IN ('202004','202005','202006')
          GROUP BY PLAN_MONTH, PLAN_WEEK
        ) B
  WHERE 1=1
    AND A.PLAN_WEEK = B.PLAN_WEEK
    AND A.FACTORY = 'HMVA2' 
)
SELECT CUST_TYPE, NVL((SELECT DATA_1 FROM MGCMTBLDAT WHERE TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = MAT_GRP_1 AND ROWNUM=1), '-') AS CUSTOMER, MAT_GRP_9 AS MAJOR_CODE, MAT_GRP_2 AS FAMILY,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ' 
     , ROUND(SUM(MON_PLN * CONVERT_QTY) /1000,0) AS MON_PLN
     , ROUND(SUM(REV_PLN * CONVERT_QTY) /1000,0) AS REV_PLN
     , ROUND(SUM(SOP_PLN * CONVERT_QTY) /1000,0) AS SOP_PLN
     , ROUND(SUM(W0 * CONVERT_QTY) /1000,0) AS W0
     , ROUND(SUM(W1 * CONVERT_QTY) /1000,0) AS W1
     , ROUND(SUM(W2 * CONVERT_QTY) /1000,0) AS W2
     , ROUND(SUM(W3 * CONVERT_QTY) /1000,0) AS W3
     , ROUND(SUM(W4 * CONVERT_QTY) /1000,0) AS W4
     , ROUND(SUM(SHP_W0 * CONVERT_QTY) /1000,0) AS SHP_W0
     , ROUND(SUM(SHP_W1 * CONVERT_QTY) /1000,0) AS SHP_W1
     , ROUND(SUM(M1 * CONVERT_QTY) /1000,0) AS M1
     , ROUND(SUM(M2 * CONVERT_QTY) /1000,0) AS M2
  FROM (
        SELECT MAT.* 
             , NVL((SELECT DATA_10 FROM MGCMTBLDAT WHERE TABLE_NAME = 'H_CUSTOMER' AND FACTORY = 'HMVA2' AND  KEY_1 = MAT_GRP_1), '-') AS CUST_TYPE 
             , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN M_PLN.MON_PLN / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE M_PLN.MON_PLN END AS MON_PLN
             , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN M_PLN.REV_PLN / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE M_PLN.REV_PLN END AS REV_PLN
             , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN M_PLN.SOP_PLN / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE M_PLN.SOP_PLN END AS SOP_PLN
             , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN W0 / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE W0 END AS W0
             , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN W1 / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE W1 END AS W1
             , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN W2 / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE W2 END AS W2
             , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN W3 / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE W3 END AS W3
             , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN W4 / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE W4 END AS W4
             , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN SHP_W0 / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE SHP_W0 END AS SHP_W0
             , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN SHP_W1 / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE SHP_W1 END AS SHP_W1
             , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN M0 / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE M0 END AS M0
             , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN M1 / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE M1 END AS M1
             , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN M2 / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE M2 END AS M2
             , 1 AS CONVERT_QTY
          FROM MWIPMATDEF MAT
             , (
                SELECT MAT_ID
                     , SUM(PLAN_QTY_ASSY) AS MON_PLN
                     , SUM(DECODE(RESV_FIELD1, ' ', 0, RESV_FIELD1)) AS REV_PLN
                     , SUM(DECODE(RESV_FIELD3, ' ', 0, RESV_FIELD3)) AS SOP_PLN
                  FROM CWIPPLNMON 
                 WHERE 1=1 
                   AND FACTORY = 'HMVA2' 
                   AND PLAN_MONTH = '202004'
                 GROUP BY MAT_ID
               ) M_PLN
             , (
                SELECT MAT_ID
                     , SUM(DECODE(PLAN_WEEK, '202014', SHP_QTY, 0)) AS SHP_W0 
                     , SUM(DECODE(PLAN_WEEK, '202015', SHP_QTY, 0)) AS SHP_W1 
                  FROM (
                        SELECT TRIM(TO_CHAR(PLAN_YEAR))||LPAD(PLAN_WEEK,2,'0') AS PLAN_WEEK, MAT_ID
                             , SUM(SHP_QTY_1) AS SHP_QTY
                          FROM VSUMWIPOUT A
                             , MWIPCALDEF B 
                         WHERE 1=1 
                           AND A.WORK_DATE = B.SYS_DATE(+) 
                           AND A.WORK_DATE LIKE '202004%'
                           AND A.LOT_TYPE = 'W' 
                           AND A.FACTORY = 'HMVA2' 
                           AND A.CM_KEY_2 = 'PROD' 
                           AND A.CM_KEY_3 LIKE 'P%'
                           AND B.CALENDAR_ID(+) = 'OTD'
                           AND B.PLAN_YEAR||LPAD(B.PLAN_WEEK,2,'0') <= '202015'
                         GROUP BY TRIM(TO_CHAR(PLAN_YEAR))||LPAD(PLAN_WEEK,2,'0'), MAT_ID 
                         UNION ALL 
                        SELECT PLAN_WEEK, MAT_ID, SUM(REV_QTY) 
                          FROM DT 
                         WHERE GUBUN = '3' 
                           AND PLAN_WEEK = '202015'
                           AND PLAN_MONTH = '202004'
                         GROUP BY PLAN_WEEK, MAT_ID 
                       )
                 GROUP BY MAT_ID
               ) SHP
             , (
                SELECT MAT_ID
                     , SUM(CASE WHEN PLAN_MONTH = '202004' AND PLAN_WEEK = '202014' THEN REV_QTY ELSE 0 END) AS W0 
                     , SUM(CASE WHEN PLAN_MONTH = '202004' AND PLAN_WEEK = '202015' THEN REV_QTY ELSE 0 END) AS W1 
                     , SUM(CASE WHEN PLAN_MONTH = '202004' AND PLAN_WEEK = '202016' THEN REV_QTY ELSE 0 END) AS W2 
                     , SUM(CASE WHEN PLAN_MONTH = '202004' AND PLAN_WEEK = '202017' THEN REV_QTY ELSE 0 END) AS W3 
                     , SUM(CASE WHEN PLAN_MONTH = '202004' AND PLAN_WEEK = '202018' THEN REV_QTY ELSE 0 END) AS W4 
                     , SUM(CASE WHEN PLAN_WEEK >= CKD_WEEK THEN REV_QTY ELSE 0 END) AS W_LAST
                     , SUM(DECODE(PLAN_MONTH, '202004', REV_QTY, 0)) AS M0
                     , SUM(DECODE(PLAN_MONTH, '202005', REV_QTY, 0)) AS M1
                     , SUM(DECODE(PLAN_MONTH, '202006', REV_QTY, 0)) AS M2
                  FROM (
                        SELECT * FROM DT WHERE GUBUN = '3'
                       )
                 GROUP BY MAT_ID
               ) W_PLN
         WHERE 1=1
           AND MAT.MAT_ID = M_PLN.MAT_ID(+)
           AND MAT.MAT_ID = SHP.MAT_ID(+)
           AND MAT.MAT_ID = W_PLN.MAT_ID(+)
           AND MAT.FACTORY = 'HMVA2'
           AND MAT.DELETE_FLAG = ' '
           AND MAT.MAT_TYPE = 'FG'
           AND MAT.MAT_ID LIKE '%'
       )
 GROUP BY CUST_TYPE, MAT_GRP_1, MAT_GRP_9, MAT_GRP_2,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ' 
HAVING SUM(NVL(MON_PLN,0) + NVL(REV_PLN,0) + NVL(SOP_PLN,0) +  + NVL(W0,0) + NVL(W1,0) + NVL(W2,0) + NVL(W3,0) + NVL(W4,0) + NVL(SHP_W0,0) + NVL(SHP_W1,0) + NVL(M0,0) + NVL(M1,0) + NVL(M2,0)) > 0
 ORDER BY DECODE(CUST_TYPE, 'SEC', 1, 'Hynix', 2, 'Fabless', 3, 4), MAT_GRP_1, MAT_GRP_9, MAT_GRP_2,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ' 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT PLAN_WEEK V1    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_DATE = TO_CHAR(SYSDATE,'yyyymmdd')      AND ROWNUM = 1  
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT DISTINCT PLAN_YEAR||LPAD(PLAN_WEEK,2,'0') AS PLAN_WEEK 
  FROM MWIPCALDEF
 WHERE 1=1 
   AND CALENDAR_ID = 'OTD' 
   AND SYS_YEAR||LPAD(SYS_MONTH,2,'0') = '202004' 
 ORDER BY PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT DISTINCT PLAN_YEAR||LPAD(PLAN_WEEK,2,'0') AS PLAN_WEEK 
  FROM MWIPCALDEF
 WHERE 1=1 
   AND CALENDAR_ID = 'OTD' 
   AND SYS_YEAR||LPAD(SYS_MONTH,2,'0') = '202004' 
   AND SYS_DATE <= '20200409' 
 ORDER BY PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT LANGUAGE_2 FROM RWEBFUNDEF WHERE FUNC_NAME = 'PRD010907'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT DISTINCT PLAN_YEAR||LPAD(PLAN_WEEK,2,'0') AS PLAN_WEEK 
  FROM MWIPCALDEF
 WHERE 1=1 
   AND CALENDAR_ID = 'OTD' 
   AND SYS_YEAR||LPAD(SYS_MONTH,2,'0') = '202004' 
 ORDER BY PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT DISTINCT PLAN_YEAR||LPAD(PLAN_WEEK,2,'0') AS PLAN_WEEK 
  FROM MWIPCALDEF
 WHERE 1=1 
   AND CALENDAR_ID = 'OTD' 
   AND SYS_YEAR||LPAD(SYS_MONTH,2,'0') = '202004' 
   AND SYS_DATE <= '20200409' 
 ORDER BY PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE) AS START_DAY 
     , MAX(SYS_DATE) AS END_DAY 
     , PLAN_YEAR||DECODE(LENGTH(PLAN_WEEK), 1, '0'||PLAN_WEEK, PLAN_WEEK) AS WEEK
  FROM MWIPCALDEF 
 WHERE CALENDAR_ID = 'OTD'
   AND (PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) IN ( 
                                                SELECT WW
                                                  FROM (
                                                        SELECT WW
                                                             , ROW_NUMBER() OVER(ORDER BY WW) AS RNK
                                                          FROM (
                                                                SELECT DISTINCT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW
                                                                  FROM MWIPCALDEF
                                                                 WHERE CALENDAR_ID = 'OTD'
                                                                   AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') >= (
                                                                                                              SELECT MAX(PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) AS WW
                                                                                                                FROM MWIPCALDEF
                                                                                                               WHERE CALENDAR_ID = 'OTD'
                                                                                                                 AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') < (SELECT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW FROM MWIPCALDEF WHERE CALENDAR_ID = 'OTD' AND SYS_DATE = '20200409')
                                                                                                                 AND SYS_DATE >= TO_CHAR(TO_DATE('20200409', 'YYYYMMDD')-14, 'YYYYMMDD')
                                                                                                             )
                                                               ) 
                                                       )
                                                 WHERE RNK <= 7
                                               ) 
 GROUP BY PLAN_YEAR, PLAN_WEEK 
 ORDER BY PLAN_YEAR, PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
WITH DT AS
(
 SELECT B.PLAN_MONTH, A.PLAN_WEEK, A.GUBUN, B.CKD_WEEK, A.MAT_ID, A.WW_QTY, B.CNT
      , ROUND((A.WW_QTY / 7) * B.CNT, 0) AS REV_QTY
   FROM RWIPPLNWEK A
      , (
         SELECT MAX(TRIM(TO_CHAR(PLAN_YEAR))||LPAD(PLAN_MONTH,2,'0')) PLAN_MONTH
              , MAX(TRIM(TO_CHAR(PLAN_YEAR))||LPAD(PLAN_WEEK,2,'0')) PLAN_WEEK
              , COUNT(*) AS CNT
              , (SELECT MAX(TRIM(TO_CHAR(PLAN_YEAR))||LPAD(PLAN_WEEK,2,'0')) PLAN_WEEK FROM MWIPCALDEF WHERE CALENDAR_ID = 'OTD' AND SYS_DATE = '20200409') AS CKD_WEEK
           FROM MWIPCALDEF
          WHERE 1=1
            AND CALENDAR_ID = 'OTD'
            AND SYS_YEAR||LPAD(SYS_MONTH,2,'0') IN ('202004','202005','202006')
          GROUP BY PLAN_MONTH, PLAN_WEEK
        ) B
  WHERE 1=1
    AND A.PLAN_WEEK = B.PLAN_WEEK
    AND A.FACTORY = 'HMVA2' 
)
SELECT CUST_TYPE, NVL((SELECT DATA_1 FROM MGCMTBLDAT WHERE TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = MAT_GRP_1 AND ROWNUM=1), '-') AS CUSTOMER, MAT_GRP_9 AS MAJOR_CODE, MAT_GRP_2 AS FAMILY,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ' 
     , ROUND(SUM(MON_PLN * CONVERT_QTY) /1000,0) AS MON_PLN
     , ROUND(SUM(REV_PLN * CONVERT_QTY) /1000,0) AS REV_PLN
     , ROUND(SUM(SOP_PLN * CONVERT_QTY) /1000,0) AS SOP_PLN
     , ROUND(SUM(W0 * CONVERT_QTY) /1000,0) AS W0
     , ROUND(SUM(W1 * CONVERT_QTY) /1000,0) AS W1
     , ROUND(SUM(W2 * CONVERT_QTY) /1000,0) AS W2
     , ROUND(SUM(W3 * CONVERT_QTY) /1000,0) AS W3
     , ROUND(SUM(W4 * CONVERT_QTY) /1000,0) AS W4
     , ROUND(SUM(SHP_W0 * CONVERT_QTY) /1000,0) AS SHP_W0
     , ROUND(SUM(SHP_W1 * CONVERT_QTY) /1000,0) AS SHP_W1
     , ROUND(SUM(M1 * CONVERT_QTY) /1000,0) AS M1
     , ROUND(SUM(M2 * CONVERT_QTY) /1000,0) AS M2
  FROM (
        SELECT MAT.* 
             , NVL((SELECT DATA_10 FROM MGCMTBLDAT WHERE TABLE_NAME = 'H_CUSTOMER' AND FACTORY = 'HMVA2' AND  KEY_1 = MAT_GRP_1), '-') AS CUST_TYPE 
             , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN M_PLN.MON_PLN / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE M_PLN.MON_PLN END AS MON_PLN
             , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN M_PLN.REV_PLN / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE M_PLN.REV_PLN END AS REV_PLN
             , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN M_PLN.SOP_PLN / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE M_PLN.SOP_PLN END AS SOP_PLN
             , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN W0 / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE W0 END AS W0
             , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN W1 / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE W1 END AS W1
             , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN W2 / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE W2 END AS W2
             , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN W3 / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE W3 END AS W3
             , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN W4 / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE W4 END AS W4
             , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN SHP_W0 / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE SHP_W0 END AS SHP_W0
             , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN SHP_W1 / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE SHP_W1 END AS SHP_W1
             , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN M0 / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE M0 END AS M0
             , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN M1 / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE M1 END AS M1
             , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN M2 / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE M2 END AS M2
             , 1 AS CONVERT_QTY
          FROM MWIPMATDEF MAT
             , (
                SELECT MAT_ID
                     , SUM(PLAN_QTY_ASSY) AS MON_PLN
                     , SUM(DECODE(RESV_FIELD1, ' ', 0, RESV_FIELD1)) AS REV_PLN
                     , SUM(DECODE(RESV_FIELD3, ' ', 0, RESV_FIELD3)) AS SOP_PLN
                  FROM CWIPPLNMON 
                 WHERE 1=1 
                   AND FACTORY = 'HMVA2' 
                   AND PLAN_MONTH = '202004'
                 GROUP BY MAT_ID
               ) M_PLN
             , (
                SELECT MAT_ID
                     , SUM(DECODE(PLAN_WEEK, '202014', SHP_QTY, 0)) AS SHP_W0 
                     , SUM(DECODE(PLAN_WEEK, '202015', SHP_QTY, 0)) AS SHP_W1 
                  FROM (
                        SELECT TRIM(TO_CHAR(PLAN_YEAR))||LPAD(PLAN_WEEK,2,'0') AS PLAN_WEEK, MAT_ID
                             , SUM(SHP_QTY_1) AS SHP_QTY
                          FROM VSUMWIPOUT A
                             , MWIPCALDEF B 
                         WHERE 1=1 
                           AND A.WORK_DATE = B.SYS_DATE(+) 
                           AND A.WORK_DATE LIKE '202004%'
                           AND A.LOT_TYPE = 'W' 
                           AND A.FACTORY = 'HMVA2' 
                           AND A.CM_KEY_2 = 'PROD' 
                           AND A.CM_KEY_3 LIKE 'P%'
                           AND B.CALENDAR_ID(+) = 'OTD'
                           AND B.PLAN_YEAR||LPAD(B.PLAN_WEEK,2,'0') <= '202015'
                         GROUP BY TRIM(TO_CHAR(PLAN_YEAR))||LPAD(PLAN_WEEK,2,'0'), MAT_ID 
                         UNION ALL 
                        SELECT PLAN_WEEK, MAT_ID, SUM(REV_QTY) 
                          FROM DT 
                         WHERE GUBUN = '3' 
                           AND PLAN_WEEK = '202015'
                           AND PLAN_MONTH = '202004'
                         GROUP BY PLAN_WEEK, MAT_ID 
                       )
                 GROUP BY MAT_ID
               ) SHP
             , (
                SELECT MAT_ID
                     , SUM(CASE WHEN PLAN_MONTH = '202004' AND PLAN_WEEK = '202014' THEN REV_QTY ELSE 0 END) AS W0 
                     , SUM(CASE WHEN PLAN_MONTH = '202004' AND PLAN_WEEK = '202015' THEN REV_QTY ELSE 0 END) AS W1 
                     , SUM(CASE WHEN PLAN_MONTH = '202004' AND PLAN_WEEK = '202016' THEN REV_QTY ELSE 0 END) AS W2 
                     , SUM(CASE WHEN PLAN_MONTH = '202004' AND PLAN_WEEK = '202017' THEN REV_QTY ELSE 0 END) AS W3 
                     , SUM(CASE WHEN PLAN_MONTH = '202004' AND PLAN_WEEK = '202018' THEN REV_QTY ELSE 0 END) AS W4 
                     , SUM(CASE WHEN PLAN_WEEK >= CKD_WEEK THEN REV_QTY ELSE 0 END) AS W_LAST
                     , SUM(DECODE(PLAN_MONTH, '202004', REV_QTY, 0)) AS M0
                     , SUM(DECODE(PLAN_MONTH, '202005', REV_QTY, 0)) AS M1
                     , SUM(DECODE(PLAN_MONTH, '202006', REV_QTY, 0)) AS M2
                  FROM (
                        SELECT * FROM DT WHERE GUBUN = '3'
                       )
                 GROUP BY MAT_ID
               ) W_PLN
         WHERE 1=1
           AND MAT.MAT_ID = M_PLN.MAT_ID(+)
           AND MAT.MAT_ID = SHP.MAT_ID(+)
           AND MAT.MAT_ID = W_PLN.MAT_ID(+)
           AND MAT.FACTORY = 'HMVA2'
           AND MAT.DELETE_FLAG = ' '
           AND MAT.MAT_TYPE = 'FG'
           AND MAT.MAT_ID LIKE '%'
       )
 GROUP BY CUST_TYPE, MAT_GRP_1, MAT_GRP_9, MAT_GRP_2,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ' 
HAVING SUM(NVL(MON_PLN,0) + NVL(REV_PLN,0) + NVL(SOP_PLN,0) +  + NVL(W0,0) + NVL(W1,0) + NVL(W2,0) + NVL(W3,0) + NVL(W4,0) + NVL(SHP_W0,0) + NVL(SHP_W1,0) + NVL(M0,0) + NVL(M1,0) + NVL(M2,0)) > 0
 ORDER BY DECODE(CUST_TYPE, 'SEC', 1, 'Hynix', 2, 'Fabless', 3, 4), MAT_GRP_1, MAT_GRP_9, MAT_GRP_2,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ' 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
SELECT MIN(SYS_DATE) AS START_DAY 
     , MAX(SYS_DATE) AS END_DAY 
     , PLAN_YEAR||DECODE(LENGTH(PLAN_WEEK), 1, '0'||PLAN_WEEK, PLAN_WEEK) AS WEEK
  FROM MWIPCALDEF 
 WHERE CALENDAR_ID = 'OTD'
   AND (PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) IN ( 
                                                SELECT WW
                                                  FROM (
                                                        SELECT WW
                                                             , ROW_NUMBER() OVER(ORDER BY WW) AS RNK
                                                          FROM (
                                                                SELECT DISTINCT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW
                                                                  FROM MWIPCALDEF
                                                                 WHERE CALENDAR_ID = 'OTD'
                                                                   AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') >= (
                                                                                                              SELECT MAX(PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) AS WW
                                                                                                                FROM MWIPCALDEF
                                                                                                               WHERE CALENDAR_ID = 'OTD'
                                                                                                                 AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') < (SELECT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW FROM MWIPCALDEF WHERE CALENDAR_ID = 'OTD' AND SYS_DATE = '20200409')
                                                                                                                 AND SYS_DATE >= TO_CHAR(TO_DATE('20200409', 'YYYYMMDD')-14, 'YYYYMMDD')
                                                                                                             )
                                                               ) 
                                                       )
                                                 WHERE RNK <= 7
                                               ) 
 GROUP BY PLAN_YEAR, PLAN_WEEK 
 ORDER BY PLAN_YEAR, PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE) AS START_DAY 
     , MAX(SYS_DATE) AS END_DAY 
     , PLAN_YEAR||DECODE(LENGTH(PLAN_WEEK), 1, '0'||PLAN_WEEK, PLAN_WEEK) AS WEEK
  FROM MWIPCALDEF 
 WHERE CALENDAR_ID = 'SE'
   AND (PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) IN ( 
                                                SELECT WW
                                                  FROM (
                                                        SELECT WW
                                                             , ROW_NUMBER() OVER(ORDER BY WW) AS RNK
                                                          FROM (
                                                                SELECT DISTINCT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW
                                                                  FROM MWIPCALDEF
                                                                 WHERE CALENDAR_ID = 'SE'
                                                                   AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') >= (
                                                                                                              SELECT MAX(PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) AS WW
                                                                                                                FROM MWIPCALDEF
                                                                                                               WHERE CALENDAR_ID = 'SE'
                                                                                                                 AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') < (SELECT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW FROM MWIPCALDEF WHERE CALENDAR_ID = 'SE' AND SYS_DATE = '20200409')
                                                                                                                 AND SYS_DATE >= TO_CHAR(TO_DATE('20200409', 'YYYYMMDD')-14, 'YYYYMMDD')
                                                                                                             )
                                                               ) 
                                                       )
                                                 WHERE RNK <= 7
                                               ) 
 GROUP BY PLAN_YEAR, PLAN_WEEK 
 ORDER BY PLAN_YEAR, PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT LANGUAGE_2 FROM RWEBFUNDEF WHERE FUNC_NAME = 'PRD011006'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE) AS START_DAY 
     , MAX(SYS_DATE) AS END_DAY 
     , PLAN_YEAR||DECODE(LENGTH(PLAN_WEEK), 1, '0'||PLAN_WEEK, PLAN_WEEK) AS WEEK
  FROM MWIPCALDEF 
 WHERE CALENDAR_ID = 'OTD'
   AND (PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) IN ( 
                                                SELECT WW
                                                  FROM (
                                                        SELECT WW
                                                             , ROW_NUMBER() OVER(ORDER BY WW) AS RNK
                                                          FROM (
                                                                SELECT DISTINCT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW
                                                                  FROM MWIPCALDEF
                                                                 WHERE CALENDAR_ID = 'OTD'
                                                                   AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') >= (
                                                                                                              SELECT MAX(PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) AS WW
                                                                                                                FROM MWIPCALDEF
                                                                                                               WHERE CALENDAR_ID = 'OTD'
                                                                                                                 AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') < (SELECT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW FROM MWIPCALDEF WHERE CALENDAR_ID = 'OTD' AND SYS_DATE = '20200409')
                                                                                                                 AND SYS_DATE >= TO_CHAR(TO_DATE('20200409', 'YYYYMMDD')-14, 'YYYYMMDD')
                                                                                                             )
                                                               ) 
                                                       )
                                                 WHERE RNK <= 7
                                               ) 
 GROUP BY PLAN_YEAR, PLAN_WEEK 
 ORDER BY PLAN_YEAR, PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE) AS START_DAY 
     , MAX(SYS_DATE) AS END_DAY 
     , PLAN_YEAR||DECODE(LENGTH(PLAN_WEEK), 1, '0'||PLAN_WEEK, PLAN_WEEK) AS WEEK
  FROM MWIPCALDEF 
 WHERE CALENDAR_ID = 'SE'
   AND (PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) IN ( 
                                                SELECT WW
                                                  FROM (
                                                        SELECT WW
                                                             , ROW_NUMBER() OVER(ORDER BY WW) AS RNK
                                                          FROM (
                                                                SELECT DISTINCT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW
                                                                  FROM MWIPCALDEF
                                                                 WHERE CALENDAR_ID = 'SE'
                                                                   AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') >= (
                                                                                                              SELECT MAX(PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) AS WW
                                                                                                                FROM MWIPCALDEF
                                                                                                               WHERE CALENDAR_ID = 'SE'
                                                                                                                 AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') < (SELECT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW FROM MWIPCALDEF WHERE CALENDAR_ID = 'SE' AND SYS_DATE = '20200409')
                                                                                                                 AND SYS_DATE >= TO_CHAR(TO_DATE('20200409', 'YYYYMMDD')-14, 'YYYYMMDD')
                                                                                                             )
                                                               ) 
                                                       )
                                                 WHERE RNK <= 7
                                               ) 
 GROUP BY PLAN_YEAR, PLAN_WEEK 
 ORDER BY PLAN_YEAR, PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE) AS START_DAY 
     , MAX(SYS_DATE) AS END_DAY 
     , PLAN_YEAR||DECODE(LENGTH(PLAN_WEEK), 1, '0'||PLAN_WEEK, PLAN_WEEK) AS WEEK
  FROM MWIPCALDEF 
 WHERE CALENDAR_ID = 'OTD'
   AND (PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) IN ( 
                                                SELECT WW
                                                  FROM (
                                                        SELECT WW
                                                             , ROW_NUMBER() OVER(ORDER BY WW) AS RNK
                                                          FROM (
                                                                SELECT DISTINCT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW
                                                                  FROM MWIPCALDEF
                                                                 WHERE CALENDAR_ID = 'OTD'
                                                                   AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') >= (
                                                                                                              SELECT MAX(PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) AS WW
                                                                                                                FROM MWIPCALDEF
                                                                                                               WHERE CALENDAR_ID = 'OTD'
                                                                                                                 AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') < (SELECT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW FROM MWIPCALDEF WHERE CALENDAR_ID = 'OTD' AND SYS_DATE = '20200409')
                                                                                                                 AND SYS_DATE >= TO_CHAR(TO_DATE('20200409', 'YYYYMMDD')-14, 'YYYYMMDD')
                                                                                                             )
                                                               ) 
                                                       )
                                                 WHERE RNK <= 7
                                               ) 
 GROUP BY PLAN_YEAR, PLAN_WEEK 
 ORDER BY PLAN_YEAR, PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE) AS START_DAY 
     , MAX(SYS_DATE) AS END_DAY 
     , PLAN_YEAR||DECODE(LENGTH(PLAN_WEEK), 1, '0'||PLAN_WEEK, PLAN_WEEK) AS WEEK
  FROM MWIPCALDEF 
 WHERE CALENDAR_ID = 'SE'
   AND (PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) IN ( 
                                                SELECT WW
                                                  FROM (
                                                        SELECT WW
                                                             , ROW_NUMBER() OVER(ORDER BY WW) AS RNK
                                                          FROM (
                                                                SELECT DISTINCT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW
                                                                  FROM MWIPCALDEF
                                                                 WHERE CALENDAR_ID = 'SE'
                                                                   AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') >= (
                                                                                                              SELECT MAX(PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) AS WW
                                                                                                                FROM MWIPCALDEF
                                                                                                               WHERE CALENDAR_ID = 'SE'
                                                                                                                 AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') < (SELECT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW FROM MWIPCALDEF WHERE CALENDAR_ID = 'SE' AND SYS_DATE = '20200409')
                                                                                                                 AND SYS_DATE >= TO_CHAR(TO_DATE('20200409', 'YYYYMMDD')-14, 'YYYYMMDD')
                                                                                                             )
                                                               ) 
                                                       )
                                                 WHERE RNK <= 7
                                               ) 
 GROUP BY PLAN_YEAR, PLAN_WEEK 
 ORDER BY PLAN_YEAR, PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT (SELECT DATA_1 FROM MGCMTBLDAT@RPTTOMES WHERE FACTORY = 'HMVA2' AND TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = A.MAT_GRP_1) CUSTOMER, A.MAT_GRP_9, A.MAT_GRP_10,  ' ',  ' ',  ' ',  ' '
     , ROUND(SUM(ORI_PLN) / 1000, 0) AS ORI_PLN
     , ROUND(SUM(REV_PLN) / 1000, 0) AS REV_PLN
     , ROUND(SUM(SHP_TTL) / 1000, 0) AS SHP_TTL
     , ROUND(DECODE(SUM(ORI_PLN), 0, 0, SUM(SHP_TTL) / SUM(ORI_PLN) * 100), 1) AS JINDO_1
     , ROUND(DECODE(SUM(REV_PLN), 0, 0, SUM(SHP_TTL) / SUM(REV_PLN) * 100), 1) AS JINDO_2
     , ROUND(SUM(D1_PLAN) / 1000, 0) AS D1_PLAN
     , ROUND(SUM(NVL(D0_PLAN,0) - NVL(SHP_WEEK,0)) / 1000, 0) AS D0_PLAN
     , ROUND(SUM(SHP_TODAY) / 1000, 0) AS SHP_TODAY
     , ROUND(SUM(NVL(D0_PLAN,0) - NVL(SHP_WEEK,0) - NVL(SHP_TODAY,0)) / 1000, 0) AS D0_DEF
     , ROUND(SUM(HMK3A) / 1000, 0) AS HMK3A
     , ROUND(SUM(QC_GATE) / 1000, 0) AS QC_GATE
     , ROUND(SUM(PVI) / 1000, 0) AS PVI
     , ROUND(SUM(AVI) / 1000, 0) AS AVI
     , ROUND(SUM(SIG) / 1000, 0) AS SIG
     , ROUND(SUM(SBA) / 1000, 0) AS SBA
     , ROUND(SUM(TIN) / 1000, 0) AS TIN
     , ROUND(SUM(TRIM) / 1000, 0) AS TRIM
     , ROUND(SUM(MK) / 1000, 0) AS MK
     , ROUND(SUM(CURE) / 1000, 0) AS CURE
     , ROUND(SUM(MOLD) / 1000, 0) AS MOLD
     , ROUND(SUM(F_GATE) / 1000, 0) AS F_GATE
     , ROUND(SUM(F_WB9) / 1000, 0) AS F_WB9
     , ROUND(SUM(F_DA9) / 1000, 0) AS F_DA9
     , ROUND(SUM(F_WB8) / 1000, 0) AS F_WB8
     , ROUND(SUM(F_DA8) / 1000, 0) AS F_DA8
     , ROUND(SUM(F_WB7) / 1000, 0) AS F_WB7
     , ROUND(SUM(F_DA7) / 1000, 0) AS F_DA7
     , ROUND(SUM(F_WB6) / 1000, 0) AS F_WB6
     , ROUND(SUM(F_DA6) / 1000, 0) AS F_DA6
     , ROUND(SUM(F_WB5) / 1000, 0) AS F_WB5
     , ROUND(SUM(F_DA5) / 1000, 0) AS F_DA5
     , ROUND(SUM(F_WB4) / 1000, 0) AS F_WB4
     , ROUND(SUM(F_DA4) / 1000, 0) AS F_DA4
     , ROUND(SUM(F_WB3) / 1000, 0) AS F_WB3
     , ROUND(SUM(F_DA3) / 1000, 0) AS F_DA3
     , ROUND(SUM(F_WB2) / 1000, 0) AS F_WB2
     , ROUND(SUM(F_DA2) / 1000, 0) AS F_DA2
     , ROUND(SUM(F_WB1) / 1000, 0) AS F_WB1
     , ROUND(SUM(F_DA1 + SMT) / 1000, 0) AS F_DA1
     , ROUND(SUM(SP) / 1000, 0) AS SP
     , ROUND(SUM(SAW) / 1000, 0) AS SAW
     , ROUND(SUM(BG) / 1000, 0) AS BG
     , ROUND(SUM(STOCK) / 1000, 0) AS STOCK
     , ROUND(SUM(HMK3A + QC_GATE + PVI + AVI + SIG + SBA + TIN + TRIM + MK + CURE + MOLD + F_GATE + F_WB5 + F_DA5 + 
                 F_WB4 + F_DA4 + F_WB3 + F_DA3 + F_WB2 + F_DA2 + F_WB1 + F_DA1 + SP + SAW + BG + STOCK) / 1000, 0) AS WIP_TTL 
     , ROUND(SUM(RCV_QTY) / 1000, 0) AS RCV_QTY
     , ROUND(SUM(OUT_HMKA3) / 1000, 0) AS OUT_HMKA3
     , ROUND(SUM(OUT_CLOSE) / 1000, 0) AS OUT_CLOSE
     , ROUND(SUM(OUT_SIG) / 1000, 0) AS OUT_SIG
     , ROUND(SUM(OUT_MK) / 1000, 0) AS OUT_MK
     , ROUND(SUM(OUT_MOLD) / 1000, 0) AS OUT_MOLD
     , ROUND(SUM(OUT_WB9) / 1000, 0) AS OUT_WB9
     , ROUND(SUM(OUT_DA9) / 1000, 0) AS OUT_DA9
     , ROUND(SUM(OUT_WB8) / 1000, 0) AS OUT_WB8
     , ROUND(SUM(OUT_DA8) / 1000, 0) AS OUT_DA8
     , ROUND(SUM(OUT_WB7) / 1000, 0) AS OUT_WB7
     , ROUND(SUM(OUT_DA7) / 1000, 0) AS OUT_DA7
     , ROUND(SUM(OUT_WB6) / 1000, 0) AS OUT_WB6
     , ROUND(SUM(OUT_DA6) / 1000, 0) AS OUT_DA6
     , ROUND(SUM(OUT_WB5) / 1000, 0) AS OUT_WB5
     , ROUND(SUM(OUT_DA5) / 1000, 0) AS OUT_DA5
     , ROUND(SUM(OUT_WB4) / 1000, 0) AS OUT_WB4
     , ROUND(SUM(OUT_DA4) / 1000, 0) AS OUT_DA4
     , ROUND(SUM(OUT_WB3) / 1000, 0) AS OUT_WB3
     , ROUND(SUM(OUT_DA3) / 1000, 0) AS OUT_DA3
     , ROUND(SUM(OUT_WB2) / 1000, 0) AS OUT_WB2
     , ROUND(SUM(OUT_DA2) / 1000, 0) AS OUT_DA2
     , ROUND(SUM(OUT_WB1) / 1000, 0) AS OUT_WB1
     , ROUND(SUM(OUT_DA1) / 1000, 0) AS OUT_DA1
     , ROUND(SUM(OUT_DDS) / 1000, 0) AS OUT_DDS
     , ROUND(SUM(OUT_SAW) / 1000, 0) AS OUT_SAW
     , ROUND(SUM(OUT_BG) / 1000, 0) AS OUT_BG
     , ROUND(SUM(OUT_STEALTH) / 1000, 0) AS OUT_STEALTH
     , ROUND(SUM(OUT_PRI) / 1000, 0) AS OUT_PRI
     , ROUND(SUM(OUT_LAMI) / 1000, 0) AS OUT_LAMI
     , ROUND(SUM(OUT_STOCK) / 1000, 0) AS OUT_STOCK
  FROM (
        SELECT MAT.*
             , NVL(CASE WHEN MAT.MAT_GRP_3 IN ('COB') THEN ROUND(PLN.ORI_PLN/MAT.NET_DIE,0) ELSE PLN.ORI_PLN END, 0) * PRICE AS ORI_PLN
             , NVL(CASE WHEN MAT.MAT_GRP_3 IN ('COB') THEN ROUND(PLN.REV_PLN/MAT.NET_DIE,0) ELSE PLN.REV_PLN END, 0) * PRICE AS REV_PLN
             , NVL(CASE WHEN MAT.MAT_GRP_3 IN ('COB') THEN ROUND(SHP.SHP_TTL/MAT.NET_DIE,0) ELSE SHP.SHP_TTL END, 0) * PRICE AS SHP_TTL
             , NVL(CASE WHEN MAT.MAT_GRP_3 IN ('COB') THEN ROUND(PLN.D0_PLAN/MAT.NET_DIE,0) ELSE PLN.D0_PLAN END, 0) * PRICE AS D0_PLAN
             , NVL(CASE WHEN MAT.MAT_GRP_3 IN ('COB') THEN ROUND(PLN.D1_PLAN/MAT.NET_DIE,0) ELSE PLN.D1_PLAN END, 0) * PRICE AS D1_PLAN
             , NVL(CASE WHEN MAT.MAT_GRP_3 IN ('COB') THEN ROUND(SHP.SHP_TODAY/MAT.NET_DIE,0) ELSE SHP.SHP_TODAY END, 0) * PRICE AS SHP_TODAY 
             , NVL(CASE WHEN MAT.MAT_GRP_3 IN ('COB') THEN ROUND(SHP.SHP_WEEK/MAT.NET_DIE,0) ELSE SHP.SHP_WEEK END, 0) * PRICE AS SHP_WEEK 
             , NVL(STOCK,0) * PRICE AS STOCK, NVL(BG,0) * PRICE AS BG, NVL(SAW,0) * PRICE AS SAW, NVL(SP,0) * PRICE AS SP, NVL(SMT,0) * PRICE AS SMT, NVL(DA,0) * PRICE AS DA
             , NVL(S_DA1,0) * PRICE AS S_DA1, NVL(S_DA2,0) * PRICE AS S_DA2, NVL(S_DA3,0) * PRICE AS S_DA3, NVL(S_DA4,0) * PRICE AS S_DA4, NVL(S_DA5,0) * PRICE AS S_DA5
             , NVL(S_DA6,0) * PRICE AS S_DA6, NVL(S_DA7,0) * PRICE AS S_DA7, NVL(S_DA8,0) * PRICE AS S_DA8, NVL(S_DA9,0) * PRICE AS S_DA9
             , NVL(F_DA1,0) * PRICE AS F_DA1, NVL(F_DA2,0) * PRICE AS F_DA2, NVL(F_DA3,0) * PRICE AS F_DA3, NVL(F_DA4,0) * PRICE AS F_DA4, NVL(F_DA5,0) * PRICE AS F_DA5
             , NVL(F_DA6,0) * PRICE AS F_DA6, NVL(F_DA7,0) * PRICE AS F_DA7, NVL(F_DA8,0) * PRICE AS F_DA8, NVL(F_DA9,0) * PRICE AS F_DA9
             , NVL(WB,0) * PRICE AS WB, NVL(S_WB1,0) * PRICE AS S_WB1, NVL(S_WB2,0) * PRICE AS S_WB2, NVL(S_WB3,0) * PRICE AS S_WB3, NVL(S_WB4,0) * PRICE AS S_WB4
             , NVL(S_WB5,0) * PRICE AS S_WB5, NVL(S_WB6,0) * PRICE AS S_WB6, NVL(S_WB7,0) * PRICE AS S_WB7, NVL(S_WB8,0) * PRICE AS S_WB8, NVL(S_WB9,0) * PRICE AS S_WB9
             , NVL(F_WB1,0) * PRICE AS F_WB1, NVL(F_WB2,0) * PRICE AS F_WB2, NVL(F_WB3,0) * PRICE AS F_WB3, NVL(F_WB4,0) * PRICE AS F_WB4
             , NVL(F_WB5,0) * PRICE AS F_WB5, NVL(F_WB6,0) * PRICE AS F_WB6, NVL(F_WB7,0) * PRICE AS F_WB7, NVL(F_WB8,0) * PRICE AS F_WB8, NVL(F_WB9,0) * PRICE AS F_WB9
             , NVL(GATE,0) * PRICE AS GATE, NVL(F_GATE,0) * PRICE  AS F_GATE, NVL(MOLD,0) * PRICE AS MOLD, NVL(CURE,0) * PRICE AS CURE
             , NVL(MK,0) * PRICE AS MK, NVL(TRIM,0) * PRICE AS TRIM, NVL(TIN,0) * PRICE AS TIN, NVL(SBA,0) * PRICE AS SBA, NVL(SIG,0) * PRICE AS SIG
             , NVL(AVI,0) * PRICE AS AVI, NVL(VI,0) * PRICE AS VI, NVL(PVI,0) * PRICE AS PVI, NVL(QC_GATE,0) * PRICE AS QC_GATE, NVL(HMK3A,0) * PRICE AS HMK3A
             , NVL(CASE WHEN MAT.MAT_CMF_11 = 'JZH' THEN NVL(RCV.RCV_QTY,0)/MAT.COMP_CNT/2
                        WHEN MAT.MAT_CMF_11 IN ('DHL', 'DQZ', 'DRA', 'DQA', 'DND', 'DWG', 'DUT', 'HAU', 'HF8', 'HDM', 'HDR', 'HEN', 'HQA', 'HQC') THEN DECODE(MAT.MAT_GRP_5, '3rd', NVL(RCV.RCV_QTY,0)/MAT.COMP_CNT, 0)
                        WHEN MAT.MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND (MAT_ID LIKE 'SEKS%' OR MAT_ID LIKE 'SEKY%')) THEN DECODE(MAT.MAT_GRP_5, '2nd', NVL(RCV.RCV_QTY,0)/MAT.COMP_CNT, 0)
                        WHEN MAT.MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT.MAT_GRP_5 <> '-' THEN CASE WHEN MAT.MAT_GRP_5 IN ('1st','Merge') OR MAT.MAT_GRP_5 LIKE 'Middle%' THEN NVL(RCV.RCV_QTY,0)/MAT.COMP_CNT ELSE 0 END
                        WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN ROUND(RCV.RCV_QTY/NET_DIE,0)
                        ELSE NVL(RCV.RCV_QTY,0)/MAT.COMP_CNT
                   END,0) * PRICE AS RCV_QTY
             , NVL(MOV.OUT_WB,0) * PRICE AS OUT_WB
             , NVL(MOV.OUT_DA,0) * PRICE AS OUT_DA
             , NVL(MOV.OUT_DP,0) * PRICE AS OUT_DP
             , NVL(MOV.OUT_HMKA3,0) * PRICE AS OUT_HMKA3
             , NVL(MOV.OUT_CLOSE,0) * PRICE AS OUT_CLOSE
             , NVL(MOV.OUT_SIG,0) * PRICE AS OUT_SIG
             , NVL(MOV.OUT_MK,0) * PRICE AS OUT_MK
             , NVL(MOV.OUT_MOLD,0) * PRICE AS OUT_MOLD
             , NVL(MOV.OUT_WB9,0) * PRICE AS OUT_WB9
             , NVL(MOV.OUT_DA9,0) * PRICE AS OUT_DA9
             , NVL(MOV.OUT_WB8,0) * PRICE AS OUT_WB8
             , NVL(MOV.OUT_DA8,0) * PRICE AS OUT_DA8
             , NVL(MOV.OUT_WB7,0) * PRICE AS OUT_WB7
             , NVL(MOV.OUT_DA7,0) * PRICE AS OUT_DA7
             , NVL(MOV.OUT_WB6,0) * PRICE AS OUT_WB6
             , NVL(MOV.OUT_DA6,0) * PRICE AS OUT_DA6
             , NVL(MOV.OUT_WB5,0) * PRICE AS OUT_WB5
             , NVL(MOV.OUT_DA5,0) * PRICE AS OUT_DA5
             , NVL(MOV.OUT_WB4,0) * PRICE AS OUT_WB4
             , NVL(MOV.OUT_DA4,0) * PRICE AS OUT_DA4
             , NVL(MOV.OUT_WB3,0) * PRICE AS OUT_WB3
             , NVL(MOV.OUT_DA3,0) * PRICE AS OUT_DA3
             , NVL(MOV.OUT_WB2,0) * PRICE AS OUT_WB2
             , NVL(MOV.OUT_DA2,0) * PRICE AS OUT_DA2
             , NVL(MOV.OUT_WB1,0) * PRICE AS OUT_WB1
             , NVL(MOV.OUT_DA1,0) * PRICE AS OUT_DA1
             , NVL(MOV.OUT_DDS,0) * PRICE AS OUT_DDS
             , NVL(MOV.OUT_SAW,0) * PRICE AS OUT_SAW
             , NVL(MOV.OUT_BG,0) * PRICE AS OUT_BG
             , NVL(MOV.OUT_STEALTH,0) * PRICE AS OUT_STEALTH
             , NVL(MOV.OUT_PRI,0) * PRICE AS OUT_PRI
             , NVL(MOV.OUT_LAMI,0) * PRICE AS OUT_LAMI
             , NVL(MOV.OUT_STOCK,0) * PRICE AS OUT_STOCK
          FROM (
                SELECT A.MAT_ID, MAT_GRP_1, MAT_GRP_2, MAT_GRP_3, MAT_GRP_4, MAT_GRP_5
                     , MAT_GRP_6, MAT_GRP_7, MAT_GRP_8, MAT_GRP_9, MAT_GRP_10, MAT_CMF_10, MAT_CMF_11
                     , NET_DIE, COMP_CNT, HX_COMP_MIN, HX_COMP_MAX 
                     , CASE WHEN MAT_GRP_1 = 'SE' AND MAT_GRP_9 = 'MEMORY' THEN 'SEK_________-___' || SUBSTR(A.MAT_ID, -3) 
                            WHEN MAT_GRP_1 = 'HX' THEN MAT_CMF_10 
                            ELSE A.MAT_ID 
                       END CONV_MAT_ID 
                     , 1 AS PRICE
                  FROM VWIPMATDEF A
                 WHERE 1=1
                   AND A.FACTORY = 'HMVA2'
                   AND A.DELETE_FLAG = ' '
                   AND A.MAT_TYPE = 'FG' 
                   AND A.MAT_GRP_2 <> 'PW' 
               ) MAT
             , (
                SELECT MAT_ID 
                     , SUM(ORI_PLN) AS ORI_PLN 
                     , SUM(REV_PLN) AS REV_PLN 
                     , SUM(D0_PLAN) AS D0_PLAN 
                     , SUM(D1_PLAN) AS D1_PLAN 
                  FROM ( 
                        SELECT MAT_ID, SUM(PLAN_QTY_ASSY) AS ORI_PLN, SUM(RESV_FIELD1) AS REV_PLN, 0 AS D0_PLAN, 0 AS D1_PLAN
                          FROM (
                                SELECT MAT_ID, SUM(PLAN_QTY_ASSY) AS PLAN_QTY_ASSY, SUM(TO_NUMBER(DECODE(RESV_FIELD1,' ',0,RESV_FIELD1))) AS RESV_FIELD1
                                  FROM CWIPPLNMON 
                                 WHERE 1=1 
                                   AND FACTORY = 'HMVA2'
                                   AND PLAN_MONTH = '202004'
                                 GROUP BY MAT_ID 
                               ) 
                         GROUP BY MAT_ID
                        HAVING SUM(PLAN_QTY_ASSY + RESV_FIELD1) > 0
                         UNION ALL
                        SELECT MAT_ID, 0, 0
                             , SUM(CASE WHEN TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 7 THEN D0_QTY 
                                        WHEN TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 1 THEN D0_QTY + D1_QTY 
                                        WHEN TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 2 THEN D0_QTY + D1_QTY + D2_QTY 
                                        WHEN TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 3 THEN D0_QTY + D1_QTY + D2_QTY + D3_QTY 
                                        WHEN TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 4 THEN D0_QTY + D1_QTY + D2_QTY + D3_QTY + D4_QTY 
                                        WHEN TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 5 THEN D0_QTY + D1_QTY + D2_QTY + D3_QTY + D4_QTY + D5_QTY 
                                        WHEN TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 6 THEN D0_QTY + D1_QTY + D2_QTY + D3_QTY + D4_QTY + D5_QTY + D6_QTY 
                                        ELSE 0 
                                   END) AS D0_PLAN 
                             , SUM(CASE WHEN TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 7 THEN D1_QTY 
                                        WHEN TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 1 THEN D2_QTY 
                                        WHEN TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 2 THEN D3_QTY 
                                        WHEN TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 3 THEN D4_QTY 
                                        WHEN TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 4 THEN D5_QTY 
                                        WHEN TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 5 THEN D6_QTY 
                                        WHEN TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 6 THEN D7_QTY 
                                        ELSE 0 
                                   END) AS D1_PLAN 
                          FROM (
                                SELECT FACTORY, MAT_ID 
                                     , SUM(DECODE(PLAN_WEEK, '202015', D0_QTY, 0)) AS D0_QTY  
                                     , SUM(DECODE(PLAN_WEEK, '202015', D1_QTY, 0)) AS D1_QTY  
                                     , SUM(DECODE(PLAN_WEEK, '202015', D2_QTY, 0)) AS D2_QTY  
                                     , SUM(DECODE(PLAN_WEEK, '202015', D3_QTY, 0)) AS D3_QTY  
                                     , SUM(DECODE(PLAN_WEEK, '202015', D4_QTY, 0)) AS D4_QTY  
                                     , SUM(DECODE(PLAN_WEEK, '202015', D5_QTY, 0)) AS D5_QTY  
                                     , SUM(DECODE(PLAN_WEEK, '202015', D6_QTY, 0)) AS D6_QTY  
                                     , SUM(DECODE(PLAN_WEEK, '202016', D0_QTY, 0)) AS D7_QTY  
                                     , SUM(DECODE(PLAN_WEEK, '202016', D1_QTY, 0)) AS D8_QTY  
                                     , SUM(DECODE(PLAN_WEEK, '202016', D2_QTY, 0)) AS D9_QTY  
                                     , SUM(DECODE(PLAN_WEEK, '202016', D3_QTY, 0)) AS D10_QTY  
                                     , SUM(DECODE(PLAN_WEEK, '202016', D4_QTY, 0)) AS D11_QTY  
                                     , SUM(DECODE(PLAN_WEEK, '202016', D5_QTY, 0)) AS D12_QTY  
                                     , SUM(DECODE(PLAN_WEEK, '202016', D6_QTY, 0)) AS D13_QTY  
                                     , SUM(DECODE(PLAN_WEEK, '202015', WW_QTY, 0)) AS W1_QTY  
                                     , SUM(DECODE(PLAN_WEEK, '202016', WW_QTY, 0)) AS W2_QTY  
                                  FROM RWIPPLNWEK  
                                 WHERE 1=1  
                                   AND FACTORY = 'HMVA2'  
                                   AND GUBUN = '3'  
                                   AND PLAN_WEEK IN ('202015','202016') 
                                 GROUP BY FACTORY, MAT_ID  
                               )  
                         GROUP BY MAT_ID  
                       ) 
                 GROUP BY MAT_ID  
               ) PLN
             , (
                SELECT MAT_ID
                     , SUM(CASE WHEN WORK_DATE BETWEEN '20200401' AND '20200409' THEN SHP_QTY_1 END) AS SHP_TTL 
                     , SUM(DECODE(WORK_DATE, '20200409', SHP_QTY_1, 0)) AS SHP_TODAY
                     , SUM(CASE WHEN WORK_DATE BETWEEN '20200404' AND '20200408' THEN SHP_QTY_1 END) AS SHP_WEEK 
                  FROM VSUMWIPOUT
                 WHERE 1=1
                   AND WORK_DATE BETWEEN '20200401' AND '20200409' 
                   AND FACTORY = 'HMVA2' 
                   AND LOT_TYPE = 'W' 
                   AND CM_KEY_2 = 'PROD' 
                   AND CM_KEY_3 LIKE 'P%'
                   AND MAT_ID NOT LIKE 'HX%'
                 GROUP BY MAT_ID 
                 UNION ALL 
                SELECT MAT_ID
                     , SUM(CASE WHEN WORK_DATE BETWEEN '20200401' AND '20200409' THEN SHP_QTY_1 END) AS SHP_TTL 
                     , SUM(DECODE(WORK_DATE, '20200409', SHP_QTY_1, 0)) AS SHP_TODAY
                     , SUM(CASE WHEN WORK_DATE BETWEEN '20200404' AND '20200408' THEN SHP_QTY_1 END) AS SHP_WEEK 
                  FROM VSUMWIPOUT_06
                 WHERE 1=1
                   AND WORK_DATE BETWEEN '20200401' AND '20200409' 
                   AND FACTORY = 'HMVA2' 
                   AND LOT_TYPE = 'W' 
                   AND CM_KEY_2 = 'PROD' 
                   AND CM_KEY_3 LIKE 'P%'
                   AND MAT_ID LIKE 'HX%'
                 GROUP BY MAT_ID 
               ) SHP
             , (
                SELECT MAT_ID, SUM(RCV_QTY_1) AS RCV_QTY
                  FROM VSUMWIPRCV
                 WHERE FACTORY = 'HMVA2'
                   AND WORK_DATE = '20200409'
                   AND LOT_TYPE = 'W'
                   AND CM_KEY_3 LIKE 'P%' 
                 GROUP BY MAT_ID
               ) RCV
             , (
                SELECT MAT_ID
                     , SUM(QTY) AS WIP_TTL
                     , SUM(DECODE(OPER_GRP_1, 'HMK2A', QTY, 0)) AS STOCK
                     , SUM(DECODE(OPER_GRP_1, 'B/G', QTY, 0)) AS BG
                     , SUM(DECODE(OPER_GRP_1, 'SAW', QTY, 0)) AS SAW
                     , SUM(DECODE(OPER_GRP_1, 'S/P', QTY, 0)) AS SP 
                     , SUM(DECODE(OPER_GRP_1, 'SMT', QTY, 0)) AS SMT 
                     , SUM(DECODE(OPER_GRP_1, 'D/A', QTY, 0)) AS DA
                     , SUM(CASE WHEN OPER IN ('A0250', 'A0305', 'A0306', 'A0310', 'A0333', 'A0340', 'A0400', 'A0401', 'A0500', 'A0501', 'A0530', 'A0531') THEN QTY ELSE 0 END) AS S_DA1
                     , SUM(CASE WHEN OPER IN ('A0402', 'A0502', 'A0532') THEN QTY ELSE 0 END) AS S_DA2
                     , SUM(CASE WHEN OPER IN ('A0403', 'A0503', 'A0533') THEN QTY ELSE 0 END) AS S_DA3
                     , SUM(CASE WHEN OPER IN ('A0404', 'A0504', 'A0534') THEN QTY ELSE 0 END) AS S_DA4
                     , SUM(CASE WHEN OPER IN ('A0405', 'A0505', 'A0535') THEN QTY ELSE 0 END) AS S_DA5
                     , SUM(CASE WHEN OPER IN ('A0406', 'A0506', 'A0536') THEN QTY ELSE 0 END) AS S_DA6
                     , SUM(CASE WHEN OPER IN ('A0407', 'A0507', 'A0537') THEN QTY ELSE 0 END) AS S_DA7
                     , SUM(CASE WHEN OPER IN ('A0408', 'A0508', 'A0538') THEN QTY ELSE 0 END) AS S_DA8
                     , SUM(CASE WHEN OPER IN ('A0409', 'A0509', 'A0539') THEN QTY ELSE 0 END) AS S_DA9
                     , SUM(CASE WHEN OPER IN ('A0250','A0333','A0340','A0400', 'A0401') THEN QTY ELSE 0 END) AS F_DA1
                     , SUM(CASE WHEN OPER IN ('A0402') THEN QTY 
                                WHEN OPER = 'A0801' AND MAT_GRP_1 = 'SE' AND MAT_GRP_5 <> 'Merge' THEN QTY 
                                WHEN OPER = 'A0801' AND MAT_GRP_1 <> 'SE' AND SUBSTR(MAT_GRP_4,-1) <> SUBSTR(OPER, -1) THEN QTY 
                                ELSE 0 END) AS F_DA2 
                     , SUM(CASE WHEN OPER IN ('A0403') THEN QTY 
                                WHEN OPER = 'A0802' AND MAT_GRP_1 = 'SE' AND MAT_GRP_5 <> 'Merge' THEN QTY 
                                WHEN OPER = 'A0802' AND MAT_GRP_1 <> 'SE' AND SUBSTR(MAT_GRP_4,-1) <> SUBSTR(OPER, -1) THEN QTY 
                                ELSE 0 END) AS F_DA3 
                     , SUM(CASE WHEN OPER IN ('A0404') THEN QTY 
                                WHEN OPER = 'A0803' AND MAT_GRP_1 = 'SE' AND MAT_GRP_5 <> 'Merge' THEN QTY 
                                WHEN OPER = 'A0803' AND MAT_GRP_1 <> 'SE' AND SUBSTR(MAT_GRP_4,-1) <> SUBSTR(OPER, -1) THEN QTY 
                                ELSE 0 END) AS F_DA4 
                     , SUM(CASE WHEN OPER IN ('A0405') THEN QTY 
                                WHEN OPER = 'A0804' AND MAT_GRP_1 = 'SE' AND MAT_GRP_5 <> 'Merge' THEN QTY 
                                WHEN OPER = 'A0804' AND MAT_GRP_1 <> 'SE' AND SUBSTR(MAT_GRP_4,-1) <> SUBSTR(OPER, -1) THEN QTY 
                                ELSE 0 END) AS F_DA5 
                     , SUM(CASE WHEN OPER IN ('A0406') THEN QTY 
                                WHEN OPER = 'A0805' AND MAT_GRP_1 = 'SE' AND MAT_GRP_5 <> 'Merge' THEN QTY 
                                WHEN OPER = 'A0805' AND MAT_GRP_1 <> 'SE' AND SUBSTR(MAT_GRP_4,-1) <> SUBSTR(OPER, -1) THEN QTY 
                                ELSE 0 END) AS F_DA6 
                     , SUM(CASE WHEN OPER IN ('A0407') THEN QTY 
                                WHEN OPER = 'A0806' AND MAT_GRP_1 = 'SE' AND MAT_GRP_5 <> 'Merge' THEN QTY 
                                WHEN OPER = 'A0806' AND MAT_GRP_1 <> 'SE' AND SUBSTR(MAT_GRP_4,-1) <> SUBSTR(OPER, -1) THEN QTY 
                                ELSE 0 END) AS F_DA7 
                     , SUM(CASE WHEN OPER IN ('A0408') THEN QTY 
                                WHEN OPER = 'A0807' AND MAT_GRP_1 = 'SE' AND MAT_GRP_5 <> 'Merge' THEN QTY 
                                WHEN OPER = 'A0807' AND MAT_GRP_1 <> 'SE' AND SUBSTR(MAT_GRP_4,-1) <> SUBSTR(OPER, -1) THEN QTY 
                                ELSE 0 END) AS F_DA8 
                     , SUM(CASE WHEN OPER IN ('A0409') THEN QTY 
                                WHEN OPER = 'A0808' AND MAT_GRP_1 = 'SE' AND MAT_GRP_5 <> 'Merge' THEN QTY 
                                WHEN OPER = 'A0808' AND MAT_GRP_1 <> 'SE' AND SUBSTR(MAT_GRP_4,-1) <> SUBSTR(OPER, -1) THEN QTY 
                                ELSE 0 END) AS F_DA9 
                     , SUM(DECODE(OPER_GRP_1, 'W/B', QTY, 0)) AS WB
                     , SUM(CASE WHEN OPER IN ('A0550', 'A0551', 'A0600','A0601', 'A0800', 'A0801') THEN QTY ELSE 0 END) AS S_WB1
                     , SUM(CASE WHEN OPER IN ('A0552', 'A0602', 'A0802') THEN QTY ELSE 0 END) AS S_WB2
                     , SUM(CASE WHEN OPER IN ('A0553', 'A0603', 'A0803') THEN QTY ELSE 0 END) AS S_WB3
                     , SUM(CASE WHEN OPER IN ('A0554', 'A0604', 'A0804') THEN QTY ELSE 0 END) AS S_WB4
                     , SUM(CASE WHEN OPER IN ('A0555', 'A0605', 'A0805') THEN QTY ELSE 0 END) AS S_WB5
                     , SUM(CASE WHEN OPER IN ('A0556', 'A0606', 'A0806') THEN QTY ELSE 0 END) AS S_WB6
                     , SUM(CASE WHEN OPER IN ('A0557', 'A0607', 'A0807') THEN QTY ELSE 0 END) AS S_WB7
                     , SUM(CASE WHEN OPER IN ('A0558', 'A0608', 'A0808') THEN QTY ELSE 0 END) AS S_WB8
                     , SUM(CASE WHEN OPER IN ('A0559', 'A0609', 'A0809') THEN QTY ELSE 0 END) AS S_WB9
                     , SUM(CASE WHEN OPER IN ('A0550', 'A0551', 'A0600','A0601', 'A0500', 'A0501', 'A0530', 'A0531') THEN QTY ELSE 0 END) AS F_WB1
                     , SUM(CASE WHEN OPER IN ('A0552', 'A0602', 'A0502', 'A0532') THEN QTY ELSE 0 END) AS F_WB2
                     , SUM(CASE WHEN OPER IN ('A0553', 'A0603', 'A0503', 'A0533') THEN QTY ELSE 0 END) AS F_WB3
                     , SUM(CASE WHEN OPER IN ('A0554', 'A0604', 'A0504', 'A0534') THEN QTY ELSE 0 END) AS F_WB4
                     , SUM(CASE WHEN OPER IN ('A0555', 'A0605', 'A0505', 'A0535') THEN QTY ELSE 0 END) AS F_WB5
                     , SUM(CASE WHEN OPER IN ('A0556', 'A0606', 'A0506', 'A0536') THEN QTY ELSE 0 END) AS F_WB6
                     , SUM(CASE WHEN OPER IN ('A0557', 'A0607', 'A0507', 'A0537') THEN QTY ELSE 0 END) AS F_WB7
                     , SUM(CASE WHEN OPER IN ('A0558', 'A0608', 'A0508', 'A0538') THEN QTY ELSE 0 END) AS F_WB8
                     , SUM(CASE WHEN OPER IN ('A0559', 'A0609', 'A0509', 'A0539') THEN QTY ELSE 0 END) AS F_WB9
                     , SUM(DECODE(OPER_GRP_1, 'GATE', QTY, 0)) AS GATE
                     , SUM(CASE WHEN OPER_GRP_1 = 'GATE' AND MAT_GRP_5 = '-' THEN QTY 
                                WHEN OPER_GRP_1 = 'GATE' AND MAT_GRP_1 = 'SE' AND MAT_GRP_5 = 'Merge' THEN QTY
                                WHEN OPER_GRP_1 = 'GATE' AND MAT_GRP_1 <> 'SE' AND SUBSTR(MAT_GRP_4,-1) = SUBSTR(OPER, -1) THEN QTY  
                                ELSE 0 END) AS F_GATE 
                     , SUM(DECODE(OPER_GRP_1, 'MOLD', QTY, 0)) AS MOLD
                     , SUM(DECODE(OPER_GRP_1, 'CURE', QTY, 0)) AS CURE
                     , SUM(DECODE(OPER_GRP_1, 'M/K', QTY, 0)) AS MK
                     , SUM(DECODE(OPER_GRP_1, 'TRIM', QTY, 0)) AS TRIM
                     , SUM(DECODE(OPER_GRP_1, 'TIN', QTY, 0)) AS TIN
                     , SUM(DECODE(OPER_GRP_1, 'S/B/A', QTY, 0)) AS SBA
                     , SUM(DECODE(OPER_GRP_1, 'SIG', QTY, 0)) AS SIG
                     , SUM(DECODE(OPER_GRP_1, 'AVI', QTY, 0)) AS AVI
                     , SUM(DECODE(OPER_GRP_1, 'V/I', QTY, 0)) AS VI
                     , SUM(CASE WHEN OPER IN ('A2030', 'A2050') THEN QTY ELSE 0 END) AS PVI
                     , SUM(DECODE(OPER, 'A2100', QTY, 0)) AS QC_GATE
                     , SUM(DECODE(OPER_GRP_1, 'HMK3A', QTY, 0)) AS HMK3A
                  FROM (
                        SELECT MAT_ID, OPER, OPER_GRP_1, MAT_GRP_1, MAT_GRP_4, MAT_GRP_5
                             , CASE WHEN HX_COMP_MIN IS NOT NULL
                                         THEN (CASE WHEN HX_COMP_MIN <> HX_COMP_MAX AND OPER > HX_COMP_MIN AND OPER <= HX_COMP_MAX THEN QTY_1 / NVL(COMP_CNT / 2,1)
                                                    WHEN OPER <= HX_COMP_MAX THEN QTY_1 / NVL(COMP_CNT,1)
                                                    ELSE QTY_1 END)
                                    WHEN OPER <= 'A0395' THEN QTY_1 / NVL(COMP_CNT,1) 
                                    ELSE QTY_1 
                               END QTY 
                          FROM (
                                SELECT A.MAT_ID, B.OPER, B.OPER_GRP_1, C.MAT_GRP_1, C.MAT_GRP_4, C.MAT_GRP_5
                                     , CASE WHEN MAT_CMF_11 IN ('DHL', 'DQZ', 'DRA', 'DQA', 'DND', 'DWG', 'DUT', 'HAU', 'HF8', 'HDM', 'HDR', 'HEN', 'HQA', 'HQC') THEN (CASE WHEN MAT_GRP_5 IN ('3rd','Merge') THEN QTY_1
                                                                               WHEN MAT_GRP_5 LIKE 'Middle%' AND MAT_GRP_5 <> 'Middle' THEN QTY_1
                                                                               ELSE 0 END)
                                            WHEN MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND (MAT_ID LIKE 'SEKS%' OR MAT_ID LIKE 'SEKY%')) THEN CASE WHEN MAT_GRP_5 IN ('2nd','Merge') OR MAT_GRP_5 LIKE 'Middle%' THEN QTY_1 ELSE 0 END
                                            WHEN MAT_GRP_1 = 'HX' AND MESMGR.F_GET_ATTR_VALUE@RPTTOMES(A.MAT_ID, 'MAT_ETC', 'HX_VERSION') = 'A-376' THEN CASE WHEN MAT_GRP_5 IN ('5th','Merge') THEN QTY_1 ELSE 0 END
                                            WHEN MAT_GRP_1 = 'HX' AND MESMGR.F_GET_ATTR_VALUE@RPTTOMES(A.MAT_ID, 'MAT_ETC', 'HX_VERSION') IN ('A-445', 'A-525') THEN CASE WHEN MAT_GRP_5 IN ('6th','Merge') THEN QTY_1 ELSE 0 END
                                            WHEN MAT_GRP_1 = 'HX' AND MESMGR.F_GET_ATTR_VALUE@RPTTOMES(A.MAT_ID, 'MAT_ETC', 'HX_VERSION') = 'A-524' THEN CASE WHEN MAT_GRP_5 IN ('7th','Merge') THEN QTY_1 ELSE 0 END
                                            WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN CASE WHEN MAT_GRP_5 IN ('1st','Merge') OR MAT_GRP_5 LIKE 'Middle%' THEN QTY_1 ELSE 0 END
                                            WHEN MAT_GRP_3 IN ('COB', 'BGN') THEN ROUND(QTY_1/C.NET_DIE,0)
                                            ELSE QTY_1
                                       END AS QTY_1
                                     , C.COMP_CNT, C.HX_COMP_MIN, C.HX_COMP_MAX 
                                  FROM RWIPLOTSTS A  
                                     , MWIPOPRDEF B  
                                     , VWIPMATDEF C
                                 WHERE 1 = 1 
                                   AND A.FACTORY = B.FACTORY
                                   AND A.FACTORY = C.FACTORY
                                   AND A.OPER = B.OPER
                                   AND A.MAT_ID = C.MAT_ID
                                   AND A.FACTORY = 'HMVA2'  
                                   AND A.LOT_TYPE = 'W' 
                                   AND A.LOT_CMF_5 LIKE 'P%' 
                                   AND A.LOT_DEL_FLAG = ' ' 
                                   AND C.MAT_GRP_2 <> '-'
                                   AND C.DELETE_FLAG = ' ' 
                                   AND A.HOLD_CODE NOT IN ('H71','H54')
                               )
                       )
                 GROUP BY MAT_ID
               ) WIP
             , (
                SELECT MAT_ID
                     , SUM(CASE WHEN OPER IN ('A0200', 'A0230') THEN QTY ELSE 0 END) AS OUT_DP
                     , SUM(CASE WHEN OPER LIKE 'A04%' THEN (CASE WHEN MAT_GRP_1 <> 'SE' AND MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' 
                                                                      THEN DECODE(SUBSTR(MAT_GRP_4,-1), SUBSTR(OPER, -1), QTY, 0)
                                                                 ELSE QTY END)
                                WHEN OPER = 'A0333' THEN QTY
                                ELSE 0
                           END) AS OUT_DA
                     , SUM(CASE WHEN OPER LIKE 'A06%' THEN (CASE WHEN MAT_GRP_1 <> 'SE' AND MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' 
                                                                      THEN DECODE(SUBSTR(MAT_GRP_4,-1), SUBSTR(OPER, -1), QTY, 0)
                                                                 ELSE QTY END)
                                 ELSE 0
                           END) AS OUT_WB
                     , SUM(CASE WHEN OPER = 'A0000' THEN QTY ELSE 0 END) AS OUT_STOCK
                     , SUM(CASE WHEN OPER = 'A0020' THEN QTY ELSE 0 END) AS OUT_LAMI
                     , SUM(CASE WHEN OPER = 'A0030' THEN QTY ELSE 0 END) AS OUT_PRI
                     , SUM(CASE WHEN OPER = 'A0033' THEN QTY ELSE 0 END) AS OUT_STEALTH
                     , SUM(CASE WHEN OPER = 'A0040' THEN QTY ELSE 0 END) AS OUT_BG
                     , SUM(CASE WHEN OPER = 'A0200' THEN QTY ELSE 0 END) AS OUT_SAW
                     , SUM(CASE WHEN OPER = 'A0230' THEN QTY ELSE 0 END) AS OUT_DDS
                     , SUM(CASE WHEN OPER IN ('A0400', 'A0401', 'A0333') THEN QTY ELSE 0 END) AS OUT_DA1
                     , SUM(CASE WHEN OPER IN ('A0600', 'A0601') THEN QTY ELSE 0 END) AS OUT_WB1
                     , SUM(CASE WHEN OPER = 'A0402' THEN QTY ELSE 0 END) AS OUT_DA2
                     , SUM(CASE WHEN OPER = 'A0602' THEN QTY ELSE 0 END) AS OUT_WB2
                     , SUM(CASE WHEN OPER = 'A0403' THEN QTY ELSE 0 END) AS OUT_DA3
                     , SUM(CASE WHEN OPER = 'A0603' THEN QTY ELSE 0 END) AS OUT_WB3
                     , SUM(CASE WHEN OPER = 'A0404' THEN QTY ELSE 0 END) AS OUT_DA4
                     , SUM(CASE WHEN OPER = 'A0604' THEN QTY ELSE 0 END) AS OUT_WB4
                     , SUM(CASE WHEN OPER = 'A0405' THEN QTY ELSE 0 END) AS OUT_DA5
                     , SUM(CASE WHEN OPER = 'A0605' THEN QTY ELSE 0 END) AS OUT_WB5
                     , SUM(CASE WHEN OPER = 'A0406' THEN QTY ELSE 0 END) AS OUT_DA6
                     , SUM(CASE WHEN OPER = 'A0606' THEN QTY ELSE 0 END) AS OUT_WB6
                     , SUM(CASE WHEN OPER = 'A0407' THEN QTY ELSE 0 END) AS OUT_DA7
                     , SUM(CASE WHEN OPER = 'A0607' THEN QTY ELSE 0 END) AS OUT_WB7
                     , SUM(CASE WHEN OPER = 'A0408' THEN QTY ELSE 0 END) AS OUT_DA8
                     , SUM(CASE WHEN OPER = 'A0608' THEN QTY ELSE 0 END) AS OUT_WB8
                     , SUM(CASE WHEN OPER = 'A0409' THEN QTY ELSE 0 END) AS OUT_DA9
                     , SUM(CASE WHEN OPER = 'A0609' THEN QTY ELSE 0 END) AS OUT_WB9
                     , SUM(CASE WHEN OPER = 'A1000' THEN QTY ELSE 0 END) AS OUT_MOLD 
                     , SUM(CASE WHEN OPER IN ('A1150', 'A1500') THEN QTY ELSE 0 END) AS OUT_MK
                     , SUM(CASE WHEN OPER IN ('A1750', 'A1800', 'A1900') THEN QTY ELSE 0 END) AS OUT_SIG
                     , SUM(CASE WHEN OPER = 'A2100' THEN QTY ELSE 0 END) AS OUT_CLOSE 
                     , SUM(CASE WHEN OPER = 'AZ010' THEN QTY ELSE 0 END) AS OUT_HMKA3 
                  FROM (    
                        SELECT MAT_ID, OPER, MAT_GRP_1, MAT_GRP_4, MAT_GRP_5
                             , CASE WHEN HX_COMP_MIN IS NOT NULL
                                         THEN (CASE WHEN HX_COMP_MIN <> HX_COMP_MAX AND OPER > HX_COMP_MIN AND OPER <= HX_COMP_MAX THEN QTY_1 / NVL(COMP_CNT / 2,1)
                                                    WHEN OPER <= HX_COMP_MAX THEN QTY_1 / NVL(COMP_CNT,1)
                                                    ELSE QTY_1 END)
                                    WHEN OPER <= 'A0395' THEN QTY_1 / NVL(COMP_CNT,1) 
                                    ELSE QTY_1 
                               END QTY
                          FROM (
                                SELECT MAT_ID, OPER, MAT_GRP_1, MAT_GRP_4, MAT_GRP_5, MAT_GRP_9, MAT_CMF_11
                                     , CASE WHEN MAT_CMF_11 IN ('DHL', 'DQZ', 'DRA', 'DQA', 'DND', 'DWG', 'DUT', 'HAU', 'HF8', 'HDM', 'HDR', 'HEN', 'HQA', 'HQC') THEN (CASE WHEN MAT_GRP_5 IN ('3rd','Merge') THEN END_QTY ELSE 0 END)
                                            WHEN MAT_ID LIKE 'SEK%' AND MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND (MAT_ID LIKE 'SEKS%' OR MAT_ID LIKE 'SEKY%'))
                                                 THEN (CASE WHEN MAT_GRP_5 IN ('2nd','Merge') THEN END_QTY ELSE 0 END)
                                            WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-'
                                                 THEN (CASE WHEN MAT_GRP_5 IN ('1st','Merge') THEN END_QTY ELSE 0 END)
                                            WHEN MAT_GRP_3 IN ('COB', 'BGN') THEN ROUND(END_QTY/NET_DIE,0)
                                            ELSE END_QTY
                                       END QTY_1 
                                     , COMP_CNT, HX_COMP_MIN, HX_COMP_MAX 
                                  FROM ( 
                                        SELECT A.OPER
                                             , CASE WHEN OPER = 'AZ010' THEN S1_MOVE_QTY_1+S2_MOVE_QTY_1+S3_MOVE_QTY_1
                                                    ELSE S1_END_QTY_1+S2_END_QTY_1+S3_END_QTY_1
                                               END END_QTY
                                             , B.*
                                          FROM RSUMWIPMOV A
                                             , VWIPMATDEF B
                                         WHERE 1=1
                                           AND A.FACTORY = B.FACTORY
                                           AND A.MAT_ID = B.MAT_ID
                                           AND A.FACTORY = 'HMVA2'
                                           AND A.WORK_DATE = '20200409'
                                           AND A.LOT_TYPE = 'W'
                                           AND A.CM_KEY_3 LIKE 'P%'   
                                           AND B.MAT_GRP_5 NOT LIKE 'Middle%'
                                           AND REGEXP_LIKE(A.OPER, 'A0000|A0200|A0230|A0333|A040*|A060*|A1000|A2100')
                                           AND ((A.OPER >= 'A0400' AND B.MAT_GRP_5 IN ('-', 'Merge')) OR (A.OPER < 'A0400'))
                                       ) 
                               )
                       )
                 GROUP BY MAT_ID
               ) MOV
         WHERE 1=1
           AND MAT.MAT_ID = PLN.MAT_ID(+)
           AND MAT.MAT_ID = SHP.MAT_ID(+)
           AND MAT.MAT_ID = RCV.MAT_ID(+)
           AND MAT.MAT_ID = WIP.MAT_ID(+)
           AND MAT.MAT_ID = MOV.MAT_ID(+)
           AND NVL(ORI_PLN,0)+NVL(REV_PLN,0)+NVL(SHP_TTL,0)+NVL(RCV_QTY,0)+NVL(WIP_TTL,0)+NVL(D0_PLAN,0)+NVL(D1_PLAN,0)+NVL(SHP_WEEK,0) <> 0
       ) A
 GROUP BY A.MAT_GRP_1, A.MAT_GRP_9, A.MAT_GRP_10,  ' ',  ' ',  ' ',  ' '
 ORDER BY DECODE(A.MAT_GRP_1, 'SE', 1, 'HX', 2, 'IM', 3, 'FC', 4, 'IG', 5,6), CUSTOMER, MAT_GRP_9, MAT_GRP_10

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT PLAN_WEEK V1    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_DATE = TO_CHAR(SYSDATE,'yyyymmdd')      AND ROWNUM = 1  
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT LANGUAGE_2 FROM RWEBFUNDEF WHERE FUNC_NAME = 'TAT050401'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT FACTORY Code, FAC_DESC Data
  FROM MWIPFACDEF
 WHERE FAC_GRP_5 = 'Y' 
 ORDER BY FAC_GRP_4 ASC
-------------------------------------------------------------
SELECT OPER, OPER_DESC  FROM MWIPOPRDEF
  WHERE FACTORY = 'HMVA2'  AND OPER NOT IN ('00001', '00002') AND OPER NOT LIKE 'V%' ORDER BY DECODE(OPER_CMF_2, ' ', 99999, TO_NUMBER(OPER_CMF_2)), OPER
-------------------------------------------------------------
SELECT OPER, OPER_DESC  FROM MWIPOPRDEF
  WHERE FACTORY = 'HMVA2'  AND OPER NOT IN ('00001', '00002') AND OPER NOT LIKE 'V%' ORDER BY DECODE(OPER_CMF_2, ' ', 99999, TO_NUMBER(OPER_CMF_2)), OPER
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT DISTINCT FLW.FLOW AS Code, '' AS Data 
  FROM MWIPMATFLW@RPTTOMES FLW 
     , MWIPMATDEF MAT 
 WHERE FLW.FACTORY = MAT.FACTORY 
   AND FLW.MAT_ID = MAT.MAT_ID 
   AND FLW.FACTORY= 'HMVA2'
   AND MAT.MAT_TYPE = 'FG' 
   AND MAT.DELETE_FLAG = ' ' 
   AND FLW.FLOW <> ' ' 
   AND MAT.MAT_ID LIKE 'DR%'
 ORDER BY FLOW 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT OPER
  FROM MWIPOPRDEF 
 WHERE 1=1 
   AND FACTORY='HMVA2'
   AND DECODE(OPER_CMF_2, ' ', 99999, TO_NUMBER(OPER_CMF_2)) BETWEEN (SELECT OPER_CMF_2 FROM MWIPOPRDEF WHERE OPER = 'A0000') AND (SELECT OPER_CMF_2 FROM MWIPOPRDEF WHERE OPER = 'AZ010') 
   AND OPER IN (
                SELECT DISTINCT OPER
                  FROM MWIPFLWOPR@RPTTOMES
                 WHERE FACTORY = 'HMVA2'
                   AND FLOW IN (
                                SELECT DISTINCT FIRST_FLOW 
                                  FROM MWIPMATDEF 
                                 WHERE FACTORY = 'HMVA2'
                                   AND MAT_TYPE = 'FG' 
                                   AND DELETE_FLAG = ' ' 
                                   AND MAT_ID LIKE 'DR%'
                               )
               )
 ORDER BY DECODE(OPER_CMF_2, ' ', 99999, TO_NUMBER(OPER_CMF_2)), OPER

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT OPR.OPER AS OPER
     , ROUND(SUM(TOTAL_TAT_QTY)/SUM(SHIP.SHIP_QTY),2) AS TAT
  FROM CSUMTATMAT@RPTTOMES TAT 
      , MWIPOPRDEF OPR 
      , MWIPMATDEF MAT
      , (      
        SELECT TAT.FACTORY 
             , TAT.MAT_ID 
             , TAT.SHIP_DATE AS WORK_DATE 
             , SHIP_QTY 
          FROM CSUMTATMAT@RPTTOMES TAT 
         WHERE 1=1      
           AND TAT.FACTORY='HMVA2'      
           AND OPER ='AZ010'      
           AND TAT.SHIP_DATE BETWEEN '20200408' AND '20200409' 
        ) SHIP      
  WHERE TAT.FACTORY = 'HMVA2'
    AND TAT.FACTORY = MAT.FACTORY
    AND TAT.FACTORY = OPR.FACTORY
    AND TAT.MAT_ID = MAT.MAT_ID
    AND TAT.MAT_ID = SHIP.MAT_ID
    AND TAT.SHIP_DATE = SHIP.WORK_DATE       
    AND MAT.MAT_VER = 1
    AND MAT.MAT_TYPE = 'FG' 
    AND MAT.DELETE_FLAG = ' ' 
    AND TAT.TOTAL_TIME <> 0
    AND OPR.OPER_GRP_1 NOT IN (' ')
    AND OPR.OPER = TAT.OPER
    AND TAT.OPER BETWEEN 'A0000' AND 'AZ010'  
    AND TAT.SHIP_DATE BETWEEN '20200408' AND '20200409' 
                 AND MAT.MAT_ID LIKE 'DR%'
  GROUP BY OPR.OPER
  ORDER BY OPR.OPER

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT SHIP_DATE, MAT_GRP_1, MAT_CMF_10,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ' 
     , ROUND(SUM(CTOT),2) AS  CTOT   
     , 0 AS  Wait   
     , 0 AS  Run   
     , ROUND(SUM(W0),2) AS W0
     , ROUND(SUM(WSUM0),2) AS WSUM0
     , ROUND(SUM(WCNT0),2) AS WCNT0
     , ROUND(SUM(R0),2) AS R0
     , ROUND(SUM(RSUM0),2) AS RSUM0
     , ROUND(SUM(RCNT0),2) AS RCNT0
     , ROUND(SUM(W1),2) AS W1
     , ROUND(SUM(WSUM1),2) AS WSUM1
     , ROUND(SUM(WCNT1),2) AS WCNT1
     , ROUND(SUM(R1),2) AS R1
     , ROUND(SUM(RSUM1),2) AS RSUM1
     , ROUND(SUM(RCNT1),2) AS RCNT1
     , ROUND(SUM(W2),2) AS W2
     , ROUND(SUM(WSUM2),2) AS WSUM2
     , ROUND(SUM(WCNT2),2) AS WCNT2
     , ROUND(SUM(R2),2) AS R2
     , ROUND(SUM(RSUM2),2) AS RSUM2
     , ROUND(SUM(RCNT2),2) AS RCNT2
     , ROUND(SUM(W3),2) AS W3
     , ROUND(SUM(WSUM3),2) AS WSUM3
     , ROUND(SUM(WCNT3),2) AS WCNT3
     , ROUND(SUM(R3),2) AS R3
     , ROUND(SUM(RSUM3),2) AS RSUM3
     , ROUND(SUM(RCNT3),2) AS RCNT3
     , ROUND(SUM(W4),2) AS W4
     , ROUND(SUM(WSUM4),2) AS WSUM4
     , ROUND(SUM(WCNT4),2) AS WCNT4
     , ROUND(SUM(R4),2) AS R4
     , ROUND(SUM(RSUM4),2) AS RSUM4
     , ROUND(SUM(RCNT4),2) AS RCNT4
     , ROUND(SUM(W5),2) AS W5
     , ROUND(SUM(WSUM5),2) AS WSUM5
     , ROUND(SUM(WCNT5),2) AS WCNT5
     , ROUND(SUM(R5),2) AS R5
     , ROUND(SUM(RSUM5),2) AS RSUM5
     , ROUND(SUM(RCNT5),2) AS RCNT5
     , ROUND(SUM(W6),2) AS W6
     , ROUND(SUM(WSUM6),2) AS WSUM6
     , ROUND(SUM(WCNT6),2) AS WCNT6
     , ROUND(SUM(R6),2) AS R6
     , ROUND(SUM(RSUM6),2) AS RSUM6
     , ROUND(SUM(RCNT6),2) AS RCNT6
     , ROUND(SUM(W7),2) AS W7
     , ROUND(SUM(WSUM7),2) AS WSUM7
     , ROUND(SUM(WCNT7),2) AS WCNT7
     , ROUND(SUM(R7),2) AS R7
     , ROUND(SUM(RSUM7),2) AS RSUM7
     , ROUND(SUM(RCNT7),2) AS RCNT7
     , ROUND(SUM(W8),2) AS W8
     , ROUND(SUM(WSUM8),2) AS WSUM8
     , ROUND(SUM(WCNT8),2) AS WCNT8
     , ROUND(SUM(R8),2) AS R8
     , ROUND(SUM(RSUM8),2) AS RSUM8
     , ROUND(SUM(RCNT8),2) AS RCNT8
     , ROUND(SUM(W9),2) AS W9
     , ROUND(SUM(WSUM9),2) AS WSUM9
     , ROUND(SUM(WCNT9),2) AS WCNT9
     , ROUND(SUM(R9),2) AS R9
     , ROUND(SUM(RSUM9),2) AS RSUM9
     , ROUND(SUM(RCNT9),2) AS RCNT9
     , ROUND(SUM(W10),2) AS W10
     , ROUND(SUM(WSUM10),2) AS WSUM10
     , ROUND(SUM(WCNT10),2) AS WCNT10
     , ROUND(SUM(R10),2) AS R10
     , ROUND(SUM(RSUM10),2) AS RSUM10
     , ROUND(SUM(RCNT10),2) AS RCNT10
     , ROUND(SUM(W11),2) AS W11
     , ROUND(SUM(WSUM11),2) AS WSUM11
     , ROUND(SUM(WCNT11),2) AS WCNT11
     , ROUND(SUM(R11),2) AS R11
     , ROUND(SUM(RSUM11),2) AS RSUM11
     , ROUND(SUM(RCNT11),2) AS RCNT11
     , ROUND(SUM(W12),2) AS W12
     , ROUND(SUM(WSUM12),2) AS WSUM12
     , ROUND(SUM(WCNT12),2) AS WCNT12
     , ROUND(SUM(R12),2) AS R12
     , ROUND(SUM(RSUM12),2) AS RSUM12
     , ROUND(SUM(RCNT12),2) AS RCNT12
     , ROUND(SUM(W13),2) AS W13
     , ROUND(SUM(WSUM13),2) AS WSUM13
     , ROUND(SUM(WCNT13),2) AS WCNT13
     , ROUND(SUM(R13),2) AS R13
     , ROUND(SUM(RSUM13),2) AS RSUM13
     , ROUND(SUM(RCNT13),2) AS RCNT13
     , ROUND(SUM(W14),2) AS W14
     , ROUND(SUM(WSUM14),2) AS WSUM14
     , ROUND(SUM(WCNT14),2) AS WCNT14
     , ROUND(SUM(R14),2) AS R14
     , ROUND(SUM(RSUM14),2) AS RSUM14
     , ROUND(SUM(RCNT14),2) AS RCNT14
     , ROUND(SUM(W15),2) AS W15
     , ROUND(SUM(WSUM15),2) AS WSUM15
     , ROUND(SUM(WCNT15),2) AS WCNT15
     , ROUND(SUM(R15),2) AS R15
     , ROUND(SUM(RSUM15),2) AS RSUM15
     , ROUND(SUM(RCNT15),2) AS RCNT15
     , ROUND(SUM(W16),2) AS W16
     , ROUND(SUM(WSUM16),2) AS WSUM16
     , ROUND(SUM(WCNT16),2) AS WCNT16
     , ROUND(SUM(R16),2) AS R16
     , ROUND(SUM(RSUM16),2) AS RSUM16
     , ROUND(SUM(RCNT16),2) AS RCNT16
     , ROUND(SUM(W17),2) AS W17
     , ROUND(SUM(WSUM17),2) AS WSUM17
     , ROUND(SUM(WCNT17),2) AS WCNT17
     , ROUND(SUM(R17),2) AS R17
     , ROUND(SUM(RSUM17),2) AS RSUM17
     , ROUND(SUM(RCNT17),2) AS RCNT17
     , ROUND(SUM(W18),2) AS W18
     , ROUND(SUM(WSUM18),2) AS WSUM18
     , ROUND(SUM(WCNT18),2) AS WCNT18
     , ROUND(SUM(R18),2) AS R18
     , ROUND(SUM(RSUM18),2) AS RSUM18
     , ROUND(SUM(RCNT18),2) AS RCNT18
     , ROUND(SUM(W19),2) AS W19
     , ROUND(SUM(WSUM19),2) AS WSUM19
     , ROUND(SUM(WCNT19),2) AS WCNT19
     , ROUND(SUM(R19),2) AS R19
     , ROUND(SUM(RSUM19),2) AS RSUM19
     , ROUND(SUM(RCNT19),2) AS RCNT19
     , ROUND(SUM(W20),2) AS W20
     , ROUND(SUM(WSUM20),2) AS WSUM20
     , ROUND(SUM(WCNT20),2) AS WCNT20
     , ROUND(SUM(R20),2) AS R20
     , ROUND(SUM(RSUM20),2) AS RSUM20
     , ROUND(SUM(RCNT20),2) AS RCNT20
     , ROUND(SUM(W21),2) AS W21
     , ROUND(SUM(WSUM21),2) AS WSUM21
     , ROUND(SUM(WCNT21),2) AS WCNT21
     , ROUND(SUM(R21),2) AS R21
     , ROUND(SUM(RSUM21),2) AS RSUM21
     , ROUND(SUM(RCNT21),2) AS RCNT21
     , ROUND(SUM(W22),2) AS W22
     , ROUND(SUM(WSUM22),2) AS WSUM22
     , ROUND(SUM(WCNT22),2) AS WCNT22
     , ROUND(SUM(R22),2) AS R22
     , ROUND(SUM(RSUM22),2) AS RSUM22
     , ROUND(SUM(RCNT22),2) AS RCNT22
     , ROUND(SUM(W23),2) AS W23
     , ROUND(SUM(WSUM23),2) AS WSUM23
     , ROUND(SUM(WCNT23),2) AS WCNT23
     , ROUND(SUM(R23),2) AS R23
     , ROUND(SUM(RSUM23),2) AS RSUM23
     , ROUND(SUM(RCNT23),2) AS RCNT23
     , ROUND(SUM(W24),2) AS W24
     , ROUND(SUM(WSUM24),2) AS WSUM24
     , ROUND(SUM(WCNT24),2) AS WCNT24
     , ROUND(SUM(R24),2) AS R24
     , ROUND(SUM(RSUM24),2) AS RSUM24
     , ROUND(SUM(RCNT24),2) AS RCNT24
     , ROUND(SUM(W25),2) AS W25
     , ROUND(SUM(WSUM25),2) AS WSUM25
     , ROUND(SUM(WCNT25),2) AS WCNT25
     , ROUND(SUM(R25),2) AS R25
     , ROUND(SUM(RSUM25),2) AS RSUM25
     , ROUND(SUM(RCNT25),2) AS RCNT25
     , ROUND(SUM(W26),2) AS W26
     , ROUND(SUM(WSUM26),2) AS WSUM26
     , ROUND(SUM(WCNT26),2) AS WCNT26
     , ROUND(SUM(R26),2) AS R26
     , ROUND(SUM(RSUM26),2) AS RSUM26
     , ROUND(SUM(RCNT26),2) AS RCNT26
     , ROUND(SUM(W27),2) AS W27
     , ROUND(SUM(WSUM27),2) AS WSUM27
     , ROUND(SUM(WCNT27),2) AS WCNT27
     , ROUND(SUM(R27),2) AS R27
     , ROUND(SUM(RSUM27),2) AS RSUM27
     , ROUND(SUM(RCNT27),2) AS RCNT27
     , ROUND(SUM(W28),2) AS W28
     , ROUND(SUM(WSUM28),2) AS WSUM28
     , ROUND(SUM(WCNT28),2) AS WCNT28
     , ROUND(SUM(R28),2) AS R28
     , ROUND(SUM(RSUM28),2) AS RSUM28
     , ROUND(SUM(RCNT28),2) AS RCNT28
     , ROUND(SUM(W29),2) AS W29
     , ROUND(SUM(WSUM29),2) AS WSUM29
     , ROUND(SUM(WCNT29),2) AS WCNT29
     , ROUND(SUM(R29),2) AS R29
     , ROUND(SUM(RSUM29),2) AS RSUM29
     , ROUND(SUM(RCNT29),2) AS RCNT29
     , ROUND(SUM(W30),2) AS W30
     , ROUND(SUM(WSUM30),2) AS WSUM30
     , ROUND(SUM(WCNT30),2) AS WCNT30
     , ROUND(SUM(R30),2) AS R30
     , ROUND(SUM(RSUM30),2) AS RSUM30
     , ROUND(SUM(RCNT30),2) AS RCNT30
     , ROUND(SUM(W31),2) AS W31
     , ROUND(SUM(WSUM31),2) AS WSUM31
     , ROUND(SUM(WCNT31),2) AS WCNT31
     , ROUND(SUM(R31),2) AS R31
     , ROUND(SUM(RSUM31),2) AS RSUM31
     , ROUND(SUM(RCNT31),2) AS RCNT31
     , ROUND(SUM(W32),2) AS W32
     , ROUND(SUM(WSUM32),2) AS WSUM32
     , ROUND(SUM(WCNT32),2) AS WCNT32
     , ROUND(SUM(R32),2) AS R32
     , ROUND(SUM(RSUM32),2) AS RSUM32
     , ROUND(SUM(RCNT32),2) AS RCNT32
     , ROUND(SUM(W33),2) AS W33
     , ROUND(SUM(WSUM33),2) AS WSUM33
     , ROUND(SUM(WCNT33),2) AS WCNT33
     , ROUND(SUM(R33),2) AS R33
     , ROUND(SUM(RSUM33),2) AS RSUM33
     , ROUND(SUM(RCNT33),2) AS RCNT33
     , ROUND(SUM(W34),2) AS W34
     , ROUND(SUM(WSUM34),2) AS WSUM34
     , ROUND(SUM(WCNT34),2) AS WCNT34
     , ROUND(SUM(R34),2) AS R34
     , ROUND(SUM(RSUM34),2) AS RSUM34
     , ROUND(SUM(RCNT34),2) AS RCNT34
     , ROUND(SUM(W35),2) AS W35
     , ROUND(SUM(WSUM35),2) AS WSUM35
     , ROUND(SUM(WCNT35),2) AS WCNT35
     , ROUND(SUM(R35),2) AS R35
     , ROUND(SUM(RSUM35),2) AS RSUM35
     , ROUND(SUM(RCNT35),2) AS RCNT35
     , ROUND(SUM(W36),2) AS W36
     , ROUND(SUM(WSUM36),2) AS WSUM36
     , ROUND(SUM(WCNT36),2) AS WCNT36
     , ROUND(SUM(R36),2) AS R36
     , ROUND(SUM(RSUM36),2) AS RSUM36
     , ROUND(SUM(RCNT36),2) AS RCNT36
     , ROUND(SUM(W37),2) AS W37
     , ROUND(SUM(WSUM37),2) AS WSUM37
     , ROUND(SUM(WCNT37),2) AS WCNT37
     , ROUND(SUM(R37),2) AS R37
     , ROUND(SUM(RSUM37),2) AS RSUM37
     , ROUND(SUM(RCNT37),2) AS RCNT37
     , ROUND(SUM(W38),2) AS W38
     , ROUND(SUM(WSUM38),2) AS WSUM38
     , ROUND(SUM(WCNT38),2) AS WCNT38
     , ROUND(SUM(R38),2) AS R38
     , ROUND(SUM(RSUM38),2) AS RSUM38
     , ROUND(SUM(RCNT38),2) AS RCNT38
  FROM ( 
        SELECT SHIP_DATE, MAT_GRP_1, MAT_CMF_10,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ' 
              , DECODE(SUM(SHIP_QTY),0,0,SUM(TOTAL_TAT_QTY)/SUM(SHIP_QTY)) AS CTOT   
              , DECODE(OPER, 'A0000', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W0
              , DECODE(OPER, 'A0000', SUM(WAIT_TAT_QTY), 0) AS WSUM0
              , DECODE(OPER, 'A0000', SUM(SHIP_QTY), 0) AS WCNT0
              , DECODE(OPER, 'A0000', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R0
              , DECODE(OPER, 'A0000', SUM(PROC_TAT_QTY), 0) AS RSUM0
              , DECODE(OPER, 'A0000', SUM(SHIP_QTY), 0) AS RCNT0
              , DECODE(OPER, 'A0020', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W1
              , DECODE(OPER, 'A0020', SUM(WAIT_TAT_QTY), 0) AS WSUM1
              , DECODE(OPER, 'A0020', SUM(SHIP_QTY), 0) AS WCNT1
              , DECODE(OPER, 'A0020', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R1
              , DECODE(OPER, 'A0020', SUM(PROC_TAT_QTY), 0) AS RSUM1
              , DECODE(OPER, 'A0020', SUM(SHIP_QTY), 0) AS RCNT1
              , DECODE(OPER, 'A0190', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W2
              , DECODE(OPER, 'A0190', SUM(WAIT_TAT_QTY), 0) AS WSUM2
              , DECODE(OPER, 'A0190', SUM(SHIP_QTY), 0) AS WCNT2
              , DECODE(OPER, 'A0190', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R2
              , DECODE(OPER, 'A0190', SUM(PROC_TAT_QTY), 0) AS RSUM2
              , DECODE(OPER, 'A0190', SUM(SHIP_QTY), 0) AS RCNT2
              , DECODE(OPER, 'A0040', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W3
              , DECODE(OPER, 'A0040', SUM(WAIT_TAT_QTY), 0) AS WSUM3
              , DECODE(OPER, 'A0040', SUM(SHIP_QTY), 0) AS WCNT3
              , DECODE(OPER, 'A0040', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R3
              , DECODE(OPER, 'A0040', SUM(PROC_TAT_QTY), 0) AS RSUM3
              , DECODE(OPER, 'A0040', SUM(SHIP_QTY), 0) AS RCNT3
              , DECODE(OPER, 'A0041', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W4
              , DECODE(OPER, 'A0041', SUM(WAIT_TAT_QTY), 0) AS WSUM4
              , DECODE(OPER, 'A0041', SUM(SHIP_QTY), 0) AS WCNT4
              , DECODE(OPER, 'A0041', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R4
              , DECODE(OPER, 'A0041', SUM(PROC_TAT_QTY), 0) AS RSUM4
              , DECODE(OPER, 'A0041', SUM(SHIP_QTY), 0) AS RCNT4
              , DECODE(OPER, 'A0042', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W5
              , DECODE(OPER, 'A0042', SUM(WAIT_TAT_QTY), 0) AS WSUM5
              , DECODE(OPER, 'A0042', SUM(SHIP_QTY), 0) AS WCNT5
              , DECODE(OPER, 'A0042', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R5
              , DECODE(OPER, 'A0042', SUM(PROC_TAT_QTY), 0) AS RSUM5
              , DECODE(OPER, 'A0042', SUM(SHIP_QTY), 0) AS RCNT5
              , DECODE(OPER, 'A0200', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W6
              , DECODE(OPER, 'A0200', SUM(WAIT_TAT_QTY), 0) AS WSUM6
              , DECODE(OPER, 'A0200', SUM(SHIP_QTY), 0) AS WCNT6
              , DECODE(OPER, 'A0200', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R6
              , DECODE(OPER, 'A0200', SUM(PROC_TAT_QTY), 0) AS RSUM6
              , DECODE(OPER, 'A0200', SUM(SHIP_QTY), 0) AS RCNT6
              , DECODE(OPER, 'A0300', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W7
              , DECODE(OPER, 'A0300', SUM(WAIT_TAT_QTY), 0) AS WSUM7
              , DECODE(OPER, 'A0300', SUM(SHIP_QTY), 0) AS WCNT7
              , DECODE(OPER, 'A0300', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R7
              , DECODE(OPER, 'A0300', SUM(PROC_TAT_QTY), 0) AS RSUM7
              , DECODE(OPER, 'A0300', SUM(SHIP_QTY), 0) AS RCNT7
              , DECODE(OPER, 'A0250', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W8
              , DECODE(OPER, 'A0250', SUM(WAIT_TAT_QTY), 0) AS WSUM8
              , DECODE(OPER, 'A0250', SUM(SHIP_QTY), 0) AS WCNT8
              , DECODE(OPER, 'A0250', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R8
              , DECODE(OPER, 'A0250', SUM(PROC_TAT_QTY), 0) AS RSUM8
              , DECODE(OPER, 'A0250', SUM(SHIP_QTY), 0) AS RCNT8
              , DECODE(OPER, 'A0400', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W9
              , DECODE(OPER, 'A0400', SUM(WAIT_TAT_QTY), 0) AS WSUM9
              , DECODE(OPER, 'A0400', SUM(SHIP_QTY), 0) AS WCNT9
              , DECODE(OPER, 'A0400', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R9
              , DECODE(OPER, 'A0400', SUM(PROC_TAT_QTY), 0) AS RSUM9
              , DECODE(OPER, 'A0400', SUM(SHIP_QTY), 0) AS RCNT9
              , DECODE(OPER, 'A0401', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W10
              , DECODE(OPER, 'A0401', SUM(WAIT_TAT_QTY), 0) AS WSUM10
              , DECODE(OPER, 'A0401', SUM(SHIP_QTY), 0) AS WCNT10
              , DECODE(OPER, 'A0401', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R10
              , DECODE(OPER, 'A0401', SUM(PROC_TAT_QTY), 0) AS RSUM10
              , DECODE(OPER, 'A0401', SUM(SHIP_QTY), 0) AS RCNT10
              , DECODE(OPER, 'A0500', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W11
              , DECODE(OPER, 'A0500', SUM(WAIT_TAT_QTY), 0) AS WSUM11
              , DECODE(OPER, 'A0500', SUM(SHIP_QTY), 0) AS WCNT11
              , DECODE(OPER, 'A0500', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R11
              , DECODE(OPER, 'A0500', SUM(PROC_TAT_QTY), 0) AS RSUM11
              , DECODE(OPER, 'A0500', SUM(SHIP_QTY), 0) AS RCNT11
              , DECODE(OPER, 'A0550', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W12
              , DECODE(OPER, 'A0550', SUM(WAIT_TAT_QTY), 0) AS WSUM12
              , DECODE(OPER, 'A0550', SUM(SHIP_QTY), 0) AS WCNT12
              , DECODE(OPER, 'A0550', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R12
              , DECODE(OPER, 'A0550', SUM(PROC_TAT_QTY), 0) AS RSUM12
              , DECODE(OPER, 'A0550', SUM(SHIP_QTY), 0) AS RCNT12
              , DECODE(OPER, 'A0600', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W13
              , DECODE(OPER, 'A0600', SUM(WAIT_TAT_QTY), 0) AS WSUM13
              , DECODE(OPER, 'A0600', SUM(SHIP_QTY), 0) AS WCNT13
              , DECODE(OPER, 'A0600', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R13
              , DECODE(OPER, 'A0600', SUM(PROC_TAT_QTY), 0) AS RSUM13
              , DECODE(OPER, 'A0600', SUM(SHIP_QTY), 0) AS RCNT13
              , DECODE(OPER, 'A0720', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W14
              , DECODE(OPER, 'A0720', SUM(WAIT_TAT_QTY), 0) AS WSUM14
              , DECODE(OPER, 'A0720', SUM(SHIP_QTY), 0) AS WCNT14
              , DECODE(OPER, 'A0720', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R14
              , DECODE(OPER, 'A0720', SUM(PROC_TAT_QTY), 0) AS RSUM14
              , DECODE(OPER, 'A0720', SUM(SHIP_QTY), 0) AS RCNT14
              , DECODE(OPER, 'A0800', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W15
              , DECODE(OPER, 'A0800', SUM(WAIT_TAT_QTY), 0) AS WSUM15
              , DECODE(OPER, 'A0800', SUM(SHIP_QTY), 0) AS WCNT15
              , DECODE(OPER, 'A0800', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R15
              , DECODE(OPER, 'A0800', SUM(PROC_TAT_QTY), 0) AS RSUM15
              , DECODE(OPER, 'A0800', SUM(SHIP_QTY), 0) AS RCNT15
              , DECODE(OPER, 'A0402', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W16
              , DECODE(OPER, 'A0402', SUM(WAIT_TAT_QTY), 0) AS WSUM16
              , DECODE(OPER, 'A0402', SUM(SHIP_QTY), 0) AS WCNT16
              , DECODE(OPER, 'A0402', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R16
              , DECODE(OPER, 'A0402', SUM(PROC_TAT_QTY), 0) AS RSUM16
              , DECODE(OPER, 'A0402', SUM(SHIP_QTY), 0) AS RCNT16
              , DECODE(OPER, 'A0502', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W17
              , DECODE(OPER, 'A0502', SUM(WAIT_TAT_QTY), 0) AS WSUM17
              , DECODE(OPER, 'A0502', SUM(SHIP_QTY), 0) AS WCNT17
              , DECODE(OPER, 'A0502', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R17
              , DECODE(OPER, 'A0502', SUM(PROC_TAT_QTY), 0) AS RSUM17
              , DECODE(OPER, 'A0502', SUM(SHIP_QTY), 0) AS RCNT17
              , DECODE(OPER, 'A0602', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W18
              , DECODE(OPER, 'A0602', SUM(WAIT_TAT_QTY), 0) AS WSUM18
              , DECODE(OPER, 'A0602', SUM(SHIP_QTY), 0) AS WCNT18
              , DECODE(OPER, 'A0602', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R18
              , DECODE(OPER, 'A0602', SUM(PROC_TAT_QTY), 0) AS RSUM18
              , DECODE(OPER, 'A0602', SUM(SHIP_QTY), 0) AS RCNT18
              , DECODE(OPER, 'A0950', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W19
              , DECODE(OPER, 'A0950', SUM(WAIT_TAT_QTY), 0) AS WSUM19
              , DECODE(OPER, 'A0950', SUM(SHIP_QTY), 0) AS WCNT19
              , DECODE(OPER, 'A0950', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R19
              , DECODE(OPER, 'A0950', SUM(PROC_TAT_QTY), 0) AS RSUM19
              , DECODE(OPER, 'A0950', SUM(SHIP_QTY), 0) AS RCNT19
              , DECODE(OPER, 'A0940', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W20
              , DECODE(OPER, 'A0940', SUM(WAIT_TAT_QTY), 0) AS WSUM20
              , DECODE(OPER, 'A0940', SUM(SHIP_QTY), 0) AS WCNT20
              , DECODE(OPER, 'A0940', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R20
              , DECODE(OPER, 'A0940', SUM(PROC_TAT_QTY), 0) AS RSUM20
              , DECODE(OPER, 'A0940', SUM(SHIP_QTY), 0) AS RCNT20
              , DECODE(OPER, 'A0980', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W21
              , DECODE(OPER, 'A0980', SUM(WAIT_TAT_QTY), 0) AS WSUM21
              , DECODE(OPER, 'A0980', SUM(SHIP_QTY), 0) AS WCNT21
              , DECODE(OPER, 'A0980', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R21
              , DECODE(OPER, 'A0980', SUM(PROC_TAT_QTY), 0) AS RSUM21
              , DECODE(OPER, 'A0980', SUM(SHIP_QTY), 0) AS RCNT21
              , DECODE(OPER, 'A1000', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W22
              , DECODE(OPER, 'A1000', SUM(WAIT_TAT_QTY), 0) AS WSUM22
              , DECODE(OPER, 'A1000', SUM(SHIP_QTY), 0) AS WCNT22
              , DECODE(OPER, 'A1000', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R22
              , DECODE(OPER, 'A1000', SUM(PROC_TAT_QTY), 0) AS RSUM22
              , DECODE(OPER, 'A1000', SUM(SHIP_QTY), 0) AS RCNT22
              , DECODE(OPER, 'A1020', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W23
              , DECODE(OPER, 'A1020', SUM(WAIT_TAT_QTY), 0) AS WSUM23
              , DECODE(OPER, 'A1020', SUM(SHIP_QTY), 0) AS WCNT23
              , DECODE(OPER, 'A1020', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R23
              , DECODE(OPER, 'A1020', SUM(PROC_TAT_QTY), 0) AS RSUM23
              , DECODE(OPER, 'A1020', SUM(SHIP_QTY), 0) AS RCNT23
              , DECODE(OPER, 'A1100', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W24
              , DECODE(OPER, 'A1100', SUM(WAIT_TAT_QTY), 0) AS WSUM24
              , DECODE(OPER, 'A1100', SUM(SHIP_QTY), 0) AS WCNT24
              , DECODE(OPER, 'A1100', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R24
              , DECODE(OPER, 'A1100', SUM(PROC_TAT_QTY), 0) AS RSUM24
              , DECODE(OPER, 'A1100', SUM(SHIP_QTY), 0) AS RCNT24
              , DECODE(OPER, 'A1150', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W25
              , DECODE(OPER, 'A1150', SUM(WAIT_TAT_QTY), 0) AS WSUM25
              , DECODE(OPER, 'A1150', SUM(SHIP_QTY), 0) AS WCNT25
              , DECODE(OPER, 'A1150', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R25
              , DECODE(OPER, 'A1150', SUM(PROC_TAT_QTY), 0) AS RSUM25
              , DECODE(OPER, 'A1150', SUM(SHIP_QTY), 0) AS RCNT25
              , DECODE(OPER, 'A1460', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W26
              , DECODE(OPER, 'A1460', SUM(WAIT_TAT_QTY), 0) AS WSUM26
              , DECODE(OPER, 'A1460', SUM(SHIP_QTY), 0) AS WCNT26
              , DECODE(OPER, 'A1460', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R26
              , DECODE(OPER, 'A1460', SUM(PROC_TAT_QTY), 0) AS RSUM26
              , DECODE(OPER, 'A1460', SUM(SHIP_QTY), 0) AS RCNT26
              , DECODE(OPER, 'A1810', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W27
              , DECODE(OPER, 'A1810', SUM(WAIT_TAT_QTY), 0) AS WSUM27
              , DECODE(OPER, 'A1810', SUM(SHIP_QTY), 0) AS WCNT27
              , DECODE(OPER, 'A1810', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R27
              , DECODE(OPER, 'A1810', SUM(PROC_TAT_QTY), 0) AS RSUM27
              , DECODE(OPER, 'A1810', SUM(SHIP_QTY), 0) AS RCNT27
              , DECODE(OPER, 'A1820', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W28
              , DECODE(OPER, 'A1820', SUM(WAIT_TAT_QTY), 0) AS WSUM28
              , DECODE(OPER, 'A1820', SUM(SHIP_QTY), 0) AS WCNT28
              , DECODE(OPER, 'A1820', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R28
              , DECODE(OPER, 'A1820', SUM(PROC_TAT_QTY), 0) AS RSUM28
              , DECODE(OPER, 'A1820', SUM(SHIP_QTY), 0) AS RCNT28
              , DECODE(OPER, 'A1825', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W29
              , DECODE(OPER, 'A1825', SUM(WAIT_TAT_QTY), 0) AS WSUM29
              , DECODE(OPER, 'A1825', SUM(SHIP_QTY), 0) AS WCNT29
              , DECODE(OPER, 'A1825', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R29
              , DECODE(OPER, 'A1825', SUM(PROC_TAT_QTY), 0) AS RSUM29
              , DECODE(OPER, 'A1825', SUM(SHIP_QTY), 0) AS RCNT29
              , DECODE(OPER, 'A1815', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W30
              , DECODE(OPER, 'A1815', SUM(WAIT_TAT_QTY), 0) AS WSUM30
              , DECODE(OPER, 'A1815', SUM(SHIP_QTY), 0) AS WCNT30
              , DECODE(OPER, 'A1815', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R30
              , DECODE(OPER, 'A1815', SUM(PROC_TAT_QTY), 0) AS RSUM30
              , DECODE(OPER, 'A1815', SUM(SHIP_QTY), 0) AS RCNT30
              , DECODE(OPER, 'A1830', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W31
              , DECODE(OPER, 'A1830', SUM(WAIT_TAT_QTY), 0) AS WSUM31
              , DECODE(OPER, 'A1830', SUM(SHIP_QTY), 0) AS WCNT31
              , DECODE(OPER, 'A1830', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R31
              , DECODE(OPER, 'A1830', SUM(PROC_TAT_QTY), 0) AS RSUM31
              , DECODE(OPER, 'A1830', SUM(SHIP_QTY), 0) AS RCNT31
              , DECODE(OPER, 'A2000', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W32
              , DECODE(OPER, 'A2000', SUM(WAIT_TAT_QTY), 0) AS WSUM32
              , DECODE(OPER, 'A2000', SUM(SHIP_QTY), 0) AS WCNT32
              , DECODE(OPER, 'A2000', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R32
              , DECODE(OPER, 'A2000', SUM(PROC_TAT_QTY), 0) AS RSUM32
              , DECODE(OPER, 'A2000', SUM(SHIP_QTY), 0) AS RCNT32
              , DECODE(OPER, 'A2050', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W33
              , DECODE(OPER, 'A2050', SUM(WAIT_TAT_QTY), 0) AS WSUM33
              , DECODE(OPER, 'A2050', SUM(SHIP_QTY), 0) AS WCNT33
              , DECODE(OPER, 'A2050', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R33
              , DECODE(OPER, 'A2050', SUM(PROC_TAT_QTY), 0) AS RSUM33
              , DECODE(OPER, 'A2050', SUM(SHIP_QTY), 0) AS RCNT33
              , DECODE(OPER, 'A2150', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W34
              , DECODE(OPER, 'A2150', SUM(WAIT_TAT_QTY), 0) AS WSUM34
              , DECODE(OPER, 'A2150', SUM(SHIP_QTY), 0) AS WCNT34
              , DECODE(OPER, 'A2150', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R34
              , DECODE(OPER, 'A2150', SUM(PROC_TAT_QTY), 0) AS RSUM34
              , DECODE(OPER, 'A2150', SUM(SHIP_QTY), 0) AS RCNT34
              , DECODE(OPER, 'A2100', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W35
              , DECODE(OPER, 'A2100', SUM(WAIT_TAT_QTY), 0) AS WSUM35
              , DECODE(OPER, 'A2100', SUM(SHIP_QTY), 0) AS WCNT35
              , DECODE(OPER, 'A2100', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R35
              , DECODE(OPER, 'A2100', SUM(PROC_TAT_QTY), 0) AS RSUM35
              , DECODE(OPER, 'A2100', SUM(SHIP_QTY), 0) AS RCNT35
              , DECODE(OPER, 'A2300', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W36
              , DECODE(OPER, 'A2300', SUM(WAIT_TAT_QTY), 0) AS WSUM36
              , DECODE(OPER, 'A2300', SUM(SHIP_QTY), 0) AS WCNT36
              , DECODE(OPER, 'A2300', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R36
              , DECODE(OPER, 'A2300', SUM(PROC_TAT_QTY), 0) AS RSUM36
              , DECODE(OPER, 'A2300', SUM(SHIP_QTY), 0) AS RCNT36
              , DECODE(OPER, 'A2350', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W37
              , DECODE(OPER, 'A2350', SUM(WAIT_TAT_QTY), 0) AS WSUM37
              , DECODE(OPER, 'A2350', SUM(SHIP_QTY), 0) AS WCNT37
              , DECODE(OPER, 'A2350', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R37
              , DECODE(OPER, 'A2350', SUM(PROC_TAT_QTY), 0) AS RSUM37
              , DECODE(OPER, 'A2350', SUM(SHIP_QTY), 0) AS RCNT37
              , DECODE(OPER, 'AZ010', DECODE(SUM(SHIP_QTY),0,0,SUM(WAIT_TAT_QTY)/SUM(SHIP_QTY)), 0) AS W38
              , DECODE(OPER, 'AZ010', SUM(WAIT_TAT_QTY), 0) AS WSUM38
              , DECODE(OPER, 'AZ010', SUM(SHIP_QTY), 0) AS WCNT38
              , DECODE(OPER, 'AZ010', DECODE(SUM(SHIP_QTY),0,0,SUM(PROC_TAT_QTY)/SUM(SHIP_QTY)), 0) AS R38
              , DECODE(OPER, 'AZ010', SUM(PROC_TAT_QTY), 0) AS RSUM38
              , DECODE(OPER, 'AZ010', SUM(SHIP_QTY), 0) AS RCNT38
           FROM ( 
                  SELECT SHIP_DATE, (SELECT DATA_1 FROM MGCMTBLDAT WHERE TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = MAT_GRP_1 AND ROWNUM=1) AS MAT_GRP_1, MAT_CMF_10,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', OPER 
                       , TAT.TOTAL_TAT_QTY AS TOTAL_TAT_QTY
                       , TAT.WAIT_TAT_QTY AS WAIT_TAT_QTY
                       , TAT.PROC_TAT_QTY AS PROC_TAT_QTY
                       , SHIP.SHIP_QTY AS SHIP_QTY
                    FROM CSUMTATMAT@RPTTOMES TAT, MWIPMATDEF MAT       
                       , (      
                           SELECT TAT.FACTORY, TAT.MAT_ID, TAT.SHIP_DATE AS WORK_DATE 
                                , SHIP_QTY      
                             FROM CSUMTATMAT@RPTTOMES TAT      
                            WHERE 1=1      
                              AND TAT.FACTORY='HMVA2'      
                              AND OPER ='AZ010'      
                              AND TAT.SHIP_DATE BETWEEN '20200408' AND '20200409' 
                         ) SHIP      
                   WHERE 1=1      
                     AND TAT.FACTORY = MAT.FACTORY    
                     AND TAT.MAT_ID = MAT.MAT_ID      
                     AND TAT.MAT_ID = SHIP.MAT_ID       
                     AND TAT.SHIP_DATE = SHIP.WORK_DATE       
                     AND MAT.MAT_VER = 1 
                     AND MAT.MAT_TYPE = 'FG' 
                     AND MAT.DELETE_FLAG <> 'Y' 
                     AND TAT.FACTORY = 'HMVA2'        
                     AND TAT.SHIP_DATE BETWEEN '20200408' AND '20200409' 
                 AND MAT.FIRST_FLOW LIKE '%'
                     AND TAT.OPER BETWEEN 'A0000' AND 'AZ010' 
                     AND MAT.MAT_ID LIKE 'DR%'
                ) A 
          GROUP BY SHIP_DATE, MAT_GRP_1, MAT_CMF_10,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', OPER  
       )         
  GROUP BY SHIP_DATE, MAT_GRP_1, MAT_CMF_10,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' '
  ORDER BY SHIP_DATE, MAT_GRP_1, MAT_CMF_10,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' '

-------------------------------------------------------------
SELECT * FROM RWEBUSRDEF WHERE FACTORY = :FACTORY AND USER_ID= :USER_ID
-------------------------------------------------------------
SELECT A.FUNC_GRP_SEQ,A.SEC_GRP_ID,A.FUNC_GRP_ID,NVL(A.FUNC_NAME, ' ') FUNC_NAME, NVL(B.FUNC_DESC, ' ') FUNC_DESC, LANGUAGE_1, LANGUAGE_2, LANGUAGE_3
  FROM RWEBGRPFUN A, RWEBFUNDEF B
 WHERE A.FACTORY = :p_FACTORY
   AND A.SEC_GRP_ID = :p_SEC_GRP_ID
   AND A.FUNC_NAME=B.FUNC_NAME(+)
 ORDER BY A.FUNC_GRP_SEQ, A.FUNC_SEQ
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
SELECT LANGUAGE_2 FROM RWEBFUNDEF WHERE FUNC_NAME = 'SEC1102'
-------------------------------------------------------------
SELECT * FROM RWEBGRPDEF WHERE FACTORY = :FACTORY ORDER BY SEC_GRP_ID
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
SELECT LANGUAGE_2 FROM RWEBFUNDEF WHERE FUNC_NAME = 'SEC1104'
-------------------------------------------------------------
SELECT * FROM RWEBFUNDEF ORDER BY FUNC_NAME
-------------------------------------------------------------
SELECT * FROM RWEBGRPDEF WHERE FACTORY = :FACTORY ORDER BY SEC_GRP_ID
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT A.FUNC_GRP_SEQ,A.SEC_GRP_ID,A.FUNC_GRP_ID,NVL(A.FUNC_NAME, ' ') FUNC_NAME, NVL(B.FUNC_DESC, ' ') FUNC_DESC, LANGUAGE_1, LANGUAGE_2, LANGUAGE_3
  FROM RWEBGRPFUN A, RWEBFUNDEF B
 WHERE A.FACTORY = :p_FACTORY
   AND A.SEC_GRP_ID = :p_SEC_GRP_ID
   AND A.FUNC_NAME=B.FUNC_NAME(+)
 ORDER BY A.FUNC_GRP_SEQ, A.FUNC_SEQ
-------------------------------------------------------------
SELECT TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') FROM DUAL
-------------------------------------------------------------
SELECT NVL(FUNC_SEQ, 0)
                       FROM RWEBGRPFUN
                      WHERE FACTORY = :FACTORY
                        AND SEC_GRP_ID = :SEC_GRP_ID
                        AND FUNC_GRP_ID = :FUNC_GRP_ID
                        AND FUNC_NAME = :FUNC_NAME
-------------------------------------------------------------
UPDATE RWEBGRPFUN
                        SET FUNC_SEQ = :FUNC_SEQ
                          , UPDATE_USER_ID = :UPDATE_USER_ID
                          , UPDATE_TIME = :UPDATE_TIME
                      WHERE FACTORY = :C_FACTORY       
                        AND SEC_GRP_ID = :C_SEC_GRP_ID    
                        AND FUNC_GRP_ID = :C_FUNC_GRP_ID
                        AND FUNC_NAME = :C_FUNC_NAME
-------------------------------------------------------------
SELECT NVL(FUNC_SEQ, 0)
                       FROM RWEBGRPFUN
                      WHERE FACTORY = :FACTORY
                        AND SEC_GRP_ID = :SEC_GRP_ID
                        AND FUNC_GRP_ID = :FUNC_GRP_ID
                        AND FUNC_NAME = :FUNC_NAME
-------------------------------------------------------------
UPDATE RWEBGRPFUN
                        SET FUNC_SEQ = :FUNC_SEQ
                          , UPDATE_USER_ID = :UPDATE_USER_ID
                          , UPDATE_TIME = :UPDATE_TIME
                      WHERE FACTORY = :C_FACTORY       
                        AND SEC_GRP_ID = :C_SEC_GRP_ID    
                        AND FUNC_GRP_ID = :C_FUNC_GRP_ID
                        AND FUNC_NAME = :C_FUNC_NAME
-------------------------------------------------------------
SELECT TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') FROM DUAL
-------------------------------------------------------------
SELECT NVL(FUNC_SEQ, 0)
                       FROM RWEBGRPFUN
                      WHERE FACTORY = :FACTORY
                        AND SEC_GRP_ID = :SEC_GRP_ID
                        AND FUNC_GRP_ID = :FUNC_GRP_ID
                        AND FUNC_NAME = :FUNC_NAME
-------------------------------------------------------------
UPDATE RWEBGRPFUN
                        SET FUNC_SEQ = :FUNC_SEQ
                          , UPDATE_USER_ID = :UPDATE_USER_ID
                          , UPDATE_TIME = :UPDATE_TIME
                      WHERE FACTORY = :C_FACTORY       
                        AND SEC_GRP_ID = :C_SEC_GRP_ID    
                        AND FUNC_GRP_ID = :C_FUNC_GRP_ID
                        AND FUNC_NAME = :C_FUNC_NAME
-------------------------------------------------------------
SELECT NVL(FUNC_SEQ, 0)
                       FROM RWEBGRPFUN
                      WHERE FACTORY = :FACTORY
                        AND SEC_GRP_ID = :SEC_GRP_ID
                        AND FUNC_GRP_ID = :FUNC_GRP_ID
                        AND FUNC_NAME = :FUNC_NAME
-------------------------------------------------------------
UPDATE RWEBGRPFUN
                        SET FUNC_SEQ = :FUNC_SEQ
                          , UPDATE_USER_ID = :UPDATE_USER_ID
                          , UPDATE_TIME = :UPDATE_TIME
                      WHERE FACTORY = :C_FACTORY       
                        AND SEC_GRP_ID = :C_SEC_GRP_ID    
                        AND FUNC_GRP_ID = :C_FUNC_GRP_ID
                        AND FUNC_NAME = :C_FUNC_NAME
-------------------------------------------------------------
SELECT TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') FROM DUAL
-------------------------------------------------------------
SELECT NVL(FUNC_SEQ, 0)
                       FROM RWEBGRPFUN
                      WHERE FACTORY = :FACTORY
                        AND SEC_GRP_ID = :SEC_GRP_ID
                        AND FUNC_GRP_ID = :FUNC_GRP_ID
                        AND FUNC_NAME = :FUNC_NAME
-------------------------------------------------------------
UPDATE RWEBGRPFUN
                        SET FUNC_SEQ = :FUNC_SEQ
                          , UPDATE_USER_ID = :UPDATE_USER_ID
                          , UPDATE_TIME = :UPDATE_TIME
                      WHERE FACTORY = :C_FACTORY       
                        AND SEC_GRP_ID = :C_SEC_GRP_ID    
                        AND FUNC_GRP_ID = :C_FUNC_GRP_ID
                        AND FUNC_NAME = :C_FUNC_NAME
-------------------------------------------------------------
SELECT NVL(FUNC_SEQ, 0)
                       FROM RWEBGRPFUN
                      WHERE FACTORY = :FACTORY
                        AND SEC_GRP_ID = :SEC_GRP_ID
                        AND FUNC_GRP_ID = :FUNC_GRP_ID
                        AND FUNC_NAME = :FUNC_NAME
-------------------------------------------------------------
UPDATE RWEBGRPFUN
                        SET FUNC_SEQ = :FUNC_SEQ
                          , UPDATE_USER_ID = :UPDATE_USER_ID
                          , UPDATE_TIME = :UPDATE_TIME
                      WHERE FACTORY = :C_FACTORY       
                        AND SEC_GRP_ID = :C_SEC_GRP_ID    
                        AND FUNC_GRP_ID = :C_FUNC_GRP_ID
                        AND FUNC_NAME = :C_FUNC_NAME
-------------------------------------------------------------
SELECT TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') FROM DUAL
-------------------------------------------------------------
SELECT NVL(FUNC_SEQ, 0)
                       FROM RWEBGRPFUN
                      WHERE FACTORY = :FACTORY
                        AND SEC_GRP_ID = :SEC_GRP_ID
                        AND FUNC_GRP_ID = :FUNC_GRP_ID
                        AND FUNC_NAME = :FUNC_NAME
-------------------------------------------------------------
UPDATE RWEBGRPFUN
                        SET FUNC_SEQ = :FUNC_SEQ
                          , UPDATE_USER_ID = :UPDATE_USER_ID
                          , UPDATE_TIME = :UPDATE_TIME
                      WHERE FACTORY = :C_FACTORY       
                        AND SEC_GRP_ID = :C_SEC_GRP_ID    
                        AND FUNC_GRP_ID = :C_FUNC_GRP_ID
                        AND FUNC_NAME = :C_FUNC_NAME
-------------------------------------------------------------
SELECT NVL(FUNC_SEQ, 0)
                       FROM RWEBGRPFUN
                      WHERE FACTORY = :FACTORY
                        AND SEC_GRP_ID = :SEC_GRP_ID
                        AND FUNC_GRP_ID = :FUNC_GRP_ID
                        AND FUNC_NAME = :FUNC_NAME
-------------------------------------------------------------
UPDATE RWEBGRPFUN
                        SET FUNC_SEQ = :FUNC_SEQ
                          , UPDATE_USER_ID = :UPDATE_USER_ID
                          , UPDATE_TIME = :UPDATE_TIME
                      WHERE FACTORY = :C_FACTORY       
                        AND SEC_GRP_ID = :C_SEC_GRP_ID    
                        AND FUNC_GRP_ID = :C_FUNC_GRP_ID
                        AND FUNC_NAME = :C_FUNC_NAME
-------------------------------------------------------------
SELECT TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') FROM DUAL
-------------------------------------------------------------
SELECT NVL(FUNC_SEQ, 0)
                       FROM RWEBGRPFUN
                      WHERE FACTORY = :FACTORY
                        AND SEC_GRP_ID = :SEC_GRP_ID
                        AND FUNC_GRP_ID = :FUNC_GRP_ID
                        AND FUNC_NAME = :FUNC_NAME
-------------------------------------------------------------
UPDATE RWEBGRPFUN
                        SET FUNC_SEQ = :FUNC_SEQ
                          , UPDATE_USER_ID = :UPDATE_USER_ID
                          , UPDATE_TIME = :UPDATE_TIME
                      WHERE FACTORY = :C_FACTORY       
                        AND SEC_GRP_ID = :C_SEC_GRP_ID    
                        AND FUNC_GRP_ID = :C_FUNC_GRP_ID
                        AND FUNC_NAME = :C_FUNC_NAME
-------------------------------------------------------------
SELECT NVL(FUNC_SEQ, 0)
                       FROM RWEBGRPFUN
                      WHERE FACTORY = :FACTORY
                        AND SEC_GRP_ID = :SEC_GRP_ID
                        AND FUNC_GRP_ID = :FUNC_GRP_ID
                        AND FUNC_NAME = :FUNC_NAME
-------------------------------------------------------------
UPDATE RWEBGRPFUN
                        SET FUNC_SEQ = :FUNC_SEQ
                          , UPDATE_USER_ID = :UPDATE_USER_ID
                          , UPDATE_TIME = :UPDATE_TIME
                      WHERE FACTORY = :C_FACTORY       
                        AND SEC_GRP_ID = :C_SEC_GRP_ID    
                        AND FUNC_GRP_ID = :C_FUNC_GRP_ID
                        AND FUNC_NAME = :C_FUNC_NAME
-------------------------------------------------------------
SELECT TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') FROM DUAL
-------------------------------------------------------------
SELECT NVL(FUNC_SEQ, 0)
                       FROM RWEBGRPFUN
                      WHERE FACTORY = :FACTORY
                        AND SEC_GRP_ID = :SEC_GRP_ID
                        AND FUNC_GRP_ID = :FUNC_GRP_ID
                        AND FUNC_NAME = :FUNC_NAME
-------------------------------------------------------------
UPDATE RWEBGRPFUN
                        SET FUNC_SEQ = :FUNC_SEQ
                          , UPDATE_USER_ID = :UPDATE_USER_ID
                          , UPDATE_TIME = :UPDATE_TIME
                      WHERE FACTORY = :C_FACTORY       
                        AND SEC_GRP_ID = :C_SEC_GRP_ID    
                        AND FUNC_GRP_ID = :C_FUNC_GRP_ID
                        AND FUNC_NAME = :C_FUNC_NAME
-------------------------------------------------------------
SELECT NVL(FUNC_SEQ, 0)
                       FROM RWEBGRPFUN
                      WHERE FACTORY = :FACTORY
                        AND SEC_GRP_ID = :SEC_GRP_ID
                        AND FUNC_GRP_ID = :FUNC_GRP_ID
                        AND FUNC_NAME = :FUNC_NAME
-------------------------------------------------------------
UPDATE RWEBGRPFUN
                        SET FUNC_SEQ = :FUNC_SEQ
                          , UPDATE_USER_ID = :UPDATE_USER_ID
                          , UPDATE_TIME = :UPDATE_TIME
                      WHERE FACTORY = :C_FACTORY       
                        AND SEC_GRP_ID = :C_SEC_GRP_ID    
                        AND FUNC_GRP_ID = :C_FUNC_GRP_ID
                        AND FUNC_NAME = :C_FUNC_NAME
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT PLAN_WEEK V1    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_DATE = TO_CHAR(SYSDATE,'yyyymmdd')      AND ROWNUM = 1  
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT DISTINCT PLAN_YEAR||LPAD(PLAN_WEEK,2,'0') AS PLAN_WEEK 
  FROM MWIPCALDEF
 WHERE 1=1 
   AND CALENDAR_ID = 'OTD' 
   AND SYS_YEAR||LPAD(SYS_MONTH,2,'0') = '202004' 
 ORDER BY PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT DISTINCT PLAN_YEAR||LPAD(PLAN_WEEK,2,'0') AS PLAN_WEEK 
  FROM MWIPCALDEF
 WHERE 1=1 
   AND CALENDAR_ID = 'OTD' 
   AND SYS_YEAR||LPAD(SYS_MONTH,2,'0') = '202004' 
   AND SYS_DATE <= '20200409' 
 ORDER BY PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT LANGUAGE_2 FROM RWEBFUNDEF WHERE FUNC_NAME = 'PRD010907'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT DISTINCT PLAN_YEAR||LPAD(PLAN_WEEK,2,'0') AS PLAN_WEEK 
  FROM MWIPCALDEF
 WHERE 1=1 
   AND CALENDAR_ID = 'OTD' 
   AND SYS_YEAR||LPAD(SYS_MONTH,2,'0') = '202004' 
 ORDER BY PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT DISTINCT PLAN_YEAR||LPAD(PLAN_WEEK,2,'0') AS PLAN_WEEK 
  FROM MWIPCALDEF
 WHERE 1=1 
   AND CALENDAR_ID = 'OTD' 
   AND SYS_YEAR||LPAD(SYS_MONTH,2,'0') = '202004' 
   AND SYS_DATE <= '20200409' 
 ORDER BY PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE) AS START_DAY 
     , MAX(SYS_DATE) AS END_DAY 
     , PLAN_YEAR||DECODE(LENGTH(PLAN_WEEK), 1, '0'||PLAN_WEEK, PLAN_WEEK) AS WEEK
  FROM MWIPCALDEF 
 WHERE CALENDAR_ID = 'OTD'
   AND (PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) IN ( 
                                                SELECT WW
                                                  FROM (
                                                        SELECT WW
                                                             , ROW_NUMBER() OVER(ORDER BY WW) AS RNK
                                                          FROM (
                                                                SELECT DISTINCT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW
                                                                  FROM MWIPCALDEF
                                                                 WHERE CALENDAR_ID = 'OTD'
                                                                   AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') >= (
                                                                                                              SELECT MAX(PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) AS WW
                                                                                                                FROM MWIPCALDEF
                                                                                                               WHERE CALENDAR_ID = 'OTD'
                                                                                                                 AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') < (SELECT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW FROM MWIPCALDEF WHERE CALENDAR_ID = 'OTD' AND SYS_DATE = '20200409')
                                                                                                                 AND SYS_DATE >= TO_CHAR(TO_DATE('20200409', 'YYYYMMDD')-14, 'YYYYMMDD')
                                                                                                             )
                                                               ) 
                                                       )
                                                 WHERE RNK <= 7
                                               ) 
 GROUP BY PLAN_YEAR, PLAN_WEEK 
 ORDER BY PLAN_YEAR, PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
WITH DT AS
(
 SELECT B.PLAN_MONTH, A.PLAN_WEEK, A.GUBUN, B.CKD_WEEK, A.MAT_ID, A.WW_QTY, B.CNT
      , ROUND((A.WW_QTY / 7) * B.CNT, 0) AS REV_QTY
   FROM RWIPPLNWEK A
      , (
         SELECT MAX(TRIM(TO_CHAR(PLAN_YEAR))||LPAD(PLAN_MONTH,2,'0')) PLAN_MONTH
              , MAX(TRIM(TO_CHAR(PLAN_YEAR))||LPAD(PLAN_WEEK,2,'0')) PLAN_WEEK
              , COUNT(*) AS CNT
              , (SELECT MAX(TRIM(TO_CHAR(PLAN_YEAR))||LPAD(PLAN_WEEK,2,'0')) PLAN_WEEK FROM MWIPCALDEF WHERE CALENDAR_ID = 'OTD' AND SYS_DATE = '20200409') AS CKD_WEEK
           FROM MWIPCALDEF
          WHERE 1=1
            AND CALENDAR_ID = 'OTD'
            AND SYS_YEAR||LPAD(SYS_MONTH,2,'0') IN ('202004','202005','202006')
          GROUP BY PLAN_MONTH, PLAN_WEEK
        ) B
  WHERE 1=1
    AND A.PLAN_WEEK = B.PLAN_WEEK
    AND A.FACTORY = 'HMVA2' 
)
SELECT CUST_TYPE, NVL((SELECT DATA_1 FROM MGCMTBLDAT WHERE TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = MAT_GRP_1 AND ROWNUM=1), '-') AS CUSTOMER, MAT_GRP_9 AS MAJOR_CODE, MAT_GRP_2 AS FAMILY,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ' 
     , ROUND(SUM(MON_PLN * CONVERT_QTY) /1000,0) AS MON_PLN
     , ROUND(SUM(REV_PLN * CONVERT_QTY) /1000,0) AS REV_PLN
     , ROUND(SUM(SOP_PLN * CONVERT_QTY) /1000,0) AS SOP_PLN
     , ROUND(SUM(W0 * CONVERT_QTY) /1000,0) AS W0
     , ROUND(SUM(W1 * CONVERT_QTY) /1000,0) AS W1
     , ROUND(SUM(W2 * CONVERT_QTY) /1000,0) AS W2
     , ROUND(SUM(W3 * CONVERT_QTY) /1000,0) AS W3
     , ROUND(SUM(W4 * CONVERT_QTY) /1000,0) AS W4
     , ROUND(SUM(SHP_W0 * CONVERT_QTY) /1000,0) AS SHP_W0
     , ROUND(SUM(SHP_W1 * CONVERT_QTY) /1000,0) AS SHP_W1
     , ROUND(SUM(M1 * CONVERT_QTY) /1000,0) AS M1
     , ROUND(SUM(M2 * CONVERT_QTY) /1000,0) AS M2
  FROM (
        SELECT MAT.* 
             , NVL((SELECT DATA_10 FROM MGCMTBLDAT WHERE TABLE_NAME = 'H_CUSTOMER' AND FACTORY = 'HMVA2' AND  KEY_1 = MAT_GRP_1), '-') AS CUST_TYPE 
             , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN M_PLN.MON_PLN / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE M_PLN.MON_PLN END AS MON_PLN
             , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN M_PLN.REV_PLN / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE M_PLN.REV_PLN END AS REV_PLN
             , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN M_PLN.SOP_PLN / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE M_PLN.SOP_PLN END AS SOP_PLN
             , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN W0 / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE W0 END AS W0
             , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN W1 / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE W1 END AS W1
             , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN W2 / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE W2 END AS W2
             , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN W3 / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE W3 END AS W3
             , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN W4 / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE W4 END AS W4
             , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN SHP_W0 / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE SHP_W0 END AS SHP_W0
             , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN SHP_W1 / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE SHP_W1 END AS SHP_W1
             , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN M0 / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE M0 END AS M0
             , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN M1 / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE M1 END AS M1
             , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN M2 / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE M2 END AS M2
             , 1 AS CONVERT_QTY
          FROM MWIPMATDEF MAT
             , (
                SELECT MAT_ID
                     , SUM(PLAN_QTY_ASSY) AS MON_PLN
                     , SUM(DECODE(RESV_FIELD1, ' ', 0, RESV_FIELD1)) AS REV_PLN
                     , SUM(DECODE(RESV_FIELD3, ' ', 0, RESV_FIELD3)) AS SOP_PLN
                  FROM CWIPPLNMON 
                 WHERE 1=1 
                   AND FACTORY = 'HMVA2' 
                   AND PLAN_MONTH = '202004'
                 GROUP BY MAT_ID
               ) M_PLN
             , (
                SELECT MAT_ID
                     , SUM(DECODE(PLAN_WEEK, '202014', SHP_QTY, 0)) AS SHP_W0 
                     , SUM(DECODE(PLAN_WEEK, '202015', SHP_QTY, 0)) AS SHP_W1 
                  FROM (
                        SELECT TRIM(TO_CHAR(PLAN_YEAR))||LPAD(PLAN_WEEK,2,'0') AS PLAN_WEEK, MAT_ID
                             , SUM(SHP_QTY_1) AS SHP_QTY
                          FROM VSUMWIPOUT A
                             , MWIPCALDEF B 
                         WHERE 1=1 
                           AND A.WORK_DATE = B.SYS_DATE(+) 
                           AND A.WORK_DATE LIKE '202004%'
                           AND A.LOT_TYPE = 'W' 
                           AND A.FACTORY = 'HMVA2' 
                           AND A.CM_KEY_2 = 'PROD' 
                           AND A.CM_KEY_3 LIKE 'P%'
                           AND B.CALENDAR_ID(+) = 'OTD'
                           AND B.PLAN_YEAR||LPAD(B.PLAN_WEEK,2,'0') <= '202015'
                         GROUP BY TRIM(TO_CHAR(PLAN_YEAR))||LPAD(PLAN_WEEK,2,'0'), MAT_ID 
                         UNION ALL 
                        SELECT PLAN_WEEK, MAT_ID, SUM(REV_QTY) 
                          FROM DT 
                         WHERE GUBUN = '3' 
                           AND PLAN_WEEK = '202015'
                           AND PLAN_MONTH = '202004'
                         GROUP BY PLAN_WEEK, MAT_ID 
                       )
                 GROUP BY MAT_ID
               ) SHP
             , (
                SELECT MAT_ID
                     , SUM(CASE WHEN PLAN_MONTH = '202004' AND PLAN_WEEK = '202014' THEN REV_QTY ELSE 0 END) AS W0 
                     , SUM(CASE WHEN PLAN_MONTH = '202004' AND PLAN_WEEK = '202015' THEN REV_QTY ELSE 0 END) AS W1 
                     , SUM(CASE WHEN PLAN_MONTH = '202004' AND PLAN_WEEK = '202016' THEN REV_QTY ELSE 0 END) AS W2 
                     , SUM(CASE WHEN PLAN_MONTH = '202004' AND PLAN_WEEK = '202017' THEN REV_QTY ELSE 0 END) AS W3 
                     , SUM(CASE WHEN PLAN_MONTH = '202004' AND PLAN_WEEK = '202018' THEN REV_QTY ELSE 0 END) AS W4 
                     , SUM(CASE WHEN PLAN_WEEK >= CKD_WEEK THEN REV_QTY ELSE 0 END) AS W_LAST
                     , SUM(DECODE(PLAN_MONTH, '202004', REV_QTY, 0)) AS M0
                     , SUM(DECODE(PLAN_MONTH, '202005', REV_QTY, 0)) AS M1
                     , SUM(DECODE(PLAN_MONTH, '202006', REV_QTY, 0)) AS M2
                  FROM (
                        SELECT * FROM DT WHERE GUBUN = '3'
                       )
                 GROUP BY MAT_ID
               ) W_PLN
         WHERE 1=1
           AND MAT.MAT_ID = M_PLN.MAT_ID(+)
           AND MAT.MAT_ID = SHP.MAT_ID(+)
           AND MAT.MAT_ID = W_PLN.MAT_ID(+)
           AND MAT.FACTORY = 'HMVA2'
           AND MAT.DELETE_FLAG = ' '
           AND MAT.MAT_TYPE = 'FG'
           AND MAT.MAT_ID LIKE '%'
       )
 GROUP BY CUST_TYPE, MAT_GRP_1, MAT_GRP_9, MAT_GRP_2,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ' 
HAVING SUM(NVL(MON_PLN,0) + NVL(REV_PLN,0) + NVL(SOP_PLN,0) +  + NVL(W0,0) + NVL(W1,0) + NVL(W2,0) + NVL(W3,0) + NVL(W4,0) + NVL(SHP_W0,0) + NVL(SHP_W1,0) + NVL(M0,0) + NVL(M1,0) + NVL(M2,0)) > 0
 ORDER BY DECODE(CUST_TYPE, 'SEC', 1, 'Hynix', 2, 'Fabless', 3, 4), MAT_GRP_1, MAT_GRP_9, MAT_GRP_2,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ' 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
SELECT DISTINCT PLAN_YEAR||LPAD(PLAN_WEEK,2,'0') AS PLAN_WEEK 
  FROM MWIPCALDEF
 WHERE 1=1 
   AND CALENDAR_ID = 'OTD' 
   AND SYS_YEAR||LPAD(SYS_MONTH,2,'0') = '202004' 
 ORDER BY PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT DISTINCT PLAN_YEAR||LPAD(PLAN_WEEK,2,'0') AS PLAN_WEEK 
  FROM MWIPCALDEF
 WHERE 1=1 
   AND CALENDAR_ID = 'OTD' 
   AND SYS_YEAR||LPAD(SYS_MONTH,2,'0') = '202004' 
   AND SYS_DATE <= '20200409' 
 ORDER BY PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE) AS START_DAY 
     , MAX(SYS_DATE) AS END_DAY 
     , PLAN_YEAR||DECODE(LENGTH(PLAN_WEEK), 1, '0'||PLAN_WEEK, PLAN_WEEK) AS WEEK
  FROM MWIPCALDEF 
 WHERE CALENDAR_ID = 'OTD'
   AND (PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) IN ( 
                                                SELECT WW
                                                  FROM (
                                                        SELECT WW
                                                             , ROW_NUMBER() OVER(ORDER BY WW) AS RNK
                                                          FROM (
                                                                SELECT DISTINCT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW
                                                                  FROM MWIPCALDEF
                                                                 WHERE CALENDAR_ID = 'OTD'
                                                                   AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') >= (
                                                                                                              SELECT MAX(PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) AS WW
                                                                                                                FROM MWIPCALDEF
                                                                                                               WHERE CALENDAR_ID = 'OTD'
                                                                                                                 AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') < (SELECT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW FROM MWIPCALDEF WHERE CALENDAR_ID = 'OTD' AND SYS_DATE = '20200409')
                                                                                                                 AND SYS_DATE >= TO_CHAR(TO_DATE('20200409', 'YYYYMMDD')-14, 'YYYYMMDD')
                                                                                                             )
                                                               ) 
                                                       )
                                                 WHERE RNK <= 7
                                               ) 
 GROUP BY PLAN_YEAR, PLAN_WEEK 
 ORDER BY PLAN_YEAR, PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
WITH DT AS
(
 SELECT B.PLAN_MONTH, A.PLAN_WEEK, A.GUBUN, B.CKD_WEEK, A.MAT_ID, A.WW_QTY, B.CNT
      , ROUND((A.WW_QTY / 7) * B.CNT, 0) AS REV_QTY
   FROM RWIPPLNWEK A
      , (
         SELECT MAX(TRIM(TO_CHAR(PLAN_YEAR))||LPAD(PLAN_MONTH,2,'0')) PLAN_MONTH
              , MAX(TRIM(TO_CHAR(PLAN_YEAR))||LPAD(PLAN_WEEK,2,'0')) PLAN_WEEK
              , COUNT(*) AS CNT
              , (SELECT MAX(TRIM(TO_CHAR(PLAN_YEAR))||LPAD(PLAN_WEEK,2,'0')) PLAN_WEEK FROM MWIPCALDEF WHERE CALENDAR_ID = 'OTD' AND SYS_DATE = '20200409') AS CKD_WEEK
           FROM MWIPCALDEF
          WHERE 1=1
            AND CALENDAR_ID = 'OTD'
            AND SYS_YEAR||LPAD(SYS_MONTH,2,'0') IN ('202004','202005','202006')
          GROUP BY PLAN_MONTH, PLAN_WEEK
        ) B
  WHERE 1=1
    AND A.PLAN_WEEK = B.PLAN_WEEK
    AND A.FACTORY = 'HMVA2' 
)
SELECT CUST_TYPE, NVL((SELECT DATA_1 FROM MGCMTBLDAT WHERE TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = MAT_GRP_1 AND ROWNUM=1), '-') AS CUSTOMER, MAT_GRP_9 AS MAJOR_CODE, MAT_GRP_2 AS FAMILY,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ' 
     , ROUND(SUM(MON_PLN * CONVERT_QTY) /1000,0) AS MON_PLN
     , ROUND(SUM(REV_PLN * CONVERT_QTY) /1000,0) AS REV_PLN
     , ROUND(SUM(SOP_PLN * CONVERT_QTY) /1000,0) AS SOP_PLN
     , ROUND(SUM(W0 * CONVERT_QTY) /1000,0) AS W0
     , ROUND(SUM(W1 * CONVERT_QTY) /1000,0) AS W1
     , ROUND(SUM(W2 * CONVERT_QTY) /1000,0) AS W2
     , ROUND(SUM(W3 * CONVERT_QTY) /1000,0) AS W3
     , ROUND(SUM(W4 * CONVERT_QTY) /1000,0) AS W4
     , ROUND(SUM(SHP_W0 * CONVERT_QTY) /1000,0) AS SHP_W0
     , ROUND(SUM(SHP_W1 * CONVERT_QTY) /1000,0) AS SHP_W1
     , ROUND(SUM(M1 * CONVERT_QTY) /1000,0) AS M1
     , ROUND(SUM(M2 * CONVERT_QTY) /1000,0) AS M2
  FROM (
        SELECT MAT.* 
             , NVL((SELECT DATA_10 FROM MGCMTBLDAT WHERE TABLE_NAME = 'H_CUSTOMER' AND FACTORY = 'HMVA2' AND  KEY_1 = MAT_GRP_1), '-') AS CUST_TYPE 
             , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN M_PLN.MON_PLN / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE M_PLN.MON_PLN END AS MON_PLN
             , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN M_PLN.REV_PLN / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE M_PLN.REV_PLN END AS REV_PLN
             , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN M_PLN.SOP_PLN / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE M_PLN.SOP_PLN END AS SOP_PLN
             , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN W0 / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE W0 END AS W0
             , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN W1 / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE W1 END AS W1
             , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN W2 / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE W2 END AS W2
             , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN W3 / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE W3 END AS W3
             , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN W4 / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE W4 END AS W4
             , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN SHP_W0 / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE SHP_W0 END AS SHP_W0
             , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN SHP_W1 / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE SHP_W1 END AS SHP_W1
             , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN M0 / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE M0 END AS M0
             , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN M1 / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE M1 END AS M1
             , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN M2 / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE M2 END AS M2
             , 1 AS CONVERT_QTY
          FROM MWIPMATDEF MAT
             , (
                SELECT MAT_ID
                     , SUM(PLAN_QTY_ASSY) AS MON_PLN
                     , SUM(DECODE(RESV_FIELD1, ' ', 0, RESV_FIELD1)) AS REV_PLN
                     , SUM(DECODE(RESV_FIELD3, ' ', 0, RESV_FIELD3)) AS SOP_PLN
                  FROM CWIPPLNMON 
                 WHERE 1=1 
                   AND FACTORY = 'HMVA2' 
                   AND PLAN_MONTH = '202004'
                 GROUP BY MAT_ID
               ) M_PLN
             , (
                SELECT MAT_ID
                     , SUM(DECODE(PLAN_WEEK, '202014', SHP_QTY, 0)) AS SHP_W0 
                     , SUM(DECODE(PLAN_WEEK, '202015', SHP_QTY, 0)) AS SHP_W1 
                  FROM (
                        SELECT TRIM(TO_CHAR(PLAN_YEAR))||LPAD(PLAN_WEEK,2,'0') AS PLAN_WEEK, MAT_ID
                             , SUM(SHP_QTY_1) AS SHP_QTY
                          FROM VSUMWIPOUT A
                             , MWIPCALDEF B 
                         WHERE 1=1 
                           AND A.WORK_DATE = B.SYS_DATE(+) 
                           AND A.WORK_DATE LIKE '202004%'
                           AND A.LOT_TYPE = 'W' 
                           AND A.FACTORY = 'HMVA2' 
                           AND A.CM_KEY_2 = 'PROD' 
                           AND A.CM_KEY_3 LIKE 'P%'
                           AND B.CALENDAR_ID(+) = 'OTD'
                           AND B.PLAN_YEAR||LPAD(B.PLAN_WEEK,2,'0') <= '202015'
                         GROUP BY TRIM(TO_CHAR(PLAN_YEAR))||LPAD(PLAN_WEEK,2,'0'), MAT_ID 
                         UNION ALL 
                        SELECT PLAN_WEEK, MAT_ID, SUM(REV_QTY) 
                          FROM DT 
                         WHERE GUBUN = '3' 
                           AND PLAN_WEEK = '202015'
                           AND PLAN_MONTH = '202004'
                         GROUP BY PLAN_WEEK, MAT_ID 
                       )
                 GROUP BY MAT_ID
               ) SHP
             , (
                SELECT MAT_ID
                     , SUM(CASE WHEN PLAN_MONTH = '202004' AND PLAN_WEEK = '202014' THEN REV_QTY ELSE 0 END) AS W0 
                     , SUM(CASE WHEN PLAN_MONTH = '202004' AND PLAN_WEEK = '202015' THEN REV_QTY ELSE 0 END) AS W1 
                     , SUM(CASE WHEN PLAN_MONTH = '202004' AND PLAN_WEEK = '202016' THEN REV_QTY ELSE 0 END) AS W2 
                     , SUM(CASE WHEN PLAN_MONTH = '202004' AND PLAN_WEEK = '202017' THEN REV_QTY ELSE 0 END) AS W3 
                     , SUM(CASE WHEN PLAN_MONTH = '202004' AND PLAN_WEEK = '202018' THEN REV_QTY ELSE 0 END) AS W4 
                     , SUM(CASE WHEN PLAN_WEEK >= CKD_WEEK THEN REV_QTY ELSE 0 END) AS W_LAST
                     , SUM(DECODE(PLAN_MONTH, '202004', REV_QTY, 0)) AS M0
                     , SUM(DECODE(PLAN_MONTH, '202005', REV_QTY, 0)) AS M1
                     , SUM(DECODE(PLAN_MONTH, '202006', REV_QTY, 0)) AS M2
                  FROM (
                        SELECT * FROM DT WHERE GUBUN = '3'
                       )
                 GROUP BY MAT_ID
               ) W_PLN
         WHERE 1=1
           AND MAT.MAT_ID = M_PLN.MAT_ID(+)
           AND MAT.MAT_ID = SHP.MAT_ID(+)
           AND MAT.MAT_ID = W_PLN.MAT_ID(+)
           AND MAT.FACTORY = 'HMVA2'
           AND MAT.DELETE_FLAG = ' '
           AND MAT.MAT_TYPE = 'FG'
           AND MAT.MAT_ID LIKE '%'
       )
 GROUP BY CUST_TYPE, MAT_GRP_1, MAT_GRP_9, MAT_GRP_2,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ' 
HAVING SUM(NVL(MON_PLN,0) + NVL(REV_PLN,0) + NVL(SOP_PLN,0) +  + NVL(W0,0) + NVL(W1,0) + NVL(W2,0) + NVL(W3,0) + NVL(W4,0) + NVL(SHP_W0,0) + NVL(SHP_W1,0) + NVL(M0,0) + NVL(M1,0) + NVL(M2,0)) > 0
 ORDER BY DECODE(CUST_TYPE, 'SEC', 1, 'Hynix', 2, 'Fabless', 3, 4), MAT_GRP_1, MAT_GRP_9, MAT_GRP_2,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ' 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
SELECT MIN(SYS_DATE) AS START_DAY 
     , MAX(SYS_DATE) AS END_DAY 
     , PLAN_YEAR||DECODE(LENGTH(PLAN_WEEK), 1, '0'||PLAN_WEEK, PLAN_WEEK) AS WEEK
  FROM MWIPCALDEF 
 WHERE CALENDAR_ID = 'OTD'
   AND (PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) IN ( 
                                                SELECT WW
                                                  FROM (
                                                        SELECT WW
                                                             , ROW_NUMBER() OVER(ORDER BY WW) AS RNK
                                                          FROM (
                                                                SELECT DISTINCT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW
                                                                  FROM MWIPCALDEF
                                                                 WHERE CALENDAR_ID = 'OTD'
                                                                   AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') >= (
                                                                                                              SELECT MAX(PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) AS WW
                                                                                                                FROM MWIPCALDEF
                                                                                                               WHERE CALENDAR_ID = 'OTD'
                                                                                                                 AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') < (SELECT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW FROM MWIPCALDEF WHERE CALENDAR_ID = 'OTD' AND SYS_DATE = '20200409')
                                                                                                                 AND SYS_DATE >= TO_CHAR(TO_DATE('20200409', 'YYYYMMDD')-14, 'YYYYMMDD')
                                                                                                             )
                                                               ) 
                                                       )
                                                 WHERE RNK <= 7
                                               ) 
 GROUP BY PLAN_YEAR, PLAN_WEEK 
 ORDER BY PLAN_YEAR, PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE) AS START_DAY 
     , MAX(SYS_DATE) AS END_DAY 
     , PLAN_YEAR||DECODE(LENGTH(PLAN_WEEK), 1, '0'||PLAN_WEEK, PLAN_WEEK) AS WEEK
  FROM MWIPCALDEF 
 WHERE CALENDAR_ID = 'SE'
   AND (PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) IN ( 
                                                SELECT WW
                                                  FROM (
                                                        SELECT WW
                                                             , ROW_NUMBER() OVER(ORDER BY WW) AS RNK
                                                          FROM (
                                                                SELECT DISTINCT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW
                                                                  FROM MWIPCALDEF
                                                                 WHERE CALENDAR_ID = 'SE'
                                                                   AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') >= (
                                                                                                              SELECT MAX(PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) AS WW
                                                                                                                FROM MWIPCALDEF
                                                                                                               WHERE CALENDAR_ID = 'SE'
                                                                                                                 AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') < (SELECT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW FROM MWIPCALDEF WHERE CALENDAR_ID = 'SE' AND SYS_DATE = '20200409')
                                                                                                                 AND SYS_DATE >= TO_CHAR(TO_DATE('20200409', 'YYYYMMDD')-14, 'YYYYMMDD')
                                                                                                             )
                                                               ) 
                                                       )
                                                 WHERE RNK <= 7
                                               ) 
 GROUP BY PLAN_YEAR, PLAN_WEEK 
 ORDER BY PLAN_YEAR, PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE) AS START_DAY 
     , MAX(SYS_DATE) AS END_DAY 
     , PLAN_YEAR||DECODE(LENGTH(PLAN_WEEK), 1, '0'||PLAN_WEEK, PLAN_WEEK) AS WEEK
  FROM MWIPCALDEF 
 WHERE CALENDAR_ID = 'OTD'
   AND (PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) IN ( 
                                                SELECT WW
                                                  FROM (
                                                        SELECT WW
                                                             , ROW_NUMBER() OVER(ORDER BY WW) AS RNK
                                                          FROM (
                                                                SELECT DISTINCT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW
                                                                  FROM MWIPCALDEF
                                                                 WHERE CALENDAR_ID = 'OTD'
                                                                   AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') >= (
                                                                                                              SELECT MAX(PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) AS WW
                                                                                                                FROM MWIPCALDEF
                                                                                                               WHERE CALENDAR_ID = 'OTD'
                                                                                                                 AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') < (SELECT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW FROM MWIPCALDEF WHERE CALENDAR_ID = 'OTD' AND SYS_DATE = '20200409')
                                                                                                                 AND SYS_DATE >= TO_CHAR(TO_DATE('20200409', 'YYYYMMDD')-14, 'YYYYMMDD')
                                                                                                             )
                                                               ) 
                                                       )
                                                 WHERE RNK <= 7
                                               ) 
 GROUP BY PLAN_YEAR, PLAN_WEEK 
 ORDER BY PLAN_YEAR, PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE) AS START_DAY 
     , MAX(SYS_DATE) AS END_DAY 
     , PLAN_YEAR||DECODE(LENGTH(PLAN_WEEK), 1, '0'||PLAN_WEEK, PLAN_WEEK) AS WEEK
  FROM MWIPCALDEF 
 WHERE CALENDAR_ID = 'SE'
   AND (PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) IN ( 
                                                SELECT WW
                                                  FROM (
                                                        SELECT WW
                                                             , ROW_NUMBER() OVER(ORDER BY WW) AS RNK
                                                          FROM (
                                                                SELECT DISTINCT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW
                                                                  FROM MWIPCALDEF
                                                                 WHERE CALENDAR_ID = 'SE'
                                                                   AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') >= (
                                                                                                              SELECT MAX(PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) AS WW
                                                                                                                FROM MWIPCALDEF
                                                                                                               WHERE CALENDAR_ID = 'SE'
                                                                                                                 AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') < (SELECT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW FROM MWIPCALDEF WHERE CALENDAR_ID = 'SE' AND SYS_DATE = '20200409')
                                                                                                                 AND SYS_DATE >= TO_CHAR(TO_DATE('20200409', 'YYYYMMDD')-14, 'YYYYMMDD')
                                                                                                             )
                                                               ) 
                                                       )
                                                 WHERE RNK <= 7
                                               ) 
 GROUP BY PLAN_YEAR, PLAN_WEEK 
 ORDER BY PLAN_YEAR, PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT (SELECT DATA_1 FROM MGCMTBLDAT@RPTTOMES WHERE FACTORY = 'HMVA2' AND TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = A.MAT_GRP_1) CUSTOMER, A.MAT_GRP_9, A.MAT_GRP_10,  ' ',  ' ',  ' ',  ' '
     , ROUND(SUM(ORI_PLN) / 1000, 0) AS ORI_PLN
     , ROUND(SUM(REV_PLN) / 1000, 0) AS REV_PLN
     , ROUND(SUM(SHP_TTL) / 1000, 0) AS SHP_TTL
     , ROUND(DECODE(SUM(ORI_PLN), 0, 0, SUM(SHP_TTL) / SUM(ORI_PLN) * 100), 1) AS JINDO_1
     , ROUND(DECODE(SUM(REV_PLN), 0, 0, SUM(SHP_TTL) / SUM(REV_PLN) * 100), 1) AS JINDO_2
     , ROUND(SUM(D1_PLAN) / 1000, 0) AS D1_PLAN
     , ROUND(SUM(NVL(D0_PLAN,0) - NVL(SHP_WEEK,0)) / 1000, 0) AS D0_PLAN
     , ROUND(SUM(SHP_TODAY) / 1000, 0) AS SHP_TODAY
     , ROUND(SUM(NVL(D0_PLAN,0) - NVL(SHP_WEEK,0) - NVL(SHP_TODAY,0)) / 1000, 0) AS D0_DEF
     , ROUND(SUM(HMK3A) / 1000, 0) AS HMK3A
     , ROUND(SUM(MK + TRIM + TIN + SBA + SIG + AVI + VI + QC_GATE) / 1000, 0) AS FINISH
     , ROUND(SUM(CURE + MOLD) / 1000, 0) AS MOLD
     , ROUND(SUM(WB + GATE) / 1000, 0) AS WB
     , ROUND(SUM(SP + DA + SMT) / 1000, 0) AS DA
     , ROUND(SUM(BG + SAW) / 1000, 0) AS DP
     , ROUND(SUM(STOCK) / 1000, 0) AS STOCK
     , ROUND(SUM(HMK3A + QC_GATE + VI + AVI + SIG + SBA + TIN + TRIM + MK + CURE + MOLD + GATE + WB + DA + SP + SAW + BG + STOCK) / 1000, 0) AS WIP_TTL 
     , ROUND(SUM(RCV_QTY) / 1000, 0) AS RCV_QTY
     , ROUND(SUM(OUT_CLOSE) / 1000, 0) AS OUT_CLOSE
     , ROUND(SUM(OUT_MOLD) / 1000, 0) AS OUT_MOLD
     , ROUND(SUM(OUT_WB) / 1000, 0) AS OUT_WB
     , ROUND(SUM(OUT_DA) / 1000, 0) AS OUT_DA
     , ROUND(SUM(OUT_DP) / 1000, 0) AS OUT_DP
     , ROUND(SUM(OUT_STOCK) / 1000, 0) AS OUT_STOCK
  FROM (
        SELECT MAT.*
             , NVL(CASE WHEN MAT.MAT_GRP_3 IN ('COB') THEN ROUND(PLN.ORI_PLN/MAT.NET_DIE,0) ELSE PLN.ORI_PLN END, 0) * PRICE AS ORI_PLN
             , NVL(CASE WHEN MAT.MAT_GRP_3 IN ('COB') THEN ROUND(PLN.REV_PLN/MAT.NET_DIE,0) ELSE PLN.REV_PLN END, 0) * PRICE AS REV_PLN
             , NVL(CASE WHEN MAT.MAT_GRP_3 IN ('COB') THEN ROUND(SHP.SHP_TTL/MAT.NET_DIE,0) ELSE SHP.SHP_TTL END, 0) * PRICE AS SHP_TTL
             , NVL(CASE WHEN MAT.MAT_GRP_3 IN ('COB') THEN ROUND(PLN.D0_PLAN/MAT.NET_DIE,0) ELSE PLN.D0_PLAN END, 0) * PRICE AS D0_PLAN
             , NVL(CASE WHEN MAT.MAT_GRP_3 IN ('COB') THEN ROUND(PLN.D1_PLAN/MAT.NET_DIE,0) ELSE PLN.D1_PLAN END, 0) * PRICE AS D1_PLAN
             , NVL(CASE WHEN MAT.MAT_GRP_3 IN ('COB') THEN ROUND(SHP.SHP_TODAY/MAT.NET_DIE,0) ELSE SHP.SHP_TODAY END, 0) * PRICE AS SHP_TODAY 
             , NVL(CASE WHEN MAT.MAT_GRP_3 IN ('COB') THEN ROUND(SHP.SHP_WEEK/MAT.NET_DIE,0) ELSE SHP.SHP_WEEK END, 0) * PRICE AS SHP_WEEK 
             , NVL(STOCK,0) * PRICE AS STOCK, NVL(BG,0) * PRICE AS BG, NVL(SAW,0) * PRICE AS SAW, NVL(SP,0) * PRICE AS SP, NVL(SMT,0) * PRICE AS SMT, NVL(DA,0) * PRICE AS DA
             , NVL(S_DA1,0) * PRICE AS S_DA1, NVL(S_DA2,0) * PRICE AS S_DA2, NVL(S_DA3,0) * PRICE AS S_DA3, NVL(S_DA4,0) * PRICE AS S_DA4, NVL(S_DA5,0) * PRICE AS S_DA5
             , NVL(S_DA6,0) * PRICE AS S_DA6, NVL(S_DA7,0) * PRICE AS S_DA7, NVL(S_DA8,0) * PRICE AS S_DA8, NVL(S_DA9,0) * PRICE AS S_DA9
             , NVL(F_DA1,0) * PRICE AS F_DA1, NVL(F_DA2,0) * PRICE AS F_DA2, NVL(F_DA3,0) * PRICE AS F_DA3, NVL(F_DA4,0) * PRICE AS F_DA4, NVL(F_DA5,0) * PRICE AS F_DA5
             , NVL(F_DA6,0) * PRICE AS F_DA6, NVL(F_DA7,0) * PRICE AS F_DA7, NVL(F_DA8,0) * PRICE AS F_DA8, NVL(F_DA9,0) * PRICE AS F_DA9
             , NVL(WB,0) * PRICE AS WB, NVL(S_WB1,0) * PRICE AS S_WB1, NVL(S_WB2,0) * PRICE AS S_WB2, NVL(S_WB3,0) * PRICE AS S_WB3, NVL(S_WB4,0) * PRICE AS S_WB4
             , NVL(S_WB5,0) * PRICE AS S_WB5, NVL(S_WB6,0) * PRICE AS S_WB6, NVL(S_WB7,0) * PRICE AS S_WB7, NVL(S_WB8,0) * PRICE AS S_WB8, NVL(S_WB9,0) * PRICE AS S_WB9
             , NVL(F_WB1,0) * PRICE AS F_WB1, NVL(F_WB2,0) * PRICE AS F_WB2, NVL(F_WB3,0) * PRICE AS F_WB3, NVL(F_WB4,0) * PRICE AS F_WB4
             , NVL(F_WB5,0) * PRICE AS F_WB5, NVL(F_WB6,0) * PRICE AS F_WB6, NVL(F_WB7,0) * PRICE AS F_WB7, NVL(F_WB8,0) * PRICE AS F_WB8, NVL(F_WB9,0) * PRICE AS F_WB9
             , NVL(GATE,0) * PRICE AS GATE, NVL(F_GATE,0) * PRICE  AS F_GATE, NVL(MOLD,0) * PRICE AS MOLD, NVL(CURE,0) * PRICE AS CURE
             , NVL(MK,0) * PRICE AS MK, NVL(TRIM,0) * PRICE AS TRIM, NVL(TIN,0) * PRICE AS TIN, NVL(SBA,0) * PRICE AS SBA, NVL(SIG,0) * PRICE AS SIG
             , NVL(AVI,0) * PRICE AS AVI, NVL(VI,0) * PRICE AS VI, NVL(PVI,0) * PRICE AS PVI, NVL(QC_GATE,0) * PRICE AS QC_GATE, NVL(HMK3A,0) * PRICE AS HMK3A
             , NVL(CASE WHEN MAT.MAT_CMF_11 = 'JZH' THEN NVL(RCV.RCV_QTY,0)/MAT.COMP_CNT/2
                        WHEN MAT.MAT_CMF_11 IN ('DHL', 'DQZ', 'DRA', 'DQA', 'DND', 'DWG', 'DUT', 'HAU', 'HF8', 'HDM', 'HDR', 'HEN', 'HQA', 'HQC') THEN DECODE(MAT.MAT_GRP_5, '3rd', NVL(RCV.RCV_QTY,0)/MAT.COMP_CNT, 0)
                        WHEN MAT.MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND (MAT_ID LIKE 'SEKS%' OR MAT_ID LIKE 'SEKY%')) THEN DECODE(MAT.MAT_GRP_5, '2nd', NVL(RCV.RCV_QTY,0)/MAT.COMP_CNT, 0)
                        WHEN MAT.MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT.MAT_GRP_5 <> '-' THEN CASE WHEN MAT.MAT_GRP_5 IN ('1st','Merge') OR MAT.MAT_GRP_5 LIKE 'Middle%' THEN NVL(RCV.RCV_QTY,0)/MAT.COMP_CNT ELSE 0 END
                        WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN ROUND(RCV.RCV_QTY/NET_DIE,0)
                        ELSE NVL(RCV.RCV_QTY,0)/MAT.COMP_CNT
                   END,0) * PRICE AS RCV_QTY
             , NVL(MOV.OUT_WB,0) * PRICE AS OUT_WB
             , NVL(MOV.OUT_DA,0) * PRICE AS OUT_DA
             , NVL(MOV.OUT_DP,0) * PRICE AS OUT_DP
             , NVL(MOV.OUT_HMKA3,0) * PRICE AS OUT_HMKA3
             , NVL(MOV.OUT_CLOSE,0) * PRICE AS OUT_CLOSE
             , NVL(MOV.OUT_SIG,0) * PRICE AS OUT_SIG
             , NVL(MOV.OUT_MK,0) * PRICE AS OUT_MK
             , NVL(MOV.OUT_MOLD,0) * PRICE AS OUT_MOLD
             , NVL(MOV.OUT_WB9,0) * PRICE AS OUT_WB9
             , NVL(MOV.OUT_DA9,0) * PRICE AS OUT_DA9
             , NVL(MOV.OUT_WB8,0) * PRICE AS OUT_WB8
             , NVL(MOV.OUT_DA8,0) * PRICE AS OUT_DA8
             , NVL(MOV.OUT_WB7,0) * PRICE AS OUT_WB7
             , NVL(MOV.OUT_DA7,0) * PRICE AS OUT_DA7
             , NVL(MOV.OUT_WB6,0) * PRICE AS OUT_WB6
             , NVL(MOV.OUT_DA6,0) * PRICE AS OUT_DA6
             , NVL(MOV.OUT_WB5,0) * PRICE AS OUT_WB5
             , NVL(MOV.OUT_DA5,0) * PRICE AS OUT_DA5
             , NVL(MOV.OUT_WB4,0) * PRICE AS OUT_WB4
             , NVL(MOV.OUT_DA4,0) * PRICE AS OUT_DA4
             , NVL(MOV.OUT_WB3,0) * PRICE AS OUT_WB3
             , NVL(MOV.OUT_DA3,0) * PRICE AS OUT_DA3
             , NVL(MOV.OUT_WB2,0) * PRICE AS OUT_WB2
             , NVL(MOV.OUT_DA2,0) * PRICE AS OUT_DA2
             , NVL(MOV.OUT_WB1,0) * PRICE AS OUT_WB1
             , NVL(MOV.OUT_DA1,0) * PRICE AS OUT_DA1
             , NVL(MOV.OUT_DDS,0) * PRICE AS OUT_DDS
             , NVL(MOV.OUT_SAW,0) * PRICE AS OUT_SAW
             , NVL(MOV.OUT_BG,0) * PRICE AS OUT_BG
             , NVL(MOV.OUT_STEALTH,0) * PRICE AS OUT_STEALTH
             , NVL(MOV.OUT_PRI,0) * PRICE AS OUT_PRI
             , NVL(MOV.OUT_LAMI,0) * PRICE AS OUT_LAMI
             , NVL(MOV.OUT_STOCK,0) * PRICE AS OUT_STOCK
          FROM (
                SELECT A.MAT_ID, MAT_GRP_1, MAT_GRP_2, MAT_GRP_3, MAT_GRP_4, MAT_GRP_5
                     , MAT_GRP_6, MAT_GRP_7, MAT_GRP_8, MAT_GRP_9, MAT_GRP_10, MAT_CMF_10, MAT_CMF_11
                     , NET_DIE, COMP_CNT, HX_COMP_MIN, HX_COMP_MAX 
                     , CASE WHEN MAT_GRP_1 = 'SE' AND MAT_GRP_9 = 'MEMORY' THEN 'SEK_________-___' || SUBSTR(A.MAT_ID, -3) 
                            WHEN MAT_GRP_1 = 'HX' THEN MAT_CMF_10 
                            ELSE A.MAT_ID 
                       END CONV_MAT_ID 
                     , 1 AS PRICE
                  FROM VWIPMATDEF A
                 WHERE 1=1
                   AND A.FACTORY = 'HMVA2'
                   AND A.DELETE_FLAG = ' '
                   AND A.MAT_TYPE = 'FG' 
                   AND A.MAT_GRP_2 <> 'PW' 
               ) MAT
             , (
                SELECT MAT_ID 
                     , SUM(ORI_PLN) AS ORI_PLN 
                     , SUM(REV_PLN) AS REV_PLN 
                     , SUM(D0_PLAN) AS D0_PLAN 
                     , SUM(D1_PLAN) AS D1_PLAN 
                  FROM ( 
                        SELECT MAT_ID, SUM(PLAN_QTY_ASSY) AS ORI_PLN, SUM(RESV_FIELD1) AS REV_PLN, 0 AS D0_PLAN, 0 AS D1_PLAN
                          FROM (
                                SELECT MAT_ID, SUM(PLAN_QTY_ASSY) AS PLAN_QTY_ASSY, SUM(TO_NUMBER(DECODE(RESV_FIELD1,' ',0,RESV_FIELD1))) AS RESV_FIELD1
                                  FROM CWIPPLNMON 
                                 WHERE 1=1 
                                   AND FACTORY = 'HMVA2'
                                   AND PLAN_MONTH = '202004'
                                 GROUP BY MAT_ID 
                               ) 
                         GROUP BY MAT_ID
                        HAVING SUM(PLAN_QTY_ASSY + RESV_FIELD1) > 0
                         UNION ALL
                        SELECT MAT_ID, 0, 0
                             , SUM(CASE WHEN TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 7 THEN D0_QTY 
                                        WHEN TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 1 THEN D0_QTY + D1_QTY 
                                        WHEN TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 2 THEN D0_QTY + D1_QTY + D2_QTY 
                                        WHEN TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 3 THEN D0_QTY + D1_QTY + D2_QTY + D3_QTY 
                                        WHEN TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 4 THEN D0_QTY + D1_QTY + D2_QTY + D3_QTY + D4_QTY 
                                        WHEN TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 5 THEN D0_QTY + D1_QTY + D2_QTY + D3_QTY + D4_QTY + D5_QTY 
                                        WHEN TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 6 THEN D0_QTY + D1_QTY + D2_QTY + D3_QTY + D4_QTY + D5_QTY + D6_QTY 
                                        ELSE 0 
                                   END) AS D0_PLAN 
                             , SUM(CASE WHEN TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 7 THEN D1_QTY 
                                        WHEN TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 1 THEN D2_QTY 
                                        WHEN TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 2 THEN D3_QTY 
                                        WHEN TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 3 THEN D4_QTY 
                                        WHEN TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 4 THEN D5_QTY 
                                        WHEN TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 5 THEN D6_QTY 
                                        WHEN TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 6 THEN D7_QTY 
                                        ELSE 0 
                                   END) AS D1_PLAN 
                          FROM (
                                SELECT FACTORY, MAT_ID 
                                     , SUM(DECODE(PLAN_WEEK, '202015', D0_QTY, 0)) AS D0_QTY  
                                     , SUM(DECODE(PLAN_WEEK, '202015', D1_QTY, 0)) AS D1_QTY  
                                     , SUM(DECODE(PLAN_WEEK, '202015', D2_QTY, 0)) AS D2_QTY  
                                     , SUM(DECODE(PLAN_WEEK, '202015', D3_QTY, 0)) AS D3_QTY  
                                     , SUM(DECODE(PLAN_WEEK, '202015', D4_QTY, 0)) AS D4_QTY  
                                     , SUM(DECODE(PLAN_WEEK, '202015', D5_QTY, 0)) AS D5_QTY  
                                     , SUM(DECODE(PLAN_WEEK, '202015', D6_QTY, 0)) AS D6_QTY  
                                     , SUM(DECODE(PLAN_WEEK, '202016', D0_QTY, 0)) AS D7_QTY  
                                     , SUM(DECODE(PLAN_WEEK, '202016', D1_QTY, 0)) AS D8_QTY  
                                     , SUM(DECODE(PLAN_WEEK, '202016', D2_QTY, 0)) AS D9_QTY  
                                     , SUM(DECODE(PLAN_WEEK, '202016', D3_QTY, 0)) AS D10_QTY  
                                     , SUM(DECODE(PLAN_WEEK, '202016', D4_QTY, 0)) AS D11_QTY  
                                     , SUM(DECODE(PLAN_WEEK, '202016', D5_QTY, 0)) AS D12_QTY  
                                     , SUM(DECODE(PLAN_WEEK, '202016', D6_QTY, 0)) AS D13_QTY  
                                     , SUM(DECODE(PLAN_WEEK, '202015', WW_QTY, 0)) AS W1_QTY  
                                     , SUM(DECODE(PLAN_WEEK, '202016', WW_QTY, 0)) AS W2_QTY  
                                  FROM RWIPPLNWEK  
                                 WHERE 1=1  
                                   AND FACTORY = 'HMVA2'  
                                   AND GUBUN = '3'  
                                   AND PLAN_WEEK IN ('202015','202016') 
                                 GROUP BY FACTORY, MAT_ID  
                               )  
                         GROUP BY MAT_ID  
                       ) 
                 GROUP BY MAT_ID  
               ) PLN
             , (
                SELECT MAT_ID
                     , SUM(CASE WHEN WORK_DATE BETWEEN '20200401' AND '20200409' THEN SHP_QTY_1 END) AS SHP_TTL 
                     , SUM(DECODE(WORK_DATE, '20200409', SHP_QTY_1, 0)) AS SHP_TODAY
                     , SUM(CASE WHEN WORK_DATE BETWEEN '20200404' AND '20200408' THEN SHP_QTY_1 END) AS SHP_WEEK 
                  FROM VSUMWIPOUT
                 WHERE 1=1
                   AND WORK_DATE BETWEEN '20200401' AND '20200409' 
                   AND FACTORY = 'HMVA2' 
                   AND LOT_TYPE = 'W' 
                   AND CM_KEY_2 = 'PROD' 
                   AND CM_KEY_3 LIKE 'P%'
                   AND MAT_ID NOT LIKE 'HX%'
                 GROUP BY MAT_ID 
                 UNION ALL 
                SELECT MAT_ID
                     , SUM(CASE WHEN WORK_DATE BETWEEN '20200401' AND '20200409' THEN SHP_QTY_1 END) AS SHP_TTL 
                     , SUM(DECODE(WORK_DATE, '20200409', SHP_QTY_1, 0)) AS SHP_TODAY
                     , SUM(CASE WHEN WORK_DATE BETWEEN '20200404' AND '20200408' THEN SHP_QTY_1 END) AS SHP_WEEK 
                  FROM VSUMWIPOUT_06
                 WHERE 1=1
                   AND WORK_DATE BETWEEN '20200401' AND '20200409' 
                   AND FACTORY = 'HMVA2' 
                   AND LOT_TYPE = 'W' 
                   AND CM_KEY_2 = 'PROD' 
                   AND CM_KEY_3 LIKE 'P%'
                   AND MAT_ID LIKE 'HX%'
                 GROUP BY MAT_ID 
               ) SHP
             , (
                SELECT MAT_ID, SUM(RCV_QTY_1) AS RCV_QTY
                  FROM VSUMWIPRCV
                 WHERE FACTORY = 'HMVA2'
                   AND WORK_DATE = '20200409'
                   AND LOT_TYPE = 'W'
                   AND CM_KEY_3 LIKE 'P%' 
                 GROUP BY MAT_ID
               ) RCV
             , (
                SELECT MAT_ID
                     , SUM(QTY) AS WIP_TTL
                     , SUM(DECODE(OPER_GRP_1, 'HMK2A', QTY, 0)) AS STOCK
                     , SUM(DECODE(OPER_GRP_1, 'B/G', QTY, 0)) AS BG
                     , SUM(DECODE(OPER_GRP_1, 'SAW', QTY, 0)) AS SAW
                     , SUM(DECODE(OPER_GRP_1, 'S/P', QTY, 0)) AS SP 
                     , SUM(DECODE(OPER_GRP_1, 'SMT', QTY, 0)) AS SMT 
                     , SUM(DECODE(OPER_GRP_1, 'D/A', QTY, 0)) AS DA
                     , SUM(CASE WHEN OPER IN ('A0250', 'A0305', 'A0306', 'A0310', 'A0333', 'A0340', 'A0400', 'A0401', 'A0500', 'A0501', 'A0530', 'A0531') THEN QTY ELSE 0 END) AS S_DA1
                     , SUM(CASE WHEN OPER IN ('A0402', 'A0502', 'A0532') THEN QTY ELSE 0 END) AS S_DA2
                     , SUM(CASE WHEN OPER IN ('A0403', 'A0503', 'A0533') THEN QTY ELSE 0 END) AS S_DA3
                     , SUM(CASE WHEN OPER IN ('A0404', 'A0504', 'A0534') THEN QTY ELSE 0 END) AS S_DA4
                     , SUM(CASE WHEN OPER IN ('A0405', 'A0505', 'A0535') THEN QTY ELSE 0 END) AS S_DA5
                     , SUM(CASE WHEN OPER IN ('A0406', 'A0506', 'A0536') THEN QTY ELSE 0 END) AS S_DA6
                     , SUM(CASE WHEN OPER IN ('A0407', 'A0507', 'A0537') THEN QTY ELSE 0 END) AS S_DA7
                     , SUM(CASE WHEN OPER IN ('A0408', 'A0508', 'A0538') THEN QTY ELSE 0 END) AS S_DA8
                     , SUM(CASE WHEN OPER IN ('A0409', 'A0509', 'A0539') THEN QTY ELSE 0 END) AS S_DA9
                     , SUM(CASE WHEN OPER IN ('A0250','A0333','A0340','A0400', 'A0401') THEN QTY ELSE 0 END) AS F_DA1
                     , SUM(CASE WHEN OPER IN ('A0402') THEN QTY 
                                WHEN OPER = 'A0801' AND MAT_GRP_1 = 'SE' AND MAT_GRP_5 <> 'Merge' THEN QTY 
                                WHEN OPER = 'A0801' AND MAT_GRP_1 <> 'SE' AND SUBSTR(MAT_GRP_4,-1) <> SUBSTR(OPER, -1) THEN QTY 
                                ELSE 0 END) AS F_DA2 
                     , SUM(CASE WHEN OPER IN ('A0403') THEN QTY 
                                WHEN OPER = 'A0802' AND MAT_GRP_1 = 'SE' AND MAT_GRP_5 <> 'Merge' THEN QTY 
                                WHEN OPER = 'A0802' AND MAT_GRP_1 <> 'SE' AND SUBSTR(MAT_GRP_4,-1) <> SUBSTR(OPER, -1) THEN QTY 
                                ELSE 0 END) AS F_DA3 
                     , SUM(CASE WHEN OPER IN ('A0404') THEN QTY 
                                WHEN OPER = 'A0803' AND MAT_GRP_1 = 'SE' AND MAT_GRP_5 <> 'Merge' THEN QTY 
                                WHEN OPER = 'A0803' AND MAT_GRP_1 <> 'SE' AND SUBSTR(MAT_GRP_4,-1) <> SUBSTR(OPER, -1) THEN QTY 
                                ELSE 0 END) AS F_DA4 
                     , SUM(CASE WHEN OPER IN ('A0405') THEN QTY 
                                WHEN OPER = 'A0804' AND MAT_GRP_1 = 'SE' AND MAT_GRP_5 <> 'Merge' THEN QTY 
                                WHEN OPER = 'A0804' AND MAT_GRP_1 <> 'SE' AND SUBSTR(MAT_GRP_4,-1) <> SUBSTR(OPER, -1) THEN QTY 
                                ELSE 0 END) AS F_DA5 
                     , SUM(CASE WHEN OPER IN ('A0406') THEN QTY 
                                WHEN OPER = 'A0805' AND MAT_GRP_1 = 'SE' AND MAT_GRP_5 <> 'Merge' THEN QTY 
                                WHEN OPER = 'A0805' AND MAT_GRP_1 <> 'SE' AND SUBSTR(MAT_GRP_4,-1) <> SUBSTR(OPER, -1) THEN QTY 
                                ELSE 0 END) AS F_DA6 
                     , SUM(CASE WHEN OPER IN ('A0407') THEN QTY 
                                WHEN OPER = 'A0806' AND MAT_GRP_1 = 'SE' AND MAT_GRP_5 <> 'Merge' THEN QTY 
                                WHEN OPER = 'A0806' AND MAT_GRP_1 <> 'SE' AND SUBSTR(MAT_GRP_4,-1) <> SUBSTR(OPER, -1) THEN QTY 
                                ELSE 0 END) AS F_DA7 
                     , SUM(CASE WHEN OPER IN ('A0408') THEN QTY 
                                WHEN OPER = 'A0807' AND MAT_GRP_1 = 'SE' AND MAT_GRP_5 <> 'Merge' THEN QTY 
                                WHEN OPER = 'A0807' AND MAT_GRP_1 <> 'SE' AND SUBSTR(MAT_GRP_4,-1) <> SUBSTR(OPER, -1) THEN QTY 
                                ELSE 0 END) AS F_DA8 
                     , SUM(CASE WHEN OPER IN ('A0409') THEN QTY 
                                WHEN OPER = 'A0808' AND MAT_GRP_1 = 'SE' AND MAT_GRP_5 <> 'Merge' THEN QTY 
                                WHEN OPER = 'A0808' AND MAT_GRP_1 <> 'SE' AND SUBSTR(MAT_GRP_4,-1) <> SUBSTR(OPER, -1) THEN QTY 
                                ELSE 0 END) AS F_DA9 
                     , SUM(DECODE(OPER_GRP_1, 'W/B', QTY, 0)) AS WB
                     , SUM(CASE WHEN OPER IN ('A0550', 'A0551', 'A0600','A0601', 'A0800', 'A0801') THEN QTY ELSE 0 END) AS S_WB1
                     , SUM(CASE WHEN OPER IN ('A0552', 'A0602', 'A0802') THEN QTY ELSE 0 END) AS S_WB2
                     , SUM(CASE WHEN OPER IN ('A0553', 'A0603', 'A0803') THEN QTY ELSE 0 END) AS S_WB3
                     , SUM(CASE WHEN OPER IN ('A0554', 'A0604', 'A0804') THEN QTY ELSE 0 END) AS S_WB4
                     , SUM(CASE WHEN OPER IN ('A0555', 'A0605', 'A0805') THEN QTY ELSE 0 END) AS S_WB5
                     , SUM(CASE WHEN OPER IN ('A0556', 'A0606', 'A0806') THEN QTY ELSE 0 END) AS S_WB6
                     , SUM(CASE WHEN OPER IN ('A0557', 'A0607', 'A0807') THEN QTY ELSE 0 END) AS S_WB7
                     , SUM(CASE WHEN OPER IN ('A0558', 'A0608', 'A0808') THEN QTY ELSE 0 END) AS S_WB8
                     , SUM(CASE WHEN OPER IN ('A0559', 'A0609', 'A0809') THEN QTY ELSE 0 END) AS S_WB9
                     , SUM(CASE WHEN OPER IN ('A0550', 'A0551', 'A0600','A0601', 'A0500', 'A0501', 'A0530', 'A0531') THEN QTY ELSE 0 END) AS F_WB1
                     , SUM(CASE WHEN OPER IN ('A0552', 'A0602', 'A0502', 'A0532') THEN QTY ELSE 0 END) AS F_WB2
                     , SUM(CASE WHEN OPER IN ('A0553', 'A0603', 'A0503', 'A0533') THEN QTY ELSE 0 END) AS F_WB3
                     , SUM(CASE WHEN OPER IN ('A0554', 'A0604', 'A0504', 'A0534') THEN QTY ELSE 0 END) AS F_WB4
                     , SUM(CASE WHEN OPER IN ('A0555', 'A0605', 'A0505', 'A0535') THEN QTY ELSE 0 END) AS F_WB5
                     , SUM(CASE WHEN OPER IN ('A0556', 'A0606', 'A0506', 'A0536') THEN QTY ELSE 0 END) AS F_WB6
                     , SUM(CASE WHEN OPER IN ('A0557', 'A0607', 'A0507', 'A0537') THEN QTY ELSE 0 END) AS F_WB7
                     , SUM(CASE WHEN OPER IN ('A0558', 'A0608', 'A0508', 'A0538') THEN QTY ELSE 0 END) AS F_WB8
                     , SUM(CASE WHEN OPER IN ('A0559', 'A0609', 'A0509', 'A0539') THEN QTY ELSE 0 END) AS F_WB9
                     , SUM(DECODE(OPER_GRP_1, 'GATE', QTY, 0)) AS GATE
                     , SUM(CASE WHEN OPER_GRP_1 = 'GATE' AND MAT_GRP_5 = '-' THEN QTY 
                                WHEN OPER_GRP_1 = 'GATE' AND MAT_GRP_1 = 'SE' AND MAT_GRP_5 = 'Merge' THEN QTY
                                WHEN OPER_GRP_1 = 'GATE' AND MAT_GRP_1 <> 'SE' AND SUBSTR(MAT_GRP_4,-1) = SUBSTR(OPER, -1) THEN QTY  
                                ELSE 0 END) AS F_GATE 
                     , SUM(DECODE(OPER_GRP_1, 'MOLD', QTY, 0)) AS MOLD
                     , SUM(DECODE(OPER_GRP_1, 'CURE', QTY, 0)) AS CURE
                     , SUM(DECODE(OPER_GRP_1, 'M/K', QTY, 0)) AS MK
                     , SUM(DECODE(OPER_GRP_1, 'TRIM', QTY, 0)) AS TRIM
                     , SUM(DECODE(OPER_GRP_1, 'TIN', QTY, 0)) AS TIN
                     , SUM(DECODE(OPER_GRP_1, 'S/B/A', QTY, 0)) AS SBA
                     , SUM(DECODE(OPER_GRP_1, 'SIG', QTY, 0)) AS SIG
                     , SUM(DECODE(OPER_GRP_1, 'AVI', QTY, 0)) AS AVI
                     , SUM(DECODE(OPER_GRP_1, 'V/I', QTY, 0)) AS VI
                     , SUM(CASE WHEN OPER IN ('A2030', 'A2050') THEN QTY ELSE 0 END) AS PVI
                     , SUM(DECODE(OPER, 'A2100', QTY, 0)) AS QC_GATE
                     , SUM(DECODE(OPER_GRP_1, 'HMK3A', QTY, 0)) AS HMK3A
                  FROM (
                        SELECT MAT_ID, OPER, OPER_GRP_1, MAT_GRP_1, MAT_GRP_4, MAT_GRP_5
                             , CASE WHEN HX_COMP_MIN IS NOT NULL
                                         THEN (CASE WHEN HX_COMP_MIN <> HX_COMP_MAX AND OPER > HX_COMP_MIN AND OPER <= HX_COMP_MAX THEN QTY_1 / NVL(COMP_CNT / 2,1)
                                                    WHEN OPER <= HX_COMP_MAX THEN QTY_1 / NVL(COMP_CNT,1)
                                                    ELSE QTY_1 END)
                                    WHEN OPER <= 'A0395' THEN QTY_1 / NVL(COMP_CNT,1) 
                                    ELSE QTY_1 
                               END QTY 
                          FROM (
                                SELECT A.MAT_ID, B.OPER, B.OPER_GRP_1, C.MAT_GRP_1, C.MAT_GRP_4, C.MAT_GRP_5
                                     , CASE WHEN MAT_CMF_11 IN ('DHL', 'DQZ', 'DRA', 'DQA', 'DND', 'DWG', 'DUT', 'HAU', 'HF8', 'HDM', 'HDR', 'HEN', 'HQA', 'HQC') THEN (CASE WHEN MAT_GRP_5 IN ('3rd','Merge') THEN QTY_1
                                                                               WHEN MAT_GRP_5 LIKE 'Middle%' AND MAT_GRP_5 <> 'Middle' THEN QTY_1
                                                                               ELSE 0 END)
                                            WHEN MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND (MAT_ID LIKE 'SEKS%' OR MAT_ID LIKE 'SEKY%')) THEN CASE WHEN MAT_GRP_5 IN ('2nd','Merge') OR MAT_GRP_5 LIKE 'Middle%' THEN QTY_1 ELSE 0 END
                                            WHEN MAT_GRP_1 = 'HX' AND MESMGR.F_GET_ATTR_VALUE@RPTTOMES(A.MAT_ID, 'MAT_ETC', 'HX_VERSION') = 'A-376' THEN CASE WHEN MAT_GRP_5 IN ('5th','Merge') THEN QTY_1 ELSE 0 END
                                            WHEN MAT_GRP_1 = 'HX' AND MESMGR.F_GET_ATTR_VALUE@RPTTOMES(A.MAT_ID, 'MAT_ETC', 'HX_VERSION') IN ('A-445', 'A-525') THEN CASE WHEN MAT_GRP_5 IN ('6th','Merge') THEN QTY_1 ELSE 0 END
                                            WHEN MAT_GRP_1 = 'HX' AND MESMGR.F_GET_ATTR_VALUE@RPTTOMES(A.MAT_ID, 'MAT_ETC', 'HX_VERSION') = 'A-524' THEN CASE WHEN MAT_GRP_5 IN ('7th','Merge') THEN QTY_1 ELSE 0 END
                                            WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN CASE WHEN MAT_GRP_5 IN ('1st','Merge') OR MAT_GRP_5 LIKE 'Middle%' THEN QTY_1 ELSE 0 END
                                            WHEN MAT_GRP_3 IN ('COB', 'BGN') THEN ROUND(QTY_1/C.NET_DIE,0)
                                            ELSE QTY_1
                                       END AS QTY_1
                                     , C.COMP_CNT, C.HX_COMP_MIN, C.HX_COMP_MAX 
                                  FROM RWIPLOTSTS A  
                                     , MWIPOPRDEF B  
                                     , VWIPMATDEF C
                                 WHERE 1 = 1 
                                   AND A.FACTORY = B.FACTORY
                                   AND A.FACTORY = C.FACTORY
                                   AND A.OPER = B.OPER
                                   AND A.MAT_ID = C.MAT_ID
                                   AND A.FACTORY = 'HMVA2'  
                                   AND A.LOT_TYPE = 'W' 
                                   AND A.LOT_CMF_5 LIKE 'P%' 
                                   AND A.LOT_DEL_FLAG = ' ' 
                                   AND C.MAT_GRP_2 <> '-'
                                   AND C.DELETE_FLAG = ' ' 
                                   AND A.HOLD_CODE NOT IN ('H71','H54')
                               )
                       )
                 GROUP BY MAT_ID
               ) WIP
             , (
                SELECT MAT_ID
                     , SUM(CASE WHEN OPER IN ('A0200', 'A0230') THEN QTY ELSE 0 END) AS OUT_DP
                     , SUM(CASE WHEN OPER LIKE 'A04%' THEN (CASE WHEN MAT_GRP_1 <> 'SE' AND MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' 
                                                                      THEN DECODE(SUBSTR(MAT_GRP_4,-1), SUBSTR(OPER, -1), QTY, 0)
                                                                 ELSE QTY END)
                                WHEN OPER = 'A0333' THEN QTY
                                ELSE 0
                           END) AS OUT_DA
                     , SUM(CASE WHEN OPER LIKE 'A06%' THEN (CASE WHEN MAT_GRP_1 <> 'SE' AND MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' 
                                                                      THEN DECODE(SUBSTR(MAT_GRP_4,-1), SUBSTR(OPER, -1), QTY, 0)
                                                                 ELSE QTY END)
                                 ELSE 0
                           END) AS OUT_WB
                     , SUM(CASE WHEN OPER = 'A0000' THEN QTY ELSE 0 END) AS OUT_STOCK
                     , SUM(CASE WHEN OPER = 'A0020' THEN QTY ELSE 0 END) AS OUT_LAMI
                     , SUM(CASE WHEN OPER = 'A0030' THEN QTY ELSE 0 END) AS OUT_PRI
                     , SUM(CASE WHEN OPER = 'A0033' THEN QTY ELSE 0 END) AS OUT_STEALTH
                     , SUM(CASE WHEN OPER = 'A0040' THEN QTY ELSE 0 END) AS OUT_BG
                     , SUM(CASE WHEN OPER = 'A0200' THEN QTY ELSE 0 END) AS OUT_SAW
                     , SUM(CASE WHEN OPER = 'A0230' THEN QTY ELSE 0 END) AS OUT_DDS
                     , SUM(CASE WHEN OPER IN ('A0400', 'A0401', 'A0333') THEN QTY ELSE 0 END) AS OUT_DA1
                     , SUM(CASE WHEN OPER IN ('A0600', 'A0601') THEN QTY ELSE 0 END) AS OUT_WB1
                     , SUM(CASE WHEN OPER = 'A0402' THEN QTY ELSE 0 END) AS OUT_DA2
                     , SUM(CASE WHEN OPER = 'A0602' THEN QTY ELSE 0 END) AS OUT_WB2
                     , SUM(CASE WHEN OPER = 'A0403' THEN QTY ELSE 0 END) AS OUT_DA3
                     , SUM(CASE WHEN OPER = 'A0603' THEN QTY ELSE 0 END) AS OUT_WB3
                     , SUM(CASE WHEN OPER = 'A0404' THEN QTY ELSE 0 END) AS OUT_DA4
                     , SUM(CASE WHEN OPER = 'A0604' THEN QTY ELSE 0 END) AS OUT_WB4
                     , SUM(CASE WHEN OPER = 'A0405' THEN QTY ELSE 0 END) AS OUT_DA5
                     , SUM(CASE WHEN OPER = 'A0605' THEN QTY ELSE 0 END) AS OUT_WB5
                     , SUM(CASE WHEN OPER = 'A0406' THEN QTY ELSE 0 END) AS OUT_DA6
                     , SUM(CASE WHEN OPER = 'A0606' THEN QTY ELSE 0 END) AS OUT_WB6
                     , SUM(CASE WHEN OPER = 'A0407' THEN QTY ELSE 0 END) AS OUT_DA7
                     , SUM(CASE WHEN OPER = 'A0607' THEN QTY ELSE 0 END) AS OUT_WB7
                     , SUM(CASE WHEN OPER = 'A0408' THEN QTY ELSE 0 END) AS OUT_DA8
                     , SUM(CASE WHEN OPER = 'A0608' THEN QTY ELSE 0 END) AS OUT_WB8
                     , SUM(CASE WHEN OPER = 'A0409' THEN QTY ELSE 0 END) AS OUT_DA9
                     , SUM(CASE WHEN OPER = 'A0609' THEN QTY ELSE 0 END) AS OUT_WB9
                     , SUM(CASE WHEN OPER = 'A1000' THEN QTY ELSE 0 END) AS OUT_MOLD 
                     , SUM(CASE WHEN OPER IN ('A1150', 'A1500') THEN QTY ELSE 0 END) AS OUT_MK
                     , SUM(CASE WHEN OPER IN ('A1750', 'A1800', 'A1900') THEN QTY ELSE 0 END) AS OUT_SIG
                     , SUM(CASE WHEN OPER = 'A2100' THEN QTY ELSE 0 END) AS OUT_CLOSE 
                     , SUM(CASE WHEN OPER = 'AZ010' THEN QTY ELSE 0 END) AS OUT_HMKA3 
                  FROM (    
                        SELECT MAT_ID, OPER, MAT_GRP_1, MAT_GRP_4, MAT_GRP_5
                             , CASE WHEN HX_COMP_MIN IS NOT NULL
                                         THEN (CASE WHEN HX_COMP_MIN <> HX_COMP_MAX AND OPER > HX_COMP_MIN AND OPER <= HX_COMP_MAX THEN QTY_1 / NVL(COMP_CNT / 2,1)
                                                    WHEN OPER <= HX_COMP_MAX THEN QTY_1 / NVL(COMP_CNT,1)
                                                    ELSE QTY_1 END)
                                    WHEN OPER <= 'A0395' THEN QTY_1 / NVL(COMP_CNT,1) 
                                    ELSE QTY_1 
                               END QTY
                          FROM (
                                SELECT MAT_ID, OPER, MAT_GRP_1, MAT_GRP_4, MAT_GRP_5, MAT_GRP_9, MAT_CMF_11
                                     , CASE WHEN MAT_CMF_11 IN ('DHL', 'DQZ', 'DRA', 'DQA', 'DND', 'DWG', 'DUT', 'HAU', 'HF8', 'HDM', 'HDR', 'HEN', 'HQA', 'HQC') THEN (CASE WHEN MAT_GRP_5 IN ('3rd','Merge') THEN END_QTY ELSE 0 END)
                                            WHEN MAT_ID LIKE 'SEK%' AND MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND (MAT_ID LIKE 'SEKS%' OR MAT_ID LIKE 'SEKY%'))
                                                 THEN (CASE WHEN MAT_GRP_5 IN ('2nd','Merge') THEN END_QTY ELSE 0 END)
                                            WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-'
                                                 THEN (CASE WHEN MAT_GRP_5 IN ('1st','Merge') THEN END_QTY ELSE 0 END)
                                            WHEN MAT_GRP_3 IN ('COB', 'BGN') THEN ROUND(END_QTY/NET_DIE,0)
                                            ELSE END_QTY
                                       END QTY_1 
                                     , COMP_CNT, HX_COMP_MIN, HX_COMP_MAX 
                                  FROM ( 
                                        SELECT A.OPER
                                             , CASE WHEN OPER = 'AZ010' THEN S1_MOVE_QTY_1+S2_MOVE_QTY_1+S3_MOVE_QTY_1
                                                    ELSE S1_END_QTY_1+S2_END_QTY_1+S3_END_QTY_1
                                               END END_QTY
                                             , B.*
                                          FROM RSUMWIPMOV A
                                             , VWIPMATDEF B
                                         WHERE 1=1
                                           AND A.FACTORY = B.FACTORY
                                           AND A.MAT_ID = B.MAT_ID
                                           AND A.FACTORY = 'HMVA2'
                                           AND A.WORK_DATE = '20200409'
                                           AND A.LOT_TYPE = 'W'
                                           AND A.CM_KEY_3 LIKE 'P%'   
                                           AND B.MAT_GRP_5 NOT LIKE 'Middle%'
                                           AND REGEXP_LIKE(A.OPER, 'A0000|A0200|A0230|A0333|A040*|A060*|A1000|A2100')
                                           AND ((A.OPER >= 'A0400' AND B.MAT_GRP_5 IN ('-', 'Merge')) OR (A.OPER < 'A0400'))
                                       ) 
                               )
                       )
                 GROUP BY MAT_ID
               ) MOV
         WHERE 1=1
           AND MAT.MAT_ID = PLN.MAT_ID(+)
           AND MAT.MAT_ID = SHP.MAT_ID(+)
           AND MAT.MAT_ID = RCV.MAT_ID(+)
           AND MAT.MAT_ID = WIP.MAT_ID(+)
           AND MAT.MAT_ID = MOV.MAT_ID(+)
           AND NVL(ORI_PLN,0)+NVL(REV_PLN,0)+NVL(SHP_TTL,0)+NVL(RCV_QTY,0)+NVL(WIP_TTL,0)+NVL(D0_PLAN,0)+NVL(D1_PLAN,0)+NVL(SHP_WEEK,0) <> 0
       ) A
 GROUP BY A.MAT_GRP_1, A.MAT_GRP_9, A.MAT_GRP_10,  ' ',  ' ',  ' ',  ' '
 ORDER BY DECODE(A.MAT_GRP_1, 'SE', 1, 'HX', 2, 'IM', 3, 'FC', 4, 'IG', 5,6), CUSTOMER, MAT_GRP_9, MAT_GRP_10

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
SELECT DISTINCT LPAD(PLAN_WEEK,2,'0') AS PLAN_WEEK 
  FROM MWIPCALDEF 
 WHERE 1=1 
   AND CALENDAR_ID = 'OTD' 
   AND SYS_YEAR = '2020' 
   AND SYS_MONTH = '04' 
   AND SYS_DAY = '09' 
 ORDER BY PLAN_WEEK 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE) 
  FROM MWIPCALDEF 
 WHERE 1=1 
   AND CALENDAR_ID='OTD' 
   AND PLAN_YEAR='2020' 
   AND PLAN_WEEK='15' 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT DISTINCT PLAN_YEAR|| LPAD(PLAN_WEEK,2,'0') 
  FROM MWIPCALDEF 
 WHERE CALENDAR_ID = 'OTD' 
   AND SYS_YEAR || LPAD(SYS_MONTH,2,'0') IN ('202004', '202005' ,'202006') 
   AND SYS_DATE >= '20200409' 
 ORDER BY 1 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE) AS START_DAY 
     , MAX(SYS_DATE) AS END_DAY 
     , PLAN_YEAR||DECODE(LENGTH(PLAN_WEEK), 1, '0'||PLAN_WEEK, PLAN_WEEK) AS WEEK
  FROM MWIPCALDEF 
 WHERE CALENDAR_ID = 'OTD'
   AND (PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) IN ( 
                                                SELECT WW
                                                  FROM (
                                                        SELECT WW
                                                             , ROW_NUMBER() OVER(ORDER BY WW) AS RNK
                                                          FROM (
                                                                SELECT DISTINCT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW
                                                                  FROM MWIPCALDEF
                                                                 WHERE CALENDAR_ID = 'OTD'
                                                                   AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') >= (
                                                                                                              SELECT MAX(PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) AS WW
                                                                                                                FROM MWIPCALDEF
                                                                                                               WHERE CALENDAR_ID = 'OTD'
                                                                                                                 AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') < (SELECT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW FROM MWIPCALDEF WHERE CALENDAR_ID = 'OTD' AND SYS_DATE = '20200409')
                                                                                                                 AND SYS_DATE >= TO_CHAR(TO_DATE('20200409', 'YYYYMMDD')-14, 'YYYYMMDD')
                                                                                                             )
                                                               ) 
                                                       )
                                                 WHERE RNK <= 7
                                               ) 
 GROUP BY PLAN_YEAR, PLAN_WEEK 
 ORDER BY PLAN_YEAR, PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT LANGUAGE_2 FROM RWEBFUNDEF WHERE FUNC_NAME = 'MAT070503'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT DISTINCT TO_DATE(UPDATE_TIME,'YYYY-MM-DD HH24MISS') FROM RSUMWIPMAT
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT DISTINCT LPAD(PLAN_WEEK,2,'0') AS PLAN_WEEK 
  FROM MWIPCALDEF 
 WHERE 1=1 
   AND CALENDAR_ID = 'OTD' 
   AND SYS_YEAR = '2020' 
   AND SYS_MONTH = '04' 
   AND SYS_DAY = '09' 
 ORDER BY PLAN_WEEK 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE) 
  FROM MWIPCALDEF 
 WHERE 1=1 
   AND CALENDAR_ID='OTD' 
   AND PLAN_YEAR='2020' 
   AND PLAN_WEEK='15' 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT DISTINCT PLAN_YEAR|| LPAD(PLAN_WEEK,2,'0') 
  FROM MWIPCALDEF 
 WHERE CALENDAR_ID = 'OTD' 
   AND SYS_YEAR || LPAD(SYS_MONTH,2,'0') IN ('202004', '202005' ,'202006') 
   AND SYS_DATE >= '20200409' 
 ORDER BY 1 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE) AS START_DAY 
     , MAX(SYS_DATE) AS END_DAY 
     , PLAN_YEAR||DECODE(LENGTH(PLAN_WEEK), 1, '0'||PLAN_WEEK, PLAN_WEEK) AS WEEK
  FROM MWIPCALDEF 
 WHERE CALENDAR_ID = 'OTD'
   AND (PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) IN ( 
                                                SELECT WW
                                                  FROM (
                                                        SELECT WW
                                                             , ROW_NUMBER() OVER(ORDER BY WW) AS RNK
                                                          FROM (
                                                                SELECT DISTINCT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW
                                                                  FROM MWIPCALDEF
                                                                 WHERE CALENDAR_ID = 'OTD'
                                                                   AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') >= (
                                                                                                              SELECT MAX(PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) AS WW
                                                                                                                FROM MWIPCALDEF
                                                                                                               WHERE CALENDAR_ID = 'OTD'
                                                                                                                 AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') < (SELECT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW FROM MWIPCALDEF WHERE CALENDAR_ID = 'OTD' AND SYS_DATE = '20200409')
                                                                                                                 AND SYS_DATE >= TO_CHAR(TO_DATE('20200409', 'YYYYMMDD')-14, 'YYYYMMDD')
                                                                                                             )
                                                               ) 
                                                       )
                                                 WHERE RNK <= 7
                                               ) 
 GROUP BY PLAN_YEAR, PLAN_WEEK 
 ORDER BY PLAN_YEAR, PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
(SELECT TO_CHAR(LAST_DAY(TO_DATE('202003', 'YYYYMM')),'YYYYMMDD') FROM DUAL)
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE-1) 
  FROM MWIPCALDEF 
 WHERE 1=1
   AND CALENDAR_ID='SE'
   AND PLAN_YEAR='2020'
   AND PLAN_WEEK=(
                  SELECT PLAN_WEEK 
                    FROM MWIPCALDEF 
                   WHERE 1=1 
                     AND CALENDAR_ID='SE' 
                     AND SYS_DATE=TO_CHAR(TO_DATE('20200409','YYYYMMDD'),'YYYYMMDD')
                 )

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT  ' ', (SELECT DATA_1 FROM MGCMTBLDAT@RPTTOMES WHERE FACTORY = 'HMVA2' AND TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = CUSTOMER) AS CUSTOMER, FAMILY, PACKAGE,  ' ',  ' ', LD_COUNT, PKG_CODE,  ' ', MATCODE,  ' ',  ' ',  ' ', OPER 
     , RTRIM(TO_CHAR(USAGE, 'FM9990D9999'), '.') AS USAGE 
     , ROUND(WIP_STOCK/1000,0) AS WIP_STOCK 
     , ROUND(((MAT_TTL/USAGE*1000)-REV_QTY)/1000,0) AS CMM 
     , ROUND((((MAT_TTL/USAGE*1000)-REV_QTY)-WIP_STOCK)/1000,0) AS "재공대비과부족" 
     , CASE WHEN ((MAT_TTL/USAGE*1000)-REV_QTY)-WIP_STOCK<0 THEN ROUND((ABS(((MAT_TTL/USAGE*1000)-REV_QTY)-WIP_STOCK)*USAGE/1000)/1000,1) ELSE 0 END "원부자재입고필요" 
     , ROUND(SOP_PLN_WEEK/1000,0) AS SOP_PLN
     , ROUND(ASSY_WEEK/1000,0) AS ASSY_WEEK 
     , ROUND((SOP_PLN_WEEK-ASSY_WEEK)/1000,1) AS "공정기준잔량" 
     , ROUND(((SOP_PLN_WEEK-ASSY_WEEK)*USAGE/1000)/1000,1) AS "원부자재필요" 
     , ROUND((MAT_TTL-((SOP_PLN_WEEK-ASSY_WEEK)*USAGE/1000))/1000,0) AS "계획대비과부족" 
     , ROUND(MAT_TTL/1000,0) AS MAT_TTL 
     , ROUND(MAT_SMT_IN/1000,0) AS MAT_SMT_IN 
     , ROUND(MAT_L_IN/1000,0) AS MAT_L_IN 
     , ROUND(WIK_WIP/1000,0) AS WIK_WIP 
     , ROUND(MAT_INV_L_QTY/1000,0) AS MAT_INV_L_QTY 
     , ROUND(MAT_INV_QTY/1000,0) AS MAT_INV_QTY 
     , ROUND(ORDER_QTY/1000,0) AS ORDER_QTY 
     , ROUND((SOP_PLN_WEEK-ASSY_WEEK)/1000,0) AS W0 
     , ROUND(W1/1000,0) AS W1 
     , ROUND(W2/1000,0) AS W2 
     , ROUND(W3/1000,0) AS W3 
     , ROUND(W4/1000,0) AS W4 
     , ROUND(W5/1000,0) AS W5 
     , ROUND(W6/1000,0) AS W6 
     , ROUND(W7/1000,0) AS W7 
     , ROUND((MAT_TTL-((SOP_PLN_WEEK-ASSY_WEEK)*USAGE/1000))/1000,0) AS MW0 
     , ROUND((MAT_TTL-((SOP_PLN_WEEK-ASSY_WEEK)*USAGE/1000) - (W1*USAGE/1000))/1000,0) AS MW1 
     , ROUND((MAT_TTL-((SOP_PLN_WEEK-ASSY_WEEK)*USAGE/1000) - (W1*USAGE/1000) - (W2*USAGE/1000))/1000,0) AS MW2 
     , ROUND((MAT_TTL-((SOP_PLN_WEEK-ASSY_WEEK)*USAGE/1000) - (W1*USAGE/1000) - (W2*USAGE/1000) - (W3*USAGE/1000))/1000,0) AS MW3 
     , ROUND((MAT_TTL-((SOP_PLN_WEEK-ASSY_WEEK)*USAGE/1000) - (W1*USAGE/1000) - (W2*USAGE/1000) - (W3*USAGE/1000) - (W4*USAGE/1000))/1000,0) AS MW4 
     , ROUND((MAT_TTL-((SOP_PLN_WEEK-ASSY_WEEK)*USAGE/1000) - (W1*USAGE/1000) - (W2*USAGE/1000) - (W3*USAGE/1000) - (W4*USAGE/1000) - (W5*USAGE/1000))/1000,0) AS MW5 
     , ROUND((MAT_TTL-((SOP_PLN_WEEK-ASSY_WEEK)*USAGE/1000) - (W1*USAGE/1000) - (W2*USAGE/1000) - (W3*USAGE/1000) - (W4*USAGE/1000) - (W5*USAGE/1000) - (W6*USAGE/1000))/1000,0) AS MW6 
     , ROUND((MAT_TTL-((SOP_PLN_WEEK-ASSY_WEEK)*USAGE/1000) - (W1*USAGE/1000) - (W2*USAGE/1000) - (W3*USAGE/1000) - (W4*USAGE/1000) - (W5*USAGE/1000) - (W6*USAGE/1000) - (W7*USAGE/1000))/1000,0) AS MW7 
  FROM ( 
        SELECT  ' ', MAT.MAT_GRP_1 AS CUSTOMER, MAT.MAT_GRP_2 AS FAMILY, MAT_GRP_10 AS PACKAGE,  ' ',  ' ', MAT.MAT_GRP_6 AS LD_COUNT, MAT.MAT_CMF_11 AS PKG_CODE,  ' ', REPLACE(A.MATCODE, '-O','') AS MATCODE,  ' ',  ' ',  ' ', A.OPER
             , SUM(A.SOP_PLN_MON) AS SOP_PLN_MON 
             , SUM(A.SOP_PLN_WEEK) AS SOP_PLN_WEEK 
             , SUM(A.WEEK_AO+A.WIP_STOCK_NEXT) AS ASSY_WEEK 
             , SUM(A.ASSY_MON+A.WIP_STOCK_NEXT) AS ASSY_MON 
             , SUM(A.WIP_STOCK) AS WIP_STOCK 
             , SUM(A.REV_QTY) AS REV_QTY 
             , MAX(A.USAGE) AS USAGE 
             , MAX(A.TTL) AS MAT_TTL 
             , MAX(A.SMT_IN) AS MAT_SMT_IN 
             , MAX(A.L_IN) AS MAT_L_IN 
             , MAX(A.WIK_WIP) AS WIK_WIP 
             , MAX(A.INV_L_QTY) AS MAT_INV_L_QTY 
             , MAX(A.INV_QTY) AS MAT_INV_QTY 
             , MAX(A.ORDER_QTY) AS ORDER_QTY 
             , MAX(A.WIP_STOCK-A.IN_QTY) AS  IN_QTY 
             , SUM(A.W0) AS W0 
             , SUM(A.W1) AS W1 
             , SUM(A.W2) AS W2 
             , SUM(A.W3) AS W3 
             , SUM(A.W4) AS W4 
             , SUM(A.W5) AS W5 
             , SUM(A.W6) AS W6 
             , SUM(A.W7) AS W7 
        FROM MWIPMATDEF MAT 
           ,  ( 
              SELECT MAT.MAT_ID 
                   , C.MATTYPE 
                   , C.MATCODE 
                   , C.DESCRIPT 
                   , C.OPER 
                   , C.UNIT 
                   , MAX(A.SOP_PLN_MON) AS  SOP_PLN_MON 
                   , MAX(A.SOP_PLN_WEEK) AS  SOP_PLN_WEEK 
                   , MAX(USAGE) AS USAGE 
                   , MAX(A.WEEK_AO) AS WEEK_AO 
                   , MAX(A.ASSY_MON) AS ASSY_MON 
                   , SUM(NVL((CASE WHEN MAT.MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT.MAT_GRP_5 <> '-' THEN CASE WHEN MAT.MAT_GRP_5 IN ('1st','Merge') OR MAT.MAT_GRP_5 LIKE 'Middle%' THEN CASE WHEN B.OPER = 'A0000' THEN NVL(B.VO,0) ELSE 0 END ELSE 0 END  
                               ELSE CASE WHEN B.OPER = 'A0000' THEN NVL(B.VO,0) ELSE 0 END 
                           END),0)) AS WIP_STOCK 
                   , SUM(NVL((CASE WHEN MAT.MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT.MAT_GRP_5 <> '-' THEN CASE WHEN MAT.MAT_GRP_5 IN ('1st','Merge') OR MAT.MAT_GRP_5 LIKE 'Middle%' THEN CASE WHEN (B.OPER BETWEEN C.OPER AND 'AZ010') AND B.OPER <> C.OPER THEN NVL(B.VO,0) ELSE 0 END ELSE 0 END  
                               ELSE CASE WHEN (B.OPER BETWEEN C.OPER AND 'AZ010') AND B.OPER <> C.OPER THEN NVL(B.VO,0) ELSE 0 END  
                           END),0)) AS WIP_STOCK_NEXT 
                   , SUM(NVL((CASE WHEN MAT.MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT.MAT_GRP_5 <> '-' THEN CASE WHEN MAT.MAT_GRP_5 IN ('1st','Merge') OR MAT.MAT_GRP_5 LIKE 'Middle%' THEN CASE WHEN (B.OPER BETWEEN 'A0000' AND C.OPER) AND B.OPER <> 'A0000' THEN NVL(B.VO,0) ELSE 0 END ELSE 0 END  
                               ELSE CASE WHEN (B.OPER BETWEEN 'A0000' AND C.OPER) AND B.OPER <> 'A0000' THEN NVL(B.VO,0) ELSE 0 END  
                           END),0)) AS REV_QTY 
                   , MAX(C.TTL) AS TTL 
                   , MAX(C.SMT_IN) AS SMT_IN 
                   , MAX(C.L_IN) AS L_IN 
                   , MAX(C.WIK_WIP) AS WIK_WIP 
                   , MAX(C.INV_L_QTY) AS INV_L_QTY 
                   , MAX(C.INV_QTY) AS INV_QTY 
                   , MAX(C.ORDER_QTY) AS ORDER_QTY 
                   , MAX(C.IN_QTY) AS IN_QTY 
                   , MAX(A.W0) AS W0 
                   , MAX(A.W1) AS W1 
                   , MAX(A.W2) AS W2 
                   , MAX(A.W3) AS W3 
                   , MAX(A.W4) AS W4 
                   , MAX(A.W5) AS W5 
                   , MAX(A.W6) AS W6 
                   , MAX(A.W7) AS W7 
                FROM MWIPMATDEF MAT 
                   , ( 
                      SELECT MAT.MAT_ID   
                           , MAX(CASE WHEN MAT.MAT_GRP_3 IN ('COB') THEN ROUND(NVL(PLAN.RESV_FIELD1,0)/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0) ELSE NVL(PLAN.RESV_FIELD1,0) END) AS SOP_PLN_MON 
                           , MAX(CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN NVL(W_PLN.W0,0) / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE NVL(W_PLN.W0,0) END) AS SOP_PLN_WEEK  
                           , MAX(CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN ROUND(NVL(WEEK_AO.WEEK_AO,0)/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0) ELSE NVL(WEEK_AO.WEEK_AO,0) END) WEEK_AO 
                           , MAX(CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN ROUND(NVL(MON_AO.ASSY_MON,0)/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0) ELSE NVL(MON_AO.ASSY_MON,0) END) ASSY_MON 
                           , MAX(CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN NVL(W0,0) / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE NVL(W0,0) END) AS W0 
                           , MAX(CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN NVL(W1,0) / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE NVL(W1,0) END) AS W1 
                           , MAX(CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN NVL(W2,0) / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE NVL(W2,0) END) AS W2 
                           , MAX(CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN NVL(W3,0) / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE NVL(W3,0) END) AS W3 
                           , MAX(CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN NVL(W4,0) / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE NVL(W4,0) END) AS W4 
                           , MAX(CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN NVL(W5,0) / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE NVL(W5,0) END) AS W5 
                           , MAX(CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN NVL(W6,0) / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE NVL(W6,0) END) AS W6 
                           , MAX(CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN NVL(W7,0) / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE NVL(W7,0) END) AS W7 
                           , MAX(W_PLN.W_LAST) AS W_LAST 
                        FROM MWIPMATDEF MAT  
                           , (    
                              SELECT MAT_ID, SUM(S1_FAC_OUT_QTY_1+S2_FAC_OUT_QTY_1+S3_FAC_OUT_QTY_1) AS SHP_QTY  
                                FROM RSUMFACMOV   
                               WHERE 1=1   
                                 AND WORK_DATE BETWEEN '20200404' AND '20200409' 
                                 AND LOT_TYPE = 'W'   
                                 AND CM_KEY_1 = 'HMVA2'   
                                 AND CM_KEY_2 = 'PROD'   
                                 AND CM_KEY_3 LIKE 'P%' 
                                 AND FACTORY NOT IN ('RETURN')  
                               GROUP BY MAT_ID     
                             ) SHP   
                          , ( 
                             SELECT MAT_ID 
                                  , SUM(DECODE(WORK_DATE,'20200331', 0, NVL(S1_FAC_OUT_QTY_1 + S2_FAC_OUT_QTY_1 + S3_FAC_OUT_QTY_1 + S4_FAC_OUT_QTY_1, 0))) AS ASSY_MON 
                               FROM RSUMFACMOV 
                               WHERE 1=1 
                                 AND WORK_DATE BETWEEN '20200331' AND '20200409'
                                 AND LOT_TYPE = 'W' 
                                 AND CM_KEY_1 = 'HMVA2' 
                                 AND CM_KEY_2 = 'PROD' 
                                 AND CM_KEY_3 LIKE 'P%' 
                                 AND FACTORY NOT IN ('RETURN') 
                               GROUP BY MAT_ID 
                             ) MON_AO 
                           , ( 
                              SELECT MAT_ID 
                                   , SUM(NVL(S1_FAC_OUT_QTY_1 + S2_FAC_OUT_QTY_1 + S3_FAC_OUT_QTY_1 + S4_FAC_OUT_QTY_1, 0)) AS WEEK_AO  
                                FROM RSUMFACMOV 
                               WHERE 1=1 
                                 AND WORK_DATE BETWEEN '20200404' AND '20200410'
                                 AND LOT_TYPE = 'W' 
                                 AND CM_KEY_1 = 'HMVA2' 
                                 AND CM_KEY_2 = 'PROD' 
                                 AND CM_KEY_3 LIKE 'P%' 
                                 AND FACTORY NOT IN ('RETURN') 
                               GROUP BY MAT_ID 
                             ) WEEK_AO 
                           , (  
                              SELECT FACTORY,MAT_ID,PLAN_QTY_ASSY,PLAN_MONTH, RESV_FIELD1  
                                FROM (  
                                      SELECT FACTORY, MAT_ID, SUM(PLAN_QTY_ASSY) AS PLAN_QTY_ASSY, PLAN_MONTH, SUM(RESV_FIELD1) AS RESV_FIELD1   
                                        FROM (  
                                              SELECT FACTORY, MAT_ID, SUM(PLAN_QTY_ASSY) AS PLAN_QTY_ASSY, PLAN_MONTH, SUM(TO_NUMBER(DECODE(RESV_FIELD1,' ',0,RESV_FIELD1))) AS RESV_FIELD1  
                                                FROM CWIPPLNMON  
                                               WHERE 1=1  
                                                 AND FACTORY = 'HMVA2'  
                                               GROUP BY FACTORY, MAT_ID, PLAN_MONTH  
                                             )  
                                       GROUP BY FACTORY, MAT_ID,PLAN_MONTH  
                                     )  
                                WHERE PLAN_MONTH = '202004' 
                             ) PLAN 
                           , (   
                              SELECT MAT_ID   
                                   , SUM(DECODE(PLAN_WEEK, '202015', WW_QTY, 0)) AS W0  
                                   , SUM(DECODE(PLAN_WEEK, '202016', WW_QTY, 0)) AS W1  
                                   , SUM(DECODE(PLAN_WEEK, '202017', WW_QTY, 0)) AS W2  
                                   , SUM(DECODE(PLAN_WEEK, '202018', WW_QTY, 0)) AS W3  
                                   , SUM(DECODE(PLAN_WEEK, '202019', WW_QTY, 0)) AS W4  
                                   , SUM(DECODE(PLAN_WEEK, '202020', WW_QTY, 0)) AS W5  
                                   , SUM(DECODE(PLAN_WEEK, '202021', WW_QTY, 0)) AS W6  
                                   , SUM(DECODE(PLAN_WEEK, '202022', WW_QTY, 0)) AS W7  
                                   , SUM(CASE WHEN PLAN_WEEK >= CKD_S_WEEK AND PLAN_WEEK <= CKD_L_WEEK THEN REV_QTY ELSE 0 END) AS W_LAST   
                                FROM (   
                                      SELECT A.PLAN_WEEK, B.CKD_S_WEEK, B.CKD_L_WEEK, A.MAT_ID, A.WW_QTY, B.CNT   
                                           , ROUND((A.WW_QTY / 7) * B.CNT, 0) AS REV_QTY   
                                        FROM RWIPPLNWEK A   
                                           , (   
                                              SELECT MAX(TRIM(TO_CHAR(PLAN_YEAR))||LPAD(PLAN_WEEK,2,'0')) PLAN_WEEK, COUNT(*) AS CNT  
                                                   , (SELECT MAX(TRIM(TO_CHAR(PLAN_YEAR))||LPAD(PLAN_WEEK,2,'0')) PLAN_WEEK FROM MWIPCALDEF WHERE CALENDAR_ID = 'OTD' AND SYS_DATE = '20200404') AS CKD_S_WEEK 
                                                   , (SELECT MAX(TRIM(TO_CHAR(PLAN_YEAR))||LPAD(PLAN_WEEK,2,'0')) PLAN_WEEK FROM MWIPCALDEF WHERE CALENDAR_ID = 'OTD' AND SYS_DATE = '20200409') AS CKD_L_WEEK 
                                                FROM MWIPCALDEF  
                                               WHERE 1=1  
                                                 AND CALENDAR_ID = 'OTD'  
                                                 AND PLAN_YEAR||LPAD(PLAN_MONTH,2,'0') IN('202004','202005','202006') 
                                               GROUP BY PLAN_WEEK  
                                             ) B   
                                       WHERE 1=1   
                                         AND A.PLAN_WEEK = B.PLAN_WEEK   
                                         AND A.FACTORY = 'HMVA2'     
                                         AND A.GUBUN = '3'    
                                     )   
                               GROUP BY MAT_ID   
                             ) W_PLN   
                       WHERE 1=1  
                         AND MAT.MAT_ID = PLAN.MAT_ID(+) 
                         AND MAT.MAT_ID = SHP.MAT_ID(+)  
                         AND MAT.MAT_ID = W_PLN.MAT_ID(+)  
                         AND MAT.MAT_ID = MON_AO.MAT_ID(+)  
                         AND MAT.MAT_ID = WEEK_AO.MAT_ID(+)  
                         AND MAT.FACTORY = 'HMVA2'  
                         AND MAT.DELETE_FLAG = ' '  
                         AND MAT.MAT_TYPE = 'FG'  
                         AND MAT.MAT_ID LIKE '%'  
                       GROUP BY MAT.MAT_ID 
                     ) A 
                   , ( 
                      SELECT LOT.MAT_ID, MAT.MAT_GRP_3, LOT.OPER_GRP_1, LOT.OPER 
                           , DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY) AS VO 
                        FROM ( 
                              SELECT FACTORY, MAT_ID, OPER_GRP_1, OPER 
                                   , SUM(CASE WHEN OPER <= 'A0395' THEN QTY_1 / NVL(COMP_CNT,1) 
                                              ELSE QTY_1 
                                         END) QTY 
                                FROM ( 
                                      SELECT A.FACTORY, A.MAT_ID, B.OPER_GRP_1, B.OPER, A.QTY_1 
                                           , (SELECT DATA_1 FROM MGCMTBLDAT WHERE FACTORY = 'HMVA2' AND TABLE_NAME IN ('H_SEC_AUTO_LOSS','H_HX_AUTO_LOSS') AND KEY_1 = A.MAT_ID) AS COMP_CNT 
                                        FROM RWIPLOTSTS A 
                                           , MWIPOPRDEF B 
                                       WHERE 1 = 1 
                                         AND A.FACTORY = B.FACTORY(+) 
                                         AND A.OPER = B.OPER(+) 
                                         AND A.FACTORY = 'HMVA2' 
                                         AND A.LOT_TYPE = 'W' 
                                         AND A.LOT_DEL_FLAG = ' ' 
                                         AND B.OPER_GRP_1 NOT IN (' ', '-') 
                                         AND B.OPER BETWEEN 'A0000' AND 'AZ010' 
                                         AND A.LOT_CMF_5 LIKE 'P%' 
                                     ) 
                               GROUP BY FACTORY, MAT_ID, OPER_GRP_1, OPER 
                               ORDER BY MAT_ID, OPER, OPER_GRP_1 
                             ) LOT 
                           , MWIPMATDEF MAT 
                       WHERE 1 = 1 
                         AND LOT.FACTORY = MAT.FACTORY 
                         AND LOT.MAT_ID = MAT.MAT_ID 
                         AND MAT.DELETE_FLAG <> 'Y' 
                         AND MAT.MAT_GRP_2 <> '-' 
                       ORDER BY LOT.OPER, LOT.OPER_GRP_1 
                     ) B 
                   , ( 
                      SELECT MAT.MAT_ID    
                           , SMM.MAT_TYPE AS MATTYPE   
                           , MAX(NVL(SMM.UNIT_QTY,0)) AS USAGE   
                           , SMM.MATCODE AS MATCODE 
                           , SMM.DESCRIPT AS DESCRIPT 
                           , SMM.OPER AS OPER  
                           , SMM.UNIT_1 AS UNIT  
                           , MAX(WIP_MAT.TTL) AS TTL 
                           , MAX(WIP_MAT.SMT_IN) AS SMT_IN 
                           , MAX(WIP_MAT.L_IN) AS L_IN 
                           , MAX(WIP_MAT.WIK_WIP) AS WIK_WIP 
                           , MAX(WIP_MAT.INV_L_QTY) AS INV_L_QTY 
                           , MAX(WIP_MAT.INV_QTY) AS INV_QTY 
                           , MAX(WIP_MAT.ORDER_QTY) AS ORDER_QTY 
                           , MAX(WIP_MAT.IN_QTY) AS IN_QTY 
                        FROM MWIPMATDEF MAT  
                           , (   
                              SELECT DISTINCT NVL(P.MAT_ID,B.PARTNUMBER) PARTNUMBER, B.MATCODE, B.DESCRIPT, B.RESV_FIELD_2 AS MAT_TYPE, B.UNIT AS UNIT_1, B.UNIT_QTY, B.STEPID AS OPER 
                                FROM CWIPMATDEF@RPTTOMES A  
                                   , CWIPBOMDEF B  
                                   , RWIPMCPBOM P    
                               WHERE 1=1  
                                 AND A.MAT_ID = B.MATCODE  
                                 AND A.FACTORY = 'HMVA2'  
                                 AND B.RESV_FIELD_2 IN ('CW','GW','MC','SB','SW','TE', 'LF', 'PB', 'RC')  
                                 AND B.RESV_FIELD_2 <> ' '  
                                 AND B.RESV_FLAG_1 = 'Y'  
                                 AND B.STEPID <> 'A0300'  
                                 AND B.MATCODE NOT LIKE '%-O'  
                                 AND B.PARTNUMBER = P.MCP_TO_PART(+) 
                               ORDER BY MATCODE 
                             ) SMM 
                           , (  
                              SELECT REPLACE(A.MAT_ID, '-O', '') AS MAT_ID 
                                   , SUM(NVL(B.INV_QTY,0)) + SUM(NVL(B.INV_L_QTY,0))+SUM(NVL(C.QTY_SMT,0))+SUM(NVL(C.QTY_TTL,0))+SUM(NVL(E.WIK_WIP,0)) AS TTL 
                                   , SUM(NVL(C.QTY_SMT,0)) AS SMT_IN  
                                   , SUM(NVL(C.QTY_TTL,0)) AS L_IN  
                                   , SUM(NVL(E.WIK_WIP,0)) AS WIK_WIP  
                                   , SUM(NVL(B.INV_L_QTY,0)) AS INV_L_QTY  
                                   , SUM(NVL(B.INV_QTY,0)) AS INV_QTY  
                                   , SUM(NVL(D.ORDER_QTY,0)) AS ORDER_QTY  
                                   , SUM(NVL(C.IN_QTY,0)) AS IN_QTY  
                                FROM MWIPMATDEF A     
                                   , (     
                                      SELECT MAT_ID 
                                           , SUM(INV_QTY) AS INV_QTY 
                                           , SUM(INV_L_QTY) AS INV_L_QTY 
                                        FROM ( 
                                              SELECT MAT_ID  
                                                   , SUM(DECODE(STORAGE_LOCATION, '1000', QUANTITY, '1003', QUANTITY, 0)) AS INV_QTY  
                                                   , SUM(DECODE(STORAGE_LOCATION, '1001', QUANTITY, 0)) AS INV_L_QTY    
                                                FROM CWMSLOTSTS@RPTTOMES 
                                               WHERE 1=1 
                                                 AND QUANTITY> 0 
                                                 AND STORAGE_LOCATION IN ('1000', '1001', '1003') 
                                               GROUP BY MAT_ID  
                                               UNION ALL 
                                              SELECT MAT_ID, 0 AS INV_QTY, SUM(QTY_1) AS INV_L_QTY 
                                                FROM CWIPMATSLP@RPTTOMES 
                                               WHERE 1=1 
                                                 AND RECV_FLAG = ' ' 
                                                 AND IN_TIME BETWEEN '20200407000000' AND '20200409235959' 
                                               GROUP BY MAT_ID 
                                             ) 
                                       GROUP BY MAT_ID 
                                     ) B     
                                   , (     
                                      SELECT MAT_ID  
                                           , SUM(CASE WHEN B.LOT_ID IS NOT NULL THEN 1   
                                                      ELSE 0   
                                                 END) AS IN_QTY   
                                           , COUNT(*) AS LOT_TTL   
                                           , SUM(CASE WHEN OPER LIKE 'M%' AND OPER <= 'M0330' THEN QTY_1 ELSE 0 END) AS QTY_SMT  
                                           , SUM(CASE WHEN OPER LIKE 'A%' OR OPER > 'M0330' THEN QTY_1 ELSE 0 END) AS QTY_TTL  
                                        FROM RWIPLOTSTS A   
                                           , CRASRESMAT B   
                                       WHERE 1=1    
                                         AND A.FACTORY = B.FACTORY(+)   
                                         AND A.LOT_ID = B.LOT_ID(+)   
                                         AND A.FACTORY = 'HMVA2'  
                                         AND A.LOT_TYPE != 'W'  
                                         AND A.LOT_DEL_FLAG = ' '  
                                         AND A.LOT_CMF_2 = '-'   
                                         AND A.LOT_CMF_9 != ' '   
                                         AND A.QTY_1 > 0   
                                         AND A.OPER NOT IN  ('00001', '00002', 'V0000')   
                                       GROUP BY A.MAT_ID    
                                     ) C     
                                   , (     
                                      SELECT MAT_ID, SUM(ORDER_QUAN) AS ORDER_QTY     
                                        FROM RSAPORDQNT     
                                       WHERE 1=1     
                                         AND CREATE_TIME = TO_CHAR(SYSDATE, 'YYYYMMDD')     
                                       GROUP BY MAT_ID     
                                     ) D 
                                   , ( 
                                      SELECT MAT_ID, SUM(LOT_QTY) AS WIK_WIP 
                                        FROM ISTMWIKWIP@RPTTOMES 
                                       WHERE 1=1 
                                         AND CUTOFF_DT = '20200409' || TO_CHAR(SYSDATE, 'HH24')
                                       GROUP BY MAT_ID 
                                     ) E 
                               WHERE 1=1 
                                 AND A.MAT_ID = B.MAT_ID(+) 
                                 AND A.MAT_ID = C.MAT_ID(+) 
                                 AND A.MAT_ID = D.MAT_ID(+) 
                                 AND A.MAT_ID = E.MAT_ID(+) 
                                 AND A.FACTORY = 'HMVA2' 
                               GROUP BY REPLACE(A.MAT_ID, '-O', '') 
                               HAVING SUM(NVL(B.INV_QTY,0)) + SUM(NVL(C.QTY_SMT,0)) + SUM(NVL(C.QTY_TTL,0)) + SUM(NVL(B.INV_L_QTY,0)) + SUM(NVL(D.ORDER_QTY,0)) + SUM(NVL(E.WIK_WIP,0)) + SUM(NVL(C.IN_QTY,0)) > 0 
                             ) WIP_MAT 
                       WHERE 1=1 
                         AND MAT.MAT_ID = SMM.PARTNUMBER(+) 
                         AND SMM.MATCODE = WIP_MAT.MAT_ID(+) 
                         AND MAT.FACTORY = 'HMVA2' 
                         AND MAT.DELETE_FLAG = ' ' 
                         AND MAT.MAT_TYPE = 'FG' 
                         AND MAT.MAT_ID LIKE '%' 
                         AND SMM.UNIT_QTY > 0 
                       GROUP BY MAT.MAT_ID, SMM.MAT_TYPE, SMM.DESCRIPT, SMM.MATCODE, SMM.DESCRIPT, SMM.OPER, SMM.UNIT_1 
                     ) C 
               WHERE 1=1 
                 AND MAT.MAT_ID = A.MAT_ID(+) 
                 AND MAT.MAT_ID = B.MAT_ID(+) 
                 AND MAT.MAT_ID = C.MAT_ID(+) 
                 AND MAT.FACTORY = 'HMVA2' 
                 AND MAT.DELETE_FLAG = ' ' 
                 AND MAT.VENDOR_ID <> ' ' 
               GROUP BY MAT.MAT_ID, C.MATTYPE, C.MATCODE, C.DESCRIPT, C.OPER, C.UNIT 
             ) A 
        WHERE 1=1  
          AND MAT.MAT_ID = A.MAT_ID(+) 
          AND MAT.FACTORY = 'HMVA2' 
          AND MAT.DELETE_FLAG = ' ' 
          AND A.MATCODE <> ' ' 
        GROUP BY  ' ', MAT.MAT_GRP_1, MAT.MAT_GRP_2, MAT.MAT_GRP_10,  ' ',  ' ', MAT.MAT_GRP_6, MAT.MAT_CMF_11,  ' ', REPLACE(A.MATCODE, '-O',''),  ' ',  ' ',  ' ', A.OPER
        HAVING ( 
                SUM(NVL(SOP_PLN_MON,0))+SUM(NVL(SOP_PLN_WEEK,0))+SUM(NVL(WEEK_AO,0))+SUM(NVL(WIP_STOCK,0))+SUM(NVL(REV_QTY,0))+MAX(NVL(TTL,0)) 
               +SUM(NVL(W0,0))+SUM(NVL(W1,0))+SUM(NVL(W2,0))+SUM(NVL(W3,0))+SUM(NVL(W4,0))+SUM(NVL(W5,0))+SUM(NVL(W6,0))+SUM(NVL(W7,0)) 
               ) > 0 
       ) A 
 WHERE 1=1  
   AND NVL(WIP_STOCK,0)+NVL(SOP_PLN_MON,0)+NVL(SOP_PLN_WEEK,0)+NVL(ASSY_WEEK,0)+NVL(REV_QTY,0)+NVL(MAT_TTL,0)+NVL(MAT_L_IN,0)+NVL(WIK_WIP,0)+NVL(MAT_INV_L_QTY,0)+NVL(MAT_INV_QTY,0)+NVL(ORDER_QTY,0)+NVL(W1,0)+NVL(W2,0)+NVL(W3,0)+NVL(W4,0)+NVL(W5,0)+NVL(W6,0)+NVL(W7,0) > 0 
 ORDER BY  ' ', DECODE(A.CUSTOMER, 'SE', 1, 'HX', 2, 'IM', 3, 'FC', 4, 'IG', 5, 6),CUSTOMER, FAMILY, PACKAGE,  ' ',  ' ', LD_COUNT, PKG_CODE,  ' ', MATCODE,  ' ',  ' ',  ' ', OPER

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT DISTINCT MAT_ID FROM CMATPLNINP@RPTTOMES WHERE PLAN_DATE <> ' '
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MAT_ID 
     , (SELECT DATA_1 FROM MGCMTBLDAT WHERE FACTORY = 'HMVA2' AND TABLE_NAME = 'VENDOR' AND KEY_1 = VENDOR_CODE) AS VENDOR_CODE 
     , ROUND(SUM(TTL)/1000,0) AS TTL 
     , ROUND(SUM(MONTHS4)/1000,0) AS MONTHS4 
     , ROUND(SUM(MONTHS3)/1000,0) AS MONTHS3 
     , ROUND(SUM(MONTHS2)/1000,0) AS MONTHS2 
     , ROUND(SUM(MONTHS1)/1000,0) AS MONTHS1 
     , ROUND(SUM(MONTHS0)/1000,0) AS MONTHS0 
  FROM ( 
        SELECT REPLACE(MAT_ID, '-O', '') AS MAT_ID 
             , VENDOR_CODE 
             , SUM(NVL(QTY_TTL,0)) AS TTL 
             , SUM(CASE WHEN TO_CHAR(ADD_MONTHS(SYSDATE,3), 'YYYYMMDDHH24MISS') < EPN_DATE THEN QTY_TTL ELSE 0 END) AS MONTHS4 
             , SUM(CASE WHEN EPN_DATE <= TO_CHAR(ADD_MONTHS(SYSDATE,3), 'YYYYMMDDHH24MISS') AND TO_CHAR(ADD_MONTHS(SYSDATE,2), 'YYYYMMDDHH24MISS') < EPN_DATE THEN QTY_TTL ELSE 0 END) AS MONTHS3 
             , SUM(CASE WHEN EPN_DATE <= TO_CHAR(ADD_MONTHS(SYSDATE,2), 'YYYYMMDDHH24MISS') AND TO_CHAR(ADD_MONTHS(SYSDATE,1), 'YYYYMMDDHH24MISS') < EPN_DATE THEN QTY_TTL ELSE 0 END) AS MONTHS2 
             , SUM(CASE WHEN EPN_DATE <= TO_CHAR(ADD_MONTHS(SYSDATE,1), 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') < EPN_DATE THEN QTY_TTL ELSE 0 END) AS MONTHS1 
             , SUM(CASE WHEN EPN_DATE <= TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') THEN QTY_TTL ELSE 0 END) AS MONTHS0   
          FROM ( 
                SELECT MAT_ID, LOT_CMF_16 AS EPN_DATE, LOT_CMF_20 AS VENDOR_CODE, QTY_1 AS QTY_TTL 
                  FROM RWIPLOTSTS A 
                     , CRASRESMAT B 
                 WHERE 1=1  
                   AND A.FACTORY = B.FACTORY(+)   
                   AND A.LOT_ID = B.LOT_ID(+)   
                   AND A.FACTORY = 'HMVA2'  
                   AND A.LOT_TYPE != 'W'  
                   AND A.LOT_DEL_FLAG = ' '  
                   AND A.LOT_CMF_2 = '-'   
                   AND A.LOT_CMF_9 != ' '   
                   AND A.QTY_1 > 0   
                   AND A.OPER NOT IN  ('00001', '00002', 'V0000')   
                   AND (A.MAT_ID = 'R190000055' OR  A.MAT_ID = 'R190000055-O') 
                 UNION ALL 
                SELECT MAT_ID, EPN_DATE, VENDOR_CODE, QUANTITY AS QTY_TTL 
                  FROM CWMSLOTSTS@RPTTOMES   
                 WHERE 1=1 
                   AND QUANTITY> 0   
                   AND STORAGE_LOCATION IN ('1000', '1001', '1003')   
                   AND (MAT_ID = 'R190000055' OR  MAT_ID = 'R190000055-O') 
               ) 
         GROUP BY REPLACE(MAT_ID, '-O', ''), VENDOR_CODE 
       ) 
 GROUP BY MAT_ID, VENDOR_CODE 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
SELECT MIN(SYS_DATE) AS START_DAY 
     , MAX(SYS_DATE) AS END_DAY 
     , PLAN_YEAR||DECODE(LENGTH(PLAN_WEEK), 1, '0'||PLAN_WEEK, PLAN_WEEK) AS WEEK
  FROM MWIPCALDEF 
 WHERE CALENDAR_ID = 'OTD'
   AND (PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) IN ( 
                                                SELECT WW
                                                  FROM (
                                                        SELECT WW
                                                             , ROW_NUMBER() OVER(ORDER BY WW) AS RNK
                                                          FROM (
                                                                SELECT DISTINCT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW
                                                                  FROM MWIPCALDEF
                                                                 WHERE CALENDAR_ID = 'OTD'
                                                                   AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') >= (
                                                                                                              SELECT MAX(PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) AS WW
                                                                                                                FROM MWIPCALDEF
                                                                                                               WHERE CALENDAR_ID = 'OTD'
                                                                                                                 AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') < (SELECT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW FROM MWIPCALDEF WHERE CALENDAR_ID = 'OTD' AND SYS_DATE = '20200409')
                                                                                                                 AND SYS_DATE >= TO_CHAR(TO_DATE('20200409', 'YYYYMMDD')-14, 'YYYYMMDD')
                                                                                                             )
                                                               ) 
                                                       )
                                                 WHERE RNK <= 7
                                               ) 
 GROUP BY PLAN_YEAR, PLAN_WEEK 
 ORDER BY PLAN_YEAR, PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT LANGUAGE_2 FROM RWEBFUNDEF WHERE FUNC_NAME = 'PRD010204'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE) AS START_DAY 
     , MAX(SYS_DATE) AS END_DAY 
     , PLAN_YEAR||DECODE(LENGTH(PLAN_WEEK), 1, '0'||PLAN_WEEK, PLAN_WEEK) AS WEEK
  FROM MWIPCALDEF 
 WHERE CALENDAR_ID = 'OTD'
   AND (PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) IN ( 
                                                SELECT WW
                                                  FROM (
                                                        SELECT WW
                                                             , ROW_NUMBER() OVER(ORDER BY WW) AS RNK
                                                          FROM (
                                                                SELECT DISTINCT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW
                                                                  FROM MWIPCALDEF
                                                                 WHERE CALENDAR_ID = 'OTD'
                                                                   AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') >= (
                                                                                                              SELECT MAX(PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) AS WW
                                                                                                                FROM MWIPCALDEF
                                                                                                               WHERE CALENDAR_ID = 'OTD'
                                                                                                                 AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') < (SELECT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW FROM MWIPCALDEF WHERE CALENDAR_ID = 'OTD' AND SYS_DATE = '20200409')
                                                                                                                 AND SYS_DATE >= TO_CHAR(TO_DATE('20200409', 'YYYYMMDD')-14, 'YYYYMMDD')
                                                                                                             )
                                                               ) 
                                                       )
                                                 WHERE RNK <= 7
                                               ) 
 GROUP BY PLAN_YEAR, PLAN_WEEK 
 ORDER BY PLAN_YEAR, PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
(SELECT TO_CHAR(LAST_DAY(TO_DATE('202003', 'YYYYMM')),'YYYYMMDD') FROM DUAL)
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
(SELECT TO_CHAR(LAST_DAY(TO_DATE('202004', 'YYYYMM')),'YYYYMMDD') FROM DUAL)
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE-1) 
  FROM MWIPCALDEF 
 WHERE 1=1
   AND CALENDAR_ID='SE'
   AND PLAN_YEAR='2020'
   AND PLAN_WEEK=(
                  SELECT PLAN_WEEK 
                    FROM MWIPCALDEF 
                   WHERE 1=1 
                     AND CALENDAR_ID='SE' 
                     AND SYS_DATE=TO_CHAR(TO_DATE('20200409','YYYYMMDD'),'YYYYMMDD')
                 )

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT (SELECT DATA_1 FROM MGCMTBLDAT@RPTTOMES WHERE FACTORY = 'HMVA2' AND TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = A.CUSTOMER) AS CUSTOMER, A.MAJOR, A.PKG,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' '
     , A.ORI_PLAN AS "월계획"
     , A.MON_PLAN AS "월계획Rev"
     , A.MON_PLAN -A.ORI_PLAN AS "월계획 차이"
     , A.TARGET_MON, A.ASSY_MON
     , DECODE(A.MON_PLAN, 0, 0, ROUND((A.ASSY_MON/A.MON_PLAN)*100, 1)) JINDO, A.DEF, WEEK_PLAN, ASSY_WEEK, WEEK_PLAN-ASSY_WEEK AS "주계획 차이"
     , A.HMK3A, A.FINISH, A.MOLD, A.WB, A.DA, A.SAW, A.STOCK, A.HMK3A+A.FINISH+A.MOLD+A.WB+A.DA+A.SAW+A.STOCK AS TTL, A.TARGET_DAY AS "일목표", A.AO0, A.AO1, A.AO2 
     , A.RCV0, A.RCV1, A.RCV2, A.SW0, A.SW1, A.SW2, A.DA0, A.DA1, A.DA2, A.WB0, A.WB1, A.WB2, A.MD0, A.MD1, A.MD2, A.TF0, A.TF1, A.TF2 
     , ROUND(B.TAT1*24,2)
     , CASE WHEN HIST_AO > 0 THEN '●' END AS HIST_AO
  FROM ( 
        SELECT A.MAT_GRP_1 AS CUSTOMER, A.MAT_GRP_9 AS MAJOR, A.MAT_GRP_10 AS PKG,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' '
             , SUM(NVL(A.MON_PLAN,0)) AS MON_PLAN 
             , SUM(NVL(A.ORI_PLAN,0)) AS ORI_PLAN 
             , SUM(NVL(A.WEEK_PLAN,0)) AS WEEK_PLAN 
             , SUM(NVL(A.ASSY_WEEK,0)) AS ASSY_WEEK 
             , ROUND(((SUM(NVL(A.MON_PLAN,0)) * 30) / 100),0) AS TARGET_MON 
             , SUM(NVL(A.ASSY_MON,0)) AS ASSY_MON 
             , SUM(NVL(A.ASSY_MON,0)) - ROUND(((SUM(NVL(A.MON_PLAN,0)) * 30) / 100),1) AS DEF   
             , SUM(NVL(A.AO0,0)) AS AO0 
             , SUM(NVL(A.AO1,0)) AS AO1 
             , SUM(NVL(A.AO2,0)) AS AO2 
             , ROUND(((SUM(NVL(A.MON_PLAN,0)) - SUM(NVL(A.ASSY_MON,0))) /22), 1) AS TARGET_DAY 
             , SUM(NVL(A.RCV0,0)) AS RCV0
             , SUM(NVL(A.RCV1,0)) AS RCV1
             , SUM(NVL(A.RCV2,0)) AS RCV2
             , ROUND(SUM(NVL((CASE WHEN A.MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND MAT_ID LIKE 'SEKS%') THEN DECODE(A.MAT_GRP_5, '2nd', D.SW0 / COMP_CNT, 0)
                                   WHEN A.MAT_GRP_3 IN ('COB', 'BGN') THEN D.SW0 / NET_DIE
                                   WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN CASE WHEN A.MAT_GRP_5 IN ('1st','Merge') OR MAT_GRP_5 LIKE 'Middle%' THEN D.SW0 / DECODE(A.MAT_GRP_1,'HX',1, COMP_CNT) ELSE 0 END 
                                   ELSE D.SW0 / DECODE(A.MAT_GRP_1,'HX',1, COMP_CNT)
                              END),0)
                    ),0) AS SW0
             , ROUND(SUM(NVL((CASE WHEN A.MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND MAT_ID LIKE 'SEKS%') THEN DECODE(A.MAT_GRP_5, '2nd', D.SW1 / COMP_CNT, 0)
                                   WHEN A.MAT_GRP_3 IN ('COB', 'BGN') THEN D.SW1 / NET_DIE
                                   WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN CASE WHEN A.MAT_GRP_5 IN ('1st','Merge') OR MAT_GRP_5 LIKE 'Middle%' THEN D.SW1 / DECODE(A.MAT_GRP_1,'HX',1,COMP_CNT) ELSE 0 END 
                                   ELSE D.SW1 / DECODE(A.MAT_GRP_1,'HX',1,COMP_CNT)
                              END),0)
                    ),0) AS SW1
             , ROUND(SUM(NVL((CASE WHEN A.MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND MAT_ID LIKE 'SEKS%') THEN DECODE(A.MAT_GRP_5, '2nd', D.SW2 / COMP_CNT, 0)
                                   WHEN A.MAT_GRP_3 IN ('COB', 'BGN') THEN D.SW2 / NET_DIE
                                   WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN CASE WHEN A.MAT_GRP_5 IN ('1st','Merge') OR MAT_GRP_5 LIKE 'Middle%' THEN D.SW2 / DECODE(A.MAT_GRP_1,'HX',1,COMP_CNT) ELSE 0 END 
                                   ELSE D.SW2 / DECODE(A.MAT_GRP_1,'HX',1,COMP_CNT)
                              END),0)
                    ),0) AS SW2
             , SUM(NVL((CASE WHEN A.MAT_GRP_1 = 'SE' AND A.MAT_GRP_9 = 'MEMORY' AND A.MAT_GRP_5 <> '-' THEN (CASE WHEN A.MAT_GRP_5 = 'Merge' THEN NVL(D.DA02,0) + NVL(D.DA03,0) + NVL(D.DA04,0) + NVL(D.DA05,0) + NVL(D.DA06,0) + NVL(D.DA07,0) + NVL(D.DA08,0) + NVL(D.DA09,0) ELSE 0 END)
                             WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN DECODE(SUBSTR(MAT_GRP_4,-1), '2', D.DA02, '3', D.DA03, '4', D.DA04, '5', D.DA05, '6', D.DA06, '7', D.DA07, '8', D.DA08, '9', D.DA09, 0)
                             ELSE D.DA0
                        END),0)
                   ) AS DA0
             , SUM(NVL((CASE WHEN A.MAT_GRP_1 = 'SE' AND A.MAT_GRP_9 = 'MEMORY' AND A.MAT_GRP_5 <> '-' THEN (CASE WHEN A.MAT_GRP_5 = 'Merge' THEN NVL(D.DA12,0) + NVL(D.DA13,0) + NVL(D.DA14,0) + NVL(D.DA15,0) + NVL(D.DA16,0) + NVL(D.DA17,0) + NVL(D.DA18,0) + NVL(D.DA19,0) ELSE 0 END)
                             WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN DECODE(SUBSTR(MAT_GRP_4,-1), '2', D.DA12, '3', D.DA13, '4', D.DA14, '5', D.DA15, '6', D.DA16, '7', D.DA17, '8', D.DA18, '9', D.DA19, 0)
                             ELSE D.DA1
                        END),0)
                   ) AS DA1
             , SUM(NVL((CASE WHEN A.MAT_GRP_1 = 'SE' AND A.MAT_GRP_9 = 'MEMORY' AND A.MAT_GRP_5 <> '-' THEN (CASE WHEN A.MAT_GRP_5 = 'Merge' THEN NVL(D.DA22,0) + NVL(D.DA23,0) + NVL(D.DA24,0) + NVL(D.DA25,0) + NVL(D.DA26,0) + NVL(D.DA27,0) + NVL(D.DA28,0) + NVL(D.DA29,0) ELSE 0 END)
                             WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN DECODE(SUBSTR(MAT_GRP_4,-1), '2', D.DA22, '3', D.DA23, '4', D.DA24, '5', D.DA25, '6', D.DA26, '7', D.DA27, '8', D.DA28, '9', D.DA29, 0)
                             ELSE D.DA2
                        END),0)
                   ) AS DA2
             , SUM(NVL((CASE WHEN A.MAT_GRP_1 = 'SE' AND A.MAT_GRP_9 = 'MEMORY' AND A.MAT_GRP_5 <> '-' THEN (CASE WHEN A.MAT_GRP_5 = 'Merge' THEN NVL(D.WB02,0) + NVL(D.WB03,0) + NVL(D.WB04,0) + NVL(D.WB05,0) + NVL(D.WB06,0) + NVL(D.WB07,0) + NVL(D.WB08,0) + NVL(D.WB09,0) ELSE 0 END)
                             WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN DECODE(SUBSTR(MAT_GRP_4,-1), '2', D.WB02, '3', D.WB03, '4', D.WB04, '5', D.WB05, '6', D.WB06, '7', D.WB07, '8', D.WB08, '9', D.WB09, 0)
                             ELSE D.WB0
                        END),0)
                   ) AS WB0
             , SUM(NVL((CASE WHEN A.MAT_GRP_1 = 'SE' AND A.MAT_GRP_9 = 'MEMORY' AND A.MAT_GRP_5 <> '-' THEN (CASE WHEN A.MAT_GRP_5 = 'Merge' THEN NVL(D.WB12,0) + NVL(D.WB13,0) + NVL(D.WB14,0) + NVL(D.WB15,0) + NVL(D.WB16,0) + NVL(D.WB17,0) + NVL(D.WB18,0) + NVL(D.WB19,0) ELSE 0 END)
                             WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN DECODE(SUBSTR(MAT_GRP_4,-1), '2', D.WB12, '3', D.WB13, '4', D.WB14, '5', D.WB15, '6', D.WB16, '7', D.WB17, '8', D.WB18, '9', D.WB19, 0)
                             ELSE D.WB1
                        END),0)
                   ) AS WB1
             , SUM(NVL((CASE WHEN A.MAT_GRP_1 = 'SE' AND A.MAT_GRP_9 = 'MEMORY' AND A.MAT_GRP_5 <> '-' THEN (CASE WHEN A.MAT_GRP_5 = 'Merge' THEN NVL(D.WB22,0) + NVL(D.WB23,0) + NVL(D.WB24,0) + NVL(D.WB25,0) + NVL(D.WB26,0) + NVL(D.WB27,0) + NVL(D.WB28,0) + NVL(D.WB29,0) ELSE 0 END)
                             WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN DECODE(SUBSTR(MAT_GRP_4,-1), '2', D.WB22, '3', D.WB23, '4', D.WB24, '5', D.WB25, '6', D.WB26, '7', D.WB27, '8', D.WB28, '9', D.WB29, 0)
                             ELSE D.WB2
                        END),0)
                   ) AS WB2
             , SUM(NVL(D.MD0,0)) AS MD0, SUM(NVL(D.MD1,0)) AS MD1, SUM(NVL(D.MD2,0)) AS MD2 
             , SUM(NVL(D.TF0,0)) AS TF0, SUM(NVL(D.TF1,0)) AS TF1, SUM(NVL(D.TF2,0)) AS TF2 
             , SUM(NVL(F.V0,0)) AS STOCK
             , SUM(NVL(F.V1,0)+NVL(F.V2,0)) AS SAW
             , SUM(NVL(F.V3,0)+NVL(F.V4,0)+NVL(F.V17,0)) AS DA
             , SUM(NVL(F.V5+F.V16,0)) AS WB
             , SUM(NVL(F.V6,0)+NVL(F.V7,0)) AS MOLD
             , SUM(NVL(F.V8+F.V9+F.V10+F.V11+F.V12+F.V13+F.V14,0)) AS FINISH
             , SUM(NVL(F.V15,0)) AS HMK3A
             , SUM(NVL(F.V0+F.V1+F.V2+F.V3+F.V4+F.V5+F.V6+F.V7+F.V8+F.V9+F.V10+F.V11+F.V12+F.V13+F.V14+F.V15+F.V16+F.V17,0)) AS TTL
             , SUM(HIST_AO) AS HIST_AO 
          FROM ( 
                SELECT MAT.MAT_GRP_1, MAT.MAT_GRP_2, MAT.MAT_GRP_3, MAT.MAT_GRP_4, MAT.MAT_GRP_5, MAT.MAT_GRP_6, MAT.MAT_GRP_7, MAT.MAT_GRP_8 
                     , DECODE(MAT.MAT_GRP_1,'SE',MAT.MAT_GRP_9,' ') AS MAT_GRP_9, MAT.MAT_GRP_10, MAT.MAT_CMF_10, MAT.MAT_ID, MAT.MAT_CMF_7, MAT.NET_DIE, MAT.MAT_CMF_11, MAT.COMP_CNT  
                     , CASE WHEN MAT.MAT_GRP_3 IN ('COB') THEN ROUND(SUM(PLAN.RESV_FIELD1 / MAT.NET_DIE),0)
                            ELSE SUM(PLAN.RESV_FIELD1)
                       END MON_PLAN
                     , CASE WHEN MAT.MAT_GRP_3 IN ('COB') THEN ROUND(SUM(PLAN.PLAN_QTY_ASSY / MAT.NET_DIE),0)
                            ELSE SUM(PLAN.PLAN_QTY_ASSY)
                       END ORI_PLAN
                     , CASE WHEN MAT.MAT_GRP_3 IN ('COB') THEN ROUND(SUM(WEEK_PLAN.WEEK_PLAN / MAT.NET_DIE),0)
                            ELSE SUM(WEEK_PLAN.WEEK_PLAN)
                            END WEEK_PLAN
                     , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN ROUND(SUM(WEEK_AO.WEEK_AO / MAT.NET_DIE),0)
                            ELSE SUM(WEEK_AO.WEEK_AO)
                            END ASSY_WEEK
                     , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN ROUND(SUM(MON_AO.ASSY_MON / MAT.NET_DIE),0)
                            ELSE SUM(MON_AO.ASSY_MON)
                       END ASSY_MON
                     , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN ROUND(SUM(MON_AO.AO0 / MAT.NET_DIE),0)
                            ELSE SUM(MON_AO.AO0)
                       END AO0
                     , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN ROUND(SUM(MON_AO.AO1 / MAT.NET_DIE),0)
                            ELSE SUM(MON_AO.AO1)
                       END AO1
                     , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN ROUND(SUM(MON_AO.AO2 / MAT.NET_DIE),0)
                            ELSE SUM(MON_AO.AO2)
                       END AO2
                     , ROUND(CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN ROUND(SUM(DAY_RCV.RCV0 / MAT.NET_DIE),0)
                                  WHEN MAT.MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND MAT_ID LIKE 'SEKS%') THEN DECODE(MAT.MAT_GRP_5, '2nd', SUM(DAY_RCV.RCV0 / MAT.COMP_CNT), 0)
                                  WHEN MAT.MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT.MAT_GRP_5 <> '-' THEN CASE WHEN MAT.MAT_GRP_5 IN ('1st','Merge') OR MAT.MAT_GRP_5 LIKE 'Middle%' THEN SUM(DAY_RCV.RCV0 / MAT.COMP_CNT) ELSE 0 END 
                                  ELSE SUM(DAY_RCV.RCV0 / MAT.COMP_CNT)
                             END, 0) AS RCV0
                     , ROUND(CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN ROUND(SUM(DAY_RCV.RCV1 / MAT.NET_DIE),0)
                                  WHEN MAT.MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND MAT_ID LIKE 'SEKS%') THEN DECODE(MAT.MAT_GRP_5, '2nd', SUM(DAY_RCV.RCV1 / MAT.COMP_CNT), 0)
                                  WHEN MAT.MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT.MAT_GRP_5 <> '-' THEN CASE WHEN MAT.MAT_GRP_5 IN ('1st','Merge') OR MAT.MAT_GRP_5 LIKE 'Middle%' THEN SUM(DAY_RCV.RCV1 / MAT.COMP_CNT) ELSE 0 END 
                                  ELSE SUM(DAY_RCV.RCV1 / MAT.COMP_CNT)
                             END, 0) AS RCV1
                     , ROUND(CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN ROUND(SUM(DAY_RCV.RCV2 / MAT.NET_DIE),0)
                                  WHEN MAT.MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND MAT_ID LIKE 'SEKS%') THEN DECODE(MAT.MAT_GRP_5, '2nd', SUM(DAY_RCV.RCV2 / MAT.COMP_CNT), 0)
                                  WHEN MAT.MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT.MAT_GRP_5 <> '-' THEN CASE WHEN MAT.MAT_GRP_5 IN ('1st','Merge') OR MAT.MAT_GRP_5 LIKE 'Middle%' THEN SUM(DAY_RCV.RCV2 / MAT.COMP_CNT) ELSE 0 END 
                                  ELSE SUM(DAY_RCV.RCV2 / MAT.COMP_CNT)
                             END, 0) AS RCV2
                     , SUM(HIST_AO.HIST_AO) AS HIST_AO 
                  FROM VWIPMATDEF MAT 
                     , ( 
                        SELECT FACTORY,MAT_ID,PLAN_QTY_ASSY,PLAN_MONTH, RESV_FIELD1 
                          FROM ( 
                                SELECT FACTORY, MAT_ID, SUM(PLAN_QTY_ASSY) AS PLAN_QTY_ASSY, PLAN_MONTH, SUM(RESV_FIELD1) AS RESV_FIELD1  
                                  FROM ( 
                                        SELECT FACTORY, MAT_ID, SUM(PLAN_QTY_ASSY) AS PLAN_QTY_ASSY, PLAN_MONTH, SUM(TO_NUMBER(DECODE(RESV_FIELD1,' ',0,RESV_FIELD1))) AS RESV_FIELD1 
                                          FROM CWIPPLNMON 
                                         WHERE 1=1 
                                           AND FACTORY = 'HMVA2' 
                                         GROUP BY FACTORY, MAT_ID, PLAN_MONTH 
                                       ) 
                                 GROUP BY FACTORY, MAT_ID,PLAN_MONTH 
                               ) 
                       ) PLAN 
                     , ( 
                        SELECT FACTORY,MAT_ID, SUM(WW_QTY) AS WEEK_PLAN 
                          FROM RWIPPLNWEK 
                         WHERE FACTORY = 'HMVA2' 
                           AND PLAN_WEEK = '202015'
                           AND GUBUN = '3' 
                        GROUP BY FACTORY,MAT_ID 
                       ) WEEK_PLAN 
                     , ( 
                        SELECT MAT_ID 
                             , SUM(AO0) AS AO0 
                             , SUM(AO1) AS AO1 
                             , SUM(AO2) AS AO2 
                             , SUM(ASSY_MON) AS ASSY_MON 
                          FROM (
                                SELECT MAT_ID 
                                     , SUM(DECODE(WORK_DATE,'20200407', NVL(S1_FAC_OUT_QTY_1 + S2_FAC_OUT_QTY_1 + S3_FAC_OUT_QTY_1 + S4_FAC_OUT_QTY_1, 0), 0)) AS AO0 
                                     , SUM(DECODE(WORK_DATE,'20200408', NVL(S1_FAC_OUT_QTY_1 + S2_FAC_OUT_QTY_1 + S3_FAC_OUT_QTY_1 + S4_FAC_OUT_QTY_1, 0), 0)) AS AO1
                                     , SUM(DECODE(WORK_DATE,'20200409', NVL(S1_FAC_OUT_QTY_1 + S2_FAC_OUT_QTY_1 + S3_FAC_OUT_QTY_1 + S4_FAC_OUT_QTY_1, 0), 0)) AS AO2
                                     , 0 AS ASSY_MON  
                                  FROM RSUMFACMOV 
                                 WHERE 1=1 
                                   AND WORK_DATE BETWEEN '20200407' AND '20200409'
                                   AND LOT_TYPE = 'W' 
                                   AND CM_KEY_1 = 'HMVA2' 
                                   AND CM_KEY_2 = 'PROD' 
                                   AND CM_KEY_3 LIKE 'P%'
                                   AND FACTORY NOT IN ('RETURN') 
                                 GROUP BY MAT_ID 
                                 UNION ALL 
                                SELECT MAT_ID 
                                     , 0, 0, 0 
                                     , SUM(SHP_QTY_1) AS ASSY_MON 
                                  FROM VSUMWIPOUT 
                                 WHERE 1=1 
                                   AND WORK_DATE BETWEEN '20200401' AND '20200409'
                                   AND FACTORY = 'HMVA2' 
                                   AND LOT_TYPE = 'W' 
                                   AND CM_KEY_2 = 'PROD' 
                                   AND CM_KEY_3 LIKE 'P%'
                                 GROUP BY MAT_ID 
                               ) 
                         GROUP BY MAT_ID 
                       ) MON_AO 
                     , ( 
                        SELECT MAT_ID 
                             , SUM(NVL(S1_FAC_OUT_QTY_1 + S2_FAC_OUT_QTY_1 + S3_FAC_OUT_QTY_1 + S4_FAC_OUT_QTY_1, 0)) AS WEEK_AO  
                          FROM RSUMFACMOV 
                         WHERE 1=1 
                           AND WORK_DATE BETWEEN '20200404' AND '20200409'
                           AND LOT_TYPE = 'W' 
                           AND CM_KEY_1 = 'HMVA2' 
                           AND CM_KEY_2 = 'PROD' 
                           AND CM_KEY_3 LIKE 'P%'
                           AND FACTORY NOT IN ('RETURN') 
                         GROUP BY MAT_ID 
                       ) WEEK_AO 
                     , ( 
                        SELECT MAT_ID 
                             , SUM(DECODE(WORK_DATE,'20200407', NVL(RCV_QTY_1,0), 0)) AS RCV0
                             , SUM(DECODE(WORK_DATE,'20200408', NVL(RCV_QTY_1,0), 0)) AS RCV1
                             , SUM(DECODE(WORK_DATE,'20200409', NVL(RCV_QTY_1,0), 0)) AS RCV2
                          FROM VSUMWIPRCV 
                         WHERE 1=1 
                           AND WORK_DATE BETWEEN '20200407' AND '20200409'
                           AND LOT_TYPE = 'W' 
                           AND FACTORY = 'HMVA2' 
                           AND CM_KEY_2 = 'PROD' 
                           AND CM_KEY_3 LIKE 'P%'
                         GROUP BY MAT_ID 
                       ) DAY_RCV  
                     , ( 
                        SELECT MAT_ID 
                             , SUM(NVL(S1_FAC_OUT_QTY_1 + S2_FAC_OUT_QTY_1 + S3_FAC_OUT_QTY_1 + S4_FAC_OUT_QTY_1, 0)) AS HIST_AO  
                          FROM RSUMFACMOV 
                         WHERE 1=1 
                           AND WORK_DATE BETWEEN TO_CHAR(ADD_MONTHS('20200409', -6), 'YYYYMMDD') AND '20200409'
                           AND LOT_TYPE = 'W' 
                           AND CM_KEY_1 = 'HMVA2' 
                           AND CM_KEY_2 = 'PROD' 
                           AND CM_KEY_3 LIKE 'P%'
                           AND FACTORY NOT IN ('RETURN') 
                         GROUP BY MAT_ID 
                       ) HIST_AO 
                 WHERE 1 = 1 
                   AND MAT.FACTORY =PLAN.FACTORY(+) 
                   AND MAT.FACTORY =WEEK_PLAN.FACTORY(+) 
                   AND MAT.MAT_ID = PLAN.MAT_ID(+) 
                   AND MAT.MAT_ID = WEEK_PLAN.MAT_ID(+) 
                   AND MAT.MAT_ID = MON_AO.MAT_ID(+) 
                   AND MAT.MAT_ID = WEEK_AO.MAT_ID(+) 
                   AND MAT.MAT_ID = DAY_RCV.MAT_ID(+) 
                   AND MAT.MAT_ID = HIST_AO.MAT_ID(+) 
                   AND MAT.FACTORY = 'HMVA2' 
                   AND PLAN.PLAN_MONTH(+) = '202004' 
                   AND MAT.MAT_TYPE= 'FG' 
                   AND MAT.DELETE_FLAG <> 'Y' 
                 GROUP BY MAT.MAT_GRP_1, MAT.MAT_GRP_2, MAT.MAT_GRP_3, MAT.MAT_GRP_4, MAT.MAT_GRP_5, MAT.MAT_GRP_6, MAT.MAT_GRP_7, MAT.MAT_GRP_8, MAT.MAT_GRP_9, MAT.MAT_GRP_10, MAT.MAT_CMF_10, MAT.MAT_ID, MAT.MAT_CMF_7, MAT.NET_DIE, MAT.MAT_CMF_11, MAT.COMP_CNT
               ) A  
             , ( 
                SELECT MAT_ID 
                     , SUM(DECODE(OPER, 'A0200', DECODE(WORK_DATE,'20200407', QTY,0))) AS SW0
                     , SUM(DECODE(OPER, 'A0200', DECODE(WORK_DATE,'20200408', QTY,0))) AS SW1
                     , SUM(DECODE(OPER, 'A0200', DECODE(WORK_DATE,'20200409', QTY,0))) AS SW2
                     , SUM(DECODE(OPER_GRP_7, 'D/A', DECODE(WORK_DATE,'20200407', QTY,0))) AS DA0
                     , SUM(DECODE(OPER_GRP_7, 'D/A', DECODE(WORK_DATE,'20200408', QTY,0))) AS DA1
                     , SUM(DECODE(OPER_GRP_7, 'D/A', DECODE(WORK_DATE,'20200409', QTY,0))) AS DA2
                     , SUM(DECODE(OPER_GRP_7, 'W/B', DECODE(WORK_DATE,'20200407', QTY,0))) AS WB0
                     , SUM(DECODE(OPER_GRP_7, 'W/B', DECODE(WORK_DATE,'20200408', QTY,0))) AS WB1
                     , SUM(DECODE(OPER_GRP_7, 'W/B', DECODE(WORK_DATE,'20200409', QTY,0))) AS WB2
                     , SUM(DECODE(OPER_GRP_7, 'MOLD', DECODE(WORK_DATE,'20200407', QTY,0))) AS MD0
                     , SUM(DECODE(OPER_GRP_7, 'MOLD', DECODE(WORK_DATE,'20200408', QTY,0))) AS MD1
                     , SUM(DECODE(OPER_GRP_7, 'MOLD', DECODE(WORK_DATE,'20200409', QTY,0))) AS MD2
                     , SUM(DECODE(OPER_GRP_7, 'SIG', DECODE(WORK_DATE,'20200407', QTY,0))) AS TF0
                     , SUM(DECODE(OPER_GRP_7, 'SIG', DECODE(WORK_DATE,'20200408', QTY,0))) AS TF1
                     , SUM(DECODE(OPER_GRP_7, 'SIG', DECODE(WORK_DATE,'20200409', QTY,0))) AS TF2
                     , SUM(DECODE(OPER, 'A0402', DECODE(WORK_DATE,'20200407', QTY,0))) AS DA02
                     , SUM(DECODE(OPER, 'A0402', DECODE(WORK_DATE,'20200408', QTY,0))) AS DA12
                     , SUM(DECODE(OPER, 'A0402', DECODE(WORK_DATE,'20200409', QTY,0))) AS DA22
                     , SUM(DECODE(OPER, 'A0403', DECODE(WORK_DATE,'20200407', QTY,0))) AS DA03
                     , SUM(DECODE(OPER, 'A0403', DECODE(WORK_DATE,'20200408', QTY,0))) AS DA13
                     , SUM(DECODE(OPER, 'A0403', DECODE(WORK_DATE,'20200409', QTY,0))) AS DA23
                     , SUM(DECODE(OPER, 'A0404', DECODE(WORK_DATE,'20200407', QTY,0))) AS DA04
                     , SUM(DECODE(OPER, 'A0404', DECODE(WORK_DATE,'20200408', QTY,0))) AS DA14
                     , SUM(DECODE(OPER, 'A0404', DECODE(WORK_DATE,'20200409', QTY,0))) AS DA24
                     , SUM(DECODE(OPER, 'A0405', DECODE(WORK_DATE,'20200407', QTY,0))) AS DA05
                     , SUM(DECODE(OPER, 'A0405', DECODE(WORK_DATE,'20200408', QTY,0))) AS DA15
                     , SUM(DECODE(OPER, 'A0405', DECODE(WORK_DATE,'20200409', QTY,0))) AS DA25
                     , SUM(DECODE(OPER, 'A0406', DECODE(WORK_DATE,'20200407', QTY,0))) AS DA06
                     , SUM(DECODE(OPER, 'A0406', DECODE(WORK_DATE,'20200408', QTY,0))) AS DA16
                     , SUM(DECODE(OPER, 'A0406', DECODE(WORK_DATE,'20200409', QTY,0))) AS DA26
                     , SUM(DECODE(OPER, 'A0407', DECODE(WORK_DATE,'20200407', QTY,0))) AS DA07
                     , SUM(DECODE(OPER, 'A0407', DECODE(WORK_DATE,'20200408', QTY,0))) AS DA17
                     , SUM(DECODE(OPER, 'A0407', DECODE(WORK_DATE,'20200409', QTY,0))) AS DA27
                     , SUM(DECODE(OPER, 'A0408', DECODE(WORK_DATE,'20200407', QTY,0))) AS DA08
                     , SUM(DECODE(OPER, 'A0408', DECODE(WORK_DATE,'20200408', QTY,0))) AS DA18
                     , SUM(DECODE(OPER, 'A0408', DECODE(WORK_DATE,'20200409', QTY,0))) AS DA28
                     , SUM(DECODE(OPER, 'A0409', DECODE(WORK_DATE,'20200407', QTY,0))) AS DA09
                     , SUM(DECODE(OPER, 'A0409', DECODE(WORK_DATE,'20200408', QTY,0))) AS DA19
                     , SUM(DECODE(OPER, 'A0409', DECODE(WORK_DATE,'20200409', QTY,0))) AS DA29
                     , SUM(DECODE(OPER, 'A0602', DECODE(WORK_DATE,'20200407', QTY,0))) AS WB02
                     , SUM(DECODE(OPER, 'A0602', DECODE(WORK_DATE,'20200408', QTY,0))) AS WB12
                     , SUM(DECODE(OPER, 'A0602', DECODE(WORK_DATE,'20200409', QTY,0))) AS WB22
                     , SUM(DECODE(OPER, 'A0603', DECODE(WORK_DATE,'20200407', QTY,0))) AS WB03
                     , SUM(DECODE(OPER, 'A0603', DECODE(WORK_DATE,'20200408', QTY,0))) AS WB13
                     , SUM(DECODE(OPER, 'A0603', DECODE(WORK_DATE,'20200409', QTY,0))) AS WB23
                     , SUM(DECODE(OPER, 'A0604', DECODE(WORK_DATE,'20200407', QTY,0))) AS WB04
                     , SUM(DECODE(OPER, 'A0604', DECODE(WORK_DATE,'20200408', QTY,0))) AS WB14
                     , SUM(DECODE(OPER, 'A0604', DECODE(WORK_DATE,'20200409', QTY,0))) AS WB24
                     , SUM(DECODE(OPER, 'A0605', DECODE(WORK_DATE,'20200407', QTY,0))) AS WB05
                     , SUM(DECODE(OPER, 'A0605', DECODE(WORK_DATE,'20200408', QTY,0))) AS WB15
                     , SUM(DECODE(OPER, 'A0605', DECODE(WORK_DATE,'20200409', QTY,0))) AS WB25 
                     , SUM(DECODE(OPER, 'A0606', DECODE(WORK_DATE,'20200407', QTY,0))) AS WB06
                     , SUM(DECODE(OPER, 'A0606', DECODE(WORK_DATE,'20200408', QTY,0))) AS WB16
                     , SUM(DECODE(OPER, 'A0606', DECODE(WORK_DATE,'20200409', QTY,0))) AS WB26 
                     , SUM(DECODE(OPER, 'A0607', DECODE(WORK_DATE,'20200407', QTY,0))) AS WB07
                     , SUM(DECODE(OPER, 'A0607', DECODE(WORK_DATE,'20200408', QTY,0))) AS WB17
                     , SUM(DECODE(OPER, 'A0607', DECODE(WORK_DATE,'20200409', QTY,0))) AS WB27 
                     , SUM(DECODE(OPER, 'A0608', DECODE(WORK_DATE,'20200407', QTY,0))) AS WB08
                     , SUM(DECODE(OPER, 'A0608', DECODE(WORK_DATE,'20200408', QTY,0))) AS WB18
                     , SUM(DECODE(OPER, 'A0608', DECODE(WORK_DATE,'20200409', QTY,0))) AS WB28 
                     , SUM(DECODE(OPER, 'A0609', DECODE(WORK_DATE,'20200407', QTY,0))) AS WB09
                     , SUM(DECODE(OPER, 'A0609', DECODE(WORK_DATE,'20200408', QTY,0))) AS WB19
                     , SUM(DECODE(OPER, 'A0609', DECODE(WORK_DATE,'20200409', QTY,0))) AS WB29 
                  FROM ( 
                        SELECT A.MAT_ID,A.WORK_DATE,B.OPER,B.OPER_GRP_7 
                             , SUM(A.S1_END_QTY_1 + A.S2_END_QTY_1 + A.S3_END_QTY_1 + A.S1_END_RWK_QTY_1 + A.S2_END_RWK_QTY_1 + A.S3_END_RWK_QTY_1 ) AS QTY 
                          FROM RSUMWIPMOV A 
                             , MWIPOPRDEF B 
                         WHERE 1=1 
                           AND A.FACTORY = B.FACTORY 
                           AND A.OPER = B.OPER 
                           AND A.FACTORY = 'HMVA2' 
                           AND B.OPER_GRP_7 IN ('SAW','D/A','W/B','MOLD','SIG','V/I') 
                           AND A.MAT_VER = 1 
                           AND A.CM_KEY_3 LIKE 'P%'
                           AND A.WORK_DATE BETWEEN '20200407' AND '20200409'
                           AND A.LOT_TYPE = 'W'
                           AND A.OPER <> 'A1760'
                         GROUP BY A.MAT_ID, A.WORK_DATE,B.OPER,B.OPER_GRP_7 
                       ) 
                 GROUP BY MAT_ID 
               ) D  
             , ( 
                SELECT MAT_ID 
                     , ROUND(SUM(DECODE(OPER_GRP_1, 'HMK2A', QTY, 0)), 0) AS V0 
                     , ROUND(SUM(DECODE(OPER_GRP_1, 'B/G', QTY, 0)), 0) AS V1 
                     , ROUND(SUM(DECODE(OPER_GRP_1, 'SAW', QTY, 0)), 0) AS V2 
                     , ROUND(SUM(DECODE(OPER_GRP_1, 'S/P', QTY, 0)), 0) AS V3 
                     , ROUND(SUM(DECODE(OPER_GRP_1, 'D/A', QTY, 0)), 0) AS V4 
                     , ROUND(SUM(DECODE(OPER_GRP_1, 'W/B', QTY, 0)), 0) AS V5 
                     , ROUND(SUM(DECODE(OPER_GRP_1, 'MOLD', QTY, 0)), 0) AS V6 
                     , ROUND(SUM(DECODE(OPER_GRP_1, 'CURE', QTY, 0)), 0) AS V7 
                     , ROUND(SUM(DECODE(OPER_GRP_1, 'M/K', QTY, 0)), 0) AS V8 
                     , ROUND(SUM(DECODE(OPER_GRP_1, 'TRIM', QTY, 0)), 0) AS V9 
                     , ROUND(SUM(DECODE(OPER_GRP_1, 'TIN', QTY, 0)), 0) AS V10 
                     , ROUND(SUM(DECODE(OPER_GRP_1, 'S/B/A', QTY, 0)), 0) AS V11 
                     , ROUND(SUM(DECODE(OPER_GRP_1, 'SIG', QTY, 0)), 0) AS V12 
                     , ROUND(SUM(DECODE(OPER_GRP_1, 'AVI', QTY, 0)), 0) AS V13 
                     , ROUND(SUM(DECODE(OPER_GRP_1, 'V/I', QTY, 0)), 0) AS V14 
                     , ROUND(SUM(DECODE(OPER_GRP_1, 'HMK3A', QTY, 0)), 0) AS V15 
                     , ROUND(SUM(DECODE(OPER_GRP_1, 'GATE', QTY, 0)), 0) AS V16 
                     , ROUND(SUM(DECODE(OPER_GRP_1, 'SMT', QTY, 0)), 0) AS V17 
                  FROM (  
                        SELECT MAT_ID, OPER, OPER_GRP_1 
                             , CASE WHEN MAT_GRP_1 = 'HX' AND HX_COMP_MIN IS NOT NULL
                                         THEN (CASE WHEN HX_COMP_MIN <> HX_COMP_MAX AND OPER > HX_COMP_MIN AND OPER <= HX_COMP_MAX THEN QTY_1 / NVL(COMP_CNT / 2,1)
                                                    WHEN OPER <= HX_COMP_MAX THEN QTY_1 / NVL(COMP_CNT,1)
                                                    ELSE QTY_1 END)
                                    WHEN OPER <= 'A0395' THEN QTY_1 / NVL(COMP_CNT,1) 
                                    ELSE QTY_1 
                               END QTY 
                          FROM ( 
                                SELECT A.MAT_ID, B.OPER, C.MAT_GRP_1  
                                     , CASE WHEN C.MAT_GRP_3 IN ('FCBGA', 'FCFBGA') AND B.OPER = 'A0800' THEN 'D/A' ELSE B.OPER_GRP_1 END OPER_GRP_1  
                                     , CASE WHEN MAT_GRP_3 IN ('COB', 'BGN') THEN QTY_1/NET_DIE ELSE QTY_1 END AS QTY_1
                                     , COMP_CNT  
                                     , HX_COMP_MIN, HX_COMP_MAX 
                                  FROM RWIPLOTSTS A  
                                     , MWIPOPRDEF B  
                                     , VWIPMATDEF C 
                                 WHERE 1 = 1 
                                   AND A.FACTORY = B.FACTORY 
                                   AND A.FACTORY = C.FACTORY 
                                   AND A.OPER = B.OPER 
                                   AND A.MAT_ID = C.MAT_ID 
                                   AND A.FACTORY = 'HMVA2'  
                                   AND A.LOT_TYPE = 'W' 
                                   AND A.LOT_DEL_FLAG = ' ' 
                                   AND C.DELETE_FLAG = ' ' 
                                   AND C.MAT_GRP_2 <> '-' 
                                   AND A.HOLD_CODE NOT IN ('H71','H54') 
                                   AND REGEXP_LIKE(C.MAT_GRP_5, 'Middle*|Merge|1st|-') 
                                   AND A.LOT_CMF_5 LIKE 'P%'
                               ) 
                       )  
                 GROUP BY MAT_ID 
               ) F 
         WHERE 1 = 1 
           AND A.MAT_ID = D.MAT_ID(+)
           AND A.MAT_ID = F.MAT_ID(+)
           AND A.MAT_ID LIKE '%' 
         GROUP BY A.MAT_GRP_1, A.MAT_GRP_9, A.MAT_GRP_10,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' '
        HAVING (
                NVL(SUM(A.MON_PLAN), 0)+ 
                NVL(SUM(A.ORI_PLAN), 0)+ 
                NVL(SUM(A.ASSY_MON), 0)+ 
                NVL(SUM(A.WEEK_PLAN), 0)+ 
                NVL(SUM(A.AO0), 0)+ NVL(SUM(A.AO1), 0)+ NVL(SUM(A.AO2), 0)+ 
                NVL(SUM(A.RCV0), 0)+ NVL(SUM(A.RCV1), 0)+ NVL(SUM(A.RCV2), 0)+ 
                NVL(SUM(D.SW0), 0)+ NVL(SUM(D.SW1), 0)+ NVL(SUM(D.SW2), 0)+ 
                NVL(SUM(D.DA0), 0)+ NVL(SUM(D.DA1), 0)+ NVL(SUM(D.DA2), 0)+ 
                NVL(SUM(D.WB0), 0)+ NVL(SUM(D.WB1), 0)+ NVL(SUM(D.WB2), 0)+ 
                NVL(SUM(D.MD0), 0)+ NVL(SUM(D.MD1), 0)+ NVL(SUM(D.MD2), 0)+  
                NVL(SUM(D.TF0), 0)+ NVL(SUM(D.TF0), 0)+ NVL(SUM(D.TF0), 0)+ 
                NVL(SUM(F.V0+F.V1+F.V2+F.V3+F.V4+F.V5+F.V6+F.V7+F.V8+F.V9+F.V10+F.V11+F.V12+F.V13+F.V14+F.V15+F.V16+F.V17), 0)  
               ) <> 0
       ) A 
     , ( 
        SELECT MAT_GRP_1 AS CUSTOMER
             , MAT_GRP_10 AS PKG 
             , SUM(DECODE(SHIP_DATE,'20200407', TAT, 0)) AS TAT0 
             , SUM(DECODE(SHIP_DATE,'20200408', TAT, 0)) AS TAT1 
             , SUM(DECODE(SHIP_DATE,'20200409', TAT, 0)) AS TAT2 
          FROM ( 
                SELECT MAT.MAT_GRP_1,MAT.MAT_GRP_10,TAT.SHIP_DATE,SUM(TAT.TOTAL_TAT_QTY),SUM(SHIP.SHIP_QTY),ROUND(DECODE(SUM(SHIP.SHIP_QTY),0,0,(SUM(TAT.TOTAL_TAT_QTY)/SUM(SHIP.SHIP_QTY))),4) AS TAT 
                  FROM ( 
                        SELECT FACTORY,MAT_ID,SHIP_DATE 
                             , ROUND(SUM(TOTAL_TAT_QTY),4) AS TOTAL_TAT_QTY 
                          FROM CSUMTATMAT@RPTTOMES 
                         WHERE 1=1 
                           AND FACTORY = 'HMVA2' 
                           AND OPER <> 'A0000' 
                           AND SHIP_DATE BETWEEN '20200407' AND '20200409'
                         GROUP BY FACTORY,MAT_ID,SHIP_DATE 
                       ) TAT 
                     , ( 
                        SELECT FACTORY,MAT_ID,SHIP_DATE,SHIP_QTY 
                          FROM CSUMTATMAT@RPTTOMES 
                         WHERE 1=1 
                           AND FACTORY = 'HMVA2' 
                           AND OPER = 'AZ010' 
                           AND SHIP_DATE BETWEEN '20200407' AND '20200409'
                       ) SHIP 
                     , MWIPMATDEF MAT 
                 WHERE 1=1 
                   AND TAT.FACTORY = SHIP.FACTORY 
                   AND TAT.MAT_ID = SHIP.MAT_ID 
                   AND TAT.SHIP_DATE = SHIP.SHIP_DATE 
                   AND TAT.MAT_ID = MAT.MAT_ID 
                   AND MAT.MAT_TYPE = 'FG' 
                   AND MAT.DELETE_FLAG <> 'Y' 
                   AND MAT.FACTORY = 'HMVA2' 
                 GROUP BY MAT_GRP_1,MAT_GRP_10,TAT.SHIP_DATE
               ) 
         GROUP BY MAT_GRP_1, MAT_GRP_10 
       ) B  
 WHERE 1=1 
   AND A.CUSTOMER = B.CUSTOMER(+) 
   AND A.PKG = B.PKG(+) 
   AND A.PKG <> '-' 
   AND NVL(ORI_PLAN,0) + NVL(MON_PLAN,0) + NVL(TARGET_MON,0) + NVL(ASSY_MON,0) + NVL(WEEK_PLAN,0) + NVL(DEF,0) + NVL(AO0,0) + NVL(AO1,0) + NVL(AO2,0) + NVL(A.RCV0,0) + NVL(A.RCV1,0) + NVL(A.RCV2,0) + NVL(A.SW0,0) 
     + NVL(A.SW1,0) + NVL(A.SW2,0) + NVL(A.DA0,0) + NVL(A.DA1,0) + NVL(A.DA2,0) + NVL(A.WB0,0) + NVL(A.WB1,0) + NVL(A.WB2,0) + NVL(A.MD0,0) + NVL(A.MD1,0) + NVL(A.MD2,0) + NVL(A.TF0,0) 
     + NVL(A.TF1,0) + NVL(A.TF2,0) + NVL(TTL,0) <> 0 
 ORDER BY DECODE(A.CUSTOMER, 'SE', 1, 'HX', 2, 'IM', 3, 'FC', 4, 'IG', 5, 6),CUSTOMER, A.MAJOR, A.PKG,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' '

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
SELECT LANGUAGE_2 FROM RWEBFUNDEF WHERE FUNC_NAME = 'PRD011007'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT CUST_TYPE, NVL((SELECT DATA_1 FROM MGCMTBLDAT WHERE TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = MAT_GRP_1 AND ROWNUM=1), '-') AS CUSTOMER, MAT_GRP_9, MAT_GRP_10,  ' ',  ' ',  ' ' 
     , ROUND(SUM(ORI_PLAN * PRICE) / 1000, 0) AS ORI_PLAN
     , ROUND(SUM(REV_PLAN * PRICE) / 1000, 0) AS REV_PLAN
     , ROUND(SUM(BOH_QTY * PRICE) / 1000, 0) AS BOH_QTY
     , ROUND(SUM(RCV_QTY * PRICE) / 1000, 0) AS RCV_QTY
     , ROUND(SUM((NVL(BOH_QTY,0) + NVL(RCV_QTY,0)) * PRICE) / 1000, 0) AS WSH_QTY
     , ROUND(DECODE(SUM(ORI_PLAN), 0, 0, ROUND(SUM(NVL(BOH_QTY,0) + NVL(RCV_QTY,0)) / SUM(ORI_PLAN) * 100,1)), 0) AS ORI_PER
     , ROUND(DECODE(SUM(REV_PLAN), 0, 0, ROUND(SUM(NVL(BOH_QTY,0) + NVL(RCV_QTY,0)) / SUM(REV_PLAN) * 100,1)), 0) AS REV_PER
     , ROUND(SUM(RCV_0 * PRICE) / 1000, 0)  AS RCV_0
     , ROUND(SUM(RCV_1 * PRICE) / 1000, 0)  AS RCV_1
     , ROUND(SUM(RCV_2 * PRICE) / 1000, 0)  AS RCV_2
     , ROUND(SUM(RCV_3 * PRICE) / 1000, 0)  AS RCV_3
     , ROUND(SUM(RCV_4 * PRICE) / 1000, 0)  AS RCV_4
     , ROUND(SUM(RCV_5 * PRICE) / 1000, 0)  AS RCV_5
     , ROUND(SUM(RCV_6 * PRICE) / 1000, 0)  AS RCV_6
     , ROUND(SUM(RCV_7 * PRICE) / 1000, 0)  AS RCV_7
     , ROUND(SUM(RCV_8 * PRICE) / 1000, 0)  AS RCV_8
  FROM (
        SELECT MAT.*
             , NVL((SELECT DATA_10 FROM MGCMTBLDAT WHERE TABLE_NAME = 'H_CUSTOMER' AND FACTORY = 'HMVA2' AND  KEY_1 = MAT_GRP_1), '-') AS CUST_TYPE
             , CASE WHEN MAT_GRP_3 IN ('COB', 'BGN') THEN ROUND(PLN.ORI_PLAN/DECODE(MAT_CMF_13,' ', 1, '-', 1, MAT_CMF_13),0) ELSE PLN.ORI_PLAN END AS ORI_PLAN
             , CASE WHEN MAT_GRP_3 IN ('COB', 'BGN') THEN ROUND(PLN.REV_PLAN/DECODE(MAT_CMF_13,' ', 1, '-', 1, MAT_CMF_13),0) ELSE PLN.REV_PLAN END AS REV_PLAN
             , CASE WHEN MAT_GRP_3 IN ('COB', 'BGN') THEN ROUND(BOH.BOH_QTY/DECODE(MAT_CMF_13,' ', 1, '-', 1, MAT_CMF_13),0)
                    WHEN MAT_CMF_11 IN ('DHL', 'DQZ', 'DQA', 'DRA', 'DND', 'DWG', 'DUT', 'HAU', 'HF8', 'HDM', 'HDR', 'HEN', 'HQA', 'HQC') THEN (CASE WHEN MAT_GRP_5 IN ('3rd','Merge') THEN BOH.BOH_QTY
                                                                                             WHEN MAT_GRP_5 LIKE 'Middle%' AND MAT_GRP_5 <> 'Middle' THEN BOH.BOH_QTY
                                                                                             ELSE 0 END)
                    WHEN MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND (MAT_ID LIKE 'SEKS%' OR MAT_ID LIKE 'SEKY%'))
                         THEN (CASE WHEN MAT_GRP_5 IN ('2nd','Merge') OR MAT_GRP_5 LIKE 'Middle%' THEN BOH.BOH_QTY ELSE 0 END)
                    WHEN MAT_GRP_1 = 'HX' AND MESMGR.F_GET_ATTR_VALUE@RPTTOMES(MAT.MAT_ID, 'MAT_ETC', 'HX_VERSION') = 'A-376'
                         THEN (CASE WHEN MAT_GRP_5 IN ('5th','Merge') THEN BOH.BOH_QTY ELSE 0 END)
                    WHEN MAT_GRP_1 = 'HX' AND MESMGR.F_GET_ATTR_VALUE@RPTTOMES(MAT.MAT_ID, 'MAT_ETC', 'HX_VERSION') IN ('A-445', 'A-525')
                         THEN (CASE WHEN MAT_GRP_5 IN ('6th','Merge') THEN BOH.BOH_QTY ELSE 0 END)
                    WHEN MAT_GRP_1 = 'HX' AND MESMGR.F_GET_ATTR_VALUE@RPTTOMES(MAT.MAT_ID, 'MAT_ETC', 'HX_VERSION') = 'A-524'
                         THEN (CASE WHEN MAT_GRP_5 IN ('7th','Merge') THEN BOH.BOH_QTY ELSE 0 END)
                    WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' 
                         THEN (CASE WHEN MAT_GRP_5 IN ('1st','Merge') OR MAT_GRP_5 LIKE 'Middle%' THEN BOH.BOH_QTY ELSE 0 END)
                    ELSE BOH.BOH_QTY
               END BOH_QTY
             , RCV.*
             , 1 AS PRICE
          FROM MWIPMATDEF MAT
             , (
                SELECT MAT_ID
                     , SUM(PLAN_QTY_ASSY) AS ORI_PLAN 
                     , SUM(DECODE(RESV_FIELD1, ' ', 0, RESV_FIELD1)) AS REV_PLAN
                  FROM CWIPPLNMON
                 WHERE 1=1
                   AND FACTORY = 'HMVA2'
                   AND PLAN_MONTH = '202004' 
                   AND PLAN_QTY_ASSY + DECODE(RESV_FIELD1, ' ', 0, RESV_FIELD1) > 0 
                 GROUP BY MAT_ID
               ) PLN
             , (
                SELECT MAT_ID
                     , SUM(CASE WHEN MESMGR.F_GET_ATTR_VALUE@RPTTOMES(MAT_ID, 'MAT_ETC', 'HX_VERSION') IN ('A-376', 'A-445')
                                     THEN (CASE WHEN OPER <= 'A0015' THEN QTY_1 / NVL(COMP_CNT,1) ELSE QTY_1 END)
                                ELSE (CASE WHEN OPER <= 'A0395' THEN QTY_1 / NVL(COMP_CNT,1) ELSE QTY_1 END)
                           END) AS BOH_QTY
                  FROM (
                        SELECT MAT_ID
                             , OPER
                             , EOH_QTY_1 AS QTY_1
                             , (SELECT DATA_1 FROM MGCMTBLDAT WHERE FACTORY = 'HMVA2' AND TABLE_NAME IN ('H_SEC_AUTO_LOSS','H_HX_AUTO_LOSS') AND KEY_1 = A.MAT_ID) AS COMP_CNT 
                          FROM RSUMWIPEOH A
                         WHERE 1=1
                           AND FACTORY = 'HMVA2'
                           AND WORK_DATE = TO_CHAR(TO_DATE('202004' || '01')-1, 'YYYYMMDD')
                           AND SHIFT = '3'
                           AND LOT_TYPE = 'W'
                           AND MAT_ID NOT LIKE 'HX%' 
                           AND CM_KEY_3 LIKE 'P%' 
                         UNION ALL 
                        SELECT MAT_ID
                             , OPER
                             , EOH_QTY_1 AS QTY_1
                             , (SELECT DATA_1 FROM MGCMTBLDAT WHERE FACTORY = 'HMVA2' AND TABLE_NAME IN ('H_SEC_AUTO_LOSS','H_HX_AUTO_LOSS') AND KEY_1 = A.MAT_ID) AS COMP_CNT 
                          FROM RSUMWIPEOH A
                         WHERE 1=1
                           AND FACTORY = 'HMVA2'
                           AND WORK_DATE = '20200401'
                           AND SHIFT = '1'
                           AND LOT_TYPE = 'W'
                           AND MAT_ID LIKE 'HX%' 
                           AND CM_KEY_3 LIKE 'P%' 
                       )
                 GROUP BY MAT_ID
               ) BOH
             , (
                SELECT MAT_ID AS PRODUCT 
                     , SUM(QTY / NVL(COMP_CNT,1)) AS RCV_QTY
                     , SUM(DECODE(WORK_DATE, '20200401', QTY / NVL(COMP_CNT,1), 0)) AS RCV_0
                     , SUM(DECODE(WORK_DATE, '20200402', QTY / NVL(COMP_CNT,1), 0)) AS RCV_1
                     , SUM(DECODE(WORK_DATE, '20200403', QTY / NVL(COMP_CNT,1), 0)) AS RCV_2
                     , SUM(DECODE(WORK_DATE, '20200404', QTY / NVL(COMP_CNT,1), 0)) AS RCV_3
                     , SUM(DECODE(WORK_DATE, '20200405', QTY / NVL(COMP_CNT,1), 0)) AS RCV_4
                     , SUM(DECODE(WORK_DATE, '20200406', QTY / NVL(COMP_CNT,1), 0)) AS RCV_5
                     , SUM(DECODE(WORK_DATE, '20200407', QTY / NVL(COMP_CNT,1), 0)) AS RCV_6
                     , SUM(DECODE(WORK_DATE, '20200408', QTY / NVL(COMP_CNT,1), 0)) AS RCV_7
                     , SUM(DECODE(WORK_DATE, '20200409', QTY / NVL(COMP_CNT,1), 0)) AS RCV_8
                  FROM (
                        SELECT A.WORK_DATE, A.MAT_ID
                             , CASE WHEN MAT_GRP_3 IN ('COB', 'BGN') THEN ROUND(RCV_QTY_1/DECODE(MAT_CMF_13,' ', 1, '-', 1, MAT_CMF_13),0)
                                    WHEN MAT_CMF_11 = 'JZH' THEN ROUND(RCV_QTY_1 / 2,0)
                                    WHEN MAT_CMF_11 IN ('DHL', 'DQZ', 'DQA', 'DRA', 'DND', 'DWG', 'DUT', 'HAU', 'HF8', 'HDM', 'HDR', 'HEN', 'HQA', 'HQC') THEN DECODE(MAT_GRP_5, '3rd', RCV_QTY_1, 0)
                                    WHEN MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND (MAT_ID LIKE 'SEKS%' OR MAT_ID LIKE 'SEKY%'))
                                         THEN DECODE(MAT_GRP_5, '2nd', RCV_QTY_1, 0)
                                    WHEN MAT_GRP_1 = 'HX' AND MESMGR.F_GET_ATTR_VALUE@RPTTOMES(A.MAT_ID, 'MAT_ETC', 'HX_VERSION') = 'A-376'
                                         THEN DECODE(MAT_GRP_5, '5th', RCV_QTY_1, 0)
                                    WHEN MAT_GRP_1 = 'HX' AND MESMGR.F_GET_ATTR_VALUE@RPTTOMES(A.MAT_ID, 'MAT_ETC', 'HX_VERSION') IN ('A-445', 'A-525')
                                         THEN DECODE(MAT_GRP_5, '6th', RCV_QTY_1, 0)
                                    WHEN MAT_GRP_1 = 'HX' AND MESMGR.F_GET_ATTR_VALUE@RPTTOMES(A.MAT_ID, 'MAT_ETC', 'HX_VERSION') = 'A-524'
                                         THEN DECODE(MAT_GRP_5, '7th', RCV_QTY_1, 0)
                                    WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN CASE WHEN MAT_GRP_5 IN ('1st','Merge') THEN RCV_QTY_1 ELSE 0 END
                                    ELSE RCV_QTY_1
                                END QTY
                             , (SELECT DATA_1 FROM MGCMTBLDAT WHERE FACTORY = 'HMVA2' AND TABLE_NAME IN ('H_SEC_AUTO_LOSS','H_HX_AUTO_LOSS') AND KEY_1 = A.MAT_ID) AS COMP_CNT 
                          FROM (
                                SELECT A.*
                                     , B.WORK_DATE, B.RCV_QTY_1, B.RCV_QTY_2
                                  FROM MWIPMATDEF A
                                     , (
                                        SELECT *
                                          FROM VSUMWIPRCV 
                                         WHERE 1=1
                                           AND WORK_DATE BETWEEN '20200401' AND '20200409'
                                           AND LOT_TYPE = 'W'
                                           AND FACTORY = 'HMVA2'
                                           AND CM_KEY_2 = 'PROD'   
                                           AND CM_KEY_3 LIKE 'P%'
                                           AND MAT_ID NOT LIKE 'HX%'
                                         UNION ALL
                                        SELECT *
                                          FROM VSUMWIPRCV_HX 
                                         WHERE 1=1
                                           AND WORK_DATE BETWEEN '20200401' AND '20200409'
                                           AND LOT_TYPE = 'W'
                                           AND FACTORY = 'HMVA2'
                                           AND CM_KEY_2 = 'PROD'   
                                           AND CM_KEY_3 LIKE 'P%'
                                           AND MAT_ID LIKE 'HX%'
                                       ) B
                                 WHERE 1=1
                                   AND A.FACTORY = B.FACTORY
                                   AND A.MAT_ID = B.MAT_ID
                               ) A
                       )
                 GROUP BY MAT_ID
               ) RCV
         WHERE 1=1
           AND MAT.MAT_ID = PLN.MAT_ID(+)
           AND MAT.MAT_ID = BOH.MAT_ID(+)
           AND MAT.MAT_ID = RCV.PRODUCT(+)
           AND MAT.FACTORY = 'HMVA2'
           AND MAT.DELETE_FLAG = ' '
           AND MAT.MAT_TYPE = 'FG'
           AND MAT.MAT_GRP_2 NOT IN ('-', 'PW')
           AND MAT.MAT_ID LIKE '%'
       ) 
 GROUP BY CUST_TYPE, MAT_GRP_1, MAT_GRP_9, MAT_GRP_10,  ' ',  ' ',  ' ' 
 HAVING SUM(NVL(ORI_PLAN,0)) + SUM(NVL(REV_PLAN,0)) + SUM(NVL(BOH_QTY,0)) + SUM(NVL(RCV_QTY,0)) > 0
 ORDER BY DECODE(CUST_TYPE, 'SEC', 1, 'Hynix', 2, 'Fabless', 3, 4), MAT_GRP_1, MAT_GRP_9, MAT_GRP_10,  ' ',  ' ',  ' ' 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
SELECT MIN(SYS_DATE) AS START_DAY 
     , MAX(SYS_DATE) AS END_DAY 
     , PLAN_YEAR||DECODE(LENGTH(PLAN_WEEK), 1, '0'||PLAN_WEEK, PLAN_WEEK) AS WEEK
  FROM MWIPCALDEF 
 WHERE CALENDAR_ID = 'OTD'
   AND (PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) IN ( 
                                                SELECT WW
                                                  FROM (
                                                        SELECT WW
                                                             , ROW_NUMBER() OVER(ORDER BY WW) AS RNK
                                                          FROM (
                                                                SELECT DISTINCT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW
                                                                  FROM MWIPCALDEF
                                                                 WHERE CALENDAR_ID = 'OTD'
                                                                   AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') >= (
                                                                                                              SELECT MAX(PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) AS WW
                                                                                                                FROM MWIPCALDEF
                                                                                                               WHERE CALENDAR_ID = 'OTD'
                                                                                                                 AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') < (SELECT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW FROM MWIPCALDEF WHERE CALENDAR_ID = 'OTD' AND SYS_DATE = '20200409')
                                                                                                                 AND SYS_DATE >= TO_CHAR(TO_DATE('20200409', 'YYYYMMDD')-14, 'YYYYMMDD')
                                                                                                             )
                                                               ) 
                                                       )
                                                 WHERE RNK <= 7
                                               ) 
 GROUP BY PLAN_YEAR, PLAN_WEEK 
 ORDER BY PLAN_YEAR, PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE) AS START_DAY 
     , MAX(SYS_DATE) AS END_DAY 
     , PLAN_YEAR||DECODE(LENGTH(PLAN_WEEK), 1, '0'||PLAN_WEEK, PLAN_WEEK) AS WEEK
  FROM MWIPCALDEF 
 WHERE CALENDAR_ID = 'SE'
   AND (PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) IN ( 
                                                SELECT WW
                                                  FROM (
                                                        SELECT WW
                                                             , ROW_NUMBER() OVER(ORDER BY WW) AS RNK
                                                          FROM (
                                                                SELECT DISTINCT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW
                                                                  FROM MWIPCALDEF
                                                                 WHERE CALENDAR_ID = 'SE'
                                                                   AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') >= (
                                                                                                              SELECT MAX(PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) AS WW
                                                                                                                FROM MWIPCALDEF
                                                                                                               WHERE CALENDAR_ID = 'SE'
                                                                                                                 AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') < (SELECT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW FROM MWIPCALDEF WHERE CALENDAR_ID = 'SE' AND SYS_DATE = '20200409')
                                                                                                                 AND SYS_DATE >= TO_CHAR(TO_DATE('20200409', 'YYYYMMDD')-14, 'YYYYMMDD')
                                                                                                             )
                                                               ) 
                                                       )
                                                 WHERE RNK <= 7
                                               ) 
 GROUP BY PLAN_YEAR, PLAN_WEEK 
 ORDER BY PLAN_YEAR, PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT LANGUAGE_2 FROM RWEBFUNDEF WHERE FUNC_NAME = 'PRD011015'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE) AS START_DAY 
     , MAX(SYS_DATE) AS END_DAY 
     , PLAN_YEAR||DECODE(LENGTH(PLAN_WEEK), 1, '0'||PLAN_WEEK, PLAN_WEEK) AS WEEK
  FROM MWIPCALDEF 
 WHERE CALENDAR_ID = 'OTD'
   AND (PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) IN ( 
                                                SELECT WW
                                                  FROM (
                                                        SELECT WW
                                                             , ROW_NUMBER() OVER(ORDER BY WW) AS RNK
                                                          FROM (
                                                                SELECT DISTINCT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW
                                                                  FROM MWIPCALDEF
                                                                 WHERE CALENDAR_ID = 'OTD'
                                                                   AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') >= (
                                                                                                              SELECT MAX(PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) AS WW
                                                                                                                FROM MWIPCALDEF
                                                                                                               WHERE CALENDAR_ID = 'OTD'
                                                                                                                 AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') < (SELECT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW FROM MWIPCALDEF WHERE CALENDAR_ID = 'OTD' AND SYS_DATE = '20200409')
                                                                                                                 AND SYS_DATE >= TO_CHAR(TO_DATE('20200409', 'YYYYMMDD')-14, 'YYYYMMDD')
                                                                                                             )
                                                               ) 
                                                       )
                                                 WHERE RNK <= 7
                                               ) 
 GROUP BY PLAN_YEAR, PLAN_WEEK 
 ORDER BY PLAN_YEAR, PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE) AS START_DAY 
     , MAX(SYS_DATE) AS END_DAY 
     , PLAN_YEAR||DECODE(LENGTH(PLAN_WEEK), 1, '0'||PLAN_WEEK, PLAN_WEEK) AS WEEK
  FROM MWIPCALDEF 
 WHERE CALENDAR_ID = 'SE'
   AND (PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) IN ( 
                                                SELECT WW
                                                  FROM (
                                                        SELECT WW
                                                             , ROW_NUMBER() OVER(ORDER BY WW) AS RNK
                                                          FROM (
                                                                SELECT DISTINCT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW
                                                                  FROM MWIPCALDEF
                                                                 WHERE CALENDAR_ID = 'SE'
                                                                   AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') >= (
                                                                                                              SELECT MAX(PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) AS WW
                                                                                                                FROM MWIPCALDEF
                                                                                                               WHERE CALENDAR_ID = 'SE'
                                                                                                                 AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') < (SELECT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW FROM MWIPCALDEF WHERE CALENDAR_ID = 'SE' AND SYS_DATE = '20200409')
                                                                                                                 AND SYS_DATE >= TO_CHAR(TO_DATE('20200409', 'YYYYMMDD')-14, 'YYYYMMDD')
                                                                                                             )
                                                               ) 
                                                       )
                                                 WHERE RNK <= 7
                                               ) 
 GROUP BY PLAN_YEAR, PLAN_WEEK 
 ORDER BY PLAN_YEAR, PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT (SELECT DATA_1 FROM MGCMTBLDAT@RPTTOMES WHERE FACTORY = 'HMVA2' AND TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = MAT_GRP_1) AS CUSTOMER, MAT_GRP_9 AS MAJOR, MAT_GRP_10 AS PKG, MAT_GRP_6 AS LD_COUNT, MAT_CMF_11 AS PKG_CODE,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ' 
     , ROUND(SUM(PLAN)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS PLAN 
     , ROUND(SUM(SHP)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS SHP 
     , ROUND(SUM(DEF)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS DEF 
     , GUBUN 
     , ROUND(SUM(HMK3A)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS HMK3A 
     , ROUND(SUM(QC_GATE)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS QC_GATE 
     , ROUND(SUM(PVI)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS PVI 
     , ROUND(SUM(AVI)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS AVI 
     , ROUND(SUM(SIG)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS SIG 
     , ROUND(SUM(SBA)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS SBA 
     , ROUND(SUM(TIN)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS TIN 
     , ROUND(SUM(TRIM)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS TRIM 
     , ROUND(SUM(MK)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS MK 
     , ROUND(SUM(CURE)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS CURE 
     , ROUND(SUM(MOLD)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS MOLD 
     , ROUND(SUM(GATE)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS GATE 
     , ROUND(SUM(WB9)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS WB9 
     , ROUND(SUM(DA9)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS DA9 
     , ROUND(SUM(WB8)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS WB8 
     , ROUND(SUM(DA8)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS DA8 
     , ROUND(SUM(WB7)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS WB7 
     , ROUND(SUM(DA7)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS DA7 
     , ROUND(SUM(WB6)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS WB6 
     , ROUND(SUM(DA6)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS DA6 
     , ROUND(SUM(WB5)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS WB5 
     , ROUND(SUM(DA5)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS DA5 
     , ROUND(SUM(WB4)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS WB4 
     , ROUND(SUM(DA4)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS DA4 
     , ROUND(SUM(WB3)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS WB3 
     , ROUND(SUM(DA3)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS DA3 
     , ROUND(SUM(WB2)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS WB2 
     , ROUND(SUM(DA2)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS DA2 
     , ROUND(SUM(WB1)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS WB1 
     , ROUND(SUM(DA1)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS DA1 
     , ROUND(SUM(SP)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS SP 
     , ROUND(SUM(SAW)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS SAW 
     , ROUND(SUM(BG)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS BG 
     , ROUND(SUM(HMK2A)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS HMK2A 
     , ROUND(SUM(WIP_DEF)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS WIP_DEF 
  FROM (  
        SELECT MAT_GRP_1, MAT_GRP_9, MAT_GRP_10, MAT_GRP_6, MAT_CMF_11,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', GUBUN 
             , MAX(PLAN) AS PLAN 
             , MAX(SHP) AS SHP 
             , MAX(DEF) AS DEF 
             , SUM(DECODE(OPER_GRP_1, 'HMK3A', SUM_DEF, 0)) AS HMK3A 
             , SUM(DECODE(OPER_GRP_1, 'QC_GATE', SUM_DEF, 0)) AS QC_GATE 
             , SUM(DECODE(OPER_GRP_1, 'PVI', SUM_DEF, 0)) AS PVI 
             , SUM(DECODE(OPER_GRP_1, 'AVI', SUM_DEF, 0)) AS AVI 
             , SUM(DECODE(OPER_GRP_1, 'SIG', SUM_DEF, 0)) AS SIG 
             , SUM(DECODE(OPER_GRP_1, 'SBA', SUM_DEF, 0)) AS SBA 
             , SUM(DECODE(OPER_GRP_1, 'TIN', SUM_DEF, 0)) AS TIN 
             , SUM(DECODE(OPER_GRP_1, 'TRIM', SUM_DEF, 0)) AS TRIM 
             , SUM(DECODE(OPER_GRP_1, 'MK', SUM_DEF, 0)) AS MK 
             , SUM(DECODE(OPER_GRP_1, 'CURE', SUM_DEF, 0)) AS CURE 
             , SUM(DECODE(OPER_GRP_1, 'MOLD', SUM_DEF, 0)) AS MOLD 
             , SUM(DECODE(OPER_GRP_1, 'GATE', SUM_DEF, 0)) AS GATE 
             , SUM(DECODE(OPER_GRP_1, 'WB9', SUM_DEF, 0)) AS WB9 
             , SUM(DECODE(OPER_GRP_1, 'DA9', SUM_DEF, 0)) AS DA9 
             , SUM(DECODE(OPER_GRP_1, 'WB8', SUM_DEF, 0)) AS WB8 
             , SUM(DECODE(OPER_GRP_1, 'DA8', SUM_DEF, 0)) AS DA8 
             , SUM(DECODE(OPER_GRP_1, 'WB7', SUM_DEF, 0)) AS WB7 
             , SUM(DECODE(OPER_GRP_1, 'DA7', SUM_DEF, 0)) AS DA7 
             , SUM(DECODE(OPER_GRP_1, 'WB6', SUM_DEF, 0)) AS WB6 
             , SUM(DECODE(OPER_GRP_1, 'DA6', SUM_DEF, 0)) AS DA6 
             , SUM(DECODE(OPER_GRP_1, 'WB5', SUM_DEF, 0)) AS WB5 
             , SUM(DECODE(OPER_GRP_1, 'DA5', SUM_DEF, 0)) AS DA5 
             , SUM(DECODE(OPER_GRP_1, 'WB4', SUM_DEF, 0)) AS WB4 
             , SUM(DECODE(OPER_GRP_1, 'DA4', SUM_DEF, 0)) AS DA4 
             , SUM(DECODE(OPER_GRP_1, 'WB3', SUM_DEF, 0)) AS WB3 
             , SUM(DECODE(OPER_GRP_1, 'DA3', SUM_DEF, 0)) AS DA3 
             , SUM(DECODE(OPER_GRP_1, 'WB2', SUM_DEF, 0)) AS WB2 
             , SUM(DECODE(OPER_GRP_1, 'DA2', SUM_DEF, 0)) AS DA2 
             , SUM(DECODE(OPER_GRP_1, 'WB1', SUM_DEF, 0)) AS WB1 
             , SUM(DECODE(OPER_GRP_1, 'DA1', SUM_DEF, 0)) AS DA1 
             , SUM(DECODE(OPER_GRP_1, 'SP', SUM_DEF, 0)) AS SP 
             , SUM(DECODE(OPER_GRP_1, 'SAW', SUM_DEF, 0)) AS SAW 
             , SUM(DECODE(OPER_GRP_1, 'BG', SUM_DEF, 0)) AS BG 
             , SUM(DECODE(OPER_GRP_1, 'HMK2A',SUM_DEF, 0)) AS HMK2A 
             , MAX(WIP_TTL) AS WIP_TTL 
             , MAX(DEF) - MAX(WIP_TTL) AS WIP_DEF 
          FROM ( 
                SELECT MAT_GRP_1, MAT_GRP_9, MAT_GRP_10, MAT_GRP_6, MAT_CMF_11,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ' 
                     , OPER_GRP_1 
                     , DECODE(SEQ, 1, 'WIP', 2, '설비대수', 3, 'CAPA현황', 4, '당일 실적', 5, 'D0 잔량', 6, 'D1 잔량', 7, 'D2 잔량', 8, '당주 잔량', 9, '차주 잔량', 10, '월간 잔량') AS GUBUN 
                     , SUM(DECODE(SEQ, 1, 0, 2, 0, 3, 0, 4, 0, 5, D0_PLAN, 6, D1_PLAN, 7, D2_PLAN, 8, WEEK_PLAN, 9, WEEK2_PLAN, 10, MON_PLAN)) AS PLAN  
                     , SUM(DECODE(SEQ, 1, 0, 2, 0, 3, 0, 4, 0, 5, SHP_TODAY, 6, SHP_D1, 7, SHP_D2, 8, SHP_WEEK, 9, SHP2_WEEK, 10, SHP_MONTH)) AS SHP 
                     , SUM(DECODE(SEQ, 1, 0, 2, 0, 3, 0, 4, 0, 5, D0_DEF, 6, D1_DEF, 7, D2_DEF, 8, WEEK_DEF, 9, WEEK2_DEF, 10, MONTH_DEF)) AS DEF 
                     , SUM(DECODE(SEQ, 1, WIP_QTY, 2, RES_CNT, 3, RES_CAPA, 4, ASSY_END_QTY, 5, D0_SUM_QUANTITY, 6, D1_SUM_QUANTITY, 7, D2_SUM_QUANTITY, 8, WEEK_SUM_QUANTITY, 9, WEEK2_SUM_QUANTITY, 10, MONTH_SUM_QUANTITY)) AS SUM_DEF 
                     , MAX(DECODE(SEQ, 1, 0, 2, 0, 3, 0, 4, 0, WIP_TTL)) AS WIP_TTL 
                  FROM ( 
                        SELECT MAT_GRP_1, MAT_GRP_9, MAT_GRP_10, MAT_GRP_6, MAT_CMF_11,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', OPER_GRP_1 
                             , SUM(NVL(D0_PLAN,0)) AS D0_PLAN, SUM(NVL(SHP_TODAY,0)) AS SHP_TODAY, SUM(NVL(D0_DEF,0)) AS D0_DEF 
                             , SUM(NVL(D1_PLAN,0)) AS D1_PLAN, SUM(NVL(SHP_D1,0)) AS SHP_D1, SUM(NVL(D1_DEF,0)) AS D1_DEF 
                             , SUM(NVL(D2_PLAN,0)) AS D2_PLAN, SUM(NVL(SHP_D2,0)) AS SHP_D2, SUM(NVL(D2_DEF,0)) AS D2_DEF 
                             , SUM(NVL(WEEK_PLAN,0)) AS WEEK_PLAN, SUM(NVL(SHP_WEEK,0)) AS SHP_WEEK, SUM(NVL(WEEK_DEF,0)) AS WEEK_DEF 
                             , SUM(NVL(WEEK2_PLAN,0)) AS WEEK2_PLAN, SUM(NVL(SHP2_WEEK,0)) AS SHP2_WEEK, SUM(NVL(WEEK2_DEF,0)) AS WEEK2_DEF 
                             , SUM(NVL(MON_PLAN,0)) AS MON_PLAN, SUM(NVL(SHP_MONTH,0)) AS SHP_MONTH, SUM(NVL(MONTH_DEF,0)) AS MONTH_DEF 
                             , SUM(NVL(ASSY_END_QTY,0)) AS ASSY_END_QTY 
                             , SUM(NVL(WIP_QTY,0)) AS WIP_QTY 
                             , SUM(SUM(WIP_QTY)) OVER(PARTITION BY MAT_GRP_1, MAT_GRP_9, MAT_GRP_10, MAT_GRP_6, MAT_CMF_11,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ') AS WIP_TTL 
                             , SUM(RES_CNT) AS RES_CNT 
                             , SUM(RES_CAPA) AS RES_CAPA 
                             , SUM(NVL(D0_DEF-WIP_SUM_QUANTITY+WIP_QTY,0)) AS D0_SUM_QUANTITY 
                             , SUM(NVL(D1_DEF-WIP_SUM_QUANTITY+WIP_QTY,0)) AS D1_SUM_QUANTITY 
                             , SUM(NVL(D2_DEF-WIP_SUM_QUANTITY+WIP_QTY,0)) AS D2_SUM_QUANTITY 
                             , SUM(NVL(WEEK_DEF-WIP_SUM_QUANTITY+WIP_QTY,0)) AS WEEK_SUM_QUANTITY 
                             , SUM(NVL(WEEK2_DEF-WIP_SUM_QUANTITY+WIP_QTY,0)) AS WEEK2_SUM_QUANTITY 
                             , SUM(NVL(MONTH_DEF-WIP_SUM_QUANTITY+WIP_QTY,0)) AS MONTH_SUM_QUANTITY 
                          FROM ( 
                                SELECT MAT.MAT_GRP_1, MAT.MAT_GRP_2, MAT.MAT_GRP_4, MAT.MAT_GRP_5, MAT.MAT_GRP_6, MAT.MAT_GRP_7, MAT.MAT_GRP_8, MAT.MAT_GRP_9, MAT.MAT_GRP_10, MAT.MAT_CMF_10, MAT.MAT_CMF_7, MAT.MAT_CMF_8, MAT.MAT_CMF_11, MAT.MAT_ID, MAT.CONV_MAT_ID, MAT.OPER_GRP_1 
                                     , A.D0_PLAN, A.SHP_TODAY, A.D0_DEF 
                                     , A.D1_PLAN, A.SHP_D1, A.D1_DEF 
                                     , A.D2_PLAN, A.SHP_D2, A.D2_DEF 
                                     , A.WEEK_PLAN, A.SHP_WEEK, A.WEEK_DEF 
                                     , A.WEEK2_PLAN, A.SHP2_WEEK, A.WEEK2_DEF 
                                     , A.MON_PLAN, A.SHP_MONTH, A.MONTH_DEF 
                                     , A.D0_ORI_PLAN 
                                     , NVL(B.ASSY_END_QTY,0) AS ASSY_END_QTY 
                                     , MAX(NVL(B.ASSY_END_QTY,0)) OVER(PARTITION BY MAT.MAT_GRP_1, MAT.MAT_GRP_9, MAT.MAT_GRP_10, MAT.MAT_GRP_6, MAT.MAT_CMF_11,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ') AS CHK_ASSY_END_QTY 
                                     , NVL(WIP.QTY,0) AS WIP_QTY 
                                     , RES_CNT 
                                     , RES_CAPA 
                                     , SUM(NVL(WIP.QTY,0)) OVER(PARTITION BY A.MAT_ID ORDER BY MAT.MAT_ID, DECODE(MAT.OPER_GRP_1, 'HMK3A', 1, 'QC_GATE', 2, 'PVI', 3, 'AVI', 4, 'SIG', 5, 'SBA', 6, 'TIN', 7, 'TRIM', 8, 'MK', 9, 'CURE', 10, 'MOLD', 11, 'GATE', 12 
                                                                                                                                , 'WB9', 13, 'DA9', 14, 'WB8', 15, 'DA8', 16, 'WB7', 17, 'DA7', 18, 'WB6', 19, 'DA6', 20, 'WB5', 21, 'DA5', 22, 'WB4', 23, 'DA4', 24 
                                                                                                                                , 'WB3', 25, 'DA3', 26, 'WB2', 27, 'DA2', 28, 'WB1', 29, 'DA1', 30, 'SP', 31, 'SAW', 32, 'BG', 33, 'HMK2A',34, 35)) AS WIP_SUM_QUANTITY 
                                  FROM ( 
                                        SELECT MAT_GRP_1, MAT_GRP_2, MAT_GRP_4, MAT_GRP_5, MAT_GRP_6, MAT_GRP_7, MAT_GRP_8, MAT_GRP_9, MAT_GRP_10, MAT_CMF_10, MAT_CMF_7, MAT_CMF_8, MAT_CMF_11, MAT_ID, OPER_GRP_1 
                                             , CASE WHEN MAT_GRP_1 = 'SE' AND MAT_GRP_9 = 'MEMORY' THEN 'SEK_________-___' || SUBSTR(MAT_ID, -3) 
                                                    WHEN MAT_GRP_1 = 'HX' THEN MAT_CMF_10 
                                                    ELSE MAT_ID 
                                                END CONV_MAT_ID 
                                          FROM ( 
                                                SELECT * 
                                                  FROM (
                                                        SELECT A.* 
                                                          FROM MWIPMATDEF A
                                                         WHERE 1=1 
                                                           AND FACTORY = 'HMVA2' 
                                                           AND DELETE_FLAG = ' ' 
                                                           AND MAT_TYPE = 'FG' 
                                                           AND MAT_ID LIKE '%' 
                                                           AND MAT_GRP_10 NOT LIKE 'COB%' 
                                                       ) 
                                               ) 
                                             , ( 
                                                SELECT DECODE(LEVEL, 1, 'HMK3A', 2, 'QC_GATE', 3, 'PVI', 4, 'AVI', 5, 'SIG', 6, 'SBA', 7, 'TIN', 8, 'TRIM', 9, 'MK', 10, 'CURE', 11, 'MOLD', 12, 'GATE' 
                                                                   , 13, 'WB9', 14, 'DA9', 15, 'WB8', 16, 'DA8', 17, 'WB7', 18, 'DA7', 19, 'WB6', 20, 'DA6', 21, 'WB5', 22, 'DA5', 23, 'WB4', 24, 'DA4'
                                                                   , 25, 'WB3', 26, 'DA3', 27, 'WB2', 28, 'DA2', 29, 'WB1', 30, 'DA1', 31, 'SP', 32, 'SAW', 33, 'BG', 34, 'HMK2A' 
                                                             ) OPER_GRP_1 
                                                  FROM DUAL CONNECT BY LEVEL <= 34 
                                               ) 
                                       ) MAT 
                                     , ( 
                                        SELECT MAT.MAT_ID 
                                             , SUM(NVL(D0_PLAN, 0) + (NVL(WEEK1_TTL, 0) - NVL(SHP_WEEK_TTL, 0))) AS D0_PLAN 
                                             , SUM(NVL(D0_PLAN, 0)) AS D0_ORI_PLAN 
                                             , SUM(NVL(SHP_TODAY, 0)) AS SHP_TODAY 
                                             , SUM(NVL(D0_PLAN, 0) + (NVL(WEEK1_TTL, 0) - NVL(SHP_WEEK_TTL, 0)) - NVL(SHP_TODAY, 0)) AS D0_DEF 
                                             , SUM(NVL(D1_PLAN, 0)) AS D1_PLAN 
                                             , 0 AS SHP_D1 
                                             , SUM(NVL(D1_PLAN, 0) + NVL(D0_PLAN, 0) + (NVL(WEEK1_TTL, 0) - NVL(SHP_WEEK_TTL, 0)) - NVL(SHP_TODAY, 0)) AS D1_DEF 
                                             , SUM(NVL(D2_PLAN, 0)) AS D2_PLAN 
                                             , 0 AS SHP_D2 
                                             , SUM(NVL(D2_PLAN, 0) + NVL(D1_PLAN, 0) + NVL(D0_PLAN, 0) + (NVL(WEEK1_TTL, 0) - NVL(SHP_WEEK_TTL, 0)) - NVL(SHP_TODAY, 0)) AS D2_DEF 
                                             , SUM(NVL(WEEK1_PLAN, 0)) AS WEEK_PLAN 
                                             , SUM(NVL(SHP_WEEK, 0)) AS SHP_WEEK 
                                             , SUM(NVL(WEEK1_PLAN, 0) - NVL(SHP_WEEK, 0)) AS WEEK_DEF 
                                             , SUM(NVL(WEEK2_PLAN, 0)) AS WEEK2_PLAN 
                                             , 0 AS SHP2_WEEK 
                                             , SUM(NVL(WEEK2_PLAN, 0) + NVL(WEEK1_PLAN, 0) - NVL(SHP_WEEK, 0)) AS WEEK2_DEF 
                                             , SUM(NVL(CASE WHEN MAT.MAT_GRP_3 IN ('COB') THEN ROUND(MON.RESV_FIELD1/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0) 
                                                    ELSE MON.RESV_FIELD1 
                                                END,0)) MON_PLAN 
                                             , SUM(NVL(SHP_MONTH, 0)) AS SHP_MONTH 
                                             , SUM(NVL(CASE WHEN MAT.MAT_GRP_3 IN ('COB') THEN ROUND(NVL(MON.RESV_FIELD1,0)/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0)-NVL(SHP_MONTH, 0) 
                                                    ELSE NVL(MON.RESV_FIELD1, 0)-NVL(SHP_MONTH, 0) 
                                                END,0)) MONTH_DEF 
                                          FROM MWIPMATDEF MAT 
                                             , ( 
                                                SELECT FACTORY, MAT_ID 
                                                     , SUM(CASE WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 1 THEN D0_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 2 THEN D0_QTY + D1_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 3 THEN D0_QTY + D1_QTY + D2_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 4 THEN D0_QTY + D1_QTY + D2_QTY + D3_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 5 THEN D0_QTY + D1_QTY + D2_QTY + D3_QTY + D4_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 6 THEN D0_QTY + D1_QTY + D2_QTY + D3_QTY + D4_QTY + D5_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 3 THEN D0_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 4 THEN D0_QTY + D1_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 5 THEN D0_QTY + D1_QTY + D2_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 6 THEN D0_QTY + D1_QTY + D2_QTY + D3_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 7 THEN D0_QTY + D1_QTY + D2_QTY + D3_QTY + D4_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 1 THEN D0_QTY + D1_QTY + D2_QTY + D3_QTY + D4_QTY + D5_QTY 
                                                                ELSE 0 
                                                           END) AS WEEK1_TTL 
                                                     , SUM(W1_QTY) AS WEEK1_PLAN 
                                                     , SUM(W2_QTY) AS WEEK2_PLAN 
                                                     , SUM(NVL(W1_QTY,0) + NVL(W2_QTY,0)) AS WEEK_TTL 
                                                     , SUM(CASE WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 7 THEN D0_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 1 THEN D1_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 2 THEN D2_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 3 THEN D3_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 4 THEN D4_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 5 THEN D5_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 6 THEN D6_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 2 THEN D0_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 3 THEN D1_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 4 THEN D2_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 5 THEN D3_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 6 THEN D4_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 7 THEN D5_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 1 THEN D6_QTY 
                                                                ELSE 0 
                                                           END) AS D0_PLAN 
                                                     , SUM(CASE WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 7 THEN D1_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 1 THEN D2_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 2 THEN D3_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 3 THEN D4_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 4 THEN D5_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 5 THEN D6_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 6 THEN D7_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 2 THEN D1_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 3 THEN D2_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 4 THEN D3_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 5 THEN D4_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 6 THEN D5_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 7 THEN D6_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 1 THEN D7_QTY 
                                                                ELSE 0 
                                                           END) AS D1_PLAN 
                                                     , SUM(CASE WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 7 THEN D2_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 1 THEN D3_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 2 THEN D4_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 3 THEN D5_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 4 THEN D6_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 5 THEN D7_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 6 THEN D8_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 2 THEN D2_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 3 THEN D3_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 4 THEN D4_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 5 THEN D5_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 6 THEN D6_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 7 THEN D7_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 1 THEN D8_QTY 
                                                                ELSE 0 
                                                           END) AS D2_PLAN 
                                                  FROM ( 
                                                        SELECT FACTORY, MAT_ID, 'OTD' AS CALENDAR_ID 
                                                             , SUM(DECODE(PLAN_WEEK, '202015', D0_QTY, 0)) AS D0_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202015', D1_QTY, 0)) AS D1_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202015', D2_QTY, 0)) AS D2_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202015', D3_QTY, 0)) AS D3_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202015', D4_QTY, 0)) AS D4_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202015', D5_QTY, 0)) AS D5_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202015', D6_QTY, 0)) AS D6_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202016', D0_QTY, 0)) AS D7_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202016', D1_QTY, 0)) AS D8_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202016', D2_QTY, 0)) AS D9_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202016', D3_QTY, 0)) AS D10_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202016', D4_QTY, 0)) AS D11_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202016', D5_QTY, 0)) AS D12_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202016', D6_QTY, 0)) AS D13_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202015', WW_QTY, 0)) AS W1_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202016', WW_QTY, 0)) AS W2_QTY  
                                                          FROM RWIPPLNWEK  
                                                         WHERE 1=1  
                                                           AND FACTORY = 'HMVA2'  
                                                           AND GUBUN = '3'  
                                                           AND MAT_ID NOT LIKE 'SES%' 
                                                           AND PLAN_WEEK IN ('202015','202016') 
                                                         GROUP BY FACTORY, MAT_ID  
                                                         UNION ALL 
                                                        SELECT FACTORY, MAT_ID, 'SE' AS CALENDAR_ID  
                                                             , SUM(DECODE(PLAN_WEEK, '202015', D0_QTY, 0)) AS D0_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202015', D1_QTY, 0)) AS D1_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202015', D2_QTY, 0)) AS D2_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202015', D3_QTY, 0)) AS D3_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202015', D4_QTY, 0)) AS D4_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202015', D5_QTY, 0)) AS D5_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202015', D6_QTY, 0)) AS D6_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202016', D0_QTY, 0)) AS D7_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202016', D1_QTY, 0)) AS D8_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202016', D2_QTY, 0)) AS D9_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202016', D3_QTY, 0)) AS D10_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202016', D4_QTY, 0)) AS D11_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202016', D5_QTY, 0)) AS D12_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202016', D6_QTY, 0)) AS D13_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202015', WW_QTY, 0)) AS W1_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202016', WW_QTY, 0)) AS W2_QTY  
                                                          FROM RWIPPLNWEK  
                                                         WHERE 1=1  
                                                           AND FACTORY = 'HMVA2'  
                                                           AND GUBUN = '3'  
                                                           AND MAT_ID LIKE 'SES%' 
                                                           AND PLAN_WEEK IN ('202015','202016') 
                                                         GROUP BY FACTORY, MAT_ID  
                                                       )  
                                                 GROUP BY FACTORY, MAT_ID  
                                               ) PLN 
                                             , (  
                                                SELECT FACTORY,MAT_ID, RESV_FIELD1  
                                                  FROM (  
                                                        SELECT FACTORY, MAT_ID, SUM(RESV_FIELD1) AS RESV_FIELD1   
                                                          FROM (  
                                                                SELECT FACTORY, MAT_ID, SUM(TO_NUMBER(DECODE(RESV_FIELD1,' ',0,RESV_FIELD1))) AS RESV_FIELD1  
                                                                  FROM CWIPPLNMON  
                                                                 WHERE 1=1  
                                                                   AND FACTORY = 'HMVA2'  
                                                                   AND PLAN_MONTH = '202004' 
                                                                 GROUP BY FACTORY, MAT_ID 
                                                               )  
                                                         GROUP BY FACTORY, MAT_ID 
                                                       ) 
                                               ) MON 
                                             , (  
                                                SELECT MAT_ID  
                                                     , SUM(CASE WHEN SHP_QTY_1 > 0 AND WORK_DATE = '20200409' THEN NVL(SHP_QTY_1, 0) ELSE 0 END) AS SHP_TODAY  
                                                     , SUM(CASE WHEN SHP_QTY_1 > 0 AND MAT_ID LIKE 'SES%' AND WORK_DATE BETWEEN '20200406' AND '20200409' THEN NVL(SHP_QTY_1, 0)  
                                                                WHEN SHP_QTY_1 > 0 AND MAT_ID NOT LIKE 'SES%' AND WORK_DATE BETWEEN '20200404' AND '20200409' THEN NVL(SHP_QTY_1, 0) 
                                                                ELSE 0 END) AS SHP_WEEK  
                                                     , SUM(CASE WHEN SHP_QTY_1 > 0 AND MAT_ID LIKE 'SES%' AND WORK_DATE BETWEEN '20200406' AND '20200408' THEN NVL(SHP_QTY_1, 0)  
                                                                WHEN SHP_QTY_1 > 0 AND MAT_ID NOT LIKE 'SES%' AND WORK_DATE BETWEEN '20200404' AND '20200408' THEN NVL(SHP_QTY_1, 0)  
                                                                ELSE 0 END) AS SHP_WEEK_TTL  
                                                     , SUM(CASE WHEN WORK_DATE BETWEEN '20200401' AND '20200409' THEN NVL(SHP_QTY_1, 0) END) AS SHP_MONTH  
                                                  FROM VSUMWIPOUT 
                                                 WHERE 1=1  
                                                   AND FACTORY  = 'HMVA2'  
                                                   AND LOT_TYPE = 'W'  
                                                   AND CM_KEY_2 = 'PROD'  
                                                   AND CM_KEY_3 LIKE 'P%'
                                                   AND MAT_ID NOT LIKE 'HX%'  
                                                   AND WORK_DATE BETWEEN LEAST('20200401', '20200404', '20200406') AND '20200409' 
                                                 GROUP BY MAT_ID  
                                                 UNION ALL  
                                                SELECT MAT_ID  
                                                     , SUM(CASE WHEN SHP_QTY_1 > 0 AND WORK_DATE = '20200409' THEN NVL(SHP_QTY_1, 0) ELSE 0 END) AS SHP_TODAY  
                                                     , SUM(CASE WHEN SHP_QTY_1 > 0 AND WORK_DATE BETWEEN '20200404' AND '20200409' THEN NVL(SHP_QTY_1, 0) ELSE 0 END) AS SHP_WEEK  
                                                     , SUM(CASE WHEN SHP_QTY_1 > 0 AND WORK_DATE BETWEEN '20200404' AND '20200408' THEN NVL(SHP_QTY_1, 0) ELSE 0 END) AS SHP_WEEK_TTL  
                                                     , SUM(CASE WHEN WORK_DATE BETWEEN '20200401' AND '20200409' THEN NVL(SHP_QTY_1, 0) END) AS SHP_MONTH  
                                                  FROM VSUMWIPOUT_06 
                                                 WHERE 1=1  
                                                   AND FACTORY  = 'HMVA2'  
                                                   AND LOT_TYPE = 'W'  
                                                   AND CM_KEY_2 = 'PROD'  
                                                   AND CM_KEY_3 LIKE 'P%'
                                                   AND MAT_ID LIKE 'HX%'  
                                                   AND WORK_DATE BETWEEN '20200401' AND '20200409' 
                                                 GROUP BY MAT_ID 
                                               ) SHP 
                                         WHERE 1=1 
                                           AND MAT.FACTORY = 'HMVA2' 
                                           AND MAT.MAT_TYPE = 'FG' 
                                           AND MAT.DELETE_FLAG = ' ' 
                                           AND MAT.MAT_ID = PLN.MAT_ID(+) 
                                           AND MAT.MAT_ID = MON.MAT_ID(+) 
                                           AND MAT.MAT_ID = SHP.MAT_ID(+) 
                                         GROUP BY MAT.MAT_ID 
                                         ORDER BY MAT.MAT_ID 
                                       ) A 
                                     , ( 
                                        SELECT MAT_ID, OPER_GRP_1 
                                             , SUM(ASSY_END_QTY) AS ASSY_END_QTY 
                                          FROM ( 
                                                SELECT B.MAT_ID 
                                                     , CASE WHEN OPER IN ('A0000', 'A000N') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'HMK2A' 
                                                            WHEN OPER IN ('A0040') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'BG' 
                                                            WHEN OPER IN ('A0200', 'A0230') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'SAW' 
                                                            WHEN OPER IN ('A0400', 'A0401', 'A0333') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'DA1' 
                                                            WHEN OPER IN ('A0402') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'DA2' 
                                                            WHEN OPER IN ('A0403') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'DA3' 
                                                            WHEN OPER IN ('A0404') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'DA4' 
                                                            WHEN OPER IN ('A0405') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'DA5' 
                                                            WHEN OPER IN ('A0406') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'DA6' 
                                                            WHEN OPER IN ('A0407') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'DA7' 
                                                            WHEN OPER IN ('A0408') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'DA8' 
                                                            WHEN OPER IN ('A0409') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'DA9' 
                                                            WHEN OPER IN ('A0600','A0601') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'WB1' 
                                                            WHEN OPER IN ('A0602') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'WB2' 
                                                            WHEN OPER IN ('A0603') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'WB3' 
                                                            WHEN OPER IN ('A0604') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'WB4' 
                                                            WHEN OPER IN ('A0605') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'WB5' 
                                                            WHEN OPER IN ('A0606') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'WB6' 
                                                            WHEN OPER IN ('A0607') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'WB7' 
                                                            WHEN OPER IN ('A0608') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'WB8' 
                                                            WHEN OPER IN ('A0609') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'WB9' 
                                                            WHEN OPER IN ('A0800', 'A0801', 'A0802', 'A0803', 'A0804', 'A0805', 'A0806', 'A0807', 'A0808', 'A0809') AND MAT_GRP_5 IN ('-', 'Merge') THEN 'GATE' 
                                                            WHEN OPER IN ('A1000', 'A0910') THEN 'MOLD' 
                                                            WHEN OPER IN ('A1100') THEN 'CURE' 
                                                            WHEN OPER IN ('A1150', 'A1500') THEN 'MK' 
                                                            WHEN OPER IN ('A1200') THEN 'TRIM' 
                                                            WHEN OPER IN ('A1450') THEN 'TIN' 
                                                            WHEN OPER IN ('A1300') THEN 'SBA' 
                                                            WHEN OPER IN ('A1750', 'A1800', 'A1900', 'A1825') THEN 'SIG' 
                                                            WHEN OPER IN ('A2000') THEN 'AVI' 
                                                            WHEN OPER IN ('A2050') THEN 'PVI' 
                                                            WHEN OPER IN ('A2100') THEN 'QC_GATE' 
                                                            WHEN OPER IN ('AZ010') THEN 'HMK3A' 
                                                            ELSE ' ' 
                                                        END OPER_GRP_1 
                                                     , (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END) ASSY_END_QTY 
                                                  FROM ( 
                                                        SELECT FACTORY, MAT_ID, OPER, LOT_TYPE, WORK_DATE, CM_KEY_3 
                                                             , SUM(END_LOT) AS END_LOT 
                                                             , SUM(END_QTY_1) AS END_QTY_1 
                                                             , SUM(END_QTY_2) AS END_QTY_2 
                                                             , SUM(CASE WHEN SHIP_QTY_1 > 0 THEN SHIP_QTY_1 ELSE 0 END) AS SHIP_QTY_1 
                                                             , SUM(CASE WHEN SHIP_QTY_2 > 0 THEN SHIP_QTY_2 ELSE 0 END) AS SHIP_QTY_2 
                                                          FROM ( 
                                                                SELECT FACTORY, MAT_ID, OPER, LOT_TYPE, WORK_DATE, CM_KEY_3 
                                                                     , DECODE(SUBSTR(OPER,2,4),'0000',SUM(S1_OPER_IN_LOT+S2_OPER_IN_LOT+S3_OPER_IN_LOT),SUM(S1_END_LOT+S2_END_LOT+S3_END_LOT)) END_LOT 
                                                                     , DECODE(SUBSTR(OPER,2,4),'0000',SUM(S1_OPER_IN_QTY_1+S2_OPER_IN_QTY_1+S3_OPER_IN_QTY_1),SUM(S1_END_QTY_1+S2_END_QTY_1+S3_END_QTY_1+S1_END_RWK_QTY_1 + S2_END_RWK_QTY_1 + S3_END_RWK_QTY_1)) END_QTY_1 
                                                                     , DECODE(SUBSTR(OPER,2,4),'0000',SUM(S1_OPER_IN_QTY_2+S2_OPER_IN_QTY_2+S3_OPER_IN_QTY_2),SUM(S1_END_QTY_2+S2_END_QTY_2+S3_END_QTY_2+S1_END_RWK_QTY_2 + S2_END_RWK_QTY_2 + S3_END_RWK_QTY_2)) END_QTY_2 
                                                                     , 0 SHIP_QTY_1 
                                                                     , 0 SHIP_QTY_2 
                                                                  FROM RSUMWIPMOV 
                                                                 WHERE FACTORY = 'HMVA2' 
                                                                   AND OPER NOT IN ('AZ010') 
                                                                   AND MAT_ID NOT LIKE 'HX%' 
                                                                 GROUP BY FACTORY, MAT_ID, OPER, LOT_TYPE, WORK_DATE, CM_KEY_3 
                                                                 UNION ALL 
                                                                SELECT FACTORY, MAT_ID 
                                                                     , 'AZ010' AS OPER 
                                                                     , LOT_TYPE, WORK_DATE, CM_KEY_3 
                                                                     , 0 END_LOT 
                                                                     , 0 END_QTY_1 
                                                                     , 0 END_QTY_2 
                                                                     , SUM(SHP_QTY_1) SHIP_QTY_1 
                                                                     , SUM(SHP_QTY_2) SHIP_QTY_2 
                                                                  FROM VSUMWIPOUT 
                                                                 WHERE FACTORY = 'HMVA2' 
                                                                   AND MAT_ID NOT LIKE 'HX%' 
                                                                 GROUP BY FACTORY, MAT_ID, LOT_TYPE, WORK_DATE, CM_KEY_3 
                                                                 UNION ALL 
                                                                SELECT FACTORY, MAT_ID, OPER, LOT_TYPE, WORK_DATE, CM_KEY_3 
                                                                     , DECODE(SUBSTR(OPER,2,4),'0000',SUM(S1_OPER_IN_LOT+S2_OPER_IN_LOT+S3_OPER_IN_LOT),SUM(S1_END_LOT+S2_END_LOT+S3_END_LOT)) END_LOT 
                                                                     , DECODE(SUBSTR(OPER,2,4),'0000',SUM(S1_OPER_IN_QTY_1+S2_OPER_IN_QTY_1+S3_OPER_IN_QTY_1),SUM(S1_END_QTY_1+S2_END_QTY_1+S3_END_QTY_1+S1_END_RWK_QTY_1 + S2_END_RWK_QTY_1 + S3_END_RWK_QTY_1)) END_QTY_1 
                                                                     , DECODE(SUBSTR(OPER,2,4),'0000',SUM(S1_OPER_IN_QTY_2+S2_OPER_IN_QTY_2+S3_OPER_IN_QTY_2),SUM(S1_END_QTY_2+S2_END_QTY_2+S3_END_QTY_2+S1_END_RWK_QTY_2 + S2_END_RWK_QTY_2 + S3_END_RWK_QTY_2)) END_QTY_2 
                                                                     , 0 SHIP_QTY_1 
                                                                     , 0 SHIP_QTY_2 
                                                                  FROM CSUMWIPMOV 
                                                                 WHERE FACTORY = 'HMVA2' 
                                                                   AND OPER NOT IN ('AZ010') 
                                                                   AND MAT_ID LIKE 'HX%' 
                                                                 GROUP BY FACTORY, MAT_ID, OPER, LOT_TYPE, WORK_DATE, CM_KEY_3 
                                                                 UNION ALL 
                                                                SELECT FACTORY, MAT_ID 
                                                                     , 'AZ010' AS OPER 
                                                                     , LOT_TYPE, WORK_DATE, CM_KEY_3 
                                                                     , 0 END_LOT 
                                                                     , 0 END_QTY_1 
                                                                     , 0 END_QTY_2 
                                                                     , SUM(SHP_QTY_1) SHIP_QTY_1 
                                                                     , SUM(SHP_QTY_2) SHIP_QTY_2 
                                                                  FROM VSUMWIPOUT_06 
                                                                 WHERE FACTORY = 'HMVA2' 
                                                                   AND MAT_ID LIKE 'HX%' 
                                                                 GROUP BY FACTORY, MAT_ID, LOT_TYPE, WORK_DATE, CM_KEY_3 
                                                               ) 
                                                         GROUP BY FACTORY, MAT_ID, OPER, LOT_TYPE, WORK_DATE, CM_KEY_3 
                                                       ) A 
                                                     , MWIPMATDEF B 
                                                 WHERE 1=1 
                                                   AND A.FACTORY  = 'HMVA2' 
                                                   AND A.FACTORY = B.FACTORY 
                                                   AND A.MAT_ID = B.MAT_ID 
                                                   AND B.MAT_TYPE = 'FG' 
                                                   AND A.MAT_ID LIKE '%' 
                                                   AND A.CM_KEY_3 LIKE 'P%'
                                                   AND A.OPER NOT IN ('00001','00002') 
                                                   AND A.WORK_DATE = '20200409' 
                                                 ) 
                                         GROUP BY MAT_ID, OPER_GRP_1 
                                        HAVING SUM(ASSY_END_QTY) > 0 
                                       ) B 
                                     , ( 
                                        SELECT MAT_ID, OPER_GRP_1, SUM(NVL(QTY,0)) QTY 
                                          FROM (  
                                                SELECT MAT_ID 
                                                     , QTY 
                                                     , CASE WHEN OPER_GRP_8 = 'HMK2A' THEN 'HMK2A' 
                                                            WHEN OPER_GRP_8 = 'B/G' THEN 'BG' 
                                                            WHEN OPER_GRP_8 = 'SAW' THEN 'SAW' 
                                                            WHEN OPER_GRP_8 = 'S/P' THEN 'SP' 
                                                            WHEN OPER_GRP_8 IN ('D/A1', 'D/A1 CURE') THEN 'DA1' 
                                                            WHEN OPER_GRP_8 IN ('D/A2', 'D/A2 CURE') THEN 'DA2' 
                                                            WHEN OPER_GRP_8 IN ('D/A3', 'D/A3 CURE') THEN 'DA3' 
                                                            WHEN OPER_GRP_8 IN ('D/A4', 'D/A4 CURE') THEN 'DA4' 
                                                            WHEN OPER_GRP_8 IN ('D/A5', 'D/A5 CURE') THEN 'DA5' 
                                                            WHEN OPER_GRP_8 IN ('D/A6', 'D/A6 CURE') THEN 'DA6' 
                                                            WHEN OPER_GRP_8 IN ('D/A7', 'D/A7 CURE') THEN 'DA7' 
                                                            WHEN OPER_GRP_8 IN ('D/A8', 'D/A8 CURE') THEN 'DA8' 
                                                            WHEN OPER_GRP_8 IN ('D/A9', 'D/A9 CURE') THEN 'DA9' 
                                                            WHEN OPER_GRP_8 = 'W/B1' THEN 'WB1' 
                                                            WHEN OPER_GRP_8 = 'W/B2' THEN 'WB2' 
                                                            WHEN OPER_GRP_8 = 'W/B3' THEN 'WB3' 
                                                            WHEN OPER_GRP_8 = 'W/B4' THEN 'WB4' 
                                                            WHEN OPER_GRP_8 = 'W/B5' THEN 'WB5' 
                                                            WHEN OPER_GRP_8 = 'W/B6' THEN 'WB6' 
                                                            WHEN OPER_GRP_8 = 'W/B7' THEN 'WB7' 
                                                            WHEN OPER_GRP_8 = 'W/B8' THEN 'WB8' 
                                                            WHEN OPER_GRP_8 = 'W/B9' THEN 'WB9' 
                                                            WHEN OPER_GRP_8 = 'GATE' AND MAT_GRP_5 = '-' THEN 'GATE' 
                                                            WHEN OPER_GRP_8 = 'GATE' AND MAT_GRP_1 = 'SE' AND MAT_GRP_5 = 'Merge' THEN 'GATE' 
                                                            WHEN OPER_GRP_8 = 'GATE' AND MAT_GRP_1 = 'HX' THEN 'GATE' 
                                                            WHEN OPER_GRP_8 = 'GATE' AND MAT_GRP_1 NOT IN ('SE','HX') AND SUBSTR(MAT_GRP_4,-1) = SUBSTR(OPER, -1) THEN 'GATE' 
                                                            WHEN OPER_GRP_8 = 'MOLD' THEN 'MOLD' 
                                                            WHEN OPER_GRP_8 = 'CURE' THEN 'CURE' 
                                                            WHEN OPER_GRP_8 = 'M/K' THEN 'MK' 
                                                            WHEN OPER_GRP_8 = 'TRIM' THEN 'TRIM' 
                                                            WHEN OPER_GRP_8 = 'TIN' THEN 'TIN' 
                                                            WHEN OPER_GRP_8 = 'S/B/A' THEN 'SBA' 
                                                            WHEN OPER_GRP_8 = 'SIG' THEN 'SIG' 
                                                            WHEN OPER_GRP_8 = 'AVI' THEN 'AVI' 
                                                            WHEN OPER_GRP_8 = 'V/I' THEN 'PVI' 
                                                            WHEN OPER_GRP_8 = 'QC GATE' THEN 'QC_GATE' 
                                                            WHEN OPER_GRP_8 = 'HMK3A' THEN 'HMK3A' 
                                                            ELSE ' ' 
                                                        END OPER_GRP_1 
                                                  FROM ( 
                                                        SELECT MAT_ID, OPER, OPER_GRP_8, MAT_GRP_1, MAT_GRP_4, MAT_GRP_5, MAT_GRP_10 
                                                             , CASE WHEN MAT_GRP_1 = 'HX' AND HX_COMP_MIN IS NOT NULL
                                                                         THEN (CASE WHEN HX_COMP_MIN <> HX_COMP_MAX AND OPER > HX_COMP_MIN AND OPER <= HX_COMP_MAX THEN QTY_1 / NVL(COMP_CNT / 2,1)
                                                                         WHEN OPER <= HX_COMP_MAX THEN QTY_1 / NVL(COMP_CNT,1)
                                                                         ELSE QTY_1 END)
                                                                    WHEN OPER <= 'A0395' THEN QTY_1 / NVL(COMP_CNT,1) 
                                                                    ELSE QTY_1 
                                                               END QTY 
                                                          FROM ( 
                                                                SELECT A.MAT_ID, B.OPER, B.OPER_GRP_8, C.MAT_GRP_1, C.MAT_GRP_4, C.MAT_GRP_5, C.MAT_GRP_10 
                                                                     , CASE WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN CASE WHEN MAT_GRP_5 IN ('1st','Merge') OR MAT_GRP_5 LIKE 'Middle%' THEN QTY_1 ELSE 0 END 
                                                                            WHEN MAT_GRP_3 IN ('COB', 'BGN') THEN ROUND(QTY_1/TO_NUMBER(DECODE(MAT_CMF_13, ' ', 1, '-', 1, MAT_CMF_13)),0) 
                                                                            ELSE QTY_1 
                                                                       END AS QTY_1 
                                                                     , COMP_CNT  
                                                                     , HX_COMP_MIN, HX_COMP_MAX 
                                                                  FROM RWIPLOTSTS A   
                                                                     , MWIPOPRDEF B   
                                                                     , VWIPMATDEF C 
                                                                 WHERE 1 = 1  
                                                                   AND A.FACTORY = B.FACTORY 
                                                                   AND A.FACTORY = C.FACTORY 
                                                                   AND A.OPER = B.OPER 
                                                                   AND A.MAT_ID = C.MAT_ID 
                                                                   AND A.FACTORY = 'HMVA2'   
                                                                   AND A.LOT_TYPE = 'W'  
                                                                   AND A.LOT_CMF_5 LIKE 'P%'
                                                                   AND A.LOT_DEL_FLAG = ' '  
                                                                   AND C.MAT_GRP_2 <> '-' 
                                                                   AND C.DELETE_FLAG = ' '  
                                                               ) 
                                                       ) 
                                               ) 
                                         WHERE 1=1 
                                           AND OPER_GRP_1 <> ' ' 
                                         GROUP BY MAT_ID, OPER_GRP_1 
                                        HAVING SUM(NVL(QTY,0)) > 0 
                                       ) WIP 
                                     , ( 
                                        SELECT A.RES_STS_2 AS MAT_ID 
                                             , A.OPER_GRP_1 
                                             , SUM(A.RES_CNT) AS RES_CNT 
                                             , SUM(TRUNC(NVL(NVL(B.UPEH,0) * 24 * A.PERCENT * A.RES_CNT, 0))) AS RES_CAPA 
                                          FROM ( 
                                                SELECT FACTORY, RES_STS_2, RES_STS_8 AS OPER, RES_GRP_6 AS RES_MODEL, RES_GRP_7 AS UPEH_GRP, COUNT(RES_ID) AS RES_CNT 
                                                     , CASE WHEN RES_STS_8 LIKE 'A06%' THEN 0.71
                                                            WHEN RES_STS_8 LIKE 'A04%' THEN 0.68
                                                            WHEN RES_STS_8 = 'A0333' THEN 0.68
                                                            ELSE 0.7
                                                       END PERCENT 
                                                     , CASE WHEN RES_STS_8 IN ('A0040') THEN 'BG' 
                                                            WHEN RES_STS_8 IN ('A0200', 'A0230') THEN 'SAW' 
                                                            WHEN RES_STS_8 IN ('A0400', 'A0401', 'A0333') THEN 'DA1' 
                                                            WHEN RES_STS_8 IN ('A0402') THEN 'DA2' 
                                                            WHEN RES_STS_8 IN ('A0403') THEN 'DA3' 
                                                            WHEN RES_STS_8 IN ('A0404') THEN 'DA4' 
                                                            WHEN RES_STS_8 IN ('A0405') THEN 'DA5' 
                                                            WHEN RES_STS_8 IN ('A0406') THEN 'DA6' 
                                                            WHEN RES_STS_8 IN ('A0407') THEN 'DA7' 
                                                            WHEN RES_STS_8 IN ('A0408') THEN 'DA8' 
                                                            WHEN RES_STS_8 IN ('A0409') THEN 'DA9' 
                                                            WHEN RES_STS_8 IN ('A0600','A0601') THEN 'WB1' 
                                                            WHEN RES_STS_8 IN ('A0602') THEN 'WB2' 
                                                            WHEN RES_STS_8 IN ('A0603') THEN 'WB3' 
                                                            WHEN RES_STS_8 IN ('A0604') THEN 'WB4' 
                                                            WHEN RES_STS_8 IN ('A0605') THEN 'WB5' 
                                                            WHEN RES_STS_8 IN ('A0606') THEN 'WB6' 
                                                            WHEN RES_STS_8 IN ('A0607') THEN 'WB7' 
                                                            WHEN RES_STS_8 IN ('A0608') THEN 'WB8' 
                                                            WHEN RES_STS_8 IN ('A0609') THEN 'WB9' 
                                                            WHEN RES_STS_8 IN ('A0800', 'A0801', 'A0802', 'A0803', 'A0804', 'A0805', 'A0806', 'A0807', 'A0808', 'A0809') THEN 'GATE' 
                                                            WHEN RES_STS_8 IN ('A1000', 'A0910') THEN 'MOLD' 
                                                            WHEN RES_STS_8 IN ('A1100') THEN 'CURE' 
                                                            WHEN RES_STS_8 IN ('A1150', 'A1500') THEN 'MK' 
                                                            WHEN RES_STS_8 IN ('A1200') THEN 'TRIM' 
                                                            WHEN RES_STS_8 IN ('A1450') THEN 'TIN' 
                                                            WHEN RES_STS_8 IN ('A1300') THEN 'SBA' 
                                                            WHEN RES_STS_8 IN ('A1750', 'A1800', 'A1900', 'A1825') THEN 'SIG' 
                                                            WHEN RES_STS_8 IN ('A2000') THEN 'AVI' 
                                                            WHEN RES_STS_8 IN ('A2050') THEN 'PVI' 
                                                            WHEN RES_STS_8 IN ('A2100') THEN 'QC_GATE' 
                                                            ELSE ' ' 
                                                       END OPER_GRP_1 
                                                  FROM MRASRESDEF 
                                                 WHERE 1 = 1  
                                                   AND FACTORY  = 'HMVA2' 
                                                   AND RES_CMF_9 = 'Y' 
                                                   AND RES_CMF_7 = 'Y' 
                                                   AND DELETE_FLAG = ' ' 
                                                   AND RES_TYPE='EQUIPMENT' 
                                                   AND (RES_STS_1 NOT IN ('C200', 'B199') OR RES_UP_DOWN_FLAG = 'U') 
                                                 GROUP BY FACTORY,RES_STS_2,RES_STS_8,RES_GRP_6,RES_GRP_7  
                                               ) A 
                                             , CRASUPHDEF B 
                                         WHERE 1=1 
                                           AND A.FACTORY = B.FACTORY(+) 
                                           AND A.OPER = B.OPER(+) 
                                           AND A.RES_MODEL = B.RES_MODEL(+) 
                                           AND A.UPEH_GRP = B.UPEH_GRP(+) 
                                           AND A.RES_STS_2 = B.MAT_ID(+) 
                                           AND A.FACTORY  = 'HMVA2' 
                                           AND A.OPER NOT IN ('00001','00002') 
                                           AND A.OPER_GRP_1 <> ' ' 
                                         GROUP BY A.RES_STS_2, A.OPER_GRP_1 
                                       ) RES 
                                 WHERE 1=1 
                                   AND MAT.MAT_ID = A.MAT_ID(+) 
                                   AND MAT.MAT_ID = B.MAT_ID(+) 
                                   AND MAT.MAT_ID = WIP.MAT_ID(+) 
                                   AND MAT.MAT_ID = RES.MAT_ID(+) 
                                   AND MAT.OPER_GRP_1 = B.OPER_GRP_1(+) 
                                   AND MAT.OPER_GRP_1 = WIP.OPER_GRP_1(+) 
                                   AND MAT.OPER_GRP_1 = RES.OPER_GRP_1(+) 
                               ) 
                         GROUP BY MAT_GRP_1, MAT_GRP_9, MAT_GRP_10, MAT_GRP_6, MAT_CMF_11,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', OPER_GRP_1 
                        HAVING ( 
                                SUM(NVL(D0_ORI_PLAN,0))+SUM(NVL(D1_PLAN,0))+SUM(NVL(D2_PLAN,0))+SUM(NVL(WEEK_PLAN,0))+SUM(NVL(WEEK2_PLAN,0))+SUM(NVL(MON_PLAN,0))+SUM(NVL(WIP_QTY,0)) 
                              + SUM(NVL(D0_PLAN,0))+SUM(NVL(SHP_WEEK,0))+SUM(NVL(SHP_MONTH,0))+SUM(NVL(ASSY_END_QTY,0)) 
                               ) > 0 
                      ) 
                    , (SELECT LEVEL AS SEQ FROM DUAL CONNECT BY LEVEL <= 10) 
                 GROUP BY MAT_GRP_1, MAT_GRP_9, MAT_GRP_10, MAT_GRP_6, MAT_CMF_11,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', OPER_GRP_1, DECODE(SEQ, 1, 'WIP', 2, '설비대수', 3, 'CAPA현황', 4, '당일 실적', 5, 'D0 잔량', 6, 'D1 잔량', 7, 'D2 잔량', 8, '당주 잔량', 9, '차주 잔량', 10, '월간 잔량') 
               ) 
         GROUP BY  MAT_GRP_1, MAT_GRP_9, MAT_GRP_10, MAT_GRP_6, MAT_CMF_11,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', GUBUN 
       ) A 
 WHERE 1=1 
 GROUP BY MAT_GRP_1, MAT_GRP_9, MAT_GRP_10, MAT_GRP_6, MAT_CMF_11,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', GUBUN 
 ORDER BY DECODE(MAT_GRP_1, 'SE', 1, 'HX', 2, 'IM', 3, 'FC', 4, 'IG', 5, 6), CUSTOMER, MAJOR, PKG, LD_COUNT, PKG_CODE,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', DECODE(GUBUN, 'WIP', 1, '설비대수', 2, 'CAPA현황', 3, '당일 실적', 4, 'D0 잔량', 5, 'D1 잔량', 6, 'D2 잔량', 7, '당주 잔량', 8, '차주 잔량', 9, '월간 잔량', 10) 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT (SELECT DATA_1 FROM MGCMTBLDAT@RPTTOMES WHERE FACTORY = 'HMVA2' AND TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = MAT_GRP_1) AS CUSTOMER, MAT_GRP_9 AS MAJOR, MAT_GRP_10 AS PKG, MAT_GRP_6 AS LD_COUNT, MAT_CMF_11 AS PKG_CODE,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ' 
     , MAX(DECODE(OPER_GRP_1, 'HMK3A', 'T', '', 'F', 'F')) AS HMK3A 
     , MAX(DECODE(OPER_GRP_1, 'QC_GATE', 'T', '', 'F', 'F')) AS QC_GATE 
     , MAX(DECODE(OPER_GRP_1, 'PVI', 'T', '', 'F', 'F')) AS PVI 
     , MAX(DECODE(OPER_GRP_1, 'AVI', 'T', '', 'F', 'F')) AS AVI 
     , MAX(DECODE(OPER_GRP_1, 'SIG', 'T', '', 'F', 'F')) AS SIG 
     , MAX(DECODE(OPER_GRP_1, 'SBA', 'T', '', 'F', 'F')) AS SBA 
     , MAX(DECODE(OPER_GRP_1, 'TIN', 'T', '', 'F', 'F')) AS TIN 
     , MAX(DECODE(OPER_GRP_1, 'TRIM', 'T', '', 'F', 'F')) AS TRIM 
     , MAX(DECODE(OPER_GRP_1, 'MK', 'T', '', 'F', 'F')) AS MK 
     , MAX(DECODE(OPER_GRP_1, 'CURE', 'T', '', 'F', 'F')) AS CURE 
     , MAX(DECODE(OPER_GRP_1, 'MOLD', 'T', '', 'F', 'F')) AS MOLD 
     , MAX(DECODE(OPER_GRP_1, 'GATE', 'T', '', 'F', 'F')) AS GATE 
     , MAX(DECODE(OPER_GRP_1, 'WB9', 'T', '', 'F', 'F')) AS WB9 
     , MAX(DECODE(OPER_GRP_1, 'DA9', 'T', '', 'F', 'F')) AS DA9 
     , MAX(DECODE(OPER_GRP_1, 'WB8', 'T', '', 'F', 'F')) AS WB8 
     , MAX(DECODE(OPER_GRP_1, 'DA8', 'T', '', 'F', 'F')) AS DA8 
     , MAX(DECODE(OPER_GRP_1, 'WB7', 'T', '', 'F', 'F')) AS WB7 
     , MAX(DECODE(OPER_GRP_1, 'DA7', 'T', '', 'F', 'F')) AS DA7 
     , MAX(DECODE(OPER_GRP_1, 'WB6', 'T', '', 'F', 'F')) AS WB6 
     , MAX(DECODE(OPER_GRP_1, 'DA6', 'T', '', 'F', 'F')) AS DA6 
     , MAX(DECODE(OPER_GRP_1, 'WB5', 'T', '', 'F', 'F')) AS WB5 
     , MAX(DECODE(OPER_GRP_1, 'DA5', 'T', '', 'F', 'F')) AS DA5 
     , MAX(DECODE(OPER_GRP_1, 'WB4', 'T', '', 'F', 'F')) AS WB4 
     , MAX(DECODE(OPER_GRP_1, 'DA4', 'T', '', 'F', 'F')) AS DA4 
     , MAX(DECODE(OPER_GRP_1, 'WB3', 'T', '', 'F', 'F')) AS WB3 
     , MAX(DECODE(OPER_GRP_1, 'DA3', 'T', '', 'F', 'F')) AS DA3  
     , MAX(DECODE(OPER_GRP_1, 'WB2', 'T', '', 'F', 'F')) AS WB2 
     , MAX(DECODE(OPER_GRP_1, 'DA2', 'T', '', 'F', 'F')) AS DA2 
     , MAX(DECODE(OPER_GRP_1, 'WB1', 'T', '', 'F', 'F')) AS WB1 
     , MAX(DECODE(OPER_GRP_1, 'DA1', 'T', '', 'F', 'F')) AS DA1 
     , MAX(DECODE(OPER_GRP_1, 'SP', 'T', '', 'F', 'F')) AS SP 
     , MAX(DECODE(OPER_GRP_1, 'SAW', 'T', '', 'F', 'F')) AS SAW 
     , MAX(DECODE(OPER_GRP_1, 'BG', 'T', '', 'F', 'F')) AS BG 
     , MAX(DECODE(OPER_GRP_1, 'HMK2A','T', '', 'F', 'F')) AS HMK2A 
  FROM ( 
        SELECT MAT.FACTORY, MAT.MAT_GRP_1, MAT.MAT_GRP_9, MAT.MAT_GRP_10, MAT.MAT_GRP_6, MAT.MAT_CMF_11,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT.MAT_ID, MAT.DELETE_FLAG 
             , CASE WHEN MAT.MAT_GRP_1 = 'SE' AND MAT.MAT_GRP_9 = 'MEMORY' THEN 'SEK_________-___' || SUBSTR(MAT.MAT_ID, -3) 
                                                                    WHEN MAT.MAT_GRP_1 = 'HX' THEN MAT.MAT_CMF_10 
                                                                    ELSE MAT_ID 
                                                               END CONV_MAT_ID 
          FROM MWIPMATDEF MAT 
       ) MAT 
     , ( 
        SELECT A.MAT_ID 
                     , CASE WHEN B.OPER IN ('A0400', 'A0401', 'A0333') THEN 'DA1' 
                            WHEN B.OPER IN ('A0402') THEN 'DA2' 
                            WHEN B.OPER IN ('A0403') THEN 'DA3' 
                            WHEN B.OPER IN ('A0404') THEN 'DA4' 
                            WHEN B.OPER IN ('A0405') THEN 'DA5' 
                            WHEN B.OPER IN ('A0406') THEN 'DA6' 
                            WHEN B.OPER IN ('A0407') THEN 'DA7' 
                            WHEN B.OPER IN ('A0408') THEN 'DA8' 
                            WHEN B.OPER IN ('A0409') THEN 'DA9' 
                            WHEN B.OPER IN ('A0600', 'A0601') THEN 'WB1' 
                            WHEN B.OPER IN ('A0602') THEN 'WB2' 
                            WHEN B.OPER IN ('A0603') THEN 'WB3' 
                            WHEN B.OPER IN ('A0604') THEN 'WB4' 
                            WHEN B.OPER IN ('A0605') THEN 'WB5' 
                            WHEN B.OPER IN ('A0606') THEN 'WB6' 
                            WHEN B.OPER IN ('A0607') THEN 'WB7' 
                            WHEN B.OPER IN ('A0608') THEN 'WB8' 
                            WHEN B.OPER IN ('A0609') THEN 'WB9' 
                            ELSE ' ' 
                        END OPER_GRP_1 
          FROM MWIPMATDEF A 
             , MWIPFLWOPR@RPTTOMES B 
         WHERE 1=1 
           AND A.FACTORY = B.FACTORY 
           AND A.FIRST_FLOW = B.FLOW 
           AND A.FACTORY = 'HMVA2' 
           AND A.DELETE_FLAG = ' ' 
           AND A.MAT_TYPE = 'FG' 
           AND A.MAT_GRP_5 IN ('-', 'Merge') 
           AND A.MAT_ID LIKE '%' 
       ) A 
 WHERE 1=1 
   AND MAT.FACTORY = 'HMVA2' 
   AND MAT.DELETE_FLAG = ' ' 
   AND MAT.MAT_ID = A.MAT_ID  
 GROUP BY MAT.MAT_GRP_1, MAT.MAT_GRP_9, MAT.MAT_GRP_10, MAT.MAT_GRP_6, MAT.MAT_CMF_11,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ' 
 ORDER BY DECODE(MAT_GRP_1, 'SE', 1, 'HX', 2, 'IM', 3, 'FC', 4, 'IG', 5, 6), CUSTOMER, MAJOR, PKG, LD_COUNT, PKG_CODE,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ' 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
SELECT MIN(SYS_DATE) AS START_DAY 
     , MAX(SYS_DATE) AS END_DAY 
     , PLAN_YEAR||DECODE(LENGTH(PLAN_WEEK), 1, '0'||PLAN_WEEK, PLAN_WEEK) AS WEEK
  FROM MWIPCALDEF 
 WHERE CALENDAR_ID = 'OTD'
   AND (PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) IN ( 
                                                SELECT WW
                                                  FROM (
                                                        SELECT WW
                                                             , ROW_NUMBER() OVER(ORDER BY WW) AS RNK
                                                          FROM (
                                                                SELECT DISTINCT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW
                                                                  FROM MWIPCALDEF
                                                                 WHERE CALENDAR_ID = 'OTD'
                                                                   AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') >= (
                                                                                                              SELECT MAX(PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) AS WW
                                                                                                                FROM MWIPCALDEF
                                                                                                               WHERE CALENDAR_ID = 'OTD'
                                                                                                                 AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') < (SELECT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW FROM MWIPCALDEF WHERE CALENDAR_ID = 'OTD' AND SYS_DATE = '20200409')
                                                                                                                 AND SYS_DATE >= TO_CHAR(TO_DATE('20200409', 'YYYYMMDD')-14, 'YYYYMMDD')
                                                                                                             )
                                                               ) 
                                                       )
                                                 WHERE RNK <= 7
                                               ) 
 GROUP BY PLAN_YEAR, PLAN_WEEK 
 ORDER BY PLAN_YEAR, PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE) AS START_DAY 
     , MAX(SYS_DATE) AS END_DAY 
     , PLAN_YEAR||DECODE(LENGTH(PLAN_WEEK), 1, '0'||PLAN_WEEK, PLAN_WEEK) AS WEEK
  FROM MWIPCALDEF 
 WHERE CALENDAR_ID = 'SE'
   AND (PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) IN ( 
                                                SELECT WW
                                                  FROM (
                                                        SELECT WW
                                                             , ROW_NUMBER() OVER(ORDER BY WW) AS RNK
                                                          FROM (
                                                                SELECT DISTINCT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW
                                                                  FROM MWIPCALDEF
                                                                 WHERE CALENDAR_ID = 'SE'
                                                                   AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') >= (
                                                                                                              SELECT MAX(PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) AS WW
                                                                                                                FROM MWIPCALDEF
                                                                                                               WHERE CALENDAR_ID = 'SE'
                                                                                                                 AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') < (SELECT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW FROM MWIPCALDEF WHERE CALENDAR_ID = 'SE' AND SYS_DATE = '20200409')
                                                                                                                 AND SYS_DATE >= TO_CHAR(TO_DATE('20200409', 'YYYYMMDD')-14, 'YYYYMMDD')
                                                                                                             )
                                                               ) 
                                                       )
                                                 WHERE RNK <= 7
                                               ) 
 GROUP BY PLAN_YEAR, PLAN_WEEK 
 ORDER BY PLAN_YEAR, PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT LANGUAGE_2 FROM RWEBFUNDEF WHERE FUNC_NAME = 'PRD010216'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE) AS START_DAY 
     , MAX(SYS_DATE) AS END_DAY 
     , PLAN_YEAR||DECODE(LENGTH(PLAN_WEEK), 1, '0'||PLAN_WEEK, PLAN_WEEK) AS WEEK
  FROM MWIPCALDEF 
 WHERE CALENDAR_ID = 'OTD'
   AND (PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) IN ( 
                                                SELECT WW
                                                  FROM (
                                                        SELECT WW
                                                             , ROW_NUMBER() OVER(ORDER BY WW) AS RNK
                                                          FROM (
                                                                SELECT DISTINCT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW
                                                                  FROM MWIPCALDEF
                                                                 WHERE CALENDAR_ID = 'OTD'
                                                                   AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') >= (
                                                                                                              SELECT MAX(PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) AS WW
                                                                                                                FROM MWIPCALDEF
                                                                                                               WHERE CALENDAR_ID = 'OTD'
                                                                                                                 AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') < (SELECT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW FROM MWIPCALDEF WHERE CALENDAR_ID = 'OTD' AND SYS_DATE = '20200409')
                                                                                                                 AND SYS_DATE >= TO_CHAR(TO_DATE('20200409', 'YYYYMMDD')-14, 'YYYYMMDD')
                                                                                                             )
                                                               ) 
                                                       )
                                                 WHERE RNK <= 7
                                               ) 
 GROUP BY PLAN_YEAR, PLAN_WEEK 
 ORDER BY PLAN_YEAR, PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE) AS START_DAY 
     , MAX(SYS_DATE) AS END_DAY 
     , PLAN_YEAR||DECODE(LENGTH(PLAN_WEEK), 1, '0'||PLAN_WEEK, PLAN_WEEK) AS WEEK
  FROM MWIPCALDEF 
 WHERE CALENDAR_ID = 'SE'
   AND (PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) IN ( 
                                                SELECT WW
                                                  FROM (
                                                        SELECT WW
                                                             , ROW_NUMBER() OVER(ORDER BY WW) AS RNK
                                                          FROM (
                                                                SELECT DISTINCT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW
                                                                  FROM MWIPCALDEF
                                                                 WHERE CALENDAR_ID = 'SE'
                                                                   AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') >= (
                                                                                                              SELECT MAX(PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) AS WW
                                                                                                                FROM MWIPCALDEF
                                                                                                               WHERE CALENDAR_ID = 'SE'
                                                                                                                 AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') < (SELECT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW FROM MWIPCALDEF WHERE CALENDAR_ID = 'SE' AND SYS_DATE = '20200409')
                                                                                                                 AND SYS_DATE >= TO_CHAR(TO_DATE('20200409', 'YYYYMMDD')-14, 'YYYYMMDD')
                                                                                                             )
                                                               ) 
                                                       )
                                                 WHERE RNK <= 7
                                               ) 
 GROUP BY PLAN_YEAR, PLAN_WEEK 
 ORDER BY PLAN_YEAR, PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT CUSTOMER,  ' ', MAT_GRP_2, MAT_GRP_3, MAT_GRP_4,  ' ', MAT_GRP_6,  ' ',  ' ',  ' ', CONV_MAT_ID,  ' ',  ' ',  ' ' 
     , WEEK_PLAN, SHP_WEEK, WEEK_DEF, REMAIN_MOLD, REMAIN_WB, REMAIN_DA, REMAIN_BG, REMAIN_INPUT, REMAIN_WF, DA_CAPA, WB_CAPA
     , D0_PLAN2, D0_DEF, SHP_TODAY, HMK3A, QC_GATE, PVI, BAKE, AVI, DC2, DC1, SIG, SBA, TRIM, MK, TIN, CURE, MOLD, PLASMA, GATE
     , WB9, DA9, WB8, DA8, WB7, DA7, WB6, DA6, WB5, DA5, WB4, DA4, WB3, DA3, WB2, DA2, WB1, DA1, SP, SAW, BG, HMK2A
     , D0_PLAN, D1_PLAN, D2_PLAN, D3_PLAN, D4_PLAN, DA1_CAPA, WB1_CAPA, DA2_CAPA, WB2_CAPA, DA3_CAPA, WB3_CAPA, DA4_CAPA, WB4_CAPA, DA5_CAPA, WB5_CAPA
     , DA6_CAPA, WB6_CAPA, DA7_CAPA, WB7_CAPA, DA8_CAPA, WB8_CAPA, DA9_CAPA, WB9_CAPA, WEEK2_PLAN, WEEK3_PLAN, WEEK4_PLAN, WEEK5_PLAN, ORI_PLAN, SHP_MONTH, MONTH_DEF, REV_PLAN, PER
  FROM(
SELECT (SELECT DATA_1 FROM MGCMTBLDAT WHERE TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = MAT.MAT_GRP_1 AND ROWNUM=1) AS CUSTOMER,  ' ', MAT.MAT_GRP_2, MAT.MAT_GRP_3, MAT.MAT_GRP_4,  ' ', MAT.MAT_GRP_6,  ' ',  ' ',  ' ', MAT.CONV_MAT_ID,  ' ',  ' ',  ' ' 
     , ROUND(SUM(NVL(WEEK1_PLAN, 0)) / 1, 0) AS WEEK_PLAN
     , ROUND(SUM(NVL(SHP_WEEK, 0)) / 1, 0) AS SHP_WEEK
     , ROUND(SUM(NVL(WEEK1_PLAN, 0) - NVL(SHP_WEEK, 0)) / 1, 0) AS WEEK_DEF
     , ROUND(SUM(NVL(WEEK1_PLAN, 0) - NVL(SHP_WEEK, 0) - NVL(W_MOLD, 0)) / 1, 0) AS REMAIN_MOLD 
     , ROUND(SUM(NVL(WEEK1_PLAN, 0) - NVL(SHP_WEEK, 0) - NVL(W_WB, 0)) / 1, 0) AS REMAIN_WB
     , ROUND(SUM(NVL(WEEK1_PLAN, 0) - NVL(SHP_WEEK, 0) - NVL(W_DA, 0)) / 1, 0) AS REMAIN_DA
     , ROUND(SUM(NVL(WEEK1_PLAN, 0) - NVL(SHP_WEEK, 0) - NVL(W_BG, 0)) / 1, 0) AS REMAIN_BG
     , ROUND(SUM(NVL(WEEK1_PLAN, 0) - NVL(SHP_WEEK, 0) - NVL(W_ISSUE, 0)) / 1, 0) AS REMAIN_INPUT
     , ROUND(SUM(NVL(WEEK1_PLAN, 0) - NVL(SHP_WEEK, 0) - NVL(TOTAL, 0)) / 1, 0) AS REMAIN_WF
     , ROUND(SUM(NVL(DA_CAPA, 0)) / 1, 0) AS DA_CAPA
     , ROUND(SUM(NVL(WB_CAPA, 0)) / 1, 0) AS WB_CAPA
     , ROUND(SUM(NVL(D0_PLAN, 0) + (NVL(WEEK1_TTL, 0) - NVL(SHP_WEEK_TTL, 0))) / 1, 0) AS D0_PLAN2
     , ROUND(SUM(NVL(D0_PLAN, 0) + (NVL(WEEK1_TTL, 0) - NVL(SHP_WEEK_TTL, 0)) - NVL(SHP_TODAY, 0)) / 1, 0) AS D0_DEF
     , ROUND(SUM(NVL(SHP_TODAY, 0)) / 1, 0) AS SHP_TODAY
     , ROUND(SUM(NVL(WIP.HMK3A, 0)) / 1, 0) AS HMK3A
     , ROUND(SUM(NVL(WIP.QC_GATE, 0)) / 1, 0) AS QC_GATE
     , ROUND(SUM(NVL(WIP.PVI, 0)) / 1, 0) AS PVI
     , ROUND(SUM(NVL(WIP.BAKE,0)) / 1, 0) AS BAKE
     , ROUND(SUM(NVL(WIP.AVI,0)) / 1, 0) AS AVI
     , ROUND(SUM(NVL(WIP.DC2,0)) / 1, 0) AS DC2
     , ROUND(SUM(NVL(WIP.DC1,0)) / 1, 0) AS DC1
     , ROUND(SUM(NVL(WIP.SIG,0)) / 1, 0) AS SIG
     , ROUND(SUM(NVL(WIP.SBA,0)) / 1, 0) AS SBA
     , ROUND(SUM(NVL(WIP.TIN,0)) / 1, 0) AS TIN
     , ROUND(SUM(NVL(WIP.TRIM,0)) / 1, 0) AS TRIM
     , ROUND(SUM(NVL(WIP.MK,0)) / 1, 0) AS MK
     , ROUND(SUM(NVL(WIP.CURE,0)) / 1, 0) AS CURE
     , ROUND(SUM(NVL(WIP.MOLD,0)) / 1, 0) AS MOLD
     , ROUND(SUM(NVL(WIP.PLASMA,0)) / 1, 0) AS PLASMA
     , ROUND(SUM(NVL(WIP.GATE,0)) / 1, 0) AS GATE
     , ROUND(SUM(NVL(WIP.WB9,0)) / 1, 0) AS WB9
     , ROUND(SUM(NVL(WIP.DA9,0)) / 1, 0) AS DA9
     , ROUND(SUM(NVL(WIP.WB8,0)) / 1, 0) AS WB8
     , ROUND(SUM(NVL(WIP.DA8,0)) / 1, 0) AS DA8
     , ROUND(SUM(NVL(WIP.WB7,0)) / 1, 0) AS WB7
     , ROUND(SUM(NVL(WIP.DA7,0)) / 1, 0) AS DA7
     , ROUND(SUM(NVL(WIP.WB6,0)) / 1, 0) AS WB6
     , ROUND(SUM(NVL(WIP.DA6,0)) / 1, 0) AS DA6
     , ROUND(SUM(NVL(WIP.WB5,0)) / 1, 0) AS WB5
     , ROUND(SUM(NVL(WIP.DA5,0)) / 1, 0) AS DA5
     , ROUND(SUM(NVL(WIP.WB4,0)) / 1, 0) AS WB4
     , ROUND(SUM(NVL(WIP.DA4,0)) / 1, 0) AS DA4
     , ROUND(SUM(NVL(WIP.WB3,0)) / 1, 0) AS WB3
     , ROUND(SUM(NVL(WIP.DA3,0)) / 1, 0) AS DA3
     , ROUND(SUM(NVL(WIP.WB2,0)) / 1, 0) AS WB2
     , ROUND(SUM(NVL(WIP.DA2,0)) / 1, 0) AS DA2
     , ROUND(SUM(NVL(WIP.WB1,0)) / 1, 0) AS WB1
     , ROUND(SUM(NVL(WIP.DA1,0)) / 1, 0) AS DA1
     , ROUND(SUM(NVL(WIP.SP,0)) / 1, 0) AS SP
     , ROUND(SUM(NVL(WIP.SAW,0)) / 1, 0) AS SAW
     , ROUND(SUM(NVL(WIP.BG,0)) / 1, 0) AS BG
     , ROUND(SUM(NVL(WIP.HMK2A,0)) / 1, 0) AS HMK2A
     , ROUND(SUM(NVL(D0_PLAN, 0) + (NVL(WEEK1_TTL, 0) - NVL(SHP_WEEK_TTL, 0))) / 1, 0) AS D0_PLAN
     , ROUND(SUM(NVL(D1_PLAN, 0)) / 1, 0) AS D1_PLAN
     , ROUND(SUM(NVL(D2_PLAN, 0)) / 1, 0) AS D2_PLAN
     , ROUND(SUM(NVL(D3_PLAN, 0)) / 1, 0) AS D3_PLAN
     , ROUND(SUM(NVL(D4_PLAN, 0)) / 1, 0) AS D4_PLAN
     , ROUND(SUM(NVL(DA1_CAPA, 0)) / 1, 0) AS DA1_CAPA
     , ROUND(SUM(NVL(WB1_CAPA, 0)) / 1, 0) AS WB1_CAPA
     , ROUND(SUM(NVL(DA2_CAPA, 0)) / 1, 0) AS DA2_CAPA
     , ROUND(SUM(NVL(WB2_CAPA, 0)) / 1, 0) AS WB2_CAPA
     , ROUND(SUM(NVL(DA3_CAPA, 0)) / 1, 0) AS DA3_CAPA
     , ROUND(SUM(NVL(WB3_CAPA, 0)) / 1, 0) AS WB3_CAPA
     , ROUND(SUM(NVL(DA4_CAPA, 0)) / 1, 0) AS DA4_CAPA
     , ROUND(SUM(NVL(WB4_CAPA, 0)) / 1, 0) AS WB4_CAPA
     , ROUND(SUM(NVL(DA5_CAPA, 0)) / 1, 0) AS DA5_CAPA
     , ROUND(SUM(NVL(WB5_CAPA, 0)) / 1, 0) AS WB5_CAPA
     , ROUND(SUM(NVL(DA6_CAPA, 0)) / 1, 0) AS DA6_CAPA
     , ROUND(SUM(NVL(WB6_CAPA, 0)) / 1, 0) AS WB6_CAPA
     , ROUND(SUM(NVL(DA7_CAPA, 0)) / 1, 0) AS DA7_CAPA
     , ROUND(SUM(NVL(WB7_CAPA, 0)) / 1, 0) AS WB7_CAPA
     , ROUND(SUM(NVL(DA8_CAPA, 0)) / 1, 0) AS DA8_CAPA
     , ROUND(SUM(NVL(WB8_CAPA, 0)) / 1, 0) AS WB8_CAPA
     , ROUND(SUM(NVL(DA9_CAPA, 0)) / 1, 0) AS DA9_CAPA
     , ROUND(SUM(NVL(WB9_CAPA, 0)) / 1, 0) AS WB9_CAPA
     , ROUND(SUM(NVL(WEEK2_PLAN, 0)) / 1, 0) AS WEEK2_PLAN
     , ROUND(SUM(NVL(WEEK3_PLAN, 0)) / 1, 0) AS WEEK3_PLAN
     , ROUND(SUM(NVL(WEEK4_PLAN, 0)) / 1, 0) AS WEEK4_PLAN
     , ROUND(SUM(NVL(WEEK5_PLAN, 0)) / 1, 0) AS WEEK5_PLAN
     , ROUND(SUM(NVL(ORI_PLAN, 0)) / 1, 0) AS ORI_PLAN
     , ROUND(SUM(NVL(SHP_MONTH, 0)) / 1, 0) AS SHP_MONTH
     , ROUND(SUM(NVL(ORI_PLAN, 0) - NVL(SHP_MONTH, 0)) / 1, 0) AS MONTH_DEF
     , ROUND(SUM(NVL(REV_PLAN, 0)) / 1, 0) AS REV_PLAN
     , CASE WHEN SUM(NVL(ORI_PLAN, 0)) = 0 THEN 0
            ELSE ROUND(SUM(NVL(REV_PLAN, 0)) / SUM(NVL(ORI_PLAN, 0)) * 100, 0)
       END PER
     , ROUND(SUM(NVL(W_MOLD, 0)) / 1, 0) AS W_MOLD 
     , ROUND(SUM(NVL(W_WB, 0)) / 1, 0) AS W_WB
     , ROUND(SUM(NVL(W_DA, 0)) / 1, 0) AS W_DA
     , ROUND(SUM(NVL(W_BG, 0)) / 1, 0) AS W_BG
     , ROUND(SUM(NVL(W_ISSUE, 0)) / 1, 0) AS W_ISSUE
     , ROUND(SUM(NVL(TOTAL, 0)) / 1, 0) AS TOTAL
  FROM (
        SELECT MAT_GRP_1, MAT_GRP_2, MAT_GRP_3, MAT_GRP_4, MAT_GRP_5, MAT_GRP_6
             , MAT_GRP_7, MAT_GRP_8, MAT_GRP_9, MAT_GRP_10, MAT_CMF_7, MAT_CMF_10, MAT_ID, MAT_CMF_11
             , CASE WHEN MAT_GRP_9 = 'MEMORY' AND MAT_GRP_1 = 'HX' AND INSTR(MAT_ID, '_') = 0 THEN SUBSTR(MAT_ID, 1, 12) || '%' || SUBSTR(MAT_ID, -3)
                    WHEN MAT_GRP_9 = 'MEMORY' AND MAT_GRP_1 = 'HX' AND INSTR(MAT_ID, '_') > 0 THEN SUBSTR(MAT_ID, 1, INSTR(MAT_ID, '_')) || '%' || SUBSTR(MAT_ID, -3)
                    WHEN MAT_GRP_9 = 'MEMORY' AND MAT_GRP_1 = 'SE' THEN 'SEK_________-___' || SUBSTR(MAT_ID, -3)
                    ELSE MAT_ID
               END CONV_MAT_ID
             , VENDOR_ID AS SAP_CODE
          FROM MWIPMATDEF
         WHERE FACTORY = 'HMVA2'
           AND MAT_TYPE = 'FG' 
           AND DELETE_FLAG = ' ' 
           AND (MAT_GRP_5 IN ('1st','Merge', '-') OR MAT_GRP_5 LIKE 'Middle%') 
           AND MAT_GRP_3 <> 'COB' 
           AND MAT_ID LIKE '%'
       ) MAT 
     , ( 
        SELECT FACTORY, MAT_ID 
             , SUM(CASE WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 1 THEN D0_QTY
                        WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 2 THEN D0_QTY + D1_QTY
                        WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 3 THEN D0_QTY + D1_QTY + D2_QTY
                        WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 4 THEN D0_QTY + D1_QTY + D2_QTY + D3_QTY
                        WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 5 THEN D0_QTY + D1_QTY + D2_QTY + D3_QTY + D4_QTY
                        WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 6 THEN D0_QTY + D1_QTY + D2_QTY + D3_QTY + D4_QTY + D5_QTY
                        WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 3 THEN D0_QTY 
                        WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 4 THEN D0_QTY + D1_QTY 
                        WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 5 THEN D0_QTY + D1_QTY + D2_QTY 
                        WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 6 THEN D0_QTY + D1_QTY + D2_QTY + D3_QTY 
                        WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 7 THEN D0_QTY + D1_QTY + D2_QTY + D3_QTY + D4_QTY 
                        WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 1 THEN D0_QTY + D1_QTY + D2_QTY + D3_QTY + D4_QTY + D5_QTY 
                        ELSE 0
                   END) AS WEEK1_TTL 
             , SUM(W1_QTY) AS WEEK1_PLAN 
             , SUM(W2_QTY) AS WEEK2_PLAN 
             , SUM(W3_QTY) AS WEEK3_PLAN 
             , SUM(W4_QTY) AS WEEK4_PLAN 
             , SUM(W5_QTY) AS WEEK5_PLAN 
             , SUM(NVL(W1_QTY,0) + NVL(W2_QTY,0)) AS WEEK_TTL 
             , SUM(CASE WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 7 THEN D0_QTY
                        WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 1 THEN D1_QTY
                        WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 2 THEN D2_QTY
                        WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 3 THEN D3_QTY
                        WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 4 THEN D4_QTY
                        WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 5 THEN D5_QTY
                        WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 6 THEN D6_QTY
                        WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 2 THEN D0_QTY 
                        WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 3 THEN D1_QTY 
                        WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 4 THEN D2_QTY 
                        WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 5 THEN D3_QTY 
                        WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 6 THEN D4_QTY 
                        WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 7 THEN D5_QTY 
                        WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 1 THEN D6_QTY 
                        ELSE 0
                   END) AS D0_PLAN 
             , SUM(CASE WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 7 THEN D1_QTY
                        WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 1 THEN D2_QTY
                        WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 2 THEN D3_QTY
                        WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 3 THEN D4_QTY
                        WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 4 THEN D5_QTY
                        WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 5 THEN D6_QTY
                        WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 6 THEN D7_QTY
                        WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 2 THEN D1_QTY 
                        WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 3 THEN D2_QTY 
                        WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 4 THEN D3_QTY 
                        WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 5 THEN D4_QTY 
                        WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 6 THEN D5_QTY 
                        WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 7 THEN D6_QTY 
                        WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 1 THEN D7_QTY 
                        ELSE 0
                   END) AS D1_PLAN 
             , SUM(CASE WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 7 THEN D2_QTY
                        WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 1 THEN D3_QTY
                        WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 2 THEN D4_QTY
                        WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 3 THEN D5_QTY
                        WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 4 THEN D6_QTY
                        WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 5 THEN D7_QTY
                        WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 6 THEN D8_QTY
                        WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 2 THEN D2_QTY 
                        WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 3 THEN D3_QTY 
                        WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 4 THEN D4_QTY 
                        WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 5 THEN D5_QTY 
                        WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 6 THEN D6_QTY 
                        WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 7 THEN D7_QTY 
                        WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 1 THEN D8_QTY 
                        ELSE 0
                   END) AS D2_PLAN 
             , SUM(CASE WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 7 THEN D3_QTY
                        WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 1 THEN D4_QTY
                        WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 2 THEN D5_QTY
                        WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 3 THEN D6_QTY
                        WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 4 THEN D7_QTY
                        WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 5 THEN D8_QTY
                        WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 6 THEN D9_QTY
                        WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 2 THEN D3_QTY 
                        WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 3 THEN D4_QTY 
                        WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 4 THEN D5_QTY 
                        WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 5 THEN D6_QTY 
                        WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 6 THEN D7_QTY 
                        WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 7 THEN D8_QTY 
                        WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 1 THEN D9_QTY 
                        ELSE 0
                   END) AS D3_PLAN 
             , SUM(CASE WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 7 THEN D4_QTY
                        WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 1 THEN D5_QTY
                        WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 2 THEN D6_QTY
                        WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 3 THEN D7_QTY
                        WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 4 THEN D8_QTY
                        WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 5 THEN D9_QTY
                        WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 6 THEN D10_QTY
                        WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 2 THEN D4_QTY 
                        WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 3 THEN D5_QTY 
                        WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 4 THEN D6_QTY 
                        WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 5 THEN D7_QTY 
                        WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 6 THEN D8_QTY 
                        WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 7 THEN D9_QTY 
                        WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200409', 'YYYYMMDD'), 'D') = 1 THEN D10_QTY 
                        ELSE 0
                   END) AS D4_PLAN 
          FROM ( 
                SELECT FACTORY, MAT_ID, 'OTD' AS CALENDAR_ID 
                     , SUM(DECODE(PLAN_WEEK, '202015', D0_QTY, 0)) AS D0_QTY 
                     , SUM(DECODE(PLAN_WEEK, '202015', D1_QTY, 0)) AS D1_QTY 
                     , SUM(DECODE(PLAN_WEEK, '202015', D2_QTY, 0)) AS D2_QTY 
                     , SUM(DECODE(PLAN_WEEK, '202015', D3_QTY, 0)) AS D3_QTY 
                     , SUM(DECODE(PLAN_WEEK, '202015', D4_QTY, 0)) AS D4_QTY 
                     , SUM(DECODE(PLAN_WEEK, '202015', D5_QTY, 0)) AS D5_QTY 
                     , SUM(DECODE(PLAN_WEEK, '202015', D6_QTY, 0)) AS D6_QTY 
                     , SUM(DECODE(PLAN_WEEK, '202016', D0_QTY, 0)) AS D7_QTY 
                     , SUM(DECODE(PLAN_WEEK, '202016', D1_QTY, 0)) AS D8_QTY 
                     , SUM(DECODE(PLAN_WEEK, '202016', D2_QTY, 0)) AS D9_QTY 
                     , SUM(DECODE(PLAN_WEEK, '202016', D3_QTY, 0)) AS D10_QTY 
                     , SUM(DECODE(PLAN_WEEK, '202016', D4_QTY, 0)) AS D11_QTY 
                     , SUM(DECODE(PLAN_WEEK, '202016', D5_QTY, 0)) AS D12_QTY 
                     , SUM(DECODE(PLAN_WEEK, '202016', D6_QTY, 0)) AS D13_QTY 
                     , SUM(DECODE(PLAN_WEEK, '202015', WW_QTY, 0)) AS W1_QTY 
                     , SUM(DECODE(PLAN_WEEK, '202016', WW_QTY, 0)) AS W2_QTY 
                     , SUM(DECODE(PLAN_WEEK, '202017', WW_QTY, 0)) AS W3_QTY 
                     , SUM(DECODE(PLAN_WEEK, '202018', WW_QTY, 0)) AS W4_QTY 
                     , SUM(DECODE(PLAN_WEEK, '202019', WW_QTY, 0)) AS W5_QTY 
                  FROM RWIPPLNWEK 
                 WHERE 1=1 
                   AND FACTORY = 'HMVA2' 
                   AND GUBUN = '3' 
                   AND MAT_ID NOT LIKE 'SES%' 
                   AND PLAN_WEEK IN ('202015','202016','202017','202018','202019')
                 GROUP BY FACTORY, MAT_ID 
                 UNION ALL 
                SELECT FACTORY, MAT_ID, 'SE' AS CALENDAR_ID 
                     , SUM(DECODE(PLAN_WEEK, '202015', D0_QTY, 0)) AS D0_QTY 
                     , SUM(DECODE(PLAN_WEEK, '202015', D1_QTY, 0)) AS D1_QTY 
                     , SUM(DECODE(PLAN_WEEK, '202015', D2_QTY, 0)) AS D2_QTY 
                     , SUM(DECODE(PLAN_WEEK, '202015', D3_QTY, 0)) AS D3_QTY 
                     , SUM(DECODE(PLAN_WEEK, '202015', D4_QTY, 0)) AS D4_QTY 
                     , SUM(DECODE(PLAN_WEEK, '202015', D5_QTY, 0)) AS D5_QTY 
                     , SUM(DECODE(PLAN_WEEK, '202015', D6_QTY, 0)) AS D6_QTY 
                     , SUM(DECODE(PLAN_WEEK, '202016', D0_QTY, 0)) AS D7_QTY 
                     , SUM(DECODE(PLAN_WEEK, '202016', D1_QTY, 0)) AS D8_QTY 
                     , SUM(DECODE(PLAN_WEEK, '202016', D2_QTY, 0)) AS D9_QTY 
                     , SUM(DECODE(PLAN_WEEK, '202016', D3_QTY, 0)) AS D10_QTY 
                     , SUM(DECODE(PLAN_WEEK, '202016', D4_QTY, 0)) AS D11_QTY 
                     , SUM(DECODE(PLAN_WEEK, '202016', D5_QTY, 0)) AS D12_QTY 
                     , SUM(DECODE(PLAN_WEEK, '202016', D6_QTY, 0)) AS D13_QTY 
                     , SUM(DECODE(PLAN_WEEK, '202015', WW_QTY, 0)) AS W1_QTY 
                     , SUM(DECODE(PLAN_WEEK, '202016', WW_QTY, 0)) AS W2_QTY 
                     , SUM(DECODE(PLAN_WEEK, '202017', WW_QTY, 0)) AS W3_QTY 
                     , SUM(DECODE(PLAN_WEEK, '202018', WW_QTY, 0)) AS W4_QTY 
                     , SUM(DECODE(PLAN_WEEK, '202019', WW_QTY, 0)) AS W5_QTY 
                  FROM RWIPPLNWEK 
                 WHERE 1=1 
                   AND FACTORY = 'HMVA2' 
                   AND GUBUN = '3' 
                   AND MAT_ID LIKE 'SES%' 
                   AND PLAN_WEEK IN ('202015','202016','202017','202018','202019')
                 GROUP BY FACTORY, MAT_ID 
               ) 
         GROUP BY FACTORY, MAT_ID 
       ) PLN 
     , ( 
        SELECT MAT_ID 
             , SUM(CASE WHEN SHP_QTY_1 > 0 AND WORK_DATE = '20200409' THEN NVL(SHP_QTY_1, 0) ELSE 0 END) AS SHP_TODAY 
             , SUM(CASE WHEN SHP_QTY_1 > 0 AND MAT_ID LIKE 'SES%' AND WORK_DATE BETWEEN '20200406' AND '20200409' THEN NVL(SHP_QTY_1, 0)  
                        WHEN SHP_QTY_1 > 0 AND MAT_ID NOT LIKE 'SES%' AND WORK_DATE BETWEEN '20200404' AND '20200409' THEN NVL(SHP_QTY_1, 0) 
                        ELSE 0 END) AS SHP_WEEK  
             , SUM(CASE WHEN SHP_QTY_1 > 0 AND MAT_ID LIKE 'SES%' AND WORK_DATE BETWEEN '20200406' AND '20200408' THEN NVL(SHP_QTY_1, 0) 
                        WHEN SHP_QTY_1 > 0 AND MAT_ID NOT LIKE 'SES%' AND WORK_DATE BETWEEN '20200404' AND '20200408' THEN NVL(SHP_QTY_1, 0) 
                        ELSE 0 END) AS SHP_WEEK_TTL  
             , SUM(CASE WHEN WORK_DATE BETWEEN '20200401' AND '20200409' THEN NVL(SHP_QTY_1, 0) END) AS SHP_MONTH  
          FROM VSUMWIPOUT
         WHERE 1=1 
           AND FACTORY  = 'HMVA2' 
           AND CM_KEY_2 = 'PROD' 
           AND CM_KEY_3 LIKE 'P%' 
           AND LOT_TYPE = 'W' 
           AND MAT_ID NOT LIKE 'HX%' 
           AND WORK_DATE BETWEEN LEAST('20200401', '20200404', '20200406') AND '20200409' 
         GROUP BY MAT_ID 
         UNION ALL 
        SELECT MAT_ID 
             , SUM(CASE WHEN SHP_QTY_1 > 0 AND WORK_DATE = '20200409' THEN NVL(SHP_QTY_1, 0) ELSE 0 END) AS SHP_TODAY 
             , SUM(CASE WHEN SHP_QTY_1 > 0 AND WORK_DATE BETWEEN '20200404' AND '20200409' THEN NVL(SHP_QTY_1, 0) ELSE 0 END) AS SHP_WEEK 
             , SUM(CASE WHEN SHP_QTY_1 > 0 AND WORK_DATE BETWEEN '20200404' AND '20200408' THEN NVL(SHP_QTY_1, 0) ELSE 0 END) AS SHP_WEEK_TTL 
             , SUM(CASE WHEN WORK_DATE BETWEEN '20200401' AND '20200409' THEN NVL(SHP_QTY_1, 0) END) AS SHP_MONTH 
          FROM VSUMWIPOUT_06
         WHERE 1=1 
           AND FACTORY  = 'HMVA2' 
           AND CM_KEY_2 = 'PROD' 
           AND CM_KEY_3 LIKE 'P%' 
           AND LOT_TYPE = 'W' 
           AND MAT_ID LIKE 'HX%' 
           AND WORK_DATE BETWEEN '20200401' AND '20200409' 
         GROUP BY MAT_ID 
       ) SHP 
     , ( 
        SELECT MAT_ID
             , SUM(QTY) TOTAL
             , SUM(DECODE(OPER_GRP_1, 'HMK2A', QTY, 0)) AS HMK2A
             , SUM(DECODE(OPER_GRP_1, 'B/G', QTY, 0)) AS BG
             , SUM(DECODE(OPER_GRP_1, 'SAW', QTY, 0)) AS SAW
             , SUM(DECODE(OPER_GRP_1, 'S/P', QTY, 0)) AS SP
             , SUM(CASE WHEN OPER IN ('A0250','A0310','A0333','A0340','A0401','A0501', 'A0400', 'A0500', 'A0530', 'A0531', 'A0370', 'A0380', 'A0395') THEN QTY 
                        WHEN OPER_GRP_1 = 'SMT' THEN QTY 
                        ELSE 0 END) AS DA1 
             , SUM(CASE WHEN OPER IN ('A0402','A0502', 'A0532') THEN QTY ELSE 0 END) AS DA2 
             , SUM(CASE WHEN OPER IN ('A0403','A0503', 'A0533') THEN QTY ELSE 0 END) AS DA3 
             , SUM(CASE WHEN OPER IN ('A0404','A0504', 'A0534') THEN QTY ELSE 0 END) AS DA4 
             , SUM(CASE WHEN OPER IN ('A0405','A0505', 'A0535') THEN QTY ELSE 0 END) AS DA5 
             , SUM(CASE WHEN OPER IN ('A0406','A0506', 'A0536') THEN QTY ELSE 0 END) AS DA6 
             , SUM(CASE WHEN OPER IN ('A0407','A0507', 'A0537') THEN QTY ELSE 0 END) AS DA7 
             , SUM(CASE WHEN OPER IN ('A0408','A0508', 'A0538') THEN QTY ELSE 0 END) AS DA8 
             , SUM(CASE WHEN OPER IN ('A0409','A0509', 'A0539') THEN QTY ELSE 0 END) AS DA9 
             , SUM(CASE WHEN OPER IN ('A0551', 'A0601', 'A0550', 'A0600') THEN QTY
                        WHEN OPER = 'A0801' AND MAT_GRP_1 = 'SE' AND MAT_GRP_5 <> 'Merge' THEN QTY 
                        WHEN OPER = 'A0801' AND MAT_GRP_1 <> 'SE' THEN QTY 
                        ELSE 0 END) AS WB1 
             , SUM(CASE WHEN OPER IN ('A0552', 'A0602') THEN QTY
                        WHEN OPER = 'A0802' AND MAT_GRP_1 = 'SE' AND MAT_GRP_5 <> 'Merge' THEN QTY 
                        WHEN OPER = 'A0802' AND MAT_GRP_1 <> 'SE' THEN DECODE(SUBSTR(MAT_GRP_4,-1), '2', 0, QTY) 
                        ELSE 0 END) AS WB2 
             , SUM(CASE WHEN OPER IN ('A0553', 'A0603') THEN QTY
                        WHEN OPER = 'A0803' AND MAT_GRP_1 = 'SE' AND MAT_GRP_5 <> 'Merge' THEN QTY  
                        WHEN OPER = 'A0803' AND MAT_GRP_1 <> 'SE' THEN DECODE(SUBSTR(MAT_GRP_4,-1), '2', 0, '3', 0, QTY) 
                        ELSE 0 END) AS WB3 
             , SUM(CASE WHEN OPER IN ('A0554', 'A0604') THEN QTY
                        WHEN OPER = 'A0804' AND MAT_GRP_1 = 'SE' AND MAT_GRP_5 <> 'Merge' THEN QTY 
                        WHEN OPER = 'A0804' AND MAT_GRP_1 <> 'SE' THEN DECODE(SUBSTR(MAT_GRP_4,-1), '2', 0, '3', 0, '4', 0, QTY) 
                        ELSE 0 END) AS WB4 
             , SUM(CASE WHEN OPER IN ('A0555', 'A0605') THEN QTY
                        WHEN OPER = 'A0805' AND MAT_GRP_1 = 'SE' AND MAT_GRP_5 <> 'Merge' THEN QTY 
                        WHEN OPER = 'A0805' AND MAT_GRP_1 <> 'SE' THEN DECODE(SUBSTR(MAT_GRP_4,-1), '2', 0, '3', 0, '4', 0, '5', 0, QTY) 
                        ELSE 0 END) AS WB5 
             , SUM(CASE WHEN OPER IN ('A0556', 'A0606') THEN QTY
                        WHEN OPER = 'A0806' AND MAT_GRP_1 = 'SE' AND MAT_GRP_5 <> 'Merge' THEN QTY 
                        WHEN OPER = 'A0806' AND MAT_GRP_1 <> 'SE' THEN DECODE(SUBSTR(MAT_GRP_4,-1), '2', 0, '3', 0, '4', 0, '5', 0, '6', 0, QTY) 
                        ELSE 0 END) AS WB6 
             , SUM(CASE WHEN OPER IN ('A0557', 'A0607') THEN QTY
                        WHEN OPER = 'A0807' AND MAT_GRP_1 = 'SE' AND MAT_GRP_5 <> 'Merge' THEN QTY 
                        WHEN OPER = 'A0807' AND MAT_GRP_1 <> 'SE' THEN DECODE(SUBSTR(MAT_GRP_4,-1), '2', 0, '3', 0, '4', 0, '5', 0, '6', 0, '7', 0, QTY) 
                        ELSE 0 END) AS WB7 
             , SUM(CASE WHEN OPER IN ('A0558', 'A0608') THEN QTY
                        WHEN OPER = 'A0808' AND MAT_GRP_1 = 'SE' AND MAT_GRP_5 <> 'Merge' THEN QTY 
                        WHEN OPER = 'A0808' AND MAT_GRP_1 <> 'SE' THEN DECODE(SUBSTR(MAT_GRP_4,-1), '2', 0, '3', 0, '4', 0, '5', 0, '6', 0, '7', 0, '8', 0, QTY) 
                        ELSE 0 END) AS WB8 
             , SUM(CASE WHEN OPER IN ('A0559', 'A0609') THEN QTY
                        WHEN OPER = 'A0809' AND MAT_GRP_1 = 'SE' AND MAT_GRP_5 <> 'Merge' THEN QTY 
                        WHEN OPER = 'A0809' AND MAT_GRP_1 <> 'SE' THEN DECODE(SUBSTR(MAT_GRP_4,-1), '2', 0, '3', 0, '4', 0, '5', 0, '6', 0, '7', 0, '8', 0, '9', 0, QTY) 
                        ELSE 0 END) AS WB9 
             , SUM(CASE WHEN OPER_GRP_1 = 'GATE' AND MAT_GRP_5 = '-' THEN QTY 
                        WHEN OPER_GRP_1 = 'GATE' AND MAT_GRP_1 = 'SE' AND MAT_GRP_5 = 'Merge' THEN QTY 
                        WHEN OPER_GRP_1 = 'GATE' AND MAT_GRP_1 <> 'SE' AND SUBSTR(MAT_GRP_4,-1) = SUBSTR(OPER, -1) THEN QTY 
                        ELSE 0 END) AS GATE 
             , SUM(CASE WHEN OPER IN ('A0950','A0900', 'A0910', 'A0920', 'A0930') THEN QTY ELSE 0 END) AS PLASMA 
             , SUM(CASE WHEN OPER IN ('A1000','A0980') THEN QTY ELSE 0 END) AS MOLD 
             , SUM(DECODE(OPER_GRP_1, 'CURE', QTY, 0)) AS CURE
             , SUM(DECODE(OPER_GRP_1, 'M/K', QTY, 0)) AS MK
             , SUM(DECODE(OPER_GRP_1, 'TRIM', QTY, 0)) AS TRIM
             , SUM(DECODE(OPER_GRP_1, 'TIN', QTY, 0)) AS TIN
             , SUM(DECODE(OPER_GRP_1, 'S/B/A', QTY, 0)) AS SBA
             , SUM(DECODE(OPER_GRP_1, 'SIG', QTY, 0)) AS SIG
             , SUM(DECODE(OPER, 'A1790', QTY, 0)) AS DC1
             , SUM(DECODE(OPER, 'A1795', QTY, 0)) AS DC2
             , SUM(CASE WHEN OPER_GRP_1 = 'AVI' AND OPER NOT IN ('A1790', 'A1795') THEN QTY ELSE 0 END) AS AVI
             , SUM(CASE WHEN OPER = 'A2030' THEN QTY ELSE 0 END) AS BAKE
             , SUM(CASE WHEN OPER IN ('A2050') THEN QTY ELSE 0 END) AS PVI
             , SUM(CASE WHEN OPER IN ('A2100','A2300') THEN QTY ELSE 0 END) AS QC_GATE 
             , SUM(DECODE(OPER_GRP_1, 'HMK3A', QTY, 0)) AS HMK3A
             , SUM(DECODE(OPER_GRP_1, 'HMK2A', 0, QTY)) AS W_ISSUE
             , SUM(CASE WHEN OPER_GRP_1 IN ('HMK2A', 'B/G') THEN 0 ELSE QTY END) AS W_BG
             , SUM(CASE WHEN OPER_GRP_1 IN ('HMK2A', 'B/G', 'SAW', 'SMT', 'S/P', 'D/A') THEN 0 
                        WHEN OPER_GRP_1 = 'W/B' AND MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> 'Merge' THEN 0 
                        ELSE QTY END) AS W_DA 
             , SUM(CASE WHEN OPER_GRP_1 IN ('HMK2A', 'B/G', 'SAW', 'SMT', 'S/P', 'D/A', 'W/B') THEN 0 ELSE QTY END) AS W_WB
             , SUM(CASE WHEN OPER_GRP_1 IN ('HMK2A', 'B/G', 'SAW', 'SMT', 'S/P', 'D/A', 'W/B', 'GATE', 'MOLD') THEN 0 ELSE QTY END) AS W_MOLD
          FROM (
                SELECT A.MAT_ID, A.OPER, B.OPER_GRP_1, C.MAT_GRP_1, C.MAT_GRP_4, C.MAT_GRP_5, QTY_1
                     , COMP_CNT, HX_COMP_MIN, HX_COMP_MAX 
                     , CASE WHEN MAT_GRP_1 = 'HX' AND HX_COMP_MIN IS NOT NULL
                                 THEN (CASE WHEN HX_COMP_MIN <> HX_COMP_MAX AND A.OPER > HX_COMP_MIN AND A.OPER <= HX_COMP_MAX THEN QTY_1 / NVL(COMP_CNT / 2,1)
                                            WHEN A.OPER <= HX_COMP_MAX THEN QTY_1 / NVL(COMP_CNT,1)
                                            ELSE QTY_1 END)
                            WHEN A.OPER <= 'A0395' THEN QTY_1 / NVL(COMP_CNT,1) 
                            ELSE QTY_1 
                       END QTY 
                  FROM RWIPLOTSTS A 
                     , MWIPOPRDEF B
                     , VWIPMATDEF C
                 WHERE 1=1 
                   AND A.FACTORY = B.FACTORY 
                   AND A.FACTORY = C.FACTORY 
                   AND A.OPER = B.OPER
                   AND A.MAT_ID = C.MAT_ID
                   AND A.FACTORY  = 'HMVA2' 
                   AND A.LOT_DEL_FLAG = ' '
                   AND A.LOT_TYPE = 'W'
                   AND A.LOT_CMF_5 LIKE 'P%' 
                   AND C.DELETE_FLAG = ' ' 
               )
         GROUP BY MAT_ID
       ) WIP  
     , ( 
        SELECT MAT.MAT_ID
             , SUM(CASE WHEN GUBUN ='DA' AND MAT.MAT_GRP_5 IN ('Merge', '-') THEN TRUNC(NVL(NVL(UPH.UPEH,0) * 24 * 0.68 * RES.RAS_CNT, 0)) ELSE 0 END) AS DA_CAPA
             , SUM(CASE WHEN GUBUN ='WB' AND MAT.MAT_GRP_5 IN ('Merge', '-') THEN TRUNC(NVL(NVL(UPH.UPEH,0) * 24 * 0.71 * RES.RAS_CNT, 0)) ELSE 0 END) AS WB_CAPA
             , SUM(CASE WHEN RES.OPER IN ('A0333','A0400', 'A0401') THEN TRUNC(NVL(NVL(UPH.UPEH,0) * 24 * 0.68 * RES.RAS_CNT, 0)) ELSE 0 END) AS DA1_CAPA
             , SUM(CASE WHEN RES.OPER = 'A0402' THEN TRUNC(NVL(NVL(UPH.UPEH,0) * 24 * 0.68 * RES.RAS_CNT, 0)) ELSE 0 END) AS DA2_CAPA
             , SUM(CASE WHEN RES.OPER = 'A0403' THEN TRUNC(NVL(NVL(UPH.UPEH,0) * 24 * 0.68 * RES.RAS_CNT, 0)) ELSE 0 END) AS DA3_CAPA
             , SUM(CASE WHEN RES.OPER = 'A0404' THEN TRUNC(NVL(NVL(UPH.UPEH,0) * 24 * 0.68 * RES.RAS_CNT, 0)) ELSE 0 END) AS DA4_CAPA
             , SUM(CASE WHEN RES.OPER = 'A0405' THEN TRUNC(NVL(NVL(UPH.UPEH,0) * 24 * 0.68 * RES.RAS_CNT, 0)) ELSE 0 END) AS DA5_CAPA
             , SUM(CASE WHEN RES.OPER = 'A0406' THEN TRUNC(NVL(NVL(UPH.UPEH,0) * 24 * 0.68 * RES.RAS_CNT, 0)) ELSE 0 END) AS DA6_CAPA
             , SUM(CASE WHEN RES.OPER = 'A0407' THEN TRUNC(NVL(NVL(UPH.UPEH,0) * 24 * 0.68 * RES.RAS_CNT, 0)) ELSE 0 END) AS DA7_CAPA
             , SUM(CASE WHEN RES.OPER = 'A0408' THEN TRUNC(NVL(NVL(UPH.UPEH,0) * 24 * 0.68 * RES.RAS_CNT, 0)) ELSE 0 END) AS DA8_CAPA
             , SUM(CASE WHEN RES.OPER = 'A0409' THEN TRUNC(NVL(NVL(UPH.UPEH,0) * 24 * 0.68 * RES.RAS_CNT, 0)) ELSE 0 END) AS DA9_CAPA
             , SUM(CASE WHEN RES.OPER IN ('A0600', 'A0601') THEN TRUNC(NVL(NVL(UPH.UPEH,0) * 24 * 0.71 * RES.RAS_CNT, 0)) ELSE 0 END) AS WB1_CAPA
             , SUM(CASE WHEN RES.OPER = 'A0602' THEN TRUNC(NVL(NVL(UPH.UPEH,0) * 24 * 0.71 * RES.RAS_CNT, 0)) ELSE 0 END) AS WB2_CAPA
             , SUM(CASE WHEN RES.OPER = 'A0603' THEN TRUNC(NVL(NVL(UPH.UPEH,0) * 24 * 0.71 * RES.RAS_CNT, 0)) ELSE 0 END) AS WB3_CAPA
             , SUM(CASE WHEN RES.OPER = 'A0604' THEN TRUNC(NVL(NVL(UPH.UPEH,0) * 24 * 0.71 * RES.RAS_CNT, 0)) ELSE 0 END) AS WB4_CAPA
             , SUM(CASE WHEN RES.OPER = 'A0605' THEN TRUNC(NVL(NVL(UPH.UPEH,0) * 24 * 0.71 * RES.RAS_CNT, 0)) ELSE 0 END) AS WB5_CAPA
             , SUM(CASE WHEN RES.OPER = 'A0606' THEN TRUNC(NVL(NVL(UPH.UPEH,0) * 24 * 0.71 * RES.RAS_CNT, 0)) ELSE 0 END) AS WB6_CAPA
             , SUM(CASE WHEN RES.OPER = 'A0607' THEN TRUNC(NVL(NVL(UPH.UPEH,0) * 24 * 0.71 * RES.RAS_CNT, 0)) ELSE 0 END) AS WB7_CAPA
             , SUM(CASE WHEN RES.OPER = 'A0608' THEN TRUNC(NVL(NVL(UPH.UPEH,0) * 24 * 0.71 * RES.RAS_CNT, 0)) ELSE 0 END) AS WB8_CAPA
             , SUM(CASE WHEN RES.OPER = 'A0609' THEN TRUNC(NVL(NVL(UPH.UPEH,0) * 24 * 0.71 * RES.RAS_CNT, 0)) ELSE 0 END) AS WB9_CAPA
          FROM ( 
                SELECT FACTORY, RES_STS_2, RES_STS_8 AS OPER 
                     , CASE WHEN RES_STS_8 LIKE 'A06%' THEN 'WB' ELSE 'DA' END AS GUBUN 
                     , RES_GRP_6 AS RES_MODEL, RES_GRP_7 AS UPEH_GRP, COUNT(RES_ID) AS RAS_CNT 
                  FROM MRASRESDEF 
                 WHERE FACTORY  = 'HMVA2' 
                   AND RES_CMF_9 = 'Y' 
                   AND RES_CMF_7 = 'Y' 
                   AND DELETE_FLAG = ' ' 
                   AND (RES_STS_8 LIKE 'A04%' OR RES_STS_8 LIKE 'A06%' OR RES_STS_8 = 'A0333')
                   AND (RES_STS_1 NOT IN ('C200', 'B199') OR RES_UP_DOWN_FLAG = 'U') 
                 GROUP BY FACTORY,RES_STS_2,RES_STS_8,RES_GRP_6,RES_GRP_7 
               ) RES 
             , CRASUPHDEF UPH 
             , MWIPMATDEF MAT 
         WHERE 1 = 1 
           AND RES.FACTORY = UPH.FACTORY(+) 
           AND RES.FACTORY = MAT.FACTORY 
           AND RES.OPER = UPH.OPER(+) 
           AND RES.RES_MODEL = UPH.RES_MODEL(+) 
           AND RES.UPEH_GRP = UPH.UPEH_GRP(+) 
           AND RES.RES_STS_2 = UPH.MAT_ID(+) 
           AND RES.RES_STS_2 = MAT.MAT_ID 
           AND MAT.DELETE_FLAG = ' ' 
         GROUP BY MAT.MAT_ID 
       ) CAP  
     , ( 
        SELECT MAT_ID 
             , DECODE(RESV_FIELD1, ' ', 0, RESV_FIELD1) AS ORI_PLAN 
             , DECODE(RESV_FIELD3, ' ', 0, RESV_FIELD3) AS REV_PLAN 
          FROM CWIPPLNMON 
         WHERE FACTORY  = 'HMVA2' 
           AND PLAN_MONTH = '202004' 
           AND PLAN_QTY_ASSY + DECODE(RESV_FIELD3, ' ', 0, RESV_FIELD3) > 0 
       ) MON  
 WHERE 1 = 1  
   AND MAT.MAT_ID = PLN.MAT_ID(+) 
   AND MAT.MAT_ID = SHP.MAT_ID(+) 
   AND MAT.MAT_ID = WIP.MAT_ID(+) 
   AND MAT.MAT_ID = CAP.MAT_ID(+) 
   AND MAT.MAT_ID = MON.MAT_ID(+) 
 GROUP BY MAT.MAT_GRP_1,  ' ', MAT.MAT_GRP_2, MAT.MAT_GRP_3, MAT.MAT_GRP_4,  ' ', MAT.MAT_GRP_6,  ' ',  ' ',  ' ', MAT.CONV_MAT_ID,  ' ',  ' ',  ' ' 
HAVING SUM(NVL(WEEK1_PLAN, 0) + NVL(SHP_WEEK, 0) + NVL(TOTAL, 0) + NVL(DA_CAPA, 0) + NVL(WB_CAPA, 0) + NVL(ORI_PLAN, 0) + NVL(REV_PLAN, 0) + NVL(SHP_MONTH, 0)) > 0
 ORDER BY MAT.MAT_GRP_1,  ' ', MAT.MAT_GRP_2, MAT.MAT_GRP_3, MAT.MAT_GRP_4,  ' ', MAT.MAT_GRP_6,  ' ',  ' ',  ' ', MAT.CONV_MAT_ID,  ' ',  ' ',  ' '
 )

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
SELECT LANGUAGE_2 FROM RWEBFUNDEF WHERE FUNC_NAME = 'PRD010421'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
WITH     
EMERGENCY AS (     
    SELECT KEY_1 AS DATA, KEY_2 AS GUBUN, DATA_1 AS MOKJUK, DATA_2 AS PLAN, DATA_3 AS START_TIME, DATA_4 AS END_TIME     
      FROM MGCMTBLDAT     
     WHERE 1=1     
       AND FACTORY = 'HMVA2'     
       AND TABLE_NAME = 'H_EMERGENCY_SET'     
)     
         SELECT NVL((SELECT DATA_1 FROM MGCMTBLDAT WHERE TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = MAT.MAT_GRP_1 AND ROWNUM=1), '-'), MAT.MAT_GRP_9, MAT.MAT_GRP_10, MAT.MAT_GRP_6
              , DECODE(EMERGENCY.GUBUN, 'PART', EMERGENCY.DATA, MAT.MAT_ID)  AS MAT_ID     
              , ' '  
              , EMERGENCY.GUBUN AS GUBUN     
              , EMERGENCY.MOKJUK AS MOKJUK     
              , TO_CHAR(TO_DATE(EMERGENCY.END_TIME, 'YYYYMMDDHH24MISS'), 'MM/DD HH24:MI')         
              , TO_CHAR(TO_DATE(EMERGENCY.START_TIME, 'YYYYMMDDHH24MISS'), 'MM/DD HH24:MI')             
              , EMERGENCY.PLAN AS PLAN              
              , NVL(FACMOV.QTY,0)    AS QTY              
              , EMERGENCY.PLAN - NVL(FACMOV.QTY,0) REMAIN          
              , WIP.HMK3A + WIP.FINISH + WIP.MOLD + WIP.WB + WIP.DA + WIP.SAW + WIP.STOCK AS TOTAL_WIP          
          , CASE WHEN EMERGENCY.PLAN - NVL(FACMOV.QTY,0) <= 0 THEN 0 ELSE 
                CASE WHEN ROUND((EMERGENCY.PLAN - NVL(FACMOV.QTY_PREV_DAY,0)) /   DECODE(TO_DATE(EMERGENCY.END_TIME,'YYYYMMDDHH24MISS') - TO_DATE(GET_WORK_DATE(TO_CHAR(SYSDATE-1, 'YYYYMMDDHH24MISS'), 'D')||'220000' ,'YYYYMMDDHH24MISS'),0,1), 0) <= 0 THEN EMERGENCY.PLAN - NVL(FACMOV.QTY,0)         
                     WHEN (TO_DATE(EMERGENCY.END_TIME,'YYYYMMDDHH24MISS') - TO_DATE(GET_WORK_DATE(TO_CHAR(SYSDATE-1, 'YYYYMMDDHH24MISS'), 'D')||'220000' ,'YYYYMMDDHH24MISS')) <= 1  THEN EMERGENCY.PLAN - NVL(FACMOV.QTY,0)         
                     ELSE ROUND((EMERGENCY.PLAN - NVL(FACMOV.QTY_PREV_DAY,0)) /   DECODE(TO_DATE(EMERGENCY.END_TIME,'YYYYMMDDHH24MISS') - TO_DATE(GET_WORK_DATE(TO_CHAR(SYSDATE-1, 'YYYYMMDDHH24MISS'), 'D')||'220000' ,'YYYYMMDDHH24MISS'),0,1), 0) END END IL_MOK         
              , TO_CHAR(TO_DATE(EMERGENCY.START_TIME, 'YYYYMMDDHH24MISS'), 'YYYY-MM-DD HH24:MI:SS')              
              , TO_CHAR(TO_DATE(EMERGENCY.END_TIME, 'YYYYMMDDHH24MISS'), 'YYYY-MM-DD HH24:MI:SS')              
              , MAT.TAT     
              , WIP.HMK3A     
              , WIP.FINISH     
              , WIP.MOLD     
              , WIP.WB     
              , WIP.DA     
              , WIP.SAW     
              , WIP.STOCK     
              , RESARR.WB_EQP_CNT     
              , RESARR.WB_CAPA     
              , RESARR.WB_QTY     
              , RESARR.WB_EXP_QTY WB_EXP_QTY     
              , RESARR.DA_EQP_CNT     
              , RESARR.DA_CAPA     
              , RESARR.DA_QTY     
              , RESARR.DA_EXP_QTY DA_EXP_QTY     
              , (   SELECT SUM(LOSS_QTY) AS LOSS          
                      FROM RWIPLOTLSM LSM          
                         , MWIPMATDEF MAT         
                     WHERE 1=1          
                       AND MAT.FACTORY = LSM.FACTORY          
                       AND MAT.MAT_ID = LSM.MAT_ID         
                       AND MAT.DELETE_FLAG = ' '         
                       AND MAT.FACTORY = 'HMVA2'         
                       AND LSM.TRAN_TIME >= EMERGENCY.START_TIME         
                       AND LSM.HIST_DEL_FLAG = ' '         
                       AND EMERGENCY.GUBUN = 'PART'         
                       AND LSM.LOSS_CODE <> 'N01'          
                       AND MAT.MAT_ID LIKE EMERGENCY.DATA||'%'          
                       AND LSM.MAT_ID LIKE EMERGENCY.DATA||'%') LOSS          
              , WIP.WB_LAST          
           FROM EMERGENCY     
              ,(SELECT EMERGENCY.DATA     
                     , MAX(MAT_GRP_1)              AS MAT_GRP_1     
                     , MAX(MAT_GRP_9)              AS MAT_GRP_9     
                     , MAX(MAT_GRP_10)             AS MAT_GRP_10     
                     , MAX(MAT_GRP_6)              AS MAT_GRP_6     
                     , MAX(FACTORY)                AS FACTORY     
                     , MAX(MAT_TYPE)               AS MAT_TYPE     
                     , MAX(MWIPMATDEF.MAT_ID)      AS MAT_ID     
                     , MAX(MWIPMATDEF.VENDOR_ID)   AS VENDOR_ID     
                     , MIN(TAT.TAT)                AS TAT     
                  FROM MWIPMATDEF     
                     , EMERGENCY     
                     , (SELECT SAP.SAP_CODE, MAT.VENDOR_ID, MAT.MAT_ID, SUM(SAP.TAT_DAY+SAP.TAT_DAY_WAIT) AS TAT     
                          FROM CWIPSAPTAT@RPTTOMES SAP     
                             , MWIPMATDEF MAT     
                         WHERE SAP.SAP_CODE = MAT.VENDOR_ID     
                           AND MAT.FACTORY = 'HMVA2'         
                           AND MAT.FACTORY = SAP.FACTORY         
                           AND MAT.MAT_TYPE = 'FG'         
                           AND SAP.RESV_FIELD_1 = ' '          
                         GROUP BY SAP.SAP_CODE, MAT.VENDOR_ID, MAT.MAT_ID     
                       ) TAT     
                 WHERE EMERGENCY.GUBUN = 'PART'     
                   AND ( MWIPMATDEF.MAT_ID LIKE EMERGENCY.DATA  OR MWIPMATDEF.MAT_ID = EMERGENCY.DATA )     
                   AND FACTORY = 'HMVA2'     
                   AND DELETE_FLAG = ' '     
                   AND MAT_TYPE = 'FG'     
                   AND MWIPMATDEF.MAT_ID LIKE '%'     
                   AND MWIPMATDEF.MAT_ID = TAT.MAT_ID(+)     
                 GROUP BY DATA     
                ) MAT     
              , (     
                SELECT EMERGENCY.DATA     
                     , SUM(NVL((CASE WHEN A.MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND MAT_ID LIKE 'SEKS%') THEN CASE WHEN A.MAT_GRP_5 IN ('2nd','Merge') OR MAT_GRP_5 LIKE 'Middle%' THEN NVL(F.V0,0)/NVL(LOSS.DATA_1,1) ELSE 0 END     
                                WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN CASE WHEN A.MAT_GRP_5 IN ('1st','Merge') OR MAT_GRP_5 LIKE 'Middle%' THEN NVL(F.V0,0)/NVL(LOSS.DATA_1,1) ELSE 0 END     
                                ELSE NVL(F.V0,0)/NVL(LOSS.DATA_1,1)     
                                END),0)     
                          ) AS STOCK     
                     , SUM(NVL((CASE WHEN A.MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND MAT_ID LIKE 'SEKS%') THEN DECODE(A.MAT_GRP_5, '2nd', NVL(F.V1,0)/NVL(LOSS.DATA_1,1)+NVL(F.V2,0)/NVL(LOSS.DATA_1,1), 'Merge', NVL(F.V1,0)/NVL(LOSS.DATA_1,1)+NVL(F.V2,0)/NVL(LOSS.DATA_1,1), 0)     
                                WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN CASE WHEN A.MAT_GRP_5 IN ('1st','Merge') OR MAT_GRP_5 LIKE 'Middle%' THEN NVL(F.V1,0)/NVL(LOSS.DATA_1,1)+NVL(F.V2,0)/NVL(LOSS.DATA_1,1) ELSE 0 END     
                                ELSE NVL(F.V1,0)/NVL(LOSS.DATA_1,1)+NVL(F.V2,0)/NVL(LOSS.DATA_1,1)     
                                END),0)     
                           ) AS SAW     
                     , SUM(NVL((CASE WHEN A.MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND MAT_ID LIKE 'SEKS%') THEN DECODE(A.MAT_GRP_5, '2nd', NVL(F.V3,0)/NVL(LOSS.DATA_1,1)+NVL(F.V4,0), 'Merge', NVL(F.V3,0)/NVL(LOSS.DATA_1,1)+NVL(F.V4,0), 0)     
                               WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN CASE WHEN A.MAT_GRP_5 IN ('1st','Merge') OR MAT_GRP_5 LIKE 'Middle%' THEN NVL(F.V3,0)/NVL(LOSS.DATA_1,1)+NVL(F.V4,0) ELSE 0 END     
                               ELSE NVL(F.V3,0)/NVL(LOSS.DATA_1,1)+NVL(F.V4,0)     
                                 END),0)     
                           ) AS DA     
                     , SUM(NVL((CASE WHEN A.MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND MAT_ID LIKE 'SEKS%') THEN DECODE(A.MAT_GRP_5, '2nd', NVL(F.V5+F.V16,0), 'Merge', NVL(F.V5+F.V16,0), 0)     
                               WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN CASE WHEN A.MAT_GRP_5 IN ('1st','Merge') OR MAT_GRP_5 LIKE 'Middle%' THEN NVL(F.V5+F.V16,0) ELSE 0 END     
                               ELSE NVL(F.V5+F.V16,0)     
                               END),0)     
                           ) AS WB     
                     , SUM(NVL((CASE WHEN A.MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND MAT_ID LIKE 'SEKS%') THEN DECODE(A.MAT_GRP_5, '2nd', 0, 'Merge', NVL(F.V5+F.V16,0), 0)              
                               WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN CASE WHEN A.MAT_GRP_5 IN ('Merge') THEN NVL(F.V5+F.V16,0) ELSE 0 END              
                               ELSE NVL(F.V5+F.V16,0)              
                               END),0)              
                           ) AS WB_LAST             
                     , SUM(NVL((CASE WHEN A.MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND MAT_ID LIKE 'SEKS%') THEN DECODE(A.MAT_GRP_5, '2nd', NVL(F.V6+F.V7,0), 'Merge', NVL(F.V6+F.V7,0), 0)     
                               WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN CASE WHEN A.MAT_GRP_5 IN ('1st','Merge') OR MAT_GRP_5 LIKE 'Middle%' THEN NVL(F.V6+F.V7,0) ELSE 0 END     
                               ELSE NVL(F.V6+F.V7,0)     
                          END),0)     
                           ) AS MOLD     
                     , SUM(NVL((CASE WHEN A.MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND MAT_ID LIKE 'SEKS%') THEN DECODE(A.MAT_GRP_5, '2nd', NVL(F.V8+F.V9+F.V10+F.V11+F.V12+F.V13+F.V14,0), 'Merge', NVL(F.V8+F.V9+F.V10+F.V11+F.V12+F.V13+F.V14,0), 0)     
                               WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN CASE WHEN A.MAT_GRP_5 IN ('1st','Merge') OR MAT_GRP_5 LIKE 'Middle%' THEN NVL(F.V8+F.V9+F.V10+F.V11+F.V12+F.V13+F.V14,0) ELSE 0 END     
                               ELSE NVL(F.V8+F.V9+F.V10+F.V11+F.V12+F.V13+F.V14,0)     
                               END),0)     
                           ) AS FINISH     
                     , SUM(NVL((CASE WHEN A.MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND MAT_ID LIKE 'SEKS%') THEN DECODE(A.MAT_GRP_5, '2nd', NVL(F.V15,0), 'Merge', NVL(F.V15,0), 0)     
                               WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN CASE WHEN A.MAT_GRP_5 IN ('1st','Merge') OR MAT_GRP_5 LIKE 'Middle%' THEN NVL(F.V15,0) ELSE 0 END     
                               ELSE NVL(F.V15,0)     
                               END),0)     
                           ) AS HMK3A     
                  FROM (     
                        SELECT MAT.MAT_GRP_1, MAT.MAT_GRP_2, MAT.MAT_GRP_3, MAT.MAT_GRP_4, MAT.MAT_GRP_5, MAT.MAT_GRP_6, MAT.MAT_GRP_7, MAT.MAT_GRP_8     
                             , DECODE(MAT.MAT_GRP_1,'SE',MAT.MAT_GRP_9,' ') AS MAT_GRP_9, MAT.MAT_GRP_10, MAT.MAT_CMF_10, MAT.MAT_ID, MAT.MAT_CMF_7, MAT.MAT_CMF_13, MAT.MAT_CMF_11     
                          FROM MWIPMATDEF MAT     
                         WHERE 1 = 1     
                           AND MAT.FACTORY = 'HMVA2'     
                           AND MAT.MAT_TYPE= 'FG'     
                           AND MAT.DELETE_FLAG <> 'Y'     
                         GROUP BY MAT.MAT_GRP_1, MAT.MAT_GRP_2, MAT.MAT_GRP_3, MAT.MAT_GRP_4, MAT.MAT_GRP_5, MAT.MAT_GRP_6, MAT.MAT_GRP_7, MAT.MAT_GRP_8, MAT.MAT_GRP_9, MAT.MAT_GRP_10, MAT.MAT_CMF_10, MAT.MAT_ID, MAT.MAT_CMF_7, MAT.MAT_CMF_13, MAT.MAT_CMF_11     
                       ) A     
                     , (     
                        SELECT LOT.MAT_ID, MAT.MAT_GRP_3     
                             , SUM(DECODE(OPER_GRP_1, 'HMK2A', DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY), 0)) V0     
                             , SUM(DECODE(OPER_GRP_1, 'B/G', DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY), 0)) V1     
                             , SUM(DECODE(OPER_GRP_1, 'SAW', DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY), 0)) V2     
                             , SUM(DECODE(OPER_GRP_1, 'S/P', DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY), 0)) V3     
                             , SUM(DECODE(OPER_GRP_1, 'D/A', DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY), 0)) V4     
                             , SUM(DECODE(OPER_GRP_1, 'W/B', DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY), 0)) V5     
                             , SUM(DECODE(OPER_GRP_1, 'MOLD', DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY), 0)) V6     
                             , SUM(DECODE(OPER_GRP_1, 'CURE', DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY), 0)) V7     
                             , SUM(DECODE(OPER_GRP_1, 'M/K', DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY), 0)) V8     
                             , SUM(DECODE(OPER_GRP_1, 'TRIM', DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY), 0)) V9     
                             , SUM(DECODE(OPER_GRP_1, 'TIN', DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY), 0)) V10     
                             , SUM(DECODE(OPER_GRP_1, 'S/B/A', DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY), 0)) V11     
                             , SUM(DECODE(OPER_GRP_1, 'SIG', DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY), 0)) V12     
                             , SUM(DECODE(OPER_GRP_1, 'AVI', DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY), 0)) V13     
                             , SUM(DECODE(OPER_GRP_1, 'V/I', DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY), 0)) V14     
                             , SUM(DECODE(OPER_GRP_1, 'HMK3A', DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY), 0)) V15     
                             , SUM(DECODE(OPER_GRP_1, 'GATE', DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY), 0)) V16     
                          FROM (     
                                SELECT A.FACTORY, A.MAT_ID, B.OPER_GRP_1     
                                     , SUM(A.QTY_1) QTY     
                                  FROM RWIPLOTSTS A     
                                     , MWIPOPRDEF B     
                                 WHERE 1 = 1     
                                   AND A.FACTORY = B.FACTORY(+)     
                                   AND A.OPER = B.OPER(+)     
                                   AND A.FACTORY = 'HMVA2'     
                                   AND A.LOT_TYPE = 'W'     
                                   AND A.LOT_DEL_FLAG = ' '     
                                   AND A.LOT_CMF_5 LIKE '%'     
                                 GROUP BY A.FACTORY, A.MAT_ID, B.OPER_GRP_1     
                               ) LOT     
                             , MWIPMATDEF MAT     
                         WHERE 1 = 1     
                           AND LOT.FACTORY = MAT.FACTORY     
                           AND LOT.MAT_ID = MAT.MAT_ID     
                           AND MAT.DELETE_FLAG <> 'Y'     
                           AND MAT.MAT_GRP_2 <> '-'     
                         GROUP BY LOT.MAT_ID ,MAT.MAT_GRP_3     
                       ) F,     
                       (     
                        SELECT KEY_1,DATA_1     
                          FROM MGCMTBLDAT     
                         WHERE FACTORY = 'HMVA2'     
                           AND TABLE_NAME IN ('H_SEC_AUTO_LOSS','H_HX_AUTO_LOSS')     
                       ) LOSS     
                       , EMERGENCY     
                 WHERE 1 = 1     
                   AND A.MAT_ID = F.MAT_ID(+)     
                   AND A.MAT_ID = LOSS.KEY_1(+)     
                   AND (A.MAT_ID LIKE EMERGENCY.DATA OR A.MAT_ID = EMERGENCY.DATA)     
                 GROUP BY EMERGENCY.DATA     
                ) WIP     
              , (     
                SELECT EMERGENCY.DATA     
                     , SUM(S1_FAC_OUT_QTY_1 + S2_FAC_OUT_QTY_1 + S3_FAC_OUT_QTY_1 + S4_FAC_OUT_QTY_1) AS QTY     
                     , SUM(DECODE (WORK_DATE, GET_WORK_DATE(TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'), 'D') ,0,S1_FAC_OUT_QTY_1 + S2_FAC_OUT_QTY_1 + S3_FAC_OUT_QTY_1 + S4_FAC_OUT_QTY_1)) QTY_PREV_DAY         
                  FROM RSUMFACMOV, EMERGENCY     
                 WHERE 1=1     
                   AND CM_KEY_1 = 'HMVA2'     
                   AND CM_KEY_2 = 'PROD'     
                   AND CM_KEY_3 LIKE '%'     
                   AND FACTORY <> 'RETURN'     
                   AND EMERGENCY.GUBUN = 'PART'     
                   AND ( RSUMFACMOV.MAT_ID LIKE EMERGENCY.DATA  OR RSUMFACMOV.MAT_ID = EMERGENCY.DATA )     
                   AND WORK_DATE BETWEEN TO_CHAR(ADD_MONTHS(SYSDATE, -1), 'YYYYMMDD')  AND TO_CHAR(SYSDATE, 'YYYYMMDD')     
                   AND WORK_DATE >= GET_WORK_DATE(EMERGENCY.START_TIME, 'D')      
                 GROUP BY EMERGENCY.DATA     
                ) FACMOV     
              , (     
                SELECT DATA     
                     , SUM(WB_EQP_CNT)  WB_EQP_CNT     
                     , SUM(WB_CAPA)     WB_CAPA     
                     , SUM(WB_QTY)      WB_QTY     
                     , SUM(WB_EXP_QTY)  WB_EXP_QTY     
                     , SUM(DA_EQP_CNT)  DA_EQP_CNT     
                     , SUM(DA_CAPA)     DA_CAPA     
                     , SUM(DA_QTY)      DA_QTY     
                     , SUM(DA_EXP_QTY)  DA_EXP_QTY     
                  FROM (     
                        SELECT DATA     
                             , DECODE(OPER, 'WB', SUM(EQP_CNT), 0)    WB_EQP_CNT     
                             , DECODE(OPER, 'WB', SUM(CAPA), 0)       WB_CAPA     
                             , DECODE(OPER, 'WB', SUM(QTY), 0)        WB_QTY     
                             , DECODE(OPER, 'WB', SUM(EXPECT_QTY), 0) WB_EXP_QTY     
                             , DECODE(OPER, 'DA', SUM(EQP_CNT), 0)    DA_EQP_CNT     
                             , DECODE(OPER, 'DA', SUM(CAPA), 0)       DA_CAPA     
                             , DECODE(OPER, 'DA', SUM(QTY), 0)        DA_QTY     
                             , DECODE(OPER, 'DA', SUM(EXPECT_QTY), 0) DA_EXP_QTY     
                          FROM (     
                                SELECT RES.DATA     
                                     , MAT.MAT_ID     
                                     , SUM(RES.EQP_CNT) AS EQP_CNT     
                                     , SUM(CASE WHEN RES.OPER LIKE 'A06%' THEN TRUNC(NVL(NVL(UPH.UPEH,0) * 24 * 0.75 * RES.EQP_CNT, 0)) 
                                                WHEN RES.OPER LIKE 'A04%' THEN TRUNC(NVL(NVL(UPH.UPEH,0) * 24 * 0.7 * RES.EQP_CNT, 0)) 
                                                ELSE TRUNC(NVL(NVL(UPH.UPEH,0) * 24 * 0.7 * RES.EQP_CNT, 0)) 
                                           END) AS CAPA 
                                     , DECODE(SUBSTR(RES.OPER, 1,3), 'A03', 'DA', 'A04', 'DA', 'A06', 'WB') AS OPER     
                                     , MAX(WIPMOV.QTY) AS QTY     
                                     , CASE     
                                        WHEN TO_CHAR(SYSDATE, 'HH24') >= 22 THEN ROUND(SUM(WIPMOV.QTY)/ (SYSDATE - TO_DATE(TO_CHAR(SYSDATE, 'YYYYMMDD')||'220000', 'YYYYMMDDHH24MISS')), 0)     
                                        ELSE ROUND(SUM(WIPMOV.QTY)/ (SYSDATE - TO_DATE(TO_CHAR(SYSDATE-1, 'YYYYMMDD')||'220000', 'YYYYMMDDHH24MISS')), 0)     
                                       END     
                                     AS EXPECT_QTY     
                                  FROM (     
                                        SELECT EMERGENCY.DATA, FACTORY, RES_STS_2, RES_STS_8 AS OPER, RES_GRP_6 AS RES_MODEL, RES_GRP_7 AS UPEH_GRP, COUNT(RES_ID) AS EQP_CNT     
                                          FROM MRASRESDEF, EMERGENCY     
                                         WHERE 1 = 1     
                                           AND FACTORY  = 'HMVA2'     
                                           AND RES_CMF_9 = 'Y'     
                                           AND RES_CMF_7 = 'Y'     
                                           AND DELETE_FLAG = ' '     
                                           AND (RES_STS_8 LIKE 'A06%' OR RES_STS_8 LIKE 'A04%' OR RES_STS_8 = 'A0333')     
                                           AND ( RES_STS_2 LIKE EMERGENCY.DATA  OR RES_STS_2 = EMERGENCY.DATA )   
                                         GROUP BY EMERGENCY.DATA,FACTORY,RES_STS_2,RES_STS_8,RES_GRP_6,RES_GRP_7     
                                       ) RES     
                                     , CRASUPHDEF UPH     
                                     , MWIPMATDEF MAT     
                                     , (     
                                        SELECT MAT_ID, OPER AS OPER, SUM(S1_END_QTY_1 + S2_END_QTY_1 + S3_END_QTY_1 ) QTY     
                                          FROM RSUMWIPMOV    
                                         WHERE 1=1     
                                           AND WORK_DATE = GET_WORK_DATE(TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'), 'D')     
                                           AND LOT_TYPE = 'W'     
                                           AND FACTORY = 'HMVA2'     
                                           AND (OPER LIKE 'A04%' OR OPER LIKE 'A06%' OR OPER = 'A0333') 
                                         GROUP BY MAT_ID, OPER 
                                        ) WIPMOV     
                                 WHERE 1 = 1     
                                     AND   MAT.DELETE_FLAG=' '                        
                                     AND   RES.FACTORY=MAT.FACTORY                    
                                     AND   RES.RES_STS_2 = MAT.MAT_ID                 
                                     AND   RES.FACTORY=UPH.FACTORY(+)                 
                                     AND   RES.OPER=UPH.OPER(+)                       
                                     AND   RES.RES_MODEL = UPH.RES_MODEL(+)           
                                     AND   RES.UPEH_GRP = UPH.UPEH_GRP(+)             
                                     AND   RES.RES_STS_2 = UPH.MAT_ID(+)              
                                     AND   RES.FACTORY  = 'HMVA2'                     
                                     AND   RES.OPER NOT IN ('00001','00002')          
                                     AND   RES.RES_STS_2 = WIPMOV.MAT_ID(+)           
                                     AND   RES.OPER = WIPMOV.OPER(+)                  
                                     AND   ((RES.OPER LIKE 'A040%' AND RES.OPER = 'A040'||DECODE(MAT.MAT_GRP_4,'SD2','2','SD3','3','SD4','4','SD5','5','SD8','8','0' ) ) OR 
                                            (RES.OPER LIKE 'A060%' AND RES.OPER = 'A060'||DECODE(MAT.MAT_GRP_4,'SD2','2','SD3','3','SD4','4','SD5','5','SD8','8','0' ) ) OR RES.OPER = 'A0333')
                                   GROUP BY DATA, MAT.MAT_ID, SUBSTR(RES.OPER, 1,3)   
                                ORDER BY MAT.MAT_ID     
                        )     
                         GROUP BY DATA, OPER     
                     )     
                 GROUP BY DATA     
                ) RESARR     
          WHERE 1=1     
            AND EMERGENCY.GUBUN = 'PART'     
            AND ( MAT.MAT_ID LIKE EMERGENCY.DATA OR MAT.MAT_ID = EMERGENCY.DATA )     
            AND EMERGENCY.DATA = RESARR.DATA(+)     
            AND EMERGENCY.DATA = WIP.DATA(+)     
            AND EMERGENCY.DATA = FACMOV.DATA(+)     
            AND MAT_ID LIKE '%'     
        UNION ALL     
         SELECT HEAD.CUSTOMER, HEAD.MAT_GRP_9, HEAD.MAT_GRP_10, HEAD.MAT_GRP_6
              , NVL((SELECT MAT_ID FROM RWIPLOTSTS WHERE (LOT_ID = EMERGENCY.DATA OR LOT_ID LIKE EMERGENCY.DATA) AND ROWNUM = 1), '-' ) AS MAT_ID     
              , EMERGENCY.DATA     
              , EMERGENCY.GUBUN AS GUBUN     
              , EMERGENCY.MOKJUK AS MOKJUK     
              , TO_CHAR(TO_DATE(EMERGENCY.END_TIME, 'YYYYMMDDHH24MISS'), 'MM/DD HH24:MI')          
              , TO_CHAR(TO_DATE(EMERGENCY.START_TIME, 'YYYYMMDDHH24MISS'), 'MM/DD HH24:MI')             
              , EMERGENCY.PLAN AS PLAN              
              , NVL(RUN_LOT.QTY,0)              
              , EMERGENCY.PLAN - NVL(RUN_LOT.QTY,0) REMAIN            
              , WIP_RUN_LOT.HMK3A + WIP_RUN_LOT.FINISH + WIP_RUN_LOT.MOLD + WIP_RUN_LOT.WB + WIP_RUN_LOT.DA + WIP_RUN_LOT.SAW + WIP_RUN_LOT.STOCK AS TOTAL_WIP           
              , CASE WHEN EMERGENCY.PLAN - NVL(RUN_LOT.QTY,0) <= 0 THEN 0 ELSE   
                CASE WHEN ROUND((EMERGENCY.PLAN - NVL(RUN_LOT.QTY_PREV_DAY,0)) /   DECODE(TO_DATE(EMERGENCY.END_TIME,'YYYYMMDDHH24MISS') - TO_DATE(GET_WORK_DATE(TO_CHAR(SYSDATE-1, 'YYYYMMDDHH24MISS'), 'D')||'220000' ,'YYYYMMDDHH24MISS'),0,1), 0) <= 0 THEN EMERGENCY.PLAN - NVL(RUN_LOT.QTY,0)         
                     WHEN (TO_DATE(EMERGENCY.END_TIME,'YYYYMMDDHH24MISS') - TO_DATE(GET_WORK_DATE(TO_CHAR(SYSDATE-1, 'YYYYMMDDHH24MISS'), 'D')||'220000' ,'YYYYMMDDHH24MISS')) <= 1  THEN EMERGENCY.PLAN - NVL(RUN_LOT.QTY,0)         
                     ELSE ROUND((EMERGENCY.PLAN - NVL(RUN_LOT.QTY_PREV_DAY,0)) /   DECODE(TO_DATE(EMERGENCY.END_TIME,'YYYYMMDDHH24MISS') - TO_DATE(GET_WORK_DATE(TO_CHAR(SYSDATE-1, 'YYYYMMDDHH24MISS'), 'D')||'220000' ,'YYYYMMDDHH24MISS'),0,1), 0) END END IL_MOK                  
              , TO_CHAR(TO_DATE(EMERGENCY.START_TIME, 'YYYYMMDDHH24MISS'), 'YYYY-MM-DD HH24:MI:SS')              
              , TO_CHAR(TO_DATE(EMERGENCY.END_TIME, 'YYYYMMDDHH24MISS'), 'YYYY-MM-DD HH24:MI:SS')              
              , TAT.TAT     
              , WIP_RUN_LOT.HMK3A     
              , WIP_RUN_LOT.FINISH     
              , WIP_RUN_LOT.MOLD     
              , WIP_RUN_LOT.WB     
              , WIP_RUN_LOT.DA     
              , WIP_RUN_LOT.SAW     
              , WIP_RUN_LOT.STOCK     
              , RESARR_LOT.WB_EQP_CNT     
              , RESARR_LOT.WB_CAPA     
              , RESARR_LOT.WB_QTY     
              , RESARR_LOT.WB_EXP_QTY WB_EXP_QTY     
              , RESARR_LOT.DA_EQP_CNT     
              , RESARR_LOT.DA_CAPA     
              , RESARR_LOT.DA_QTY     
              , RESARR_LOT.DA_EXP_QTY DA_EXP_QTY     
              , (SELECT SUM(LOSS_QTY) AS LOSS          
                   FROM RWIPLOTLSM         
                  WHERE TRAN_TIME >= EMERGENCY.START_TIME          
                    AND HIST_DEL_FLAG = ' '          
                    AND LOT_ID LIKE EMERGENCY.DATA||'%' ) LOSS            
              , WIP_RUN_LOT.WB_LAST 
           FROM EMERGENCY     
           LEFT OUTER JOIN (     
                SELECT EMERGENCY.DATA     
                     , MAX(WIPMAT.MAT_GRP_1)     AS MAT_GRP_1     
                     , MAX(WIPMAT.MAT_GRP_10)    AS MAT_GRP_10     
                     , MAX(WIPMAT.MAT_GRP_6)     AS MAT_GRP_6     
                     , MAX(WIPMAT.FACTORY)       AS FACTORY     
                     , MAX(WIPMAT.MAT_TYPE)      AS MAT_TYPE     
                     , MAX(WIPMAT.MAT_ID)        AS MAT_ID     
                     , MAX(WIPMAT.DELETE_FLAG)   AS DELETE_FLAG     
                     , MAX(WIPMAT.VENDOR_ID)     AS VENDOR_ID     
                  FROM MWIPMATDEF WIPMAT, RWIPLOTSTS LOT, EMERGENCY     
                 WHERE 1 = 1     
                   AND WIPMAT.FACTORY = 'HMVA2'     
                   AND WIPMAT.DELETE_FLAG = ' '     
                   AND WIPMAT.MAT_TYPE = 'FG'     
                   AND WIPMAT.MAT_ID LIKE '%'     
                   AND WIPMAT.MAT_ID = LOT.MAT_ID     
                   AND LOT.FACTORY = 'HMVA2'     
                   AND LOT.LOT_DEL_FLAG = ' '     
                   AND LOT.LOT_TYPE = 'W'     
                   AND ( ( EMERGENCY.GUBUN = 'RUN' AND ( LOT.LOT_ID LIKE EMERGENCY.DATA||'%' ) ) OR     
                         ( EMERGENCY.GUBUN = 'LOT' AND ( LOT.LOT_ID LIKE EMERGENCY.DATA||'%' ) ) )      
                 GROUP BY EMERGENCY.DATA     
                ) MAT ON EMERGENCY.DATA = MAT.DATA     
           LEFT OUTER JOIN (     
                SELECT EMERGENCY.DATA     
                     , SUM(NVL((CASE WHEN A.MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND MAT_ID LIKE 'SEKS%') THEN CASE WHEN A.MAT_GRP_5 IN ('2nd','Merge') OR MAT_GRP_5 LIKE 'Middle%' THEN NVL(F.V0,0)/NVL(LOSS.DATA_1,1) ELSE 0 END     
                                WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN CASE WHEN A.MAT_GRP_5 IN ('1st','Merge') OR MAT_GRP_5 LIKE 'Middle%' THEN NVL(F.V0,0)/NVL(LOSS.DATA_1,1) ELSE 0 END     
                                ELSE NVL(F.V0,0)/NVL(LOSS.DATA_1,1)     
                                END),0)     
                          ) AS STOCK     
                     , SUM(NVL((CASE WHEN A.MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND MAT_ID LIKE 'SEKS%') THEN DECODE(A.MAT_GRP_5, '2nd', NVL(F.V1,0)/NVL(LOSS.DATA_1,1)+NVL(F.V2,0)/NVL(LOSS.DATA_1,1), 'Merge', NVL(F.V1,0)/NVL(LOSS.DATA_1,1)+NVL(F.V2,0)/NVL(LOSS.DATA_1,1), 0)     
                                WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN CASE WHEN A.MAT_GRP_5 IN ('1st','Merge') OR MAT_GRP_5 LIKE 'Middle%' THEN NVL(F.V1,0)/NVL(LOSS.DATA_1,1)+NVL(F.V2,0)/NVL(LOSS.DATA_1,1) ELSE 0 END     
                                ELSE NVL(F.V1,0)/NVL(LOSS.DATA_1,1)+NVL(F.V2,0)/NVL(LOSS.DATA_1,1)     
                                END),0)     
                           ) AS SAW     
                     , SUM(NVL((CASE WHEN A.MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND MAT_ID LIKE 'SEKS%') THEN DECODE(A.MAT_GRP_5, '2nd', NVL(F.V3,0)/NVL(LOSS.DATA_1,1)+NVL(F.V4,0), 'Merge', NVL(F.V3,0)/NVL(LOSS.DATA_1,1)+NVL(F.V4,0), 0)     
                               WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN CASE WHEN A.MAT_GRP_5 IN ('1st','Merge') OR MAT_GRP_5 LIKE 'Middle%' THEN NVL(F.V3,0)/NVL(LOSS.DATA_1,1)+NVL(F.V4,0) ELSE 0 END     
                               ELSE NVL(F.V3,0)/NVL(LOSS.DATA_1,1)+NVL(F.V4,0)     
                                 END),0)     
                           ) AS DA     
                     , SUM(NVL((CASE WHEN A.MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND MAT_ID LIKE 'SEKS%') THEN DECODE(A.MAT_GRP_5, '2nd', NVL(F.V5+F.V16,0), 'Merge', NVL(F.V5+F.V16,0), 0)     
                               WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN CASE WHEN A.MAT_GRP_5 IN ('1st','Merge') OR MAT_GRP_5 LIKE 'Middle%' THEN NVL(F.V5+F.V16,0) ELSE 0 END     
                               ELSE NVL(F.V5+F.V16,0)     
                               END),0)     
                           ) AS WB     
                     , SUM(NVL((CASE WHEN A.MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND MAT_ID LIKE 'SEKS%') THEN DECODE(A.MAT_GRP_5, '2nd', 0, 'Merge', NVL(F.V5+F.V16,0), 0)              
                               WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN CASE WHEN A.MAT_GRP_5 IN ('Merge') THEN NVL(F.V5+F.V16,0) ELSE 0 END              
                               ELSE NVL(F.V5+F.V16,0)              
                               END),0)              
                           ) AS WB_LAST             
                     , SUM(NVL((CASE WHEN A.MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND MAT_ID LIKE 'SEKS%') THEN DECODE(A.MAT_GRP_5, '2nd', NVL(F.V6+F.V7,0), 'Merge', NVL(F.V6+F.V7,0), 0)     
                               WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN CASE WHEN A.MAT_GRP_5 IN ('1st','Merge') OR MAT_GRP_5 LIKE 'Middle%' THEN NVL(F.V6+F.V7,0) ELSE 0 END     
                               ELSE NVL(F.V6+F.V7,0)     
                          END),0)     
                           ) AS MOLD     
                     , SUM(NVL((CASE WHEN A.MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND MAT_ID LIKE 'SEKS%') THEN DECODE(A.MAT_GRP_5, '2nd', NVL(F.V8+F.V9+F.V10+F.V11+F.V12+F.V13+F.V14,0), 'Merge', NVL(F.V8+F.V9+F.V10+F.V11+F.V12+F.V13+F.V14,0), 0)     
                               WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN CASE WHEN A.MAT_GRP_5 IN ('1st','Merge') OR MAT_GRP_5 LIKE 'Middle%' THEN NVL(F.V8+F.V9+F.V10+F.V11+F.V12+F.V13+F.V14,0) ELSE 0 END     
                               ELSE NVL(F.V8+F.V9+F.V10+F.V11+F.V12+F.V13+F.V14,0)     
                               END),0)     
                           ) AS FINISH     
                     , SUM(NVL((CASE WHEN A.MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND MAT_ID LIKE 'SEKS%') THEN DECODE(A.MAT_GRP_5, '2nd', NVL(F.V15,0), 'Merge', NVL(F.V15,0), 0)     
                               WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN CASE WHEN A.MAT_GRP_5 IN ('1st','Merge') OR MAT_GRP_5 LIKE 'Middle%' THEN NVL(F.V15,0) ELSE 0 END     
                               ELSE NVL(F.V15,0)     
                               END),0)     
                           ) AS HMK3A     
                  FROM (     
                        SELECT MAT.MAT_GRP_1, MAT.MAT_GRP_2, MAT.MAT_GRP_3, MAT.MAT_GRP_4, MAT.MAT_GRP_5, MAT.MAT_GRP_6, MAT.MAT_GRP_7, MAT.MAT_GRP_8     
                             , DECODE(MAT.MAT_GRP_1,'SE',MAT.MAT_GRP_9,' ') AS MAT_GRP_9, MAT.MAT_GRP_10, MAT.MAT_CMF_10, MAT.MAT_ID, MAT.MAT_CMF_7, MAT.MAT_CMF_13, MAT.MAT_CMF_11     
                          FROM MWIPMATDEF MAT     
                         WHERE 1 = 1     
                           AND MAT.FACTORY = 'HMVA2'     
                           AND MAT.MAT_TYPE= 'FG'     
                           AND MAT.DELETE_FLAG <> 'Y'     
                         GROUP BY MAT.MAT_GRP_1, MAT.MAT_GRP_2, MAT.MAT_GRP_3, MAT.MAT_GRP_4, MAT.MAT_GRP_5, MAT.MAT_GRP_6, MAT.MAT_GRP_7, MAT.MAT_GRP_8, MAT.MAT_GRP_9, MAT.MAT_GRP_10, MAT.MAT_CMF_10, MAT.MAT_ID, MAT.MAT_CMF_7, MAT.MAT_CMF_13, MAT.MAT_CMF_11     
                       ) A     
                     , (     
                        SELECT EMERGENCY.DATA, LOT.MAT_ID, MAT.MAT_GRP_3     
                             , SUM(DECODE(OPER_GRP_1, 'HMK2A', DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY), 0)) V0     
                             , SUM(DECODE(OPER_GRP_1, 'B/G', DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY), 0)) V1     
                             , SUM(DECODE(OPER_GRP_1, 'SAW', DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY), 0)) V2     
                             , SUM(DECODE(OPER_GRP_1, 'S/P', DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY), 0)) V3     
                             , SUM(DECODE(OPER_GRP_1, 'D/A', DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY), 0)) V4     
                             , SUM(DECODE(OPER_GRP_1, 'W/B', DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY), 0)) V5     
                             , SUM(DECODE(OPER_GRP_1, 'MOLD', DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY), 0)) V6     
                             , SUM(DECODE(OPER_GRP_1, 'CURE', DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY), 0)) V7     
                             , SUM(DECODE(OPER_GRP_1, 'M/K', DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY), 0)) V8     
                             , SUM(DECODE(OPER_GRP_1, 'TRIM', DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY), 0)) V9     
                             , SUM(DECODE(OPER_GRP_1, 'TIN', DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY), 0)) V10     
                             , SUM(DECODE(OPER_GRP_1, 'S/B/A', DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY), 0)) V11     
                             , SUM(DECODE(OPER_GRP_1, 'SIG', DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY), 0)) V12     
                             , SUM(DECODE(OPER_GRP_1, 'AVI', DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY), 0)) V13     
                             , SUM(DECODE(OPER_GRP_1, 'V/I', DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY), 0)) V14     
                             , SUM(DECODE(OPER_GRP_1, 'HMK3A', DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY), 0)) V15     
                             , SUM(DECODE(OPER_GRP_1, 'GATE', DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY), 0)) V16     
                          FROM (     
                                SELECT A.FACTORY, A.MAT_ID, A.LOT_ID, B.OPER_GRP_1, A.LOT_CMF_4     
                                     , SUM(A.QTY_1) QTY     
                                  FROM RWIPLOTSTS A     
                                     , MWIPOPRDEF B     
                                 WHERE 1 = 1     
                                   AND A.FACTORY = B.FACTORY(+)     
                                   AND A.OPER = B.OPER(+)     
                                   AND A.FACTORY = 'HMVA2'     
                                   AND A.LOT_TYPE = 'W'     
                                   AND A.LOT_DEL_FLAG = ' '     
                                   AND A.LOT_CMF_5 LIKE '%'     
                                 GROUP BY A.FACTORY, A.MAT_ID, A.LOT_ID, B.OPER_GRP_1, A.LOT_CMF_4     
                               ) LOT     
                             , MWIPMATDEF MAT     
                             , EMERGENCY     
                         WHERE 1 = 1     
                           AND LOT.FACTORY = MAT.FACTORY     
                           AND LOT.MAT_ID = MAT.MAT_ID     
                           AND MAT.DELETE_FLAG <> 'Y'     
                           AND MAT.MAT_GRP_2 <> '-'     
                           AND ( ( EMERGENCY.GUBUN = 'RUN' AND ( LOT.LOT_CMF_4 LIKE EMERGENCY.DATA ) ) OR              
                                 ( EMERGENCY.GUBUN = 'LOT' AND ( LOT.LOT_ID LIKE EMERGENCY.DATA||'%'  OR LOT.LOT_ID = EMERGENCY.DATA ) ) )         
                         GROUP BY EMERGENCY.DATA, LOT.MAT_ID ,MAT.MAT_GRP_3     
                       ) F,     
                       (     
                        SELECT KEY_1,DATA_1     
                          FROM MGCMTBLDAT     
                         WHERE FACTORY = 'HMVA2'     
                           AND TABLE_NAME IN ('H_SEC_AUTO_LOSS','H_HX_AUTO_LOSS')     
                       ) LOSS     
                       , EMERGENCY     
                 WHERE 1 = 1     
                   AND A.MAT_ID = F.MAT_ID(+)     
                   AND A.MAT_ID = LOSS.KEY_1(+)     
                   AND F.DATA = EMERGENCY.DATA     
                 GROUP BY EMERGENCY.DATA     
                ) WIP_RUN_LOT     
                  ON EMERGENCY.DATA = WIP_RUN_LOT.DATA     
           LEFT OUTER JOIN (     
                        SELECT EMERGENCY.DATA       AS DATA     
                             , SUM(QTY_1)           AS QTY     
                             , SUM(DECODE (GET_WORK_DATE(LOT.TRAN_TIME, 'D'),'20200409' ,0,QTY_1)) QTY_PREV_DAY      
                          FROM RWIPLOTHIS LOT     
                             , EMERGENCY     
                        WHERE 1=1     
                           AND LOT.TRAN_CODE = 'SHIP'     
                           AND LOT.OLD_FACTORY = 'HMVA2'  
                           AND LOT.TRAN_TIME >= EMERGENCY.START_TIME     
                           AND LOT.TRAN_TIME BETWEEN TO_CHAR(ADD_MONTHS(SYSDATE, -1), 'YYYYMMDD')||'000000'  AND TO_CHAR(SYSDATE, 'YYYYMMDD')||'235959'     
                           AND LOT.HIST_DEL_FLAG = ' '     
                           AND LOT.LOT_TYPE = 'W'     
                           AND ( ( EMERGENCY.GUBUN = 'RUN' AND  LOT.LOT_CMF_4 LIKE EMERGENCY.DATA ) OR                   
                                 ( EMERGENCY.GUBUN = 'LOT' AND  LOT.LOT_ID LIKE EMERGENCY.DATA||'%')  )         
                         GROUP BY EMERGENCY.DATA    
                ) RUN_LOT     
                  ON EMERGENCY.DATA = RUN_LOT.DATA     
           LEFT OUTER JOIN (     
                SELECT DATA     
                     , SUM(WB_EQP_CNT)  WB_EQP_CNT     
                     , SUM(WB_CAPA)     WB_CAPA     
                     , SUM(WB_QTY)      WB_QTY     
                     , SUM(WB_EXP_QTY)  WB_EXP_QTY     
                     , SUM(DA_EQP_CNT)  DA_EQP_CNT     
                     , SUM(DA_CAPA)     DA_CAPA     
                     , SUM(DA_QTY)      DA_QTY     
                     , SUM(DA_EXP_QTY)  DA_EXP_QTY     
                  FROM (     
                        SELECT DATA     
                             , MAT_ID     
                             , LOT_ID     
                             , DECODE(OPER, 'WB', SUM(EQP_CNT), 0)    WB_EQP_CNT     
                             , DECODE(OPER, 'WB', SUM(CAPA), 0)       WB_CAPA     
                             , DECODE(OPER, 'WB', SUM(QTY), 0)        WB_QTY     
                             , DECODE(OPER, 'WB', SUM(EXPECT_QTY), 0) WB_EXP_QTY     
                             , DECODE(OPER, 'DA', SUM(EQP_CNT), 0)    DA_EQP_CNT     
                             , DECODE(OPER, 'DA', SUM(CAPA), 0)       DA_CAPA     
                             , DECODE(OPER, 'DA', SUM(QTY), 0)        DA_QTY     
                             , DECODE(OPER, 'DA', SUM(EXPECT_QTY), 0) DA_EXP_QTY     
                          FROM (     
                                SELECT WIPMOV.DATA     
                                     , MAT.MAT_ID     
                                     , WIPMOV.LOT_ID     
                                     , SUM(RES.EQP_CNT) AS EQP_CNT     
                                     , SUM(CASE WHEN RES.OPER LIKE 'A06%' THEN TRUNC(NVL(NVL(UPH.UPEH,0) * 24 * 0.75 * RES.EQP_CNT, 0)) 
                                                WHEN RES.OPER LIKE 'A04%' THEN TRUNC(NVL(NVL(UPH.UPEH,0) * 24 * 0.7 * RES.EQP_CNT, 0)) 
                                                ELSE TRUNC(NVL(NVL(UPH.UPEH,0) * 24 * 0.7 * RES.EQP_CNT, 0)) 
                                           END ) AS CAPA 
                                     , DECODE(SUBSTR(WIPMOV.OPER, 1,3), 'A03', 'DA', 'A04', 'DA', 'A06', 'WB') AS OPER     
                                     , MAX(WIPMOV.QTY) AS QTY     
                                     , CASE     
                                        WHEN TO_CHAR(SYSDATE, 'HH24') >= 22 THEN ROUND(SUM(WIPMOV.QTY)/ (SYSDATE - TO_DATE(TO_CHAR(SYSDATE, 'YYYYMMDD')||'220000', 'YYYYMMDDHH24MISS')), 0)     
                                        ELSE ROUND(SUM(WIPMOV.QTY)/ (SYSDATE - TO_DATE(TO_CHAR(SYSDATE-1, 'YYYYMMDD')||'220000', 'YYYYMMDDHH24MISS')), 0)     
                                       END     
                                     AS EXPECT_QTY     
                                  FROM (     
                                        SELECT FACTORY, RES_STS_2, RES_STS_8 AS OPER, RES_GRP_6 AS RES_MODEL, RES_GRP_7 AS UPEH_GRP, LOT_ID, COUNT(RES_ID) AS EQP_CNT     
                                          FROM MRASRESDEF     
                                         WHERE 1 = 1     
                                           AND FACTORY  = 'HMVA2'     
                                           AND RES_CMF_9 = 'Y'     
                                           AND RES_CMF_7 = 'Y'     
                                           AND DELETE_FLAG = ' '     
                                           AND (RES_STS_8 LIKE 'A06%' OR RES_STS_8 LIKE 'A04%' OR RES_STS_8 = 'A0333') 
                                         GROUP BY FACTORY,RES_STS_2,RES_STS_8,RES_GRP_6,RES_GRP_7, LOT_ID     
                                       ) RES     
                                     , CRASUPHDEF UPH     
                                     , (SELECT * FROM MWIPMATDEF WHERE MAT_GRP_5 IN ('Merge', '-')) MAT     
                                     , (     
                                        SELECT EMERGENCY.DATA, MAT_ID, LOT_ID, OLD_OPER AS OPER , SUM(QTY_1) QTY     
                                          FROM RWIPLOTHIS, EMERGENCY,     
                                               (SELECT CASE WHEN TO_CHAR(SYSDATE, 'HH24') >= 22 THEN TO_CHAR(SYSDATE, 'YYYYMMDD')||'220000' ELSE TO_CHAR(SYSDATE-1, 'YYYYMMDD')||'220000' END START_T, 
                                                       CASE WHEN TO_CHAR(SYSDATE, 'HH24') >= 22 THEN TO_CHAR(SYSDATE+1, 'YYYYMMDD')||'215959' ELSE TO_CHAR(SYSDATE, 'YYYYMMDD')||'215959' END END_T    
                                                  FROM DUAL) TIME_TABLE 
                                         WHERE 1 = 1     
                                           AND ( ( EMERGENCY.GUBUN = 'RUN' AND ( RWIPLOTHIS.LOT_ID LIKE EMERGENCY.DATA||'%'  OR RWIPLOTHIS.LOT_ID LIKE EMERGENCY.DATA ) ) OR 
                                                 ( EMERGENCY.GUBUN = 'LOT' AND ( RWIPLOTHIS.LOT_ID LIKE EMERGENCY.DATA||'%'  OR RWIPLOTHIS.LOT_ID = EMERGENCY.DATA ) ) )    
                                           AND FACTORY = 'HMVA2'     
                                           AND TRAN_CODE = 'END'     
                                           AND TRAN_TIME BETWEEN TIME_TABLE.START_T AND TIME_TABLE.END_T     
                                           AND (OLD_OPER LIKE 'A04%' OR OLD_OPER LIKE 'A06%' OR OLD_OPER = 'A0333') 
                                           AND HIST_DEL_FLAG = ' ' 
                                           AND LOT_TYPE = 'W' 
                                         GROUP BY EMERGENCY.DATA, MAT_ID, LOT_ID, OLD_OPER     
                                        ) WIPMOV     
                                 WHERE 1 = 1     
                                   AND RES.LOT_ID = WIPMOV.LOT_ID     
                                   AND MAT.DELETE_FLAG = ' '     
                                   AND RES.FACTORY = UPH.FACTORY(+)     
                                   AND RES.OPER = UPH.OPER(+)     
                                   AND RES.RES_MODEL = UPH.RES_MODEL(+)     
                                   AND RES.UPEH_GRP = UPH.UPEH_GRP(+)     
                                   AND RES.RES_STS_2 = UPH.MAT_ID(+)     
                                   AND RES.FACTORY = MAT.FACTORY     
                                   AND RES.RES_STS_2 = MAT.MAT_ID     
                                   AND MAT.MAT_ID = WIPMOV.MAT_ID     
                                   AND RES.OPER = WIPMOV.OPER     
                                   AND ((RES.OPER LIKE 'A040%' AND RES.OPER = 'A040'||DECODE(MAT.MAT_GRP_4,'SD2','2','SD3','3','SD4','4','SD5','5','SD8','8','0' ) ) OR 
                                        (RES.OPER LIKE 'A060%' AND RES.OPER = 'A060'||DECODE(MAT.MAT_GRP_4,'SD2','2','SD3','3','SD4','4','SD5','5','SD8','8','0' ) ) OR RES.OPER = 'A0333')  
                                 GROUP BY WIPMOV.DATA, MAT.MAT_ID, SUBSTR(WIPMOV.OPER, 1,3), WIPMOV.LOT_ID     
                        )     
                         GROUP BY DATA, MAT_ID, OPER, LOT_ID     
                     )     
                 GROUP BY DATA     
                ) RESARR_LOT     
                  ON EMERGENCY.DATA = RESARR_LOT.DATA     
           LEFT OUTER JOIN (     
                SELECT SAP.SAP_CODE, MAT.VENDOR_ID, MAT.MAT_ID, SUM(SAP.TAT_DAY+SAP.TAT_DAY_WAIT) AS TAT     
                  FROM CWIPSAPTAT@RPTTOMES SAP     
                     , MWIPMATDEF MAT     
                 WHERE SAP.SAP_CODE = MAT.VENDOR_ID     
                   AND MAT.FACTORY = 'HMVA2'         
                   AND MAT.FACTORY = SAP.FACTORY         
                   AND MAT.MAT_TYPE = 'FG'         
                   AND SAP.RESV_FIELD_1 = ' '          
                 GROUP BY SAP.SAP_CODE, MAT.VENDOR_ID, MAT.MAT_ID     
                ) TAT ON MAT.MAT_ID = TAT.MAT_ID     
            LEFT OUTER JOIN (       
                SELECT C.DATA, B.MAT_ID, MAX(B.MAT_GRP_10) AS MAT_GRP_10,  MAX(B.MAT_GRP_9) AS MAT_GRP_9, MAX(B.MAT_GRP_6) AS MAT_GRP_6, MAX(D.DATA_1 ) AS CUSTOMER, MAX(B.MAT_GRP_1) AS MAT_GRP_1  
                  FROM RWIPLOTSTS A, MWIPMATDEF B, EMERGENCY C, (SELECT DATA_1, KEY_1 FROM MGCMTBLDAT WHERE TABLE_NAME = 'H_CUSTOMER') D       
                 WHERE A.LOT_ID = C.DATA       
                   AND A.MAT_ID = B.MAT_ID       
                   AND D.KEY_1 = B.MAT_GRP_1       
                 GROUP BY C.DATA, B.MAT_ID) HEAD ON EMERGENCY.DATA = HEAD.DATA           
          WHERE 1=1     
            AND EMERGENCY.GUBUN <> 'PART'     
            AND MAT_ID LIKE '%'     
          ORDER BY 1,2,3,MAT_ID     

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
WITH     
EMERGENCY AS (     
    SELECT KEY_1 AS DATA, KEY_2 AS GUBUN, DATA_1 AS MOKJUK, DATA_2 AS PLAN, DATA_3 AS START_TIME, DATA_4 AS END_TIME     
      FROM MGCMTBLDAT     
     WHERE 1=1     
       AND FACTORY = 'HMVA2'     
       AND TABLE_NAME = 'H_EMERGENCY_SET'     
)     
         SELECT NVL((SELECT DATA_1 FROM MGCMTBLDAT WHERE TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = MAT.MAT_GRP_1 AND ROWNUM=1), '-'), MAT.MAT_GRP_9, MAT.MAT_GRP_10, MAT.MAT_GRP_6
              , DECODE(EMERGENCY.GUBUN, 'PART', EMERGENCY.DATA, MAT.MAT_ID)  AS MAT_ID     
              , ' '  
              , EMERGENCY.GUBUN AS GUBUN     
              , EMERGENCY.MOKJUK AS MOKJUK     
              , TO_CHAR(TO_DATE(EMERGENCY.END_TIME, 'YYYYMMDDHH24MISS'), 'MM/DD HH24:MI')         
              , TO_CHAR(TO_DATE(EMERGENCY.START_TIME, 'YYYYMMDDHH24MISS'), 'MM/DD HH24:MI')             
              , EMERGENCY.PLAN AS PLAN              
              , NVL(FACMOV.QTY,0)    AS QTY              
              , EMERGENCY.PLAN - NVL(FACMOV.QTY,0) REMAIN          
              , WIP.HMK3A + WIP.FINISH + WIP.MOLD + WIP.WB + WIP.DA + WIP.SAW + WIP.STOCK AS TOTAL_WIP          
          , CASE WHEN EMERGENCY.PLAN - NVL(FACMOV.QTY,0) <= 0 THEN 0 ELSE 
                CASE WHEN ROUND((EMERGENCY.PLAN - NVL(FACMOV.QTY_PREV_DAY,0)) /   DECODE(TO_DATE(EMERGENCY.END_TIME,'YYYYMMDDHH24MISS') - TO_DATE(GET_WORK_DATE(TO_CHAR(SYSDATE-1, 'YYYYMMDDHH24MISS'), 'D')||'220000' ,'YYYYMMDDHH24MISS'),0,1), 0) <= 0 THEN EMERGENCY.PLAN - NVL(FACMOV.QTY,0)         
                     WHEN (TO_DATE(EMERGENCY.END_TIME,'YYYYMMDDHH24MISS') - TO_DATE(GET_WORK_DATE(TO_CHAR(SYSDATE-1, 'YYYYMMDDHH24MISS'), 'D')||'220000' ,'YYYYMMDDHH24MISS')) <= 1  THEN EMERGENCY.PLAN - NVL(FACMOV.QTY,0)         
                     ELSE ROUND((EMERGENCY.PLAN - NVL(FACMOV.QTY_PREV_DAY,0)) /   DECODE(TO_DATE(EMERGENCY.END_TIME,'YYYYMMDDHH24MISS') - TO_DATE(GET_WORK_DATE(TO_CHAR(SYSDATE-1, 'YYYYMMDDHH24MISS'), 'D')||'220000' ,'YYYYMMDDHH24MISS'),0,1), 0) END END IL_MOK         
              , TO_CHAR(TO_DATE(EMERGENCY.START_TIME, 'YYYYMMDDHH24MISS'), 'YYYY-MM-DD HH24:MI:SS')              
              , TO_CHAR(TO_DATE(EMERGENCY.END_TIME, 'YYYYMMDDHH24MISS'), 'YYYY-MM-DD HH24:MI:SS')              
              , MAT.TAT     
              , WIP.HMK3A     
              , WIP.FINISH     
              , WIP.MOLD     
              , WIP.WB     
              , WIP.DA     
              , WIP.SAW     
              , WIP.STOCK     
              , RESARR.WB_EQP_CNT     
              , RESARR.WB_CAPA     
              , RESARR.WB_QTY     
              , RESARR.WB_EXP_QTY WB_EXP_QTY     
              , RESARR.DA_EQP_CNT     
              , RESARR.DA_CAPA     
              , RESARR.DA_QTY     
              , RESARR.DA_EXP_QTY DA_EXP_QTY     
              , (   SELECT SUM(LOSS_QTY) AS LOSS          
                      FROM RWIPLOTLSM LSM          
                         , MWIPMATDEF MAT         
                     WHERE 1=1          
                       AND MAT.FACTORY = LSM.FACTORY          
                       AND MAT.MAT_ID = LSM.MAT_ID         
                       AND MAT.DELETE_FLAG = ' '         
                       AND MAT.FACTORY = 'HMVA2'         
                       AND LSM.TRAN_TIME >= EMERGENCY.START_TIME         
                       AND LSM.HIST_DEL_FLAG = ' '         
                       AND EMERGENCY.GUBUN = 'PART'         
                       AND LSM.LOSS_CODE <> 'N01'          
                       AND MAT.MAT_ID LIKE EMERGENCY.DATA||'%'          
                       AND LSM.MAT_ID LIKE EMERGENCY.DATA||'%') LOSS          
              , WIP.WB_LAST          
           FROM EMERGENCY     
              ,(SELECT EMERGENCY.DATA     
                     , MAX(MAT_GRP_1)              AS MAT_GRP_1     
                     , MAX(MAT_GRP_9)              AS MAT_GRP_9     
                     , MAX(MAT_GRP_10)             AS MAT_GRP_10     
                     , MAX(MAT_GRP_6)              AS MAT_GRP_6     
                     , MAX(FACTORY)                AS FACTORY     
                     , MAX(MAT_TYPE)               AS MAT_TYPE     
                     , MAX(MWIPMATDEF.MAT_ID)      AS MAT_ID     
                     , MAX(MWIPMATDEF.VENDOR_ID)   AS VENDOR_ID     
                     , MIN(TAT.TAT)                AS TAT     
                  FROM MWIPMATDEF     
                     , EMERGENCY     
                     , (SELECT SAP.SAP_CODE, MAT.VENDOR_ID, MAT.MAT_ID, SUM(SAP.TAT_DAY+SAP.TAT_DAY_WAIT) AS TAT     
                          FROM CWIPSAPTAT@RPTTOMES SAP     
                             , MWIPMATDEF MAT     
                         WHERE SAP.SAP_CODE = MAT.VENDOR_ID     
                           AND MAT.FACTORY = 'HMVA2'         
                           AND MAT.FACTORY = SAP.FACTORY         
                           AND MAT.MAT_TYPE = 'FG'         
                           AND SAP.RESV_FIELD_1 = ' '          
                         GROUP BY SAP.SAP_CODE, MAT.VENDOR_ID, MAT.MAT_ID     
                       ) TAT     
                 WHERE EMERGENCY.GUBUN = 'PART'     
                   AND ( MWIPMATDEF.MAT_ID LIKE EMERGENCY.DATA  OR MWIPMATDEF.MAT_ID = EMERGENCY.DATA )     
                   AND FACTORY = 'HMVA2'     
                   AND DELETE_FLAG = ' '     
                   AND MAT_TYPE = 'FG'     
                   AND MWIPMATDEF.MAT_ID LIKE '%'     
                   AND MWIPMATDEF.MAT_ID = TAT.MAT_ID(+)     
                 GROUP BY DATA     
                ) MAT     
              , (     
                SELECT EMERGENCY.DATA     
                     , SUM(NVL((CASE WHEN A.MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND MAT_ID LIKE 'SEKS%') THEN CASE WHEN A.MAT_GRP_5 IN ('2nd','Merge') OR MAT_GRP_5 LIKE 'Middle%' THEN NVL(F.V0,0)/NVL(LOSS.DATA_1,1) ELSE 0 END     
                                WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN CASE WHEN A.MAT_GRP_5 IN ('1st','Merge') OR MAT_GRP_5 LIKE 'Middle%' THEN NVL(F.V0,0)/NVL(LOSS.DATA_1,1) ELSE 0 END     
                                ELSE NVL(F.V0,0)/NVL(LOSS.DATA_1,1)     
                                END),0)     
                          ) AS STOCK     
                     , SUM(NVL((CASE WHEN A.MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND MAT_ID LIKE 'SEKS%') THEN DECODE(A.MAT_GRP_5, '2nd', NVL(F.V1,0)/NVL(LOSS.DATA_1,1)+NVL(F.V2,0)/NVL(LOSS.DATA_1,1), 'Merge', NVL(F.V1,0)/NVL(LOSS.DATA_1,1)+NVL(F.V2,0)/NVL(LOSS.DATA_1,1), 0)     
                                WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN CASE WHEN A.MAT_GRP_5 IN ('1st','Merge') OR MAT_GRP_5 LIKE 'Middle%' THEN NVL(F.V1,0)/NVL(LOSS.DATA_1,1)+NVL(F.V2,0)/NVL(LOSS.DATA_1,1) ELSE 0 END     
                                ELSE NVL(F.V1,0)/NVL(LOSS.DATA_1,1)+NVL(F.V2,0)/NVL(LOSS.DATA_1,1)     
                                END),0)     
                           ) AS SAW     
                     , SUM(NVL((CASE WHEN A.MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND MAT_ID LIKE 'SEKS%') THEN DECODE(A.MAT_GRP_5, '2nd', NVL(F.V3,0)/NVL(LOSS.DATA_1,1)+NVL(F.V4,0), 'Merge', NVL(F.V3,0)/NVL(LOSS.DATA_1,1)+NVL(F.V4,0), 0)     
                               WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN CASE WHEN A.MAT_GRP_5 IN ('1st','Merge') OR MAT_GRP_5 LIKE 'Middle%' THEN NVL(F.V3,0)/NVL(LOSS.DATA_1,1)+NVL(F.V4,0) ELSE 0 END     
                               ELSE NVL(F.V3,0)/NVL(LOSS.DATA_1,1)+NVL(F.V4,0)     
                                 END),0)     
                           ) AS DA     
                     , SUM(NVL((CASE WHEN A.MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND MAT_ID LIKE 'SEKS%') THEN DECODE(A.MAT_GRP_5, '2nd', NVL(F.V5+F.V16,0), 'Merge', NVL(F.V5+F.V16,0), 0)     
                               WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN CASE WHEN A.MAT_GRP_5 IN ('1st','Merge') OR MAT_GRP_5 LIKE 'Middle%' THEN NVL(F.V5+F.V16,0) ELSE 0 END     
                               ELSE NVL(F.V5+F.V16,0)     
                               END),0)     
                           ) AS WB     
                     , SUM(NVL((CASE WHEN A.MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND MAT_ID LIKE 'SEKS%') THEN DECODE(A.MAT_GRP_5, '2nd', 0, 'Merge', NVL(F.V5+F.V16,0), 0)              
                               WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN CASE WHEN A.MAT_GRP_5 IN ('Merge') THEN NVL(F.V5+F.V16,0) ELSE 0 END              
                               ELSE NVL(F.V5+F.V16,0)              
                               END),0)              
                           ) AS WB_LAST             
                     , SUM(NVL((CASE WHEN A.MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND MAT_ID LIKE 'SEKS%') THEN DECODE(A.MAT_GRP_5, '2nd', NVL(F.V6+F.V7,0), 'Merge', NVL(F.V6+F.V7,0), 0)     
                               WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN CASE WHEN A.MAT_GRP_5 IN ('1st','Merge') OR MAT_GRP_5 LIKE 'Middle%' THEN NVL(F.V6+F.V7,0) ELSE 0 END     
                               ELSE NVL(F.V6+F.V7,0)     
                          END),0)     
                           ) AS MOLD     
                     , SUM(NVL((CASE WHEN A.MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND MAT_ID LIKE 'SEKS%') THEN DECODE(A.MAT_GRP_5, '2nd', NVL(F.V8+F.V9+F.V10+F.V11+F.V12+F.V13+F.V14,0), 'Merge', NVL(F.V8+F.V9+F.V10+F.V11+F.V12+F.V13+F.V14,0), 0)     
                               WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN CASE WHEN A.MAT_GRP_5 IN ('1st','Merge') OR MAT_GRP_5 LIKE 'Middle%' THEN NVL(F.V8+F.V9+F.V10+F.V11+F.V12+F.V13+F.V14,0) ELSE 0 END     
                               ELSE NVL(F.V8+F.V9+F.V10+F.V11+F.V12+F.V13+F.V14,0)     
                               END),0)     
                           ) AS FINISH     
                     , SUM(NVL((CASE WHEN A.MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND MAT_ID LIKE 'SEKS%') THEN DECODE(A.MAT_GRP_5, '2nd', NVL(F.V15,0), 'Merge', NVL(F.V15,0), 0)     
                               WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN CASE WHEN A.MAT_GRP_5 IN ('1st','Merge') OR MAT_GRP_5 LIKE 'Middle%' THEN NVL(F.V15,0) ELSE 0 END     
                               ELSE NVL(F.V15,0)     
                               END),0)     
                           ) AS HMK3A     
                  FROM (     
                        SELECT MAT.MAT_GRP_1, MAT.MAT_GRP_2, MAT.MAT_GRP_3, MAT.MAT_GRP_4, MAT.MAT_GRP_5, MAT.MAT_GRP_6, MAT.MAT_GRP_7, MAT.MAT_GRP_8     
                             , DECODE(MAT.MAT_GRP_1,'SE',MAT.MAT_GRP_9,' ') AS MAT_GRP_9, MAT.MAT_GRP_10, MAT.MAT_CMF_10, MAT.MAT_ID, MAT.MAT_CMF_7, MAT.MAT_CMF_13, MAT.MAT_CMF_11     
                          FROM MWIPMATDEF MAT     
                         WHERE 1 = 1     
                           AND MAT.FACTORY = 'HMVA2'     
                           AND MAT.MAT_TYPE= 'FG'     
                           AND MAT.DELETE_FLAG <> 'Y'     
                         GROUP BY MAT.MAT_GRP_1, MAT.MAT_GRP_2, MAT.MAT_GRP_3, MAT.MAT_GRP_4, MAT.MAT_GRP_5, MAT.MAT_GRP_6, MAT.MAT_GRP_7, MAT.MAT_GRP_8, MAT.MAT_GRP_9, MAT.MAT_GRP_10, MAT.MAT_CMF_10, MAT.MAT_ID, MAT.MAT_CMF_7, MAT.MAT_CMF_13, MAT.MAT_CMF_11     
                       ) A     
                     , (     
                        SELECT LOT.MAT_ID, MAT.MAT_GRP_3     
                             , SUM(DECODE(OPER_GRP_1, 'HMK2A', DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY), 0)) V0     
                             , SUM(DECODE(OPER_GRP_1, 'B/G', DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY), 0)) V1     
                             , SUM(DECODE(OPER_GRP_1, 'SAW', DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY), 0)) V2     
                             , SUM(DECODE(OPER_GRP_1, 'S/P', DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY), 0)) V3     
                             , SUM(DECODE(OPER_GRP_1, 'D/A', DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY), 0)) V4     
                             , SUM(DECODE(OPER_GRP_1, 'W/B', DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY), 0)) V5     
                             , SUM(DECODE(OPER_GRP_1, 'MOLD', DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY), 0)) V6     
                             , SUM(DECODE(OPER_GRP_1, 'CURE', DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY), 0)) V7     
                             , SUM(DECODE(OPER_GRP_1, 'M/K', DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY), 0)) V8     
                             , SUM(DECODE(OPER_GRP_1, 'TRIM', DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY), 0)) V9     
                             , SUM(DECODE(OPER_GRP_1, 'TIN', DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY), 0)) V10     
                             , SUM(DECODE(OPER_GRP_1, 'S/B/A', DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY), 0)) V11     
                             , SUM(DECODE(OPER_GRP_1, 'SIG', DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY), 0)) V12     
                             , SUM(DECODE(OPER_GRP_1, 'AVI', DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY), 0)) V13     
                             , SUM(DECODE(OPER_GRP_1, 'V/I', DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY), 0)) V14     
                             , SUM(DECODE(OPER_GRP_1, 'HMK3A', DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY), 0)) V15     
                             , SUM(DECODE(OPER_GRP_1, 'GATE', DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY), 0)) V16     
                          FROM (     
                                SELECT A.FACTORY, A.MAT_ID, B.OPER_GRP_1     
                                     , SUM(A.QTY_1) QTY     
                                  FROM RWIPLOTSTS A     
                                     , MWIPOPRDEF B     
                                 WHERE 1 = 1     
                                   AND A.FACTORY = B.FACTORY(+)     
                                   AND A.OPER = B.OPER(+)     
                                   AND A.FACTORY = 'HMVA2'     
                                   AND A.LOT_TYPE = 'W'     
                                   AND A.LOT_DEL_FLAG = ' '     
                                   AND A.LOT_CMF_5 LIKE '%'     
                                 GROUP BY A.FACTORY, A.MAT_ID, B.OPER_GRP_1     
                               ) LOT     
                             , MWIPMATDEF MAT     
                         WHERE 1 = 1     
                           AND LOT.FACTORY = MAT.FACTORY     
                           AND LOT.MAT_ID = MAT.MAT_ID     
                           AND MAT.DELETE_FLAG <> 'Y'     
                           AND MAT.MAT_GRP_2 <> '-'     
                         GROUP BY LOT.MAT_ID ,MAT.MAT_GRP_3     
                       ) F,     
                       (     
                        SELECT KEY_1,DATA_1     
                          FROM MGCMTBLDAT     
                         WHERE FACTORY = 'HMVA2'     
                           AND TABLE_NAME IN ('H_SEC_AUTO_LOSS','H_HX_AUTO_LOSS')     
                       ) LOSS     
                       , EMERGENCY     
                 WHERE 1 = 1     
                   AND A.MAT_ID = F.MAT_ID(+)     
                   AND A.MAT_ID = LOSS.KEY_1(+)     
                   AND (A.MAT_ID LIKE EMERGENCY.DATA OR A.MAT_ID = EMERGENCY.DATA)     
                 GROUP BY EMERGENCY.DATA     
                ) WIP     
              , (     
                SELECT EMERGENCY.DATA     
                     , SUM(S1_FAC_OUT_QTY_1 + S2_FAC_OUT_QTY_1 + S3_FAC_OUT_QTY_1 + S4_FAC_OUT_QTY_1) AS QTY     
                     , SUM(DECODE (WORK_DATE, GET_WORK_DATE(TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'), 'D') ,0,S1_FAC_OUT_QTY_1 + S2_FAC_OUT_QTY_1 + S3_FAC_OUT_QTY_1 + S4_FAC_OUT_QTY_1)) QTY_PREV_DAY         
                  FROM RSUMFACMOV, EMERGENCY     
                 WHERE 1=1     
                   AND CM_KEY_1 = 'HMVA2'     
                   AND CM_KEY_2 = 'PROD'     
                   AND CM_KEY_3 LIKE '%'     
                   AND FACTORY <> 'RETURN'     
                   AND EMERGENCY.GUBUN = 'PART'     
                   AND ( RSUMFACMOV.MAT_ID LIKE EMERGENCY.DATA  OR RSUMFACMOV.MAT_ID = EMERGENCY.DATA )     
                   AND WORK_DATE BETWEEN TO_CHAR(ADD_MONTHS(SYSDATE, -1), 'YYYYMMDD')  AND TO_CHAR(SYSDATE, 'YYYYMMDD')     
                   AND WORK_DATE >= GET_WORK_DATE(EMERGENCY.START_TIME, 'D')      
                 GROUP BY EMERGENCY.DATA     
                ) FACMOV     
              , (     
                SELECT DATA     
                     , SUM(WB_EQP_CNT)  WB_EQP_CNT     
                     , SUM(WB_CAPA)     WB_CAPA     
                     , SUM(WB_QTY)      WB_QTY     
                     , SUM(WB_EXP_QTY)  WB_EXP_QTY     
                     , SUM(DA_EQP_CNT)  DA_EQP_CNT     
                     , SUM(DA_CAPA)     DA_CAPA     
                     , SUM(DA_QTY)      DA_QTY     
                     , SUM(DA_EXP_QTY)  DA_EXP_QTY     
                  FROM (     
                        SELECT DATA     
                             , DECODE(OPER, 'WB', SUM(EQP_CNT), 0)    WB_EQP_CNT     
                             , DECODE(OPER, 'WB', SUM(CAPA), 0)       WB_CAPA     
                             , DECODE(OPER, 'WB', SUM(QTY), 0)        WB_QTY     
                             , DECODE(OPER, 'WB', SUM(EXPECT_QTY), 0) WB_EXP_QTY     
                             , DECODE(OPER, 'DA', SUM(EQP_CNT), 0)    DA_EQP_CNT     
                             , DECODE(OPER, 'DA', SUM(CAPA), 0)       DA_CAPA     
                             , DECODE(OPER, 'DA', SUM(QTY), 0)        DA_QTY     
                             , DECODE(OPER, 'DA', SUM(EXPECT_QTY), 0) DA_EXP_QTY     
                          FROM (     
                                SELECT RES.DATA     
                                     , MAT.MAT_ID     
                                     , SUM(RES.EQP_CNT) AS EQP_CNT     
                                     , SUM(CASE WHEN RES.OPER LIKE 'A06%' THEN TRUNC(NVL(NVL(UPH.UPEH,0) * 24 * 0.75 * RES.EQP_CNT, 0)) 
                                                WHEN RES.OPER LIKE 'A04%' THEN TRUNC(NVL(NVL(UPH.UPEH,0) * 24 * 0.7 * RES.EQP_CNT, 0)) 
                                                ELSE TRUNC(NVL(NVL(UPH.UPEH,0) * 24 * 0.7 * RES.EQP_CNT, 0)) 
                                           END) AS CAPA 
                                     , DECODE(SUBSTR(RES.OPER, 1,3), 'A03', 'DA', 'A04', 'DA', 'A06', 'WB') AS OPER     
                                     , MAX(WIPMOV.QTY) AS QTY     
                                     , CASE     
                                        WHEN TO_CHAR(SYSDATE, 'HH24') >= 22 THEN ROUND(SUM(WIPMOV.QTY)/ (SYSDATE - TO_DATE(TO_CHAR(SYSDATE, 'YYYYMMDD')||'220000', 'YYYYMMDDHH24MISS')), 0)     
                                        ELSE ROUND(SUM(WIPMOV.QTY)/ (SYSDATE - TO_DATE(TO_CHAR(SYSDATE-1, 'YYYYMMDD')||'220000', 'YYYYMMDDHH24MISS')), 0)     
                                       END     
                                     AS EXPECT_QTY     
                                  FROM (     
                                        SELECT EMERGENCY.DATA, FACTORY, RES_STS_2, RES_STS_8 AS OPER, RES_GRP_6 AS RES_MODEL, RES_GRP_7 AS UPEH_GRP, COUNT(RES_ID) AS EQP_CNT     
                                          FROM MRASRESDEF, EMERGENCY     
                                         WHERE 1 = 1     
                                           AND FACTORY  = 'HMVA2'     
                                           AND RES_CMF_9 = 'Y'     
                                           AND RES_CMF_7 = 'Y'     
                                           AND DELETE_FLAG = ' '     
                                           AND (RES_STS_8 LIKE 'A06%' OR RES_STS_8 LIKE 'A04%' OR RES_STS_8 = 'A0333')     
                                           AND ( RES_STS_2 LIKE EMERGENCY.DATA  OR RES_STS_2 = EMERGENCY.DATA )   
                                         GROUP BY EMERGENCY.DATA,FACTORY,RES_STS_2,RES_STS_8,RES_GRP_6,RES_GRP_7     
                                       ) RES     
                                     , CRASUPHDEF UPH     
                                     , MWIPMATDEF MAT     
                                     , (     
                                        SELECT MAT_ID, OPER AS OPER, SUM(S1_END_QTY_1 + S2_END_QTY_1 + S3_END_QTY_1 ) QTY     
                                          FROM RSUMWIPMOV    
                                         WHERE 1=1     
                                           AND WORK_DATE = GET_WORK_DATE(TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'), 'D')     
                                           AND LOT_TYPE = 'W'     
                                           AND FACTORY = 'HMVA2'     
                                           AND (OPER LIKE 'A04%' OR OPER LIKE 'A06%' OR OPER = 'A0333') 
                                         GROUP BY MAT_ID, OPER 
                                        ) WIPMOV     
                                 WHERE 1 = 1     
                                     AND   MAT.DELETE_FLAG=' '                        
                                     AND   RES.FACTORY=MAT.FACTORY                    
                                     AND   RES.RES_STS_2 = MAT.MAT_ID                 
                                     AND   RES.FACTORY=UPH.FACTORY(+)                 
                                     AND   RES.OPER=UPH.OPER(+)                       
                                     AND   RES.RES_MODEL = UPH.RES_MODEL(+)           
                                     AND   RES.UPEH_GRP = UPH.UPEH_GRP(+)             
                                     AND   RES.RES_STS_2 = UPH.MAT_ID(+)              
                                     AND   RES.FACTORY  = 'HMVA2'                     
                                     AND   RES.OPER NOT IN ('00001','00002')          
                                     AND   RES.RES_STS_2 = WIPMOV.MAT_ID(+)           
                                     AND   RES.OPER = WIPMOV.OPER(+)                  
                                     AND   ((RES.OPER LIKE 'A040%' AND RES.OPER = 'A040'||DECODE(MAT.MAT_GRP_4,'SD2','2','SD3','3','SD4','4','SD5','5','SD8','8','0' ) ) OR 
                                            (RES.OPER LIKE 'A060%' AND RES.OPER = 'A060'||DECODE(MAT.MAT_GRP_4,'SD2','2','SD3','3','SD4','4','SD5','5','SD8','8','0' ) ) OR RES.OPER = 'A0333')
                                   GROUP BY DATA, MAT.MAT_ID, SUBSTR(RES.OPER, 1,3)   
                                ORDER BY MAT.MAT_ID     
                        )     
                         GROUP BY DATA, OPER     
                     )     
                 GROUP BY DATA     
                ) RESARR     
          WHERE 1=1     
            AND EMERGENCY.GUBUN = 'PART'     
            AND ( MAT.MAT_ID LIKE EMERGENCY.DATA OR MAT.MAT_ID = EMERGENCY.DATA )     
            AND EMERGENCY.DATA = RESARR.DATA(+)     
            AND EMERGENCY.DATA = WIP.DATA(+)     
            AND EMERGENCY.DATA = FACMOV.DATA(+)     
            AND MAT_ID LIKE '%'     
        UNION ALL     
         SELECT HEAD.CUSTOMER, HEAD.MAT_GRP_9, HEAD.MAT_GRP_10, HEAD.MAT_GRP_6
              , NVL((SELECT MAT_ID FROM RWIPLOTSTS WHERE (LOT_ID = EMERGENCY.DATA OR LOT_ID LIKE EMERGENCY.DATA) AND ROWNUM = 1), '-' ) AS MAT_ID     
              , EMERGENCY.DATA     
              , EMERGENCY.GUBUN AS GUBUN     
              , EMERGENCY.MOKJUK AS MOKJUK     
              , TO_CHAR(TO_DATE(EMERGENCY.END_TIME, 'YYYYMMDDHH24MISS'), 'MM/DD HH24:MI')          
              , TO_CHAR(TO_DATE(EMERGENCY.START_TIME, 'YYYYMMDDHH24MISS'), 'MM/DD HH24:MI')             
              , EMERGENCY.PLAN AS PLAN              
              , NVL(RUN_LOT.QTY,0)              
              , EMERGENCY.PLAN - NVL(RUN_LOT.QTY,0) REMAIN            
              , WIP_RUN_LOT.HMK3A + WIP_RUN_LOT.FINISH + WIP_RUN_LOT.MOLD + WIP_RUN_LOT.WB + WIP_RUN_LOT.DA + WIP_RUN_LOT.SAW + WIP_RUN_LOT.STOCK AS TOTAL_WIP           
              , CASE WHEN EMERGENCY.PLAN - NVL(RUN_LOT.QTY,0) <= 0 THEN 0 ELSE   
                CASE WHEN ROUND((EMERGENCY.PLAN - NVL(RUN_LOT.QTY_PREV_DAY,0)) /   DECODE(TO_DATE(EMERGENCY.END_TIME,'YYYYMMDDHH24MISS') - TO_DATE(GET_WORK_DATE(TO_CHAR(SYSDATE-1, 'YYYYMMDDHH24MISS'), 'D')||'220000' ,'YYYYMMDDHH24MISS'),0,1), 0) <= 0 THEN EMERGENCY.PLAN - NVL(RUN_LOT.QTY,0)         
                     WHEN (TO_DATE(EMERGENCY.END_TIME,'YYYYMMDDHH24MISS') - TO_DATE(GET_WORK_DATE(TO_CHAR(SYSDATE-1, 'YYYYMMDDHH24MISS'), 'D')||'220000' ,'YYYYMMDDHH24MISS')) <= 1  THEN EMERGENCY.PLAN - NVL(RUN_LOT.QTY,0)         
                     ELSE ROUND((EMERGENCY.PLAN - NVL(RUN_LOT.QTY_PREV_DAY,0)) /   DECODE(TO_DATE(EMERGENCY.END_TIME,'YYYYMMDDHH24MISS') - TO_DATE(GET_WORK_DATE(TO_CHAR(SYSDATE-1, 'YYYYMMDDHH24MISS'), 'D')||'220000' ,'YYYYMMDDHH24MISS'),0,1), 0) END END IL_MOK                  
              , TO_CHAR(TO_DATE(EMERGENCY.START_TIME, 'YYYYMMDDHH24MISS'), 'YYYY-MM-DD HH24:MI:SS')              
              , TO_CHAR(TO_DATE(EMERGENCY.END_TIME, 'YYYYMMDDHH24MISS'), 'YYYY-MM-DD HH24:MI:SS')              
              , TAT.TAT     
              , WIP_RUN_LOT.HMK3A     
              , WIP_RUN_LOT.FINISH     
              , WIP_RUN_LOT.MOLD     
              , WIP_RUN_LOT.WB     
              , WIP_RUN_LOT.DA     
              , WIP_RUN_LOT.SAW     
              , WIP_RUN_LOT.STOCK     
              , RESARR_LOT.WB_EQP_CNT     
              , RESARR_LOT.WB_CAPA     
              , RESARR_LOT.WB_QTY     
              , RESARR_LOT.WB_EXP_QTY WB_EXP_QTY     
              , RESARR_LOT.DA_EQP_CNT     
              , RESARR_LOT.DA_CAPA     
              , RESARR_LOT.DA_QTY     
              , RESARR_LOT.DA_EXP_QTY DA_EXP_QTY     
              , (SELECT SUM(LOSS_QTY) AS LOSS          
                   FROM RWIPLOTLSM         
                  WHERE TRAN_TIME >= EMERGENCY.START_TIME          
                    AND HIST_DEL_FLAG = ' '          
                    AND LOT_ID LIKE EMERGENCY.DATA||'%' ) LOSS            
              , WIP_RUN_LOT.WB_LAST 
           FROM EMERGENCY     
           LEFT OUTER JOIN (     
                SELECT EMERGENCY.DATA     
                     , MAX(WIPMAT.MAT_GRP_1)     AS MAT_GRP_1     
                     , MAX(WIPMAT.MAT_GRP_10)    AS MAT_GRP_10     
                     , MAX(WIPMAT.MAT_GRP_6)     AS MAT_GRP_6     
                     , MAX(WIPMAT.FACTORY)       AS FACTORY     
                     , MAX(WIPMAT.MAT_TYPE)      AS MAT_TYPE     
                     , MAX(WIPMAT.MAT_ID)        AS MAT_ID     
                     , MAX(WIPMAT.DELETE_FLAG)   AS DELETE_FLAG     
                     , MAX(WIPMAT.VENDOR_ID)     AS VENDOR_ID     
                  FROM MWIPMATDEF WIPMAT, RWIPLOTSTS LOT, EMERGENCY     
                 WHERE 1 = 1     
                   AND WIPMAT.FACTORY = 'HMVA2'     
                   AND WIPMAT.DELETE_FLAG = ' '     
                   AND WIPMAT.MAT_TYPE = 'FG'     
                   AND WIPMAT.MAT_ID LIKE '%'     
                   AND WIPMAT.MAT_ID = LOT.MAT_ID     
                   AND LOT.FACTORY = 'HMVA2'     
                   AND LOT.LOT_DEL_FLAG = ' '     
                   AND LOT.LOT_TYPE = 'W'     
                   AND ( ( EMERGENCY.GUBUN = 'RUN' AND ( LOT.LOT_ID LIKE EMERGENCY.DATA||'%' ) ) OR     
                         ( EMERGENCY.GUBUN = 'LOT' AND ( LOT.LOT_ID LIKE EMERGENCY.DATA||'%' ) ) )      
                 GROUP BY EMERGENCY.DATA     
                ) MAT ON EMERGENCY.DATA = MAT.DATA     
           LEFT OUTER JOIN (     
                SELECT EMERGENCY.DATA     
                     , SUM(NVL((CASE WHEN A.MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND MAT_ID LIKE 'SEKS%') THEN CASE WHEN A.MAT_GRP_5 IN ('2nd','Merge') OR MAT_GRP_5 LIKE 'Middle%' THEN NVL(F.V0,0)/NVL(LOSS.DATA_1,1) ELSE 0 END     
                                WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN CASE WHEN A.MAT_GRP_5 IN ('1st','Merge') OR MAT_GRP_5 LIKE 'Middle%' THEN NVL(F.V0,0)/NVL(LOSS.DATA_1,1) ELSE 0 END     
                                ELSE NVL(F.V0,0)/NVL(LOSS.DATA_1,1)     
                                END),0)     
                          ) AS STOCK     
                     , SUM(NVL((CASE WHEN A.MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND MAT_ID LIKE 'SEKS%') THEN DECODE(A.MAT_GRP_5, '2nd', NVL(F.V1,0)/NVL(LOSS.DATA_1,1)+NVL(F.V2,0)/NVL(LOSS.DATA_1,1), 'Merge', NVL(F.V1,0)/NVL(LOSS.DATA_1,1)+NVL(F.V2,0)/NVL(LOSS.DATA_1,1), 0)     
                                WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN CASE WHEN A.MAT_GRP_5 IN ('1st','Merge') OR MAT_GRP_5 LIKE 'Middle%' THEN NVL(F.V1,0)/NVL(LOSS.DATA_1,1)+NVL(F.V2,0)/NVL(LOSS.DATA_1,1) ELSE 0 END     
                                ELSE NVL(F.V1,0)/NVL(LOSS.DATA_1,1)+NVL(F.V2,0)/NVL(LOSS.DATA_1,1)     
                                END),0)     
                           ) AS SAW     
                     , SUM(NVL((CASE WHEN A.MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND MAT_ID LIKE 'SEKS%') THEN DECODE(A.MAT_GRP_5, '2nd', NVL(F.V3,0)/NVL(LOSS.DATA_1,1)+NVL(F.V4,0), 'Merge', NVL(F.V3,0)/NVL(LOSS.DATA_1,1)+NVL(F.V4,0), 0)     
                               WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN CASE WHEN A.MAT_GRP_5 IN ('1st','Merge') OR MAT_GRP_5 LIKE 'Middle%' THEN NVL(F.V3,0)/NVL(LOSS.DATA_1,1)+NVL(F.V4,0) ELSE 0 END     
                               ELSE NVL(F.V3,0)/NVL(LOSS.DATA_1,1)+NVL(F.V4,0)     
                                 END),0)     
                           ) AS DA     
                     , SUM(NVL((CASE WHEN A.MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND MAT_ID LIKE 'SEKS%') THEN DECODE(A.MAT_GRP_5, '2nd', NVL(F.V5+F.V16,0), 'Merge', NVL(F.V5+F.V16,0), 0)     
                               WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN CASE WHEN A.MAT_GRP_5 IN ('1st','Merge') OR MAT_GRP_5 LIKE 'Middle%' THEN NVL(F.V5+F.V16,0) ELSE 0 END     
                               ELSE NVL(F.V5+F.V16,0)     
                               END),0)     
                           ) AS WB     
                     , SUM(NVL((CASE WHEN A.MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND MAT_ID LIKE 'SEKS%') THEN DECODE(A.MAT_GRP_5, '2nd', 0, 'Merge', NVL(F.V5+F.V16,0), 0)              
                               WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN CASE WHEN A.MAT_GRP_5 IN ('Merge') THEN NVL(F.V5+F.V16,0) ELSE 0 END              
                               ELSE NVL(F.V5+F.V16,0)              
                               END),0)              
                           ) AS WB_LAST             
                     , SUM(NVL((CASE WHEN A.MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND MAT_ID LIKE 'SEKS%') THEN DECODE(A.MAT_GRP_5, '2nd', NVL(F.V6+F.V7,0), 'Merge', NVL(F.V6+F.V7,0), 0)     
                               WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN CASE WHEN A.MAT_GRP_5 IN ('1st','Merge') OR MAT_GRP_5 LIKE 'Middle%' THEN NVL(F.V6+F.V7,0) ELSE 0 END     
                               ELSE NVL(F.V6+F.V7,0)     
                          END),0)     
                           ) AS MOLD     
                     , SUM(NVL((CASE WHEN A.MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND MAT_ID LIKE 'SEKS%') THEN DECODE(A.MAT_GRP_5, '2nd', NVL(F.V8+F.V9+F.V10+F.V11+F.V12+F.V13+F.V14,0), 'Merge', NVL(F.V8+F.V9+F.V10+F.V11+F.V12+F.V13+F.V14,0), 0)     
                               WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN CASE WHEN A.MAT_GRP_5 IN ('1st','Merge') OR MAT_GRP_5 LIKE 'Middle%' THEN NVL(F.V8+F.V9+F.V10+F.V11+F.V12+F.V13+F.V14,0) ELSE 0 END     
                               ELSE NVL(F.V8+F.V9+F.V10+F.V11+F.V12+F.V13+F.V14,0)     
                               END),0)     
                           ) AS FINISH     
                     , SUM(NVL((CASE WHEN A.MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND MAT_ID LIKE 'SEKS%') THEN DECODE(A.MAT_GRP_5, '2nd', NVL(F.V15,0), 'Merge', NVL(F.V15,0), 0)     
                               WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN CASE WHEN A.MAT_GRP_5 IN ('1st','Merge') OR MAT_GRP_5 LIKE 'Middle%' THEN NVL(F.V15,0) ELSE 0 END     
                               ELSE NVL(F.V15,0)     
                               END),0)     
                           ) AS HMK3A     
                  FROM (     
                        SELECT MAT.MAT_GRP_1, MAT.MAT_GRP_2, MAT.MAT_GRP_3, MAT.MAT_GRP_4, MAT.MAT_GRP_5, MAT.MAT_GRP_6, MAT.MAT_GRP_7, MAT.MAT_GRP_8     
                             , DECODE(MAT.MAT_GRP_1,'SE',MAT.MAT_GRP_9,' ') AS MAT_GRP_9, MAT.MAT_GRP_10, MAT.MAT_CMF_10, MAT.MAT_ID, MAT.MAT_CMF_7, MAT.MAT_CMF_13, MAT.MAT_CMF_11     
                          FROM MWIPMATDEF MAT     
                         WHERE 1 = 1     
                           AND MAT.FACTORY = 'HMVA2'     
                           AND MAT.MAT_TYPE= 'FG'     
                           AND MAT.DELETE_FLAG <> 'Y'     
                         GROUP BY MAT.MAT_GRP_1, MAT.MAT_GRP_2, MAT.MAT_GRP_3, MAT.MAT_GRP_4, MAT.MAT_GRP_5, MAT.MAT_GRP_6, MAT.MAT_GRP_7, MAT.MAT_GRP_8, MAT.MAT_GRP_9, MAT.MAT_GRP_10, MAT.MAT_CMF_10, MAT.MAT_ID, MAT.MAT_CMF_7, MAT.MAT_CMF_13, MAT.MAT_CMF_11     
                       ) A     
                     , (     
                        SELECT EMERGENCY.DATA, LOT.MAT_ID, MAT.MAT_GRP_3     
                             , SUM(DECODE(OPER_GRP_1, 'HMK2A', DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY), 0)) V0     
                             , SUM(DECODE(OPER_GRP_1, 'B/G', DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY), 0)) V1     
                             , SUM(DECODE(OPER_GRP_1, 'SAW', DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY), 0)) V2     
                             , SUM(DECODE(OPER_GRP_1, 'S/P', DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY), 0)) V3     
                             , SUM(DECODE(OPER_GRP_1, 'D/A', DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY), 0)) V4     
                             , SUM(DECODE(OPER_GRP_1, 'W/B', DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY), 0)) V5     
                             , SUM(DECODE(OPER_GRP_1, 'MOLD', DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY), 0)) V6     
                             , SUM(DECODE(OPER_GRP_1, 'CURE', DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY), 0)) V7     
                             , SUM(DECODE(OPER_GRP_1, 'M/K', DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY), 0)) V8     
                             , SUM(DECODE(OPER_GRP_1, 'TRIM', DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY), 0)) V9     
                             , SUM(DECODE(OPER_GRP_1, 'TIN', DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY), 0)) V10     
                             , SUM(DECODE(OPER_GRP_1, 'S/B/A', DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY), 0)) V11     
                             , SUM(DECODE(OPER_GRP_1, 'SIG', DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY), 0)) V12     
                             , SUM(DECODE(OPER_GRP_1, 'AVI', DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY), 0)) V13     
                             , SUM(DECODE(OPER_GRP_1, 'V/I', DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY), 0)) V14     
                             , SUM(DECODE(OPER_GRP_1, 'HMK3A', DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY), 0)) V15     
                             , SUM(DECODE(OPER_GRP_1, 'GATE', DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY), 0)) V16     
                          FROM (     
                                SELECT A.FACTORY, A.MAT_ID, A.LOT_ID, B.OPER_GRP_1, A.LOT_CMF_4     
                                     , SUM(A.QTY_1) QTY     
                                  FROM RWIPLOTSTS A     
                                     , MWIPOPRDEF B     
                                 WHERE 1 = 1     
                                   AND A.FACTORY = B.FACTORY(+)     
                                   AND A.OPER = B.OPER(+)     
                                   AND A.FACTORY = 'HMVA2'     
                                   AND A.LOT_TYPE = 'W'     
                                   AND A.LOT_DEL_FLAG = ' '     
                                   AND A.LOT_CMF_5 LIKE '%'     
                                 GROUP BY A.FACTORY, A.MAT_ID, A.LOT_ID, B.OPER_GRP_1, A.LOT_CMF_4     
                               ) LOT     
                             , MWIPMATDEF MAT     
                             , EMERGENCY     
                         WHERE 1 = 1     
                           AND LOT.FACTORY = MAT.FACTORY     
                           AND LOT.MAT_ID = MAT.MAT_ID     
                           AND MAT.DELETE_FLAG <> 'Y'     
                           AND MAT.MAT_GRP_2 <> '-'     
                           AND ( ( EMERGENCY.GUBUN = 'RUN' AND ( LOT.LOT_CMF_4 LIKE EMERGENCY.DATA ) ) OR              
                                 ( EMERGENCY.GUBUN = 'LOT' AND ( LOT.LOT_ID LIKE EMERGENCY.DATA||'%'  OR LOT.LOT_ID = EMERGENCY.DATA ) ) )         
                         GROUP BY EMERGENCY.DATA, LOT.MAT_ID ,MAT.MAT_GRP_3     
                       ) F,     
                       (     
                        SELECT KEY_1,DATA_1     
                          FROM MGCMTBLDAT     
                         WHERE FACTORY = 'HMVA2'     
                           AND TABLE_NAME IN ('H_SEC_AUTO_LOSS','H_HX_AUTO_LOSS')     
                       ) LOSS     
                       , EMERGENCY     
                 WHERE 1 = 1     
                   AND A.MAT_ID = F.MAT_ID(+)     
                   AND A.MAT_ID = LOSS.KEY_1(+)     
                   AND F.DATA = EMERGENCY.DATA     
                 GROUP BY EMERGENCY.DATA     
                ) WIP_RUN_LOT     
                  ON EMERGENCY.DATA = WIP_RUN_LOT.DATA     
           LEFT OUTER JOIN (     
                        SELECT EMERGENCY.DATA       AS DATA     
                             , SUM(QTY_1)           AS QTY     
                             , SUM(DECODE (GET_WORK_DATE(LOT.TRAN_TIME, 'D'),'20200409' ,0,QTY_1)) QTY_PREV_DAY      
                          FROM RWIPLOTHIS LOT     
                             , EMERGENCY     
                        WHERE 1=1     
                           AND LOT.TRAN_CODE = 'SHIP'     
                           AND LOT.OLD_FACTORY = 'HMVA2'  
                           AND LOT.TRAN_TIME >= EMERGENCY.START_TIME     
                           AND LOT.TRAN_TIME BETWEEN TO_CHAR(ADD_MONTHS(SYSDATE, -1), 'YYYYMMDD')||'000000'  AND TO_CHAR(SYSDATE, 'YYYYMMDD')||'235959'     
                           AND LOT.HIST_DEL_FLAG = ' '     
                           AND LOT.LOT_TYPE = 'W'     
                           AND ( ( EMERGENCY.GUBUN = 'RUN' AND  LOT.LOT_CMF_4 LIKE EMERGENCY.DATA ) OR                   
                                 ( EMERGENCY.GUBUN = 'LOT' AND  LOT.LOT_ID LIKE EMERGENCY.DATA||'%')  )         
                         GROUP BY EMERGENCY.DATA    
                ) RUN_LOT     
                  ON EMERGENCY.DATA = RUN_LOT.DATA     
           LEFT OUTER JOIN (     
                SELECT DATA     
                     , SUM(WB_EQP_CNT)  WB_EQP_CNT     
                     , SUM(WB_CAPA)     WB_CAPA     
                     , SUM(WB_QTY)      WB_QTY     
                     , SUM(WB_EXP_QTY)  WB_EXP_QTY     
                     , SUM(DA_EQP_CNT)  DA_EQP_CNT     
                     , SUM(DA_CAPA)     DA_CAPA     
                     , SUM(DA_QTY)      DA_QTY     
                     , SUM(DA_EXP_QTY)  DA_EXP_QTY     
                  FROM (     
                        SELECT DATA     
                             , MAT_ID     
                             , LOT_ID     
                             , DECODE(OPER, 'WB', SUM(EQP_CNT), 0)    WB_EQP_CNT     
                             , DECODE(OPER, 'WB', SUM(CAPA), 0)       WB_CAPA     
                             , DECODE(OPER, 'WB', SUM(QTY), 0)        WB_QTY     
                             , DECODE(OPER, 'WB', SUM(EXPECT_QTY), 0) WB_EXP_QTY     
                             , DECODE(OPER, 'DA', SUM(EQP_CNT), 0)    DA_EQP_CNT     
                             , DECODE(OPER, 'DA', SUM(CAPA), 0)       DA_CAPA     
                             , DECODE(OPER, 'DA', SUM(QTY), 0)        DA_QTY     
                             , DECODE(OPER, 'DA', SUM(EXPECT_QTY), 0) DA_EXP_QTY     
                          FROM (     
                                SELECT WIPMOV.DATA     
                                     , MAT.MAT_ID     
                                     , WIPMOV.LOT_ID     
                                     , SUM(RES.EQP_CNT) AS EQP_CNT     
                                     , SUM(CASE WHEN RES.OPER LIKE 'A06%' THEN TRUNC(NVL(NVL(UPH.UPEH,0) * 24 * 0.75 * RES.EQP_CNT, 0)) 
                                                WHEN RES.OPER LIKE 'A04%' THEN TRUNC(NVL(NVL(UPH.UPEH,0) * 24 * 0.7 * RES.EQP_CNT, 0)) 
                                                ELSE TRUNC(NVL(NVL(UPH.UPEH,0) * 24 * 0.7 * RES.EQP_CNT, 0)) 
                                           END ) AS CAPA 
                                     , DECODE(SUBSTR(WIPMOV.OPER, 1,3), 'A03', 'DA', 'A04', 'DA', 'A06', 'WB') AS OPER     
                                     , MAX(WIPMOV.QTY) AS QTY     
                                     , CASE     
                                        WHEN TO_CHAR(SYSDATE, 'HH24') >= 22 THEN ROUND(SUM(WIPMOV.QTY)/ (SYSDATE - TO_DATE(TO_CHAR(SYSDATE, 'YYYYMMDD')||'220000', 'YYYYMMDDHH24MISS')), 0)     
                                        ELSE ROUND(SUM(WIPMOV.QTY)/ (SYSDATE - TO_DATE(TO_CHAR(SYSDATE-1, 'YYYYMMDD')||'220000', 'YYYYMMDDHH24MISS')), 0)     
                                       END     
                                     AS EXPECT_QTY     
                                  FROM (     
                                        SELECT FACTORY, RES_STS_2, RES_STS_8 AS OPER, RES_GRP_6 AS RES_MODEL, RES_GRP_7 AS UPEH_GRP, LOT_ID, COUNT(RES_ID) AS EQP_CNT     
                                          FROM MRASRESDEF     
                                         WHERE 1 = 1     
                                           AND FACTORY  = 'HMVA2'     
                                           AND RES_CMF_9 = 'Y'     
                                           AND RES_CMF_7 = 'Y'     
                                           AND DELETE_FLAG = ' '     
                                           AND (RES_STS_8 LIKE 'A06%' OR RES_STS_8 LIKE 'A04%' OR RES_STS_8 = 'A0333') 
                                         GROUP BY FACTORY,RES_STS_2,RES_STS_8,RES_GRP_6,RES_GRP_7, LOT_ID     
                                       ) RES     
                                     , CRASUPHDEF UPH     
                                     , (SELECT * FROM MWIPMATDEF WHERE MAT_GRP_5 IN ('Merge', '-')) MAT     
                                     , (     
                                        SELECT EMERGENCY.DATA, MAT_ID, LOT_ID, OLD_OPER AS OPER , SUM(QTY_1) QTY     
                                          FROM RWIPLOTHIS, EMERGENCY,     
                                               (SELECT CASE WHEN TO_CHAR(SYSDATE, 'HH24') >= 22 THEN TO_CHAR(SYSDATE, 'YYYYMMDD')||'220000' ELSE TO_CHAR(SYSDATE-1, 'YYYYMMDD')||'220000' END START_T, 
                                                       CASE WHEN TO_CHAR(SYSDATE, 'HH24') >= 22 THEN TO_CHAR(SYSDATE+1, 'YYYYMMDD')||'215959' ELSE TO_CHAR(SYSDATE, 'YYYYMMDD')||'215959' END END_T    
                                                  FROM DUAL) TIME_TABLE 
                                         WHERE 1 = 1     
                                           AND ( ( EMERGENCY.GUBUN = 'RUN' AND ( RWIPLOTHIS.LOT_ID LIKE EMERGENCY.DATA||'%'  OR RWIPLOTHIS.LOT_ID LIKE EMERGENCY.DATA ) ) OR 
                                                 ( EMERGENCY.GUBUN = 'LOT' AND ( RWIPLOTHIS.LOT_ID LIKE EMERGENCY.DATA||'%'  OR RWIPLOTHIS.LOT_ID = EMERGENCY.DATA ) ) )    
                                           AND FACTORY = 'HMVA2'     
                                           AND TRAN_CODE = 'END'     
                                           AND TRAN_TIME BETWEEN TIME_TABLE.START_T AND TIME_TABLE.END_T     
                                           AND (OLD_OPER LIKE 'A04%' OR OLD_OPER LIKE 'A06%' OR OLD_OPER = 'A0333') 
                                           AND HIST_DEL_FLAG = ' ' 
                                           AND LOT_TYPE = 'W' 
                                         GROUP BY EMERGENCY.DATA, MAT_ID, LOT_ID, OLD_OPER     
                                        ) WIPMOV     
                                 WHERE 1 = 1     
                                   AND RES.LOT_ID = WIPMOV.LOT_ID     
                                   AND MAT.DELETE_FLAG = ' '     
                                   AND RES.FACTORY = UPH.FACTORY(+)     
                                   AND RES.OPER = UPH.OPER(+)     
                                   AND RES.RES_MODEL = UPH.RES_MODEL(+)     
                                   AND RES.UPEH_GRP = UPH.UPEH_GRP(+)     
                                   AND RES.RES_STS_2 = UPH.MAT_ID(+)     
                                   AND RES.FACTORY = MAT.FACTORY     
                                   AND RES.RES_STS_2 = MAT.MAT_ID     
                                   AND MAT.MAT_ID = WIPMOV.MAT_ID     
                                   AND RES.OPER = WIPMOV.OPER     
                                   AND ((RES.OPER LIKE 'A040%' AND RES.OPER = 'A040'||DECODE(MAT.MAT_GRP_4,'SD2','2','SD3','3','SD4','4','SD5','5','SD8','8','0' ) ) OR 
                                        (RES.OPER LIKE 'A060%' AND RES.OPER = 'A060'||DECODE(MAT.MAT_GRP_4,'SD2','2','SD3','3','SD4','4','SD5','5','SD8','8','0' ) ) OR RES.OPER = 'A0333')  
                                 GROUP BY WIPMOV.DATA, MAT.MAT_ID, SUBSTR(WIPMOV.OPER, 1,3), WIPMOV.LOT_ID     
                        )     
                         GROUP BY DATA, MAT_ID, OPER, LOT_ID     
                     )     
                 GROUP BY DATA     
                ) RESARR_LOT     
                  ON EMERGENCY.DATA = RESARR_LOT.DATA     
           LEFT OUTER JOIN (     
                SELECT SAP.SAP_CODE, MAT.VENDOR_ID, MAT.MAT_ID, SUM(SAP.TAT_DAY+SAP.TAT_DAY_WAIT) AS TAT     
                  FROM CWIPSAPTAT@RPTTOMES SAP     
                     , MWIPMATDEF MAT     
                 WHERE SAP.SAP_CODE = MAT.VENDOR_ID     
                   AND MAT.FACTORY = 'HMVA2'         
                   AND MAT.FACTORY = SAP.FACTORY         
                   AND MAT.MAT_TYPE = 'FG'         
                   AND SAP.RESV_FIELD_1 = ' '          
                 GROUP BY SAP.SAP_CODE, MAT.VENDOR_ID, MAT.MAT_ID     
                ) TAT ON MAT.MAT_ID = TAT.MAT_ID     
            LEFT OUTER JOIN (       
                SELECT C.DATA, B.MAT_ID, MAX(B.MAT_GRP_10) AS MAT_GRP_10,  MAX(B.MAT_GRP_9) AS MAT_GRP_9, MAX(B.MAT_GRP_6) AS MAT_GRP_6, MAX(D.DATA_1 ) AS CUSTOMER, MAX(B.MAT_GRP_1) AS MAT_GRP_1  
                  FROM RWIPLOTSTS A, MWIPMATDEF B, EMERGENCY C, (SELECT DATA_1, KEY_1 FROM MGCMTBLDAT WHERE TABLE_NAME = 'H_CUSTOMER') D       
                 WHERE A.LOT_ID = C.DATA       
                   AND A.MAT_ID = B.MAT_ID       
                   AND D.KEY_1 = B.MAT_GRP_1       
                 GROUP BY C.DATA, B.MAT_ID) HEAD ON EMERGENCY.DATA = HEAD.DATA           
          WHERE 1=1     
            AND EMERGENCY.GUBUN <> 'PART'     
            AND MAT_ID LIKE '%'     
          ORDER BY 1,2,3,MAT_ID     

-------------------------------------------------------------
SELECT * FROM RWEBUSRDEF WHERE FACTORY = :FACTORY AND USER_ID= :USER_ID
-------------------------------------------------------------
SELECT A.FUNC_GRP_SEQ,A.SEC_GRP_ID,A.FUNC_GRP_ID,NVL(A.FUNC_NAME, ' ') FUNC_NAME, NVL(B.FUNC_DESC, ' ') FUNC_DESC, LANGUAGE_1, LANGUAGE_2, LANGUAGE_3
  FROM RWEBGRPFUN A, RWEBFUNDEF B
 WHERE A.FACTORY = :p_FACTORY
   AND A.SEC_GRP_ID = :p_SEC_GRP_ID
   AND A.FUNC_NAME=B.FUNC_NAME(+)
 ORDER BY A.FUNC_GRP_SEQ, A.FUNC_SEQ
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT PLAN_WEEK V1    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_DATE = TO_CHAR(SYSDATE,'yyyymmdd')      AND ROWNUM = 1  
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT DISTINCT PLAN_YEAR||LPAD(PLAN_WEEK,2,'0') AS PLAN_WEEK 
  FROM MWIPCALDEF
 WHERE 1=1 
   AND CALENDAR_ID = 'OTD' 
   AND SYS_YEAR||LPAD(SYS_MONTH,2,'0') = '202004' 
 ORDER BY PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT DISTINCT PLAN_YEAR||LPAD(PLAN_WEEK,2,'0') AS PLAN_WEEK 
  FROM MWIPCALDEF
 WHERE 1=1 
   AND CALENDAR_ID = 'OTD' 
   AND SYS_YEAR||LPAD(SYS_MONTH,2,'0') = '202004' 
   AND SYS_DATE <= '20200409' 
 ORDER BY PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT LANGUAGE_2 FROM RWEBFUNDEF WHERE FUNC_NAME = 'PRD010907'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
SELECT LANGUAGE_2 FROM RWEBFUNDEF WHERE FUNC_NAME = 'PRD010312'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT FACTORY Code, FAC_DESC Data
  FROM MWIPFACDEF
 WHERE FAC_GRP_5 = 'Y' 
 ORDER BY FAC_GRP_4 ASC
-------------------------------------------------------------
SELECT OPER, OPER_DESC  FROM MWIPOPRDEF
  WHERE FACTORY = 'HMVA2'  AND OPER NOT IN ('00001', '00002') AND OPER NOT LIKE 'V%' ORDER BY DECODE(OPER_CMF_2, ' ', 99999, TO_NUMBER(OPER_CMF_2)), OPER
-------------------------------------------------------------
SELECT OPER, OPER_DESC  FROM MWIPOPRDEF
  WHERE FACTORY = 'HMVA2'  AND OPER NOT IN ('00001', '00002') AND OPER NOT LIKE 'V%' ORDER BY DECODE(OPER_CMF_2, ' ', 99999, TO_NUMBER(OPER_CMF_2)), OPER
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE) AS This_Week_First_Day 
     , MAX(SYS_DATE) AS This_Week_Last_Day
  FROM MWIPCALDEF
 WHERE 1=1 
   AND CALENDAR_ID = 'SE'
   AND (PLAN_YEAR,PLAN_WEEK) IN (
                                 SELECT PLAN_YEAR,PLAN_WEEK 
                                   FROM MWIPCALDEF 
                                  WHERE 1=1
                                    AND CALENDAR_ID = 'SE'
                                    AND SYS_DATE = '20200409')

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT NVL((SELECT DATA_1 FROM MGCMTBLDAT WHERE TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = MAT.MAT_GRP_1 AND ROWNUM=1), '-') AS CUSTOMER,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT.MAT_CMF_10 AS PIN_TYPE,  ' ', MAT.MAT_ID AS PRODUCT,  ' ',  ' ' 
     , ROUND(SUM(TOTAL)/1,0) AS TOTAL 
     , ROUND(SUM(V0)/1,0) AS  Val0
     , ROUND(SUM(V1)/1,0) AS  Val1
     , ROUND(SUM(V2)/1,0) AS  Val2
     , ROUND(SUM(V3)/1,0) AS  Val3
     , ROUND(SUM(V4)/1,0) AS  Val4
     , ROUND(SUM(V5)/1,0) AS  Val5
     , ROUND(SUM(V6)/1,0) AS  Val6
     , ROUND(SUM(V7)/1,0) AS  Val7
     , ROUND(SUM(V8)/1,0) AS  Val8
     , ROUND(SUM(V9)/1,0) AS  Val9
     , ROUND(SUM(V10)/1,0) AS  Val10
     , ROUND(SUM(V11)/1,0) AS  Val11
     , ROUND(SUM(V12)/1,0) AS  Val12
     , ROUND(SUM(V13)/1,0) AS  Val13
     , ROUND(SUM(V14)/1,0) AS  Val14
     , ROUND(SUM(V15)/1,0) AS  Val15
     , ROUND(SUM(V16)/1,0) AS  Val16
     , ROUND(SUM(V17)/1,0) AS  Val17
     , ROUND(SUM(V18)/1,0) AS  Val18
     , ROUND(SUM(V19)/1,0) AS  Val19
     , ROUND(SUM(V20)/1,0) AS  Val20
     , ROUND(SUM(V21)/1,0) AS  Val21
     , ROUND(SUM(V22)/1,0) AS  Val22
     , ROUND(SUM(V23)/1,0) AS  Val23
     , ROUND(SUM(V24)/1,0) AS  Val24
     , ROUND(SUM(V25)/1,0) AS  Val25
     , ROUND(SUM(V26)/1,0) AS  Val26
     , ROUND(SUM(V27)/1,0) AS  Val27
     , ROUND(SUM(V28)/1,0) AS  Val28
     , ROUND(SUM(V29)/1,0) AS  Val29
     , ROUND(SUM(V30)/1,0) AS  Val30
     , ROUND(SUM(V31)/1,0) AS  Val31
     , ROUND(SUM(V32)/1,0) AS  Val32
     , ROUND(SUM(V33)/1,0) AS  Val33
     , ROUND(SUM(V34)/1,0) AS  Val34
     , ROUND(SUM(V35)/1,0) AS  Val35
     , ROUND(SUM(V36)/1,0) AS  Val36
     , ROUND(SUM(V37)/1,0) AS  Val37
     , ROUND(SUM(V38)/1,0) AS  Val38
     , ROUND(SUM(V39)/1,0) AS  Val39
     , ROUND(SUM(V40)/1,0) AS  Val40
     , ROUND(SUM(V41)/1,0) AS  Val41
     , ROUND(SUM(V42)/1,0) AS  Val42
     , ROUND(SUM(V43)/1,0) AS  Val43
     , ROUND(SUM(V44)/1,0) AS  Val44
     , ROUND(SUM(V45)/1,0) AS  Val45
     , ROUND(SUM(V46)/1,0) AS  Val46
     , ROUND(SUM(V47)/1,0) AS  Val47
     , ROUND(SUM(V48)/1,0) AS  Val48
     , ROUND(SUM(V49)/1,0) AS  Val49
     , ROUND(SUM(V50)/1,0) AS  Val50
     , ROUND(SUM(V51)/1,0) AS  Val51
     , ROUND(SUM(V52)/1,0) AS  Val52
     , ROUND(SUM(V53)/1,0) AS  Val53
     , ROUND(SUM(V54)/1,0) AS  Val54
     , ROUND(SUM(V55)/1,0) AS  Val55
     , ROUND(SUM(V56)/1,0) AS  Val56
     , ROUND(SUM(V57)/1,0) AS  Val57
     , ROUND(SUM(V58)/1,0) AS  Val58
     , ROUND(SUM(V59)/1,0) AS  Val59
     , ROUND(SUM(V60)/1,0) AS  Val60
     , ROUND(SUM(V61)/1,0) AS  Val61
     , ROUND(SUM(V62)/1,0) AS  Val62
     , ROUND(SUM(V63)/1,0) AS  Val63
     , ROUND(SUM(V64)/1,0) AS  Val64
     , ROUND(SUM(V65)/1,0) AS  Val65
     , ROUND(SUM(V66)/1,0) AS  Val66
     , ROUND(SUM(V67)/1,0) AS  Val67
     , ROUND(SUM(V68)/1,0) AS  Val68
     , ROUND(SUM(V69)/1,0) AS  Val69
     , ROUND(SUM(V70)/1,0) AS  Val70
     , ROUND(SUM(V71)/1,0) AS  Val71
     , ROUND(SUM(V72)/1,0) AS  Val72
     , ROUND(SUM(V73)/1,0) AS  Val73
     , ROUND(SUM(V74)/1,0) AS  Val74
     , ROUND(SUM(V75)/1,0) AS  Val75
     , ROUND(SUM(V76)/1,0) AS  Val76
     , ROUND(SUM(V77)/1,0) AS  Val77
     , ROUND(SUM(V78)/1,0) AS  Val78
     , ROUND(SUM(V79)/1,0) AS  Val79
     , ROUND(SUM(V80)/1,0) AS  Val80
     , ROUND(SUM(V81)/1,0) AS  Val81
     , ROUND(SUM(V82)/1,0) AS  Val82
     , ROUND(SUM(V83)/1,0) AS  Val83
     , ROUND(SUM(V84)/1,0) AS  Val84
     , ROUND(SUM(V85)/1,0) AS  Val85
     , ROUND(SUM(V86)/1,0) AS  Val86
     , ROUND(SUM(V87)/1,0) AS  Val87
     , ROUND(SUM(V88)/1,0) AS  Val88
     , ROUND(SUM(V89)/1,0) AS  Val89
     , ROUND(SUM(V90)/1,0) AS  Val90
     , ROUND(SUM(V91)/1,0) AS  Val91
     , ROUND(SUM(V92)/1,0) AS  Val92
     , ROUND(SUM(V93)/1,0) AS  Val93
     , ROUND(SUM(V94)/1,0) AS  Val94
     , ROUND(SUM(V95)/1,0) AS  Val95
     , ROUND(SUM(V96)/1,0) AS  Val96
     , ROUND(SUM(V97)/1,0) AS  Val97
     , ROUND(SUM(V98)/1,0) AS  Val98
     , ROUND(SUM(V99)/1,0) AS  Val99
     , ROUND(SUM(V100)/1,0) AS  Val100
     , ROUND(SUM(V101)/1,0) AS  Val101
     , ROUND(SUM(V102)/1,0) AS  Val102
     , ROUND(SUM(V103)/1,0) AS  Val103
     , ROUND(SUM(V104)/1,0) AS  Val104
     , ROUND(SUM(V105)/1,0) AS  Val105
     , ROUND(SUM(V106)/1,0) AS  Val106
     , ROUND(SUM(V107)/1,0) AS  Val107
     , ROUND(SUM(V108)/1,0) AS  Val108
     , ROUND(SUM(V109)/1,0) AS  Val109
     , ROUND(SUM(V110)/1,0) AS  Val110
     , ROUND(SUM(V111)/1,0) AS  Val111
     , ROUND(SUM(V112)/1,0) AS  Val112
     , ROUND(SUM(V113)/1,0) AS  Val113
     , ROUND(SUM(V114)/1,0) AS  Val114
     , ROUND(SUM(V115)/1,0) AS  Val115
     , ROUND(SUM(V116)/1,0) AS  Val116
     , ROUND(SUM(V117)/1,0) AS  Val117
     , ROUND(SUM(V118)/1,0) AS  Val118
     , ROUND(SUM(V119)/1,0) AS  Val119
     , ROUND(SUM(V120)/1,0) AS  Val120
     , ROUND(SUM(V121)/1,0) AS  Val121
     , ROUND(SUM(V122)/1,0) AS  Val122
     , ROUND(SUM(V123)/1,0) AS  Val123
     , ROUND(SUM(V124)/1,0) AS  Val124
     , ROUND(SUM(V125)/1,0) AS  Val125
     , ROUND(SUM(V126)/1,0) AS  Val126
     , ROUND(SUM(V127)/1,0) AS  Val127
     , ROUND(SUM(V128)/1,0) AS  Val128
     , ROUND(SUM(V129)/1,0) AS  Val129
     , ROUND(SUM(V130)/1,0) AS  Val130
     , ROUND(SUM(V131)/1,0) AS  Val131
     , ROUND(SUM(V132)/1,0) AS  Val132
     , ROUND(SUM(V133)/1,0) AS  Val133
     , ROUND(SUM(V134)/1,0) AS  Val134
     , ROUND(SUM(V135)/1,0) AS  Val135
     , ROUND(SUM(V136)/1,0) AS  Val136
     , ROUND(SUM(V137)/1,0) AS  Val137
     , ROUND(SUM(V138)/1,0) AS  Val138
     , ROUND(SUM(V139)/1,0) AS  Val139
     , ROUND(SUM(V140)/1,0) AS  Val140
     , ROUND(SUM(V141)/1,0) AS  Val141
     , ROUND(SUM(V142)/1,0) AS  Val142
     , ROUND(SUM(V143)/1,0) AS  Val143
     , ROUND(SUM(V144)/1,0) AS  Val144
     , ROUND(SUM(V145)/1,0) AS  Val145
     , ROUND(SUM(V146)/1,0) AS  Val146
     , ROUND(SUM(V147)/1,0) AS  Val147
     , ROUND(SUM(V148)/1,0) AS  Val148
     , ROUND(SUM(V149)/1,0) AS  Val149
     , ROUND(SUM(V150)/1,0) AS  Val150
     , ROUND(SUM(V151)/1,0) AS  Val151
     , ROUND(SUM(V152)/1,0) AS  Val152
     , ROUND(SUM(V153)/1,0) AS  Val153
     , ROUND(SUM(V154)/1,0) AS  Val154
     , ROUND(SUM(V155)/1,0) AS  Val155
     , ROUND(SUM(V156)/1,0) AS  Val156
     , ROUND(SUM(V157)/1,0) AS  Val157
     , ROUND(SUM(V158)/1,0) AS  Val158
     , ROUND(SUM(V159)/1,0) AS  Val159
     , ROUND(SUM(V160)/1,0) AS  Val160
     , ROUND(SUM(V161)/1,0) AS  Val161
     , ROUND(SUM(V162)/1,0) AS  Val162
     , ROUND(SUM(V163)/1,0) AS  Val163
     , ROUND(SUM(V164)/1,0) AS  Val164
     , ROUND(SUM(V165)/1,0) AS  Val165
     , ROUND(SUM(V166)/1,0) AS  Val166
     , ROUND(SUM(V167)/1,0) AS  Val167
     , ROUND(SUM(V168)/1,0) AS  Val168
     , ROUND(SUM(V169)/1,0) AS  Val169
     , ROUND(SUM(V170)/1,0) AS  Val170
     , ROUND(SUM(V171)/1,0) AS  Val171
     , ROUND(SUM(V172)/1,0) AS  Val172
     , ROUND(SUM(V173)/1,0) AS  Val173
     , ROUND(SUM(V174)/1,0) AS  Val174
     , ROUND(SUM(V175)/1,0) AS  Val175
     , ROUND(SUM(V176)/1,0) AS  Val176
     , ROUND(SUM(V177)/1,0) AS  Val177
     , ROUND(SUM(V178)/1,0) AS  Val178
     , ROUND(SUM(V179)/1,0) AS  Val179
     , ROUND(SUM(V180)/1,0) AS  Val180
     , ROUND(SUM(V181)/1,0) AS  Val181
     , ROUND(SUM(V182)/1,0) AS  Val182
     , ROUND(SUM(V183)/1,0) AS  Val183
     , ROUND(SUM(V184)/1,0) AS  Val184
     , ROUND(SUM(V185)/1,0) AS  Val185
     , ROUND(SUM(V186)/1,0) AS  Val186
     , ROUND(SUM(V187)/1,0) AS  Val187
     , ROUND(SUM(V188)/1,0) AS  Val188
     , ROUND(SUM(V189)/1,0) AS  Val189
     , ROUND(SUM(V190)/1,0) AS  Val190
     , ROUND(SUM(V191)/1,0) AS  Val191
     , ROUND(SUM(V192)/1,0) AS  Val192
     , ROUND(SUM(V193)/1,0) AS  Val193
     , ROUND(SUM(V194)/1,0) AS  Val194
     , ROUND(SUM(V195)/1,0) AS  Val195
     , ROUND(SUM(V196)/1,0) AS  Val196
     , ROUND(SUM(V197)/1,0) AS  Val197
     , ROUND(SUM(V198)/1,0) AS  Val198
     , ROUND(SUM(V199)/1,0) AS  Val199
     , ROUND(SUM(V200)/1,0) AS  Val200
     , ROUND(SUM(V201)/1,0) AS  Val201
     , ROUND(SUM(V202)/1,0) AS  Val202
     , ROUND(SUM(V203)/1,0) AS  Val203
     , ROUND(SUM(V204)/1,0) AS  Val204
     , ROUND(SUM(V205)/1,0) AS  Val205
     , ROUND(SUM(V206)/1,0) AS  Val206
     , ROUND(SUM(V207)/1,0) AS  Val207
     , ROUND(SUM(V208)/1,0) AS  Val208
     , ROUND(SUM(V209)/1,0) AS  Val209
     , ROUND(SUM(V210)/1,0) AS  Val210
     , ROUND(SUM(V211)/1,0) AS  Val211
     , ROUND(SUM(V212)/1,0) AS  Val212
     , ROUND(SUM(V213)/1,0) AS  Val213
     , ROUND(SUM(V214)/1,0) AS  Val214
     , ROUND(SUM(V215)/1,0) AS  Val215
     , ROUND(SUM(V216)/1,0) AS  Val216
     , ROUND(SUM(V217)/1,0) AS  Val217
     , ROUND(SUM(V218)/1,0) AS  Val218
     , ROUND(SUM(V219)/1,0) AS  Val219
     , ROUND(SUM(V220)/1,0) AS  Val220
     , ROUND(SUM(V221)/1,0) AS  Val221
     , ROUND(SUM(V222)/1,0) AS  Val222
     , ROUND(SUM(V223)/1,0) AS  Val223
     , ROUND(SUM(V224)/1,0) AS  Val224
     , ROUND(SUM(V225)/1,0) AS  Val225
     , ROUND(SUM(V226)/1,0) AS  Val226
     , ROUND(SUM(V227)/1,0) AS  Val227
     , ROUND(SUM(V228)/1,0) AS  Val228
     , ROUND(SUM(V229)/1,0) AS  Val229
     , ROUND(SUM(V230)/1,0) AS  Val230
     , ROUND(SUM(V231)/1,0) AS  Val231
     , ROUND(SUM(V232)/1,0) AS  Val232
     , ROUND(SUM(V233)/1,0) AS  Val233
     , ROUND(SUM(V234)/1,0) AS  Val234
     , ROUND(SUM(V235)/1,0) AS  Val235
     , ROUND(SUM(V236)/1,0) AS  Val236
     , ROUND(SUM(V237)/1,0) AS  Val237
     , ROUND(SUM(V238)/1,0) AS  Val238
     , ROUND(SUM(V239)/1,0) AS  Val239
     , ROUND(SUM(V240)/1,0) AS  Val240
     , ROUND(SUM(V241)/1,0) AS  Val241
     , ROUND(SUM(V242)/1,0) AS  Val242
     , ROUND(SUM(V243)/1,0) AS  Val243
     , ROUND(SUM(V244)/1,0) AS  Val244
     , ROUND(SUM(V245)/1,0) AS  Val245
     , ROUND(SUM(V246)/1,0) AS  Val246
     , ROUND(SUM(V247)/1,0) AS  Val247
     , ROUND(SUM(V248)/1,0) AS  Val248
     , ROUND(SUM(V249)/1,0) AS  Val249
     , ROUND(SUM(V250)/1,0) AS  Val250
     , ROUND(SUM(V251)/1,0) AS  Val251
     , ROUND(SUM(V252)/1,0) AS  Val252
     , ROUND(SUM(V253)/1,0) AS  Val253
     , ROUND(SUM(V254)/1,0) AS  Val254
     , ROUND(SUM(V255)/1,0) AS  Val255
     , ROUND(SUM(V256)/1,0) AS  Val256
     , ROUND(SUM(V257)/1,0) AS  Val257
     , ROUND(SUM(V258)/1,0) AS  Val258
     , ROUND(SUM(V259)/1,0) AS  Val259
     , ROUND(SUM(V260)/1,0) AS  Val260
     , ROUND(SUM(V261)/1,0) AS  Val261
     , ROUND(SUM(V262)/1,0) AS  Val262
     , ROUND(SUM(V263)/1,0) AS  Val263
     , ROUND(SUM(V264)/1,0) AS  Val264
     , ROUND(SUM(V265)/1,0) AS  Val265
     , ROUND(SUM(V266)/1,0) AS  Val266
     , ROUND(SUM(V267)/1,0) AS  Val267
     , ROUND(SUM(V268)/1,0) AS  Val268
     , ROUND(SUM(V269)/1,0) AS  Val269
     , ROUND(SUM(V270)/1,0) AS  Val270
     , ROUND(SUM(V271)/1,0) AS  Val271
     , ROUND(SUM(V272)/1,0) AS  Val272
     , ROUND(SUM(V273)/1,0) AS  Val273
     , ROUND(SUM(V274)/1,0) AS  Val274
     , ROUND(SUM(V275)/1,0) AS  Val275
     , ROUND(SUM(V276)/1,0) AS  Val276
     , ROUND(SUM(V277)/1,0) AS  Val277
     , ROUND(SUM(V278)/1,0) AS  Val278
     , ROUND(SUM(V279)/1,0) AS  Val279
     , ROUND(SUM(V280)/1,0) AS  Val280
     , ROUND(SUM(V281)/1,0) AS  Val281
     , ROUND(SUM(V282)/1,0) AS  Val282
     , ROUND(SUM(V283)/1,0) AS  Val283
     , ROUND(SUM(V284)/1,0) AS  Val284
     , ROUND(SUM(V285)/1,0) AS  Val285
     , ROUND(SUM(V286)/1,0) AS  Val286
     , ROUND(SUM(V287)/1,0) AS  Val287
     , ROUND(SUM(V288)/1,0) AS  Val288
     , ROUND(SUM(V289)/1,0) AS  Val289
     , ROUND(SUM(V290)/1,0) AS  Val290
     , ROUND(SUM(V291)/1,0) AS  Val291
     , ROUND(SUM(V292)/1,0) AS  Val292
     , ROUND(SUM(V293)/1,0) AS  Val293
     , ROUND(SUM(V294)/1,0) AS  Val294
     , ROUND(SUM(V295)/1,0) AS  Val295
     , ROUND(SUM(V296)/1,0) AS  Val296
     , ROUND(SUM(V297)/1,0) AS  Val297
     , ROUND(SUM(V298)/1,0) AS  Val298
     , ROUND(SUM(V299)/1,0) AS  Val299
     , TRUNC(SUM(SHP_QTY)/1,0) AS SHP_QTY 
     , ROUND(DECODE(TO_CHAR(TO_DATE('20200409','YYYYMMDD'),'D'), 2, SUM(NVL(PLN.PLAN_W1,0)), 3, SUM(NVL(PLN.PLAN_W1,0)), SUM(NVL(PLN.PLAN_W2,0)) + SUM(NVL(SHP1.ASSY_MONDAY,0)))/1,0) AS PLAN_W1
     , ROUND(SUM(NVL(SHP1.ASSY_WEEK,0))/1,0)
     , ROUND((DECODE(TO_CHAR(TO_DATE('20200409','YYYYMMDD'),'D'), 2, SUM(NVL(PLN.PLAN_W1,0)), 3, SUM(NVL(PLN.PLAN_W1,0)), SUM(NVL(PLN.PLAN_W2,0)) + SUM(NVL(SHP1.ASSY_MONDAY,0)))) - SUM(NVL(SHP1.ASSY_WEEK,0))/1,0) AS LACK_WEEK
  FROM MWIPMATDEF MAT 
     , ( 
        SELECT A.MAT_ID, MAX(B.EMC_1) AS EMC_1 
             , SUM(QTY_1) AS TOTAL 
             , MAX((SELECT ATTR_VALUE FROM MATRNAMSTS WHERE FACTORY = 'HMVA2' AND ATTR_TYPE = 'MAT_ETC' AND ATTR_NAME = DECODE(LOT_CMF_2, 'SE', 'SEC_VERSION', 'HX', 'HX_VERSION') AND ATTR_KEY = A.MAT_ID)) AS VERSION 
             , SUM(DECODE(A.OPER, 'A0000', QTY_1,0)) V0
             , SUM(DECODE(A.OPER, 'A0005', QTY_1,0)) V1
             , SUM(DECODE(A.OPER, 'A000N', QTY_1,0)) V2
             , SUM(DECODE(A.OPER, 'A0010', QTY_1,0)) V3
             , SUM(DECODE(A.OPER, 'A0012', QTY_1,0)) V4
             , SUM(DECODE(A.OPER, 'A0013', QTY_1,0)) V5
             , SUM(DECODE(A.OPER, 'A0015', QTY_1,0)) V6
             , SUM(DECODE(A.OPER, 'A0020', QTY_1,0)) V7
             , SUM(DECODE(A.OPER, 'A0055', QTY_1,0)) V8
             , SUM(DECODE(A.OPER, 'A0023', QTY_1,0)) V9
             , SUM(DECODE(A.OPER, 'A0025', QTY_1,0)) V10
             , SUM(DECODE(A.OPER, 'A0030', QTY_1,0)) V11
             , SUM(DECODE(A.OPER, 'A0190', QTY_1,0)) V12
             , SUM(DECODE(A.OPER, 'A0033', QTY_1,0)) V13
             , SUM(DECODE(A.OPER, 'A0040', QTY_1,0)) V14
             , SUM(DECODE(A.OPER, 'A0041', QTY_1,0)) V15
             , SUM(DECODE(A.OPER, 'A0042', QTY_1,0)) V16
             , SUM(DECODE(A.OPER, 'A0045', QTY_1,0)) V17
             , SUM(DECODE(A.OPER, 'A0050', QTY_1,0)) V18
             , SUM(DECODE(A.OPER, 'A0060', QTY_1,0)) V19
             , SUM(DECODE(A.OPER, 'A0070', QTY_1,0)) V20
             , SUM(DECODE(A.OPER, 'A0080', QTY_1,0)) V21
             , SUM(DECODE(A.OPER, 'A0090', QTY_1,0)) V22
             , SUM(DECODE(A.OPER, 'A0095', QTY_1,0)) V23
             , SUM(DECODE(A.OPER, 'A0110', QTY_1,0)) V24
             , SUM(DECODE(A.OPER, 'A0120', QTY_1,0)) V25
             , SUM(DECODE(A.OPER, 'A0130', QTY_1,0)) V26
             , SUM(DECODE(A.OPER, 'A0140', QTY_1,0)) V27
             , SUM(DECODE(A.OPER, 'A0160', QTY_1,0)) V28
             , SUM(DECODE(A.OPER, 'A0161', QTY_1,0)) V29
             , SUM(DECODE(A.OPER, 'A0165', QTY_1,0)) V30
             , SUM(DECODE(A.OPER, 'A0065', QTY_1,0)) V31
             , SUM(DECODE(A.OPER, 'A0100', QTY_1,0)) V32
             , SUM(DECODE(A.OPER, 'A0150', QTY_1,0)) V33
             , SUM(DECODE(A.OPER, 'A0175', QTY_1,0)) V34
             , SUM(DECODE(A.OPER, 'A0176', QTY_1,0)) V35
             , SUM(DECODE(A.OPER, 'A0170', QTY_1,0)) V36
             , SUM(DECODE(A.OPER, 'A0180', QTY_1,0)) V37
             , SUM(DECODE(A.OPER, 'A0200', QTY_1,0)) V38
             , SUM(DECODE(A.OPER, 'A0201', QTY_1,0)) V39
             , SUM(DECODE(A.OPER, 'A0202', QTY_1,0)) V40
             , SUM(DECODE(A.OPER, 'A0210', QTY_1,0)) V41
             , SUM(DECODE(A.OPER, 'A0215', QTY_1,0)) V42
             , SUM(DECODE(A.OPER, 'A0220', QTY_1,0)) V43
             , SUM(DECODE(A.OPER, 'A0230', QTY_1,0)) V44
             , SUM(DECODE(A.OPER, 'A0300', QTY_1,0)) V45
             , SUM(DECODE(A.OPER, 'A0250', QTY_1,0)) V46
             , SUM(DECODE(A.OPER, 'A0305', QTY_1,0)) V47
             , SUM(DECODE(A.OPER, 'A0240', QTY_1,0)) V48
             , SUM(DECODE(A.OPER, 'A0260', QTY_1,0)) V49
             , SUM(DECODE(A.OPER, 'A0270', QTY_1,0)) V50
             , SUM(DECODE(A.OPER, 'A0290', QTY_1,0)) V51
             , SUM(DECODE(A.OPER, 'A0295', QTY_1,0)) V52
             , SUM(DECODE(A.OPER, 'A0280', QTY_1,0)) V53
             , SUM(DECODE(A.OPER, 'A0306', QTY_1,0)) V54
             , SUM(DECODE(A.OPER, 'A0307', QTY_1,0)) V55
             , SUM(DECODE(A.OPER, 'A0308', QTY_1,0)) V56
             , SUM(DECODE(A.OPER, 'A0310', QTY_1,0)) V57
             , SUM(DECODE(A.OPER, 'A0320', QTY_1,0)) V58
             , SUM(DECODE(A.OPER, 'A0330', QTY_1,0)) V59
             , SUM(DECODE(A.OPER, 'A1280', QTY_1,0)) V60
             , SUM(DECODE(A.OPER, 'A0333', QTY_1,0)) V61
             , SUM(DECODE(A.OPER, 'A0335', QTY_1,0)) V62
             , SUM(DECODE(A.OPER, 'A0337', QTY_1,0)) V63
             , SUM(DECODE(A.OPER, 'A0372', QTY_1,0)) V64
             , SUM(DECODE(A.OPER, 'A0395', QTY_1,0)) V65
             , SUM(DECODE(A.OPER, 'A0397', QTY_1,0)) V66
             , SUM(DECODE(A.OPER, 'A0340', QTY_1,0)) V67
             , SUM(DECODE(A.OPER, 'A0345', QTY_1,0)) V68
             , SUM(DECODE(A.OPER, 'A0350', QTY_1,0)) V69
             , SUM(DECODE(A.OPER, 'A0360', QTY_1,0)) V70
             , SUM(DECODE(A.OPER, 'A0370', QTY_1,0)) V71
             , SUM(DECODE(A.OPER, 'A0375', QTY_1,0)) V72
             , SUM(DECODE(A.OPER, 'A0380', QTY_1,0)) V73
             , SUM(DECODE(A.OPER, 'A0381', QTY_1,0)) V74
             , SUM(DECODE(A.OPER, 'A0382', QTY_1,0)) V75
             , SUM(DECODE(A.OPER, 'A0383', QTY_1,0)) V76
             , SUM(DECODE(A.OPER, 'A0385', QTY_1,0)) V77
             , SUM(DECODE(A.OPER, 'A0391', QTY_1,0)) V78
             , SUM(DECODE(A.OPER, 'A0399', QTY_1,0)) V79
             , SUM(DECODE(A.OPER, 'A0390', QTY_1,0)) V80
             , SUM(DECODE(A.OPER, 'A0400', QTY_1,0)) V81
             , SUM(DECODE(A.OPER, 'A0401', QTY_1,0)) V82
             , SUM(DECODE(A.OPER, 'A0500', QTY_1,0)) V83
             , SUM(DECODE(A.OPER, 'A0530', QTY_1,0)) V84
             , SUM(DECODE(A.OPER, 'A0531', QTY_1,0)) V85
             , SUM(DECODE(A.OPER, 'A0501', QTY_1,0)) V86
             , SUM(DECODE(A.OPER, 'A0540', QTY_1,0)) V87
             , SUM(DECODE(A.OPER, 'A0550', QTY_1,0)) V88
             , SUM(DECODE(A.OPER, 'A0600', QTY_1,0)) V89
             , SUM(DECODE(A.OPER, 'A0620', QTY_1,0)) V90
             , SUM(DECODE(A.OPER, 'A0660', QTY_1,0)) V91
             , SUM(DECODE(A.OPER, 'A0630', QTY_1,0)) V92
             , SUM(DECODE(A.OPER, 'A0650', QTY_1,0)) V93
             , SUM(DECODE(A.OPER, 'A0670', QTY_1,0)) V94
             , SUM(DECODE(A.OPER, 'A0720', QTY_1,0)) V95
             , SUM(DECODE(A.OPER, 'A0700', QTY_1,0)) V96
             , SUM(DECODE(A.OPER, 'A0339', QTY_1,0)) V97
             , SUM(DECODE(A.OPER, 'A0541', QTY_1,0)) V98
             , SUM(DECODE(A.OPER, 'A0551', QTY_1,0)) V99
             , SUM(DECODE(A.OPER, 'A0561', QTY_1,0)) V100
             , SUM(DECODE(A.OPER, 'A0601', QTY_1,0)) V101
             , SUM(DECODE(A.OPER, 'A0710', QTY_1,0)) V102
             , SUM(DECODE(A.OPER, 'A0800', QTY_1,0)) V103
             , SUM(DECODE(A.OPER, 'A0402', QTY_1,0)) V104
             , SUM(DECODE(A.OPER, 'A0502', QTY_1,0)) V105
             , SUM(DECODE(A.OPER, 'A0532', QTY_1,0)) V106
             , SUM(DECODE(A.OPER, 'A0801', QTY_1,0)) V107
             , SUM(DECODE(A.OPER, 'A0542', QTY_1,0)) V108
             , SUM(DECODE(A.OPER, 'A0552', QTY_1,0)) V109
             , SUM(DECODE(A.OPER, 'A0562', QTY_1,0)) V110
             , SUM(DECODE(A.OPER, 'A0602', QTY_1,0)) V111
             , SUM(DECODE(A.OPER, 'A0711', QTY_1,0)) V112
             , SUM(DECODE(A.OPER, 'A0802', QTY_1,0)) V113
             , SUM(DECODE(A.OPER, 'A0403', QTY_1,0)) V114
             , SUM(DECODE(A.OPER, 'A0503', QTY_1,0)) V115
             , SUM(DECODE(A.OPER, 'A0533', QTY_1,0)) V116
             , SUM(DECODE(A.OPER, 'A0543', QTY_1,0)) V117
             , SUM(DECODE(A.OPER, 'A0553', QTY_1,0)) V118
             , SUM(DECODE(A.OPER, 'A0563', QTY_1,0)) V119
             , SUM(DECODE(A.OPER, 'A0603', QTY_1,0)) V120
             , SUM(DECODE(A.OPER, 'A0712', QTY_1,0)) V121
             , SUM(DECODE(A.OPER, 'A0713', QTY_1,0)) V122
             , SUM(DECODE(A.OPER, 'A0803', QTY_1,0)) V123
             , SUM(DECODE(A.OPER, 'A0404', QTY_1,0)) V124
             , SUM(DECODE(A.OPER, 'A0504', QTY_1,0)) V125
             , SUM(DECODE(A.OPER, 'A0534', QTY_1,0)) V126
             , SUM(DECODE(A.OPER, 'A0544', QTY_1,0)) V127
             , SUM(DECODE(A.OPER, 'A0554', QTY_1,0)) V128
             , SUM(DECODE(A.OPER, 'A0564', QTY_1,0)) V129
             , SUM(DECODE(A.OPER, 'A0604', QTY_1,0)) V130
             , SUM(DECODE(A.OPER, 'A0714', QTY_1,0)) V131
             , SUM(DECODE(A.OPER, 'A0804', QTY_1,0)) V132
             , SUM(DECODE(A.OPER, 'A0405', QTY_1,0)) V133
             , SUM(DECODE(A.OPER, 'A0505', QTY_1,0)) V134
             , SUM(DECODE(A.OPER, 'A0535', QTY_1,0)) V135
             , SUM(DECODE(A.OPER, 'A0545', QTY_1,0)) V136
             , SUM(DECODE(A.OPER, 'A0555', QTY_1,0)) V137
             , SUM(DECODE(A.OPER, 'A0565', QTY_1,0)) V138
             , SUM(DECODE(A.OPER, 'A0605', QTY_1,0)) V139
             , SUM(DECODE(A.OPER, 'A0715', QTY_1,0)) V140
             , SUM(DECODE(A.OPER, 'A0805', QTY_1,0)) V141
             , SUM(DECODE(A.OPER, 'A0406', QTY_1,0)) V142
             , SUM(DECODE(A.OPER, 'A0506', QTY_1,0)) V143
             , SUM(DECODE(A.OPER, 'A0536', QTY_1,0)) V144
             , SUM(DECODE(A.OPER, 'A0546', QTY_1,0)) V145
             , SUM(DECODE(A.OPER, 'A0556', QTY_1,0)) V146
             , SUM(DECODE(A.OPER, 'A0566', QTY_1,0)) V147
             , SUM(DECODE(A.OPER, 'A0606', QTY_1,0)) V148
             , SUM(DECODE(A.OPER, 'A0716', QTY_1,0)) V149
             , SUM(DECODE(A.OPER, 'A0806', QTY_1,0)) V150
             , SUM(DECODE(A.OPER, 'A0407', QTY_1,0)) V151
             , SUM(DECODE(A.OPER, 'A0507', QTY_1,0)) V152
             , SUM(DECODE(A.OPER, 'A0537', QTY_1,0)) V153
             , SUM(DECODE(A.OPER, 'A0547', QTY_1,0)) V154
             , SUM(DECODE(A.OPER, 'A0557', QTY_1,0)) V155
             , SUM(DECODE(A.OPER, 'A0567', QTY_1,0)) V156
             , SUM(DECODE(A.OPER, 'A0607', QTY_1,0)) V157
             , SUM(DECODE(A.OPER, 'A0717', QTY_1,0)) V158
             , SUM(DECODE(A.OPER, 'A0807', QTY_1,0)) V159
             , SUM(DECODE(A.OPER, 'A0408', QTY_1,0)) V160
             , SUM(DECODE(A.OPER, 'A0508', QTY_1,0)) V161
             , SUM(DECODE(A.OPER, 'A0538', QTY_1,0)) V162
             , SUM(DECODE(A.OPER, 'A0558', QTY_1,0)) V163
             , SUM(DECODE(A.OPER, 'A0568', QTY_1,0)) V164
             , SUM(DECODE(A.OPER, 'A0608', QTY_1,0)) V165
             , SUM(DECODE(A.OPER, 'A0808', QTY_1,0)) V166
             , SUM(DECODE(A.OPER, 'A0409', QTY_1,0)) V167
             , SUM(DECODE(A.OPER, 'A0509', QTY_1,0)) V168
             , SUM(DECODE(A.OPER, 'A0539', QTY_1,0)) V169
             , SUM(DECODE(A.OPER, 'A0559', QTY_1,0)) V170
             , SUM(DECODE(A.OPER, 'A0569', QTY_1,0)) V171
             , SUM(DECODE(A.OPER, 'A0609', QTY_1,0)) V172
             , SUM(DECODE(A.OPER, 'A0809', QTY_1,0)) V173
             , SUM(DECODE(A.OPER, 'A080A', QTY_1,0)) V174
             , SUM(DECODE(A.OPER, 'A0890', QTY_1,0)) V175
             , SUM(DECODE(A.OPER, 'A0900', QTY_1,0)) V176
             , SUM(DECODE(A.OPER, 'A0910', QTY_1,0)) V177
             , SUM(DECODE(A.OPER, 'A0920', QTY_1,0)) V178
             , SUM(DECODE(A.OPER, 'A0930', QTY_1,0)) V179
             , SUM(DECODE(A.OPER, 'A0935', QTY_1,0)) V180
             , SUM(DECODE(A.OPER, 'A040A', QTY_1,0)) V181
             , SUM(DECODE(A.OPER, 'A0950', QTY_1,0)) V182
             , SUM(DECODE(A.OPER, 'A053A', QTY_1,0)) V183
             , SUM(DECODE(A.OPER, 'A0970', QTY_1,0)) V184
             , SUM(DECODE(A.OPER, 'A0940', QTY_1,0)) V185
             , SUM(DECODE(A.OPER, 'A0980', QTY_1,0)) V186
             , SUM(DECODE(A.OPER, 'A1000', QTY_1,0)) V187
             , SUM(DECODE(A.OPER, 'A055A', QTY_1,0)) V188
             , SUM(DECODE(A.OPER, 'A060A', QTY_1,0)) V189
             , SUM(DECODE(A.OPER, 'A1040', QTY_1,0)) V190
             , SUM(DECODE(A.OPER, 'A1070', QTY_1,0)) V191
             , SUM(DECODE(A.OPER, 'A1020', QTY_1,0)) V192
             , SUM(DECODE(A.OPER, 'A1100', QTY_1,0)) V193
             , SUM(DECODE(A.OPER, 'A1110', QTY_1,0)) V194
             , SUM(DECODE(A.OPER, 'A1120', QTY_1,0)) V195
             , SUM(DECODE(A.OPER, 'A1130', QTY_1,0)) V196
             , SUM(DECODE(A.OPER, 'A1140', QTY_1,0)) V197
             , SUM(DECODE(A.OPER, 'A1150', QTY_1,0)) V198
             , SUM(DECODE(A.OPER, 'A1600', QTY_1,0)) V199
             , SUM(DECODE(A.OPER, 'A1650', QTY_1,0)) V200
             , SUM(DECODE(A.OPER, 'A1170', QTY_1,0)) V201
             , SUM(DECODE(A.OPER, 'A1180', QTY_1,0)) V202
             , SUM(DECODE(A.OPER, 'A1200', QTY_1,0)) V203
             , SUM(DECODE(A.OPER, 'A1230', QTY_1,0)) V204
             , SUM(DECODE(A.OPER, 'A1240', QTY_1,0)) V205
             , SUM(DECODE(A.OPER, 'A1250', QTY_1,0)) V206
             , SUM(DECODE(A.OPER, 'A1260', QTY_1,0)) V207
             , SUM(DECODE(A.OPER, 'A1270', QTY_1,0)) V208
             , SUM(DECODE(A.OPER, 'A1300', QTY_1,0)) V209
             , SUM(DECODE(A.OPER, 'A1350', QTY_1,0)) V210
             , SUM(DECODE(A.OPER, 'A1370', QTY_1,0)) V211
             , SUM(DECODE(A.OPER, 'A1380', QTY_1,0)) V212
             , SUM(DECODE(A.OPER, 'A1050', QTY_1,0)) V213
             , SUM(DECODE(A.OPER, 'A1420', QTY_1,0)) V214
             , SUM(DECODE(A.OPER, 'A1440', QTY_1,0)) V215
             , SUM(DECODE(A.OPER, 'A1450', QTY_1,0)) V216
             , SUM(DECODE(A.OPER, 'A1821', QTY_1,0)) V217
             , SUM(DECODE(A.OPER, 'A1460', QTY_1,0)) V218
             , SUM(DECODE(A.OPER, 'A1470', QTY_1,0)) V219
             , SUM(DECODE(A.OPER, 'A1500', QTY_1,0)) V220
             , SUM(DECODE(A.OPER, 'A1550', QTY_1,0)) V221
             , SUM(DECODE(A.OPER, 'A1610', QTY_1,0)) V222
             , SUM(DECODE(A.OPER, 'A1560', QTY_1,0)) V223
             , SUM(DECODE(A.OPER, 'A1720', QTY_1,0)) V224
             , SUM(DECODE(A.OPER, 'A1730', QTY_1,0)) V225
             , SUM(DECODE(A.OPER, 'A1740', QTY_1,0)) V226
             , SUM(DECODE(A.OPER, 'A1750', QTY_1,0)) V227
             , SUM(DECODE(A.OPER, 'A1755', QTY_1,0)) V228
             , SUM(DECODE(A.OPER, 'A1760', QTY_1,0)) V229
             , SUM(DECODE(A.OPER, 'A1765', QTY_1,0)) V230
             , SUM(DECODE(A.OPER, 'A1766', QTY_1,0)) V231
             , SUM(DECODE(A.OPER, 'A1763', QTY_1,0)) V232
             , SUM(DECODE(A.OPER, 'A1770', QTY_1,0)) V233
             , SUM(DECODE(A.OPER, 'A1780', QTY_1,0)) V234
             , SUM(DECODE(A.OPER, 'A1790', QTY_1,0)) V235
             , SUM(DECODE(A.OPER, 'A1795', QTY_1,0)) V236
             , SUM(DECODE(A.OPER, 'A1860', QTY_1,0)) V237
             , SUM(DECODE(A.OPER, 'A1850', QTY_1,0)) V238
             , SUM(DECODE(A.OPER, 'A1390', QTY_1,0)) V239
             , SUM(DECODE(A.OPER, 'A1800', QTY_1,0)) V240
             , SUM(DECODE(A.OPER, 'A1805', QTY_1,0)) V241
             , SUM(DECODE(A.OPER, 'A1810', QTY_1,0)) V242
             , SUM(DECODE(A.OPER, 'A1811', QTY_1,0)) V243
             , SUM(DECODE(A.OPER, 'A1812', QTY_1,0)) V244
             , SUM(DECODE(A.OPER, 'A1816', QTY_1,0)) V245
             , SUM(DECODE(A.OPER, 'A1820', QTY_1,0)) V246
             , SUM(DECODE(A.OPER, 'A1825', QTY_1,0)) V247
             , SUM(DECODE(A.OPER, 'A1826', QTY_1,0)) V248
             , SUM(DECODE(A.OPER, 'A1920', QTY_1,0)) V249
             , SUM(DECODE(A.OPER, 'A1960', QTY_1,0)) V250
             , SUM(DECODE(A.OPER, 'A1815', QTY_1,0)) V251
             , SUM(DECODE(A.OPER, 'A1830', QTY_1,0)) V252
             , SUM(DECODE(A.OPER, 'A1710', QTY_1,0)) V253
             , SUM(DECODE(A.OPER, 'A1840', QTY_1,0)) V254
             , SUM(DECODE(A.OPER, 'A1900', QTY_1,0)) V255
             , SUM(DECODE(A.OPER, 'A1910', QTY_1,0)) V256
             , SUM(DECODE(A.OPER, 'A1950', QTY_1,0)) V257
             , SUM(DECODE(A.OPER, 'A2000', QTY_1,0)) V258
             , SUM(DECODE(A.OPER, 'A2010', QTY_1,0)) V259
             , SUM(DECODE(A.OPER, 'A2020', QTY_1,0)) V260
             , SUM(DECODE(A.OPER, 'A2025', QTY_1,0)) V261
             , SUM(DECODE(A.OPER, 'A1819', QTY_1,0)) V262
             , SUM(DECODE(A.OPER, 'A2030', QTY_1,0)) V263
             , SUM(DECODE(A.OPER, 'A2040', QTY_1,0)) V264
             , SUM(DECODE(A.OPER, 'A2041', QTY_1,0)) V265
             , SUM(DECODE(A.OPER, 'A2042', QTY_1,0)) V266
             , SUM(DECODE(A.OPER, 'A2070', QTY_1,0)) V267
             , SUM(DECODE(A.OPER, 'A2050', QTY_1,0)) V268
             , SUM(DECODE(A.OPER, 'A2150', QTY_1,0)) V269
             , SUM(DECODE(A.OPER, 'A2200', QTY_1,0)) V270
             , SUM(DECODE(A.OPER, 'A2100', QTY_1,0)) V271
             , SUM(DECODE(A.OPER, 'A2300', QTY_1,0)) V272
             , SUM(DECODE(A.OPER, 'A2350', QTY_1,0)) V273
             , SUM(DECODE(A.OPER, 'AZ009', QTY_1,0)) V274
             , SUM(DECODE(A.OPER, 'AZ010', QTY_1,0)) V275
             , SUM(DECODE(A.OPER, 'M0300', QTY_1,0)) V276
             , SUM(DECODE(A.OPER, 'M0315', QTY_1,0)) V277
             , SUM(DECODE(A.OPER, 'M0320', QTY_1,0)) V278
             , SUM(DECODE(A.OPER, 'M0339', QTY_1,0)) V279
             , SUM(DECODE(A.OPER, 'M0345', QTY_1,0)) V280
             , SUM(DECODE(A.OPER, 'M0323', QTY_1,0)) V281
             , SUM(DECODE(A.OPER, 'M0329', QTY_1,0)) V282
             , SUM(DECODE(A.OPER, 'Q0001', QTY_1,0)) V283
             , SUM(DECODE(A.OPER, 'Q0002', QTY_1,0)) V284
             , SUM(DECODE(A.OPER, 'M0325', QTY_1,0)) V285
             , SUM(DECODE(A.OPER, 'M0330', QTY_1,0)) V286
             , SUM(DECODE(A.OPER, 'M0337', QTY_1,0)) V287
             , SUM(DECODE(A.OPER, 'M0391', QTY_1,0)) V288
             , SUM(DECODE(A.OPER, 'M0336', QTY_1,0)) V289
             , SUM(DECODE(A.OPER, 'M0340', QTY_1,0)) V290
             , SUM(DECODE(A.OPER, 'M0400', QTY_1,0)) V291
             , SUM(DECODE(A.OPER, 'M0500', QTY_1,0)) V292
             , SUM(DECODE(A.OPER, 'M0550', QTY_1,0)) V293
             , SUM(DECODE(A.OPER, 'M0110', QTY_1,0)) V294
             , SUM(DECODE(A.OPER, 'M0120', QTY_1,0)) V295
             , SUM(DECODE(A.OPER, 'M0160', QTY_1,0)) V296
             , SUM(DECODE(A.OPER, 'M0161', QTY_1,0)) V297
             , SUM(DECODE(A.OPER, 'M0401', QTY_1,0)) V298
             , SUM(DECODE(A.OPER, 'M1750', QTY_1,0)) V299
          FROM RWIPLOTSTS A, CLOTCRDDAT@RPTTOMES B 
         WHERE 1=1 
           AND A.FACTORY = B.FACTORY(+) 
           AND A.MAT_ID = B.MAT_ID(+) 
           AND A.LOT_DEL_FLAG = ' ' 
           AND A.LOT_TYPE = 'W' 
           AND A.MAT_ID LIKE '%' 
           AND A.FACTORY = 'HMVA2' 
           AND A.OPER BETWEEN 'A0000' AND 'M1750' 
         GROUP BY A.MAT_ID 
       ) WIP 
     , ( 
        SELECT MAT_ID 
             , SUM(S1_FAC_OUT_QTY_1+S2_FAC_OUT_QTY_1+S3_FAC_OUT_QTY_1) AS SHP_QTY  
          FROM RSUMFACMOV
         WHERE CM_KEY_1 = 'HMVA2' 
           AND MAT_ID LIKE '%' 
           AND WORK_DATE = '20200409'
           AND FACTORY NOT IN ('RETURN')
           AND LOT_TYPE = 'W'
         GROUP BY MAT_ID 
       ) SHP 
     , ( 
        SELECT MAT_ID 
             , SUM(DECODE(WORK_DATE, '20200406', NVL(S1_FAC_OUT_QTY_1 + S2_FAC_OUT_QTY_1 + S3_FAC_OUT_QTY_1 + S4_FAC_OUT_QTY_1, 0), 0)) AS ASSY_MONDAY  
             , SUM(NVL(S1_FAC_OUT_QTY_1 + S2_FAC_OUT_QTY_1 + S3_FAC_OUT_QTY_1 + S4_FAC_OUT_QTY_1, 0)) AS ASSY_WEEK 
          FROM RSUMFACMOV 
         WHERE CM_KEY_1 = 'HMVA2' 
           AND LOT_TYPE = 'W'
           AND CM_KEY_2 = 'PROD' 
           AND CM_KEY_3 LIKE 'P%' 
           AND MAT_ID LIKE 'SES%' 
           AND WORK_DATE BETWEEN '20200406' AND '20200412'
         GROUP BY MAT_ID 
       ) SHP1 
     , ( 
        SELECT MAT_ID 
             , SUM(PLAN_QTY) PLAN_W1 
             , SUM(DECODE(PLAN_DAY, '20200406', 0, PLAN_QTY)) AS PLAN_W2 
          FROM ( 
                SELECT * 
                  FROM CWIPPLNDAY 
                 WHERE 1=1 
                   AND FACTORY = 'HMVA2' 
                   AND PLAN_DAY BETWEEN '20200406' AND '20200412'
                   AND IN_OUT_FLAG = 'OUT'
                   AND CLASS = 'ASSY'
               ) B
         GROUP BY MAT_ID 
       ) PLN 
 WHERE 1=1 
   AND MAT.MAT_ID = WIP.MAT_ID(+) 
   AND MAT.MAT_ID = SHP.MAT_ID(+) 
   AND MAT.MAT_ID = SHP1.MAT_ID(+) 
   AND MAT.MAT_ID = PLN.MAT_ID(+) 
   AND MAT.FACTORY = 'HMVA2' 
   AND MAT.MAT_ID LIKE '%' 
 GROUP BY MAT.MAT_GRP_1,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT.MAT_CMF_10,  ' ', MAT.MAT_ID,  ' ',  ' '
HAVING (NVL(SUM(TOTAL),0) + NVL(SUM(SHP_QTY),0)  + NVL(SUM(ASSY_WEEK),0) + NVL(SUM(PLAN_W1),0)) > 0     
 ORDER BY MAT.MAT_GRP_1,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT.MAT_CMF_10,  ' ', MAT.MAT_ID,  ' ',  ' ' 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
SELECT LANGUAGE_2 FROM RWEBFUNDEF WHERE FUNC_NAME = 'SEC1101'
-------------------------------------------------------------
SELECT * FROM RWEBUSRDEF WHERE FACTORY= :FACTORY ORDER BY USER_ID
-------------------------------------------------------------
SELECT * FROM RWEBUSRDEF WHERE FACTORY = :FACTORY AND USER_ID= :USER_ID
-------------------------------------------------------------
SELECT * FROM RWEBUSRDEF WHERE FACTORY = :FACTORY AND USER_ID= :USER_ID
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
SELECT A.FUNC_GRP_SEQ,A.SEC_GRP_ID,A.FUNC_GRP_ID,NVL(A.FUNC_NAME, ' ') FUNC_NAME, NVL(B.FUNC_DESC, ' ') FUNC_DESC, LANGUAGE_1, LANGUAGE_2, LANGUAGE_3
  FROM RWEBGRPFUN A, RWEBFUNDEF B
 WHERE A.FACTORY = :p_FACTORY
   AND A.SEC_GRP_ID = :p_SEC_GRP_ID
   AND A.FUNC_NAME=B.FUNC_NAME(+)
 ORDER BY A.FUNC_GRP_SEQ, A.FUNC_SEQ
-------------------------------------------------------------
