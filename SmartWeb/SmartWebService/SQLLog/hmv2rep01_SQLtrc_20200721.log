SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
SELECT MIN(SYS_DATE) AS START_DAY 
     , MAX(SYS_DATE) AS END_DAY 
     , PLAN_YEAR||DECODE(LENGTH(PLAN_WEEK), 1, '0'||PLAN_WEEK, PLAN_WEEK) AS WEEK
  FROM MWIPCALDEF 
 WHERE CALENDAR_ID = 'OTD'
   AND (PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) IN ( 
                                                SELECT WW
                                                  FROM (
                                                        SELECT WW
                                                             , ROW_NUMBER() OVER(ORDER BY WW) AS RNK
                                                          FROM (
                                                                SELECT DISTINCT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW
                                                                  FROM MWIPCALDEF
                                                                 WHERE CALENDAR_ID = 'OTD'
                                                                   AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') >= (
                                                                                                              SELECT MAX(PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) AS WW
                                                                                                                FROM MWIPCALDEF
                                                                                                               WHERE CALENDAR_ID = 'OTD'
                                                                                                                 AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') < (SELECT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW FROM MWIPCALDEF WHERE CALENDAR_ID = 'OTD' AND SYS_DATE = '20200720')
                                                                                                                 AND SYS_DATE >= TO_CHAR(TO_DATE('20200720', 'YYYYMMDD')-14, 'YYYYMMDD')
                                                                                                             )
                                                               ) 
                                                       )
                                                 WHERE RNK <= 7
                                               ) 
 GROUP BY PLAN_YEAR, PLAN_WEEK 
 ORDER BY PLAN_YEAR, PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE) AS START_DAY 
     , MAX(SYS_DATE) AS END_DAY 
     , PLAN_YEAR||DECODE(LENGTH(PLAN_WEEK), 1, '0'||PLAN_WEEK, PLAN_WEEK) AS WEEK
  FROM MWIPCALDEF 
 WHERE CALENDAR_ID = 'SE'
   AND (PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) IN ( 
                                                SELECT WW
                                                  FROM (
                                                        SELECT WW
                                                             , ROW_NUMBER() OVER(ORDER BY WW) AS RNK
                                                          FROM (
                                                                SELECT DISTINCT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW
                                                                  FROM MWIPCALDEF
                                                                 WHERE CALENDAR_ID = 'SE'
                                                                   AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') >= (
                                                                                                              SELECT MAX(PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) AS WW
                                                                                                                FROM MWIPCALDEF
                                                                                                               WHERE CALENDAR_ID = 'SE'
                                                                                                                 AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') < (SELECT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW FROM MWIPCALDEF WHERE CALENDAR_ID = 'SE' AND SYS_DATE = '20200720')
                                                                                                                 AND SYS_DATE >= TO_CHAR(TO_DATE('20200720', 'YYYYMMDD')-14, 'YYYYMMDD')
                                                                                                             )
                                                               ) 
                                                       )
                                                 WHERE RNK <= 7
                                               ) 
 GROUP BY PLAN_YEAR, PLAN_WEEK 
 ORDER BY PLAN_YEAR, PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT (SELECT DATA_1 FROM MGCMTBLDAT@RPTTOMES WHERE FACTORY = 'HMVA2' AND TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = MAT_GRP_1) AS CUSTOMER, MAT_GRP_9 AS MAJOR, MAT_GRP_10 AS PKG, MAT_GRP_6 AS LD_COUNT, MAT_CMF_11 AS PKG_CODE,  ' ', CONV_MAT_ID AS PRODUCT,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ' 
     , ROUND(SUM(PLAN)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS PLAN 
     , ROUND(SUM(SHP)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS SHP 
     , ROUND(SUM(DEF)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS DEF 
     , GUBUN 
     , ROUND(SUM(HMK3A)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS HMK3A 
     , ROUND(SUM(QC_GATE)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS QC_GATE 
     , ROUND(SUM(PVI)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS PVI 
     , ROUND(SUM(AVI)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS AVI 
     , ROUND(SUM(SIG)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS SIG 
     , ROUND(SUM(SBA)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS SBA 
     , ROUND(SUM(TIN)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS TIN 
     , ROUND(SUM(TRIM)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS TRIM 
     , ROUND(SUM(MK)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS MK 
     , ROUND(SUM(CURE)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS CURE 
     , ROUND(SUM(MOLD)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS MOLD 
     , ROUND(SUM(GATE)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS GATE 
     , ROUND(SUM(WB9)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS WB9 
     , ROUND(SUM(DA9)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS DA9 
     , ROUND(SUM(WB8)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS WB8 
     , ROUND(SUM(DA8)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS DA8 
     , ROUND(SUM(WB7)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS WB7 
     , ROUND(SUM(DA7)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS DA7 
     , ROUND(SUM(WB6)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS WB6 
     , ROUND(SUM(DA6)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS DA6 
     , ROUND(SUM(WB5)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS WB5 
     , ROUND(SUM(DA5)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS DA5 
     , ROUND(SUM(WB4)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS WB4 
     , ROUND(SUM(DA4)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS DA4 
     , ROUND(SUM(WB3)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS WB3 
     , ROUND(SUM(DA3)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS DA3 
     , ROUND(SUM(WB2)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS WB2 
     , ROUND(SUM(DA2)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS DA2 
     , ROUND(SUM(WB1)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS WB1 
     , ROUND(SUM(DA1)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS DA1 
     , ROUND(SUM(SP)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS SP 
     , ROUND(SUM(SAW)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS SAW 
     , ROUND(SUM(BG)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS BG 
     , ROUND(SUM(HMK2A)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS HMK2A 
     , ROUND(SUM(WIP_DEF)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS WIP_DEF 
  FROM (  
        SELECT MAT_GRP_1, MAT_GRP_9, MAT_GRP_10, MAT_GRP_6, MAT_CMF_11,  ' ', CONV_MAT_ID,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', GUBUN 
             , MAX(PLAN) AS PLAN 
             , MAX(SHP) AS SHP 
             , MAX(DEF) AS DEF 
             , SUM(DECODE(OPER_GRP_1, 'HMK3A', SUM_DEF, 0)) AS HMK3A 
             , SUM(DECODE(OPER_GRP_1, 'QC_GATE', SUM_DEF, 0)) AS QC_GATE 
             , SUM(DECODE(OPER_GRP_1, 'PVI', SUM_DEF, 0)) AS PVI 
             , SUM(DECODE(OPER_GRP_1, 'AVI', SUM_DEF, 0)) AS AVI 
             , SUM(DECODE(OPER_GRP_1, 'SIG', SUM_DEF, 0)) AS SIG 
             , SUM(DECODE(OPER_GRP_1, 'SBA', SUM_DEF, 0)) AS SBA 
             , SUM(DECODE(OPER_GRP_1, 'TIN', SUM_DEF, 0)) AS TIN 
             , SUM(DECODE(OPER_GRP_1, 'TRIM', SUM_DEF, 0)) AS TRIM 
             , SUM(DECODE(OPER_GRP_1, 'MK', SUM_DEF, 0)) AS MK 
             , SUM(DECODE(OPER_GRP_1, 'CURE', SUM_DEF, 0)) AS CURE 
             , SUM(DECODE(OPER_GRP_1, 'MOLD', SUM_DEF, 0)) AS MOLD 
             , SUM(DECODE(OPER_GRP_1, 'GATE', SUM_DEF, 0)) AS GATE 
             , SUM(DECODE(OPER_GRP_1, 'WB9', SUM_DEF, 0)) AS WB9 
             , SUM(DECODE(OPER_GRP_1, 'DA9', SUM_DEF, 0)) AS DA9 
             , SUM(DECODE(OPER_GRP_1, 'WB8', SUM_DEF, 0)) AS WB8 
             , SUM(DECODE(OPER_GRP_1, 'DA8', SUM_DEF, 0)) AS DA8 
             , SUM(DECODE(OPER_GRP_1, 'WB7', SUM_DEF, 0)) AS WB7 
             , SUM(DECODE(OPER_GRP_1, 'DA7', SUM_DEF, 0)) AS DA7 
             , SUM(DECODE(OPER_GRP_1, 'WB6', SUM_DEF, 0)) AS WB6 
             , SUM(DECODE(OPER_GRP_1, 'DA6', SUM_DEF, 0)) AS DA6 
             , SUM(DECODE(OPER_GRP_1, 'WB5', SUM_DEF, 0)) AS WB5 
             , SUM(DECODE(OPER_GRP_1, 'DA5', SUM_DEF, 0)) AS DA5 
             , SUM(DECODE(OPER_GRP_1, 'WB4', SUM_DEF, 0)) AS WB4 
             , SUM(DECODE(OPER_GRP_1, 'DA4', SUM_DEF, 0)) AS DA4 
             , SUM(DECODE(OPER_GRP_1, 'WB3', SUM_DEF, 0)) AS WB3 
             , SUM(DECODE(OPER_GRP_1, 'DA3', SUM_DEF, 0)) AS DA3 
             , SUM(DECODE(OPER_GRP_1, 'WB2', SUM_DEF, 0)) AS WB2 
             , SUM(DECODE(OPER_GRP_1, 'DA2', SUM_DEF, 0)) AS DA2 
             , SUM(DECODE(OPER_GRP_1, 'WB1', SUM_DEF, 0)) AS WB1 
             , SUM(DECODE(OPER_GRP_1, 'DA1', SUM_DEF, 0)) AS DA1 
             , SUM(DECODE(OPER_GRP_1, 'SP', SUM_DEF, 0)) AS SP 
             , SUM(DECODE(OPER_GRP_1, 'SAW', SUM_DEF, 0)) AS SAW 
             , SUM(DECODE(OPER_GRP_1, 'BG', SUM_DEF, 0)) AS BG 
             , SUM(DECODE(OPER_GRP_1, 'HMK2A',SUM_DEF, 0)) AS HMK2A 
             , MAX(WIP_TTL) AS WIP_TTL 
             , MAX(DEF) - MAX(WIP_TTL) AS WIP_DEF 
          FROM ( 
                SELECT MAT_GRP_1, MAT_GRP_9, MAT_GRP_10, MAT_GRP_6, MAT_CMF_11,  ' ', CONV_MAT_ID,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ' 
                     , OPER_GRP_1 
                     , DECODE(SEQ, 1, 'WIP', 2, '설비대수', 3, 'CAPA현황', 4, '당일 실적', 5, 'D0 잔량', 6, 'D1 잔량', 7, 'D2 잔량', 8, '당주 잔량', 9, '차주 잔량', 10, '월간 잔량') AS GUBUN 
                     , SUM(DECODE(SEQ, 1, 0, 2, 0, 3, 0, 4, 0, 5, D0_PLAN, 6, D1_PLAN, 7, D2_PLAN, 8, WEEK_PLAN, 9, WEEK2_PLAN, 10, MON_PLAN)) AS PLAN  
                     , SUM(DECODE(SEQ, 1, 0, 2, 0, 3, 0, 4, 0, 5, SHP_TODAY, 6, SHP_D1, 7, SHP_D2, 8, SHP_WEEK, 9, SHP2_WEEK, 10, SHP_MONTH)) AS SHP 
                     , SUM(DECODE(SEQ, 1, 0, 2, 0, 3, 0, 4, 0, 5, D0_DEF, 6, D1_DEF, 7, D2_DEF, 8, WEEK_DEF, 9, WEEK2_DEF, 10, MONTH_DEF)) AS DEF 
                     , SUM(DECODE(SEQ, 1, WIP_QTY, 2, RES_CNT, 3, RES_CAPA, 4, ASSY_END_QTY, 5, D0_SUM_QUANTITY, 6, D1_SUM_QUANTITY, 7, D2_SUM_QUANTITY, 8, WEEK_SUM_QUANTITY, 9, WEEK2_SUM_QUANTITY, 10, MONTH_SUM_QUANTITY)) AS SUM_DEF 
                     , MAX(DECODE(SEQ, 1, 0, 2, 0, 3, 0, 4, 0, WIP_TTL)) AS WIP_TTL 
                  FROM ( 
                        SELECT MAT_GRP_1, MAT_GRP_9, MAT_GRP_10, MAT_GRP_6, MAT_CMF_11,  ' ', CONV_MAT_ID,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', OPER_GRP_1 
                             , SUM(NVL(D0_PLAN,0)) AS D0_PLAN, SUM(NVL(SHP_TODAY,0)) AS SHP_TODAY, SUM(NVL(D0_DEF,0)) AS D0_DEF 
                             , SUM(NVL(D1_PLAN,0)) AS D1_PLAN, SUM(NVL(SHP_D1,0)) AS SHP_D1, SUM(NVL(D1_DEF,0)) AS D1_DEF 
                             , SUM(NVL(D2_PLAN,0)) AS D2_PLAN, SUM(NVL(SHP_D2,0)) AS SHP_D2, SUM(NVL(D2_DEF,0)) AS D2_DEF 
                             , SUM(NVL(WEEK_PLAN,0)) AS WEEK_PLAN, SUM(NVL(SHP_WEEK,0)) AS SHP_WEEK, SUM(NVL(WEEK_DEF,0)) AS WEEK_DEF 
                             , SUM(NVL(WEEK2_PLAN,0)) AS WEEK2_PLAN, SUM(NVL(SHP2_WEEK,0)) AS SHP2_WEEK, SUM(NVL(WEEK2_DEF,0)) AS WEEK2_DEF 
                             , SUM(NVL(MON_PLAN,0)) AS MON_PLAN, SUM(NVL(SHP_MONTH,0)) AS SHP_MONTH, SUM(NVL(MONTH_DEF,0)) AS MONTH_DEF 
                             , SUM(NVL(ASSY_END_QTY,0)) AS ASSY_END_QTY 
                             , SUM(NVL(WIP_QTY,0)) AS WIP_QTY 
                             , SUM(SUM(WIP_QTY)) OVER(PARTITION BY MAT_GRP_1, MAT_GRP_9, MAT_GRP_10, MAT_GRP_6, MAT_CMF_11,  ' ', CONV_MAT_ID,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ') AS WIP_TTL 
                             , SUM(RES_CNT) AS RES_CNT 
                             , SUM(RES_CAPA) AS RES_CAPA 
                             , SUM(NVL(D0_DEF-WIP_SUM_QUANTITY+WIP_QTY,0)) AS D0_SUM_QUANTITY 
                             , SUM(NVL(D1_DEF-WIP_SUM_QUANTITY+WIP_QTY,0)) AS D1_SUM_QUANTITY 
                             , SUM(NVL(D2_DEF-WIP_SUM_QUANTITY+WIP_QTY,0)) AS D2_SUM_QUANTITY 
                             , SUM(NVL(WEEK_DEF-WIP_SUM_QUANTITY+WIP_QTY,0)) AS WEEK_SUM_QUANTITY 
                             , SUM(NVL(WEEK2_DEF-WIP_SUM_QUANTITY+WIP_QTY,0)) AS WEEK2_SUM_QUANTITY 
                             , SUM(NVL(MONTH_DEF-WIP_SUM_QUANTITY+WIP_QTY,0)) AS MONTH_SUM_QUANTITY 
                          FROM ( 
                                SELECT MAT.MAT_GRP_1, MAT.MAT_GRP_2, MAT.MAT_GRP_4, MAT.MAT_GRP_5, MAT.MAT_GRP_6, MAT.MAT_GRP_7, MAT.MAT_GRP_8, MAT.MAT_GRP_9, MAT.MAT_GRP_10, MAT.MAT_CMF_10, MAT.MAT_CMF_7, MAT.MAT_CMF_8, MAT.MAT_CMF_11, MAT.MAT_ID, MAT.CONV_MAT_ID, MAT.OPER_GRP_1 
                                     , A.D0_PLAN, A.SHP_TODAY, A.D0_DEF 
                                     , A.D1_PLAN, A.SHP_D1, A.D1_DEF 
                                     , A.D2_PLAN, A.SHP_D2, A.D2_DEF 
                                     , A.WEEK_PLAN, A.SHP_WEEK, A.WEEK_DEF 
                                     , A.WEEK2_PLAN, A.SHP2_WEEK, A.WEEK2_DEF 
                                     , A.MON_PLAN, A.SHP_MONTH, A.MONTH_DEF 
                                     , A.D0_ORI_PLAN 
                                     , NVL(B.ASSY_END_QTY,0) AS ASSY_END_QTY 
                                     , MAX(NVL(B.ASSY_END_QTY,0)) OVER(PARTITION BY MAT.MAT_GRP_1, MAT.MAT_GRP_9, MAT.MAT_GRP_10, MAT.MAT_GRP_6, MAT.MAT_CMF_11,  ' ', CONV_MAT_ID,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ') AS CHK_ASSY_END_QTY 
                                     , NVL(WIP.QTY,0) AS WIP_QTY 
                                     , RES_CNT 
                                     , RES_CAPA 
                                     , SUM(NVL(WIP.QTY,0)) OVER(PARTITION BY A.MAT_ID ORDER BY MAT.MAT_ID, DECODE(MAT.OPER_GRP_1, 'HMK3A', 1, 'QC_GATE', 2, 'PVI', 3, 'AVI', 4, 'SIG', 5, 'SBA', 6, 'TIN', 7, 'TRIM', 8, 'MK', 9, 'CURE', 10, 'MOLD', 11, 'GATE', 12 
                                                                                                                                , 'WB9', 13, 'DA9', 14, 'WB8', 15, 'DA8', 16, 'WB7', 17, 'DA7', 18, 'WB6', 19, 'DA6', 20, 'WB5', 21, 'DA5', 22, 'WB4', 23, 'DA4', 24 
                                                                                                                                , 'WB3', 25, 'DA3', 26, 'WB2', 27, 'DA2', 28, 'WB1', 29, 'DA1', 30, 'SP', 31, 'SAW', 32, 'BG', 33, 'HMK2A',34, 35)) AS WIP_SUM_QUANTITY 
                                  FROM ( 
                                        SELECT MAT_GRP_1, MAT_GRP_2, MAT_GRP_4, MAT_GRP_5, MAT_GRP_6, MAT_GRP_7, MAT_GRP_8, MAT_GRP_9, MAT_GRP_10, MAT_CMF_10, MAT_CMF_7, MAT_CMF_8, MAT_CMF_11, MAT_ID, OPER_GRP_1 
                                             , CASE WHEN MAT_GRP_1 = 'SE' AND MAT_GRP_9 = 'MEMORY' THEN 'SEK_________-___' || SUBSTR(MAT_ID, -3) 
                                                    WHEN MAT_GRP_1 = 'HX' THEN MAT_CMF_10 
                                                    ELSE MAT_ID 
                                                END CONV_MAT_ID 
                                          FROM ( 
                                                SELECT * 
                                                  FROM (
                                                        SELECT A.* 
                                                          FROM MWIPMATDEF A
                                                         WHERE 1=1 
                                                           AND FACTORY = 'HMVA2' 
                                                           AND DELETE_FLAG = ' ' 
                                                           AND MAT_TYPE = 'FG' 
                                                           AND MAT_ID LIKE '%' 
                                                           AND MAT_GRP_10 NOT LIKE 'COB%' 
                                                       ) 
                                               ) 
                                             , ( 
                                                SELECT DECODE(LEVEL, 1, 'HMK3A', 2, 'QC_GATE', 3, 'PVI', 4, 'AVI', 5, 'SIG', 6, 'SBA', 7, 'TIN', 8, 'TRIM', 9, 'MK', 10, 'CURE', 11, 'MOLD', 12, 'GATE' 
                                                                   , 13, 'WB9', 14, 'DA9', 15, 'WB8', 16, 'DA8', 17, 'WB7', 18, 'DA7', 19, 'WB6', 20, 'DA6', 21, 'WB5', 22, 'DA5', 23, 'WB4', 24, 'DA4'
                                                                   , 25, 'WB3', 26, 'DA3', 27, 'WB2', 28, 'DA2', 29, 'WB1', 30, 'DA1', 31, 'SP', 32, 'SAW', 33, 'BG', 34, 'HMK2A' 
                                                             ) OPER_GRP_1 
                                                  FROM DUAL CONNECT BY LEVEL <= 34 
                                               ) 
                                       ) MAT 
                                     , ( 
                                        SELECT MAT.MAT_ID 
                                             , SUM(NVL(D0_PLAN, 0) + (NVL(WEEK1_TTL, 0) - NVL(SHP_WEEK_TTL, 0))) AS D0_PLAN 
                                             , SUM(NVL(D0_PLAN, 0)) AS D0_ORI_PLAN 
                                             , SUM(NVL(SHP_TODAY, 0)) AS SHP_TODAY 
                                             , SUM(NVL(D0_PLAN, 0) + (NVL(WEEK1_TTL, 0) - NVL(SHP_WEEK_TTL, 0)) - NVL(SHP_TODAY, 0)) AS D0_DEF 
                                             , SUM(NVL(D1_PLAN, 0)) AS D1_PLAN 
                                             , 0 AS SHP_D1 
                                             , SUM(NVL(D1_PLAN, 0) + NVL(D0_PLAN, 0) + (NVL(WEEK1_TTL, 0) - NVL(SHP_WEEK_TTL, 0)) - NVL(SHP_TODAY, 0)) AS D1_DEF 
                                             , SUM(NVL(D2_PLAN, 0)) AS D2_PLAN 
                                             , 0 AS SHP_D2 
                                             , SUM(NVL(D2_PLAN, 0) + NVL(D1_PLAN, 0) + NVL(D0_PLAN, 0) + (NVL(WEEK1_TTL, 0) - NVL(SHP_WEEK_TTL, 0)) - NVL(SHP_TODAY, 0)) AS D2_DEF 
                                             , SUM(NVL(WEEK1_PLAN, 0)) AS WEEK_PLAN 
                                             , SUM(NVL(SHP_WEEK, 0)) AS SHP_WEEK 
                                             , SUM(NVL(WEEK1_PLAN, 0) - NVL(SHP_WEEK, 0)) AS WEEK_DEF 
                                             , SUM(NVL(WEEK2_PLAN, 0)) AS WEEK2_PLAN 
                                             , 0 AS SHP2_WEEK 
                                             , SUM(NVL(WEEK2_PLAN, 0) + NVL(WEEK1_PLAN, 0) - NVL(SHP_WEEK, 0)) AS WEEK2_DEF 
                                             , SUM(NVL(CASE WHEN MAT.MAT_GRP_3 IN ('COB') THEN ROUND(MON.RESV_FIELD1/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0) 
                                                    ELSE MON.RESV_FIELD1 
                                                END,0)) MON_PLAN 
                                             , SUM(NVL(SHP_MONTH, 0)) AS SHP_MONTH 
                                             , SUM(NVL(CASE WHEN MAT.MAT_GRP_3 IN ('COB') THEN ROUND(NVL(MON.RESV_FIELD1,0)/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0)-NVL(SHP_MONTH, 0) 
                                                    ELSE NVL(MON.RESV_FIELD1, 0)-NVL(SHP_MONTH, 0) 
                                                END,0)) MONTH_DEF 
                                          FROM MWIPMATDEF MAT 
                                             , ( 
                                                SELECT FACTORY, MAT_ID 
                                                     , SUM(CASE WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 1 THEN D0_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 2 THEN D0_QTY + D1_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 3 THEN D0_QTY + D1_QTY + D2_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 4 THEN D0_QTY + D1_QTY + D2_QTY + D3_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 5 THEN D0_QTY + D1_QTY + D2_QTY + D3_QTY + D4_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 6 THEN D0_QTY + D1_QTY + D2_QTY + D3_QTY + D4_QTY + D5_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 3 THEN D0_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 4 THEN D0_QTY + D1_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 5 THEN D0_QTY + D1_QTY + D2_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 6 THEN D0_QTY + D1_QTY + D2_QTY + D3_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 7 THEN D0_QTY + D1_QTY + D2_QTY + D3_QTY + D4_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 1 THEN D0_QTY + D1_QTY + D2_QTY + D3_QTY + D4_QTY + D5_QTY 
                                                                ELSE 0 
                                                           END) AS WEEK1_TTL 
                                                     , SUM(W1_QTY) AS WEEK1_PLAN 
                                                     , SUM(W2_QTY) AS WEEK2_PLAN 
                                                     , SUM(NVL(W1_QTY,0) + NVL(W2_QTY,0)) AS WEEK_TTL 
                                                     , SUM(CASE WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 7 THEN D0_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 1 THEN D1_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 2 THEN D2_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 3 THEN D3_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 4 THEN D4_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 5 THEN D5_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 6 THEN D6_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 2 THEN D0_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 3 THEN D1_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 4 THEN D2_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 5 THEN D3_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 6 THEN D4_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 7 THEN D5_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 1 THEN D6_QTY 
                                                                ELSE 0 
                                                           END) AS D0_PLAN 
                                                     , SUM(CASE WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 7 THEN D1_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 1 THEN D2_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 2 THEN D3_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 3 THEN D4_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 4 THEN D5_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 5 THEN D6_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 6 THEN D7_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 2 THEN D1_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 3 THEN D2_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 4 THEN D3_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 5 THEN D4_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 6 THEN D5_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 7 THEN D6_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 1 THEN D7_QTY 
                                                                ELSE 0 
                                                           END) AS D1_PLAN 
                                                     , SUM(CASE WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 7 THEN D2_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 1 THEN D3_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 2 THEN D4_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 3 THEN D5_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 4 THEN D6_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 5 THEN D7_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 6 THEN D8_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 2 THEN D2_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 3 THEN D3_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 4 THEN D4_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 5 THEN D5_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 6 THEN D6_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 7 THEN D7_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 1 THEN D8_QTY 
                                                                ELSE 0 
                                                           END) AS D2_PLAN 
                                                  FROM ( 
                                                        SELECT FACTORY, MAT_ID, 'OTD' AS CALENDAR_ID 
                                                             , SUM(DECODE(PLAN_WEEK, '202030', D0_QTY, 0)) AS D0_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202030', D1_QTY, 0)) AS D1_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202030', D2_QTY, 0)) AS D2_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202030', D3_QTY, 0)) AS D3_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202030', D4_QTY, 0)) AS D4_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202030', D5_QTY, 0)) AS D5_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202030', D6_QTY, 0)) AS D6_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202031', D0_QTY, 0)) AS D7_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202031', D1_QTY, 0)) AS D8_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202031', D2_QTY, 0)) AS D9_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202031', D3_QTY, 0)) AS D10_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202031', D4_QTY, 0)) AS D11_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202031', D5_QTY, 0)) AS D12_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202031', D6_QTY, 0)) AS D13_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202030', WW_QTY, 0)) AS W1_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202031', WW_QTY, 0)) AS W2_QTY  
                                                          FROM RWIPPLNWEK  
                                                         WHERE 1=1  
                                                           AND FACTORY = 'HMVA2'  
                                                           AND GUBUN = '3'  
                                                           AND MAT_ID NOT LIKE 'SES%' 
                                                           AND PLAN_WEEK IN ('202030','202031') 
                                                         GROUP BY FACTORY, MAT_ID  
                                                         UNION ALL 
                                                        SELECT FACTORY, MAT_ID, 'SE' AS CALENDAR_ID  
                                                             , SUM(DECODE(PLAN_WEEK, '202030', D0_QTY, 0)) AS D0_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202030', D1_QTY, 0)) AS D1_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202030', D2_QTY, 0)) AS D2_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202030', D3_QTY, 0)) AS D3_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202030', D4_QTY, 0)) AS D4_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202030', D5_QTY, 0)) AS D5_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202030', D6_QTY, 0)) AS D6_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202031', D0_QTY, 0)) AS D7_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202031', D1_QTY, 0)) AS D8_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202031', D2_QTY, 0)) AS D9_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202031', D3_QTY, 0)) AS D10_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202031', D4_QTY, 0)) AS D11_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202031', D5_QTY, 0)) AS D12_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202031', D6_QTY, 0)) AS D13_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202030', WW_QTY, 0)) AS W1_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202031', WW_QTY, 0)) AS W2_QTY  
                                                          FROM RWIPPLNWEK  
                                                         WHERE 1=1  
                                                           AND FACTORY = 'HMVA2'  
                                                           AND GUBUN = '3'  
                                                           AND MAT_ID LIKE 'SES%' 
                                                           AND PLAN_WEEK IN ('202030','202031') 
                                                         GROUP BY FACTORY, MAT_ID  
                                                       )  
                                                 GROUP BY FACTORY, MAT_ID  
                                               ) PLN 
                                             , (  
                                                SELECT FACTORY,MAT_ID, RESV_FIELD1  
                                                  FROM (  
                                                        SELECT FACTORY, MAT_ID, SUM(RESV_FIELD1) AS RESV_FIELD1   
                                                          FROM (  
                                                                SELECT FACTORY, MAT_ID, SUM(TO_NUMBER(DECODE(RESV_FIELD1,' ',0,RESV_FIELD1))) AS RESV_FIELD1  
                                                                  FROM CWIPPLNMON  
                                                                 WHERE 1=1  
                                                                   AND FACTORY = 'HMVA2'  
                                                                   AND PLAN_MONTH = '202007' 
                                                                 GROUP BY FACTORY, MAT_ID 
                                                               )  
                                                         GROUP BY FACTORY, MAT_ID 
                                                       ) 
                                               ) MON 
                                             , (  
                                                SELECT MAT_ID  
                                                     , SUM(CASE WHEN SHP_QTY_1 > 0 AND WORK_DATE = '20200720' THEN NVL(SHP_QTY_1, 0) ELSE 0 END) AS SHP_TODAY  
                                                     , SUM(CASE WHEN SHP_QTY_1 > 0 AND MAT_ID LIKE 'SES%' AND WORK_DATE BETWEEN '20200720' AND '20200720' THEN NVL(SHP_QTY_1, 0)  
                                                                WHEN SHP_QTY_1 > 0 AND MAT_ID NOT LIKE 'SES%' AND WORK_DATE BETWEEN '20200718' AND '20200720' THEN NVL(SHP_QTY_1, 0) 
                                                                ELSE 0 END) AS SHP_WEEK  
                                                     , SUM(CASE WHEN SHP_QTY_1 > 0 AND MAT_ID LIKE 'SES%' AND WORK_DATE BETWEEN '20200720' AND '20200719' THEN NVL(SHP_QTY_1, 0)  
                                                                WHEN SHP_QTY_1 > 0 AND MAT_ID NOT LIKE 'SES%' AND WORK_DATE BETWEEN '20200718' AND '20200719' THEN NVL(SHP_QTY_1, 0)  
                                                                ELSE 0 END) AS SHP_WEEK_TTL  
                                                     , SUM(CASE WHEN WORK_DATE BETWEEN '20200701' AND '20200720' THEN NVL(SHP_QTY_1, 0) END) AS SHP_MONTH  
                                                  FROM VSUMWIPOUT 
                                                 WHERE 1=1  
                                                   AND FACTORY  = 'HMVA2'  
                                                   AND LOT_TYPE = 'W'  
                                                   AND CM_KEY_2 = 'PROD'  
                                                   AND CM_KEY_3 LIKE 'P%'
                                                   AND MAT_ID NOT LIKE 'HX%'  
                                                   AND WORK_DATE BETWEEN LEAST('20200701', '20200718', '20200720') AND '20200720' 
                                                 GROUP BY MAT_ID  
                                                 UNION ALL  
                                                SELECT MAT_ID  
                                                     , SUM(CASE WHEN SHP_QTY_1 > 0 AND WORK_DATE = '20200720' THEN NVL(SHP_QTY_1, 0) ELSE 0 END) AS SHP_TODAY  
                                                     , SUM(CASE WHEN SHP_QTY_1 > 0 AND WORK_DATE BETWEEN '20200718' AND '20200720' THEN NVL(SHP_QTY_1, 0) ELSE 0 END) AS SHP_WEEK  
                                                     , SUM(CASE WHEN SHP_QTY_1 > 0 AND WORK_DATE BETWEEN '20200718' AND '20200719' THEN NVL(SHP_QTY_1, 0) ELSE 0 END) AS SHP_WEEK_TTL  
                                                     , SUM(CASE WHEN WORK_DATE BETWEEN '20200701' AND '20200720' THEN NVL(SHP_QTY_1, 0) END) AS SHP_MONTH  
                                                  FROM VSUMWIPOUT_06 
                                                 WHERE 1=1  
                                                   AND FACTORY  = 'HMVA2'  
                                                   AND LOT_TYPE = 'W'  
                                                   AND CM_KEY_2 = 'PROD'  
                                                   AND CM_KEY_3 LIKE 'P%'
                                                   AND MAT_ID LIKE 'HX%'  
                                                   AND WORK_DATE BETWEEN '20200701' AND '20200720' 
                                                 GROUP BY MAT_ID 
                                               ) SHP 
                                         WHERE 1=1 
                                           AND MAT.FACTORY = 'HMVA2' 
                                           AND MAT.MAT_TYPE = 'FG' 
                                           AND MAT.DELETE_FLAG = ' ' 
                                           AND MAT.MAT_ID = PLN.MAT_ID(+) 
                                           AND MAT.MAT_ID = MON.MAT_ID(+) 
                                           AND MAT.MAT_ID = SHP.MAT_ID(+) 
                                         GROUP BY MAT.MAT_ID 
                                         ORDER BY MAT.MAT_ID 
                                       ) A 
                                     , ( 
                                        SELECT MAT_ID, OPER_GRP_1 
                                             , SUM(ASSY_END_QTY) AS ASSY_END_QTY 
                                          FROM ( 
                                                SELECT B.MAT_ID 
                                                     , CASE WHEN OPER IN ('A0000', 'A000N') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'HMK2A' 
                                                            WHEN OPER IN ('A0040') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'BG' 
                                                            WHEN OPER IN ('A0200', 'A0230') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'SAW' 
                                                            WHEN OPER IN ('A0400', 'A0401', 'A0333') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'DA1' 
                                                            WHEN OPER IN ('A0402') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'DA2' 
                                                            WHEN OPER IN ('A0403') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'DA3' 
                                                            WHEN OPER IN ('A0404') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'DA4' 
                                                            WHEN OPER IN ('A0405') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'DA5' 
                                                            WHEN OPER IN ('A0406') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'DA6' 
                                                            WHEN OPER IN ('A0407') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'DA7' 
                                                            WHEN OPER IN ('A0408') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'DA8' 
                                                            WHEN OPER IN ('A0409') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'DA9' 
                                                            WHEN OPER IN ('A0600','A0601') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'WB1' 
                                                            WHEN OPER IN ('A0602') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'WB2' 
                                                            WHEN OPER IN ('A0603') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'WB3' 
                                                            WHEN OPER IN ('A0604') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'WB4' 
                                                            WHEN OPER IN ('A0605') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'WB5' 
                                                            WHEN OPER IN ('A0606') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'WB6' 
                                                            WHEN OPER IN ('A0607') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'WB7' 
                                                            WHEN OPER IN ('A0608') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'WB8' 
                                                            WHEN OPER IN ('A0609') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'WB9' 
                                                            WHEN OPER IN ('A0800', 'A0801', 'A0802', 'A0803', 'A0804', 'A0805', 'A0806', 'A0807', 'A0808', 'A0809') AND MAT_GRP_5 IN ('-', 'Merge') THEN 'GATE' 
                                                            WHEN OPER IN ('A1000', 'A0910') THEN 'MOLD' 
                                                            WHEN OPER IN ('A1100') THEN 'CURE' 
                                                            WHEN OPER IN ('A1150', 'A1500') THEN 'MK' 
                                                            WHEN OPER IN ('A1200') THEN 'TRIM' 
                                                            WHEN OPER IN ('A1450') THEN 'TIN' 
                                                            WHEN OPER IN ('A1300') THEN 'SBA' 
                                                            WHEN OPER IN ('A1750', 'A1800', 'A1900', 'A1825') THEN 'SIG' 
                                                            WHEN OPER IN ('A2000') THEN 'AVI' 
                                                            WHEN OPER IN ('A2050') THEN 'PVI' 
                                                            WHEN OPER IN ('A2100') THEN 'QC_GATE' 
                                                            WHEN OPER IN ('AZ010') THEN 'HMK3A' 
                                                            ELSE ' ' 
                                                        END OPER_GRP_1 
                                                     , (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END) ASSY_END_QTY 
                                                  FROM ( 
                                                        SELECT FACTORY, MAT_ID, OPER, LOT_TYPE, WORK_DATE, CM_KEY_3 
                                                             , SUM(END_LOT) AS END_LOT 
                                                             , SUM(END_QTY_1) AS END_QTY_1 
                                                             , SUM(END_QTY_2) AS END_QTY_2 
                                                             , SUM(CASE WHEN SHIP_QTY_1 > 0 THEN SHIP_QTY_1 ELSE 0 END) AS SHIP_QTY_1 
                                                             , SUM(CASE WHEN SHIP_QTY_2 > 0 THEN SHIP_QTY_2 ELSE 0 END) AS SHIP_QTY_2 
                                                          FROM ( 
                                                                SELECT FACTORY, MAT_ID, OPER, LOT_TYPE, WORK_DATE, CM_KEY_3 
                                                                     , DECODE(SUBSTR(OPER,2,4),'0000',SUM(S1_OPER_IN_LOT+S2_OPER_IN_LOT+S3_OPER_IN_LOT),SUM(S1_END_LOT+S2_END_LOT+S3_END_LOT)) END_LOT 
                                                                     , DECODE(SUBSTR(OPER,2,4),'0000',SUM(S1_OPER_IN_QTY_1+S2_OPER_IN_QTY_1+S3_OPER_IN_QTY_1),SUM(S1_END_QTY_1+S2_END_QTY_1+S3_END_QTY_1+S1_END_RWK_QTY_1 + S2_END_RWK_QTY_1 + S3_END_RWK_QTY_1)) END_QTY_1 
                                                                     , DECODE(SUBSTR(OPER,2,4),'0000',SUM(S1_OPER_IN_QTY_2+S2_OPER_IN_QTY_2+S3_OPER_IN_QTY_2),SUM(S1_END_QTY_2+S2_END_QTY_2+S3_END_QTY_2+S1_END_RWK_QTY_2 + S2_END_RWK_QTY_2 + S3_END_RWK_QTY_2)) END_QTY_2 
                                                                     , 0 SHIP_QTY_1 
                                                                     , 0 SHIP_QTY_2 
                                                                  FROM RSUMWIPMOV 
                                                                 WHERE FACTORY = 'HMVA2' 
                                                                   AND OPER NOT IN ('AZ010') 
                                                                   AND MAT_ID NOT LIKE 'HX%' 
                                                                 GROUP BY FACTORY, MAT_ID, OPER, LOT_TYPE, WORK_DATE, CM_KEY_3 
                                                                 UNION ALL 
                                                                SELECT FACTORY, MAT_ID 
                                                                     , 'AZ010' AS OPER 
                                                                     , LOT_TYPE, WORK_DATE, CM_KEY_3 
                                                                     , 0 END_LOT 
                                                                     , 0 END_QTY_1 
                                                                     , 0 END_QTY_2 
                                                                     , SUM(SHP_QTY_1) SHIP_QTY_1 
                                                                     , SUM(SHP_QTY_2) SHIP_QTY_2 
                                                                  FROM VSUMWIPOUT 
                                                                 WHERE FACTORY = 'HMVA2' 
                                                                   AND MAT_ID NOT LIKE 'HX%' 
                                                                 GROUP BY FACTORY, MAT_ID, LOT_TYPE, WORK_DATE, CM_KEY_3 
                                                                 UNION ALL 
                                                                SELECT FACTORY, MAT_ID, OPER, LOT_TYPE, WORK_DATE, CM_KEY_3 
                                                                     , DECODE(SUBSTR(OPER,2,4),'0000',SUM(S1_OPER_IN_LOT+S2_OPER_IN_LOT+S3_OPER_IN_LOT),SUM(S1_END_LOT+S2_END_LOT+S3_END_LOT)) END_LOT 
                                                                     , DECODE(SUBSTR(OPER,2,4),'0000',SUM(S1_OPER_IN_QTY_1+S2_OPER_IN_QTY_1+S3_OPER_IN_QTY_1),SUM(S1_END_QTY_1+S2_END_QTY_1+S3_END_QTY_1+S1_END_RWK_QTY_1 + S2_END_RWK_QTY_1 + S3_END_RWK_QTY_1)) END_QTY_1 
                                                                     , DECODE(SUBSTR(OPER,2,4),'0000',SUM(S1_OPER_IN_QTY_2+S2_OPER_IN_QTY_2+S3_OPER_IN_QTY_2),SUM(S1_END_QTY_2+S2_END_QTY_2+S3_END_QTY_2+S1_END_RWK_QTY_2 + S2_END_RWK_QTY_2 + S3_END_RWK_QTY_2)) END_QTY_2 
                                                                     , 0 SHIP_QTY_1 
                                                                     , 0 SHIP_QTY_2 
                                                                  FROM CSUMWIPMOV 
                                                                 WHERE FACTORY = 'HMVA2' 
                                                                   AND OPER NOT IN ('AZ010') 
                                                                   AND MAT_ID LIKE 'HX%' 
                                                                 GROUP BY FACTORY, MAT_ID, OPER, LOT_TYPE, WORK_DATE, CM_KEY_3 
                                                                 UNION ALL 
                                                                SELECT FACTORY, MAT_ID 
                                                                     , 'AZ010' AS OPER 
                                                                     , LOT_TYPE, WORK_DATE, CM_KEY_3 
                                                                     , 0 END_LOT 
                                                                     , 0 END_QTY_1 
                                                                     , 0 END_QTY_2 
                                                                     , SUM(SHP_QTY_1) SHIP_QTY_1 
                                                                     , SUM(SHP_QTY_2) SHIP_QTY_2 
                                                                  FROM VSUMWIPOUT_06 
                                                                 WHERE FACTORY = 'HMVA2' 
                                                                   AND MAT_ID LIKE 'HX%' 
                                                                 GROUP BY FACTORY, MAT_ID, LOT_TYPE, WORK_DATE, CM_KEY_3 
                                                               ) 
                                                         GROUP BY FACTORY, MAT_ID, OPER, LOT_TYPE, WORK_DATE, CM_KEY_3 
                                                       ) A 
                                                     , MWIPMATDEF B 
                                                 WHERE 1=1 
                                                   AND A.FACTORY  = 'HMVA2' 
                                                   AND A.FACTORY = B.FACTORY 
                                                   AND A.MAT_ID = B.MAT_ID 
                                                   AND B.MAT_TYPE = 'FG' 
                                                   AND A.MAT_ID LIKE '%' 
                                                   AND A.CM_KEY_3 LIKE 'P%'
                                                   AND A.OPER NOT IN ('00001','00002') 
                                                   AND A.WORK_DATE = '20200720' 
                                                 ) 
                                         GROUP BY MAT_ID, OPER_GRP_1 
                                        HAVING SUM(ASSY_END_QTY) > 0 
                                       ) B 
                                     , ( 
                                        SELECT MAT_ID, OPER_GRP_1, SUM(NVL(QTY,0)) QTY 
                                          FROM (  
                                                SELECT MAT_ID 
                                                     , QTY 
                                                     , CASE WHEN OPER_GRP_8 = 'HMK2A' THEN 'HMK2A' 
                                                            WHEN OPER_GRP_8 = 'B/G' THEN 'BG' 
                                                            WHEN OPER_GRP_8 = 'SAW' THEN 'SAW' 
                                                            WHEN OPER_GRP_8 = 'S/P' THEN 'SP' 
                                                            WHEN OPER_GRP_8 IN ('D/A1', 'D/A1 CURE') THEN 'DA1' 
                                                            WHEN OPER_GRP_8 IN ('D/A2', 'D/A2 CURE') THEN 'DA2' 
                                                            WHEN OPER_GRP_8 IN ('D/A3', 'D/A3 CURE') THEN 'DA3' 
                                                            WHEN OPER_GRP_8 IN ('D/A4', 'D/A4 CURE') THEN 'DA4' 
                                                            WHEN OPER_GRP_8 IN ('D/A5', 'D/A5 CURE') THEN 'DA5' 
                                                            WHEN OPER_GRP_8 IN ('D/A6', 'D/A6 CURE') THEN 'DA6' 
                                                            WHEN OPER_GRP_8 IN ('D/A7', 'D/A7 CURE') THEN 'DA7' 
                                                            WHEN OPER_GRP_8 IN ('D/A8', 'D/A8 CURE') THEN 'DA8' 
                                                            WHEN OPER_GRP_8 IN ('D/A9', 'D/A9 CURE') THEN 'DA9' 
                                                            WHEN OPER_GRP_8 = 'W/B1' THEN 'WB1' 
                                                            WHEN OPER_GRP_8 = 'W/B2' THEN 'WB2' 
                                                            WHEN OPER_GRP_8 = 'W/B3' THEN 'WB3' 
                                                            WHEN OPER_GRP_8 = 'W/B4' THEN 'WB4' 
                                                            WHEN OPER_GRP_8 = 'W/B5' THEN 'WB5' 
                                                            WHEN OPER_GRP_8 = 'W/B6' THEN 'WB6' 
                                                            WHEN OPER_GRP_8 = 'W/B7' THEN 'WB7' 
                                                            WHEN OPER_GRP_8 = 'W/B8' THEN 'WB8' 
                                                            WHEN OPER_GRP_8 = 'W/B9' THEN 'WB9' 
                                                            WHEN OPER_GRP_8 = 'GATE' AND MAT_GRP_5 = '-' THEN 'GATE' 
                                                            WHEN OPER_GRP_8 = 'GATE' AND MAT_GRP_1 = 'SE' AND MAT_GRP_5 = 'Merge' THEN 'GATE' 
                                                            WHEN OPER_GRP_8 = 'GATE' AND MAT_GRP_1 = 'HX' THEN 'GATE' 
                                                            WHEN OPER_GRP_8 = 'GATE' AND MAT_GRP_1 NOT IN ('SE','HX') AND SUBSTR(MAT_GRP_4,-1) = SUBSTR(OPER, -1) THEN 'GATE' 
                                                            WHEN OPER_GRP_8 = 'MOLD' THEN 'MOLD' 
                                                            WHEN OPER_GRP_8 = 'CURE' THEN 'CURE' 
                                                            WHEN OPER_GRP_8 = 'M/K' THEN 'MK' 
                                                            WHEN OPER_GRP_8 = 'TRIM' THEN 'TRIM' 
                                                            WHEN OPER_GRP_8 = 'TIN' THEN 'TIN' 
                                                            WHEN OPER_GRP_8 = 'S/B/A' THEN 'SBA' 
                                                            WHEN OPER_GRP_8 = 'SIG' THEN 'SIG' 
                                                            WHEN OPER_GRP_8 = 'AVI' THEN 'AVI' 
                                                            WHEN OPER_GRP_8 = 'V/I' THEN 'PVI' 
                                                            WHEN OPER_GRP_8 = 'QC GATE' THEN 'QC_GATE' 
                                                            WHEN OPER_GRP_8 = 'HMK3A' THEN 'HMK3A' 
                                                            ELSE ' ' 
                                                        END OPER_GRP_1 
                                                  FROM ( 
                                                        SELECT MAT_ID, OPER, OPER_GRP_8, MAT_GRP_1, MAT_GRP_4, MAT_GRP_5, MAT_GRP_10 
                                                             , CASE WHEN MAT_GRP_1 = 'HX' AND HX_COMP_MIN IS NOT NULL
                                                                         THEN (CASE WHEN HX_COMP_MIN <> HX_COMP_MAX AND OPER > HX_COMP_MIN AND OPER <= HX_COMP_MAX THEN QTY_1 / NVL(COMP_CNT / 2,1)
                                                                         WHEN OPER <= HX_COMP_MAX THEN QTY_1 / NVL(COMP_CNT,1)
                                                                         ELSE QTY_1 END)
                                                                    WHEN OPER <= 'A0395' THEN QTY_1 / NVL(COMP_CNT,1) 
                                                                    ELSE QTY_1 
                                                               END QTY 
                                                          FROM ( 
                                                                SELECT A.MAT_ID, B.OPER, B.OPER_GRP_8, C.MAT_GRP_1, C.MAT_GRP_4, C.MAT_GRP_5, C.MAT_GRP_10 
                                                                     , CASE WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN CASE WHEN MAT_GRP_5 IN ('1st','Merge') OR MAT_GRP_5 LIKE 'Middle%' THEN QTY_1 ELSE 0 END 
                                                                            WHEN MAT_GRP_3 IN ('COB', 'BGN') THEN ROUND(QTY_1/TO_NUMBER(DECODE(MAT_CMF_13, ' ', 1, '-', 1, MAT_CMF_13)),0) 
                                                                            ELSE QTY_1 
                                                                       END AS QTY_1 
                                                                     , COMP_CNT  
                                                                     , HX_COMP_MIN, HX_COMP_MAX 
                                                                  FROM RWIPLOTSTS_BOH A   
                                                                     , MWIPOPRDEF B   
                                                                     , VWIPMATDEF C 
                                                                 WHERE 1 = 1  
                                                                   AND A.CUTOFF_DT = '2020072022' 
                                                                   AND A.FACTORY = B.FACTORY 
                                                                   AND A.FACTORY = C.FACTORY 
                                                                   AND A.OPER = B.OPER 
                                                                   AND A.MAT_ID = C.MAT_ID 
                                                                   AND A.FACTORY = 'HMVA2'   
                                                                   AND A.LOT_TYPE = 'W'  
                                                                   AND A.LOT_CMF_5 LIKE 'P%'
                                                                   AND A.LOT_DEL_FLAG = ' '  
                                                                   AND C.MAT_GRP_2 <> '-' 
                                                                   AND C.DELETE_FLAG = ' '  
                                                               ) 
                                                       ) 
                                               ) 
                                         WHERE 1=1 
                                           AND OPER_GRP_1 <> ' ' 
                                         GROUP BY MAT_ID, OPER_GRP_1 
                                        HAVING SUM(NVL(QTY,0)) > 0 
                                       ) WIP 
                                     , ( 
                                        SELECT A.RES_STS_2 AS MAT_ID 
                                             , A.OPER_GRP_1 
                                             , SUM(A.RES_CNT) AS RES_CNT 
                                             , SUM(TRUNC(NVL(NVL(B.UPEH,0) * 24 * A.PERCENT * A.RES_CNT, 0))) AS RES_CAPA 
                                          FROM ( 
                                                SELECT FACTORY, RES_STS_2, RES_STS_8 AS OPER, RES_GRP_6 AS RES_MODEL, RES_GRP_7 AS UPEH_GRP, COUNT(RES_ID) AS RES_CNT 
                                                     , CASE WHEN RES_STS_8 LIKE 'A06%' THEN 0.71
                                                            WHEN RES_STS_8 LIKE 'A04%' THEN 0.68
                                                            WHEN RES_STS_8 = 'A0333' THEN 0.68
                                                            ELSE 0.7
                                                       END PERCENT 
                                                     , CASE WHEN RES_STS_8 IN ('A0040') THEN 'BG' 
                                                            WHEN RES_STS_8 IN ('A0200', 'A0230') THEN 'SAW' 
                                                            WHEN RES_STS_8 IN ('A0400', 'A0401', 'A0333') THEN 'DA1' 
                                                            WHEN RES_STS_8 IN ('A0402') THEN 'DA2' 
                                                            WHEN RES_STS_8 IN ('A0403') THEN 'DA3' 
                                                            WHEN RES_STS_8 IN ('A0404') THEN 'DA4' 
                                                            WHEN RES_STS_8 IN ('A0405') THEN 'DA5' 
                                                            WHEN RES_STS_8 IN ('A0406') THEN 'DA6' 
                                                            WHEN RES_STS_8 IN ('A0407') THEN 'DA7' 
                                                            WHEN RES_STS_8 IN ('A0408') THEN 'DA8' 
                                                            WHEN RES_STS_8 IN ('A0409') THEN 'DA9' 
                                                            WHEN RES_STS_8 IN ('A0600','A0601') THEN 'WB1' 
                                                            WHEN RES_STS_8 IN ('A0602') THEN 'WB2' 
                                                            WHEN RES_STS_8 IN ('A0603') THEN 'WB3' 
                                                            WHEN RES_STS_8 IN ('A0604') THEN 'WB4' 
                                                            WHEN RES_STS_8 IN ('A0605') THEN 'WB5' 
                                                            WHEN RES_STS_8 IN ('A0606') THEN 'WB6' 
                                                            WHEN RES_STS_8 IN ('A0607') THEN 'WB7' 
                                                            WHEN RES_STS_8 IN ('A0608') THEN 'WB8' 
                                                            WHEN RES_STS_8 IN ('A0609') THEN 'WB9' 
                                                            WHEN RES_STS_8 IN ('A0800', 'A0801', 'A0802', 'A0803', 'A0804', 'A0805', 'A0806', 'A0807', 'A0808', 'A0809') THEN 'GATE' 
                                                            WHEN RES_STS_8 IN ('A1000', 'A0910') THEN 'MOLD' 
                                                            WHEN RES_STS_8 IN ('A1100') THEN 'CURE' 
                                                            WHEN RES_STS_8 IN ('A1150', 'A1500') THEN 'MK' 
                                                            WHEN RES_STS_8 IN ('A1200') THEN 'TRIM' 
                                                            WHEN RES_STS_8 IN ('A1450') THEN 'TIN' 
                                                            WHEN RES_STS_8 IN ('A1300') THEN 'SBA' 
                                                            WHEN RES_STS_8 IN ('A1750', 'A1800', 'A1900', 'A1825') THEN 'SIG' 
                                                            WHEN RES_STS_8 IN ('A2000') THEN 'AVI' 
                                                            WHEN RES_STS_8 IN ('A2050') THEN 'PVI' 
                                                            WHEN RES_STS_8 IN ('A2100') THEN 'QC_GATE' 
                                                            ELSE ' ' 
                                                       END OPER_GRP_1 
                                                  FROM MRASRESDEF_BOH 
                                                 WHERE 1 = 1  
                                                   AND CUTOFF_DT = '2020072022' 
                                                   AND FACTORY  = 'HMVA2' 
                                                   AND RES_CMF_9 = 'Y' 
                                                   AND RES_CMF_7 = 'Y' 
                                                   AND DELETE_FLAG = ' ' 
                                                   AND RES_TYPE='EQUIPMENT' 
                                                   AND (RES_STS_1 NOT IN ('C200', 'B199') OR RES_UP_DOWN_FLAG = 'U') 
                                                 GROUP BY FACTORY,RES_STS_2,RES_STS_8,RES_GRP_6,RES_GRP_7  
                                               ) A 
                                             , CRASUPHDEF B 
                                         WHERE 1=1 
                                           AND A.FACTORY = B.FACTORY(+) 
                                           AND A.OPER = B.OPER(+) 
                                           AND A.RES_MODEL = B.RES_MODEL(+) 
                                           AND A.UPEH_GRP = B.UPEH_GRP(+) 
                                           AND A.RES_STS_2 = B.MAT_ID(+) 
                                           AND A.FACTORY  = 'HMVA2' 
                                           AND A.OPER NOT IN ('00001','00002') 
                                           AND A.OPER_GRP_1 <> ' ' 
                                         GROUP BY A.RES_STS_2, A.OPER_GRP_1 
                                       ) RES 
                                 WHERE 1=1 
                                   AND MAT.MAT_ID = A.MAT_ID(+) 
                                   AND MAT.MAT_ID = B.MAT_ID(+) 
                                   AND MAT.MAT_ID = WIP.MAT_ID(+) 
                                   AND MAT.MAT_ID = RES.MAT_ID(+) 
                                   AND MAT.OPER_GRP_1 = B.OPER_GRP_1(+) 
                                   AND MAT.OPER_GRP_1 = WIP.OPER_GRP_1(+) 
                                   AND MAT.OPER_GRP_1 = RES.OPER_GRP_1(+) 
                               ) 
                         GROUP BY MAT_GRP_1, MAT_GRP_9, MAT_GRP_10, MAT_GRP_6, MAT_CMF_11,  ' ', CONV_MAT_ID,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', OPER_GRP_1 
                        HAVING ( 
                                SUM(NVL(D0_ORI_PLAN,0))+SUM(NVL(D1_PLAN,0))+SUM(NVL(D2_PLAN,0))+SUM(NVL(WEEK_PLAN,0))+SUM(NVL(WEEK2_PLAN,0))+SUM(NVL(MON_PLAN,0))+SUM(NVL(WIP_QTY,0)) 
                              + SUM(NVL(D0_PLAN,0))+SUM(NVL(SHP_WEEK,0))+SUM(NVL(SHP_MONTH,0))+SUM(NVL(ASSY_END_QTY,0)) 
                               ) > 0 
                      ) 
                    , (SELECT LEVEL AS SEQ FROM DUAL CONNECT BY LEVEL <= 10) 
                 GROUP BY MAT_GRP_1, MAT_GRP_9, MAT_GRP_10, MAT_GRP_6, MAT_CMF_11,  ' ', CONV_MAT_ID,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', OPER_GRP_1, DECODE(SEQ, 1, 'WIP', 2, '설비대수', 3, 'CAPA현황', 4, '당일 실적', 5, 'D0 잔량', 6, 'D1 잔량', 7, 'D2 잔량', 8, '당주 잔량', 9, '차주 잔량', 10, '월간 잔량') 
               ) 
         GROUP BY  MAT_GRP_1, MAT_GRP_9, MAT_GRP_10, MAT_GRP_6, MAT_CMF_11,  ' ', CONV_MAT_ID,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', GUBUN 
       ) A 
 WHERE 1=1 
 GROUP BY MAT_GRP_1, MAT_GRP_9, MAT_GRP_10, MAT_GRP_6, MAT_CMF_11,  ' ', CONV_MAT_ID,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', GUBUN 
 ORDER BY DECODE(MAT_GRP_1, 'SE', 1, 'HX', 2, 'IM', 3, 'FC', 4, 'IG', 5, 6), CUSTOMER, MAJOR, PKG, LD_COUNT, PKG_CODE,  ' ', PRODUCT,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', DECODE(GUBUN, 'WIP', 1, '설비대수', 2, 'CAPA현황', 3, '당일 실적', 4, 'D0 잔량', 5, 'D1 잔량', 6, 'D2 잔량', 7, '당주 잔량', 8, '차주 잔량', 9, '월간 잔량', 10) 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT (SELECT DATA_1 FROM MGCMTBLDAT@RPTTOMES WHERE FACTORY = 'HMVA2' AND TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = MAT_GRP_1) AS CUSTOMER, MAT_GRP_9 AS MAJOR, MAT_GRP_10 AS PKG, MAT_GRP_6 AS LD_COUNT, MAT_CMF_11 AS PKG_CODE,  ' ', CONV_MAT_ID AS PRODUCT,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ' 
     , MAX(DECODE(OPER_GRP_1, 'HMK3A', 'T', '', 'F', 'F')) AS HMK3A 
     , MAX(DECODE(OPER_GRP_1, 'QC_GATE', 'T', '', 'F', 'F')) AS QC_GATE 
     , MAX(DECODE(OPER_GRP_1, 'PVI', 'T', '', 'F', 'F')) AS PVI 
     , MAX(DECODE(OPER_GRP_1, 'AVI', 'T', '', 'F', 'F')) AS AVI 
     , MAX(DECODE(OPER_GRP_1, 'SIG', 'T', '', 'F', 'F')) AS SIG 
     , MAX(DECODE(OPER_GRP_1, 'SBA', 'T', '', 'F', 'F')) AS SBA 
     , MAX(DECODE(OPER_GRP_1, 'TIN', 'T', '', 'F', 'F')) AS TIN 
     , MAX(DECODE(OPER_GRP_1, 'TRIM', 'T', '', 'F', 'F')) AS TRIM 
     , MAX(DECODE(OPER_GRP_1, 'MK', 'T', '', 'F', 'F')) AS MK 
     , MAX(DECODE(OPER_GRP_1, 'CURE', 'T', '', 'F', 'F')) AS CURE 
     , MAX(DECODE(OPER_GRP_1, 'MOLD', 'T', '', 'F', 'F')) AS MOLD 
     , MAX(DECODE(OPER_GRP_1, 'GATE', 'T', '', 'F', 'F')) AS GATE 
     , MAX(DECODE(OPER_GRP_1, 'WB9', 'T', '', 'F', 'F')) AS WB9 
     , MAX(DECODE(OPER_GRP_1, 'DA9', 'T', '', 'F', 'F')) AS DA9 
     , MAX(DECODE(OPER_GRP_1, 'WB8', 'T', '', 'F', 'F')) AS WB8 
     , MAX(DECODE(OPER_GRP_1, 'DA8', 'T', '', 'F', 'F')) AS DA8 
     , MAX(DECODE(OPER_GRP_1, 'WB7', 'T', '', 'F', 'F')) AS WB7 
     , MAX(DECODE(OPER_GRP_1, 'DA7', 'T', '', 'F', 'F')) AS DA7 
     , MAX(DECODE(OPER_GRP_1, 'WB6', 'T', '', 'F', 'F')) AS WB6 
     , MAX(DECODE(OPER_GRP_1, 'DA6', 'T', '', 'F', 'F')) AS DA6 
     , MAX(DECODE(OPER_GRP_1, 'WB5', 'T', '', 'F', 'F')) AS WB5 
     , MAX(DECODE(OPER_GRP_1, 'DA5', 'T', '', 'F', 'F')) AS DA5 
     , MAX(DECODE(OPER_GRP_1, 'WB4', 'T', '', 'F', 'F')) AS WB4 
     , MAX(DECODE(OPER_GRP_1, 'DA4', 'T', '', 'F', 'F')) AS DA4 
     , MAX(DECODE(OPER_GRP_1, 'WB3', 'T', '', 'F', 'F')) AS WB3 
     , MAX(DECODE(OPER_GRP_1, 'DA3', 'T', '', 'F', 'F')) AS DA3  
     , MAX(DECODE(OPER_GRP_1, 'WB2', 'T', '', 'F', 'F')) AS WB2 
     , MAX(DECODE(OPER_GRP_1, 'DA2', 'T', '', 'F', 'F')) AS DA2 
     , MAX(DECODE(OPER_GRP_1, 'WB1', 'T', '', 'F', 'F')) AS WB1 
     , MAX(DECODE(OPER_GRP_1, 'DA1', 'T', '', 'F', 'F')) AS DA1 
     , MAX(DECODE(OPER_GRP_1, 'SP', 'T', '', 'F', 'F')) AS SP 
     , MAX(DECODE(OPER_GRP_1, 'SAW', 'T', '', 'F', 'F')) AS SAW 
     , MAX(DECODE(OPER_GRP_1, 'BG', 'T', '', 'F', 'F')) AS BG 
     , MAX(DECODE(OPER_GRP_1, 'HMK2A','T', '', 'F', 'F')) AS HMK2A 
  FROM ( 
        SELECT MAT.FACTORY, MAT.MAT_GRP_1, MAT.MAT_GRP_9, MAT.MAT_GRP_10, MAT.MAT_GRP_6, MAT.MAT_CMF_11,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT.MAT_ID, MAT.DELETE_FLAG 
             , CASE WHEN MAT.MAT_GRP_1 = 'SE' AND MAT.MAT_GRP_9 = 'MEMORY' THEN 'SEK_________-___' || SUBSTR(MAT.MAT_ID, -3) 
                                                                    WHEN MAT.MAT_GRP_1 = 'HX' THEN MAT.MAT_CMF_10 
                                                                    ELSE MAT_ID 
                                                               END CONV_MAT_ID 
          FROM MWIPMATDEF MAT 
       ) MAT 
     , ( 
        SELECT A.MAT_ID 
                     , CASE WHEN B.OPER IN ('A0400', 'A0401', 'A0333') THEN 'DA1' 
                            WHEN B.OPER IN ('A0402') THEN 'DA2' 
                            WHEN B.OPER IN ('A0403') THEN 'DA3' 
                            WHEN B.OPER IN ('A0404') THEN 'DA4' 
                            WHEN B.OPER IN ('A0405') THEN 'DA5' 
                            WHEN B.OPER IN ('A0406') THEN 'DA6' 
                            WHEN B.OPER IN ('A0407') THEN 'DA7' 
                            WHEN B.OPER IN ('A0408') THEN 'DA8' 
                            WHEN B.OPER IN ('A0409') THEN 'DA9' 
                            WHEN B.OPER IN ('A0600', 'A0601') THEN 'WB1' 
                            WHEN B.OPER IN ('A0602') THEN 'WB2' 
                            WHEN B.OPER IN ('A0603') THEN 'WB3' 
                            WHEN B.OPER IN ('A0604') THEN 'WB4' 
                            WHEN B.OPER IN ('A0605') THEN 'WB5' 
                            WHEN B.OPER IN ('A0606') THEN 'WB6' 
                            WHEN B.OPER IN ('A0607') THEN 'WB7' 
                            WHEN B.OPER IN ('A0608') THEN 'WB8' 
                            WHEN B.OPER IN ('A0609') THEN 'WB9' 
                            ELSE ' ' 
                        END OPER_GRP_1 
          FROM MWIPMATDEF A 
             , MWIPFLWOPR@RPTTOMES B 
         WHERE 1=1 
           AND A.FACTORY = B.FACTORY 
           AND A.FIRST_FLOW = B.FLOW 
           AND A.FACTORY = 'HMVA2' 
           AND A.DELETE_FLAG = ' ' 
           AND A.MAT_TYPE = 'FG' 
           AND A.MAT_GRP_5 IN ('-', 'Merge') 
           AND A.MAT_ID LIKE '%' 
       ) A 
 WHERE 1=1 
   AND MAT.FACTORY = 'HMVA2' 
   AND MAT.DELETE_FLAG = ' ' 
   AND MAT.MAT_ID = A.MAT_ID  
 GROUP BY MAT.MAT_GRP_1, MAT.MAT_GRP_9, MAT.MAT_GRP_10, MAT.MAT_GRP_6, MAT.MAT_CMF_11,  ' ', CONV_MAT_ID,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ' 
 ORDER BY DECODE(MAT_GRP_1, 'SE', 1, 'HX', 2, 'IM', 3, 'FC', 4, 'IG', 5, 6), CUSTOMER, MAJOR, PKG, LD_COUNT, PKG_CODE,  ' ', PRODUCT,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ' 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
SELECT A.MAT_TYPE, A.MAT_ID, A.MAT_DESC, A.UNIT_1
     , SUM(B.INV_QTY) AS INV_QTY
     , SUM(B.INV_L_QTY) AS INV_L_QTY
     , SUM(E.WIK_WIP) AS WIK_WIP 
     , SUM(C.SMT_BEFORE) AS SMT_BEFORE 
     , SUM(C.SMT_AFTER) AS SMT_AFTER 
     , SUM(NVL(B.INV_QTY,0)) + SUM(NVL(B.INV_L_QTY,0)) + SUM(NVL(C.QTY_TTL,0)) + SUM(NVL(E.WIK_WIP,0)) AS TTL
     , SUM(B.QTY_1004) AS QTY_1004 
     , SUM(D.ORDER_QTY) AS ORDER_QTY
     , SUM(C.GRADE_A) AS GRADE_A
     , SUM(C.GRADE_B) AS GRADE_B
     , SUM(C.IN_QTY) AS IN_QTY
     , SUM(C.LOT_TTL) AS LOT_TTL
  FROM MWIPMATDEF A 
     , ( 
        SELECT MAT_ID 
             , SUM(INV_QTY) AS INV_QTY 
             , SUM(INV_L_QTY) AS INV_L_QTY 
             , SUM(QTY_1004) AS QTY_1004 
          FROM ( 
                SELECT MAT_ID 
                     , SUM(DECODE(STORAGE_LOCATION, '1000', QUANTITY, '1002', QUANTITY, '1003', QUANTITY, 0)) AS INV_QTY 
                     , SUM(DECODE(STORAGE_LOCATION, '1001', QUANTITY, 0)) AS INV_L_QTY 
                     , SUM(DECODE(STORAGE_LOCATION, '1004', QUANTITY, 0)) AS QTY_1004 
                  FROM CWMSLOTSTS@RPTTOMES 
                 WHERE 1=1 
                   AND QUANTITY> 0 
                   AND STORAGE_LOCATION IN ('1000', '1001', '1002', '1003', '1004') 
                 GROUP BY MAT_ID 
                 UNION ALL 
                SELECT MAT_ID, 0 AS INV_QTY, SUM(QTY_1) AS INV_L_QTY, 0 AS QTY_1004 
                  FROM CWIPMATSLP@RPTTOMES 
                 WHERE 1=1 
                   AND RECV_FLAG = ' ' 
                   AND IN_TIME BETWEEN '20200719000000' AND '20200721235959' 
                 GROUP BY MAT_ID 
               ) 
         GROUP BY MAT_ID 
       ) B 
     , ( 
        SELECT MAT_ID
             , SUM(CASE WHEN A.LOT_CMF_9 = 'A' AND B.LOT_ID IS NULL THEN 1 ELSE 0 END) AS GRADE_A
             , SUM(CASE WHEN A.LOT_CMF_9 = 'B' AND B.LOT_ID IS NULL THEN 1 ELSE 0 END) AS GRADE_B
             , SUM(CASE WHEN B.LOT_ID IS NOT NULL THEN 1 ELSE 0 END) AS IN_QTY
             , SUM(CASE WHEN OPER LIKE 'M%' AND OPER <= 'M0330' THEN QTY_1 ELSE 0 END) AS SMT_BEFORE 
             , SUM(CASE WHEN OPER LIKE 'A%' OR OPER > 'M0330' THEN QTY_1 ELSE 0 END) AS SMT_AFTER 
             , COUNT(*) AS LOT_TTL 
             , SUM(QTY_1) AS QTY_TTL 
          FROM RWIPLOTSTS A 
             , CRASRESMAT B 
         WHERE 1=1  
           AND A.FACTORY = B.FACTORY(+) 
           AND A.LOT_ID = B.LOT_ID(+) 
           AND A.FACTORY = 'HMVA2'
           AND A.LOT_TYPE != 'W'
           AND A.LOT_DEL_FLAG = ' '
           AND A.LOT_CMF_2 = '-' 
           AND A.LOT_CMF_9 != ' ' 
           AND A.QTY_1 > 0 
           AND A.OPER NOT IN  ('00001', '00002', 'V0000') 
         GROUP BY A.MAT_ID  
       ) C 
     , ( 
        SELECT MAT_ID, SUM(ORDER_QUAN) AS ORDER_QTY 
          FROM RSAPORDQNT 
         WHERE 1=1 
           AND CREATE_TIME = TO_CHAR(SYSDATE, 'YYYYMMDD') 
         GROUP BY MAT_ID 
       ) D 
     , ( 
        SELECT MAT_ID, SUM(LOT_QTY) AS WIK_WIP 
          FROM ISTMWIKWIP@RPTTOMES 
         WHERE 1=1 
           AND CUTOFF_DT = '20200721' || TO_CHAR(SYSDATE, 'HH24')
         GROUP BY MAT_ID 
       ) E 
 WHERE 1=1
   AND A.MAT_ID = B.MAT_ID(+)
   AND A.MAT_ID = C.MAT_ID(+)
   AND A.MAT_ID = D.MAT_ID(+)
   AND A.MAT_ID = E.MAT_ID(+)
   AND A.FACTORY = 'HMVA2'
 GROUP BY A.MAT_TYPE, A.MAT_ID, A.MAT_DESC, A.UNIT_1
 HAVING SUM(NVL(B.INV_QTY,0)) + SUM(NVL(B.INV_L_QTY,0)) + SUM(NVL(C.LOT_TTL,0)) + SUM(NVL(D.ORDER_QTY,0)) + SUM(NVL(E.WIK_WIP,0)) > 0
 ORDER BY A.MAT_TYPE, A.MAT_ID 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT PLAN_WEEK V1    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_DATE = TO_CHAR(SYSDATE,'yyyymmdd')      AND ROWNUM = 1  
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT LANGUAGE_2 FROM RWEBFUNDEF WHERE FUNC_NAME = 'PRD010401'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT FACTORY Code, FAC_DESC Data
  FROM MWIPFACDEF
 WHERE FAC_GRP_5 = 'Y' 
 ORDER BY FAC_GRP_4 ASC
-------------------------------------------------------------
SELECT OPER, OPER_DESC  FROM MWIPOPRDEF
  WHERE FACTORY = 'HMVA2'  AND OPER NOT IN ('00001', '00002') AND OPER NOT LIKE 'V%' ORDER BY DECODE(OPER_CMF_2, ' ', 99999, TO_NUMBER(OPER_CMF_2)), OPER
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
        SELECT (SELECT DATA_1 FROM MGCMTBLDAT WHERE TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = MAT_GRP_1 AND ROWNUM=1) AS CUSTOMER,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT_CMF_10, MAT_ID, OPER,  ' ', CASE WHEN OPER <= 'A0200' THEN VENDOR_MAT_ID ELSE BASE_MAT_ID END SAP_CODE
             , SUM(TOTAL) AS TOTAL
             , SUM(ASSY_END_QTY0 ) VAL0
             , SUM(ASSY_END_QTY1 ) VAL1
             , SUM(ASSY_END_QTY2 ) VAL2
             , SUM(ASSY_END_QTY3 ) VAL3
             , SUM(ASSY_END_QTY4 ) VAL4
             , SUM(ASSY_END_QTY5 ) VAL5
             , SUM(ASSY_END_QTY6 ) VAL6
             , SUM(ASSY_END_QTY7 ) VAL7
             , SUM(ASSY_END_QTY8 ) VAL8
             , SUM(ASSY_END_QTY9 ) VAL9
             , SUM(ASSY_END_QTY10 ) VAL10
             , SUM(ASSY_END_QTY11 ) VAL11
             , SUM(ASSY_END_QTY12 ) VAL12
             , SUM(ASSY_END_QTY13 ) VAL13
             , SUM(ASSY_END_QTY14 ) VAL14
             , SUM(ASSY_END_QTY15 ) VAL15
             , SUM(ASSY_END_QTY16 ) VAL16
             , SUM(ASSY_END_QTY17 ) VAL17
             , SUM(ASSY_END_QTY18 ) VAL18
             , SUM(ASSY_END_QTY19 ) VAL19
             , SUM(ASSY_END_QTY20 ) VAL20
             , SUM(ASSY_END_QTY21 ) VAL21
             , SUM(ASSY_END_QTY22 ) VAL22
             , SUM(ASSY_END_QTY23 ) VAL23
             , SUM(ASSY_END_QTY24 ) VAL24
             , SUM(ASSY_END_QTY25 ) VAL25
             , SUM(ASSY_END_QTY26 ) VAL26
             , SUM(ASSY_END_QTY27 ) VAL27
             , SUM(ASSY_END_QTY28 ) VAL28
             , SUM(ASSY_END_QTY29 ) VAL29
             , SUM(ASSY_END_QTY30 ) VAL30
             , ROUND(SUM(TOTAL)/31, 1) AVG
          FROM (
               SELECT B.MAT_GRP_1,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', B.MAT_CMF_10, B.MAT_ID, A.OPER,  ' ', BASE_MAT_ID,VENDOR_MAT_ID 
                    , DECODE(WORK_DATE, '20200701', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY0
                    , DECODE(WORK_DATE, '20200702', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY1
                    , DECODE(WORK_DATE, '20200703', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY2
                    , DECODE(WORK_DATE, '20200704', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY3
                    , DECODE(WORK_DATE, '20200705', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY4
                    , DECODE(WORK_DATE, '20200706', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY5
                    , DECODE(WORK_DATE, '20200707', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY6
                    , DECODE(WORK_DATE, '20200708', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY7
                    , DECODE(WORK_DATE, '20200709', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY8
                    , DECODE(WORK_DATE, '20200710', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY9
                    , DECODE(WORK_DATE, '20200711', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY10
                    , DECODE(WORK_DATE, '20200712', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY11
                    , DECODE(WORK_DATE, '20200713', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY12
                    , DECODE(WORK_DATE, '20200714', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY13
                    , DECODE(WORK_DATE, '20200715', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY14
                    , DECODE(WORK_DATE, '20200716', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY15
                    , DECODE(WORK_DATE, '20200717', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY16
                    , DECODE(WORK_DATE, '20200718', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY17
                    , DECODE(WORK_DATE, '20200719', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY18
                    , DECODE(WORK_DATE, '20200720', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY19
                    , DECODE(WORK_DATE, '20200721', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY20
                    , DECODE(WORK_DATE, '20200722', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY21
                    , DECODE(WORK_DATE, '20200723', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY22
                    , DECODE(WORK_DATE, '20200724', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY23
                    , DECODE(WORK_DATE, '20200725', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY24
                    , DECODE(WORK_DATE, '20200726', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY25
                    , DECODE(WORK_DATE, '20200727', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY26
                    , DECODE(WORK_DATE, '20200728', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY27
                    , DECODE(WORK_DATE, '20200729', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY28
                    , DECODE(WORK_DATE, '20200730', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY29
                    , DECODE(WORK_DATE, '20200731', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY30
                    , (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END) TOTAL
                 FROM (
                      SELECT FACTORY, MAT_ID, OPER, LOT_TYPE, MAT_VER, WORK_DATE, CM_KEY_3
                           , SUM(END_LOT) AS END_LOT
                           , SUM(END_QTY_1) AS END_QTY_1
                           , SUM(END_QTY_2) AS END_QTY_2
                           , SUM(SHIP_QTY_1) AS SHIP_QTY_1
                           , SUM(SHIP_QTY_2) AS SHIP_QTY_2
                        FROM (
                             SELECT FACTORY, MAT_ID, OPER, LOT_TYPE, MAT_VER, WORK_DATE, CM_KEY_3
                           , DECODE(SUBSTR(OPER,2,4),'0000',SUM(S1_OPER_IN_LOT+S2_OPER_IN_LOT+S3_OPER_IN_LOT),SUM(S1_END_LOT+S2_END_LOT+S3_END_LOT)) END_LOT
                           , DECODE(SUBSTR(OPER,2,4),'0000',SUM(S1_OPER_IN_QTY_1+S2_OPER_IN_QTY_1+S3_OPER_IN_QTY_1),SUM(S1_END_QTY_1+S2_END_QTY_1+S3_END_QTY_1+S1_END_RWK_QTY_1 + S2_END_RWK_QTY_1 + S3_END_RWK_QTY_1)) END_QTY_1
                           , DECODE(SUBSTR(OPER,2,4),'0000',SUM(S1_OPER_IN_QTY_2+S2_OPER_IN_QTY_2+S3_OPER_IN_QTY_2),SUM(S1_END_QTY_2+S2_END_QTY_2+S3_END_QTY_2+S1_END_RWK_QTY_2 + S2_END_RWK_QTY_2 + S3_END_RWK_QTY_2)) END_QTY_2
                           , 0 SHIP_QTY_1
                           , 0 SHIP_QTY_2
                        FROM RSUMWIPMOV 
                       WHERE OPER NOT IN ('AZ010','TZ010','F0000','EZ010', 'SZ010', 'BZ010')
                    GROUP BY FACTORY, MAT_ID, OPER, LOT_TYPE, MAT_VER, WORK_DATE, CM_KEY_3
                   UNION ALL
                      SELECT CM_KEY_1 AS FACTORY, MAT_ID
                           , DECODE(CM_KEY_1,'HMVA2','AZ010','HMKT1','TZ010','FGS','F0000','HMKE1','EZ010','HMKS1','SZ010', 'BZ010') OPER
                           , LOT_TYPE, MAT_VER,  WORK_DATE,CM_KEY_3
                           , 0 END_LOT
                           , 0 END_QTY_1
                           , 0 END_QTY_2
                           , SUM(S1_FAC_OUT_QTY_1+S2_FAC_OUT_QTY_1+S3_FAC_OUT_QTY_1) SHIP_QTY_1
                           , SUM(S1_FAC_OUT_QTY_2+S2_FAC_OUT_QTY_2+S3_FAC_OUT_QTY_2) SHIP_QTY_2
                        FROM RSUMFACMOV 
                       WHERE FACTORY NOT IN ('RETURN')
                    GROUP BY CM_KEY_1, MAT_ID, OPER, LOT_TYPE, MAT_VER, WORK_DATE, CM_KEY_3
                             )
                    GROUP BY FACTORY, MAT_ID, OPER, LOT_TYPE, MAT_VER, WORK_DATE, CM_KEY_3
                    )A
                  , MWIPMATDEF B 
              WHERE 1=1 
                AND A.FACTORY  = 'HMVA2' 
                AND A.FACTORY = B.FACTORY 
                AND A.MAT_ID = B.MAT_ID                
                AND A.MAT_VER = 1 
                AND B.MAT_VER = 1 
                AND B.MAT_TYPE = 'FG' 
                AND A.OPER IN ('A0000', 'A0040', 'A0200', 'A0400', 'A0600', 'A1000', 'A1150', 'A1810', 'A1825', 'AZ010')
                AND A.MAT_ID LIKE '%'  
                AND A.OPER NOT IN ('00001','00002') 
                AND A.WORK_DATE BETWEEN '20200701' AND '20200731' 
         )   
   WHERE TOTAL > 0           
GROUP BY MAT_GRP_1,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT_CMF_10, MAT_ID, OPER,  ' ', BASE_MAT_ID,VENDOR_MAT_ID
ORDER BY MAT_GRP_1,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT_CMF_10, MAT_ID, DECODE(OPER,'AISSUE','A0001','TISSUE','T0001','EISSUE','E0001',OPER),  ' ', BASE_MAT_ID,VENDOR_MAT_ID

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
        SELECT (SELECT DATA_1 FROM MGCMTBLDAT WHERE TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = MAT_GRP_1 AND ROWNUM=1) AS CUSTOMER,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT_CMF_10, MAT_ID, OPER,  ' ', CASE WHEN OPER <= 'A0200' THEN VENDOR_MAT_ID ELSE BASE_MAT_ID END SAP_CODE
             , SUM(TOTAL) AS TOTAL
             , SUM(ASSY_END_QTY0 ) VAL0
             , SUM(ASSY_END_QTY1 ) VAL1
             , SUM(ASSY_END_QTY2 ) VAL2
             , SUM(ASSY_END_QTY3 ) VAL3
             , SUM(ASSY_END_QTY4 ) VAL4
             , SUM(ASSY_END_QTY5 ) VAL5
             , SUM(ASSY_END_QTY6 ) VAL6
             , SUM(ASSY_END_QTY7 ) VAL7
             , SUM(ASSY_END_QTY8 ) VAL8
             , SUM(ASSY_END_QTY9 ) VAL9
             , SUM(ASSY_END_QTY10 ) VAL10
             , SUM(ASSY_END_QTY11 ) VAL11
             , SUM(ASSY_END_QTY12 ) VAL12
             , SUM(ASSY_END_QTY13 ) VAL13
             , SUM(ASSY_END_QTY14 ) VAL14
             , SUM(ASSY_END_QTY15 ) VAL15
             , SUM(ASSY_END_QTY16 ) VAL16
             , SUM(ASSY_END_QTY17 ) VAL17
             , ROUND(SUM(TOTAL)/18, 1) AVG
          FROM (
               SELECT B.MAT_GRP_1,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', B.MAT_CMF_10, B.MAT_ID, A.OPER,  ' ', BASE_MAT_ID,VENDOR_MAT_ID 
                    , DECODE(WORK_DATE, '20200714', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY0
                    , DECODE(WORK_DATE, '20200715', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY1
                    , DECODE(WORK_DATE, '20200716', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY2
                    , DECODE(WORK_DATE, '20200717', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY3
                    , DECODE(WORK_DATE, '20200718', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY4
                    , DECODE(WORK_DATE, '20200719', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY5
                    , DECODE(WORK_DATE, '20200720', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY6
                    , DECODE(WORK_DATE, '20200721', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY7
                    , DECODE(WORK_DATE, '20200722', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY8
                    , DECODE(WORK_DATE, '20200723', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY9
                    , DECODE(WORK_DATE, '20200724', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY10
                    , DECODE(WORK_DATE, '20200725', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY11
                    , DECODE(WORK_DATE, '20200726', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY12
                    , DECODE(WORK_DATE, '20200727', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY13
                    , DECODE(WORK_DATE, '20200728', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY14
                    , DECODE(WORK_DATE, '20200729', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY15
                    , DECODE(WORK_DATE, '20200730', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY16
                    , DECODE(WORK_DATE, '20200731', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY17
                    , (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END) TOTAL
                 FROM (
                      SELECT FACTORY, MAT_ID, OPER, LOT_TYPE, MAT_VER, WORK_DATE, CM_KEY_3
                           , SUM(END_LOT) AS END_LOT
                           , SUM(END_QTY_1) AS END_QTY_1
                           , SUM(END_QTY_2) AS END_QTY_2
                           , SUM(SHIP_QTY_1) AS SHIP_QTY_1
                           , SUM(SHIP_QTY_2) AS SHIP_QTY_2
                        FROM (
                             SELECT FACTORY, MAT_ID, OPER, LOT_TYPE, MAT_VER, WORK_DATE, CM_KEY_3
                           , DECODE(SUBSTR(OPER,2,4),'0000',SUM(S1_OPER_IN_LOT+S2_OPER_IN_LOT+S3_OPER_IN_LOT),SUM(S1_END_LOT+S2_END_LOT+S3_END_LOT)) END_LOT
                           , DECODE(SUBSTR(OPER,2,4),'0000',SUM(S1_OPER_IN_QTY_1+S2_OPER_IN_QTY_1+S3_OPER_IN_QTY_1),SUM(S1_END_QTY_1+S2_END_QTY_1+S3_END_QTY_1+S1_END_RWK_QTY_1 + S2_END_RWK_QTY_1 + S3_END_RWK_QTY_1)) END_QTY_1
                           , DECODE(SUBSTR(OPER,2,4),'0000',SUM(S1_OPER_IN_QTY_2+S2_OPER_IN_QTY_2+S3_OPER_IN_QTY_2),SUM(S1_END_QTY_2+S2_END_QTY_2+S3_END_QTY_2+S1_END_RWK_QTY_2 + S2_END_RWK_QTY_2 + S3_END_RWK_QTY_2)) END_QTY_2
                           , 0 SHIP_QTY_1
                           , 0 SHIP_QTY_2
                        FROM RSUMWIPMOV 
                       WHERE OPER NOT IN ('AZ010','TZ010','F0000','EZ010', 'SZ010', 'BZ010')
                    GROUP BY FACTORY, MAT_ID, OPER, LOT_TYPE, MAT_VER, WORK_DATE, CM_KEY_3
                   UNION ALL
                      SELECT CM_KEY_1 AS FACTORY, MAT_ID
                           , DECODE(CM_KEY_1,'HMVA2','AZ010','HMKT1','TZ010','FGS','F0000','HMKE1','EZ010','HMKS1','SZ010', 'BZ010') OPER
                           , LOT_TYPE, MAT_VER,  WORK_DATE,CM_KEY_3
                           , 0 END_LOT
                           , 0 END_QTY_1
                           , 0 END_QTY_2
                           , SUM(S1_FAC_OUT_QTY_1+S2_FAC_OUT_QTY_1+S3_FAC_OUT_QTY_1) SHIP_QTY_1
                           , SUM(S1_FAC_OUT_QTY_2+S2_FAC_OUT_QTY_2+S3_FAC_OUT_QTY_2) SHIP_QTY_2
                        FROM RSUMFACMOV 
                       WHERE FACTORY NOT IN ('RETURN')
                    GROUP BY CM_KEY_1, MAT_ID, OPER, LOT_TYPE, MAT_VER, WORK_DATE, CM_KEY_3
                             )
                    GROUP BY FACTORY, MAT_ID, OPER, LOT_TYPE, MAT_VER, WORK_DATE, CM_KEY_3
                    )A
                  , MWIPMATDEF B 
              WHERE 1=1 
                AND A.FACTORY  = 'HMVA2' 
                AND A.FACTORY = B.FACTORY 
                AND A.MAT_ID = B.MAT_ID                
                AND A.MAT_VER = 1 
                AND B.MAT_VER = 1 
                AND B.MAT_TYPE = 'FG' 
                AND A.OPER IN ('A0000', 'A0040', 'A0200', 'A0400', 'A0600', 'A1000', 'A1150', 'A1810', 'A1825', 'AZ010')
                AND A.MAT_ID LIKE '%'  
                AND A.OPER NOT IN ('00001','00002') 
                AND A.WORK_DATE BETWEEN '20200714' AND '20200731' 
         )   
   WHERE TOTAL > 0           
GROUP BY MAT_GRP_1,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT_CMF_10, MAT_ID, OPER,  ' ', BASE_MAT_ID,VENDOR_MAT_ID
ORDER BY MAT_GRP_1,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT_CMF_10, MAT_ID, DECODE(OPER,'AISSUE','A0001','TISSUE','T0001','EISSUE','E0001',OPER),  ' ', BASE_MAT_ID,VENDOR_MAT_ID

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
        SELECT (SELECT DATA_1 FROM MGCMTBLDAT WHERE TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = MAT_GRP_1 AND ROWNUM=1) AS CUSTOMER,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT_CMF_10, MAT_ID, OPER,  ' ', CASE WHEN OPER <= 'A0200' THEN VENDOR_MAT_ID ELSE BASE_MAT_ID END SAP_CODE
             , SUM(TOTAL) AS TOTAL
             , SUM(ASSY_END_QTY0 ) VAL0
             , SUM(ASSY_END_QTY1 ) VAL1
             , SUM(ASSY_END_QTY2 ) VAL2
             , SUM(ASSY_END_QTY3 ) VAL3
             , SUM(ASSY_END_QTY4 ) VAL4
             , SUM(ASSY_END_QTY5 ) VAL5
             , SUM(ASSY_END_QTY6 ) VAL6
             , SUM(ASSY_END_QTY7 ) VAL7
             , SUM(ASSY_END_QTY8 ) VAL8
             , SUM(ASSY_END_QTY9 ) VAL9
             , SUM(ASSY_END_QTY10 ) VAL10
             , SUM(ASSY_END_QTY11 ) VAL11
             , SUM(ASSY_END_QTY12 ) VAL12
             , SUM(ASSY_END_QTY13 ) VAL13
             , SUM(ASSY_END_QTY14 ) VAL14
             , SUM(ASSY_END_QTY15 ) VAL15
             , SUM(ASSY_END_QTY16 ) VAL16
             , SUM(ASSY_END_QTY17 ) VAL17
             , SUM(ASSY_END_QTY18 ) VAL18
             , SUM(ASSY_END_QTY19 ) VAL19
             , SUM(ASSY_END_QTY20 ) VAL20
             , SUM(ASSY_END_QTY21 ) VAL21
             , SUM(ASSY_END_QTY22 ) VAL22
             , SUM(ASSY_END_QTY23 ) VAL23
             , SUM(ASSY_END_QTY24 ) VAL24
             , SUM(ASSY_END_QTY25 ) VAL25
             , SUM(ASSY_END_QTY26 ) VAL26
             , SUM(ASSY_END_QTY27 ) VAL27
             , SUM(ASSY_END_QTY28 ) VAL28
             , SUM(ASSY_END_QTY29 ) VAL29
             , SUM(ASSY_END_QTY30 ) VAL30
             , SUM(ASSY_END_QTY31 ) VAL31
             , SUM(ASSY_END_QTY32 ) VAL32
             , ROUND(SUM(TOTAL)/33, 1) AVG
          FROM (
               SELECT B.MAT_GRP_1,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', B.MAT_CMF_10, B.MAT_ID, A.OPER,  ' ', BASE_MAT_ID,VENDOR_MAT_ID 
                    , DECODE(WORK_DATE, '20200714', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY0
                    , DECODE(WORK_DATE, '20200715', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY1
                    , DECODE(WORK_DATE, '20200716', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY2
                    , DECODE(WORK_DATE, '20200717', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY3
                    , DECODE(WORK_DATE, '20200718', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY4
                    , DECODE(WORK_DATE, '20200719', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY5
                    , DECODE(WORK_DATE, '20200720', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY6
                    , DECODE(WORK_DATE, '20200721', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY7
                    , DECODE(WORK_DATE, '20200722', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY8
                    , DECODE(WORK_DATE, '20200723', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY9
                    , DECODE(WORK_DATE, '20200724', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY10
                    , DECODE(WORK_DATE, '20200725', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY11
                    , DECODE(WORK_DATE, '20200726', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY12
                    , DECODE(WORK_DATE, '20200727', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY13
                    , DECODE(WORK_DATE, '20200728', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY14
                    , DECODE(WORK_DATE, '20200729', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY15
                    , DECODE(WORK_DATE, '20200730', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY16
                    , DECODE(WORK_DATE, '20200731', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY17
                    , DECODE(WORK_DATE, '20200801', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY18
                    , DECODE(WORK_DATE, '20200802', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY19
                    , DECODE(WORK_DATE, '20200803', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY20
                    , DECODE(WORK_DATE, '20200804', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY21
                    , DECODE(WORK_DATE, '20200805', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY22
                    , DECODE(WORK_DATE, '20200806', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY23
                    , DECODE(WORK_DATE, '20200807', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY24
                    , DECODE(WORK_DATE, '20200808', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY25
                    , DECODE(WORK_DATE, '20200809', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY26
                    , DECODE(WORK_DATE, '20200810', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY27
                    , DECODE(WORK_DATE, '20200811', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY28
                    , DECODE(WORK_DATE, '20200812', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY29
                    , DECODE(WORK_DATE, '20200813', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY30
                    , DECODE(WORK_DATE, '20200814', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY31
                    , DECODE(WORK_DATE, '20200815', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY32
                    , (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END) TOTAL
                 FROM (
                      SELECT FACTORY, MAT_ID, OPER, LOT_TYPE, MAT_VER, WORK_DATE, CM_KEY_3
                           , SUM(END_LOT) AS END_LOT
                           , SUM(END_QTY_1) AS END_QTY_1
                           , SUM(END_QTY_2) AS END_QTY_2
                           , SUM(SHIP_QTY_1) AS SHIP_QTY_1
                           , SUM(SHIP_QTY_2) AS SHIP_QTY_2
                        FROM (
                             SELECT FACTORY, MAT_ID, OPER, LOT_TYPE, MAT_VER, WORK_DATE, CM_KEY_3
                           , DECODE(SUBSTR(OPER,2,4),'0000',SUM(S1_OPER_IN_LOT+S2_OPER_IN_LOT+S3_OPER_IN_LOT),SUM(S1_END_LOT+S2_END_LOT+S3_END_LOT)) END_LOT
                           , DECODE(SUBSTR(OPER,2,4),'0000',SUM(S1_OPER_IN_QTY_1+S2_OPER_IN_QTY_1+S3_OPER_IN_QTY_1),SUM(S1_END_QTY_1+S2_END_QTY_1+S3_END_QTY_1+S1_END_RWK_QTY_1 + S2_END_RWK_QTY_1 + S3_END_RWK_QTY_1)) END_QTY_1
                           , DECODE(SUBSTR(OPER,2,4),'0000',SUM(S1_OPER_IN_QTY_2+S2_OPER_IN_QTY_2+S3_OPER_IN_QTY_2),SUM(S1_END_QTY_2+S2_END_QTY_2+S3_END_QTY_2+S1_END_RWK_QTY_2 + S2_END_RWK_QTY_2 + S3_END_RWK_QTY_2)) END_QTY_2
                           , 0 SHIP_QTY_1
                           , 0 SHIP_QTY_2
                        FROM RSUMWIPMOV 
                       WHERE OPER NOT IN ('AZ010','TZ010','F0000','EZ010', 'SZ010', 'BZ010')
                    GROUP BY FACTORY, MAT_ID, OPER, LOT_TYPE, MAT_VER, WORK_DATE, CM_KEY_3
                   UNION ALL
                      SELECT CM_KEY_1 AS FACTORY, MAT_ID
                           , DECODE(CM_KEY_1,'HMVA2','AZ010','HMKT1','TZ010','FGS','F0000','HMKE1','EZ010','HMKS1','SZ010', 'BZ010') OPER
                           , LOT_TYPE, MAT_VER,  WORK_DATE,CM_KEY_3
                           , 0 END_LOT
                           , 0 END_QTY_1
                           , 0 END_QTY_2
                           , SUM(S1_FAC_OUT_QTY_1+S2_FAC_OUT_QTY_1+S3_FAC_OUT_QTY_1) SHIP_QTY_1
                           , SUM(S1_FAC_OUT_QTY_2+S2_FAC_OUT_QTY_2+S3_FAC_OUT_QTY_2) SHIP_QTY_2
                        FROM RSUMFACMOV 
                       WHERE FACTORY NOT IN ('RETURN')
                    GROUP BY CM_KEY_1, MAT_ID, OPER, LOT_TYPE, MAT_VER, WORK_DATE, CM_KEY_3
                             )
                    GROUP BY FACTORY, MAT_ID, OPER, LOT_TYPE, MAT_VER, WORK_DATE, CM_KEY_3
                    )A
                  , MWIPMATDEF B 
              WHERE 1=1 
                AND A.FACTORY  = 'HMVA2' 
                AND A.FACTORY = B.FACTORY 
                AND A.MAT_ID = B.MAT_ID                
                AND A.MAT_VER = 1 
                AND B.MAT_VER = 1 
                AND B.MAT_TYPE = 'FG' 
                AND A.OPER IN ('A0000', 'A0040', 'A0200', 'A0400', 'A0600', 'A1000', 'A1150', 'A1810', 'A1825', 'AZ010')
                AND A.MAT_ID LIKE '%'  
                AND A.OPER NOT IN ('00001','00002') 
                AND A.WORK_DATE BETWEEN '20200714' AND '20200815' 
         )   
   WHERE TOTAL > 0           
GROUP BY MAT_GRP_1,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT_CMF_10, MAT_ID, OPER,  ' ', BASE_MAT_ID,VENDOR_MAT_ID
ORDER BY MAT_GRP_1,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT_CMF_10, MAT_ID, DECODE(OPER,'AISSUE','A0001','TISSUE','T0001','EISSUE','E0001',OPER),  ' ', BASE_MAT_ID,VENDOR_MAT_ID

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
        SELECT (SELECT DATA_1 FROM MGCMTBLDAT WHERE TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = MAT_GRP_1 AND ROWNUM=1) AS CUSTOMER,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT_CMF_10, MAT_ID, OPER,  ' ', CASE WHEN OPER <= 'A0200' THEN VENDOR_MAT_ID ELSE BASE_MAT_ID END SAP_CODE
             , SUM(TOTAL) AS TOTAL
             , SUM(ASSY_END_QTY0 ) VAL0
             , SUM(ASSY_END_QTY1 ) VAL1
             , SUM(ASSY_END_QTY2 ) VAL2
             , SUM(ASSY_END_QTY3 ) VAL3
             , SUM(ASSY_END_QTY4 ) VAL4
             , SUM(ASSY_END_QTY5 ) VAL5
             , SUM(ASSY_END_QTY6 ) VAL6
             , SUM(ASSY_END_QTY7 ) VAL7
             , SUM(ASSY_END_QTY8 ) VAL8
             , SUM(ASSY_END_QTY9 ) VAL9
             , SUM(ASSY_END_QTY10 ) VAL10
             , SUM(ASSY_END_QTY11 ) VAL11
             , SUM(ASSY_END_QTY12 ) VAL12
             , SUM(ASSY_END_QTY13 ) VAL13
             , SUM(ASSY_END_QTY14 ) VAL14
             , SUM(ASSY_END_QTY15 ) VAL15
             , SUM(ASSY_END_QTY16 ) VAL16
             , SUM(ASSY_END_QTY17 ) VAL17
             , SUM(ASSY_END_QTY18 ) VAL18
             , SUM(ASSY_END_QTY19 ) VAL19
             , SUM(ASSY_END_QTY20 ) VAL20
             , SUM(ASSY_END_QTY21 ) VAL21
             , SUM(ASSY_END_QTY22 ) VAL22
             , SUM(ASSY_END_QTY23 ) VAL23
             , SUM(ASSY_END_QTY24 ) VAL24
             , SUM(ASSY_END_QTY25 ) VAL25
             , SUM(ASSY_END_QTY26 ) VAL26
             , SUM(ASSY_END_QTY27 ) VAL27
             , SUM(ASSY_END_QTY28 ) VAL28
             , SUM(ASSY_END_QTY29 ) VAL29
             , SUM(ASSY_END_QTY30 ) VAL30
             , SUM(ASSY_END_QTY31 ) VAL31
             , SUM(ASSY_END_QTY32 ) VAL32
             , ROUND(SUM(TOTAL)/33, 1) AVG
          FROM (
               SELECT B.MAT_GRP_1,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', B.MAT_CMF_10, B.MAT_ID, A.OPER,  ' ', BASE_MAT_ID,VENDOR_MAT_ID 
                    , DECODE(WORK_DATE, '20200714', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY0
                    , DECODE(WORK_DATE, '20200715', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY1
                    , DECODE(WORK_DATE, '20200716', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY2
                    , DECODE(WORK_DATE, '20200717', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY3
                    , DECODE(WORK_DATE, '20200718', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY4
                    , DECODE(WORK_DATE, '20200719', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY5
                    , DECODE(WORK_DATE, '20200720', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY6
                    , DECODE(WORK_DATE, '20200721', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY7
                    , DECODE(WORK_DATE, '20200722', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY8
                    , DECODE(WORK_DATE, '20200723', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY9
                    , DECODE(WORK_DATE, '20200724', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY10
                    , DECODE(WORK_DATE, '20200725', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY11
                    , DECODE(WORK_DATE, '20200726', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY12
                    , DECODE(WORK_DATE, '20200727', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY13
                    , DECODE(WORK_DATE, '20200728', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY14
                    , DECODE(WORK_DATE, '20200729', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY15
                    , DECODE(WORK_DATE, '20200730', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY16
                    , DECODE(WORK_DATE, '20200731', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY17
                    , DECODE(WORK_DATE, '20200801', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY18
                    , DECODE(WORK_DATE, '20200802', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY19
                    , DECODE(WORK_DATE, '20200803', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY20
                    , DECODE(WORK_DATE, '20200804', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY21
                    , DECODE(WORK_DATE, '20200805', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY22
                    , DECODE(WORK_DATE, '20200806', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY23
                    , DECODE(WORK_DATE, '20200807', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY24
                    , DECODE(WORK_DATE, '20200808', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY25
                    , DECODE(WORK_DATE, '20200809', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY26
                    , DECODE(WORK_DATE, '20200810', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY27
                    , DECODE(WORK_DATE, '20200811', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY28
                    , DECODE(WORK_DATE, '20200812', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY29
                    , DECODE(WORK_DATE, '20200813', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY30
                    , DECODE(WORK_DATE, '20200814', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY31
                    , DECODE(WORK_DATE, '20200815', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY32
                    , (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END) TOTAL
                 FROM (
                      SELECT FACTORY, MAT_ID, OPER, LOT_TYPE, MAT_VER, WORK_DATE, CM_KEY_3
                           , SUM(END_LOT) AS END_LOT
                           , SUM(END_QTY_1) AS END_QTY_1
                           , SUM(END_QTY_2) AS END_QTY_2
                           , SUM(SHIP_QTY_1) AS SHIP_QTY_1
                           , SUM(SHIP_QTY_2) AS SHIP_QTY_2
                        FROM (
                             SELECT FACTORY, MAT_ID, OPER, LOT_TYPE, MAT_VER, WORK_DATE, CM_KEY_3
                           , DECODE(SUBSTR(OPER,2,4),'0000',SUM(S1_OPER_IN_LOT+S2_OPER_IN_LOT+S3_OPER_IN_LOT),SUM(S1_END_LOT+S2_END_LOT+S3_END_LOT)) END_LOT
                           , DECODE(SUBSTR(OPER,2,4),'0000',SUM(S1_OPER_IN_QTY_1+S2_OPER_IN_QTY_1+S3_OPER_IN_QTY_1),SUM(S1_END_QTY_1+S2_END_QTY_1+S3_END_QTY_1+S1_END_RWK_QTY_1 + S2_END_RWK_QTY_1 + S3_END_RWK_QTY_1)) END_QTY_1
                           , DECODE(SUBSTR(OPER,2,4),'0000',SUM(S1_OPER_IN_QTY_2+S2_OPER_IN_QTY_2+S3_OPER_IN_QTY_2),SUM(S1_END_QTY_2+S2_END_QTY_2+S3_END_QTY_2+S1_END_RWK_QTY_2 + S2_END_RWK_QTY_2 + S3_END_RWK_QTY_2)) END_QTY_2
                           , 0 SHIP_QTY_1
                           , 0 SHIP_QTY_2
                        FROM RSUMWIPMOV 
                       WHERE OPER NOT IN ('AZ010','TZ010','F0000','EZ010', 'SZ010', 'BZ010')
                    GROUP BY FACTORY, MAT_ID, OPER, LOT_TYPE, MAT_VER, WORK_DATE, CM_KEY_3
                   UNION ALL
                      SELECT CM_KEY_1 AS FACTORY, MAT_ID
                           , DECODE(CM_KEY_1,'HMVA2','AZ010','HMKT1','TZ010','FGS','F0000','HMKE1','EZ010','HMKS1','SZ010', 'BZ010') OPER
                           , LOT_TYPE, MAT_VER,  WORK_DATE,CM_KEY_3
                           , 0 END_LOT
                           , 0 END_QTY_1
                           , 0 END_QTY_2
                           , SUM(S1_FAC_OUT_QTY_1+S2_FAC_OUT_QTY_1+S3_FAC_OUT_QTY_1) SHIP_QTY_1
                           , SUM(S1_FAC_OUT_QTY_2+S2_FAC_OUT_QTY_2+S3_FAC_OUT_QTY_2) SHIP_QTY_2
                        FROM RSUMFACMOV 
                       WHERE FACTORY NOT IN ('RETURN')
                    GROUP BY CM_KEY_1, MAT_ID, OPER, LOT_TYPE, MAT_VER, WORK_DATE, CM_KEY_3
                             )
                    GROUP BY FACTORY, MAT_ID, OPER, LOT_TYPE, MAT_VER, WORK_DATE, CM_KEY_3
                    )A
                  , MWIPMATDEF B 
              WHERE 1=1 
                AND A.FACTORY  = 'HMVA2' 
                AND A.FACTORY = B.FACTORY 
                AND A.MAT_ID = B.MAT_ID                
                AND A.MAT_VER = 1 
                AND B.MAT_VER = 1 
                AND B.MAT_TYPE = 'FG' 
                AND A.OPER IN ('A0000', 'A0040', 'A0200', 'A0400', 'A0600', 'A1000', 'A1150', 'A1810', 'A1825', 'AZ010')
                AND A.MAT_ID LIKE '%'  
                AND A.OPER NOT IN ('00001','00002') 
                AND A.WORK_DATE BETWEEN '20200714' AND '20200815' 
         )   
   WHERE TOTAL > 0           
GROUP BY MAT_GRP_1,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT_CMF_10, MAT_ID, OPER,  ' ', BASE_MAT_ID,VENDOR_MAT_ID
ORDER BY MAT_GRP_1,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT_CMF_10, MAT_ID, DECODE(OPER,'AISSUE','A0001','TISSUE','T0001','EISSUE','E0001',OPER),  ' ', BASE_MAT_ID,VENDOR_MAT_ID

-------------------------------------------------------------
SELECT * FROM RWEBUSRDEF WHERE FACTORY = :FACTORY AND USER_ID= :USER_ID
-------------------------------------------------------------
SELECT A.FUNC_GRP_SEQ,A.SEC_GRP_ID,A.FUNC_GRP_ID,NVL(A.FUNC_NAME, ' ') FUNC_NAME, NVL(B.FUNC_DESC, ' ') FUNC_DESC, LANGUAGE_1, LANGUAGE_2, LANGUAGE_3
  FROM RWEBGRPFUN A, RWEBFUNDEF B
 WHERE A.FACTORY = :p_FACTORY
   AND A.SEC_GRP_ID = :p_SEC_GRP_ID
   AND A.FUNC_NAME=B.FUNC_NAME(+)
 ORDER BY A.FUNC_GRP_SEQ, A.FUNC_SEQ
-------------------------------------------------------------
SELECT * FROM RWEBUSRDEF WHERE FACTORY = :FACTORY AND USER_ID= :USER_ID
-------------------------------------------------------------
SELECT A.FUNC_GRP_SEQ,A.SEC_GRP_ID,A.FUNC_GRP_ID,NVL(A.FUNC_NAME, ' ') FUNC_NAME, NVL(B.FUNC_DESC, ' ') FUNC_DESC, LANGUAGE_1, LANGUAGE_2, LANGUAGE_3
  FROM RWEBGRPFUN A, RWEBFUNDEF B
 WHERE A.FACTORY = :p_FACTORY
   AND A.SEC_GRP_ID = :p_SEC_GRP_ID
   AND A.FUNC_NAME=B.FUNC_NAME(+)
 ORDER BY A.FUNC_GRP_SEQ, A.FUNC_SEQ
-------------------------------------------------------------
SELECT * FROM RWEBUSRDEF WHERE FACTORY = :FACTORY AND USER_ID= :USER_ID
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
SELECT A.FUNC_GRP_SEQ,A.SEC_GRP_ID,A.FUNC_GRP_ID,NVL(A.FUNC_NAME, ' ') FUNC_NAME, NVL(B.FUNC_DESC, ' ') FUNC_DESC, LANGUAGE_1, LANGUAGE_2, LANGUAGE_3
  FROM RWEBGRPFUN A, RWEBFUNDEF B
 WHERE A.FACTORY = :p_FACTORY
   AND A.SEC_GRP_ID = :p_SEC_GRP_ID
   AND A.FUNC_NAME=B.FUNC_NAME(+)
 ORDER BY A.FUNC_GRP_SEQ, A.FUNC_SEQ
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
SELECT LANGUAGE_3 FROM RWEBFUNDEF WHERE FUNC_NAME = 'PRD010503'
-------------------------------------------------------------
SELECT * FROM RWEBUSRDEF WHERE FACTORY = :FACTORY AND USER_ID= :USER_ID
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT A.FUNC_GRP_SEQ,A.SEC_GRP_ID,A.FUNC_GRP_ID,NVL(A.FUNC_NAME, ' ') FUNC_NAME, NVL(B.FUNC_DESC, ' ') FUNC_DESC, LANGUAGE_1, LANGUAGE_2, LANGUAGE_3
  FROM RWEBGRPFUN A, RWEBFUNDEF B
 WHERE A.FACTORY = :p_FACTORY
   AND A.SEC_GRP_ID = :p_SEC_GRP_ID
   AND A.FUNC_NAME=B.FUNC_NAME(+)
 ORDER BY A.FUNC_GRP_SEQ, A.FUNC_SEQ
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT PLAN_WEEK V1    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_DATE = TO_CHAR(SYSDATE,'yyyymmdd')      AND ROWNUM = 1  
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT DISTINCT PLAN_YEAR||LPAD(PLAN_WEEK,2,'0') AS PLAN_WEEK 
  FROM MWIPCALDEF
 WHERE 1=1 
   AND CALENDAR_ID = 'OTD' 
   AND SYS_YEAR||LPAD(SYS_MONTH,2,'0') = '202007' 
 ORDER BY PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT DISTINCT PLAN_YEAR||LPAD(PLAN_WEEK,2,'0') AS PLAN_WEEK 
  FROM MWIPCALDEF
 WHERE 1=1 
   AND CALENDAR_ID = 'OTD' 
   AND SYS_YEAR||LPAD(SYS_MONTH,2,'0') = '202007' 
   AND SYS_DATE <= '20200721' 
 ORDER BY PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT LANGUAGE_1 FROM RWEBFUNDEF WHERE FUNC_NAME = 'PRD010907'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
 SELECT PLAN_WEEK V1    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_DATE = TO_CHAR(SYSDATE,'yyyymmdd')      AND ROWNUM = 1  
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT LANGUAGE_1 FROM RWEBFUNDEF WHERE FUNC_NAME = 'RAS020106'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
 SELECT PLAN_WEEK V1    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_DATE = TO_CHAR(SYSDATE,'yyyymmdd')      AND ROWNUM = 1  
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT LANGUAGE_1 FROM RWEBFUNDEF WHERE FUNC_NAME = 'RAS020105'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT FACTORY Code, FAC_DESC Data
  FROM MWIPFACDEF
 WHERE FAC_GRP_5 = 'Y' 
 ORDER BY FAC_GRP_4 ASC
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM','HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM','HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM','HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT PLAN_WEEK V1    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('HM', 'SYSTEM')     AND SYS_DATE = TO_CHAR(SYSDATE,'yyyymmdd')      AND ROWNUM = 1  
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM','HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM','HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT LANGUAGE_1 FROM RWEBFUNDEF WHERE FUNC_NAME = 'RAS020211'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT FACTORY Code, FAC_DESC Data
  FROM MWIPFACDEF
 WHERE FAC_GRP_5 = 'Y' 
 ORDER BY FAC_GRP_4 ASC
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT * FROM MGCMTBLDAT WHERE FACTORY =:FACTORY AND TABLE_NAME=:TABLE_NAME
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT DOWN_DATE,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', RES
     , DOWN_CODE, UP_CODE, DOWN_TIME, DISABLE_TIME, MAINT_START_TIME
     , ENABLE_TIME, MAINT_START_COMMENT, DOWN_TRAN_COMMENT, UP_TRAN_COMMENT, DOWN_TRAN_USER, UP_TRAN_USER_ID
  FROM (
        SELECT TO_CHAR(TO_DATE(DOWN_TRAN_TIME, 'YYYYMMDDHH24MISS') + 2/24, 'YYYYMMDD') AS DOWN_DATE,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', DWH.RES_ID AS RES
             , DOWN_NEW_STS_1 DOWN_CODE  
             , UP_NEW_STS_1 UP_CODE  
             , CASE WHEN UP_TRAN_TIME <> ' '  
                    THEN ROUND(TO_CHAR(TO_DATE(UP_TRAN_TIME, 'YYYYMMDDHH24MISS') - TO_DATE(DOWN_TRAN_TIME, 'YYYYMMDDHH24MISS'))* 24 * 60,3) 
                    ELSE ROUND(TO_CHAR(SYSDATE - TO_DATE(DOWN_TRAN_TIME, 'YYYYMMDDHH24MISS')),3)
                END AS DOWN_TIME
             , DECODE(DOWN_TRAN_TIME, ' ', ' ', TO_CHAR(TO_DATE(DOWN_TRAN_TIME, 'YYYYMMDDHH24MISS'), 'YYYY-MM-DD HH24:MI:SS')) DISABLE_TIME 
             , DECODE(MAINT_START_TIME, ' ', ' ', TO_CHAR(TO_DATE(MAINT_START_TIME, 'YYYYMMDDHH24MISS'), 'YYYY-MM-DD HH24:MI:SS')) MAINT_START_TIME
             , DECODE(UP_TRAN_TIME, ' ', ' ', TO_CHAR(TO_DATE(UP_TRAN_TIME, 'YYYYMMDDHH24MISS'), 'YYYY-MM-DD HH24:MI:SS')) ENABLE_TIME 
             , UP_TRAN_TIME 
             , MAINT_START_COMMENT 
             , DOWN_TRAN_COMMENT  
             , UP_TRAN_COMMENT  
             , DECODE(DOWN_TRAN_USER_ID, ' ',' ', (SELECT USER_DESC FROM RWEBUSRDEF WHERE USER_ID=DOWN_TRAN_USER_ID)) || '(' || DECODE(DOWN_TRAN_USER_ID, ' ',' ',DOWN_TRAN_USER_ID) || ')' AS DOWN_TRAN_USER 
             , DECODE(DOWN_TRAN_USER_ID, ' ',' ', (SELECT USER_DESC FROM RWEBUSRDEF WHERE USER_ID=UP_TRAN_USER_ID)) || '(' || DECODE(UP_TRAN_USER_ID, ' ',' ',UP_TRAN_USER_ID) || ')' AS UP_TRAN_USER_ID 
          FROM CRASRESDWH DWH  
             , MRASRESDEF RES  
         WHERE 1=1  
           AND RES.FACTORY = DWH.FACTORY  
           AND RES.RES_ID = DWH.RES_ID  
           AND RES.FACTORY = 'HMVA2' 
           AND RES.RES_TYPE NOT IN ('DUMMY')
           AND DWH.DOWN_NEW_STS_1 LIKE 'B%'
           AND DWH.DOWN_TRAN_TIME BETWEEN '20200719220000' AND '20200721215959' 
           AND RES.RES_TYPE IN ('EQUIPMENT', 'LINE')
         ORDER BY DOWN_TRAN_TIME,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', RES.RES_ID
       ) DAT

-------------------------------------------------------------
SELECT * FROM RWEBUSRDEF WHERE FACTORY = :FACTORY AND USER_ID= :USER_ID
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
SELECT A.FUNC_GRP_SEQ,A.SEC_GRP_ID,A.FUNC_GRP_ID,NVL(A.FUNC_NAME, ' ') FUNC_NAME, NVL(B.FUNC_DESC, ' ') FUNC_DESC, LANGUAGE_1, LANGUAGE_2, LANGUAGE_3
  FROM RWEBGRPFUN A, RWEBFUNDEF B
 WHERE A.FACTORY = :p_FACTORY
   AND A.SEC_GRP_ID = :p_SEC_GRP_ID
   AND A.FUNC_NAME=B.FUNC_NAME(+)
 ORDER BY A.FUNC_GRP_SEQ, A.FUNC_SEQ
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT PLAN_WEEK V1    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_DATE = TO_CHAR(SYSDATE,'yyyymmdd')      AND ROWNUM = 1  
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT LANGUAGE_3 FROM RWEBFUNDEF WHERE FUNC_NAME = 'PRD010405'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT FACTORY Code, FAC_DESC Data
  FROM MWIPFACDEF
 WHERE FAC_GRP_5 = 'Y' 
 ORDER BY FAC_GRP_4 ASC
-------------------------------------------------------------
SELECT OPER, OPER_DESC  FROM MWIPOPRDEF
  WHERE FACTORY = 'HMVA2'  AND OPER NOT IN ('00001', '00002') AND OPER NOT LIKE 'V%' ORDER BY DECODE(OPER_CMF_2, ' ', 99999, TO_NUMBER(OPER_CMF_2)), OPER
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', SUMMERY.OPER,  ' ',  ' '
     , SUMMERY.MAT_ID 
     , SUMMERY.LOT_ID 
     , SUMMERY.LOT_CMF_5 
     , SUMMERY.END_RES_ID 
     , SUMMERY.QTY_1 + SUMMERY.LOSS_QTY AS OPER_IN_QTY_1 
     , SUMMERY.QTY_1 
     , ROUND(SUMMERY.QTY_1/(SUMMERY.QTY_1 + SUMMERY.LOSS_QTY)*100,3) AS YIELD 
     , TO_CHAR(TO_DATE(SUMMERY.OPER_IN_TIME,'yyyymmddhh24miss')) AS OPER_IN_TIME 
     , TO_CHAR(TO_DATE(SUMMERY.TRAN_TIME,'yyyymmddhh24miss')) AS TRAN_TIME 
     , DECODE(SUMMERY.TRAN_CMF_18, ' ', ' ', SUMMERY.IN_USER_DESC || '(' || SUMMERY.TRAN_CMF_18 || ')') AS IN_USER_ID 
     , SUMMERY.END_USER_DESC || '(' || SUMMERY.TRAN_USER_ID || ')' AS END_USER_ID 
     , SUMMERY.LOT_CMF_10 
     , SUMMERY.TRAN_CMF_2 AS HD 
     , SUMMERY.TRAN_CMF_3 AS PGM 
     , SUMMERY.CRR_ID 
     , '' EPOXY 
     , '' LF 
     , '' GW 
     , '' MATAL_CARD 
     , '' EMC_LOT 
     , '' EMC_CAN 
     , '' EMC_TYPE 
     , SUMMERY.TRAN_COMMENT 
     , SUMMERY.QTY_2 
     , SUMMERY.TRAN_CMF_17 AS CV 
     , SUMMERY.LOT_CMF_7 AS ASSY_SITE 
     , SUMMERY.LOT_CMF_11 AS SHIP_SITE 
     , SUMMERY.TRAN_CMF_7 AS REWORK_BALL 
     , SUMMERY.TRAN_CMF_8 AS REWORK_CLEAN 
     , SUMMERY.TRAN_CMF_9 AS REWORK_PRINT 
     , LOT_CMF_3 
  FROM (  
        SELECT MAT_ID 
             , LOT_ID 
             , LOT_CMF_5 
             , LOT_CMF_10 
             , OLD_OPER AS OPER 
             , END_RES_ID 
             , TRAN_CMF_2 
             , TRAN_CMF_3 
             , NVL(( 
                    SELECT SUM(LOSS_QTY) AS LOSS_QTY 
                      FROM RWIPLOTLSM 
                     WHERE LOT_ID = A.LOT_ID 
                       AND OPER = A.OLD_OPER 
                     GROUP BY LOT_ID 
                  ), 0) AS LOSS_QTY 
             , CASE WHEN TRAN_CODE = 'SHIP' AND FACTORY = OLD_FACTORY THEN OLD_QTY_1 - QTY_1 
                    ELSE QTY_1 
               END QTY_1 
             , DECODE(START_TIME, ' ', OLD_OPER_IN_TIME, START_TIME) AS OPER_IN_TIME 
             , TRAN_TIME 
             , TRAN_USER_ID 
             , CRR_ID 
             , TRAN_COMMENT 
             , ( 
                SELECT USER_DESC FROM RWEBUSRDEF WHERE FACTORY = 'SYSTEM' AND USER_ID = A.TRAN_USER_ID 
               ) AS END_USER_DESC 
             , QTY_2 
             , CASE WHEN A.OLD_OPER LIKE 'A040%' AND A.RESV_FLAG_5 = 'Y' AND (SELECT CASE WHEN (TRAN_CMF_4 = 'RFID TAG WRITE : SUCCESS') 
                                                                                            OR (RESV_FLAG_5 = 'Y' AND TRAN_CMF_19 = 'RFID' AND TRAN_USER_ID = 'EIS') THEN 'RFID' 
                                                                                          ELSE ' ' 
                                                                                     END  
                                                                                FROM RWIPLOTHIS 
                                                                               WHERE FACTORY = A.OLD_FACTORY 
                                                                                 AND LOT_TYPE = A.OLD_LOT_TYPE 
                                                                                 AND LOT_ID = A.LOT_ID 
                                                                                 AND OPER = A.OLD_OPER 
                                                                                 AND TRAN_TIME < A.TRAN_TIME 
                                                                                 AND FACTORY = 'HMVA2' 
                                                                                 AND LOT_TYPE = 'W' 
                                                                                 AND RESV_FLAG_5 = 'Y' 
                                                                                 AND TRAN_CODE = 'START' 
                                                                                 AND HIST_DEL_FLAG = ' ') = 'RFID' THEN TRAN_CMF_18 || '[RFID]' 
                     WHEN A.OLD_OPER NOT LIKE 'A040%' AND A.RESV_FLAG_5 = 'Y' AND A.TRAN_CMF_19 = 'RFID' AND A.TRAN_USER_ID = 'EIS' THEN TRAN_CMF_18 || '[' || TRIM(TRAN_CMF_19) || ']' 
                     ELSE TRAN_CMF_18 
               END AS TRAN_CMF_18 
             , ( 
                SELECT USER_DESC FROM RWEBUSRDEF WHERE FACTORY = 'SYSTEM' AND USER_ID = A.TRAN_CMF_18 
               ) AS IN_USER_DESC 
             , LOT_CMF_7 
             , TRAN_CMF_17 
             , LOT_CMF_11 
             , TRAN_CMF_7 
             , TRAN_CMF_8 
             , TRAN_CMF_9 
             , LOT_CMF_3 
          FROM RWIPLOTHIS A 
         WHERE 1=1 
           AND TRAN_TIME BETWEEN '20200720070000' AND '20200721215959' 
           AND OLD_FACTORY = 'HMVA2' 
           AND TRAN_CODE IN ('END','SHIP') 
           AND LOT_TYPE = 'W' 
           AND HIST_DEL_FLAG = ' ' 
           AND OLD_OPER IN ('A0040')
           AND END_RES_ID LIKE '%'
           AND LOT_CMF_5 LIKE '%'
       ) SUMMERY 
     , MWIPMATDEF MAT 
 WHERE 1=1 
   AND SUMMERY.MAT_ID = MAT.MAT_ID 
   AND MAT.FACTORY = 'HMVA2' 
   AND MAT.MAT_TYPE = 'FG' 
 ORDER BY  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', SUMMERY.OPER,  ' ',  ' ',SUMMERY.END_RES_ID,LOT_ID,MAT_ID 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', SUMMERY.OPER,  ' ',  ' '
     , SUMMERY.MAT_ID 
     , SUMMERY.LOT_ID 
     , SUMMERY.LOT_CMF_5 
     , SUMMERY.END_RES_ID 
     , SUMMERY.QTY_1 + SUMMERY.LOSS_QTY AS OPER_IN_QTY_1 
     , SUMMERY.QTY_1 
     , ROUND(SUMMERY.QTY_1/(SUMMERY.QTY_1 + SUMMERY.LOSS_QTY)*100,3) AS YIELD 
     , TO_CHAR(TO_DATE(SUMMERY.OPER_IN_TIME,'yyyymmddhh24miss')) AS OPER_IN_TIME 
     , TO_CHAR(TO_DATE(SUMMERY.TRAN_TIME,'yyyymmddhh24miss')) AS TRAN_TIME 
     , DECODE(SUMMERY.TRAN_CMF_18, ' ', ' ', SUMMERY.IN_USER_DESC || '(' || SUMMERY.TRAN_CMF_18 || ')') AS IN_USER_ID 
     , SUMMERY.END_USER_DESC || '(' || SUMMERY.TRAN_USER_ID || ')' AS END_USER_ID 
     , SUMMERY.LOT_CMF_10 
     , SUMMERY.TRAN_CMF_2 AS HD 
     , SUMMERY.TRAN_CMF_3 AS PGM 
     , SUMMERY.CRR_ID 
     , '' EPOXY 
     , '' LF 
     , '' GW 
     , '' MATAL_CARD 
     , '' EMC_LOT 
     , '' EMC_CAN 
     , '' EMC_TYPE 
     , SUMMERY.TRAN_COMMENT 
     , SUMMERY.QTY_2 
     , SUMMERY.TRAN_CMF_17 AS CV 
     , SUMMERY.LOT_CMF_7 AS ASSY_SITE 
     , SUMMERY.LOT_CMF_11 AS SHIP_SITE 
     , SUMMERY.TRAN_CMF_7 AS REWORK_BALL 
     , SUMMERY.TRAN_CMF_8 AS REWORK_CLEAN 
     , SUMMERY.TRAN_CMF_9 AS REWORK_PRINT 
     , LOT_CMF_3 
  FROM (  
        SELECT MAT_ID 
             , LOT_ID 
             , LOT_CMF_5 
             , LOT_CMF_10 
             , OLD_OPER AS OPER 
             , END_RES_ID 
             , TRAN_CMF_2 
             , TRAN_CMF_3 
             , NVL(( 
                    SELECT SUM(LOSS_QTY) AS LOSS_QTY 
                      FROM RWIPLOTLSM 
                     WHERE LOT_ID = A.LOT_ID 
                       AND OPER = A.OLD_OPER 
                     GROUP BY LOT_ID 
                  ), 0) AS LOSS_QTY 
             , CASE WHEN TRAN_CODE = 'SHIP' AND FACTORY = OLD_FACTORY THEN OLD_QTY_1 - QTY_1 
                    ELSE QTY_1 
               END QTY_1 
             , DECODE(START_TIME, ' ', OLD_OPER_IN_TIME, START_TIME) AS OPER_IN_TIME 
             , TRAN_TIME 
             , TRAN_USER_ID 
             , CRR_ID 
             , TRAN_COMMENT 
             , ( 
                SELECT USER_DESC FROM RWEBUSRDEF WHERE FACTORY = 'SYSTEM' AND USER_ID = A.TRAN_USER_ID 
               ) AS END_USER_DESC 
             , QTY_2 
             , CASE WHEN A.OLD_OPER LIKE 'A040%' AND A.RESV_FLAG_5 = 'Y' AND (SELECT CASE WHEN (TRAN_CMF_4 = 'RFID TAG WRITE : SUCCESS') 
                                                                                            OR (RESV_FLAG_5 = 'Y' AND TRAN_CMF_19 = 'RFID' AND TRAN_USER_ID = 'EIS') THEN 'RFID' 
                                                                                          ELSE ' ' 
                                                                                     END  
                                                                                FROM RWIPLOTHIS 
                                                                               WHERE FACTORY = A.OLD_FACTORY 
                                                                                 AND LOT_TYPE = A.OLD_LOT_TYPE 
                                                                                 AND LOT_ID = A.LOT_ID 
                                                                                 AND OPER = A.OLD_OPER 
                                                                                 AND TRAN_TIME < A.TRAN_TIME 
                                                                                 AND FACTORY = 'HMVA2' 
                                                                                 AND LOT_TYPE = 'W' 
                                                                                 AND RESV_FLAG_5 = 'Y' 
                                                                                 AND TRAN_CODE = 'START' 
                                                                                 AND HIST_DEL_FLAG = ' ') = 'RFID' THEN TRAN_CMF_18 || '[RFID]' 
                     WHEN A.OLD_OPER NOT LIKE 'A040%' AND A.RESV_FLAG_5 = 'Y' AND A.TRAN_CMF_19 = 'RFID' AND A.TRAN_USER_ID = 'EIS' THEN TRAN_CMF_18 || '[' || TRIM(TRAN_CMF_19) || ']' 
                     ELSE TRAN_CMF_18 
               END AS TRAN_CMF_18 
             , ( 
                SELECT USER_DESC FROM RWEBUSRDEF WHERE FACTORY = 'SYSTEM' AND USER_ID = A.TRAN_CMF_18 
               ) AS IN_USER_DESC 
             , LOT_CMF_7 
             , TRAN_CMF_17 
             , LOT_CMF_11 
             , TRAN_CMF_7 
             , TRAN_CMF_8 
             , TRAN_CMF_9 
             , LOT_CMF_3 
          FROM RWIPLOTHIS A 
         WHERE 1=1 
           AND TRAN_TIME BETWEEN '20200720070000' AND '20200721215959' 
           AND OLD_FACTORY = 'HMVA2' 
           AND TRAN_CODE IN ('END','SHIP') 
           AND LOT_TYPE = 'W' 
           AND HIST_DEL_FLAG = ' ' 
           AND OLD_OPER IN ('A0040')
           AND END_RES_ID LIKE '%'
           AND LOT_CMF_5 LIKE '%'
       ) SUMMERY 
     , MWIPMATDEF MAT 
 WHERE 1=1 
   AND SUMMERY.MAT_ID = MAT.MAT_ID 
   AND MAT.FACTORY = 'HMVA2' 
   AND MAT.MAT_TYPE = 'FG' 
 ORDER BY  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', SUMMERY.OPER,  ' ',  ' ',SUMMERY.END_RES_ID,LOT_ID,MAT_ID 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', SUMMERY.OPER,  ' ',  ' '
     , SUMMERY.MAT_ID 
     , SUMMERY.LOT_ID 
     , SUMMERY.LOT_CMF_5 
     , SUMMERY.END_RES_ID 
     , SUMMERY.QTY_1 + SUMMERY.LOSS_QTY AS OPER_IN_QTY_1 
     , SUMMERY.QTY_1 
     , ROUND(SUMMERY.QTY_1/(SUMMERY.QTY_1 + SUMMERY.LOSS_QTY)*100,3) AS YIELD 
     , TO_CHAR(TO_DATE(SUMMERY.OPER_IN_TIME,'yyyymmddhh24miss')) AS OPER_IN_TIME 
     , TO_CHAR(TO_DATE(SUMMERY.TRAN_TIME,'yyyymmddhh24miss')) AS TRAN_TIME 
     , DECODE(SUMMERY.TRAN_CMF_18, ' ', ' ', SUMMERY.IN_USER_DESC || '(' || SUMMERY.TRAN_CMF_18 || ')') AS IN_USER_ID 
     , SUMMERY.END_USER_DESC || '(' || SUMMERY.TRAN_USER_ID || ')' AS END_USER_ID 
     , SUMMERY.LOT_CMF_10 
     , SUMMERY.TRAN_CMF_2 AS HD 
     , SUMMERY.TRAN_CMF_3 AS PGM 
     , SUMMERY.CRR_ID 
     , '' EPOXY 
     , '' LF 
     , '' GW 
     , '' MATAL_CARD 
     , '' EMC_LOT 
     , '' EMC_CAN 
     , '' EMC_TYPE 
     , SUMMERY.TRAN_COMMENT 
     , SUMMERY.QTY_2 
     , SUMMERY.TRAN_CMF_17 AS CV 
     , SUMMERY.LOT_CMF_7 AS ASSY_SITE 
     , SUMMERY.LOT_CMF_11 AS SHIP_SITE 
     , SUMMERY.TRAN_CMF_7 AS REWORK_BALL 
     , SUMMERY.TRAN_CMF_8 AS REWORK_CLEAN 
     , SUMMERY.TRAN_CMF_9 AS REWORK_PRINT 
     , LOT_CMF_3 
  FROM (  
        SELECT MAT_ID 
             , LOT_ID 
             , LOT_CMF_5 
             , LOT_CMF_10 
             , OLD_OPER AS OPER 
             , END_RES_ID 
             , TRAN_CMF_2 
             , TRAN_CMF_3 
             , NVL(( 
                    SELECT SUM(LOSS_QTY) AS LOSS_QTY 
                      FROM RWIPLOTLSM 
                     WHERE LOT_ID = A.LOT_ID 
                       AND OPER = A.OLD_OPER 
                     GROUP BY LOT_ID 
                  ), 0) AS LOSS_QTY 
             , CASE WHEN TRAN_CODE = 'SHIP' AND FACTORY = OLD_FACTORY THEN OLD_QTY_1 - QTY_1 
                    ELSE QTY_1 
               END QTY_1 
             , DECODE(START_TIME, ' ', OLD_OPER_IN_TIME, START_TIME) AS OPER_IN_TIME 
             , TRAN_TIME 
             , TRAN_USER_ID 
             , CRR_ID 
             , TRAN_COMMENT 
             , ( 
                SELECT USER_DESC FROM RWEBUSRDEF WHERE FACTORY = 'SYSTEM' AND USER_ID = A.TRAN_USER_ID 
               ) AS END_USER_DESC 
             , QTY_2 
             , CASE WHEN A.OLD_OPER LIKE 'A040%' AND A.RESV_FLAG_5 = 'Y' AND (SELECT CASE WHEN (TRAN_CMF_4 = 'RFID TAG WRITE : SUCCESS') 
                                                                                            OR (RESV_FLAG_5 = 'Y' AND TRAN_CMF_19 = 'RFID' AND TRAN_USER_ID = 'EIS') THEN 'RFID' 
                                                                                          ELSE ' ' 
                                                                                     END  
                                                                                FROM RWIPLOTHIS 
                                                                               WHERE FACTORY = A.OLD_FACTORY 
                                                                                 AND LOT_TYPE = A.OLD_LOT_TYPE 
                                                                                 AND LOT_ID = A.LOT_ID 
                                                                                 AND OPER = A.OLD_OPER 
                                                                                 AND TRAN_TIME < A.TRAN_TIME 
                                                                                 AND FACTORY = 'HMVA2' 
                                                                                 AND LOT_TYPE = 'W' 
                                                                                 AND RESV_FLAG_5 = 'Y' 
                                                                                 AND TRAN_CODE = 'START' 
                                                                                 AND HIST_DEL_FLAG = ' ') = 'RFID' THEN TRAN_CMF_18 || '[RFID]' 
                     WHEN A.OLD_OPER NOT LIKE 'A040%' AND A.RESV_FLAG_5 = 'Y' AND A.TRAN_CMF_19 = 'RFID' AND A.TRAN_USER_ID = 'EIS' THEN TRAN_CMF_18 || '[' || TRIM(TRAN_CMF_19) || ']' 
                     ELSE TRAN_CMF_18 
               END AS TRAN_CMF_18 
             , ( 
                SELECT USER_DESC FROM RWEBUSRDEF WHERE FACTORY = 'SYSTEM' AND USER_ID = A.TRAN_CMF_18 
               ) AS IN_USER_DESC 
             , LOT_CMF_7 
             , TRAN_CMF_17 
             , LOT_CMF_11 
             , TRAN_CMF_7 
             , TRAN_CMF_8 
             , TRAN_CMF_9 
             , LOT_CMF_3 
          FROM RWIPLOTHIS A 
         WHERE 1=1 
           AND TRAN_TIME BETWEEN '20200719070000' AND '20200721215959' 
           AND OLD_FACTORY = 'HMVA2' 
           AND TRAN_CODE IN ('END','SHIP') 
           AND LOT_TYPE = 'W' 
           AND HIST_DEL_FLAG = ' ' 
           AND OLD_OPER IN ('A0040')
           AND END_RES_ID LIKE '%'
           AND LOT_CMF_5 LIKE '%'
       ) SUMMERY 
     , MWIPMATDEF MAT 
 WHERE 1=1 
   AND SUMMERY.MAT_ID = MAT.MAT_ID 
   AND MAT.FACTORY = 'HMVA2' 
   AND MAT.MAT_TYPE = 'FG' 
 ORDER BY  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', SUMMERY.OPER,  ' ',  ' ',SUMMERY.END_RES_ID,LOT_ID,MAT_ID 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
        SELECT (SELECT DATA_1 FROM MGCMTBLDAT WHERE TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = MAT_GRP_1 AND ROWNUM=1) AS CUSTOMER,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT_CMF_10, MAT_ID, OPER,  ' ', CASE WHEN OPER <= 'A0200' THEN VENDOR_MAT_ID ELSE BASE_MAT_ID END SAP_CODE
             , SUM(TOTAL) AS TOTAL
             , SUM(ASSY_END_QTY0 ) VAL0
             , SUM(ASSY_END_QTY1 ) VAL1
             , SUM(ASSY_END_QTY2 ) VAL2
             , SUM(ASSY_END_QTY3 ) VAL3
             , SUM(ASSY_END_QTY4 ) VAL4
             , SUM(ASSY_END_QTY5 ) VAL5
             , SUM(ASSY_END_QTY6 ) VAL6
             , SUM(ASSY_END_QTY7 ) VAL7
             , SUM(ASSY_END_QTY8 ) VAL8
             , SUM(ASSY_END_QTY9 ) VAL9
             , SUM(ASSY_END_QTY10 ) VAL10
             , SUM(ASSY_END_QTY11 ) VAL11
             , SUM(ASSY_END_QTY12 ) VAL12
             , SUM(ASSY_END_QTY13 ) VAL13
             , SUM(ASSY_END_QTY14 ) VAL14
             , SUM(ASSY_END_QTY15 ) VAL15
             , SUM(ASSY_END_QTY16 ) VAL16
             , SUM(ASSY_END_QTY17 ) VAL17
             , SUM(ASSY_END_QTY18 ) VAL18
             , SUM(ASSY_END_QTY19 ) VAL19
             , SUM(ASSY_END_QTY20 ) VAL20
             , SUM(ASSY_END_QTY21 ) VAL21
             , SUM(ASSY_END_QTY22 ) VAL22
             , SUM(ASSY_END_QTY23 ) VAL23
             , SUM(ASSY_END_QTY24 ) VAL24
             , SUM(ASSY_END_QTY25 ) VAL25
             , SUM(ASSY_END_QTY26 ) VAL26
             , SUM(ASSY_END_QTY27 ) VAL27
             , SUM(ASSY_END_QTY28 ) VAL28
             , SUM(ASSY_END_QTY29 ) VAL29
             , SUM(ASSY_END_QTY30 ) VAL30
             , SUM(ASSY_END_QTY31 ) VAL31
             , SUM(ASSY_END_QTY32 ) VAL32
             , ROUND(SUM(TOTAL)/33, 1) AVG
          FROM (
               SELECT B.MAT_GRP_1,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', B.MAT_CMF_10, B.MAT_ID, A.OPER,  ' ', BASE_MAT_ID,VENDOR_MAT_ID 
                    , DECODE(WORK_DATE, '20200714', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY0
                    , DECODE(WORK_DATE, '20200715', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY1
                    , DECODE(WORK_DATE, '20200716', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY2
                    , DECODE(WORK_DATE, '20200717', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY3
                    , DECODE(WORK_DATE, '20200718', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY4
                    , DECODE(WORK_DATE, '20200719', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY5
                    , DECODE(WORK_DATE, '20200720', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY6
                    , DECODE(WORK_DATE, '20200721', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY7
                    , DECODE(WORK_DATE, '20200722', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY8
                    , DECODE(WORK_DATE, '20200723', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY9
                    , DECODE(WORK_DATE, '20200724', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY10
                    , DECODE(WORK_DATE, '20200725', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY11
                    , DECODE(WORK_DATE, '20200726', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY12
                    , DECODE(WORK_DATE, '20200727', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY13
                    , DECODE(WORK_DATE, '20200728', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY14
                    , DECODE(WORK_DATE, '20200729', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY15
                    , DECODE(WORK_DATE, '20200730', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY16
                    , DECODE(WORK_DATE, '20200731', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY17
                    , DECODE(WORK_DATE, '20200801', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY18
                    , DECODE(WORK_DATE, '20200802', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY19
                    , DECODE(WORK_DATE, '20200803', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY20
                    , DECODE(WORK_DATE, '20200804', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY21
                    , DECODE(WORK_DATE, '20200805', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY22
                    , DECODE(WORK_DATE, '20200806', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY23
                    , DECODE(WORK_DATE, '20200807', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY24
                    , DECODE(WORK_DATE, '20200808', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY25
                    , DECODE(WORK_DATE, '20200809', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY26
                    , DECODE(WORK_DATE, '20200810', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY27
                    , DECODE(WORK_DATE, '20200811', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY28
                    , DECODE(WORK_DATE, '20200812', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY29
                    , DECODE(WORK_DATE, '20200813', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY30
                    , DECODE(WORK_DATE, '20200814', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY31
                    , DECODE(WORK_DATE, '20200815', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY32
                    , (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END) TOTAL
                 FROM (
                      SELECT FACTORY, MAT_ID, OPER, LOT_TYPE, MAT_VER, WORK_DATE, CM_KEY_3
                           , SUM(END_LOT) AS END_LOT
                           , SUM(END_QTY_1) AS END_QTY_1
                           , SUM(END_QTY_2) AS END_QTY_2
                           , SUM(SHIP_QTY_1) AS SHIP_QTY_1
                           , SUM(SHIP_QTY_2) AS SHIP_QTY_2
                        FROM (
                             SELECT FACTORY, MAT_ID, OPER, LOT_TYPE, MAT_VER, WORK_DATE, CM_KEY_3
                           , DECODE(SUBSTR(OPER,2,4),'0000',SUM(S1_OPER_IN_LOT+S2_OPER_IN_LOT+S3_OPER_IN_LOT),SUM(S1_END_LOT+S2_END_LOT+S3_END_LOT)) END_LOT
                           , DECODE(SUBSTR(OPER,2,4),'0000',SUM(S1_OPER_IN_QTY_1+S2_OPER_IN_QTY_1+S3_OPER_IN_QTY_1),SUM(S1_END_QTY_1+S2_END_QTY_1+S3_END_QTY_1+S1_END_RWK_QTY_1 + S2_END_RWK_QTY_1 + S3_END_RWK_QTY_1)) END_QTY_1
                           , DECODE(SUBSTR(OPER,2,4),'0000',SUM(S1_OPER_IN_QTY_2+S2_OPER_IN_QTY_2+S3_OPER_IN_QTY_2),SUM(S1_END_QTY_2+S2_END_QTY_2+S3_END_QTY_2+S1_END_RWK_QTY_2 + S2_END_RWK_QTY_2 + S3_END_RWK_QTY_2)) END_QTY_2
                           , 0 SHIP_QTY_1
                           , 0 SHIP_QTY_2
                        FROM RSUMWIPMOV 
                       WHERE OPER NOT IN ('AZ010','TZ010','F0000','EZ010', 'SZ010', 'BZ010')
                    GROUP BY FACTORY, MAT_ID, OPER, LOT_TYPE, MAT_VER, WORK_DATE, CM_KEY_3
                   UNION ALL
                      SELECT CM_KEY_1 AS FACTORY, MAT_ID
                           , DECODE(CM_KEY_1,'HMVA2','AZ010','HMKT1','TZ010','FGS','F0000','HMKE1','EZ010','HMKS1','SZ010', 'BZ010') OPER
                           , LOT_TYPE, MAT_VER,  WORK_DATE,CM_KEY_3
                           , 0 END_LOT
                           , 0 END_QTY_1
                           , 0 END_QTY_2
                           , SUM(S1_FAC_OUT_QTY_1+S2_FAC_OUT_QTY_1+S3_FAC_OUT_QTY_1) SHIP_QTY_1
                           , SUM(S1_FAC_OUT_QTY_2+S2_FAC_OUT_QTY_2+S3_FAC_OUT_QTY_2) SHIP_QTY_2
                        FROM RSUMFACMOV 
                       WHERE FACTORY NOT IN ('RETURN')
                    GROUP BY CM_KEY_1, MAT_ID, OPER, LOT_TYPE, MAT_VER, WORK_DATE, CM_KEY_3
                             )
                    GROUP BY FACTORY, MAT_ID, OPER, LOT_TYPE, MAT_VER, WORK_DATE, CM_KEY_3
                    )A
                  , MWIPMATDEF B 
              WHERE 1=1 
                AND A.FACTORY  = 'HMVA2' 
                AND A.FACTORY = B.FACTORY 
                AND A.MAT_ID = B.MAT_ID                
                AND A.MAT_VER = 1 
                AND B.MAT_VER = 1 
                AND B.MAT_TYPE = 'FG' 
                AND A.OPER IN ('A0000', 'A0040', 'A0200', 'A0400', 'A0600', 'A1000', 'A1150', 'A1810', 'A1825', 'AZ010')
                AND A.MAT_ID LIKE '%'  
                AND A.OPER NOT IN ('00001','00002') 
                AND A.WORK_DATE BETWEEN '20200714' AND '20200815' 
         )   
   WHERE TOTAL > 0           
GROUP BY MAT_GRP_1,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT_CMF_10, MAT_ID, OPER,  ' ', BASE_MAT_ID,VENDOR_MAT_ID
ORDER BY MAT_GRP_1,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT_CMF_10, MAT_ID, DECODE(OPER,'AISSUE','A0001','TISSUE','T0001','EISSUE','E0001',OPER),  ' ', BASE_MAT_ID,VENDOR_MAT_ID

-------------------------------------------------------------
SELECT * FROM RWEBUSRDEF WHERE FACTORY = :FACTORY AND USER_ID= :USER_ID
-------------------------------------------------------------
SELECT A.FUNC_GRP_SEQ,A.SEC_GRP_ID,A.FUNC_GRP_ID,NVL(A.FUNC_NAME, ' ') FUNC_NAME, NVL(B.FUNC_DESC, ' ') FUNC_DESC, LANGUAGE_1, LANGUAGE_2, LANGUAGE_3
  FROM RWEBGRPFUN A, RWEBFUNDEF B
 WHERE A.FACTORY = :p_FACTORY
   AND A.SEC_GRP_ID = :p_SEC_GRP_ID
   AND A.FUNC_NAME=B.FUNC_NAME(+)
 ORDER BY A.FUNC_GRP_SEQ, A.FUNC_SEQ
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
 SELECT PLAN_WEEK V1    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_DATE = TO_CHAR(SYSDATE,'yyyymmdd')      AND ROWNUM = 1  
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT LANGUAGE_1 FROM RWEBFUNDEF WHERE FUNC_NAME = 'PRD010405'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT FACTORY Code, FAC_DESC Data
  FROM MWIPFACDEF
 WHERE FAC_GRP_5 = 'Y' 
 ORDER BY FAC_GRP_4 ASC
-------------------------------------------------------------
SELECT OPER, OPER_DESC  FROM MWIPOPRDEF
  WHERE FACTORY = 'HMVA2'  AND OPER NOT IN ('00001', '00002') AND OPER NOT LIKE 'V%' ORDER BY DECODE(OPER_CMF_2, ' ', 99999, TO_NUMBER(OPER_CMF_2)), OPER
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', SUMMERY.OPER,  ' ',  ' '
     , SUMMERY.MAT_ID 
     , SUMMERY.LOT_ID 
     , SUMMERY.LOT_CMF_5 
     , SUMMERY.END_RES_ID 
     , SUMMERY.QTY_1 + SUMMERY.LOSS_QTY AS OPER_IN_QTY_1 
     , SUMMERY.QTY_1 
     , ROUND(SUMMERY.QTY_1/(SUMMERY.QTY_1 + SUMMERY.LOSS_QTY)*100,3) AS YIELD 
     , TO_CHAR(TO_DATE(SUMMERY.OPER_IN_TIME,'yyyymmddhh24miss')) AS OPER_IN_TIME 
     , TO_CHAR(TO_DATE(SUMMERY.TRAN_TIME,'yyyymmddhh24miss')) AS TRAN_TIME 
     , DECODE(SUMMERY.TRAN_CMF_18, ' ', ' ', SUMMERY.IN_USER_DESC || '(' || SUMMERY.TRAN_CMF_18 || ')') AS IN_USER_ID 
     , SUMMERY.END_USER_DESC || '(' || SUMMERY.TRAN_USER_ID || ')' AS END_USER_ID 
     , SUMMERY.LOT_CMF_10 
     , SUMMERY.TRAN_CMF_2 AS HD 
     , SUMMERY.TRAN_CMF_3 AS PGM 
     , SUMMERY.CRR_ID 
     , '' EPOXY 
     , '' LF 
     , '' GW 
     , '' MATAL_CARD 
     , '' EMC_LOT 
     , '' EMC_CAN 
     , '' EMC_TYPE 
     , SUMMERY.TRAN_COMMENT 
     , SUMMERY.QTY_2 
     , SUMMERY.TRAN_CMF_17 AS CV 
     , SUMMERY.LOT_CMF_7 AS ASSY_SITE 
     , SUMMERY.LOT_CMF_11 AS SHIP_SITE 
     , SUMMERY.TRAN_CMF_7 AS REWORK_BALL 
     , SUMMERY.TRAN_CMF_8 AS REWORK_CLEAN 
     , SUMMERY.TRAN_CMF_9 AS REWORK_PRINT 
     , LOT_CMF_3 
  FROM (  
        SELECT MAT_ID 
             , LOT_ID 
             , LOT_CMF_5 
             , LOT_CMF_10 
             , OLD_OPER AS OPER 
             , END_RES_ID 
             , TRAN_CMF_2 
             , TRAN_CMF_3 
             , NVL(( 
                    SELECT SUM(LOSS_QTY) AS LOSS_QTY 
                      FROM RWIPLOTLSM 
                     WHERE LOT_ID = A.LOT_ID 
                       AND OPER = A.OLD_OPER 
                     GROUP BY LOT_ID 
                  ), 0) AS LOSS_QTY 
             , CASE WHEN TRAN_CODE = 'SHIP' AND FACTORY = OLD_FACTORY THEN OLD_QTY_1 - QTY_1 
                    ELSE QTY_1 
               END QTY_1 
             , DECODE(START_TIME, ' ', OLD_OPER_IN_TIME, START_TIME) AS OPER_IN_TIME 
             , TRAN_TIME 
             , TRAN_USER_ID 
             , CRR_ID 
             , TRAN_COMMENT 
             , ( 
                SELECT USER_DESC FROM RWEBUSRDEF WHERE FACTORY = 'SYSTEM' AND USER_ID = A.TRAN_USER_ID 
               ) AS END_USER_DESC 
             , QTY_2 
             , CASE WHEN A.OLD_OPER LIKE 'A040%' AND A.RESV_FLAG_5 = 'Y' AND (SELECT CASE WHEN (TRAN_CMF_4 = 'RFID TAG WRITE : SUCCESS') 
                                                                                            OR (RESV_FLAG_5 = 'Y' AND TRAN_CMF_19 = 'RFID' AND TRAN_USER_ID = 'EIS') THEN 'RFID' 
                                                                                          ELSE ' ' 
                                                                                     END  
                                                                                FROM RWIPLOTHIS 
                                                                               WHERE FACTORY = A.OLD_FACTORY 
                                                                                 AND LOT_TYPE = A.OLD_LOT_TYPE 
                                                                                 AND LOT_ID = A.LOT_ID 
                                                                                 AND OPER = A.OLD_OPER 
                                                                                 AND TRAN_TIME < A.TRAN_TIME 
                                                                                 AND FACTORY = 'HMVA2' 
                                                                                 AND LOT_TYPE = 'W' 
                                                                                 AND RESV_FLAG_5 = 'Y' 
                                                                                 AND TRAN_CODE = 'START' 
                                                                                 AND HIST_DEL_FLAG = ' ') = 'RFID' THEN TRAN_CMF_18 || '[RFID]' 
                     WHEN A.OLD_OPER NOT LIKE 'A040%' AND A.RESV_FLAG_5 = 'Y' AND A.TRAN_CMF_19 = 'RFID' AND A.TRAN_USER_ID = 'EIS' THEN TRAN_CMF_18 || '[' || TRIM(TRAN_CMF_19) || ']' 
                     ELSE TRAN_CMF_18 
               END AS TRAN_CMF_18 
             , ( 
                SELECT USER_DESC FROM RWEBUSRDEF WHERE FACTORY = 'SYSTEM' AND USER_ID = A.TRAN_CMF_18 
               ) AS IN_USER_DESC 
             , LOT_CMF_7 
             , TRAN_CMF_17 
             , LOT_CMF_11 
             , TRAN_CMF_7 
             , TRAN_CMF_8 
             , TRAN_CMF_9 
             , LOT_CMF_3 
          FROM RWIPLOTHIS A 
         WHERE 1=1 
           AND TRAN_TIME BETWEEN '20200720200000' AND '20200721215959' 
           AND OLD_FACTORY = 'HMVA2' 
           AND TRAN_CODE IN ('END','SHIP') 
           AND LOT_TYPE = 'W' 
           AND HIST_DEL_FLAG = ' ' 
           AND OLD_OPER IN ('A0400')
           AND END_RES_ID LIKE '%'
           AND LOT_CMF_5 LIKE '%'
       ) SUMMERY 
     , MWIPMATDEF MAT 
 WHERE 1=1 
   AND SUMMERY.MAT_ID = MAT.MAT_ID 
   AND MAT.FACTORY = 'HMVA2' 
   AND MAT.MAT_TYPE = 'FG' 
 ORDER BY  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', SUMMERY.OPER,  ' ',  ' ',SUMMERY.END_RES_ID,LOT_ID,MAT_ID 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', SUMMERY.OPER,  ' ',  ' '
     , SUMMERY.MAT_ID 
     , SUMMERY.LOT_ID 
     , SUMMERY.LOT_CMF_5 
     , SUMMERY.END_RES_ID 
     , SUMMERY.QTY_1 + SUMMERY.LOSS_QTY AS OPER_IN_QTY_1 
     , SUMMERY.QTY_1 
     , ROUND(SUMMERY.QTY_1/(SUMMERY.QTY_1 + SUMMERY.LOSS_QTY)*100,3) AS YIELD 
     , TO_CHAR(TO_DATE(SUMMERY.OPER_IN_TIME,'yyyymmddhh24miss')) AS OPER_IN_TIME 
     , TO_CHAR(TO_DATE(SUMMERY.TRAN_TIME,'yyyymmddhh24miss')) AS TRAN_TIME 
     , DECODE(SUMMERY.TRAN_CMF_18, ' ', ' ', SUMMERY.IN_USER_DESC || '(' || SUMMERY.TRAN_CMF_18 || ')') AS IN_USER_ID 
     , SUMMERY.END_USER_DESC || '(' || SUMMERY.TRAN_USER_ID || ')' AS END_USER_ID 
     , SUMMERY.LOT_CMF_10 
     , SUMMERY.TRAN_CMF_2 AS HD 
     , SUMMERY.TRAN_CMF_3 AS PGM 
     , SUMMERY.CRR_ID 
     , '' EPOXY 
     , '' LF 
     , '' GW 
     , '' MATAL_CARD 
     , '' EMC_LOT 
     , '' EMC_CAN 
     , '' EMC_TYPE 
     , SUMMERY.TRAN_COMMENT 
     , SUMMERY.QTY_2 
     , SUMMERY.TRAN_CMF_17 AS CV 
     , SUMMERY.LOT_CMF_7 AS ASSY_SITE 
     , SUMMERY.LOT_CMF_11 AS SHIP_SITE 
     , SUMMERY.TRAN_CMF_7 AS REWORK_BALL 
     , SUMMERY.TRAN_CMF_8 AS REWORK_CLEAN 
     , SUMMERY.TRAN_CMF_9 AS REWORK_PRINT 
     , LOT_CMF_3 
  FROM (  
        SELECT MAT_ID 
             , LOT_ID 
             , LOT_CMF_5 
             , LOT_CMF_10 
             , OLD_OPER AS OPER 
             , END_RES_ID 
             , TRAN_CMF_2 
             , TRAN_CMF_3 
             , NVL(( 
                    SELECT SUM(LOSS_QTY) AS LOSS_QTY 
                      FROM RWIPLOTLSM 
                     WHERE LOT_ID = A.LOT_ID 
                       AND OPER = A.OLD_OPER 
                     GROUP BY LOT_ID 
                  ), 0) AS LOSS_QTY 
             , CASE WHEN TRAN_CODE = 'SHIP' AND FACTORY = OLD_FACTORY THEN OLD_QTY_1 - QTY_1 
                    ELSE QTY_1 
               END QTY_1 
             , DECODE(START_TIME, ' ', OLD_OPER_IN_TIME, START_TIME) AS OPER_IN_TIME 
             , TRAN_TIME 
             , TRAN_USER_ID 
             , CRR_ID 
             , TRAN_COMMENT 
             , ( 
                SELECT USER_DESC FROM RWEBUSRDEF WHERE FACTORY = 'SYSTEM' AND USER_ID = A.TRAN_USER_ID 
               ) AS END_USER_DESC 
             , QTY_2 
             , CASE WHEN A.OLD_OPER LIKE 'A040%' AND A.RESV_FLAG_5 = 'Y' AND (SELECT CASE WHEN (TRAN_CMF_4 = 'RFID TAG WRITE : SUCCESS') 
                                                                                            OR (RESV_FLAG_5 = 'Y' AND TRAN_CMF_19 = 'RFID' AND TRAN_USER_ID = 'EIS') THEN 'RFID' 
                                                                                          ELSE ' ' 
                                                                                     END  
                                                                                FROM RWIPLOTHIS 
                                                                               WHERE FACTORY = A.OLD_FACTORY 
                                                                                 AND LOT_TYPE = A.OLD_LOT_TYPE 
                                                                                 AND LOT_ID = A.LOT_ID 
                                                                                 AND OPER = A.OLD_OPER 
                                                                                 AND TRAN_TIME < A.TRAN_TIME 
                                                                                 AND FACTORY = 'HMVA2' 
                                                                                 AND LOT_TYPE = 'W' 
                                                                                 AND RESV_FLAG_5 = 'Y' 
                                                                                 AND TRAN_CODE = 'START' 
                                                                                 AND HIST_DEL_FLAG = ' ') = 'RFID' THEN TRAN_CMF_18 || '[RFID]' 
                     WHEN A.OLD_OPER NOT LIKE 'A040%' AND A.RESV_FLAG_5 = 'Y' AND A.TRAN_CMF_19 = 'RFID' AND A.TRAN_USER_ID = 'EIS' THEN TRAN_CMF_18 || '[' || TRIM(TRAN_CMF_19) || ']' 
                     ELSE TRAN_CMF_18 
               END AS TRAN_CMF_18 
             , ( 
                SELECT USER_DESC FROM RWEBUSRDEF WHERE FACTORY = 'SYSTEM' AND USER_ID = A.TRAN_CMF_18 
               ) AS IN_USER_DESC 
             , LOT_CMF_7 
             , TRAN_CMF_17 
             , LOT_CMF_11 
             , TRAN_CMF_7 
             , TRAN_CMF_8 
             , TRAN_CMF_9 
             , LOT_CMF_3 
          FROM RWIPLOTHIS A 
         WHERE 1=1 
           AND TRAN_TIME BETWEEN '20200720240000' AND '20200721215959' 
           AND OLD_FACTORY = 'HMVA2' 
           AND TRAN_CODE IN ('END','SHIP') 
           AND LOT_TYPE = 'W' 
           AND HIST_DEL_FLAG = ' ' 
           AND OLD_OPER IN ('A0400')
           AND END_RES_ID LIKE '%'
           AND LOT_CMF_5 LIKE '%'
       ) SUMMERY 
     , MWIPMATDEF MAT 
 WHERE 1=1 
   AND SUMMERY.MAT_ID = MAT.MAT_ID 
   AND MAT.FACTORY = 'HMVA2' 
   AND MAT.MAT_TYPE = 'FG' 
 ORDER BY  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', SUMMERY.OPER,  ' ',  ' ',SUMMERY.END_RES_ID,LOT_ID,MAT_ID 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', SUMMERY.OPER,  ' ',  ' '
     , SUMMERY.MAT_ID 
     , SUMMERY.LOT_ID 
     , SUMMERY.LOT_CMF_5 
     , SUMMERY.END_RES_ID 
     , SUMMERY.QTY_1 + SUMMERY.LOSS_QTY AS OPER_IN_QTY_1 
     , SUMMERY.QTY_1 
     , ROUND(SUMMERY.QTY_1/(SUMMERY.QTY_1 + SUMMERY.LOSS_QTY)*100,3) AS YIELD 
     , TO_CHAR(TO_DATE(SUMMERY.OPER_IN_TIME,'yyyymmddhh24miss')) AS OPER_IN_TIME 
     , TO_CHAR(TO_DATE(SUMMERY.TRAN_TIME,'yyyymmddhh24miss')) AS TRAN_TIME 
     , DECODE(SUMMERY.TRAN_CMF_18, ' ', ' ', SUMMERY.IN_USER_DESC || '(' || SUMMERY.TRAN_CMF_18 || ')') AS IN_USER_ID 
     , SUMMERY.END_USER_DESC || '(' || SUMMERY.TRAN_USER_ID || ')' AS END_USER_ID 
     , SUMMERY.LOT_CMF_10 
     , SUMMERY.TRAN_CMF_2 AS HD 
     , SUMMERY.TRAN_CMF_3 AS PGM 
     , SUMMERY.CRR_ID 
     , '' EPOXY 
     , '' LF 
     , '' GW 
     , '' MATAL_CARD 
     , '' EMC_LOT 
     , '' EMC_CAN 
     , '' EMC_TYPE 
     , SUMMERY.TRAN_COMMENT 
     , SUMMERY.QTY_2 
     , SUMMERY.TRAN_CMF_17 AS CV 
     , SUMMERY.LOT_CMF_7 AS ASSY_SITE 
     , SUMMERY.LOT_CMF_11 AS SHIP_SITE 
     , SUMMERY.TRAN_CMF_7 AS REWORK_BALL 
     , SUMMERY.TRAN_CMF_8 AS REWORK_CLEAN 
     , SUMMERY.TRAN_CMF_9 AS REWORK_PRINT 
     , LOT_CMF_3 
  FROM (  
        SELECT MAT_ID 
             , LOT_ID 
             , LOT_CMF_5 
             , LOT_CMF_10 
             , OLD_OPER AS OPER 
             , END_RES_ID 
             , TRAN_CMF_2 
             , TRAN_CMF_3 
             , NVL(( 
                    SELECT SUM(LOSS_QTY) AS LOSS_QTY 
                      FROM RWIPLOTLSM 
                     WHERE LOT_ID = A.LOT_ID 
                       AND OPER = A.OLD_OPER 
                     GROUP BY LOT_ID 
                  ), 0) AS LOSS_QTY 
             , CASE WHEN TRAN_CODE = 'SHIP' AND FACTORY = OLD_FACTORY THEN OLD_QTY_1 - QTY_1 
                    ELSE QTY_1 
               END QTY_1 
             , DECODE(START_TIME, ' ', OLD_OPER_IN_TIME, START_TIME) AS OPER_IN_TIME 
             , TRAN_TIME 
             , TRAN_USER_ID 
             , CRR_ID 
             , TRAN_COMMENT 
             , ( 
                SELECT USER_DESC FROM RWEBUSRDEF WHERE FACTORY = 'SYSTEM' AND USER_ID = A.TRAN_USER_ID 
               ) AS END_USER_DESC 
             , QTY_2 
             , CASE WHEN A.OLD_OPER LIKE 'A040%' AND A.RESV_FLAG_5 = 'Y' AND (SELECT CASE WHEN (TRAN_CMF_4 = 'RFID TAG WRITE : SUCCESS') 
                                                                                            OR (RESV_FLAG_5 = 'Y' AND TRAN_CMF_19 = 'RFID' AND TRAN_USER_ID = 'EIS') THEN 'RFID' 
                                                                                          ELSE ' ' 
                                                                                     END  
                                                                                FROM RWIPLOTHIS 
                                                                               WHERE FACTORY = A.OLD_FACTORY 
                                                                                 AND LOT_TYPE = A.OLD_LOT_TYPE 
                                                                                 AND LOT_ID = A.LOT_ID 
                                                                                 AND OPER = A.OLD_OPER 
                                                                                 AND TRAN_TIME < A.TRAN_TIME 
                                                                                 AND FACTORY = 'HMVA2' 
                                                                                 AND LOT_TYPE = 'W' 
                                                                                 AND RESV_FLAG_5 = 'Y' 
                                                                                 AND TRAN_CODE = 'START' 
                                                                                 AND HIST_DEL_FLAG = ' ') = 'RFID' THEN TRAN_CMF_18 || '[RFID]' 
                     WHEN A.OLD_OPER NOT LIKE 'A040%' AND A.RESV_FLAG_5 = 'Y' AND A.TRAN_CMF_19 = 'RFID' AND A.TRAN_USER_ID = 'EIS' THEN TRAN_CMF_18 || '[' || TRIM(TRAN_CMF_19) || ']' 
                     ELSE TRAN_CMF_18 
               END AS TRAN_CMF_18 
             , ( 
                SELECT USER_DESC FROM RWEBUSRDEF WHERE FACTORY = 'SYSTEM' AND USER_ID = A.TRAN_CMF_18 
               ) AS IN_USER_DESC 
             , LOT_CMF_7 
             , TRAN_CMF_17 
             , LOT_CMF_11 
             , TRAN_CMF_7 
             , TRAN_CMF_8 
             , TRAN_CMF_9 
             , LOT_CMF_3 
          FROM RWIPLOTHIS A 
         WHERE 1=1 
           AND TRAN_TIME BETWEEN '20200721060000' AND '20200721215959' 
           AND OLD_FACTORY = 'HMVA2' 
           AND TRAN_CODE IN ('END','SHIP') 
           AND LOT_TYPE = 'W' 
           AND HIST_DEL_FLAG = ' ' 
           AND OLD_OPER IN ('A0400')
           AND END_RES_ID LIKE '%'
           AND LOT_CMF_5 LIKE '%'
       ) SUMMERY 
     , MWIPMATDEF MAT 
 WHERE 1=1 
   AND SUMMERY.MAT_ID = MAT.MAT_ID 
   AND MAT.FACTORY = 'HMVA2' 
   AND MAT.MAT_TYPE = 'FG' 
 ORDER BY  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', SUMMERY.OPER,  ' ',  ' ',SUMMERY.END_RES_ID,LOT_ID,MAT_ID 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
        SELECT (SELECT DATA_1 FROM MGCMTBLDAT WHERE TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = MAT_GRP_1 AND ROWNUM=1) AS CUSTOMER,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT_CMF_10, MAT_ID, OPER,  ' ', CASE WHEN OPER <= 'A0200' THEN VENDOR_MAT_ID ELSE BASE_MAT_ID END SAP_CODE
             , SUM(TOTAL) AS TOTAL
             , SUM(ASSY_END_QTY0 ) VAL0
             , SUM(ASSY_END_QTY1 ) VAL1
             , SUM(ASSY_END_QTY2 ) VAL2
             , SUM(ASSY_END_QTY3 ) VAL3
             , SUM(ASSY_END_QTY4 ) VAL4
             , SUM(ASSY_END_QTY5 ) VAL5
             , SUM(ASSY_END_QTY6 ) VAL6
             , SUM(ASSY_END_QTY7 ) VAL7
             , SUM(ASSY_END_QTY8 ) VAL8
             , SUM(ASSY_END_QTY9 ) VAL9
             , SUM(ASSY_END_QTY10 ) VAL10
             , SUM(ASSY_END_QTY11 ) VAL11
             , SUM(ASSY_END_QTY12 ) VAL12
             , SUM(ASSY_END_QTY13 ) VAL13
             , SUM(ASSY_END_QTY14 ) VAL14
             , SUM(ASSY_END_QTY15 ) VAL15
             , SUM(ASSY_END_QTY16 ) VAL16
             , SUM(ASSY_END_QTY17 ) VAL17
             , SUM(ASSY_END_QTY18 ) VAL18
             , SUM(ASSY_END_QTY19 ) VAL19
             , SUM(ASSY_END_QTY20 ) VAL20
             , SUM(ASSY_END_QTY21 ) VAL21
             , SUM(ASSY_END_QTY22 ) VAL22
             , SUM(ASSY_END_QTY23 ) VAL23
             , SUM(ASSY_END_QTY24 ) VAL24
             , SUM(ASSY_END_QTY25 ) VAL25
             , ROUND(SUM(TOTAL)/26, 1) AVG
          FROM (
               SELECT B.MAT_GRP_1,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', B.MAT_CMF_10, B.MAT_ID, A.OPER,  ' ', BASE_MAT_ID,VENDOR_MAT_ID 
                    , DECODE(WORK_DATE, '20200714', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY0
                    , DECODE(WORK_DATE, '20200715', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY1
                    , DECODE(WORK_DATE, '20200716', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY2
                    , DECODE(WORK_DATE, '20200717', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY3
                    , DECODE(WORK_DATE, '20200718', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY4
                    , DECODE(WORK_DATE, '20200719', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY5
                    , DECODE(WORK_DATE, '20200720', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY6
                    , DECODE(WORK_DATE, '20200721', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY7
                    , DECODE(WORK_DATE, '20200722', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY8
                    , DECODE(WORK_DATE, '20200723', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY9
                    , DECODE(WORK_DATE, '20200724', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY10
                    , DECODE(WORK_DATE, '20200725', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY11
                    , DECODE(WORK_DATE, '20200726', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY12
                    , DECODE(WORK_DATE, '20200727', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY13
                    , DECODE(WORK_DATE, '20200728', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY14
                    , DECODE(WORK_DATE, '20200729', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY15
                    , DECODE(WORK_DATE, '20200730', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY16
                    , DECODE(WORK_DATE, '20200731', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY17
                    , DECODE(WORK_DATE, '20200801', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY18
                    , DECODE(WORK_DATE, '20200802', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY19
                    , DECODE(WORK_DATE, '20200803', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY20
                    , DECODE(WORK_DATE, '20200804', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY21
                    , DECODE(WORK_DATE, '20200805', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY22
                    , DECODE(WORK_DATE, '20200806', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY23
                    , DECODE(WORK_DATE, '20200807', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY24
                    , DECODE(WORK_DATE, '20200808', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY25
                    , (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END) TOTAL
                 FROM (
                      SELECT FACTORY, MAT_ID, OPER, LOT_TYPE, MAT_VER, WORK_DATE, CM_KEY_3
                           , SUM(END_LOT) AS END_LOT
                           , SUM(END_QTY_1) AS END_QTY_1
                           , SUM(END_QTY_2) AS END_QTY_2
                           , SUM(SHIP_QTY_1) AS SHIP_QTY_1
                           , SUM(SHIP_QTY_2) AS SHIP_QTY_2
                        FROM (
                             SELECT FACTORY, MAT_ID, OPER, LOT_TYPE, MAT_VER, WORK_DATE, CM_KEY_3
                           , DECODE(SUBSTR(OPER,2,4),'0000',SUM(S1_OPER_IN_LOT+S2_OPER_IN_LOT+S3_OPER_IN_LOT),SUM(S1_END_LOT+S2_END_LOT+S3_END_LOT)) END_LOT
                           , DECODE(SUBSTR(OPER,2,4),'0000',SUM(S1_OPER_IN_QTY_1+S2_OPER_IN_QTY_1+S3_OPER_IN_QTY_1),SUM(S1_END_QTY_1+S2_END_QTY_1+S3_END_QTY_1+S1_END_RWK_QTY_1 + S2_END_RWK_QTY_1 + S3_END_RWK_QTY_1)) END_QTY_1
                           , DECODE(SUBSTR(OPER,2,4),'0000',SUM(S1_OPER_IN_QTY_2+S2_OPER_IN_QTY_2+S3_OPER_IN_QTY_2),SUM(S1_END_QTY_2+S2_END_QTY_2+S3_END_QTY_2+S1_END_RWK_QTY_2 + S2_END_RWK_QTY_2 + S3_END_RWK_QTY_2)) END_QTY_2
                           , 0 SHIP_QTY_1
                           , 0 SHIP_QTY_2
                        FROM RSUMWIPMOV 
                       WHERE OPER NOT IN ('AZ010','TZ010','F0000','EZ010', 'SZ010', 'BZ010')
                    GROUP BY FACTORY, MAT_ID, OPER, LOT_TYPE, MAT_VER, WORK_DATE, CM_KEY_3
                   UNION ALL
                      SELECT CM_KEY_1 AS FACTORY, MAT_ID
                           , DECODE(CM_KEY_1,'HMVA2','AZ010','HMKT1','TZ010','FGS','F0000','HMKE1','EZ010','HMKS1','SZ010', 'BZ010') OPER
                           , LOT_TYPE, MAT_VER,  WORK_DATE,CM_KEY_3
                           , 0 END_LOT
                           , 0 END_QTY_1
                           , 0 END_QTY_2
                           , SUM(S1_FAC_OUT_QTY_1+S2_FAC_OUT_QTY_1+S3_FAC_OUT_QTY_1) SHIP_QTY_1
                           , SUM(S1_FAC_OUT_QTY_2+S2_FAC_OUT_QTY_2+S3_FAC_OUT_QTY_2) SHIP_QTY_2
                        FROM RSUMFACMOV 
                       WHERE FACTORY NOT IN ('RETURN')
                    GROUP BY CM_KEY_1, MAT_ID, OPER, LOT_TYPE, MAT_VER, WORK_DATE, CM_KEY_3
                             )
                    GROUP BY FACTORY, MAT_ID, OPER, LOT_TYPE, MAT_VER, WORK_DATE, CM_KEY_3
                    )A
                  , MWIPMATDEF B 
              WHERE 1=1 
                AND A.FACTORY  = 'HMVA2' 
                AND A.FACTORY = B.FACTORY 
                AND A.MAT_ID = B.MAT_ID                
                AND A.MAT_VER = 1 
                AND B.MAT_VER = 1 
                AND B.MAT_TYPE = 'FG' 
                AND A.OPER LIKE '%'
                AND A.MAT_ID LIKE '%'  
                AND A.CM_KEY_3 LIKE 'P%'
                AND A.OPER NOT IN ('00001','00002') 
                AND A.WORK_DATE BETWEEN '20200714' AND '20200808' 
         )   
   WHERE TOTAL > 0           
GROUP BY MAT_GRP_1,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT_CMF_10, MAT_ID, OPER,  ' ', BASE_MAT_ID,VENDOR_MAT_ID
ORDER BY MAT_GRP_1,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT_CMF_10, MAT_ID, DECODE(OPER,'AISSUE','A0001','TISSUE','T0001','EISSUE','E0001',OPER),  ' ', BASE_MAT_ID,VENDOR_MAT_ID

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
        SELECT (SELECT DATA_1 FROM MGCMTBLDAT WHERE TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = MAT_GRP_1 AND ROWNUM=1) AS CUSTOMER,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT_CMF_10, MAT_ID, OPER,  ' ', CASE WHEN OPER <= 'A0200' THEN VENDOR_MAT_ID ELSE BASE_MAT_ID END SAP_CODE
             , SUM(TOTAL) AS TOTAL
             , SUM(ASSY_END_QTY0 ) VAL0
             , SUM(ASSY_END_QTY1 ) VAL1
             , SUM(ASSY_END_QTY2 ) VAL2
             , SUM(ASSY_END_QTY3 ) VAL3
             , SUM(ASSY_END_QTY4 ) VAL4
             , SUM(ASSY_END_QTY5 ) VAL5
             , SUM(ASSY_END_QTY6 ) VAL6
             , SUM(ASSY_END_QTY7 ) VAL7
             , SUM(ASSY_END_QTY8 ) VAL8
             , SUM(ASSY_END_QTY9 ) VAL9
             , SUM(ASSY_END_QTY10 ) VAL10
             , SUM(ASSY_END_QTY11 ) VAL11
             , SUM(ASSY_END_QTY12 ) VAL12
             , SUM(ASSY_END_QTY13 ) VAL13
             , SUM(ASSY_END_QTY14 ) VAL14
             , SUM(ASSY_END_QTY15 ) VAL15
             , SUM(ASSY_END_QTY16 ) VAL16
             , SUM(ASSY_END_QTY17 ) VAL17
             , SUM(ASSY_END_QTY18 ) VAL18
             , SUM(ASSY_END_QTY19 ) VAL19
             , SUM(ASSY_END_QTY20 ) VAL20
             , SUM(ASSY_END_QTY21 ) VAL21
             , SUM(ASSY_END_QTY22 ) VAL22
             , SUM(ASSY_END_QTY23 ) VAL23
             , SUM(ASSY_END_QTY24 ) VAL24
             , SUM(ASSY_END_QTY25 ) VAL25
             , ROUND(SUM(TOTAL)/26, 1) AVG
          FROM (
               SELECT B.MAT_GRP_1,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', B.MAT_CMF_10, B.MAT_ID, A.OPER,  ' ', BASE_MAT_ID,VENDOR_MAT_ID 
                    , DECODE(WORK_DATE, '20200714', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY0
                    , DECODE(WORK_DATE, '20200715', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY1
                    , DECODE(WORK_DATE, '20200716', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY2
                    , DECODE(WORK_DATE, '20200717', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY3
                    , DECODE(WORK_DATE, '20200718', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY4
                    , DECODE(WORK_DATE, '20200719', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY5
                    , DECODE(WORK_DATE, '20200720', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY6
                    , DECODE(WORK_DATE, '20200721', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY7
                    , DECODE(WORK_DATE, '20200722', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY8
                    , DECODE(WORK_DATE, '20200723', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY9
                    , DECODE(WORK_DATE, '20200724', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY10
                    , DECODE(WORK_DATE, '20200725', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY11
                    , DECODE(WORK_DATE, '20200726', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY12
                    , DECODE(WORK_DATE, '20200727', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY13
                    , DECODE(WORK_DATE, '20200728', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY14
                    , DECODE(WORK_DATE, '20200729', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY15
                    , DECODE(WORK_DATE, '20200730', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY16
                    , DECODE(WORK_DATE, '20200731', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY17
                    , DECODE(WORK_DATE, '20200801', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY18
                    , DECODE(WORK_DATE, '20200802', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY19
                    , DECODE(WORK_DATE, '20200803', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY20
                    , DECODE(WORK_DATE, '20200804', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY21
                    , DECODE(WORK_DATE, '20200805', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY22
                    , DECODE(WORK_DATE, '20200806', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY23
                    , DECODE(WORK_DATE, '20200807', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY24
                    , DECODE(WORK_DATE, '20200808', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY25
                    , (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END) TOTAL
                 FROM (
                      SELECT FACTORY, MAT_ID, OPER, LOT_TYPE, MAT_VER, WORK_DATE, CM_KEY_3
                           , SUM(END_LOT) AS END_LOT
                           , SUM(END_QTY_1) AS END_QTY_1
                           , SUM(END_QTY_2) AS END_QTY_2
                           , SUM(SHIP_QTY_1) AS SHIP_QTY_1
                           , SUM(SHIP_QTY_2) AS SHIP_QTY_2
                        FROM (
                             SELECT FACTORY, MAT_ID, OPER, LOT_TYPE, MAT_VER, WORK_DATE, CM_KEY_3
                           , DECODE(SUBSTR(OPER,2,4),'0000',SUM(S1_OPER_IN_LOT+S2_OPER_IN_LOT+S3_OPER_IN_LOT),SUM(S1_END_LOT+S2_END_LOT+S3_END_LOT)) END_LOT
                           , DECODE(SUBSTR(OPER,2,4),'0000',SUM(S1_OPER_IN_QTY_1+S2_OPER_IN_QTY_1+S3_OPER_IN_QTY_1),SUM(S1_END_QTY_1+S2_END_QTY_1+S3_END_QTY_1+S1_END_RWK_QTY_1 + S2_END_RWK_QTY_1 + S3_END_RWK_QTY_1)) END_QTY_1
                           , DECODE(SUBSTR(OPER,2,4),'0000',SUM(S1_OPER_IN_QTY_2+S2_OPER_IN_QTY_2+S3_OPER_IN_QTY_2),SUM(S1_END_QTY_2+S2_END_QTY_2+S3_END_QTY_2+S1_END_RWK_QTY_2 + S2_END_RWK_QTY_2 + S3_END_RWK_QTY_2)) END_QTY_2
                           , 0 SHIP_QTY_1
                           , 0 SHIP_QTY_2
                        FROM RSUMWIPMOV 
                       WHERE OPER NOT IN ('AZ010','TZ010','F0000','EZ010', 'SZ010', 'BZ010')
                    GROUP BY FACTORY, MAT_ID, OPER, LOT_TYPE, MAT_VER, WORK_DATE, CM_KEY_3
                   UNION ALL
                      SELECT CM_KEY_1 AS FACTORY, MAT_ID
                           , DECODE(CM_KEY_1,'HMVA2','AZ010','HMKT1','TZ010','FGS','F0000','HMKE1','EZ010','HMKS1','SZ010', 'BZ010') OPER
                           , LOT_TYPE, MAT_VER,  WORK_DATE,CM_KEY_3
                           , 0 END_LOT
                           , 0 END_QTY_1
                           , 0 END_QTY_2
                           , SUM(S1_FAC_OUT_QTY_1+S2_FAC_OUT_QTY_1+S3_FAC_OUT_QTY_1) SHIP_QTY_1
                           , SUM(S1_FAC_OUT_QTY_2+S2_FAC_OUT_QTY_2+S3_FAC_OUT_QTY_2) SHIP_QTY_2
                        FROM RSUMFACMOV 
                       WHERE FACTORY NOT IN ('RETURN')
                    GROUP BY CM_KEY_1, MAT_ID, OPER, LOT_TYPE, MAT_VER, WORK_DATE, CM_KEY_3
                             )
                    GROUP BY FACTORY, MAT_ID, OPER, LOT_TYPE, MAT_VER, WORK_DATE, CM_KEY_3
                    )A
                  , MWIPMATDEF B 
              WHERE 1=1 
                AND A.FACTORY  = 'HMVA2' 
                AND A.FACTORY = B.FACTORY 
                AND A.MAT_ID = B.MAT_ID                
                AND A.MAT_VER = 1 
                AND B.MAT_VER = 1 
                AND B.MAT_TYPE = 'FG' 
                AND A.OPER LIKE '%'
                AND A.MAT_ID LIKE '%'  
                AND A.OPER NOT IN ('00001','00002') 
                AND A.WORK_DATE BETWEEN '20200714' AND '20200808' 
         )   
   WHERE TOTAL > 0           
GROUP BY MAT_GRP_1,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT_CMF_10, MAT_ID, OPER,  ' ', BASE_MAT_ID,VENDOR_MAT_ID
ORDER BY MAT_GRP_1,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT_CMF_10, MAT_ID, DECODE(OPER,'AISSUE','A0001','TISSUE','T0001','EISSUE','E0001',OPER),  ' ', BASE_MAT_ID,VENDOR_MAT_ID

-------------------------------------------------------------
SELECT * FROM RWEBUSRDEF WHERE FACTORY = :FACTORY AND USER_ID= :USER_ID
-------------------------------------------------------------
SELECT A.FUNC_GRP_SEQ,A.SEC_GRP_ID,A.FUNC_GRP_ID,NVL(A.FUNC_NAME, ' ') FUNC_NAME, NVL(B.FUNC_DESC, ' ') FUNC_DESC, LANGUAGE_1, LANGUAGE_2, LANGUAGE_3
  FROM RWEBGRPFUN A, RWEBFUNDEF B
 WHERE A.FACTORY = :p_FACTORY
   AND A.SEC_GRP_ID = :p_SEC_GRP_ID
   AND A.FUNC_NAME=B.FUNC_NAME(+)
 ORDER BY A.FUNC_GRP_SEQ, A.FUNC_SEQ
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
SELECT LANGUAGE_2 FROM RWEBFUNDEF WHERE FUNC_NAME = 'PRD010503'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT FACTORY Code, FAC_DESC Data
  FROM MWIPFACDEF
 WHERE FAC_GRP_5 = 'Y' 
 ORDER BY FAC_GRP_4 ASC
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT DISTINCT OPR.OPER CODE, OPR.OPER_DESC DATA
  FROM MRASRESMFO RES, MWIPOPRDEF OPR 
 WHERE RES.FACTORY  = 'HMVA2' 
   AND REL_LEVEL='R' 
   AND RES.OPER NOT IN ('A0100','A0150','A0250','A0320','A0330','A0340','A0350','A0370','A0380','A0390','A0500','A0501','A0502','A0503','A0504','A0505','A0506','A0507','A0508','A0509','A0550','A0950','A1100','A1110','A1180','A1230','A1720','A1950', 'A2050', 'A2100')
   AND OPR.OPER LIKE 'A%'
   AND RES.FACTORY=OPR.FACTORY 
   AND RES.OPER=OPR.OPER 
ORDER BY OPR.OPER 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT * FROM MGCMTBLDAT WHERE FACTORY =:FACTORY AND TABLE_NAME=:TABLE_NAME
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT NVL(RES.SUB_AREA_ID,'-') AS Block, NVL(RES.RES_MODEL,'-') AS Model, NVL((SELECT DATA_1 FROM MGCMTBLDAT WHERE FACTORY = MAT.FACTORY AND TABLE_NAME = 'H_CUSTOMER' AND ROWNUM=1 AND KEY_1 = MAT.MAT_GRP_1), '-') AS Customer,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT.MAT_CMF_10 AS Pin_Type, RES.OPER AS Step, RES.MAT_ID AS Product,  ' '  
     , SUM(RES.RES_CNT)
     , SUM(TRUNC(NVL(NVL(UPH.UPEH,0) * 24 * PERCENT * RES.RES_CNT, 0))) AS CAPA
     , NVL(SUM(RES.RUN_COUNT),0) AS RUN
     , NVL(SUM(RES.WAIT_COUNT),0) AS WAIT
     , SUM(RES.FMB_CNT) AS FMB_CNT
     , SUM(TRUNC(NVL(NVL(UPH.UPEH,0) * 24 * PERCENT * RES.FMB_CNT, 0))) AS FMB_CAPA
     , SUM(RES.FMB_RUN) AS FMB_RUN
     , SUM(RES.FMB_WAIT) AS FMB_WAIT
  FROM (
        SELECT FACTORY, RES_STS_2 AS MAT_ID, RES_STS_8 AS OPER, RES_GRP_6 AS RES_MODEL, RES_GRP_7 AS UPEH_GRP, SUB_AREA_ID, COUNT(RES_ID) AS RES_CNT 
             , COUNT(DECODE(RES_PRI_STS,'PROC',RES_ID)) AS RUN_COUNT 
             , COUNT(DECODE(RES_PRI_STS,'PROC','',RES_ID)) AS WAIT_COUNT 
             , CASE WHEN RES_STS_8 LIKE 'A06%' THEN 0.71
                    WHEN RES_STS_8 LIKE 'A04%' THEN 0.68
                    WHEN RES_STS_8 = 'A0333' THEN 0.68
                    ELSE 0.7
               END PERCENT 
             , 0 AS FMB_CNT 
             , 0 AS FMB_RUN 
             , 0 AS FMB_WAIT 
          FROM MRASRESDEF 
         WHERE 1 = 1  
           AND FACTORY  = 'HMVA2' 
           AND RES_CMF_9 = 'Y' 
           AND RES_CMF_7 = 'Y' 
           AND DELETE_FLAG = ' ' 
           AND RES_TYPE='EQUIPMENT' 
           AND RES_STS_8 LIKE '%'
           AND (RES_STS_1 NOT IN ('C200', 'B199') OR RES_UP_DOWN_FLAG = 'U') 
         GROUP BY FACTORY,RES_STS_2,RES_STS_8,RES_GRP_6,RES_GRP_7, SUB_AREA_ID 
         UNION ALL 
        SELECT FACTORY, MAT_ID, OPER, RES_MODEL, UPEH_GRP, SUB_AREA_ID
             , 0 AS RES_CNT
             , 0 AS RUN_COUNT 
             , 0 AS WAIT_COUNT 
             , CASE WHEN OPER LIKE 'A06%' THEN 0.71
                    WHEN OPER LIKE 'A04%' THEN 0.68
                    WHEN OPER = 'A0333' THEN 0.68
                    ELSE 0.7
               END PERCENT 
             , COUNT(RES_ID) AS FMB_CNT
             , COUNT(DECODE(STATE,'1',RES_ID)) AS FMB_RUN 
             , COUNT(DECODE(STATE,'1','',RES_ID)) AS FMB_WAIT
          FROM (
                SELECT FACTORY, MAT_ID, OPER, RES_MODEL, UPEH_GRP, SUB_AREA_ID, RES_ID
                     , DECODE(BPCS_LIGHT_TOWER_STATE, '0', DECODE(STATUS, '7', '4', '8') , DECODE(STATUS, '99', '99', '9', '9', '91', '91', '92', '92', '93', '93', '2', '5', '3', '6', '55', '2', '94', '1', '7', '4', '991', '991', '992', '992', '993', '993', '994', '994', DECODE(BPCS_LIGHT_TOWER_STATE, '1024', '1', '16384', '3', '32768', '3', '4096', '2', STATUS))) AS STATE
                  FROM (
                        SELECT FACTORY, MAT_ID, OPER, RES_MODEL, UPEH_GRP, SUB_AREA_ID
                             , STS.RES_ID
                             , DECODE(CONTROL_STATE, 'Remote', DECODE(LIGHT_TOWER, '', '0', '0', '4096', LIGHT_TOWER), 'Disconnect', '0', 'Offline', '0', 'Open', '0', 'Close', '0', 'Connect', '0', 'Local', '0', '0') AS BPCS_LIGHT_TOWER_STATE
                             , STATUS
                          FROM T_BPCS_EQUIPMENT_STATE@RPTTOFA LMP
                             , (
                                SELECT FACTORY, RES_STS_2 AS MAT_ID, RES_STS_8 AS OPER, RES_GRP_6 AS RES_MODEL, RES_GRP_7 AS UPEH_GRP, SUB_AREA_ID, RES_ID
                                     , CASE WHEN RES_STS_3 IN ('130','132') AND RES_STS_4 IN ('6005','3155') THEN 991
                                            WHEN RES_STS_3 > '128' AND RES_STS_4 IN ('6058', '385') THEN 992
                                            ELSE DECODE(STATUS , 1, 
                                                       DECODE(RES_UP_DOWN_FLAG, 'D', 2, 
                                                             DECODE(LAST_EVENT_ID, 'MAINT_END', 
                                                                   DECODE( SIGN((SELECT COUNT(*) AS LOT_CNT
                                                                                   FROM MWIPLOTSTS
                                                                                  WHERE 1=1
                                                                                    AND START_RES_ID = A.RES_ID
                                                                                    AND LOT_DEL_FLAG = ' '
                                                                                    AND HOLD_FLAG = ' '
                                                                                    AND LOT_TYPE = 'W'
                                                                                    AND HOLD_FLAG= ' ')), 0, 1, 94)
                                                                     , 1)
                                                                ), 4, DECODE(RES_UP_DOWN_FLAG, 'D', DECODE(SUBSTR(RES_STS_1, 0, 1), 'E', 7, 2), 4) , 3, DECODE(LAST_EVENT_ID, 'MAINT_START', DECODE(RES_STS_1, 'D211', 91, 'D212', 91, 'D291', 91, 'D213', 93, 'D311', 93, 'D391', 93, 'D314', 93, 'D312', 93, 'D313', 93, 'D214', 93, 3), 3) , 6, DECODE(RES_STS_1, 'D211', 9, 'D212', 9, 'D291', 9, 'D213', 92, 'D311', 92, 'D391', 92, 'D314', 92, 'D312', 92, 'D313', 92, 'D214', 92, 'D315', 993, 'D215', 993, 6) , 5, DECODE(LAST_EVENT_ID, 'RUN_DOWN', DECODE(RES_STS_1, 'F701', 99, 'B500', 99, 'B110', 994, DECODE(SUBSTR(RES_STS_1, 0, 1), 'H', 4, 55)), 5) , 8, DECODE(LAST_EVENT_ID, 'ETC_DOWN', DECODE(SUBSTR(RES_STS_1, 0, 1), 'H', 4, 8), 8) , STATUS)
                                                                       END AS STATUS 
                                     , RES_GRP_6
                                  FROM MESMGR.FMB_CRASRESSTS@RPTTOMES A
                                 WHERE 1=1
                                   AND FACTORY  = 'HMVA2' 
                                   AND AREA_ID = 'WB'
                                   AND SUB_AREA_ID <> 'PLASMA' 
                                   AND (RES_STS_1 NOT IN ('C200', 'B199') OR RES_UP_DOWN_FLAG = 'U') 
                                   AND RES_STS_8 LIKE '%'
                               ) STS
                         WHERE 1=1
                           AND LMP.EQUIP_ID(+) = STS.RES_ID
                           AND STS.RES_GRP_6 NOT IN ('UTC-400') 
                       )           
               ) RES  
         GROUP BY FACTORY, MAT_ID, OPER, RES_MODEL, UPEH_GRP, SUB_AREA_ID 
         UNION ALL
        SELECT FACTORY, RES_STS_2 AS MAT_ID, RES_STS_8 AS OPER, RES_GRP_6 AS RES_MODEL, RES_GRP_7 AS UPEH_GRP, SUB_AREA_ID
             , 0 AS RES_CNT
             , 0 AS RUN_COUNT 
             , 0 AS WAIT_COUNT 
             , CASE WHEN RES_STS_8 LIKE 'A06%' THEN 0.71
                    WHEN RES_STS_8 LIKE 'A04%' THEN 0.68
                    WHEN RES_STS_8 = 'A0333' THEN 0.68
                    ELSE 0.7
               END PERCENT 
             , COUNT(RES_ID) AS FMB_CNT
             , COUNT(DECODE(STATUS, 1, RES_ID)) AS FMB_RUN
             , COUNT(DECODE(STATUS, 1, '', RES_ID)) AS FMB_WAIT     
          FROM MESMGR.FMB_CRASRESSTS@RPTTOMES
         WHERE 1=1
           AND FACTORY  = 'HMVA2' 
           AND RES_CMF_20 <= TO_CHAR(SYSDATE, 'YYYYMMDD')
           AND AREA_ID <> 'WB'
           AND (RES_STS_1 NOT IN ('C200', 'B199') OR RES_UP_DOWN_FLAG = 'U') 
           AND RES_STS_8 LIKE '%'
         GROUP BY FACTORY, RES_STS_2, RES_STS_8, RES_GRP_6, RES_GRP_7, SUB_AREA_ID
       ) RES 
     , MWIPMATDEF MAT
     , CRASUPHDEF UPH
 WHERE 1=1
   AND MAT.DELETE_FLAG=' '
   AND RES.FACTORY=MAT.FACTORY
   AND RES.MAT_ID = MAT.MAT_ID
   AND RES.FACTORY=UPH.FACTORY(+)
   AND RES.OPER=UPH.OPER(+)
   AND RES.RES_MODEL = UPH.RES_MODEL(+) 
   AND RES.UPEH_GRP = UPH.UPEH_GRP(+) 
   AND RES.MAT_ID = UPH.MAT_ID(+)
   AND RES.FACTORY  = 'HMVA2' 
   AND RES.OPER NOT IN ('00001','00002') 
 GROUP BY MAT.FACTORY, RES.SUB_AREA_ID, RES.RES_MODEL, MAT.MAT_GRP_1,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT.MAT_CMF_10, RES.OPER, RES.MAT_ID,  ' '  
 ORDER BY RES.SUB_AREA_ID, RES.RES_MODEL, MAT.MAT_GRP_1,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT.MAT_CMF_10, RES.OPER, RES.MAT_ID,  ' ' 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
SELECT LANGUAGE_2 FROM RWEBFUNDEF WHERE FUNC_NAME = 'PRD010312'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT PLAN_WEEK V1    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_DATE = TO_CHAR(SYSDATE,'yyyymmdd')      AND ROWNUM = 1  
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT LANGUAGE_2 FROM RWEBFUNDEF WHERE FUNC_NAME = 'PRD010401'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT FACTORY Code, FAC_DESC Data
  FROM MWIPFACDEF
 WHERE FAC_GRP_5 = 'Y' 
 ORDER BY FAC_GRP_4 ASC
-------------------------------------------------------------
SELECT OPER, OPER_DESC  FROM MWIPOPRDEF
  WHERE FACTORY = 'HMVA2'  AND OPER NOT IN ('00001', '00002') AND OPER NOT LIKE 'V%' ORDER BY DECODE(OPER_CMF_2, ' ', 99999, TO_NUMBER(OPER_CMF_2)), OPER
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
        SELECT (SELECT DATA_1 FROM MGCMTBLDAT WHERE TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = MAT_GRP_1 AND ROWNUM=1) AS CUSTOMER,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT_CMF_10, MAT_ID, OPER,  ' ', CASE WHEN OPER <= 'A0200' THEN VENDOR_MAT_ID ELSE BASE_MAT_ID END SAP_CODE
             , SUM(TOTAL) AS TOTAL
             , SUM(ASSY_END_QTY0 ) VAL0
             , SUM(ASSY_END_QTY1 ) VAL1
             , ROUND(SUM(TOTAL)/2, 1) AVG
          FROM (
               SELECT B.MAT_GRP_1,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', B.MAT_CMF_10, B.MAT_ID, A.OPER,  ' ', BASE_MAT_ID,VENDOR_MAT_ID 
                    , DECODE(WORK_DATE, '20200720', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY0
                    , DECODE(WORK_DATE, '20200721', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY1
                    , (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END) TOTAL
                 FROM (
                      SELECT FACTORY, MAT_ID, OPER, LOT_TYPE, MAT_VER, WORK_DATE, CM_KEY_3
                           , SUM(END_LOT) AS END_LOT
                           , SUM(END_QTY_1) AS END_QTY_1
                           , SUM(END_QTY_2) AS END_QTY_2
                           , SUM(SHIP_QTY_1) AS SHIP_QTY_1
                           , SUM(SHIP_QTY_2) AS SHIP_QTY_2
                        FROM (
                             SELECT FACTORY, MAT_ID, OPER, LOT_TYPE, MAT_VER, WORK_DATE, CM_KEY_3
                           , DECODE(SUBSTR(OPER,2,4),'0000',SUM(S1_OPER_IN_LOT+S2_OPER_IN_LOT+S3_OPER_IN_LOT),SUM(S1_END_LOT+S2_END_LOT+S3_END_LOT)) END_LOT
                           , DECODE(SUBSTR(OPER,2,4),'0000',SUM(S1_OPER_IN_QTY_1+S2_OPER_IN_QTY_1+S3_OPER_IN_QTY_1),SUM(S1_END_QTY_1+S2_END_QTY_1+S3_END_QTY_1+S1_END_RWK_QTY_1 + S2_END_RWK_QTY_1 + S3_END_RWK_QTY_1)) END_QTY_1
                           , DECODE(SUBSTR(OPER,2,4),'0000',SUM(S1_OPER_IN_QTY_2+S2_OPER_IN_QTY_2+S3_OPER_IN_QTY_2),SUM(S1_END_QTY_2+S2_END_QTY_2+S3_END_QTY_2+S1_END_RWK_QTY_2 + S2_END_RWK_QTY_2 + S3_END_RWK_QTY_2)) END_QTY_2
                           , 0 SHIP_QTY_1
                           , 0 SHIP_QTY_2
                        FROM RSUMWIPMOV 
                       WHERE OPER NOT IN ('AZ010','TZ010','F0000','EZ010', 'SZ010', 'BZ010')
                    GROUP BY FACTORY, MAT_ID, OPER, LOT_TYPE, MAT_VER, WORK_DATE, CM_KEY_3
                   UNION ALL
                      SELECT CM_KEY_1 AS FACTORY, MAT_ID
                           , DECODE(CM_KEY_1,'HMVA2','AZ010','HMKT1','TZ010','FGS','F0000','HMKE1','EZ010','HMKS1','SZ010', 'BZ010') OPER
                           , LOT_TYPE, MAT_VER,  WORK_DATE,CM_KEY_3
                           , 0 END_LOT
                           , 0 END_QTY_1
                           , 0 END_QTY_2
                           , SUM(S1_FAC_OUT_QTY_1+S2_FAC_OUT_QTY_1+S3_FAC_OUT_QTY_1) SHIP_QTY_1
                           , SUM(S1_FAC_OUT_QTY_2+S2_FAC_OUT_QTY_2+S3_FAC_OUT_QTY_2) SHIP_QTY_2
                        FROM RSUMFACMOV 
                       WHERE FACTORY NOT IN ('RETURN')
                    GROUP BY CM_KEY_1, MAT_ID, OPER, LOT_TYPE, MAT_VER, WORK_DATE, CM_KEY_3
                             )
                    GROUP BY FACTORY, MAT_ID, OPER, LOT_TYPE, MAT_VER, WORK_DATE, CM_KEY_3
                    )A
                  , MWIPMATDEF B 
              WHERE 1=1 
                AND A.FACTORY  = 'HMVA2' 
                AND A.FACTORY = B.FACTORY 
                AND A.MAT_ID = B.MAT_ID                
                AND A.MAT_VER = 1 
                AND B.MAT_VER = 1 
                AND B.MAT_TYPE = 'FG' 
                AND A.OPER LIKE '%'
                AND A.MAT_ID LIKE '%'  
                AND A.OPER NOT IN ('00001','00002') 
                AND A.WORK_DATE BETWEEN '20200720' AND '20200721' 
         )   
   WHERE TOTAL > 0           
GROUP BY MAT_GRP_1,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT_CMF_10, MAT_ID, OPER,  ' ', BASE_MAT_ID,VENDOR_MAT_ID
ORDER BY MAT_GRP_1,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT_CMF_10, MAT_ID, DECODE(OPER,'AISSUE','A0001','TISSUE','T0001','EISSUE','E0001',OPER),  ' ', BASE_MAT_ID,VENDOR_MAT_ID

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
SELECT MIN(SYS_DATE) AS START_DAY 
     , MAX(SYS_DATE) AS END_DAY 
     , PLAN_YEAR||DECODE(LENGTH(PLAN_WEEK), 1, '0'||PLAN_WEEK, PLAN_WEEK) AS WEEK
  FROM MWIPCALDEF 
 WHERE CALENDAR_ID = 'OTD'
   AND (PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) IN ( 
                                                SELECT WW
                                                  FROM (
                                                        SELECT WW
                                                             , ROW_NUMBER() OVER(ORDER BY WW) AS RNK
                                                          FROM (
                                                                SELECT DISTINCT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW
                                                                  FROM MWIPCALDEF
                                                                 WHERE CALENDAR_ID = 'OTD'
                                                                   AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') >= (
                                                                                                              SELECT MAX(PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) AS WW
                                                                                                                FROM MWIPCALDEF
                                                                                                               WHERE CALENDAR_ID = 'OTD'
                                                                                                                 AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') < (SELECT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW FROM MWIPCALDEF WHERE CALENDAR_ID = 'OTD' AND SYS_DATE = '20200721')
                                                                                                                 AND SYS_DATE >= TO_CHAR(TO_DATE('20200721', 'YYYYMMDD')-14, 'YYYYMMDD')
                                                                                                             )
                                                               ) 
                                                       )
                                                 WHERE RNK <= 7
                                               ) 
 GROUP BY PLAN_YEAR, PLAN_WEEK 
 ORDER BY PLAN_YEAR, PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE) AS START_DAY 
     , MAX(SYS_DATE) AS END_DAY 
     , PLAN_YEAR||DECODE(LENGTH(PLAN_WEEK), 1, '0'||PLAN_WEEK, PLAN_WEEK) AS WEEK
  FROM MWIPCALDEF 
 WHERE CALENDAR_ID = 'SE'
   AND (PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) IN ( 
                                                SELECT WW
                                                  FROM (
                                                        SELECT WW
                                                             , ROW_NUMBER() OVER(ORDER BY WW) AS RNK
                                                          FROM (
                                                                SELECT DISTINCT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW
                                                                  FROM MWIPCALDEF
                                                                 WHERE CALENDAR_ID = 'SE'
                                                                   AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') >= (
                                                                                                              SELECT MAX(PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) AS WW
                                                                                                                FROM MWIPCALDEF
                                                                                                               WHERE CALENDAR_ID = 'SE'
                                                                                                                 AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') < (SELECT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW FROM MWIPCALDEF WHERE CALENDAR_ID = 'SE' AND SYS_DATE = '20200721')
                                                                                                                 AND SYS_DATE >= TO_CHAR(TO_DATE('20200721', 'YYYYMMDD')-14, 'YYYYMMDD')
                                                                                                             )
                                                               ) 
                                                       )
                                                 WHERE RNK <= 7
                                               ) 
 GROUP BY PLAN_YEAR, PLAN_WEEK 
 ORDER BY PLAN_YEAR, PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT LANGUAGE_2 FROM RWEBFUNDEF WHERE FUNC_NAME = 'PRD011015'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE) AS START_DAY 
     , MAX(SYS_DATE) AS END_DAY 
     , PLAN_YEAR||DECODE(LENGTH(PLAN_WEEK), 1, '0'||PLAN_WEEK, PLAN_WEEK) AS WEEK
  FROM MWIPCALDEF 
 WHERE CALENDAR_ID = 'OTD'
   AND (PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) IN ( 
                                                SELECT WW
                                                  FROM (
                                                        SELECT WW
                                                             , ROW_NUMBER() OVER(ORDER BY WW) AS RNK
                                                          FROM (
                                                                SELECT DISTINCT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW
                                                                  FROM MWIPCALDEF
                                                                 WHERE CALENDAR_ID = 'OTD'
                                                                   AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') >= (
                                                                                                              SELECT MAX(PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) AS WW
                                                                                                                FROM MWIPCALDEF
                                                                                                               WHERE CALENDAR_ID = 'OTD'
                                                                                                                 AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') < (SELECT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW FROM MWIPCALDEF WHERE CALENDAR_ID = 'OTD' AND SYS_DATE = '20200721')
                                                                                                                 AND SYS_DATE >= TO_CHAR(TO_DATE('20200721', 'YYYYMMDD')-14, 'YYYYMMDD')
                                                                                                             )
                                                               ) 
                                                       )
                                                 WHERE RNK <= 7
                                               ) 
 GROUP BY PLAN_YEAR, PLAN_WEEK 
 ORDER BY PLAN_YEAR, PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE) AS START_DAY 
     , MAX(SYS_DATE) AS END_DAY 
     , PLAN_YEAR||DECODE(LENGTH(PLAN_WEEK), 1, '0'||PLAN_WEEK, PLAN_WEEK) AS WEEK
  FROM MWIPCALDEF 
 WHERE CALENDAR_ID = 'SE'
   AND (PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) IN ( 
                                                SELECT WW
                                                  FROM (
                                                        SELECT WW
                                                             , ROW_NUMBER() OVER(ORDER BY WW) AS RNK
                                                          FROM (
                                                                SELECT DISTINCT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW
                                                                  FROM MWIPCALDEF
                                                                 WHERE CALENDAR_ID = 'SE'
                                                                   AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') >= (
                                                                                                              SELECT MAX(PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) AS WW
                                                                                                                FROM MWIPCALDEF
                                                                                                               WHERE CALENDAR_ID = 'SE'
                                                                                                                 AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') < (SELECT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW FROM MWIPCALDEF WHERE CALENDAR_ID = 'SE' AND SYS_DATE = '20200721')
                                                                                                                 AND SYS_DATE >= TO_CHAR(TO_DATE('20200721', 'YYYYMMDD')-14, 'YYYYMMDD')
                                                                                                             )
                                                               ) 
                                                       )
                                                 WHERE RNK <= 7
                                               ) 
 GROUP BY PLAN_YEAR, PLAN_WEEK 
 ORDER BY PLAN_YEAR, PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT (SELECT DATA_1 FROM MGCMTBLDAT@RPTTOMES WHERE FACTORY = 'HMVA2' AND TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = MAT_GRP_1) AS CUSTOMER, MAT_GRP_9 AS MAJOR, MAT_GRP_10 AS PKG, MAT_GRP_6 AS LD_COUNT, MAT_CMF_11 AS PKG_CODE,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ' 
     , ROUND(SUM(PLAN)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS PLAN 
     , ROUND(SUM(SHP)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS SHP 
     , ROUND(SUM(DEF)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS DEF 
     , GUBUN 
     , ROUND(SUM(HMK3A)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS HMK3A 
     , ROUND(SUM(QC_GATE)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS QC_GATE 
     , ROUND(SUM(PVI)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS PVI 
     , ROUND(SUM(AVI)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS AVI 
     , ROUND(SUM(SIG)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS SIG 
     , ROUND(SUM(SBA)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS SBA 
     , ROUND(SUM(TIN)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS TIN 
     , ROUND(SUM(TRIM)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS TRIM 
     , ROUND(SUM(MK)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS MK 
     , ROUND(SUM(CURE)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS CURE 
     , ROUND(SUM(MOLD)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS MOLD 
     , ROUND(SUM(GATE)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS GATE 
     , ROUND(SUM(WB9)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS WB9 
     , ROUND(SUM(DA9)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS DA9 
     , ROUND(SUM(WB8)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS WB8 
     , ROUND(SUM(DA8)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS DA8 
     , ROUND(SUM(WB7)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS WB7 
     , ROUND(SUM(DA7)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS DA7 
     , ROUND(SUM(WB6)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS WB6 
     , ROUND(SUM(DA6)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS DA6 
     , ROUND(SUM(WB5)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS WB5 
     , ROUND(SUM(DA5)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS DA5 
     , ROUND(SUM(WB4)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS WB4 
     , ROUND(SUM(DA4)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS DA4 
     , ROUND(SUM(WB3)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS WB3 
     , ROUND(SUM(DA3)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS DA3 
     , ROUND(SUM(WB2)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS WB2 
     , ROUND(SUM(DA2)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS DA2 
     , ROUND(SUM(WB1)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS WB1 
     , ROUND(SUM(DA1)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS DA1 
     , ROUND(SUM(SP)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS SP 
     , ROUND(SUM(SAW)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS SAW 
     , ROUND(SUM(BG)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS BG 
     , ROUND(SUM(HMK2A)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS HMK2A 
     , ROUND(SUM(WIP_DEF)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS WIP_DEF 
  FROM (  
        SELECT MAT_GRP_1, MAT_GRP_9, MAT_GRP_10, MAT_GRP_6, MAT_CMF_11,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', GUBUN 
             , MAX(PLAN) AS PLAN 
             , MAX(SHP) AS SHP 
             , MAX(DEF) AS DEF 
             , SUM(DECODE(OPER_GRP_1, 'HMK3A', SUM_DEF, 0)) AS HMK3A 
             , SUM(DECODE(OPER_GRP_1, 'QC_GATE', SUM_DEF, 0)) AS QC_GATE 
             , SUM(DECODE(OPER_GRP_1, 'PVI', SUM_DEF, 0)) AS PVI 
             , SUM(DECODE(OPER_GRP_1, 'AVI', SUM_DEF, 0)) AS AVI 
             , SUM(DECODE(OPER_GRP_1, 'SIG', SUM_DEF, 0)) AS SIG 
             , SUM(DECODE(OPER_GRP_1, 'SBA', SUM_DEF, 0)) AS SBA 
             , SUM(DECODE(OPER_GRP_1, 'TIN', SUM_DEF, 0)) AS TIN 
             , SUM(DECODE(OPER_GRP_1, 'TRIM', SUM_DEF, 0)) AS TRIM 
             , SUM(DECODE(OPER_GRP_1, 'MK', SUM_DEF, 0)) AS MK 
             , SUM(DECODE(OPER_GRP_1, 'CURE', SUM_DEF, 0)) AS CURE 
             , SUM(DECODE(OPER_GRP_1, 'MOLD', SUM_DEF, 0)) AS MOLD 
             , SUM(DECODE(OPER_GRP_1, 'GATE', SUM_DEF, 0)) AS GATE 
             , SUM(DECODE(OPER_GRP_1, 'WB9', SUM_DEF, 0)) AS WB9 
             , SUM(DECODE(OPER_GRP_1, 'DA9', SUM_DEF, 0)) AS DA9 
             , SUM(DECODE(OPER_GRP_1, 'WB8', SUM_DEF, 0)) AS WB8 
             , SUM(DECODE(OPER_GRP_1, 'DA8', SUM_DEF, 0)) AS DA8 
             , SUM(DECODE(OPER_GRP_1, 'WB7', SUM_DEF, 0)) AS WB7 
             , SUM(DECODE(OPER_GRP_1, 'DA7', SUM_DEF, 0)) AS DA7 
             , SUM(DECODE(OPER_GRP_1, 'WB6', SUM_DEF, 0)) AS WB6 
             , SUM(DECODE(OPER_GRP_1, 'DA6', SUM_DEF, 0)) AS DA6 
             , SUM(DECODE(OPER_GRP_1, 'WB5', SUM_DEF, 0)) AS WB5 
             , SUM(DECODE(OPER_GRP_1, 'DA5', SUM_DEF, 0)) AS DA5 
             , SUM(DECODE(OPER_GRP_1, 'WB4', SUM_DEF, 0)) AS WB4 
             , SUM(DECODE(OPER_GRP_1, 'DA4', SUM_DEF, 0)) AS DA4 
             , SUM(DECODE(OPER_GRP_1, 'WB3', SUM_DEF, 0)) AS WB3 
             , SUM(DECODE(OPER_GRP_1, 'DA3', SUM_DEF, 0)) AS DA3 
             , SUM(DECODE(OPER_GRP_1, 'WB2', SUM_DEF, 0)) AS WB2 
             , SUM(DECODE(OPER_GRP_1, 'DA2', SUM_DEF, 0)) AS DA2 
             , SUM(DECODE(OPER_GRP_1, 'WB1', SUM_DEF, 0)) AS WB1 
             , SUM(DECODE(OPER_GRP_1, 'DA1', SUM_DEF, 0)) AS DA1 
             , SUM(DECODE(OPER_GRP_1, 'SP', SUM_DEF, 0)) AS SP 
             , SUM(DECODE(OPER_GRP_1, 'SAW', SUM_DEF, 0)) AS SAW 
             , SUM(DECODE(OPER_GRP_1, 'BG', SUM_DEF, 0)) AS BG 
             , SUM(DECODE(OPER_GRP_1, 'HMK2A',SUM_DEF, 0)) AS HMK2A 
             , MAX(WIP_TTL) AS WIP_TTL 
             , MAX(DEF) - MAX(WIP_TTL) AS WIP_DEF 
          FROM ( 
                SELECT MAT_GRP_1, MAT_GRP_9, MAT_GRP_10, MAT_GRP_6, MAT_CMF_11,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ' 
                     , OPER_GRP_1 
                     , DECODE(SEQ, 1, 'WIP', 2, '설비대수', 3, 'CAPA현황', 4, '당일 실적', 5, 'D0 잔량', 6, 'D1 잔량', 7, 'D2 잔량', 8, '당주 잔량', 9, '차주 잔량', 10, '월간 잔량') AS GUBUN 
                     , SUM(DECODE(SEQ, 1, 0, 2, 0, 3, 0, 4, 0, 5, D0_PLAN, 6, D1_PLAN, 7, D2_PLAN, 8, WEEK_PLAN, 9, WEEK2_PLAN, 10, MON_PLAN)) AS PLAN  
                     , SUM(DECODE(SEQ, 1, 0, 2, 0, 3, 0, 4, 0, 5, SHP_TODAY, 6, SHP_D1, 7, SHP_D2, 8, SHP_WEEK, 9, SHP2_WEEK, 10, SHP_MONTH)) AS SHP 
                     , SUM(DECODE(SEQ, 1, 0, 2, 0, 3, 0, 4, 0, 5, D0_DEF, 6, D1_DEF, 7, D2_DEF, 8, WEEK_DEF, 9, WEEK2_DEF, 10, MONTH_DEF)) AS DEF 
                     , SUM(DECODE(SEQ, 1, WIP_QTY, 2, RES_CNT, 3, RES_CAPA, 4, ASSY_END_QTY, 5, D0_SUM_QUANTITY, 6, D1_SUM_QUANTITY, 7, D2_SUM_QUANTITY, 8, WEEK_SUM_QUANTITY, 9, WEEK2_SUM_QUANTITY, 10, MONTH_SUM_QUANTITY)) AS SUM_DEF 
                     , MAX(DECODE(SEQ, 1, 0, 2, 0, 3, 0, 4, 0, WIP_TTL)) AS WIP_TTL 
                  FROM ( 
                        SELECT MAT_GRP_1, MAT_GRP_9, MAT_GRP_10, MAT_GRP_6, MAT_CMF_11,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', OPER_GRP_1 
                             , SUM(NVL(D0_PLAN,0)) AS D0_PLAN, SUM(NVL(SHP_TODAY,0)) AS SHP_TODAY, SUM(NVL(D0_DEF,0)) AS D0_DEF 
                             , SUM(NVL(D1_PLAN,0)) AS D1_PLAN, SUM(NVL(SHP_D1,0)) AS SHP_D1, SUM(NVL(D1_DEF,0)) AS D1_DEF 
                             , SUM(NVL(D2_PLAN,0)) AS D2_PLAN, SUM(NVL(SHP_D2,0)) AS SHP_D2, SUM(NVL(D2_DEF,0)) AS D2_DEF 
                             , SUM(NVL(WEEK_PLAN,0)) AS WEEK_PLAN, SUM(NVL(SHP_WEEK,0)) AS SHP_WEEK, SUM(NVL(WEEK_DEF,0)) AS WEEK_DEF 
                             , SUM(NVL(WEEK2_PLAN,0)) AS WEEK2_PLAN, SUM(NVL(SHP2_WEEK,0)) AS SHP2_WEEK, SUM(NVL(WEEK2_DEF,0)) AS WEEK2_DEF 
                             , SUM(NVL(MON_PLAN,0)) AS MON_PLAN, SUM(NVL(SHP_MONTH,0)) AS SHP_MONTH, SUM(NVL(MONTH_DEF,0)) AS MONTH_DEF 
                             , SUM(NVL(ASSY_END_QTY,0)) AS ASSY_END_QTY 
                             , SUM(NVL(WIP_QTY,0)) AS WIP_QTY 
                             , SUM(SUM(WIP_QTY)) OVER(PARTITION BY MAT_GRP_1, MAT_GRP_9, MAT_GRP_10, MAT_GRP_6, MAT_CMF_11,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ') AS WIP_TTL 
                             , SUM(RES_CNT) AS RES_CNT 
                             , SUM(RES_CAPA) AS RES_CAPA 
                             , SUM(NVL(D0_DEF-WIP_SUM_QUANTITY+WIP_QTY,0)) AS D0_SUM_QUANTITY 
                             , SUM(NVL(D1_DEF-WIP_SUM_QUANTITY+WIP_QTY,0)) AS D1_SUM_QUANTITY 
                             , SUM(NVL(D2_DEF-WIP_SUM_QUANTITY+WIP_QTY,0)) AS D2_SUM_QUANTITY 
                             , SUM(NVL(WEEK_DEF-WIP_SUM_QUANTITY+WIP_QTY,0)) AS WEEK_SUM_QUANTITY 
                             , SUM(NVL(WEEK2_DEF-WIP_SUM_QUANTITY+WIP_QTY,0)) AS WEEK2_SUM_QUANTITY 
                             , SUM(NVL(MONTH_DEF-WIP_SUM_QUANTITY+WIP_QTY,0)) AS MONTH_SUM_QUANTITY 
                          FROM ( 
                                SELECT MAT.MAT_GRP_1, MAT.MAT_GRP_2, MAT.MAT_GRP_4, MAT.MAT_GRP_5, MAT.MAT_GRP_6, MAT.MAT_GRP_7, MAT.MAT_GRP_8, MAT.MAT_GRP_9, MAT.MAT_GRP_10, MAT.MAT_CMF_10, MAT.MAT_CMF_7, MAT.MAT_CMF_8, MAT.MAT_CMF_11, MAT.MAT_ID, MAT.CONV_MAT_ID, MAT.OPER_GRP_1 
                                     , A.D0_PLAN, A.SHP_TODAY, A.D0_DEF 
                                     , A.D1_PLAN, A.SHP_D1, A.D1_DEF 
                                     , A.D2_PLAN, A.SHP_D2, A.D2_DEF 
                                     , A.WEEK_PLAN, A.SHP_WEEK, A.WEEK_DEF 
                                     , A.WEEK2_PLAN, A.SHP2_WEEK, A.WEEK2_DEF 
                                     , A.MON_PLAN, A.SHP_MONTH, A.MONTH_DEF 
                                     , A.D0_ORI_PLAN 
                                     , NVL(B.ASSY_END_QTY,0) AS ASSY_END_QTY 
                                     , MAX(NVL(B.ASSY_END_QTY,0)) OVER(PARTITION BY MAT.MAT_GRP_1, MAT.MAT_GRP_9, MAT.MAT_GRP_10, MAT.MAT_GRP_6, MAT.MAT_CMF_11,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ') AS CHK_ASSY_END_QTY 
                                     , NVL(WIP.QTY,0) AS WIP_QTY 
                                     , RES_CNT 
                                     , RES_CAPA 
                                     , SUM(NVL(WIP.QTY,0)) OVER(PARTITION BY A.MAT_ID ORDER BY MAT.MAT_ID, DECODE(MAT.OPER_GRP_1, 'HMK3A', 1, 'QC_GATE', 2, 'PVI', 3, 'AVI', 4, 'SIG', 5, 'SBA', 6, 'TIN', 7, 'TRIM', 8, 'MK', 9, 'CURE', 10, 'MOLD', 11, 'GATE', 12 
                                                                                                                                , 'WB9', 13, 'DA9', 14, 'WB8', 15, 'DA8', 16, 'WB7', 17, 'DA7', 18, 'WB6', 19, 'DA6', 20, 'WB5', 21, 'DA5', 22, 'WB4', 23, 'DA4', 24 
                                                                                                                                , 'WB3', 25, 'DA3', 26, 'WB2', 27, 'DA2', 28, 'WB1', 29, 'DA1', 30, 'SP', 31, 'SAW', 32, 'BG', 33, 'HMK2A',34, 35)) AS WIP_SUM_QUANTITY 
                                  FROM ( 
                                        SELECT MAT_GRP_1, MAT_GRP_2, MAT_GRP_4, MAT_GRP_5, MAT_GRP_6, MAT_GRP_7, MAT_GRP_8, MAT_GRP_9, MAT_GRP_10, MAT_CMF_10, MAT_CMF_7, MAT_CMF_8, MAT_CMF_11, MAT_ID, OPER_GRP_1 
                                             , CASE WHEN MAT_GRP_1 = 'SE' AND MAT_GRP_9 = 'MEMORY' THEN 'SEK_________-___' || SUBSTR(MAT_ID, -3) 
                                                    WHEN MAT_GRP_1 = 'HX' THEN MAT_CMF_10 
                                                    ELSE MAT_ID 
                                                END CONV_MAT_ID 
                                          FROM ( 
                                                SELECT * 
                                                  FROM (
                                                        SELECT A.* 
                                                          FROM MWIPMATDEF A
                                                         WHERE 1=1 
                                                           AND FACTORY = 'HMVA2' 
                                                           AND DELETE_FLAG = ' ' 
                                                           AND MAT_TYPE = 'FG' 
                                                           AND MAT_ID LIKE '%' 
                                                           AND MAT_GRP_10 NOT LIKE 'COB%' 
                                                       ) 
                                               ) 
                                             , ( 
                                                SELECT DECODE(LEVEL, 1, 'HMK3A', 2, 'QC_GATE', 3, 'PVI', 4, 'AVI', 5, 'SIG', 6, 'SBA', 7, 'TIN', 8, 'TRIM', 9, 'MK', 10, 'CURE', 11, 'MOLD', 12, 'GATE' 
                                                                   , 13, 'WB9', 14, 'DA9', 15, 'WB8', 16, 'DA8', 17, 'WB7', 18, 'DA7', 19, 'WB6', 20, 'DA6', 21, 'WB5', 22, 'DA5', 23, 'WB4', 24, 'DA4'
                                                                   , 25, 'WB3', 26, 'DA3', 27, 'WB2', 28, 'DA2', 29, 'WB1', 30, 'DA1', 31, 'SP', 32, 'SAW', 33, 'BG', 34, 'HMK2A' 
                                                             ) OPER_GRP_1 
                                                  FROM DUAL CONNECT BY LEVEL <= 34 
                                               ) 
                                       ) MAT 
                                     , ( 
                                        SELECT MAT.MAT_ID 
                                             , SUM(NVL(D0_PLAN, 0) + (NVL(WEEK1_TTL, 0) - NVL(SHP_WEEK_TTL, 0))) AS D0_PLAN 
                                             , SUM(NVL(D0_PLAN, 0)) AS D0_ORI_PLAN 
                                             , SUM(NVL(SHP_TODAY, 0)) AS SHP_TODAY 
                                             , SUM(NVL(D0_PLAN, 0) + (NVL(WEEK1_TTL, 0) - NVL(SHP_WEEK_TTL, 0)) - NVL(SHP_TODAY, 0)) AS D0_DEF 
                                             , SUM(NVL(D1_PLAN, 0)) AS D1_PLAN 
                                             , 0 AS SHP_D1 
                                             , SUM(NVL(D1_PLAN, 0) + NVL(D0_PLAN, 0) + (NVL(WEEK1_TTL, 0) - NVL(SHP_WEEK_TTL, 0)) - NVL(SHP_TODAY, 0)) AS D1_DEF 
                                             , SUM(NVL(D2_PLAN, 0)) AS D2_PLAN 
                                             , 0 AS SHP_D2 
                                             , SUM(NVL(D2_PLAN, 0) + NVL(D1_PLAN, 0) + NVL(D0_PLAN, 0) + (NVL(WEEK1_TTL, 0) - NVL(SHP_WEEK_TTL, 0)) - NVL(SHP_TODAY, 0)) AS D2_DEF 
                                             , SUM(NVL(WEEK1_PLAN, 0)) AS WEEK_PLAN 
                                             , SUM(NVL(SHP_WEEK, 0)) AS SHP_WEEK 
                                             , SUM(NVL(WEEK1_PLAN, 0) - NVL(SHP_WEEK, 0)) AS WEEK_DEF 
                                             , SUM(NVL(WEEK2_PLAN, 0)) AS WEEK2_PLAN 
                                             , 0 AS SHP2_WEEK 
                                             , SUM(NVL(WEEK2_PLAN, 0) + NVL(WEEK1_PLAN, 0) - NVL(SHP_WEEK, 0)) AS WEEK2_DEF 
                                             , SUM(NVL(CASE WHEN MAT.MAT_GRP_3 IN ('COB') THEN ROUND(MON.RESV_FIELD1/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0) 
                                                    ELSE MON.RESV_FIELD1 
                                                END,0)) MON_PLAN 
                                             , SUM(NVL(SHP_MONTH, 0)) AS SHP_MONTH 
                                             , SUM(NVL(CASE WHEN MAT.MAT_GRP_3 IN ('COB') THEN ROUND(NVL(MON.RESV_FIELD1,0)/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0)-NVL(SHP_MONTH, 0) 
                                                    ELSE NVL(MON.RESV_FIELD1, 0)-NVL(SHP_MONTH, 0) 
                                                END,0)) MONTH_DEF 
                                          FROM MWIPMATDEF MAT 
                                             , ( 
                                                SELECT FACTORY, MAT_ID 
                                                     , SUM(CASE WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 1 THEN D0_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 2 THEN D0_QTY + D1_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 3 THEN D0_QTY + D1_QTY + D2_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 4 THEN D0_QTY + D1_QTY + D2_QTY + D3_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 5 THEN D0_QTY + D1_QTY + D2_QTY + D3_QTY + D4_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 6 THEN D0_QTY + D1_QTY + D2_QTY + D3_QTY + D4_QTY + D5_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 3 THEN D0_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 4 THEN D0_QTY + D1_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 5 THEN D0_QTY + D1_QTY + D2_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 6 THEN D0_QTY + D1_QTY + D2_QTY + D3_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 7 THEN D0_QTY + D1_QTY + D2_QTY + D3_QTY + D4_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 1 THEN D0_QTY + D1_QTY + D2_QTY + D3_QTY + D4_QTY + D5_QTY 
                                                                ELSE 0 
                                                           END) AS WEEK1_TTL 
                                                     , SUM(W1_QTY) AS WEEK1_PLAN 
                                                     , SUM(W2_QTY) AS WEEK2_PLAN 
                                                     , SUM(NVL(W1_QTY,0) + NVL(W2_QTY,0)) AS WEEK_TTL 
                                                     , SUM(CASE WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 7 THEN D0_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 1 THEN D1_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 2 THEN D2_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 3 THEN D3_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 4 THEN D4_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 5 THEN D5_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 6 THEN D6_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 2 THEN D0_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 3 THEN D1_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 4 THEN D2_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 5 THEN D3_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 6 THEN D4_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 7 THEN D5_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 1 THEN D6_QTY 
                                                                ELSE 0 
                                                           END) AS D0_PLAN 
                                                     , SUM(CASE WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 7 THEN D1_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 1 THEN D2_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 2 THEN D3_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 3 THEN D4_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 4 THEN D5_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 5 THEN D6_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 6 THEN D7_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 2 THEN D1_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 3 THEN D2_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 4 THEN D3_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 5 THEN D4_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 6 THEN D5_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 7 THEN D6_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 1 THEN D7_QTY 
                                                                ELSE 0 
                                                           END) AS D1_PLAN 
                                                     , SUM(CASE WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 7 THEN D2_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 1 THEN D3_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 2 THEN D4_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 3 THEN D5_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 4 THEN D6_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 5 THEN D7_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 6 THEN D8_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 2 THEN D2_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 3 THEN D3_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 4 THEN D4_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 5 THEN D5_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 6 THEN D6_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 7 THEN D7_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 1 THEN D8_QTY 
                                                                ELSE 0 
                                                           END) AS D2_PLAN 
                                                  FROM ( 
                                                        SELECT FACTORY, MAT_ID, 'OTD' AS CALENDAR_ID 
                                                             , SUM(DECODE(PLAN_WEEK, '202030', D0_QTY, 0)) AS D0_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202030', D1_QTY, 0)) AS D1_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202030', D2_QTY, 0)) AS D2_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202030', D3_QTY, 0)) AS D3_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202030', D4_QTY, 0)) AS D4_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202030', D5_QTY, 0)) AS D5_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202030', D6_QTY, 0)) AS D6_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202031', D0_QTY, 0)) AS D7_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202031', D1_QTY, 0)) AS D8_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202031', D2_QTY, 0)) AS D9_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202031', D3_QTY, 0)) AS D10_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202031', D4_QTY, 0)) AS D11_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202031', D5_QTY, 0)) AS D12_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202031', D6_QTY, 0)) AS D13_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202030', WW_QTY, 0)) AS W1_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202031', WW_QTY, 0)) AS W2_QTY  
                                                          FROM RWIPPLNWEK  
                                                         WHERE 1=1  
                                                           AND FACTORY = 'HMVA2'  
                                                           AND GUBUN = '3'  
                                                           AND MAT_ID NOT LIKE 'SES%' 
                                                           AND PLAN_WEEK IN ('202030','202031') 
                                                         GROUP BY FACTORY, MAT_ID  
                                                         UNION ALL 
                                                        SELECT FACTORY, MAT_ID, 'SE' AS CALENDAR_ID  
                                                             , SUM(DECODE(PLAN_WEEK, '202030', D0_QTY, 0)) AS D0_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202030', D1_QTY, 0)) AS D1_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202030', D2_QTY, 0)) AS D2_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202030', D3_QTY, 0)) AS D3_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202030', D4_QTY, 0)) AS D4_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202030', D5_QTY, 0)) AS D5_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202030', D6_QTY, 0)) AS D6_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202031', D0_QTY, 0)) AS D7_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202031', D1_QTY, 0)) AS D8_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202031', D2_QTY, 0)) AS D9_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202031', D3_QTY, 0)) AS D10_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202031', D4_QTY, 0)) AS D11_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202031', D5_QTY, 0)) AS D12_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202031', D6_QTY, 0)) AS D13_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202030', WW_QTY, 0)) AS W1_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202031', WW_QTY, 0)) AS W2_QTY  
                                                          FROM RWIPPLNWEK  
                                                         WHERE 1=1  
                                                           AND FACTORY = 'HMVA2'  
                                                           AND GUBUN = '3'  
                                                           AND MAT_ID LIKE 'SES%' 
                                                           AND PLAN_WEEK IN ('202030','202031') 
                                                         GROUP BY FACTORY, MAT_ID  
                                                       )  
                                                 GROUP BY FACTORY, MAT_ID  
                                               ) PLN 
                                             , (  
                                                SELECT FACTORY,MAT_ID, RESV_FIELD1  
                                                  FROM (  
                                                        SELECT FACTORY, MAT_ID, SUM(RESV_FIELD1) AS RESV_FIELD1   
                                                          FROM (  
                                                                SELECT FACTORY, MAT_ID, SUM(TO_NUMBER(DECODE(RESV_FIELD1,' ',0,RESV_FIELD1))) AS RESV_FIELD1  
                                                                  FROM CWIPPLNMON  
                                                                 WHERE 1=1  
                                                                   AND FACTORY = 'HMVA2'  
                                                                   AND PLAN_MONTH = '202007' 
                                                                 GROUP BY FACTORY, MAT_ID 
                                                               )  
                                                         GROUP BY FACTORY, MAT_ID 
                                                       ) 
                                               ) MON 
                                             , (  
                                                SELECT MAT_ID  
                                                     , SUM(CASE WHEN SHP_QTY_1 > 0 AND WORK_DATE = '20200721' THEN NVL(SHP_QTY_1, 0) ELSE 0 END) AS SHP_TODAY  
                                                     , SUM(CASE WHEN SHP_QTY_1 > 0 AND MAT_ID LIKE 'SES%' AND WORK_DATE BETWEEN '20200720' AND '20200721' THEN NVL(SHP_QTY_1, 0)  
                                                                WHEN SHP_QTY_1 > 0 AND MAT_ID NOT LIKE 'SES%' AND WORK_DATE BETWEEN '20200718' AND '20200721' THEN NVL(SHP_QTY_1, 0) 
                                                                ELSE 0 END) AS SHP_WEEK  
                                                     , SUM(CASE WHEN SHP_QTY_1 > 0 AND MAT_ID LIKE 'SES%' AND WORK_DATE BETWEEN '20200720' AND '20200720' THEN NVL(SHP_QTY_1, 0)  
                                                                WHEN SHP_QTY_1 > 0 AND MAT_ID NOT LIKE 'SES%' AND WORK_DATE BETWEEN '20200718' AND '20200720' THEN NVL(SHP_QTY_1, 0)  
                                                                ELSE 0 END) AS SHP_WEEK_TTL  
                                                     , SUM(CASE WHEN WORK_DATE BETWEEN '20200701' AND '20200721' THEN NVL(SHP_QTY_1, 0) END) AS SHP_MONTH  
                                                  FROM VSUMWIPOUT 
                                                 WHERE 1=1  
                                                   AND FACTORY  = 'HMVA2'  
                                                   AND LOT_TYPE = 'W'  
                                                   AND CM_KEY_2 = 'PROD'  
                                                   AND CM_KEY_3 LIKE 'P%'
                                                   AND MAT_ID NOT LIKE 'HX%'  
                                                   AND WORK_DATE BETWEEN LEAST('20200701', '20200718', '20200720') AND '20200721' 
                                                 GROUP BY MAT_ID  
                                                 UNION ALL  
                                                SELECT MAT_ID  
                                                     , SUM(CASE WHEN SHP_QTY_1 > 0 AND WORK_DATE = '20200721' THEN NVL(SHP_QTY_1, 0) ELSE 0 END) AS SHP_TODAY  
                                                     , SUM(CASE WHEN SHP_QTY_1 > 0 AND WORK_DATE BETWEEN '20200718' AND '20200721' THEN NVL(SHP_QTY_1, 0) ELSE 0 END) AS SHP_WEEK  
                                                     , SUM(CASE WHEN SHP_QTY_1 > 0 AND WORK_DATE BETWEEN '20200718' AND '20200720' THEN NVL(SHP_QTY_1, 0) ELSE 0 END) AS SHP_WEEK_TTL  
                                                     , SUM(CASE WHEN WORK_DATE BETWEEN '20200701' AND '20200721' THEN NVL(SHP_QTY_1, 0) END) AS SHP_MONTH  
                                                  FROM VSUMWIPOUT_06 
                                                 WHERE 1=1  
                                                   AND FACTORY  = 'HMVA2'  
                                                   AND LOT_TYPE = 'W'  
                                                   AND CM_KEY_2 = 'PROD'  
                                                   AND CM_KEY_3 LIKE 'P%'
                                                   AND MAT_ID LIKE 'HX%'  
                                                   AND WORK_DATE BETWEEN '20200701' AND '20200721' 
                                                 GROUP BY MAT_ID 
                                               ) SHP 
                                         WHERE 1=1 
                                           AND MAT.FACTORY = 'HMVA2' 
                                           AND MAT.MAT_TYPE = 'FG' 
                                           AND MAT.DELETE_FLAG = ' ' 
                                           AND MAT.MAT_ID = PLN.MAT_ID(+) 
                                           AND MAT.MAT_ID = MON.MAT_ID(+) 
                                           AND MAT.MAT_ID = SHP.MAT_ID(+) 
                                         GROUP BY MAT.MAT_ID 
                                         ORDER BY MAT.MAT_ID 
                                       ) A 
                                     , ( 
                                        SELECT MAT_ID, OPER_GRP_1 
                                             , SUM(ASSY_END_QTY) AS ASSY_END_QTY 
                                          FROM ( 
                                                SELECT B.MAT_ID 
                                                     , CASE WHEN OPER IN ('A0000', 'A000N') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'HMK2A' 
                                                            WHEN OPER IN ('A0040') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'BG' 
                                                            WHEN OPER IN ('A0200', 'A0230') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'SAW' 
                                                            WHEN OPER IN ('A0400', 'A0401', 'A0333') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'DA1' 
                                                            WHEN OPER IN ('A0402') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'DA2' 
                                                            WHEN OPER IN ('A0403') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'DA3' 
                                                            WHEN OPER IN ('A0404') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'DA4' 
                                                            WHEN OPER IN ('A0405') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'DA5' 
                                                            WHEN OPER IN ('A0406') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'DA6' 
                                                            WHEN OPER IN ('A0407') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'DA7' 
                                                            WHEN OPER IN ('A0408') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'DA8' 
                                                            WHEN OPER IN ('A0409') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'DA9' 
                                                            WHEN OPER IN ('A0600','A0601') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'WB1' 
                                                            WHEN OPER IN ('A0602') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'WB2' 
                                                            WHEN OPER IN ('A0603') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'WB3' 
                                                            WHEN OPER IN ('A0604') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'WB4' 
                                                            WHEN OPER IN ('A0605') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'WB5' 
                                                            WHEN OPER IN ('A0606') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'WB6' 
                                                            WHEN OPER IN ('A0607') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'WB7' 
                                                            WHEN OPER IN ('A0608') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'WB8' 
                                                            WHEN OPER IN ('A0609') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'WB9' 
                                                            WHEN OPER IN ('A0800', 'A0801', 'A0802', 'A0803', 'A0804', 'A0805', 'A0806', 'A0807', 'A0808', 'A0809') AND MAT_GRP_5 IN ('-', 'Merge') THEN 'GATE' 
                                                            WHEN OPER IN ('A1000', 'A0910') THEN 'MOLD' 
                                                            WHEN OPER IN ('A1100') THEN 'CURE' 
                                                            WHEN OPER IN ('A1150', 'A1500') THEN 'MK' 
                                                            WHEN OPER IN ('A1200') THEN 'TRIM' 
                                                            WHEN OPER IN ('A1450') THEN 'TIN' 
                                                            WHEN OPER IN ('A1300') THEN 'SBA' 
                                                            WHEN OPER IN ('A1750', 'A1800', 'A1900', 'A1825') THEN 'SIG' 
                                                            WHEN OPER IN ('A2000') THEN 'AVI' 
                                                            WHEN OPER IN ('A2050') THEN 'PVI' 
                                                            WHEN OPER IN ('A2100') THEN 'QC_GATE' 
                                                            WHEN OPER IN ('AZ010') THEN 'HMK3A' 
                                                            ELSE ' ' 
                                                        END OPER_GRP_1 
                                                     , (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END) ASSY_END_QTY 
                                                  FROM ( 
                                                        SELECT FACTORY, MAT_ID, OPER, LOT_TYPE, WORK_DATE, CM_KEY_3 
                                                             , SUM(END_LOT) AS END_LOT 
                                                             , SUM(END_QTY_1) AS END_QTY_1 
                                                             , SUM(END_QTY_2) AS END_QTY_2 
                                                             , SUM(CASE WHEN SHIP_QTY_1 > 0 THEN SHIP_QTY_1 ELSE 0 END) AS SHIP_QTY_1 
                                                             , SUM(CASE WHEN SHIP_QTY_2 > 0 THEN SHIP_QTY_2 ELSE 0 END) AS SHIP_QTY_2 
                                                          FROM ( 
                                                                SELECT FACTORY, MAT_ID, OPER, LOT_TYPE, WORK_DATE, CM_KEY_3 
                                                                     , DECODE(SUBSTR(OPER,2,4),'0000',SUM(S1_OPER_IN_LOT+S2_OPER_IN_LOT+S3_OPER_IN_LOT),SUM(S1_END_LOT+S2_END_LOT+S3_END_LOT)) END_LOT 
                                                                     , DECODE(SUBSTR(OPER,2,4),'0000',SUM(S1_OPER_IN_QTY_1+S2_OPER_IN_QTY_1+S3_OPER_IN_QTY_1),SUM(S1_END_QTY_1+S2_END_QTY_1+S3_END_QTY_1+S1_END_RWK_QTY_1 + S2_END_RWK_QTY_1 + S3_END_RWK_QTY_1)) END_QTY_1 
                                                                     , DECODE(SUBSTR(OPER,2,4),'0000',SUM(S1_OPER_IN_QTY_2+S2_OPER_IN_QTY_2+S3_OPER_IN_QTY_2),SUM(S1_END_QTY_2+S2_END_QTY_2+S3_END_QTY_2+S1_END_RWK_QTY_2 + S2_END_RWK_QTY_2 + S3_END_RWK_QTY_2)) END_QTY_2 
                                                                     , 0 SHIP_QTY_1 
                                                                     , 0 SHIP_QTY_2 
                                                                  FROM RSUMWIPMOV 
                                                                 WHERE FACTORY = 'HMVA2' 
                                                                   AND OPER NOT IN ('AZ010') 
                                                                   AND MAT_ID NOT LIKE 'HX%' 
                                                                 GROUP BY FACTORY, MAT_ID, OPER, LOT_TYPE, WORK_DATE, CM_KEY_3 
                                                                 UNION ALL 
                                                                SELECT FACTORY, MAT_ID 
                                                                     , 'AZ010' AS OPER 
                                                                     , LOT_TYPE, WORK_DATE, CM_KEY_3 
                                                                     , 0 END_LOT 
                                                                     , 0 END_QTY_1 
                                                                     , 0 END_QTY_2 
                                                                     , SUM(SHP_QTY_1) SHIP_QTY_1 
                                                                     , SUM(SHP_QTY_2) SHIP_QTY_2 
                                                                  FROM VSUMWIPOUT 
                                                                 WHERE FACTORY = 'HMVA2' 
                                                                   AND MAT_ID NOT LIKE 'HX%' 
                                                                 GROUP BY FACTORY, MAT_ID, LOT_TYPE, WORK_DATE, CM_KEY_3 
                                                                 UNION ALL 
                                                                SELECT FACTORY, MAT_ID, OPER, LOT_TYPE, WORK_DATE, CM_KEY_3 
                                                                     , DECODE(SUBSTR(OPER,2,4),'0000',SUM(S1_OPER_IN_LOT+S2_OPER_IN_LOT+S3_OPER_IN_LOT),SUM(S1_END_LOT+S2_END_LOT+S3_END_LOT)) END_LOT 
                                                                     , DECODE(SUBSTR(OPER,2,4),'0000',SUM(S1_OPER_IN_QTY_1+S2_OPER_IN_QTY_1+S3_OPER_IN_QTY_1),SUM(S1_END_QTY_1+S2_END_QTY_1+S3_END_QTY_1+S1_END_RWK_QTY_1 + S2_END_RWK_QTY_1 + S3_END_RWK_QTY_1)) END_QTY_1 
                                                                     , DECODE(SUBSTR(OPER,2,4),'0000',SUM(S1_OPER_IN_QTY_2+S2_OPER_IN_QTY_2+S3_OPER_IN_QTY_2),SUM(S1_END_QTY_2+S2_END_QTY_2+S3_END_QTY_2+S1_END_RWK_QTY_2 + S2_END_RWK_QTY_2 + S3_END_RWK_QTY_2)) END_QTY_2 
                                                                     , 0 SHIP_QTY_1 
                                                                     , 0 SHIP_QTY_2 
                                                                  FROM CSUMWIPMOV 
                                                                 WHERE FACTORY = 'HMVA2' 
                                                                   AND OPER NOT IN ('AZ010') 
                                                                   AND MAT_ID LIKE 'HX%' 
                                                                 GROUP BY FACTORY, MAT_ID, OPER, LOT_TYPE, WORK_DATE, CM_KEY_3 
                                                                 UNION ALL 
                                                                SELECT FACTORY, MAT_ID 
                                                                     , 'AZ010' AS OPER 
                                                                     , LOT_TYPE, WORK_DATE, CM_KEY_3 
                                                                     , 0 END_LOT 
                                                                     , 0 END_QTY_1 
                                                                     , 0 END_QTY_2 
                                                                     , SUM(SHP_QTY_1) SHIP_QTY_1 
                                                                     , SUM(SHP_QTY_2) SHIP_QTY_2 
                                                                  FROM VSUMWIPOUT_06 
                                                                 WHERE FACTORY = 'HMVA2' 
                                                                   AND MAT_ID LIKE 'HX%' 
                                                                 GROUP BY FACTORY, MAT_ID, LOT_TYPE, WORK_DATE, CM_KEY_3 
                                                               ) 
                                                         GROUP BY FACTORY, MAT_ID, OPER, LOT_TYPE, WORK_DATE, CM_KEY_3 
                                                       ) A 
                                                     , MWIPMATDEF B 
                                                 WHERE 1=1 
                                                   AND A.FACTORY  = 'HMVA2' 
                                                   AND A.FACTORY = B.FACTORY 
                                                   AND A.MAT_ID = B.MAT_ID 
                                                   AND B.MAT_TYPE = 'FG' 
                                                   AND A.MAT_ID LIKE '%' 
                                                   AND A.CM_KEY_3 LIKE 'P%'
                                                   AND A.OPER NOT IN ('00001','00002') 
                                                   AND A.WORK_DATE = '20200721' 
                                                 ) 
                                         GROUP BY MAT_ID, OPER_GRP_1 
                                        HAVING SUM(ASSY_END_QTY) > 0 
                                       ) B 
                                     , ( 
                                        SELECT MAT_ID, OPER_GRP_1, SUM(NVL(QTY,0)) QTY 
                                          FROM (  
                                                SELECT MAT_ID 
                                                     , QTY 
                                                     , CASE WHEN OPER_GRP_8 = 'HMK2A' THEN 'HMK2A' 
                                                            WHEN OPER_GRP_8 = 'B/G' THEN 'BG' 
                                                            WHEN OPER_GRP_8 = 'SAW' THEN 'SAW' 
                                                            WHEN OPER_GRP_8 = 'S/P' THEN 'SP' 
                                                            WHEN OPER_GRP_8 IN ('D/A1', 'D/A1 CURE') THEN 'DA1' 
                                                            WHEN OPER_GRP_8 IN ('D/A2', 'D/A2 CURE') THEN 'DA2' 
                                                            WHEN OPER_GRP_8 IN ('D/A3', 'D/A3 CURE') THEN 'DA3' 
                                                            WHEN OPER_GRP_8 IN ('D/A4', 'D/A4 CURE') THEN 'DA4' 
                                                            WHEN OPER_GRP_8 IN ('D/A5', 'D/A5 CURE') THEN 'DA5' 
                                                            WHEN OPER_GRP_8 IN ('D/A6', 'D/A6 CURE') THEN 'DA6' 
                                                            WHEN OPER_GRP_8 IN ('D/A7', 'D/A7 CURE') THEN 'DA7' 
                                                            WHEN OPER_GRP_8 IN ('D/A8', 'D/A8 CURE') THEN 'DA8' 
                                                            WHEN OPER_GRP_8 IN ('D/A9', 'D/A9 CURE') THEN 'DA9' 
                                                            WHEN OPER_GRP_8 = 'W/B1' THEN 'WB1' 
                                                            WHEN OPER_GRP_8 = 'W/B2' THEN 'WB2' 
                                                            WHEN OPER_GRP_8 = 'W/B3' THEN 'WB3' 
                                                            WHEN OPER_GRP_8 = 'W/B4' THEN 'WB4' 
                                                            WHEN OPER_GRP_8 = 'W/B5' THEN 'WB5' 
                                                            WHEN OPER_GRP_8 = 'W/B6' THEN 'WB6' 
                                                            WHEN OPER_GRP_8 = 'W/B7' THEN 'WB7' 
                                                            WHEN OPER_GRP_8 = 'W/B8' THEN 'WB8' 
                                                            WHEN OPER_GRP_8 = 'W/B9' THEN 'WB9' 
                                                            WHEN OPER_GRP_8 = 'GATE' AND MAT_GRP_5 = '-' THEN 'GATE' 
                                                            WHEN OPER_GRP_8 = 'GATE' AND MAT_GRP_1 = 'SE' AND MAT_GRP_5 = 'Merge' THEN 'GATE' 
                                                            WHEN OPER_GRP_8 = 'GATE' AND MAT_GRP_1 = 'HX' THEN 'GATE' 
                                                            WHEN OPER_GRP_8 = 'GATE' AND MAT_GRP_1 NOT IN ('SE','HX') AND SUBSTR(MAT_GRP_4,-1) = SUBSTR(OPER, -1) THEN 'GATE' 
                                                            WHEN OPER_GRP_8 = 'MOLD' THEN 'MOLD' 
                                                            WHEN OPER_GRP_8 = 'CURE' THEN 'CURE' 
                                                            WHEN OPER_GRP_8 = 'M/K' THEN 'MK' 
                                                            WHEN OPER_GRP_8 = 'TRIM' THEN 'TRIM' 
                                                            WHEN OPER_GRP_8 = 'TIN' THEN 'TIN' 
                                                            WHEN OPER_GRP_8 = 'S/B/A' THEN 'SBA' 
                                                            WHEN OPER_GRP_8 = 'SIG' THEN 'SIG' 
                                                            WHEN OPER_GRP_8 = 'AVI' THEN 'AVI' 
                                                            WHEN OPER_GRP_8 = 'V/I' THEN 'PVI' 
                                                            WHEN OPER_GRP_8 = 'QC GATE' THEN 'QC_GATE' 
                                                            WHEN OPER_GRP_8 = 'HMK3A' THEN 'HMK3A' 
                                                            ELSE ' ' 
                                                        END OPER_GRP_1 
                                                  FROM ( 
                                                        SELECT MAT_ID, OPER, OPER_GRP_8, MAT_GRP_1, MAT_GRP_4, MAT_GRP_5, MAT_GRP_10 
                                                             , CASE WHEN MAT_GRP_1 = 'HX' AND HX_COMP_MIN IS NOT NULL
                                                                         THEN (CASE WHEN HX_COMP_MIN <> HX_COMP_MAX AND OPER > HX_COMP_MIN AND OPER <= HX_COMP_MAX THEN QTY_1 / NVL(COMP_CNT / 2,1)
                                                                         WHEN OPER <= HX_COMP_MAX THEN QTY_1 / NVL(COMP_CNT,1)
                                                                         ELSE QTY_1 END)
                                                                    WHEN OPER <= 'A0395' THEN QTY_1 / NVL(COMP_CNT,1) 
                                                                    ELSE QTY_1 
                                                               END QTY 
                                                          FROM ( 
                                                                SELECT A.MAT_ID, B.OPER, B.OPER_GRP_8, C.MAT_GRP_1, C.MAT_GRP_4, C.MAT_GRP_5, C.MAT_GRP_10 
                                                                     , CASE WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN CASE WHEN MAT_GRP_5 IN ('1st','Merge') OR MAT_GRP_5 LIKE 'Middle%' THEN QTY_1 ELSE 0 END 
                                                                            WHEN MAT_GRP_3 IN ('COB', 'BGN') THEN ROUND(QTY_1/TO_NUMBER(DECODE(MAT_CMF_13, ' ', 1, '-', 1, MAT_CMF_13)),0) 
                                                                            ELSE QTY_1 
                                                                       END AS QTY_1 
                                                                     , COMP_CNT  
                                                                     , HX_COMP_MIN, HX_COMP_MAX 
                                                                  FROM RWIPLOTSTS A   
                                                                     , MWIPOPRDEF B   
                                                                     , VWIPMATDEF C 
                                                                 WHERE 1 = 1  
                                                                   AND A.FACTORY = B.FACTORY 
                                                                   AND A.FACTORY = C.FACTORY 
                                                                   AND A.OPER = B.OPER 
                                                                   AND A.MAT_ID = C.MAT_ID 
                                                                   AND A.FACTORY = 'HMVA2'   
                                                                   AND A.LOT_TYPE = 'W'  
                                                                   AND A.LOT_CMF_5 LIKE 'P%'
                                                                   AND A.LOT_DEL_FLAG = ' '  
                                                                   AND C.MAT_GRP_2 <> '-' 
                                                                   AND C.DELETE_FLAG = ' '  
                                                               ) 
                                                       ) 
                                               ) 
                                         WHERE 1=1 
                                           AND OPER_GRP_1 <> ' ' 
                                         GROUP BY MAT_ID, OPER_GRP_1 
                                        HAVING SUM(NVL(QTY,0)) > 0 
                                       ) WIP 
                                     , ( 
                                        SELECT A.RES_STS_2 AS MAT_ID 
                                             , A.OPER_GRP_1 
                                             , SUM(A.RES_CNT) AS RES_CNT 
                                             , SUM(TRUNC(NVL(NVL(B.UPEH,0) * 24 * A.PERCENT * A.RES_CNT, 0))) AS RES_CAPA 
                                          FROM ( 
                                                SELECT FACTORY, RES_STS_2, RES_STS_8 AS OPER, RES_GRP_6 AS RES_MODEL, RES_GRP_7 AS UPEH_GRP, COUNT(RES_ID) AS RES_CNT 
                                                     , CASE WHEN RES_STS_8 LIKE 'A06%' THEN 0.71
                                                            WHEN RES_STS_8 LIKE 'A04%' THEN 0.68
                                                            WHEN RES_STS_8 = 'A0333' THEN 0.68
                                                            ELSE 0.7
                                                       END PERCENT 
                                                     , CASE WHEN RES_STS_8 IN ('A0040') THEN 'BG' 
                                                            WHEN RES_STS_8 IN ('A0200', 'A0230') THEN 'SAW' 
                                                            WHEN RES_STS_8 IN ('A0400', 'A0401', 'A0333') THEN 'DA1' 
                                                            WHEN RES_STS_8 IN ('A0402') THEN 'DA2' 
                                                            WHEN RES_STS_8 IN ('A0403') THEN 'DA3' 
                                                            WHEN RES_STS_8 IN ('A0404') THEN 'DA4' 
                                                            WHEN RES_STS_8 IN ('A0405') THEN 'DA5' 
                                                            WHEN RES_STS_8 IN ('A0406') THEN 'DA6' 
                                                            WHEN RES_STS_8 IN ('A0407') THEN 'DA7' 
                                                            WHEN RES_STS_8 IN ('A0408') THEN 'DA8' 
                                                            WHEN RES_STS_8 IN ('A0409') THEN 'DA9' 
                                                            WHEN RES_STS_8 IN ('A0600','A0601') THEN 'WB1' 
                                                            WHEN RES_STS_8 IN ('A0602') THEN 'WB2' 
                                                            WHEN RES_STS_8 IN ('A0603') THEN 'WB3' 
                                                            WHEN RES_STS_8 IN ('A0604') THEN 'WB4' 
                                                            WHEN RES_STS_8 IN ('A0605') THEN 'WB5' 
                                                            WHEN RES_STS_8 IN ('A0606') THEN 'WB6' 
                                                            WHEN RES_STS_8 IN ('A0607') THEN 'WB7' 
                                                            WHEN RES_STS_8 IN ('A0608') THEN 'WB8' 
                                                            WHEN RES_STS_8 IN ('A0609') THEN 'WB9' 
                                                            WHEN RES_STS_8 IN ('A0800', 'A0801', 'A0802', 'A0803', 'A0804', 'A0805', 'A0806', 'A0807', 'A0808', 'A0809') THEN 'GATE' 
                                                            WHEN RES_STS_8 IN ('A1000', 'A0910') THEN 'MOLD' 
                                                            WHEN RES_STS_8 IN ('A1100') THEN 'CURE' 
                                                            WHEN RES_STS_8 IN ('A1150', 'A1500') THEN 'MK' 
                                                            WHEN RES_STS_8 IN ('A1200') THEN 'TRIM' 
                                                            WHEN RES_STS_8 IN ('A1450') THEN 'TIN' 
                                                            WHEN RES_STS_8 IN ('A1300') THEN 'SBA' 
                                                            WHEN RES_STS_8 IN ('A1750', 'A1800', 'A1900', 'A1825') THEN 'SIG' 
                                                            WHEN RES_STS_8 IN ('A2000') THEN 'AVI' 
                                                            WHEN RES_STS_8 IN ('A2050') THEN 'PVI' 
                                                            WHEN RES_STS_8 IN ('A2100') THEN 'QC_GATE' 
                                                            ELSE ' ' 
                                                       END OPER_GRP_1 
                                                  FROM MRASRESDEF 
                                                 WHERE 1 = 1  
                                                   AND FACTORY  = 'HMVA2' 
                                                   AND RES_CMF_9 = 'Y' 
                                                   AND RES_CMF_7 = 'Y' 
                                                   AND DELETE_FLAG = ' ' 
                                                   AND RES_TYPE='EQUIPMENT' 
                                                   AND (RES_STS_1 NOT IN ('C200', 'B199') OR RES_UP_DOWN_FLAG = 'U') 
                                                 GROUP BY FACTORY,RES_STS_2,RES_STS_8,RES_GRP_6,RES_GRP_7  
                                               ) A 
                                             , CRASUPHDEF B 
                                         WHERE 1=1 
                                           AND A.FACTORY = B.FACTORY(+) 
                                           AND A.OPER = B.OPER(+) 
                                           AND A.RES_MODEL = B.RES_MODEL(+) 
                                           AND A.UPEH_GRP = B.UPEH_GRP(+) 
                                           AND A.RES_STS_2 = B.MAT_ID(+) 
                                           AND A.FACTORY  = 'HMVA2' 
                                           AND A.OPER NOT IN ('00001','00002') 
                                           AND A.OPER_GRP_1 <> ' ' 
                                         GROUP BY A.RES_STS_2, A.OPER_GRP_1 
                                       ) RES 
                                 WHERE 1=1 
                                   AND MAT.MAT_ID = A.MAT_ID(+) 
                                   AND MAT.MAT_ID = B.MAT_ID(+) 
                                   AND MAT.MAT_ID = WIP.MAT_ID(+) 
                                   AND MAT.MAT_ID = RES.MAT_ID(+) 
                                   AND MAT.OPER_GRP_1 = B.OPER_GRP_1(+) 
                                   AND MAT.OPER_GRP_1 = WIP.OPER_GRP_1(+) 
                                   AND MAT.OPER_GRP_1 = RES.OPER_GRP_1(+) 
                               ) 
                         GROUP BY MAT_GRP_1, MAT_GRP_9, MAT_GRP_10, MAT_GRP_6, MAT_CMF_11,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', OPER_GRP_1 
                        HAVING ( 
                                SUM(NVL(D0_ORI_PLAN,0))+SUM(NVL(D1_PLAN,0))+SUM(NVL(D2_PLAN,0))+SUM(NVL(WEEK_PLAN,0))+SUM(NVL(WEEK2_PLAN,0))+SUM(NVL(MON_PLAN,0))+SUM(NVL(WIP_QTY,0)) 
                              + SUM(NVL(D0_PLAN,0))+SUM(NVL(SHP_WEEK,0))+SUM(NVL(SHP_MONTH,0))+SUM(NVL(ASSY_END_QTY,0)) 
                               ) > 0 
                      ) 
                    , (SELECT LEVEL AS SEQ FROM DUAL CONNECT BY LEVEL <= 10) 
                 GROUP BY MAT_GRP_1, MAT_GRP_9, MAT_GRP_10, MAT_GRP_6, MAT_CMF_11,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', OPER_GRP_1, DECODE(SEQ, 1, 'WIP', 2, '설비대수', 3, 'CAPA현황', 4, '당일 실적', 5, 'D0 잔량', 6, 'D1 잔량', 7, 'D2 잔량', 8, '당주 잔량', 9, '차주 잔량', 10, '월간 잔량') 
               ) 
         GROUP BY  MAT_GRP_1, MAT_GRP_9, MAT_GRP_10, MAT_GRP_6, MAT_CMF_11,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', GUBUN 
       ) A 
 WHERE 1=1 
 GROUP BY MAT_GRP_1, MAT_GRP_9, MAT_GRP_10, MAT_GRP_6, MAT_CMF_11,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', GUBUN 
 ORDER BY DECODE(MAT_GRP_1, 'SE', 1, 'HX', 2, 'IM', 3, 'FC', 4, 'IG', 5, 6), CUSTOMER, MAJOR, PKG, LD_COUNT, PKG_CODE,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', DECODE(GUBUN, 'WIP', 1, '설비대수', 2, 'CAPA현황', 3, '당일 실적', 4, 'D0 잔량', 5, 'D1 잔량', 6, 'D2 잔량', 7, '당주 잔량', 8, '차주 잔량', 9, '월간 잔량', 10) 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT (SELECT DATA_1 FROM MGCMTBLDAT@RPTTOMES WHERE FACTORY = 'HMVA2' AND TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = MAT_GRP_1) AS CUSTOMER, MAT_GRP_9 AS MAJOR, MAT_GRP_10 AS PKG, MAT_GRP_6 AS LD_COUNT, MAT_CMF_11 AS PKG_CODE,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ' 
     , MAX(DECODE(OPER_GRP_1, 'HMK3A', 'T', '', 'F', 'F')) AS HMK3A 
     , MAX(DECODE(OPER_GRP_1, 'QC_GATE', 'T', '', 'F', 'F')) AS QC_GATE 
     , MAX(DECODE(OPER_GRP_1, 'PVI', 'T', '', 'F', 'F')) AS PVI 
     , MAX(DECODE(OPER_GRP_1, 'AVI', 'T', '', 'F', 'F')) AS AVI 
     , MAX(DECODE(OPER_GRP_1, 'SIG', 'T', '', 'F', 'F')) AS SIG 
     , MAX(DECODE(OPER_GRP_1, 'SBA', 'T', '', 'F', 'F')) AS SBA 
     , MAX(DECODE(OPER_GRP_1, 'TIN', 'T', '', 'F', 'F')) AS TIN 
     , MAX(DECODE(OPER_GRP_1, 'TRIM', 'T', '', 'F', 'F')) AS TRIM 
     , MAX(DECODE(OPER_GRP_1, 'MK', 'T', '', 'F', 'F')) AS MK 
     , MAX(DECODE(OPER_GRP_1, 'CURE', 'T', '', 'F', 'F')) AS CURE 
     , MAX(DECODE(OPER_GRP_1, 'MOLD', 'T', '', 'F', 'F')) AS MOLD 
     , MAX(DECODE(OPER_GRP_1, 'GATE', 'T', '', 'F', 'F')) AS GATE 
     , MAX(DECODE(OPER_GRP_1, 'WB9', 'T', '', 'F', 'F')) AS WB9 
     , MAX(DECODE(OPER_GRP_1, 'DA9', 'T', '', 'F', 'F')) AS DA9 
     , MAX(DECODE(OPER_GRP_1, 'WB8', 'T', '', 'F', 'F')) AS WB8 
     , MAX(DECODE(OPER_GRP_1, 'DA8', 'T', '', 'F', 'F')) AS DA8 
     , MAX(DECODE(OPER_GRP_1, 'WB7', 'T', '', 'F', 'F')) AS WB7 
     , MAX(DECODE(OPER_GRP_1, 'DA7', 'T', '', 'F', 'F')) AS DA7 
     , MAX(DECODE(OPER_GRP_1, 'WB6', 'T', '', 'F', 'F')) AS WB6 
     , MAX(DECODE(OPER_GRP_1, 'DA6', 'T', '', 'F', 'F')) AS DA6 
     , MAX(DECODE(OPER_GRP_1, 'WB5', 'T', '', 'F', 'F')) AS WB5 
     , MAX(DECODE(OPER_GRP_1, 'DA5', 'T', '', 'F', 'F')) AS DA5 
     , MAX(DECODE(OPER_GRP_1, 'WB4', 'T', '', 'F', 'F')) AS WB4 
     , MAX(DECODE(OPER_GRP_1, 'DA4', 'T', '', 'F', 'F')) AS DA4 
     , MAX(DECODE(OPER_GRP_1, 'WB3', 'T', '', 'F', 'F')) AS WB3 
     , MAX(DECODE(OPER_GRP_1, 'DA3', 'T', '', 'F', 'F')) AS DA3  
     , MAX(DECODE(OPER_GRP_1, 'WB2', 'T', '', 'F', 'F')) AS WB2 
     , MAX(DECODE(OPER_GRP_1, 'DA2', 'T', '', 'F', 'F')) AS DA2 
     , MAX(DECODE(OPER_GRP_1, 'WB1', 'T', '', 'F', 'F')) AS WB1 
     , MAX(DECODE(OPER_GRP_1, 'DA1', 'T', '', 'F', 'F')) AS DA1 
     , MAX(DECODE(OPER_GRP_1, 'SP', 'T', '', 'F', 'F')) AS SP 
     , MAX(DECODE(OPER_GRP_1, 'SAW', 'T', '', 'F', 'F')) AS SAW 
     , MAX(DECODE(OPER_GRP_1, 'BG', 'T', '', 'F', 'F')) AS BG 
     , MAX(DECODE(OPER_GRP_1, 'HMK2A','T', '', 'F', 'F')) AS HMK2A 
  FROM ( 
        SELECT MAT.FACTORY, MAT.MAT_GRP_1, MAT.MAT_GRP_9, MAT.MAT_GRP_10, MAT.MAT_GRP_6, MAT.MAT_CMF_11,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT.MAT_ID, MAT.DELETE_FLAG 
             , CASE WHEN MAT.MAT_GRP_1 = 'SE' AND MAT.MAT_GRP_9 = 'MEMORY' THEN 'SEK_________-___' || SUBSTR(MAT.MAT_ID, -3) 
                                                                    WHEN MAT.MAT_GRP_1 = 'HX' THEN MAT.MAT_CMF_10 
                                                                    ELSE MAT_ID 
                                                               END CONV_MAT_ID 
          FROM MWIPMATDEF MAT 
       ) MAT 
     , ( 
        SELECT A.MAT_ID 
                     , CASE WHEN B.OPER IN ('A0400', 'A0401', 'A0333') THEN 'DA1' 
                            WHEN B.OPER IN ('A0402') THEN 'DA2' 
                            WHEN B.OPER IN ('A0403') THEN 'DA3' 
                            WHEN B.OPER IN ('A0404') THEN 'DA4' 
                            WHEN B.OPER IN ('A0405') THEN 'DA5' 
                            WHEN B.OPER IN ('A0406') THEN 'DA6' 
                            WHEN B.OPER IN ('A0407') THEN 'DA7' 
                            WHEN B.OPER IN ('A0408') THEN 'DA8' 
                            WHEN B.OPER IN ('A0409') THEN 'DA9' 
                            WHEN B.OPER IN ('A0600', 'A0601') THEN 'WB1' 
                            WHEN B.OPER IN ('A0602') THEN 'WB2' 
                            WHEN B.OPER IN ('A0603') THEN 'WB3' 
                            WHEN B.OPER IN ('A0604') THEN 'WB4' 
                            WHEN B.OPER IN ('A0605') THEN 'WB5' 
                            WHEN B.OPER IN ('A0606') THEN 'WB6' 
                            WHEN B.OPER IN ('A0607') THEN 'WB7' 
                            WHEN B.OPER IN ('A0608') THEN 'WB8' 
                            WHEN B.OPER IN ('A0609') THEN 'WB9' 
                            ELSE ' ' 
                        END OPER_GRP_1 
          FROM MWIPMATDEF A 
             , MWIPFLWOPR@RPTTOMES B 
         WHERE 1=1 
           AND A.FACTORY = B.FACTORY 
           AND A.FIRST_FLOW = B.FLOW 
           AND A.FACTORY = 'HMVA2' 
           AND A.DELETE_FLAG = ' ' 
           AND A.MAT_TYPE = 'FG' 
           AND A.MAT_GRP_5 IN ('-', 'Merge') 
           AND A.MAT_ID LIKE '%' 
       ) A 
 WHERE 1=1 
   AND MAT.FACTORY = 'HMVA2' 
   AND MAT.DELETE_FLAG = ' ' 
   AND MAT.MAT_ID = A.MAT_ID  
 GROUP BY MAT.MAT_GRP_1, MAT.MAT_GRP_9, MAT.MAT_GRP_10, MAT.MAT_GRP_6, MAT.MAT_CMF_11,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ' 
 ORDER BY DECODE(MAT_GRP_1, 'SE', 1, 'HX', 2, 'IM', 3, 'FC', 4, 'IG', 5, 6), CUSTOMER, MAJOR, PKG, LD_COUNT, PKG_CODE,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ' 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
SELECT MIN(SYS_DATE) AS START_DAY 
     , MAX(SYS_DATE) AS END_DAY 
     , PLAN_YEAR||DECODE(LENGTH(PLAN_WEEK), 1, '0'||PLAN_WEEK, PLAN_WEEK) AS WEEK
  FROM MWIPCALDEF 
 WHERE CALENDAR_ID = 'OTD'
   AND (PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) IN ( 
                                                SELECT WW
                                                  FROM (
                                                        SELECT WW
                                                             , ROW_NUMBER() OVER(ORDER BY WW) AS RNK
                                                          FROM (
                                                                SELECT DISTINCT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW
                                                                  FROM MWIPCALDEF
                                                                 WHERE CALENDAR_ID = 'OTD'
                                                                   AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') >= (
                                                                                                              SELECT MAX(PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) AS WW
                                                                                                                FROM MWIPCALDEF
                                                                                                               WHERE CALENDAR_ID = 'OTD'
                                                                                                                 AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') < (SELECT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW FROM MWIPCALDEF WHERE CALENDAR_ID = 'OTD' AND SYS_DATE = '20200721')
                                                                                                                 AND SYS_DATE >= TO_CHAR(TO_DATE('20200721', 'YYYYMMDD')-14, 'YYYYMMDD')
                                                                                                             )
                                                               ) 
                                                       )
                                                 WHERE RNK <= 7
                                               ) 
 GROUP BY PLAN_YEAR, PLAN_WEEK 
 ORDER BY PLAN_YEAR, PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT LANGUAGE_2 FROM RWEBFUNDEF WHERE FUNC_NAME = 'PRD010204'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE) AS START_DAY 
     , MAX(SYS_DATE) AS END_DAY 
     , PLAN_YEAR||DECODE(LENGTH(PLAN_WEEK), 1, '0'||PLAN_WEEK, PLAN_WEEK) AS WEEK
  FROM MWIPCALDEF 
 WHERE CALENDAR_ID = 'OTD'
   AND (PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) IN ( 
                                                SELECT WW
                                                  FROM (
                                                        SELECT WW
                                                             , ROW_NUMBER() OVER(ORDER BY WW) AS RNK
                                                          FROM (
                                                                SELECT DISTINCT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW
                                                                  FROM MWIPCALDEF
                                                                 WHERE CALENDAR_ID = 'OTD'
                                                                   AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') >= (
                                                                                                              SELECT MAX(PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) AS WW
                                                                                                                FROM MWIPCALDEF
                                                                                                               WHERE CALENDAR_ID = 'OTD'
                                                                                                                 AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') < (SELECT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW FROM MWIPCALDEF WHERE CALENDAR_ID = 'OTD' AND SYS_DATE = '20200721')
                                                                                                                 AND SYS_DATE >= TO_CHAR(TO_DATE('20200721', 'YYYYMMDD')-14, 'YYYYMMDD')
                                                                                                             )
                                                               ) 
                                                       )
                                                 WHERE RNK <= 7
                                               ) 
 GROUP BY PLAN_YEAR, PLAN_WEEK 
 ORDER BY PLAN_YEAR, PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
(SELECT TO_CHAR(LAST_DAY(TO_DATE('202006', 'YYYYMM')),'YYYYMMDD') FROM DUAL)
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
(SELECT TO_CHAR(LAST_DAY(TO_DATE('202007', 'YYYYMM')),'YYYYMMDD') FROM DUAL)
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE-1) 
  FROM MWIPCALDEF 
 WHERE 1=1
   AND CALENDAR_ID='SE'
   AND PLAN_YEAR='2020'
   AND PLAN_WEEK=(
                  SELECT PLAN_WEEK 
                    FROM MWIPCALDEF 
                   WHERE 1=1 
                     AND CALENDAR_ID='SE' 
                     AND SYS_DATE=TO_CHAR(TO_DATE('20200721','YYYYMMDD'),'YYYYMMDD')
                 )

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT (SELECT DATA_1 FROM MGCMTBLDAT@RPTTOMES WHERE FACTORY = 'HMVA2' AND TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = A.CUSTOMER) AS CUSTOMER, A.MAJOR, A.PKG,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' '
     , A.ORI_PLAN AS "월계획"
     , A.MON_PLAN AS "월계획Rev"
     , A.MON_PLAN -A.ORI_PLAN AS "월계획 차이"
     , A.TARGET_MON, A.ASSY_MON
     , DECODE(A.MON_PLAN, 0, 0, ROUND((A.ASSY_MON/A.MON_PLAN)*100, 1)) JINDO, A.DEF, WEEK_PLAN, ASSY_WEEK, WEEK_PLAN-ASSY_WEEK AS "주계획 차이"
     , A.HMK3A, A.FINISH, A.MOLD, A.WB, A.DA, A.SAW, A.STOCK, A.HMK3A+A.FINISH+A.MOLD+A.WB+A.DA+A.SAW+A.STOCK AS TTL, A.TARGET_DAY AS "일목표", A.AO0, A.AO1, A.AO2 
     , A.RCV0, A.RCV1, A.RCV2, A.SW0, A.SW1, A.SW2, A.DA0, A.DA1, A.DA2, A.WB0, A.WB1, A.WB2, A.MD0, A.MD1, A.MD2, A.TF0, A.TF1, A.TF2 
     , ROUND(B.TAT1*24,2)
     , CASE WHEN HIST_AO > 0 THEN '●' END AS HIST_AO
  FROM ( 
        SELECT A.MAT_GRP_1 AS CUSTOMER, A.MAT_GRP_9 AS MAJOR, A.MAT_GRP_10 AS PKG,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' '
             , SUM(NVL(A.MON_PLAN,0)) AS MON_PLAN 
             , SUM(NVL(A.ORI_PLAN,0)) AS ORI_PLAN 
             , SUM(NVL(A.WEEK_PLAN,0)) AS WEEK_PLAN 
             , SUM(NVL(A.ASSY_WEEK,0)) AS ASSY_WEEK 
             , ROUND(((SUM(NVL(A.MON_PLAN,0)) * 67.7) / 100),0) AS TARGET_MON 
             , SUM(NVL(A.ASSY_MON,0)) AS ASSY_MON 
             , SUM(NVL(A.ASSY_MON,0)) - ROUND(((SUM(NVL(A.MON_PLAN,0)) * 67.7) / 100),1) AS DEF   
             , SUM(NVL(A.AO0,0)) AS AO0 
             , SUM(NVL(A.AO1,0)) AS AO1 
             , SUM(NVL(A.AO2,0)) AS AO2 
             , ROUND(((SUM(NVL(A.MON_PLAN,0)) - SUM(NVL(A.ASSY_MON,0))) /11), 1) AS TARGET_DAY 
             , SUM(NVL(A.RCV0,0)) AS RCV0
             , SUM(NVL(A.RCV1,0)) AS RCV1
             , SUM(NVL(A.RCV2,0)) AS RCV2
             , ROUND(SUM(NVL((CASE WHEN A.MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND MAT_ID LIKE 'SEKS%') THEN DECODE(A.MAT_GRP_5, '2nd', D.SW0 / COMP_CNT, 0)
                                   WHEN A.MAT_GRP_3 IN ('COB', 'BGN') THEN D.SW0 / NET_DIE
                                   WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN CASE WHEN A.MAT_GRP_5 IN ('1st','Merge') OR MAT_GRP_5 LIKE 'Middle%' THEN D.SW0 / DECODE(A.MAT_GRP_1,'HX',1, COMP_CNT) ELSE 0 END 
                                   ELSE D.SW0 / DECODE(A.MAT_GRP_1,'HX',1, COMP_CNT)
                              END),0)
                    ),0) AS SW0
             , ROUND(SUM(NVL((CASE WHEN A.MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND MAT_ID LIKE 'SEKS%') THEN DECODE(A.MAT_GRP_5, '2nd', D.SW1 / COMP_CNT, 0)
                                   WHEN A.MAT_GRP_3 IN ('COB', 'BGN') THEN D.SW1 / NET_DIE
                                   WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN CASE WHEN A.MAT_GRP_5 IN ('1st','Merge') OR MAT_GRP_5 LIKE 'Middle%' THEN D.SW1 / DECODE(A.MAT_GRP_1,'HX',1,COMP_CNT) ELSE 0 END 
                                   ELSE D.SW1 / DECODE(A.MAT_GRP_1,'HX',1,COMP_CNT)
                              END),0)
                    ),0) AS SW1
             , ROUND(SUM(NVL((CASE WHEN A.MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND MAT_ID LIKE 'SEKS%') THEN DECODE(A.MAT_GRP_5, '2nd', D.SW2 / COMP_CNT, 0)
                                   WHEN A.MAT_GRP_3 IN ('COB', 'BGN') THEN D.SW2 / NET_DIE
                                   WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN CASE WHEN A.MAT_GRP_5 IN ('1st','Merge') OR MAT_GRP_5 LIKE 'Middle%' THEN D.SW2 / DECODE(A.MAT_GRP_1,'HX',1,COMP_CNT) ELSE 0 END 
                                   ELSE D.SW2 / DECODE(A.MAT_GRP_1,'HX',1,COMP_CNT)
                              END),0)
                    ),0) AS SW2
             , SUM(NVL((CASE WHEN A.MAT_GRP_1 = 'SE' AND A.MAT_GRP_9 = 'MEMORY' AND A.MAT_GRP_5 <> '-' THEN (CASE WHEN A.MAT_GRP_5 = 'Merge' THEN NVL(D.DA02,0) + NVL(D.DA03,0) + NVL(D.DA04,0) + NVL(D.DA05,0) + NVL(D.DA06,0) + NVL(D.DA07,0) + NVL(D.DA08,0) + NVL(D.DA09,0) ELSE 0 END)
                             WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN DECODE(SUBSTR(MAT_GRP_4,-1), '2', D.DA02, '3', D.DA03, '4', D.DA04, '5', D.DA05, '6', D.DA06, '7', D.DA07, '8', D.DA08, '9', D.DA09, 0)
                             ELSE D.DA0
                        END),0)
                   ) AS DA0
             , SUM(NVL((CASE WHEN A.MAT_GRP_1 = 'SE' AND A.MAT_GRP_9 = 'MEMORY' AND A.MAT_GRP_5 <> '-' THEN (CASE WHEN A.MAT_GRP_5 = 'Merge' THEN NVL(D.DA12,0) + NVL(D.DA13,0) + NVL(D.DA14,0) + NVL(D.DA15,0) + NVL(D.DA16,0) + NVL(D.DA17,0) + NVL(D.DA18,0) + NVL(D.DA19,0) ELSE 0 END)
                             WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN DECODE(SUBSTR(MAT_GRP_4,-1), '2', D.DA12, '3', D.DA13, '4', D.DA14, '5', D.DA15, '6', D.DA16, '7', D.DA17, '8', D.DA18, '9', D.DA19, 0)
                             ELSE D.DA1
                        END),0)
                   ) AS DA1
             , SUM(NVL((CASE WHEN A.MAT_GRP_1 = 'SE' AND A.MAT_GRP_9 = 'MEMORY' AND A.MAT_GRP_5 <> '-' THEN (CASE WHEN A.MAT_GRP_5 = 'Merge' THEN NVL(D.DA22,0) + NVL(D.DA23,0) + NVL(D.DA24,0) + NVL(D.DA25,0) + NVL(D.DA26,0) + NVL(D.DA27,0) + NVL(D.DA28,0) + NVL(D.DA29,0) ELSE 0 END)
                             WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN DECODE(SUBSTR(MAT_GRP_4,-1), '2', D.DA22, '3', D.DA23, '4', D.DA24, '5', D.DA25, '6', D.DA26, '7', D.DA27, '8', D.DA28, '9', D.DA29, 0)
                             ELSE D.DA2
                        END),0)
                   ) AS DA2
             , SUM(NVL((CASE WHEN A.MAT_GRP_1 = 'SE' AND A.MAT_GRP_9 = 'MEMORY' AND A.MAT_GRP_5 <> '-' THEN (CASE WHEN A.MAT_GRP_5 = 'Merge' THEN NVL(D.WB02,0) + NVL(D.WB03,0) + NVL(D.WB04,0) + NVL(D.WB05,0) + NVL(D.WB06,0) + NVL(D.WB07,0) + NVL(D.WB08,0) + NVL(D.WB09,0) ELSE 0 END)
                             WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN DECODE(SUBSTR(MAT_GRP_4,-1), '2', D.WB02, '3', D.WB03, '4', D.WB04, '5', D.WB05, '6', D.WB06, '7', D.WB07, '8', D.WB08, '9', D.WB09, 0)
                             ELSE D.WB0
                        END),0)
                   ) AS WB0
             , SUM(NVL((CASE WHEN A.MAT_GRP_1 = 'SE' AND A.MAT_GRP_9 = 'MEMORY' AND A.MAT_GRP_5 <> '-' THEN (CASE WHEN A.MAT_GRP_5 = 'Merge' THEN NVL(D.WB12,0) + NVL(D.WB13,0) + NVL(D.WB14,0) + NVL(D.WB15,0) + NVL(D.WB16,0) + NVL(D.WB17,0) + NVL(D.WB18,0) + NVL(D.WB19,0) ELSE 0 END)
                             WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN DECODE(SUBSTR(MAT_GRP_4,-1), '2', D.WB12, '3', D.WB13, '4', D.WB14, '5', D.WB15, '6', D.WB16, '7', D.WB17, '8', D.WB18, '9', D.WB19, 0)
                             ELSE D.WB1
                        END),0)
                   ) AS WB1
             , SUM(NVL((CASE WHEN A.MAT_GRP_1 = 'SE' AND A.MAT_GRP_9 = 'MEMORY' AND A.MAT_GRP_5 <> '-' THEN (CASE WHEN A.MAT_GRP_5 = 'Merge' THEN NVL(D.WB22,0) + NVL(D.WB23,0) + NVL(D.WB24,0) + NVL(D.WB25,0) + NVL(D.WB26,0) + NVL(D.WB27,0) + NVL(D.WB28,0) + NVL(D.WB29,0) ELSE 0 END)
                             WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN DECODE(SUBSTR(MAT_GRP_4,-1), '2', D.WB22, '3', D.WB23, '4', D.WB24, '5', D.WB25, '6', D.WB26, '7', D.WB27, '8', D.WB28, '9', D.WB29, 0)
                             ELSE D.WB2
                        END),0)
                   ) AS WB2
             , SUM(NVL(D.MD0,0)) AS MD0, SUM(NVL(D.MD1,0)) AS MD1, SUM(NVL(D.MD2,0)) AS MD2 
             , SUM(NVL(D.TF0,0)) AS TF0, SUM(NVL(D.TF1,0)) AS TF1, SUM(NVL(D.TF2,0)) AS TF2 
             , SUM(NVL(F.V0,0)) AS STOCK
             , SUM(NVL(F.V1,0)+NVL(F.V2,0)) AS SAW
             , SUM(NVL(F.V3,0)+NVL(F.V4,0)+NVL(F.V17,0)) AS DA
             , SUM(NVL(F.V5+F.V16,0)) AS WB
             , SUM(NVL(F.V6,0)+NVL(F.V7,0)) AS MOLD
             , SUM(NVL(F.V8+F.V9+F.V10+F.V11+F.V12+F.V13+F.V14,0)) AS FINISH
             , SUM(NVL(F.V15,0)) AS HMK3A
             , SUM(NVL(F.V0+F.V1+F.V2+F.V3+F.V4+F.V5+F.V6+F.V7+F.V8+F.V9+F.V10+F.V11+F.V12+F.V13+F.V14+F.V15+F.V16+F.V17,0)) AS TTL
             , SUM(HIST_AO) AS HIST_AO 
          FROM ( 
                SELECT MAT.MAT_GRP_1, MAT.MAT_GRP_2, MAT.MAT_GRP_3, MAT.MAT_GRP_4, MAT.MAT_GRP_5, MAT.MAT_GRP_6, MAT.MAT_GRP_7, MAT.MAT_GRP_8 
                     , DECODE(MAT.MAT_GRP_1,'SE',MAT.MAT_GRP_9,' ') AS MAT_GRP_9, MAT.MAT_GRP_10, MAT.MAT_CMF_10, MAT.MAT_ID, MAT.MAT_CMF_7, MAT.NET_DIE, MAT.MAT_CMF_11, MAT.COMP_CNT  
                     , CASE WHEN MAT.MAT_GRP_3 IN ('COB') THEN ROUND(SUM(PLAN.RESV_FIELD1 / MAT.NET_DIE),0)
                            ELSE SUM(PLAN.RESV_FIELD1)
                       END MON_PLAN
                     , CASE WHEN MAT.MAT_GRP_3 IN ('COB') THEN ROUND(SUM(PLAN.PLAN_QTY_ASSY / MAT.NET_DIE),0)
                            ELSE SUM(PLAN.PLAN_QTY_ASSY)
                       END ORI_PLAN
                     , CASE WHEN MAT.MAT_GRP_3 IN ('COB') THEN ROUND(SUM(WEEK_PLAN.WEEK_PLAN / MAT.NET_DIE),0)
                            ELSE SUM(WEEK_PLAN.WEEK_PLAN)
                            END WEEK_PLAN
                     , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN ROUND(SUM(WEEK_AO.WEEK_AO / MAT.NET_DIE),0)
                            ELSE SUM(WEEK_AO.WEEK_AO)
                            END ASSY_WEEK
                     , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN ROUND(SUM(MON_AO.ASSY_MON / MAT.NET_DIE),0)
                            ELSE SUM(MON_AO.ASSY_MON)
                       END ASSY_MON
                     , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN ROUND(SUM(MON_AO.AO0 / MAT.NET_DIE),0)
                            ELSE SUM(MON_AO.AO0)
                       END AO0
                     , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN ROUND(SUM(MON_AO.AO1 / MAT.NET_DIE),0)
                            ELSE SUM(MON_AO.AO1)
                       END AO1
                     , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN ROUND(SUM(MON_AO.AO2 / MAT.NET_DIE),0)
                            ELSE SUM(MON_AO.AO2)
                       END AO2
                     , ROUND(CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN ROUND(SUM(DAY_RCV.RCV0 / MAT.NET_DIE),0)
                                  WHEN MAT.MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND MAT_ID LIKE 'SEKS%') THEN DECODE(MAT.MAT_GRP_5, '2nd', SUM(DAY_RCV.RCV0 / MAT.COMP_CNT), 0)
                                  WHEN MAT.MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT.MAT_GRP_5 <> '-' THEN CASE WHEN MAT.MAT_GRP_5 IN ('1st','Merge') OR MAT.MAT_GRP_5 LIKE 'Middle%' THEN SUM(DAY_RCV.RCV0 / MAT.COMP_CNT) ELSE 0 END 
                                  ELSE SUM(DAY_RCV.RCV0 / MAT.COMP_CNT)
                             END, 0) AS RCV0
                     , ROUND(CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN ROUND(SUM(DAY_RCV.RCV1 / MAT.NET_DIE),0)
                                  WHEN MAT.MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND MAT_ID LIKE 'SEKS%') THEN DECODE(MAT.MAT_GRP_5, '2nd', SUM(DAY_RCV.RCV1 / MAT.COMP_CNT), 0)
                                  WHEN MAT.MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT.MAT_GRP_5 <> '-' THEN CASE WHEN MAT.MAT_GRP_5 IN ('1st','Merge') OR MAT.MAT_GRP_5 LIKE 'Middle%' THEN SUM(DAY_RCV.RCV1 / MAT.COMP_CNT) ELSE 0 END 
                                  ELSE SUM(DAY_RCV.RCV1 / MAT.COMP_CNT)
                             END, 0) AS RCV1
                     , ROUND(CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN ROUND(SUM(DAY_RCV.RCV2 / MAT.NET_DIE),0)
                                  WHEN MAT.MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND MAT_ID LIKE 'SEKS%') THEN DECODE(MAT.MAT_GRP_5, '2nd', SUM(DAY_RCV.RCV2 / MAT.COMP_CNT), 0)
                                  WHEN MAT.MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT.MAT_GRP_5 <> '-' THEN CASE WHEN MAT.MAT_GRP_5 IN ('1st','Merge') OR MAT.MAT_GRP_5 LIKE 'Middle%' THEN SUM(DAY_RCV.RCV2 / MAT.COMP_CNT) ELSE 0 END 
                                  ELSE SUM(DAY_RCV.RCV2 / MAT.COMP_CNT)
                             END, 0) AS RCV2
                     , SUM(HIST_AO.HIST_AO) AS HIST_AO 
                  FROM VWIPMATDEF MAT 
                     , ( 
                        SELECT FACTORY,MAT_ID,PLAN_QTY_ASSY,PLAN_MONTH, RESV_FIELD1 
                          FROM ( 
                                SELECT FACTORY, MAT_ID, SUM(PLAN_QTY_ASSY) AS PLAN_QTY_ASSY, PLAN_MONTH, SUM(RESV_FIELD1) AS RESV_FIELD1  
                                  FROM ( 
                                        SELECT FACTORY, MAT_ID, SUM(PLAN_QTY_ASSY) AS PLAN_QTY_ASSY, PLAN_MONTH, SUM(TO_NUMBER(DECODE(RESV_FIELD1,' ',0,RESV_FIELD1))) AS RESV_FIELD1 
                                          FROM CWIPPLNMON 
                                         WHERE 1=1 
                                           AND FACTORY = 'HMVA2' 
                                         GROUP BY FACTORY, MAT_ID, PLAN_MONTH 
                                       ) 
                                 GROUP BY FACTORY, MAT_ID,PLAN_MONTH 
                               ) 
                       ) PLAN 
                     , ( 
                        SELECT FACTORY,MAT_ID, SUM(WW_QTY) AS WEEK_PLAN 
                          FROM RWIPPLNWEK 
                         WHERE FACTORY = 'HMVA2' 
                           AND PLAN_WEEK = '202030'
                           AND GUBUN = '3' 
                        GROUP BY FACTORY,MAT_ID 
                       ) WEEK_PLAN 
                     , ( 
                        SELECT MAT_ID 
                             , SUM(AO0) AS AO0 
                             , SUM(AO1) AS AO1 
                             , SUM(AO2) AS AO2 
                             , SUM(ASSY_MON) AS ASSY_MON 
                          FROM (
                                SELECT MAT_ID 
                                     , SUM(DECODE(WORK_DATE,'20200719', NVL(S1_FAC_OUT_QTY_1 + S2_FAC_OUT_QTY_1 + S3_FAC_OUT_QTY_1 + S4_FAC_OUT_QTY_1, 0), 0)) AS AO0 
                                     , SUM(DECODE(WORK_DATE,'20200720', NVL(S1_FAC_OUT_QTY_1 + S2_FAC_OUT_QTY_1 + S3_FAC_OUT_QTY_1 + S4_FAC_OUT_QTY_1, 0), 0)) AS AO1
                                     , SUM(DECODE(WORK_DATE,'20200721', NVL(S1_FAC_OUT_QTY_1 + S2_FAC_OUT_QTY_1 + S3_FAC_OUT_QTY_1 + S4_FAC_OUT_QTY_1, 0), 0)) AS AO2
                                     , 0 AS ASSY_MON  
                                  FROM RSUMFACMOV 
                                 WHERE 1=1 
                                   AND WORK_DATE BETWEEN '20200719' AND '20200721'
                                   AND LOT_TYPE = 'W' 
                                   AND CM_KEY_1 = 'HMVA2' 
                                   AND CM_KEY_2 = 'PROD' 
                                   AND CM_KEY_3 LIKE 'P%'
                                   AND FACTORY NOT IN ('RETURN') 
                                 GROUP BY MAT_ID 
                                 UNION ALL 
                                SELECT MAT_ID 
                                     , 0, 0, 0 
                                     , SUM(SHP_QTY_1) AS ASSY_MON 
                                  FROM VSUMWIPOUT 
                                 WHERE 1=1 
                                   AND WORK_DATE BETWEEN '20200701' AND '20200721'
                                   AND FACTORY = 'HMVA2' 
                                   AND LOT_TYPE = 'W' 
                                   AND CM_KEY_2 = 'PROD' 
                                   AND CM_KEY_3 LIKE 'P%'
                                 GROUP BY MAT_ID 
                               ) 
                         GROUP BY MAT_ID 
                       ) MON_AO 
                     , ( 
                        SELECT MAT_ID 
                             , SUM(NVL(S1_FAC_OUT_QTY_1 + S2_FAC_OUT_QTY_1 + S3_FAC_OUT_QTY_1 + S4_FAC_OUT_QTY_1, 0)) AS WEEK_AO  
                          FROM RSUMFACMOV 
                         WHERE 1=1 
                           AND WORK_DATE BETWEEN '20200718' AND '20200721'
                           AND LOT_TYPE = 'W' 
                           AND CM_KEY_1 = 'HMVA2' 
                           AND CM_KEY_2 = 'PROD' 
                           AND CM_KEY_3 LIKE 'P%'
                           AND FACTORY NOT IN ('RETURN') 
                         GROUP BY MAT_ID 
                       ) WEEK_AO 
                     , ( 
                        SELECT MAT_ID 
                             , SUM(DECODE(WORK_DATE,'20200719', NVL(RCV_QTY_1,0), 0)) AS RCV0
                             , SUM(DECODE(WORK_DATE,'20200720', NVL(RCV_QTY_1,0), 0)) AS RCV1
                             , SUM(DECODE(WORK_DATE,'20200721', NVL(RCV_QTY_1,0), 0)) AS RCV2
                          FROM VSUMWIPRCV 
                         WHERE 1=1 
                           AND WORK_DATE BETWEEN '20200719' AND '20200721'
                           AND LOT_TYPE = 'W' 
                           AND FACTORY = 'HMVA2' 
                           AND CM_KEY_2 = 'PROD' 
                           AND CM_KEY_3 LIKE 'P%'
                         GROUP BY MAT_ID 
                       ) DAY_RCV  
                     , ( 
                        SELECT MAT_ID 
                             , SUM(NVL(S1_FAC_OUT_QTY_1 + S2_FAC_OUT_QTY_1 + S3_FAC_OUT_QTY_1 + S4_FAC_OUT_QTY_1, 0)) AS HIST_AO  
                          FROM RSUMFACMOV 
                         WHERE 1=1 
                           AND WORK_DATE BETWEEN TO_CHAR(ADD_MONTHS('20200721', -6), 'YYYYMMDD') AND '20200721'
                           AND LOT_TYPE = 'W' 
                           AND CM_KEY_1 = 'HMVA2' 
                           AND CM_KEY_2 = 'PROD' 
                           AND CM_KEY_3 LIKE 'P%'
                           AND FACTORY NOT IN ('RETURN') 
                         GROUP BY MAT_ID 
                       ) HIST_AO 
                 WHERE 1 = 1 
                   AND MAT.FACTORY =PLAN.FACTORY(+) 
                   AND MAT.FACTORY =WEEK_PLAN.FACTORY(+) 
                   AND MAT.MAT_ID = PLAN.MAT_ID(+) 
                   AND MAT.MAT_ID = WEEK_PLAN.MAT_ID(+) 
                   AND MAT.MAT_ID = MON_AO.MAT_ID(+) 
                   AND MAT.MAT_ID = WEEK_AO.MAT_ID(+) 
                   AND MAT.MAT_ID = DAY_RCV.MAT_ID(+) 
                   AND MAT.MAT_ID = HIST_AO.MAT_ID(+) 
                   AND MAT.FACTORY = 'HMVA2' 
                   AND PLAN.PLAN_MONTH(+) = '202007' 
                   AND MAT.MAT_TYPE= 'FG' 
                   AND MAT.DELETE_FLAG <> 'Y' 
                 GROUP BY MAT.MAT_GRP_1, MAT.MAT_GRP_2, MAT.MAT_GRP_3, MAT.MAT_GRP_4, MAT.MAT_GRP_5, MAT.MAT_GRP_6, MAT.MAT_GRP_7, MAT.MAT_GRP_8, MAT.MAT_GRP_9, MAT.MAT_GRP_10, MAT.MAT_CMF_10, MAT.MAT_ID, MAT.MAT_CMF_7, MAT.NET_DIE, MAT.MAT_CMF_11, MAT.COMP_CNT
               ) A  
             , ( 
                SELECT MAT_ID 
                     , SUM(DECODE(OPER, 'A0200', DECODE(WORK_DATE,'20200719', QTY,0))) AS SW0
                     , SUM(DECODE(OPER, 'A0200', DECODE(WORK_DATE,'20200720', QTY,0))) AS SW1
                     , SUM(DECODE(OPER, 'A0200', DECODE(WORK_DATE,'20200721', QTY,0))) AS SW2
                     , SUM(DECODE(OPER_GRP_7, 'D/A', DECODE(WORK_DATE,'20200719', QTY,0))) AS DA0
                     , SUM(DECODE(OPER_GRP_7, 'D/A', DECODE(WORK_DATE,'20200720', QTY,0))) AS DA1
                     , SUM(DECODE(OPER_GRP_7, 'D/A', DECODE(WORK_DATE,'20200721', QTY,0))) AS DA2
                     , SUM(DECODE(OPER_GRP_7, 'W/B', DECODE(WORK_DATE,'20200719', QTY,0))) AS WB0
                     , SUM(DECODE(OPER_GRP_7, 'W/B', DECODE(WORK_DATE,'20200720', QTY,0))) AS WB1
                     , SUM(DECODE(OPER_GRP_7, 'W/B', DECODE(WORK_DATE,'20200721', QTY,0))) AS WB2
                     , SUM(DECODE(OPER_GRP_7, 'MOLD', DECODE(WORK_DATE,'20200719', QTY,0))) AS MD0
                     , SUM(DECODE(OPER_GRP_7, 'MOLD', DECODE(WORK_DATE,'20200720', QTY,0))) AS MD1
                     , SUM(DECODE(OPER_GRP_7, 'MOLD', DECODE(WORK_DATE,'20200721', QTY,0))) AS MD2
                     , SUM(DECODE(OPER_GRP_7, 'SIG', DECODE(WORK_DATE,'20200719', QTY,0))) AS TF0
                     , SUM(DECODE(OPER_GRP_7, 'SIG', DECODE(WORK_DATE,'20200720', QTY,0))) AS TF1
                     , SUM(DECODE(OPER_GRP_7, 'SIG', DECODE(WORK_DATE,'20200721', QTY,0))) AS TF2
                     , SUM(DECODE(OPER, 'A0402', DECODE(WORK_DATE,'20200719', QTY,0))) AS DA02
                     , SUM(DECODE(OPER, 'A0402', DECODE(WORK_DATE,'20200720', QTY,0))) AS DA12
                     , SUM(DECODE(OPER, 'A0402', DECODE(WORK_DATE,'20200721', QTY,0))) AS DA22
                     , SUM(DECODE(OPER, 'A0403', DECODE(WORK_DATE,'20200719', QTY,0))) AS DA03
                     , SUM(DECODE(OPER, 'A0403', DECODE(WORK_DATE,'20200720', QTY,0))) AS DA13
                     , SUM(DECODE(OPER, 'A0403', DECODE(WORK_DATE,'20200721', QTY,0))) AS DA23
                     , SUM(DECODE(OPER, 'A0404', DECODE(WORK_DATE,'20200719', QTY,0))) AS DA04
                     , SUM(DECODE(OPER, 'A0404', DECODE(WORK_DATE,'20200720', QTY,0))) AS DA14
                     , SUM(DECODE(OPER, 'A0404', DECODE(WORK_DATE,'20200721', QTY,0))) AS DA24
                     , SUM(DECODE(OPER, 'A0405', DECODE(WORK_DATE,'20200719', QTY,0))) AS DA05
                     , SUM(DECODE(OPER, 'A0405', DECODE(WORK_DATE,'20200720', QTY,0))) AS DA15
                     , SUM(DECODE(OPER, 'A0405', DECODE(WORK_DATE,'20200721', QTY,0))) AS DA25
                     , SUM(DECODE(OPER, 'A0406', DECODE(WORK_DATE,'20200719', QTY,0))) AS DA06
                     , SUM(DECODE(OPER, 'A0406', DECODE(WORK_DATE,'20200720', QTY,0))) AS DA16
                     , SUM(DECODE(OPER, 'A0406', DECODE(WORK_DATE,'20200721', QTY,0))) AS DA26
                     , SUM(DECODE(OPER, 'A0407', DECODE(WORK_DATE,'20200719', QTY,0))) AS DA07
                     , SUM(DECODE(OPER, 'A0407', DECODE(WORK_DATE,'20200720', QTY,0))) AS DA17
                     , SUM(DECODE(OPER, 'A0407', DECODE(WORK_DATE,'20200721', QTY,0))) AS DA27
                     , SUM(DECODE(OPER, 'A0408', DECODE(WORK_DATE,'20200719', QTY,0))) AS DA08
                     , SUM(DECODE(OPER, 'A0408', DECODE(WORK_DATE,'20200720', QTY,0))) AS DA18
                     , SUM(DECODE(OPER, 'A0408', DECODE(WORK_DATE,'20200721', QTY,0))) AS DA28
                     , SUM(DECODE(OPER, 'A0409', DECODE(WORK_DATE,'20200719', QTY,0))) AS DA09
                     , SUM(DECODE(OPER, 'A0409', DECODE(WORK_DATE,'20200720', QTY,0))) AS DA19
                     , SUM(DECODE(OPER, 'A0409', DECODE(WORK_DATE,'20200721', QTY,0))) AS DA29
                     , SUM(DECODE(OPER, 'A0602', DECODE(WORK_DATE,'20200719', QTY,0))) AS WB02
                     , SUM(DECODE(OPER, 'A0602', DECODE(WORK_DATE,'20200720', QTY,0))) AS WB12
                     , SUM(DECODE(OPER, 'A0602', DECODE(WORK_DATE,'20200721', QTY,0))) AS WB22
                     , SUM(DECODE(OPER, 'A0603', DECODE(WORK_DATE,'20200719', QTY,0))) AS WB03
                     , SUM(DECODE(OPER, 'A0603', DECODE(WORK_DATE,'20200720', QTY,0))) AS WB13
                     , SUM(DECODE(OPER, 'A0603', DECODE(WORK_DATE,'20200721', QTY,0))) AS WB23
                     , SUM(DECODE(OPER, 'A0604', DECODE(WORK_DATE,'20200719', QTY,0))) AS WB04
                     , SUM(DECODE(OPER, 'A0604', DECODE(WORK_DATE,'20200720', QTY,0))) AS WB14
                     , SUM(DECODE(OPER, 'A0604', DECODE(WORK_DATE,'20200721', QTY,0))) AS WB24
                     , SUM(DECODE(OPER, 'A0605', DECODE(WORK_DATE,'20200719', QTY,0))) AS WB05
                     , SUM(DECODE(OPER, 'A0605', DECODE(WORK_DATE,'20200720', QTY,0))) AS WB15
                     , SUM(DECODE(OPER, 'A0605', DECODE(WORK_DATE,'20200721', QTY,0))) AS WB25 
                     , SUM(DECODE(OPER, 'A0606', DECODE(WORK_DATE,'20200719', QTY,0))) AS WB06
                     , SUM(DECODE(OPER, 'A0606', DECODE(WORK_DATE,'20200720', QTY,0))) AS WB16
                     , SUM(DECODE(OPER, 'A0606', DECODE(WORK_DATE,'20200721', QTY,0))) AS WB26 
                     , SUM(DECODE(OPER, 'A0607', DECODE(WORK_DATE,'20200719', QTY,0))) AS WB07
                     , SUM(DECODE(OPER, 'A0607', DECODE(WORK_DATE,'20200720', QTY,0))) AS WB17
                     , SUM(DECODE(OPER, 'A0607', DECODE(WORK_DATE,'20200721', QTY,0))) AS WB27 
                     , SUM(DECODE(OPER, 'A0608', DECODE(WORK_DATE,'20200719', QTY,0))) AS WB08
                     , SUM(DECODE(OPER, 'A0608', DECODE(WORK_DATE,'20200720', QTY,0))) AS WB18
                     , SUM(DECODE(OPER, 'A0608', DECODE(WORK_DATE,'20200721', QTY,0))) AS WB28 
                     , SUM(DECODE(OPER, 'A0609', DECODE(WORK_DATE,'20200719', QTY,0))) AS WB09
                     , SUM(DECODE(OPER, 'A0609', DECODE(WORK_DATE,'20200720', QTY,0))) AS WB19
                     , SUM(DECODE(OPER, 'A0609', DECODE(WORK_DATE,'20200721', QTY,0))) AS WB29 
                  FROM ( 
                        SELECT A.MAT_ID,A.WORK_DATE,B.OPER,B.OPER_GRP_7 
                             , SUM(A.S1_END_QTY_1 + A.S2_END_QTY_1 + A.S3_END_QTY_1 + A.S1_END_RWK_QTY_1 + A.S2_END_RWK_QTY_1 + A.S3_END_RWK_QTY_1 ) AS QTY 
                          FROM RSUMWIPMOV A 
                             , MWIPOPRDEF B 
                         WHERE 1=1 
                           AND A.FACTORY = B.FACTORY 
                           AND A.OPER = B.OPER 
                           AND A.FACTORY = 'HMVA2' 
                           AND B.OPER_GRP_7 IN ('SAW','D/A','W/B','MOLD','SIG','V/I') 
                           AND A.MAT_VER = 1 
                           AND A.CM_KEY_3 LIKE 'P%'
                           AND A.WORK_DATE BETWEEN '20200719' AND '20200721'
                           AND A.LOT_TYPE = 'W'
                           AND A.OPER <> 'A1760'
                         GROUP BY A.MAT_ID, A.WORK_DATE,B.OPER,B.OPER_GRP_7 
                       ) 
                 GROUP BY MAT_ID 
               ) D  
             , ( 
                SELECT MAT_ID 
                     , ROUND(SUM(DECODE(OPER_GRP_1, 'HMK2A', QTY, 0)), 0) AS V0 
                     , ROUND(SUM(DECODE(OPER_GRP_1, 'B/G', QTY, 0)), 0) AS V1 
                     , ROUND(SUM(DECODE(OPER_GRP_1, 'SAW', QTY, 0)), 0) AS V2 
                     , ROUND(SUM(DECODE(OPER_GRP_1, 'S/P', QTY, 0)), 0) AS V3 
                     , ROUND(SUM(DECODE(OPER_GRP_1, 'D/A', QTY, 0)), 0) AS V4 
                     , ROUND(SUM(DECODE(OPER_GRP_1, 'W/B', QTY, 0)), 0) AS V5 
                     , ROUND(SUM(DECODE(OPER_GRP_1, 'MOLD', QTY, 0)), 0) AS V6 
                     , ROUND(SUM(DECODE(OPER_GRP_1, 'CURE', QTY, 0)), 0) AS V7 
                     , ROUND(SUM(DECODE(OPER_GRP_1, 'M/K', QTY, 0)), 0) AS V8 
                     , ROUND(SUM(DECODE(OPER_GRP_1, 'TRIM', QTY, 0)), 0) AS V9 
                     , ROUND(SUM(DECODE(OPER_GRP_1, 'TIN', QTY, 0)), 0) AS V10 
                     , ROUND(SUM(DECODE(OPER_GRP_1, 'S/B/A', QTY, 0)), 0) AS V11 
                     , ROUND(SUM(DECODE(OPER_GRP_1, 'SIG', QTY, 0)), 0) AS V12 
                     , ROUND(SUM(DECODE(OPER_GRP_1, 'AVI', QTY, 0)), 0) AS V13 
                     , ROUND(SUM(DECODE(OPER_GRP_1, 'V/I', QTY, 0)), 0) AS V14 
                     , ROUND(SUM(DECODE(OPER_GRP_1, 'HMK3A', QTY, 0)), 0) AS V15 
                     , ROUND(SUM(DECODE(OPER_GRP_1, 'GATE', QTY, 0)), 0) AS V16 
                     , ROUND(SUM(DECODE(OPER_GRP_1, 'SMT', QTY, 0)), 0) AS V17 
                  FROM (  
                        SELECT MAT_ID, OPER, OPER_GRP_1 
                             , CASE WHEN MAT_GRP_1 = 'HX' AND HX_COMP_MIN IS NOT NULL
                                         THEN (CASE WHEN HX_COMP_MIN <> HX_COMP_MAX AND OPER > HX_COMP_MIN AND OPER <= HX_COMP_MAX THEN QTY_1 / NVL(COMP_CNT / 2,1)
                                                    WHEN OPER <= HX_COMP_MAX THEN QTY_1 / NVL(COMP_CNT,1)
                                                    ELSE QTY_1 END)
                                    WHEN OPER <= 'A0395' THEN QTY_1 / NVL(COMP_CNT,1) 
                                    ELSE QTY_1 
                               END QTY 
                          FROM ( 
                                SELECT A.MAT_ID, B.OPER, C.MAT_GRP_1  
                                     , CASE WHEN C.MAT_GRP_3 IN ('FCBGA', 'FCFBGA') AND B.OPER = 'A0800' THEN 'D/A' ELSE B.OPER_GRP_1 END OPER_GRP_1  
                                     , CASE WHEN MAT_GRP_3 IN ('COB', 'BGN') THEN QTY_1/NET_DIE ELSE QTY_1 END AS QTY_1
                                     , COMP_CNT  
                                     , HX_COMP_MIN, HX_COMP_MAX 
                                  FROM RWIPLOTSTS A  
                                     , MWIPOPRDEF B  
                                     , VWIPMATDEF C 
                                 WHERE 1 = 1 
                                   AND A.FACTORY = B.FACTORY 
                                   AND A.FACTORY = C.FACTORY 
                                   AND A.OPER = B.OPER 
                                   AND A.MAT_ID = C.MAT_ID 
                                   AND A.FACTORY = 'HMVA2'  
                                   AND A.LOT_TYPE = 'W' 
                                   AND A.LOT_DEL_FLAG = ' ' 
                                   AND C.DELETE_FLAG = ' ' 
                                   AND C.MAT_GRP_2 <> '-' 
                                   AND A.HOLD_CODE NOT IN ('H71','H54') 
                                   AND REGEXP_LIKE(C.MAT_GRP_5, 'Middle*|Merge|1st|-') 
                                   AND A.LOT_CMF_5 LIKE 'P%'
                               ) 
                       )  
                 GROUP BY MAT_ID 
               ) F 
         WHERE 1 = 1 
           AND A.MAT_ID = D.MAT_ID(+)
           AND A.MAT_ID = F.MAT_ID(+)
           AND A.MAT_ID LIKE '%' 
         GROUP BY A.MAT_GRP_1, A.MAT_GRP_9, A.MAT_GRP_10,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' '
        HAVING (
                NVL(SUM(A.MON_PLAN), 0)+ 
                NVL(SUM(A.ORI_PLAN), 0)+ 
                NVL(SUM(A.ASSY_MON), 0)+ 
                NVL(SUM(A.WEEK_PLAN), 0)+ 
                NVL(SUM(A.AO0), 0)+ NVL(SUM(A.AO1), 0)+ NVL(SUM(A.AO2), 0)+ 
                NVL(SUM(A.RCV0), 0)+ NVL(SUM(A.RCV1), 0)+ NVL(SUM(A.RCV2), 0)+ 
                NVL(SUM(D.SW0), 0)+ NVL(SUM(D.SW1), 0)+ NVL(SUM(D.SW2), 0)+ 
                NVL(SUM(D.DA0), 0)+ NVL(SUM(D.DA1), 0)+ NVL(SUM(D.DA2), 0)+ 
                NVL(SUM(D.WB0), 0)+ NVL(SUM(D.WB1), 0)+ NVL(SUM(D.WB2), 0)+ 
                NVL(SUM(D.MD0), 0)+ NVL(SUM(D.MD1), 0)+ NVL(SUM(D.MD2), 0)+  
                NVL(SUM(D.TF0), 0)+ NVL(SUM(D.TF0), 0)+ NVL(SUM(D.TF0), 0)+ 
                NVL(SUM(F.V0+F.V1+F.V2+F.V3+F.V4+F.V5+F.V6+F.V7+F.V8+F.V9+F.V10+F.V11+F.V12+F.V13+F.V14+F.V15+F.V16+F.V17), 0)  
               ) <> 0
       ) A 
     , ( 
        SELECT MAT_GRP_1 AS CUSTOMER
             , MAT_GRP_10 AS PKG 
             , SUM(DECODE(SHIP_DATE,'20200719', TAT, 0)) AS TAT0 
             , SUM(DECODE(SHIP_DATE,'20200720', TAT, 0)) AS TAT1 
             , SUM(DECODE(SHIP_DATE,'20200721', TAT, 0)) AS TAT2 
          FROM ( 
                SELECT MAT.MAT_GRP_1,MAT.MAT_GRP_10,TAT.SHIP_DATE,SUM(TAT.TOTAL_TAT_QTY),SUM(SHIP.SHIP_QTY),ROUND(DECODE(SUM(SHIP.SHIP_QTY),0,0,(SUM(TAT.TOTAL_TAT_QTY)/SUM(SHIP.SHIP_QTY))),4) AS TAT 
                  FROM ( 
                        SELECT FACTORY,MAT_ID,SHIP_DATE 
                             , ROUND(SUM(TOTAL_TAT_QTY),4) AS TOTAL_TAT_QTY 
                          FROM CSUMTATMAT@RPTTOMES 
                         WHERE 1=1 
                           AND FACTORY = 'HMVA2' 
                           AND OPER <> 'A0000' 
                           AND SHIP_DATE BETWEEN '20200719' AND '20200721'
                         GROUP BY FACTORY,MAT_ID,SHIP_DATE 
                       ) TAT 
                     , ( 
                        SELECT FACTORY,MAT_ID,SHIP_DATE,SHIP_QTY 
                          FROM CSUMTATMAT@RPTTOMES 
                         WHERE 1=1 
                           AND FACTORY = 'HMVA2' 
                           AND OPER = 'AZ010' 
                           AND SHIP_DATE BETWEEN '20200719' AND '20200721'
                       ) SHIP 
                     , MWIPMATDEF MAT 
                 WHERE 1=1 
                   AND TAT.FACTORY = SHIP.FACTORY 
                   AND TAT.MAT_ID = SHIP.MAT_ID 
                   AND TAT.SHIP_DATE = SHIP.SHIP_DATE 
                   AND TAT.MAT_ID = MAT.MAT_ID 
                   AND MAT.MAT_TYPE = 'FG' 
                   AND MAT.DELETE_FLAG <> 'Y' 
                   AND MAT.FACTORY = 'HMVA2' 
                 GROUP BY MAT_GRP_1,MAT_GRP_10,TAT.SHIP_DATE
               ) 
         GROUP BY MAT_GRP_1, MAT_GRP_10 
       ) B  
 WHERE 1=1 
   AND A.CUSTOMER = B.CUSTOMER(+) 
   AND A.PKG = B.PKG(+) 
   AND A.PKG <> '-' 
   AND NVL(ORI_PLAN,0) + NVL(MON_PLAN,0) + NVL(TARGET_MON,0) + NVL(ASSY_MON,0) + NVL(WEEK_PLAN,0) + NVL(DEF,0) + NVL(AO0,0) + NVL(AO1,0) + NVL(AO2,0) + NVL(A.RCV0,0) + NVL(A.RCV1,0) + NVL(A.RCV2,0) + NVL(A.SW0,0) 
     + NVL(A.SW1,0) + NVL(A.SW2,0) + NVL(A.DA0,0) + NVL(A.DA1,0) + NVL(A.DA2,0) + NVL(A.WB0,0) + NVL(A.WB1,0) + NVL(A.WB2,0) + NVL(A.MD0,0) + NVL(A.MD1,0) + NVL(A.MD2,0) + NVL(A.TF0,0) 
     + NVL(A.TF1,0) + NVL(A.TF2,0) + NVL(TTL,0) <> 0 
 ORDER BY DECODE(A.CUSTOMER, 'SE', 1, 'HX', 2, 'IM', 3, 'FC', 4, 'IG', 5, 6),CUSTOMER, A.MAJOR, A.PKG,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' '

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
SELECT FACTORY Code, FAC_DESC Data
  FROM MWIPFACDEF
 WHERE FAC_GRP_5 = 'Y' 
 ORDER BY FAC_GRP_4 ASC
-------------------------------------------------------------
SELECT OPER, OPER_DESC  FROM MWIPOPRDEF
  WHERE FACTORY = 'HMVA2'  AND OPER NOT IN ('00001', '00002') AND OPER NOT LIKE 'V%' ORDER BY DECODE(OPER_CMF_2, ' ', 99999, TO_NUMBER(OPER_CMF_2)), OPER
-------------------------------------------------------------
SELECT OPER, OPER_DESC  FROM MWIPOPRDEF
  WHERE FACTORY = 'HMVA2'  AND OPER NOT IN ('00001', '00002') AND OPER NOT LIKE 'V%' ORDER BY DECODE(OPER_CMF_2, ' ', 99999, TO_NUMBER(OPER_CMF_2)), OPER
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT A.KEY_1 AS CODE, A.DATA_1 AS DATA
  FROM MGCMTBLDAT A
 WHERE A.TABLE_NAME = 'H_HANA_LOT_TYPE'
   AND A.FACTORY  = 'HMVA2'  
 ORDER BY A.KEY_1 ASC
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE) AS This_Week_First_Day 
     , MAX(SYS_DATE) AS This_Week_Last_Day
  FROM MWIPCALDEF
 WHERE 1=1 
   AND CALENDAR_ID = 'SE'
   AND (PLAN_YEAR,PLAN_WEEK) IN (
                                 SELECT PLAN_YEAR,PLAN_WEEK 
                                   FROM MWIPCALDEF 
                                  WHERE 1=1
                                    AND CALENDAR_ID = 'SE'
                                    AND SYS_DATE = '20200721')

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT NVL((SELECT DATA_1 FROM MGCMTBLDAT WHERE TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = MAT.MAT_GRP_1 AND ROWNUM=1), '-') AS CUSTOMER,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT.MAT_CMF_10 AS PIN_TYPE,  ' ', MAT.MAT_ID AS PRODUCT,  ' ',  ' ' 
     , ROUND(SUM(TOTAL)/1,0) AS TOTAL 
     , ROUND(SUM(V0)/1,0) AS  Val0
     , ROUND(SUM(V1)/1,0) AS  Val1
     , ROUND(SUM(V2)/1,0) AS  Val2
     , ROUND(SUM(V3)/1,0) AS  Val3
     , ROUND(SUM(V4)/1,0) AS  Val4
     , ROUND(SUM(V5)/1,0) AS  Val5
     , ROUND(SUM(V6)/1,0) AS  Val6
     , ROUND(SUM(V7)/1,0) AS  Val7
     , ROUND(SUM(V8)/1,0) AS  Val8
     , ROUND(SUM(V9)/1,0) AS  Val9
     , ROUND(SUM(V10)/1,0) AS  Val10
     , ROUND(SUM(V11)/1,0) AS  Val11
     , ROUND(SUM(V12)/1,0) AS  Val12
     , ROUND(SUM(V13)/1,0) AS  Val13
     , ROUND(SUM(V14)/1,0) AS  Val14
     , ROUND(SUM(V15)/1,0) AS  Val15
     , ROUND(SUM(V16)/1,0) AS  Val16
     , ROUND(SUM(V17)/1,0) AS  Val17
     , ROUND(SUM(V18)/1,0) AS  Val18
     , ROUND(SUM(V19)/1,0) AS  Val19
     , ROUND(SUM(V20)/1,0) AS  Val20
     , ROUND(SUM(V21)/1,0) AS  Val21
     , ROUND(SUM(V22)/1,0) AS  Val22
     , ROUND(SUM(V23)/1,0) AS  Val23
     , ROUND(SUM(V24)/1,0) AS  Val24
     , ROUND(SUM(V25)/1,0) AS  Val25
     , ROUND(SUM(V26)/1,0) AS  Val26
     , ROUND(SUM(V27)/1,0) AS  Val27
     , ROUND(SUM(V28)/1,0) AS  Val28
     , ROUND(SUM(V29)/1,0) AS  Val29
     , ROUND(SUM(V30)/1,0) AS  Val30
     , ROUND(SUM(V31)/1,0) AS  Val31
     , ROUND(SUM(V32)/1,0) AS  Val32
     , ROUND(SUM(V33)/1,0) AS  Val33
     , ROUND(SUM(V34)/1,0) AS  Val34
     , ROUND(SUM(V35)/1,0) AS  Val35
     , ROUND(SUM(V36)/1,0) AS  Val36
     , ROUND(SUM(V37)/1,0) AS  Val37
     , ROUND(SUM(V38)/1,0) AS  Val38
     , ROUND(SUM(V39)/1,0) AS  Val39
     , ROUND(SUM(V40)/1,0) AS  Val40
     , ROUND(SUM(V41)/1,0) AS  Val41
     , ROUND(SUM(V42)/1,0) AS  Val42
     , ROUND(SUM(V43)/1,0) AS  Val43
     , ROUND(SUM(V44)/1,0) AS  Val44
     , ROUND(SUM(V45)/1,0) AS  Val45
     , ROUND(SUM(V46)/1,0) AS  Val46
     , ROUND(SUM(V47)/1,0) AS  Val47
     , ROUND(SUM(V48)/1,0) AS  Val48
     , ROUND(SUM(V49)/1,0) AS  Val49
     , ROUND(SUM(V50)/1,0) AS  Val50
     , ROUND(SUM(V51)/1,0) AS  Val51
     , ROUND(SUM(V52)/1,0) AS  Val52
     , ROUND(SUM(V53)/1,0) AS  Val53
     , ROUND(SUM(V54)/1,0) AS  Val54
     , ROUND(SUM(V55)/1,0) AS  Val55
     , ROUND(SUM(V56)/1,0) AS  Val56
     , ROUND(SUM(V57)/1,0) AS  Val57
     , ROUND(SUM(V58)/1,0) AS  Val58
     , ROUND(SUM(V59)/1,0) AS  Val59
     , ROUND(SUM(V60)/1,0) AS  Val60
     , ROUND(SUM(V61)/1,0) AS  Val61
     , ROUND(SUM(V62)/1,0) AS  Val62
     , ROUND(SUM(V63)/1,0) AS  Val63
     , ROUND(SUM(V64)/1,0) AS  Val64
     , ROUND(SUM(V65)/1,0) AS  Val65
     , ROUND(SUM(V66)/1,0) AS  Val66
     , ROUND(SUM(V67)/1,0) AS  Val67
     , ROUND(SUM(V68)/1,0) AS  Val68
     , ROUND(SUM(V69)/1,0) AS  Val69
     , ROUND(SUM(V70)/1,0) AS  Val70
     , ROUND(SUM(V71)/1,0) AS  Val71
     , ROUND(SUM(V72)/1,0) AS  Val72
     , ROUND(SUM(V73)/1,0) AS  Val73
     , ROUND(SUM(V74)/1,0) AS  Val74
     , ROUND(SUM(V75)/1,0) AS  Val75
     , ROUND(SUM(V76)/1,0) AS  Val76
     , ROUND(SUM(V77)/1,0) AS  Val77
     , ROUND(SUM(V78)/1,0) AS  Val78
     , ROUND(SUM(V79)/1,0) AS  Val79
     , ROUND(SUM(V80)/1,0) AS  Val80
     , ROUND(SUM(V81)/1,0) AS  Val81
     , ROUND(SUM(V82)/1,0) AS  Val82
     , ROUND(SUM(V83)/1,0) AS  Val83
     , ROUND(SUM(V84)/1,0) AS  Val84
     , ROUND(SUM(V85)/1,0) AS  Val85
     , ROUND(SUM(V86)/1,0) AS  Val86
     , ROUND(SUM(V87)/1,0) AS  Val87
     , ROUND(SUM(V88)/1,0) AS  Val88
     , ROUND(SUM(V89)/1,0) AS  Val89
     , ROUND(SUM(V90)/1,0) AS  Val90
     , ROUND(SUM(V91)/1,0) AS  Val91
     , ROUND(SUM(V92)/1,0) AS  Val92
     , ROUND(SUM(V93)/1,0) AS  Val93
     , ROUND(SUM(V94)/1,0) AS  Val94
     , ROUND(SUM(V95)/1,0) AS  Val95
     , ROUND(SUM(V96)/1,0) AS  Val96
     , ROUND(SUM(V97)/1,0) AS  Val97
     , ROUND(SUM(V98)/1,0) AS  Val98
     , ROUND(SUM(V99)/1,0) AS  Val99
     , ROUND(SUM(V100)/1,0) AS  Val100
     , ROUND(SUM(V101)/1,0) AS  Val101
     , ROUND(SUM(V102)/1,0) AS  Val102
     , ROUND(SUM(V103)/1,0) AS  Val103
     , ROUND(SUM(V104)/1,0) AS  Val104
     , ROUND(SUM(V105)/1,0) AS  Val105
     , ROUND(SUM(V106)/1,0) AS  Val106
     , ROUND(SUM(V107)/1,0) AS  Val107
     , ROUND(SUM(V108)/1,0) AS  Val108
     , ROUND(SUM(V109)/1,0) AS  Val109
     , ROUND(SUM(V110)/1,0) AS  Val110
     , ROUND(SUM(V111)/1,0) AS  Val111
     , ROUND(SUM(V112)/1,0) AS  Val112
     , ROUND(SUM(V113)/1,0) AS  Val113
     , ROUND(SUM(V114)/1,0) AS  Val114
     , ROUND(SUM(V115)/1,0) AS  Val115
     , ROUND(SUM(V116)/1,0) AS  Val116
     , ROUND(SUM(V117)/1,0) AS  Val117
     , ROUND(SUM(V118)/1,0) AS  Val118
     , ROUND(SUM(V119)/1,0) AS  Val119
     , ROUND(SUM(V120)/1,0) AS  Val120
     , ROUND(SUM(V121)/1,0) AS  Val121
     , ROUND(SUM(V122)/1,0) AS  Val122
     , ROUND(SUM(V123)/1,0) AS  Val123
     , ROUND(SUM(V124)/1,0) AS  Val124
     , ROUND(SUM(V125)/1,0) AS  Val125
     , ROUND(SUM(V126)/1,0) AS  Val126
     , ROUND(SUM(V127)/1,0) AS  Val127
     , ROUND(SUM(V128)/1,0) AS  Val128
     , ROUND(SUM(V129)/1,0) AS  Val129
     , ROUND(SUM(V130)/1,0) AS  Val130
     , ROUND(SUM(V131)/1,0) AS  Val131
     , ROUND(SUM(V132)/1,0) AS  Val132
     , ROUND(SUM(V133)/1,0) AS  Val133
     , ROUND(SUM(V134)/1,0) AS  Val134
     , ROUND(SUM(V135)/1,0) AS  Val135
     , ROUND(SUM(V136)/1,0) AS  Val136
     , ROUND(SUM(V137)/1,0) AS  Val137
     , ROUND(SUM(V138)/1,0) AS  Val138
     , ROUND(SUM(V139)/1,0) AS  Val139
     , ROUND(SUM(V140)/1,0) AS  Val140
     , ROUND(SUM(V141)/1,0) AS  Val141
     , ROUND(SUM(V142)/1,0) AS  Val142
     , ROUND(SUM(V143)/1,0) AS  Val143
     , ROUND(SUM(V144)/1,0) AS  Val144
     , ROUND(SUM(V145)/1,0) AS  Val145
     , ROUND(SUM(V146)/1,0) AS  Val146
     , ROUND(SUM(V147)/1,0) AS  Val147
     , ROUND(SUM(V148)/1,0) AS  Val148
     , ROUND(SUM(V149)/1,0) AS  Val149
     , ROUND(SUM(V150)/1,0) AS  Val150
     , ROUND(SUM(V151)/1,0) AS  Val151
     , ROUND(SUM(V152)/1,0) AS  Val152
     , ROUND(SUM(V153)/1,0) AS  Val153
     , ROUND(SUM(V154)/1,0) AS  Val154
     , ROUND(SUM(V155)/1,0) AS  Val155
     , ROUND(SUM(V156)/1,0) AS  Val156
     , ROUND(SUM(V157)/1,0) AS  Val157
     , ROUND(SUM(V158)/1,0) AS  Val158
     , ROUND(SUM(V159)/1,0) AS  Val159
     , ROUND(SUM(V160)/1,0) AS  Val160
     , ROUND(SUM(V161)/1,0) AS  Val161
     , ROUND(SUM(V162)/1,0) AS  Val162
     , ROUND(SUM(V163)/1,0) AS  Val163
     , ROUND(SUM(V164)/1,0) AS  Val164
     , ROUND(SUM(V165)/1,0) AS  Val165
     , ROUND(SUM(V166)/1,0) AS  Val166
     , ROUND(SUM(V167)/1,0) AS  Val167
     , ROUND(SUM(V168)/1,0) AS  Val168
     , ROUND(SUM(V169)/1,0) AS  Val169
     , ROUND(SUM(V170)/1,0) AS  Val170
     , ROUND(SUM(V171)/1,0) AS  Val171
     , ROUND(SUM(V172)/1,0) AS  Val172
     , ROUND(SUM(V173)/1,0) AS  Val173
     , ROUND(SUM(V174)/1,0) AS  Val174
     , ROUND(SUM(V175)/1,0) AS  Val175
     , ROUND(SUM(V176)/1,0) AS  Val176
     , ROUND(SUM(V177)/1,0) AS  Val177
     , ROUND(SUM(V178)/1,0) AS  Val178
     , ROUND(SUM(V179)/1,0) AS  Val179
     , ROUND(SUM(V180)/1,0) AS  Val180
     , ROUND(SUM(V181)/1,0) AS  Val181
     , ROUND(SUM(V182)/1,0) AS  Val182
     , ROUND(SUM(V183)/1,0) AS  Val183
     , ROUND(SUM(V184)/1,0) AS  Val184
     , ROUND(SUM(V185)/1,0) AS  Val185
     , ROUND(SUM(V186)/1,0) AS  Val186
     , ROUND(SUM(V187)/1,0) AS  Val187
     , ROUND(SUM(V188)/1,0) AS  Val188
     , ROUND(SUM(V189)/1,0) AS  Val189
     , ROUND(SUM(V190)/1,0) AS  Val190
     , ROUND(SUM(V191)/1,0) AS  Val191
     , ROUND(SUM(V192)/1,0) AS  Val192
     , ROUND(SUM(V193)/1,0) AS  Val193
     , ROUND(SUM(V194)/1,0) AS  Val194
     , ROUND(SUM(V195)/1,0) AS  Val195
     , ROUND(SUM(V196)/1,0) AS  Val196
     , ROUND(SUM(V197)/1,0) AS  Val197
     , ROUND(SUM(V198)/1,0) AS  Val198
     , ROUND(SUM(V199)/1,0) AS  Val199
     , ROUND(SUM(V200)/1,0) AS  Val200
     , ROUND(SUM(V201)/1,0) AS  Val201
     , ROUND(SUM(V202)/1,0) AS  Val202
     , ROUND(SUM(V203)/1,0) AS  Val203
     , ROUND(SUM(V204)/1,0) AS  Val204
     , ROUND(SUM(V205)/1,0) AS  Val205
     , ROUND(SUM(V206)/1,0) AS  Val206
     , ROUND(SUM(V207)/1,0) AS  Val207
     , ROUND(SUM(V208)/1,0) AS  Val208
     , ROUND(SUM(V209)/1,0) AS  Val209
     , ROUND(SUM(V210)/1,0) AS  Val210
     , ROUND(SUM(V211)/1,0) AS  Val211
     , ROUND(SUM(V212)/1,0) AS  Val212
     , ROUND(SUM(V213)/1,0) AS  Val213
     , ROUND(SUM(V214)/1,0) AS  Val214
     , ROUND(SUM(V215)/1,0) AS  Val215
     , ROUND(SUM(V216)/1,0) AS  Val216
     , ROUND(SUM(V217)/1,0) AS  Val217
     , ROUND(SUM(V218)/1,0) AS  Val218
     , ROUND(SUM(V219)/1,0) AS  Val219
     , ROUND(SUM(V220)/1,0) AS  Val220
     , ROUND(SUM(V221)/1,0) AS  Val221
     , ROUND(SUM(V222)/1,0) AS  Val222
     , ROUND(SUM(V223)/1,0) AS  Val223
     , ROUND(SUM(V224)/1,0) AS  Val224
     , ROUND(SUM(V225)/1,0) AS  Val225
     , ROUND(SUM(V226)/1,0) AS  Val226
     , ROUND(SUM(V227)/1,0) AS  Val227
     , ROUND(SUM(V228)/1,0) AS  Val228
     , ROUND(SUM(V229)/1,0) AS  Val229
     , ROUND(SUM(V230)/1,0) AS  Val230
     , ROUND(SUM(V231)/1,0) AS  Val231
     , ROUND(SUM(V232)/1,0) AS  Val232
     , ROUND(SUM(V233)/1,0) AS  Val233
     , ROUND(SUM(V234)/1,0) AS  Val234
     , ROUND(SUM(V235)/1,0) AS  Val235
     , ROUND(SUM(V236)/1,0) AS  Val236
     , ROUND(SUM(V237)/1,0) AS  Val237
     , ROUND(SUM(V238)/1,0) AS  Val238
     , ROUND(SUM(V239)/1,0) AS  Val239
     , ROUND(SUM(V240)/1,0) AS  Val240
     , ROUND(SUM(V241)/1,0) AS  Val241
     , ROUND(SUM(V242)/1,0) AS  Val242
     , ROUND(SUM(V243)/1,0) AS  Val243
     , ROUND(SUM(V244)/1,0) AS  Val244
     , ROUND(SUM(V245)/1,0) AS  Val245
     , ROUND(SUM(V246)/1,0) AS  Val246
     , ROUND(SUM(V247)/1,0) AS  Val247
     , ROUND(SUM(V248)/1,0) AS  Val248
     , ROUND(SUM(V249)/1,0) AS  Val249
     , ROUND(SUM(V250)/1,0) AS  Val250
     , ROUND(SUM(V251)/1,0) AS  Val251
     , ROUND(SUM(V252)/1,0) AS  Val252
     , ROUND(SUM(V253)/1,0) AS  Val253
     , ROUND(SUM(V254)/1,0) AS  Val254
     , ROUND(SUM(V255)/1,0) AS  Val255
     , ROUND(SUM(V256)/1,0) AS  Val256
     , ROUND(SUM(V257)/1,0) AS  Val257
     , ROUND(SUM(V258)/1,0) AS  Val258
     , ROUND(SUM(V259)/1,0) AS  Val259
     , ROUND(SUM(V260)/1,0) AS  Val260
     , ROUND(SUM(V261)/1,0) AS  Val261
     , ROUND(SUM(V262)/1,0) AS  Val262
     , ROUND(SUM(V263)/1,0) AS  Val263
     , ROUND(SUM(V264)/1,0) AS  Val264
     , ROUND(SUM(V265)/1,0) AS  Val265
     , ROUND(SUM(V266)/1,0) AS  Val266
     , ROUND(SUM(V267)/1,0) AS  Val267
     , ROUND(SUM(V268)/1,0) AS  Val268
     , ROUND(SUM(V269)/1,0) AS  Val269
     , ROUND(SUM(V270)/1,0) AS  Val270
     , ROUND(SUM(V271)/1,0) AS  Val271
     , ROUND(SUM(V272)/1,0) AS  Val272
     , ROUND(SUM(V273)/1,0) AS  Val273
     , ROUND(SUM(V274)/1,0) AS  Val274
     , ROUND(SUM(V275)/1,0) AS  Val275
     , TRUNC(SUM(SHP_QTY)/1,0) AS SHP_QTY 
     , ROUND(DECODE(TO_CHAR(TO_DATE('20200721','YYYYMMDD'),'D'), 2, SUM(NVL(PLN.PLAN_W1,0)), 3, SUM(NVL(PLN.PLAN_W1,0)), SUM(NVL(PLN.PLAN_W2,0)) + SUM(NVL(SHP1.ASSY_MONDAY,0)))/1,0) AS PLAN_W1
     , ROUND(SUM(NVL(SHP1.ASSY_WEEK,0))/1,0)
     , ROUND((DECODE(TO_CHAR(TO_DATE('20200721','YYYYMMDD'),'D'), 2, SUM(NVL(PLN.PLAN_W1,0)), 3, SUM(NVL(PLN.PLAN_W1,0)), SUM(NVL(PLN.PLAN_W2,0)) + SUM(NVL(SHP1.ASSY_MONDAY,0)))) - SUM(NVL(SHP1.ASSY_WEEK,0))/1,0) AS LACK_WEEK
  FROM MWIPMATDEF MAT 
     , ( 
        SELECT A.MAT_ID, MAX(B.EMC_1) AS EMC_1 
             , SUM(QTY_1) AS TOTAL 
             , MAX((SELECT ATTR_VALUE FROM MATRNAMSTS WHERE FACTORY = 'HMVA2' AND ATTR_TYPE = 'MAT_ETC' AND ATTR_NAME = DECODE(LOT_CMF_2, 'SE', 'SEC_VERSION', 'HX', 'HX_VERSION') AND ATTR_KEY = A.MAT_ID)) AS VERSION 
             , SUM(DECODE(A.OPER, 'A0000', QTY_1,0)) V0
             , SUM(DECODE(A.OPER, 'A0005', QTY_1,0)) V1
             , SUM(DECODE(A.OPER, 'A000N', QTY_1,0)) V2
             , SUM(DECODE(A.OPER, 'A0010', QTY_1,0)) V3
             , SUM(DECODE(A.OPER, 'A0012', QTY_1,0)) V4
             , SUM(DECODE(A.OPER, 'A0013', QTY_1,0)) V5
             , SUM(DECODE(A.OPER, 'A0015', QTY_1,0)) V6
             , SUM(DECODE(A.OPER, 'A0020', QTY_1,0)) V7
             , SUM(DECODE(A.OPER, 'A0055', QTY_1,0)) V8
             , SUM(DECODE(A.OPER, 'A0023', QTY_1,0)) V9
             , SUM(DECODE(A.OPER, 'A0025', QTY_1,0)) V10
             , SUM(DECODE(A.OPER, 'A0030', QTY_1,0)) V11
             , SUM(DECODE(A.OPER, 'A0190', QTY_1,0)) V12
             , SUM(DECODE(A.OPER, 'A0033', QTY_1,0)) V13
             , SUM(DECODE(A.OPER, 'A0040', QTY_1,0)) V14
             , SUM(DECODE(A.OPER, 'A0041', QTY_1,0)) V15
             , SUM(DECODE(A.OPER, 'A0042', QTY_1,0)) V16
             , SUM(DECODE(A.OPER, 'A0045', QTY_1,0)) V17
             , SUM(DECODE(A.OPER, 'A0050', QTY_1,0)) V18
             , SUM(DECODE(A.OPER, 'A0060', QTY_1,0)) V19
             , SUM(DECODE(A.OPER, 'A0070', QTY_1,0)) V20
             , SUM(DECODE(A.OPER, 'A0080', QTY_1,0)) V21
             , SUM(DECODE(A.OPER, 'A0090', QTY_1,0)) V22
             , SUM(DECODE(A.OPER, 'A0095', QTY_1,0)) V23
             , SUM(DECODE(A.OPER, 'A0110', QTY_1,0)) V24
             , SUM(DECODE(A.OPER, 'A0120', QTY_1,0)) V25
             , SUM(DECODE(A.OPER, 'A0130', QTY_1,0)) V26
             , SUM(DECODE(A.OPER, 'A0140', QTY_1,0)) V27
             , SUM(DECODE(A.OPER, 'A0160', QTY_1,0)) V28
             , SUM(DECODE(A.OPER, 'A0161', QTY_1,0)) V29
             , SUM(DECODE(A.OPER, 'A0165', QTY_1,0)) V30
             , SUM(DECODE(A.OPER, 'A0065', QTY_1,0)) V31
             , SUM(DECODE(A.OPER, 'A0100', QTY_1,0)) V32
             , SUM(DECODE(A.OPER, 'A0150', QTY_1,0)) V33
             , SUM(DECODE(A.OPER, 'A0175', QTY_1,0)) V34
             , SUM(DECODE(A.OPER, 'A0176', QTY_1,0)) V35
             , SUM(DECODE(A.OPER, 'A0170', QTY_1,0)) V36
             , SUM(DECODE(A.OPER, 'A0180', QTY_1,0)) V37
             , SUM(DECODE(A.OPER, 'A0200', QTY_1,0)) V38
             , SUM(DECODE(A.OPER, 'A0201', QTY_1,0)) V39
             , SUM(DECODE(A.OPER, 'A0202', QTY_1,0)) V40
             , SUM(DECODE(A.OPER, 'A0210', QTY_1,0)) V41
             , SUM(DECODE(A.OPER, 'A0215', QTY_1,0)) V42
             , SUM(DECODE(A.OPER, 'A0220', QTY_1,0)) V43
             , SUM(DECODE(A.OPER, 'A0230', QTY_1,0)) V44
             , SUM(DECODE(A.OPER, 'A0300', QTY_1,0)) V45
             , SUM(DECODE(A.OPER, 'A0250', QTY_1,0)) V46
             , SUM(DECODE(A.OPER, 'A0305', QTY_1,0)) V47
             , SUM(DECODE(A.OPER, 'A0240', QTY_1,0)) V48
             , SUM(DECODE(A.OPER, 'A0260', QTY_1,0)) V49
             , SUM(DECODE(A.OPER, 'A0270', QTY_1,0)) V50
             , SUM(DECODE(A.OPER, 'A0290', QTY_1,0)) V51
             , SUM(DECODE(A.OPER, 'A0295', QTY_1,0)) V52
             , SUM(DECODE(A.OPER, 'A0280', QTY_1,0)) V53
             , SUM(DECODE(A.OPER, 'A0306', QTY_1,0)) V54
             , SUM(DECODE(A.OPER, 'A0307', QTY_1,0)) V55
             , SUM(DECODE(A.OPER, 'A0308', QTY_1,0)) V56
             , SUM(DECODE(A.OPER, 'A0310', QTY_1,0)) V57
             , SUM(DECODE(A.OPER, 'A0320', QTY_1,0)) V58
             , SUM(DECODE(A.OPER, 'A0330', QTY_1,0)) V59
             , SUM(DECODE(A.OPER, 'A1280', QTY_1,0)) V60
             , SUM(DECODE(A.OPER, 'A0333', QTY_1,0)) V61
             , SUM(DECODE(A.OPER, 'A0335', QTY_1,0)) V62
             , SUM(DECODE(A.OPER, 'A0337', QTY_1,0)) V63
             , SUM(DECODE(A.OPER, 'A0372', QTY_1,0)) V64
             , SUM(DECODE(A.OPER, 'A0395', QTY_1,0)) V65
             , SUM(DECODE(A.OPER, 'A0397', QTY_1,0)) V66
             , SUM(DECODE(A.OPER, 'A0340', QTY_1,0)) V67
             , SUM(DECODE(A.OPER, 'A0345', QTY_1,0)) V68
             , SUM(DECODE(A.OPER, 'A0350', QTY_1,0)) V69
             , SUM(DECODE(A.OPER, 'A0360', QTY_1,0)) V70
             , SUM(DECODE(A.OPER, 'A0370', QTY_1,0)) V71
             , SUM(DECODE(A.OPER, 'A0375', QTY_1,0)) V72
             , SUM(DECODE(A.OPER, 'A0380', QTY_1,0)) V73
             , SUM(DECODE(A.OPER, 'A0381', QTY_1,0)) V74
             , SUM(DECODE(A.OPER, 'A0382', QTY_1,0)) V75
             , SUM(DECODE(A.OPER, 'A0383', QTY_1,0)) V76
             , SUM(DECODE(A.OPER, 'A0385', QTY_1,0)) V77
             , SUM(DECODE(A.OPER, 'A0391', QTY_1,0)) V78
             , SUM(DECODE(A.OPER, 'A0399', QTY_1,0)) V79
             , SUM(DECODE(A.OPER, 'A0390', QTY_1,0)) V80
             , SUM(DECODE(A.OPER, 'A0400', QTY_1,0)) V81
             , SUM(DECODE(A.OPER, 'A0401', QTY_1,0)) V82
             , SUM(DECODE(A.OPER, 'A0500', QTY_1,0)) V83
             , SUM(DECODE(A.OPER, 'A0530', QTY_1,0)) V84
             , SUM(DECODE(A.OPER, 'A0531', QTY_1,0)) V85
             , SUM(DECODE(A.OPER, 'A0501', QTY_1,0)) V86
             , SUM(DECODE(A.OPER, 'A0540', QTY_1,0)) V87
             , SUM(DECODE(A.OPER, 'A0550', QTY_1,0)) V88
             , SUM(DECODE(A.OPER, 'A0600', QTY_1,0)) V89
             , SUM(DECODE(A.OPER, 'A0620', QTY_1,0)) V90
             , SUM(DECODE(A.OPER, 'A0660', QTY_1,0)) V91
             , SUM(DECODE(A.OPER, 'A0630', QTY_1,0)) V92
             , SUM(DECODE(A.OPER, 'A0650', QTY_1,0)) V93
             , SUM(DECODE(A.OPER, 'A0670', QTY_1,0)) V94
             , SUM(DECODE(A.OPER, 'A0720', QTY_1,0)) V95
             , SUM(DECODE(A.OPER, 'A0700', QTY_1,0)) V96
             , SUM(DECODE(A.OPER, 'A0339', QTY_1,0)) V97
             , SUM(DECODE(A.OPER, 'A0541', QTY_1,0)) V98
             , SUM(DECODE(A.OPER, 'A0551', QTY_1,0)) V99
             , SUM(DECODE(A.OPER, 'A0561', QTY_1,0)) V100
             , SUM(DECODE(A.OPER, 'A0601', QTY_1,0)) V101
             , SUM(DECODE(A.OPER, 'A0710', QTY_1,0)) V102
             , SUM(DECODE(A.OPER, 'A0800', QTY_1,0)) V103
             , SUM(DECODE(A.OPER, 'A0402', QTY_1,0)) V104
             , SUM(DECODE(A.OPER, 'A0502', QTY_1,0)) V105
             , SUM(DECODE(A.OPER, 'A0532', QTY_1,0)) V106
             , SUM(DECODE(A.OPER, 'A0801', QTY_1,0)) V107
             , SUM(DECODE(A.OPER, 'A0542', QTY_1,0)) V108
             , SUM(DECODE(A.OPER, 'A0552', QTY_1,0)) V109
             , SUM(DECODE(A.OPER, 'A0562', QTY_1,0)) V110
             , SUM(DECODE(A.OPER, 'A0602', QTY_1,0)) V111
             , SUM(DECODE(A.OPER, 'A0711', QTY_1,0)) V112
             , SUM(DECODE(A.OPER, 'A0802', QTY_1,0)) V113
             , SUM(DECODE(A.OPER, 'A0403', QTY_1,0)) V114
             , SUM(DECODE(A.OPER, 'A0503', QTY_1,0)) V115
             , SUM(DECODE(A.OPER, 'A0533', QTY_1,0)) V116
             , SUM(DECODE(A.OPER, 'A0543', QTY_1,0)) V117
             , SUM(DECODE(A.OPER, 'A0553', QTY_1,0)) V118
             , SUM(DECODE(A.OPER, 'A0563', QTY_1,0)) V119
             , SUM(DECODE(A.OPER, 'A0603', QTY_1,0)) V120
             , SUM(DECODE(A.OPER, 'A0712', QTY_1,0)) V121
             , SUM(DECODE(A.OPER, 'A0713', QTY_1,0)) V122
             , SUM(DECODE(A.OPER, 'A0803', QTY_1,0)) V123
             , SUM(DECODE(A.OPER, 'A0404', QTY_1,0)) V124
             , SUM(DECODE(A.OPER, 'A0504', QTY_1,0)) V125
             , SUM(DECODE(A.OPER, 'A0534', QTY_1,0)) V126
             , SUM(DECODE(A.OPER, 'A0544', QTY_1,0)) V127
             , SUM(DECODE(A.OPER, 'A0554', QTY_1,0)) V128
             , SUM(DECODE(A.OPER, 'A0564', QTY_1,0)) V129
             , SUM(DECODE(A.OPER, 'A0604', QTY_1,0)) V130
             , SUM(DECODE(A.OPER, 'A0714', QTY_1,0)) V131
             , SUM(DECODE(A.OPER, 'A0804', QTY_1,0)) V132
             , SUM(DECODE(A.OPER, 'A0405', QTY_1,0)) V133
             , SUM(DECODE(A.OPER, 'A0505', QTY_1,0)) V134
             , SUM(DECODE(A.OPER, 'A0535', QTY_1,0)) V135
             , SUM(DECODE(A.OPER, 'A0545', QTY_1,0)) V136
             , SUM(DECODE(A.OPER, 'A0555', QTY_1,0)) V137
             , SUM(DECODE(A.OPER, 'A0565', QTY_1,0)) V138
             , SUM(DECODE(A.OPER, 'A0605', QTY_1,0)) V139
             , SUM(DECODE(A.OPER, 'A0715', QTY_1,0)) V140
             , SUM(DECODE(A.OPER, 'A0805', QTY_1,0)) V141
             , SUM(DECODE(A.OPER, 'A0406', QTY_1,0)) V142
             , SUM(DECODE(A.OPER, 'A0506', QTY_1,0)) V143
             , SUM(DECODE(A.OPER, 'A0536', QTY_1,0)) V144
             , SUM(DECODE(A.OPER, 'A0546', QTY_1,0)) V145
             , SUM(DECODE(A.OPER, 'A0556', QTY_1,0)) V146
             , SUM(DECODE(A.OPER, 'A0566', QTY_1,0)) V147
             , SUM(DECODE(A.OPER, 'A0606', QTY_1,0)) V148
             , SUM(DECODE(A.OPER, 'A0716', QTY_1,0)) V149
             , SUM(DECODE(A.OPER, 'A0806', QTY_1,0)) V150
             , SUM(DECODE(A.OPER, 'A0407', QTY_1,0)) V151
             , SUM(DECODE(A.OPER, 'A0507', QTY_1,0)) V152
             , SUM(DECODE(A.OPER, 'A0537', QTY_1,0)) V153
             , SUM(DECODE(A.OPER, 'A0547', QTY_1,0)) V154
             , SUM(DECODE(A.OPER, 'A0557', QTY_1,0)) V155
             , SUM(DECODE(A.OPER, 'A0567', QTY_1,0)) V156
             , SUM(DECODE(A.OPER, 'A0607', QTY_1,0)) V157
             , SUM(DECODE(A.OPER, 'A0717', QTY_1,0)) V158
             , SUM(DECODE(A.OPER, 'A0807', QTY_1,0)) V159
             , SUM(DECODE(A.OPER, 'A0408', QTY_1,0)) V160
             , SUM(DECODE(A.OPER, 'A0508', QTY_1,0)) V161
             , SUM(DECODE(A.OPER, 'A0538', QTY_1,0)) V162
             , SUM(DECODE(A.OPER, 'A0558', QTY_1,0)) V163
             , SUM(DECODE(A.OPER, 'A0568', QTY_1,0)) V164
             , SUM(DECODE(A.OPER, 'A0608', QTY_1,0)) V165
             , SUM(DECODE(A.OPER, 'A0808', QTY_1,0)) V166
             , SUM(DECODE(A.OPER, 'A0409', QTY_1,0)) V167
             , SUM(DECODE(A.OPER, 'A0509', QTY_1,0)) V168
             , SUM(DECODE(A.OPER, 'A0539', QTY_1,0)) V169
             , SUM(DECODE(A.OPER, 'A0559', QTY_1,0)) V170
             , SUM(DECODE(A.OPER, 'A0569', QTY_1,0)) V171
             , SUM(DECODE(A.OPER, 'A0609', QTY_1,0)) V172
             , SUM(DECODE(A.OPER, 'A0809', QTY_1,0)) V173
             , SUM(DECODE(A.OPER, 'A080A', QTY_1,0)) V174
             , SUM(DECODE(A.OPER, 'A0890', QTY_1,0)) V175
             , SUM(DECODE(A.OPER, 'A0900', QTY_1,0)) V176
             , SUM(DECODE(A.OPER, 'A0910', QTY_1,0)) V177
             , SUM(DECODE(A.OPER, 'A0920', QTY_1,0)) V178
             , SUM(DECODE(A.OPER, 'A0930', QTY_1,0)) V179
             , SUM(DECODE(A.OPER, 'A0935', QTY_1,0)) V180
             , SUM(DECODE(A.OPER, 'A040A', QTY_1,0)) V181
             , SUM(DECODE(A.OPER, 'A0950', QTY_1,0)) V182
             , SUM(DECODE(A.OPER, 'A053A', QTY_1,0)) V183
             , SUM(DECODE(A.OPER, 'A0970', QTY_1,0)) V184
             , SUM(DECODE(A.OPER, 'A0940', QTY_1,0)) V185
             , SUM(DECODE(A.OPER, 'A0980', QTY_1,0)) V186
             , SUM(DECODE(A.OPER, 'A1000', QTY_1,0)) V187
             , SUM(DECODE(A.OPER, 'A055A', QTY_1,0)) V188
             , SUM(DECODE(A.OPER, 'A060A', QTY_1,0)) V189
             , SUM(DECODE(A.OPER, 'A1040', QTY_1,0)) V190
             , SUM(DECODE(A.OPER, 'A1070', QTY_1,0)) V191
             , SUM(DECODE(A.OPER, 'A1020', QTY_1,0)) V192
             , SUM(DECODE(A.OPER, 'A1100', QTY_1,0)) V193
             , SUM(DECODE(A.OPER, 'A1110', QTY_1,0)) V194
             , SUM(DECODE(A.OPER, 'A1120', QTY_1,0)) V195
             , SUM(DECODE(A.OPER, 'A1130', QTY_1,0)) V196
             , SUM(DECODE(A.OPER, 'A1140', QTY_1,0)) V197
             , SUM(DECODE(A.OPER, 'A1150', QTY_1,0)) V198
             , SUM(DECODE(A.OPER, 'A1600', QTY_1,0)) V199
             , SUM(DECODE(A.OPER, 'A1650', QTY_1,0)) V200
             , SUM(DECODE(A.OPER, 'A1170', QTY_1,0)) V201
             , SUM(DECODE(A.OPER, 'A1180', QTY_1,0)) V202
             , SUM(DECODE(A.OPER, 'A1200', QTY_1,0)) V203
             , SUM(DECODE(A.OPER, 'A1230', QTY_1,0)) V204
             , SUM(DECODE(A.OPER, 'A1240', QTY_1,0)) V205
             , SUM(DECODE(A.OPER, 'A1250', QTY_1,0)) V206
             , SUM(DECODE(A.OPER, 'A1260', QTY_1,0)) V207
             , SUM(DECODE(A.OPER, 'A1270', QTY_1,0)) V208
             , SUM(DECODE(A.OPER, 'A1300', QTY_1,0)) V209
             , SUM(DECODE(A.OPER, 'A1350', QTY_1,0)) V210
             , SUM(DECODE(A.OPER, 'A1370', QTY_1,0)) V211
             , SUM(DECODE(A.OPER, 'A1380', QTY_1,0)) V212
             , SUM(DECODE(A.OPER, 'A1050', QTY_1,0)) V213
             , SUM(DECODE(A.OPER, 'A1420', QTY_1,0)) V214
             , SUM(DECODE(A.OPER, 'A1440', QTY_1,0)) V215
             , SUM(DECODE(A.OPER, 'A1450', QTY_1,0)) V216
             , SUM(DECODE(A.OPER, 'A1821', QTY_1,0)) V217
             , SUM(DECODE(A.OPER, 'A1460', QTY_1,0)) V218
             , SUM(DECODE(A.OPER, 'A1470', QTY_1,0)) V219
             , SUM(DECODE(A.OPER, 'A1500', QTY_1,0)) V220
             , SUM(DECODE(A.OPER, 'A1550', QTY_1,0)) V221
             , SUM(DECODE(A.OPER, 'A1610', QTY_1,0)) V222
             , SUM(DECODE(A.OPER, 'A1560', QTY_1,0)) V223
             , SUM(DECODE(A.OPER, 'A1720', QTY_1,0)) V224
             , SUM(DECODE(A.OPER, 'A1730', QTY_1,0)) V225
             , SUM(DECODE(A.OPER, 'A1740', QTY_1,0)) V226
             , SUM(DECODE(A.OPER, 'A1750', QTY_1,0)) V227
             , SUM(DECODE(A.OPER, 'A1755', QTY_1,0)) V228
             , SUM(DECODE(A.OPER, 'A1760', QTY_1,0)) V229
             , SUM(DECODE(A.OPER, 'A1765', QTY_1,0)) V230
             , SUM(DECODE(A.OPER, 'A1766', QTY_1,0)) V231
             , SUM(DECODE(A.OPER, 'A1763', QTY_1,0)) V232
             , SUM(DECODE(A.OPER, 'A1770', QTY_1,0)) V233
             , SUM(DECODE(A.OPER, 'A1780', QTY_1,0)) V234
             , SUM(DECODE(A.OPER, 'A1790', QTY_1,0)) V235
             , SUM(DECODE(A.OPER, 'A1795', QTY_1,0)) V236
             , SUM(DECODE(A.OPER, 'A1860', QTY_1,0)) V237
             , SUM(DECODE(A.OPER, 'A1850', QTY_1,0)) V238
             , SUM(DECODE(A.OPER, 'A1390', QTY_1,0)) V239
             , SUM(DECODE(A.OPER, 'A1800', QTY_1,0)) V240
             , SUM(DECODE(A.OPER, 'A1805', QTY_1,0)) V241
             , SUM(DECODE(A.OPER, 'A1810', QTY_1,0)) V242
             , SUM(DECODE(A.OPER, 'A1811', QTY_1,0)) V243
             , SUM(DECODE(A.OPER, 'A1812', QTY_1,0)) V244
             , SUM(DECODE(A.OPER, 'A1816', QTY_1,0)) V245
             , SUM(DECODE(A.OPER, 'A1820', QTY_1,0)) V246
             , SUM(DECODE(A.OPER, 'A1825', QTY_1,0)) V247
             , SUM(DECODE(A.OPER, 'A1826', QTY_1,0)) V248
             , SUM(DECODE(A.OPER, 'A1920', QTY_1,0)) V249
             , SUM(DECODE(A.OPER, 'A1960', QTY_1,0)) V250
             , SUM(DECODE(A.OPER, 'A1815', QTY_1,0)) V251
             , SUM(DECODE(A.OPER, 'A1830', QTY_1,0)) V252
             , SUM(DECODE(A.OPER, 'A1710', QTY_1,0)) V253
             , SUM(DECODE(A.OPER, 'A1840', QTY_1,0)) V254
             , SUM(DECODE(A.OPER, 'A1900', QTY_1,0)) V255
             , SUM(DECODE(A.OPER, 'A1910', QTY_1,0)) V256
             , SUM(DECODE(A.OPER, 'A1950', QTY_1,0)) V257
             , SUM(DECODE(A.OPER, 'A2000', QTY_1,0)) V258
             , SUM(DECODE(A.OPER, 'A2010', QTY_1,0)) V259
             , SUM(DECODE(A.OPER, 'A2020', QTY_1,0)) V260
             , SUM(DECODE(A.OPER, 'A2025', QTY_1,0)) V261
             , SUM(DECODE(A.OPER, 'A1819', QTY_1,0)) V262
             , SUM(DECODE(A.OPER, 'A2030', QTY_1,0)) V263
             , SUM(DECODE(A.OPER, 'A2040', QTY_1,0)) V264
             , SUM(DECODE(A.OPER, 'A2041', QTY_1,0)) V265
             , SUM(DECODE(A.OPER, 'A2042', QTY_1,0)) V266
             , SUM(DECODE(A.OPER, 'A2070', QTY_1,0)) V267
             , SUM(DECODE(A.OPER, 'A2050', QTY_1,0)) V268
             , SUM(DECODE(A.OPER, 'A2150', QTY_1,0)) V269
             , SUM(DECODE(A.OPER, 'A2200', QTY_1,0)) V270
             , SUM(DECODE(A.OPER, 'A2100', QTY_1,0)) V271
             , SUM(DECODE(A.OPER, 'A2300', QTY_1,0)) V272
             , SUM(DECODE(A.OPER, 'A2350', QTY_1,0)) V273
             , SUM(DECODE(A.OPER, 'AZ009', QTY_1,0)) V274
             , SUM(DECODE(A.OPER, 'AZ010', QTY_1,0)) V275
          FROM RWIPLOTSTS A, CLOTCRDDAT@RPTTOMES B 
         WHERE 1=1 
           AND A.FACTORY = B.FACTORY(+) 
           AND A.MAT_ID = B.MAT_ID(+) 
           AND A.LOT_DEL_FLAG = ' ' 
           AND A.LOT_TYPE = 'W' 
           AND A.MAT_ID LIKE '%' 
           AND A.FACTORY = 'HMVA2' 
           AND A.OPER BETWEEN 'A0000' AND 'AZ010' 
         GROUP BY A.MAT_ID 
       ) WIP 
     , ( 
        SELECT MAT_ID 
             , SUM(S1_FAC_OUT_QTY_1+S2_FAC_OUT_QTY_1+S3_FAC_OUT_QTY_1) AS SHP_QTY  
          FROM RSUMFACMOV
         WHERE CM_KEY_1 = 'HMVA2' 
           AND MAT_ID LIKE '%' 
           AND WORK_DATE = '20200721'
           AND FACTORY NOT IN ('RETURN')
           AND LOT_TYPE = 'W'
         GROUP BY MAT_ID 
       ) SHP 
     , ( 
        SELECT MAT_ID 
             , SUM(DECODE(WORK_DATE, '20200720', NVL(S1_FAC_OUT_QTY_1 + S2_FAC_OUT_QTY_1 + S3_FAC_OUT_QTY_1 + S4_FAC_OUT_QTY_1, 0), 0)) AS ASSY_MONDAY  
             , SUM(NVL(S1_FAC_OUT_QTY_1 + S2_FAC_OUT_QTY_1 + S3_FAC_OUT_QTY_1 + S4_FAC_OUT_QTY_1, 0)) AS ASSY_WEEK 
          FROM RSUMFACMOV 
         WHERE CM_KEY_1 = 'HMVA2' 
           AND LOT_TYPE = 'W'
           AND CM_KEY_2 = 'PROD' 
           AND CM_KEY_3 LIKE 'P%' 
           AND MAT_ID LIKE 'SES%' 
           AND WORK_DATE BETWEEN '20200720' AND '20200726'
         GROUP BY MAT_ID 
       ) SHP1 
     , ( 
        SELECT MAT_ID 
             , SUM(PLAN_QTY) PLAN_W1 
             , SUM(DECODE(PLAN_DAY, '20200720', 0, PLAN_QTY)) AS PLAN_W2 
          FROM ( 
                SELECT * 
                  FROM CWIPPLNDAY 
                 WHERE 1=1 
                   AND FACTORY = 'HMVA2' 
                   AND PLAN_DAY BETWEEN '20200720' AND '20200726'
                   AND IN_OUT_FLAG = 'OUT'
                   AND CLASS = 'ASSY'
               ) B
         GROUP BY MAT_ID 
       ) PLN 
 WHERE 1=1 
   AND MAT.MAT_ID = WIP.MAT_ID(+) 
   AND MAT.MAT_ID = SHP.MAT_ID(+) 
   AND MAT.MAT_ID = SHP1.MAT_ID(+) 
   AND MAT.MAT_ID = PLN.MAT_ID(+) 
   AND MAT.FACTORY = 'HMVA2' 
   AND MAT.MAT_ID LIKE '%' 
 GROUP BY MAT.MAT_GRP_1,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT.MAT_CMF_10,  ' ', MAT.MAT_ID,  ' ',  ' '
HAVING (NVL(SUM(TOTAL),0) + NVL(SUM(SHP_QTY),0)  + NVL(SUM(ASSY_WEEK),0) + NVL(SUM(PLAN_W1),0)) > 0     
 ORDER BY MAT.MAT_GRP_1,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT.MAT_CMF_10,  ' ', MAT.MAT_ID,  ' ',  ' ' 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
        SELECT (SELECT DATA_1 FROM MGCMTBLDAT WHERE TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = MAT_GRP_1 AND ROWNUM=1) AS CUSTOMER,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT_CMF_10, MAT_ID, OPER,  ' ', CASE WHEN OPER <= 'A0200' THEN VENDOR_MAT_ID ELSE BASE_MAT_ID END SAP_CODE
             , SUM(TOTAL) AS TOTAL
             , SUM(ASSY_END_QTY0 ) VAL0
             , SUM(ASSY_END_QTY1 ) VAL1
             , SUM(ASSY_END_QTY2 ) VAL2
             , SUM(ASSY_END_QTY3 ) VAL3
             , SUM(ASSY_END_QTY4 ) VAL4
             , SUM(ASSY_END_QTY5 ) VAL5
             , SUM(ASSY_END_QTY6 ) VAL6
             , SUM(ASSY_END_QTY7 ) VAL7
             , ROUND(SUM(TOTAL)/8, 1) AVG
          FROM (
               SELECT B.MAT_GRP_1,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', B.MAT_CMF_10, B.MAT_ID, A.OPER,  ' ', BASE_MAT_ID,VENDOR_MAT_ID 
                    , DECODE(WORK_DATE, '20200714', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY0
                    , DECODE(WORK_DATE, '20200715', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY1
                    , DECODE(WORK_DATE, '20200716', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY2
                    , DECODE(WORK_DATE, '20200717', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY3
                    , DECODE(WORK_DATE, '20200718', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY4
                    , DECODE(WORK_DATE, '20200719', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY5
                    , DECODE(WORK_DATE, '20200720', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY6
                    , DECODE(WORK_DATE, '20200721', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY7
                    , (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END) TOTAL
                 FROM (
                      SELECT FACTORY, MAT_ID, OPER, LOT_TYPE, MAT_VER, WORK_DATE, CM_KEY_3
                           , SUM(END_LOT) AS END_LOT
                           , SUM(END_QTY_1) AS END_QTY_1
                           , SUM(END_QTY_2) AS END_QTY_2
                           , SUM(SHIP_QTY_1) AS SHIP_QTY_1
                           , SUM(SHIP_QTY_2) AS SHIP_QTY_2
                        FROM (
                             SELECT FACTORY, MAT_ID, OPER, LOT_TYPE, MAT_VER, WORK_DATE, CM_KEY_3
                           , DECODE(SUBSTR(OPER,2,4),'0000',SUM(S1_OPER_IN_LOT+S2_OPER_IN_LOT+S3_OPER_IN_LOT),SUM(S1_END_LOT+S2_END_LOT+S3_END_LOT)) END_LOT
                           , DECODE(SUBSTR(OPER,2,4),'0000',SUM(S1_OPER_IN_QTY_1+S2_OPER_IN_QTY_1+S3_OPER_IN_QTY_1),SUM(S1_END_QTY_1+S2_END_QTY_1+S3_END_QTY_1+S1_END_RWK_QTY_1 + S2_END_RWK_QTY_1 + S3_END_RWK_QTY_1)) END_QTY_1
                           , DECODE(SUBSTR(OPER,2,4),'0000',SUM(S1_OPER_IN_QTY_2+S2_OPER_IN_QTY_2+S3_OPER_IN_QTY_2),SUM(S1_END_QTY_2+S2_END_QTY_2+S3_END_QTY_2+S1_END_RWK_QTY_2 + S2_END_RWK_QTY_2 + S3_END_RWK_QTY_2)) END_QTY_2
                           , 0 SHIP_QTY_1
                           , 0 SHIP_QTY_2
                        FROM RSUMWIPMOV 
                       WHERE OPER NOT IN ('AZ010','TZ010','F0000','EZ010', 'SZ010', 'BZ010')
                    GROUP BY FACTORY, MAT_ID, OPER, LOT_TYPE, MAT_VER, WORK_DATE, CM_KEY_3
                   UNION ALL
                      SELECT CM_KEY_1 AS FACTORY, MAT_ID
                           , DECODE(CM_KEY_1,'HMVA2','AZ010','HMKT1','TZ010','FGS','F0000','HMKE1','EZ010','HMKS1','SZ010', 'BZ010') OPER
                           , LOT_TYPE, MAT_VER,  WORK_DATE,CM_KEY_3
                           , 0 END_LOT
                           , 0 END_QTY_1
                           , 0 END_QTY_2
                           , SUM(S1_FAC_OUT_QTY_1+S2_FAC_OUT_QTY_1+S3_FAC_OUT_QTY_1) SHIP_QTY_1
                           , SUM(S1_FAC_OUT_QTY_2+S2_FAC_OUT_QTY_2+S3_FAC_OUT_QTY_2) SHIP_QTY_2
                        FROM RSUMFACMOV 
                       WHERE FACTORY NOT IN ('RETURN')
                    GROUP BY CM_KEY_1, MAT_ID, OPER, LOT_TYPE, MAT_VER, WORK_DATE, CM_KEY_3
                             )
                    GROUP BY FACTORY, MAT_ID, OPER, LOT_TYPE, MAT_VER, WORK_DATE, CM_KEY_3
                    )A
                  , MWIPMATDEF B 
              WHERE 1=1 
                AND A.FACTORY  = 'HMVA2' 
                AND A.FACTORY = B.FACTORY 
                AND A.MAT_ID = B.MAT_ID                
                AND A.MAT_VER = 1 
                AND B.MAT_VER = 1 
                AND B.MAT_TYPE = 'FG' 
                AND A.OPER LIKE '%'
                AND A.MAT_ID LIKE '%'  
                AND A.OPER NOT IN ('00001','00002') 
                AND A.WORK_DATE BETWEEN '20200714' AND '20200721' 
         )   
   WHERE TOTAL > 0           
GROUP BY MAT_GRP_1,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT_CMF_10, MAT_ID, OPER,  ' ', BASE_MAT_ID,VENDOR_MAT_ID
ORDER BY MAT_GRP_1,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT_CMF_10, MAT_ID, DECODE(OPER,'AISSUE','A0001','TISSUE','T0001','EISSUE','E0001',OPER),  ' ', BASE_MAT_ID,VENDOR_MAT_ID

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
SELECT MIN(SYS_DATE) AS This_Week_First_Day 
     , MAX(SYS_DATE) AS This_Week_Last_Day
  FROM MWIPCALDEF
 WHERE 1=1 
   AND CALENDAR_ID = 'SE'
   AND (PLAN_YEAR,PLAN_WEEK) IN (
                                 SELECT PLAN_YEAR,PLAN_WEEK 
                                   FROM MWIPCALDEF 
                                  WHERE 1=1
                                    AND CALENDAR_ID = 'SE'
                                    AND SYS_DATE = '20200721')

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT NVL((SELECT DATA_1 FROM MGCMTBLDAT WHERE TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = MAT.MAT_GRP_1 AND ROWNUM=1), '-') AS CUSTOMER,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT.MAT_CMF_10 AS PIN_TYPE,  ' ', MAT.MAT_ID AS PRODUCT,  ' ',  ' ' 
     , ROUND(SUM(TOTAL)/1,0) AS TOTAL 
     , ROUND(SUM(V0)/1,0) AS  Val0
     , ROUND(SUM(V1)/1,0) AS  Val1
     , ROUND(SUM(V2)/1,0) AS  Val2
     , ROUND(SUM(V3)/1,0) AS  Val3
     , ROUND(SUM(V4)/1,0) AS  Val4
     , ROUND(SUM(V5)/1,0) AS  Val5
     , ROUND(SUM(V6)/1,0) AS  Val6
     , ROUND(SUM(V7)/1,0) AS  Val7
     , ROUND(SUM(V8)/1,0) AS  Val8
     , ROUND(SUM(V9)/1,0) AS  Val9
     , ROUND(SUM(V10)/1,0) AS  Val10
     , ROUND(SUM(V11)/1,0) AS  Val11
     , ROUND(SUM(V12)/1,0) AS  Val12
     , ROUND(SUM(V13)/1,0) AS  Val13
     , ROUND(SUM(V14)/1,0) AS  Val14
     , ROUND(SUM(V15)/1,0) AS  Val15
     , ROUND(SUM(V16)/1,0) AS  Val16
     , ROUND(SUM(V17)/1,0) AS  Val17
     , ROUND(SUM(V18)/1,0) AS  Val18
     , ROUND(SUM(V19)/1,0) AS  Val19
     , ROUND(SUM(V20)/1,0) AS  Val20
     , ROUND(SUM(V21)/1,0) AS  Val21
     , ROUND(SUM(V22)/1,0) AS  Val22
     , ROUND(SUM(V23)/1,0) AS  Val23
     , ROUND(SUM(V24)/1,0) AS  Val24
     , ROUND(SUM(V25)/1,0) AS  Val25
     , ROUND(SUM(V26)/1,0) AS  Val26
     , ROUND(SUM(V27)/1,0) AS  Val27
     , ROUND(SUM(V28)/1,0) AS  Val28
     , ROUND(SUM(V29)/1,0) AS  Val29
     , ROUND(SUM(V30)/1,0) AS  Val30
     , ROUND(SUM(V31)/1,0) AS  Val31
     , ROUND(SUM(V32)/1,0) AS  Val32
     , ROUND(SUM(V33)/1,0) AS  Val33
     , ROUND(SUM(V34)/1,0) AS  Val34
     , ROUND(SUM(V35)/1,0) AS  Val35
     , ROUND(SUM(V36)/1,0) AS  Val36
     , ROUND(SUM(V37)/1,0) AS  Val37
     , ROUND(SUM(V38)/1,0) AS  Val38
     , ROUND(SUM(V39)/1,0) AS  Val39
     , ROUND(SUM(V40)/1,0) AS  Val40
     , ROUND(SUM(V41)/1,0) AS  Val41
     , ROUND(SUM(V42)/1,0) AS  Val42
     , ROUND(SUM(V43)/1,0) AS  Val43
     , ROUND(SUM(V44)/1,0) AS  Val44
     , ROUND(SUM(V45)/1,0) AS  Val45
     , ROUND(SUM(V46)/1,0) AS  Val46
     , ROUND(SUM(V47)/1,0) AS  Val47
     , ROUND(SUM(V48)/1,0) AS  Val48
     , ROUND(SUM(V49)/1,0) AS  Val49
     , ROUND(SUM(V50)/1,0) AS  Val50
     , ROUND(SUM(V51)/1,0) AS  Val51
     , ROUND(SUM(V52)/1,0) AS  Val52
     , ROUND(SUM(V53)/1,0) AS  Val53
     , ROUND(SUM(V54)/1,0) AS  Val54
     , ROUND(SUM(V55)/1,0) AS  Val55
     , ROUND(SUM(V56)/1,0) AS  Val56
     , ROUND(SUM(V57)/1,0) AS  Val57
     , ROUND(SUM(V58)/1,0) AS  Val58
     , ROUND(SUM(V59)/1,0) AS  Val59
     , ROUND(SUM(V60)/1,0) AS  Val60
     , ROUND(SUM(V61)/1,0) AS  Val61
     , ROUND(SUM(V62)/1,0) AS  Val62
     , ROUND(SUM(V63)/1,0) AS  Val63
     , ROUND(SUM(V64)/1,0) AS  Val64
     , ROUND(SUM(V65)/1,0) AS  Val65
     , ROUND(SUM(V66)/1,0) AS  Val66
     , ROUND(SUM(V67)/1,0) AS  Val67
     , ROUND(SUM(V68)/1,0) AS  Val68
     , ROUND(SUM(V69)/1,0) AS  Val69
     , ROUND(SUM(V70)/1,0) AS  Val70
     , ROUND(SUM(V71)/1,0) AS  Val71
     , ROUND(SUM(V72)/1,0) AS  Val72
     , ROUND(SUM(V73)/1,0) AS  Val73
     , ROUND(SUM(V74)/1,0) AS  Val74
     , ROUND(SUM(V75)/1,0) AS  Val75
     , ROUND(SUM(V76)/1,0) AS  Val76
     , ROUND(SUM(V77)/1,0) AS  Val77
     , ROUND(SUM(V78)/1,0) AS  Val78
     , ROUND(SUM(V79)/1,0) AS  Val79
     , ROUND(SUM(V80)/1,0) AS  Val80
     , ROUND(SUM(V81)/1,0) AS  Val81
     , ROUND(SUM(V82)/1,0) AS  Val82
     , ROUND(SUM(V83)/1,0) AS  Val83
     , ROUND(SUM(V84)/1,0) AS  Val84
     , ROUND(SUM(V85)/1,0) AS  Val85
     , ROUND(SUM(V86)/1,0) AS  Val86
     , ROUND(SUM(V87)/1,0) AS  Val87
     , ROUND(SUM(V88)/1,0) AS  Val88
     , ROUND(SUM(V89)/1,0) AS  Val89
     , ROUND(SUM(V90)/1,0) AS  Val90
     , ROUND(SUM(V91)/1,0) AS  Val91
     , ROUND(SUM(V92)/1,0) AS  Val92
     , ROUND(SUM(V93)/1,0) AS  Val93
     , ROUND(SUM(V94)/1,0) AS  Val94
     , ROUND(SUM(V95)/1,0) AS  Val95
     , ROUND(SUM(V96)/1,0) AS  Val96
     , ROUND(SUM(V97)/1,0) AS  Val97
     , ROUND(SUM(V98)/1,0) AS  Val98
     , ROUND(SUM(V99)/1,0) AS  Val99
     , ROUND(SUM(V100)/1,0) AS  Val100
     , ROUND(SUM(V101)/1,0) AS  Val101
     , ROUND(SUM(V102)/1,0) AS  Val102
     , ROUND(SUM(V103)/1,0) AS  Val103
     , ROUND(SUM(V104)/1,0) AS  Val104
     , ROUND(SUM(V105)/1,0) AS  Val105
     , ROUND(SUM(V106)/1,0) AS  Val106
     , ROUND(SUM(V107)/1,0) AS  Val107
     , ROUND(SUM(V108)/1,0) AS  Val108
     , ROUND(SUM(V109)/1,0) AS  Val109
     , ROUND(SUM(V110)/1,0) AS  Val110
     , ROUND(SUM(V111)/1,0) AS  Val111
     , ROUND(SUM(V112)/1,0) AS  Val112
     , ROUND(SUM(V113)/1,0) AS  Val113
     , ROUND(SUM(V114)/1,0) AS  Val114
     , ROUND(SUM(V115)/1,0) AS  Val115
     , ROUND(SUM(V116)/1,0) AS  Val116
     , ROUND(SUM(V117)/1,0) AS  Val117
     , ROUND(SUM(V118)/1,0) AS  Val118
     , ROUND(SUM(V119)/1,0) AS  Val119
     , ROUND(SUM(V120)/1,0) AS  Val120
     , ROUND(SUM(V121)/1,0) AS  Val121
     , ROUND(SUM(V122)/1,0) AS  Val122
     , ROUND(SUM(V123)/1,0) AS  Val123
     , ROUND(SUM(V124)/1,0) AS  Val124
     , ROUND(SUM(V125)/1,0) AS  Val125
     , ROUND(SUM(V126)/1,0) AS  Val126
     , ROUND(SUM(V127)/1,0) AS  Val127
     , ROUND(SUM(V128)/1,0) AS  Val128
     , ROUND(SUM(V129)/1,0) AS  Val129
     , ROUND(SUM(V130)/1,0) AS  Val130
     , ROUND(SUM(V131)/1,0) AS  Val131
     , ROUND(SUM(V132)/1,0) AS  Val132
     , ROUND(SUM(V133)/1,0) AS  Val133
     , ROUND(SUM(V134)/1,0) AS  Val134
     , ROUND(SUM(V135)/1,0) AS  Val135
     , ROUND(SUM(V136)/1,0) AS  Val136
     , ROUND(SUM(V137)/1,0) AS  Val137
     , ROUND(SUM(V138)/1,0) AS  Val138
     , ROUND(SUM(V139)/1,0) AS  Val139
     , ROUND(SUM(V140)/1,0) AS  Val140
     , ROUND(SUM(V141)/1,0) AS  Val141
     , ROUND(SUM(V142)/1,0) AS  Val142
     , ROUND(SUM(V143)/1,0) AS  Val143
     , ROUND(SUM(V144)/1,0) AS  Val144
     , ROUND(SUM(V145)/1,0) AS  Val145
     , ROUND(SUM(V146)/1,0) AS  Val146
     , ROUND(SUM(V147)/1,0) AS  Val147
     , ROUND(SUM(V148)/1,0) AS  Val148
     , ROUND(SUM(V149)/1,0) AS  Val149
     , ROUND(SUM(V150)/1,0) AS  Val150
     , ROUND(SUM(V151)/1,0) AS  Val151
     , ROUND(SUM(V152)/1,0) AS  Val152
     , ROUND(SUM(V153)/1,0) AS  Val153
     , ROUND(SUM(V154)/1,0) AS  Val154
     , ROUND(SUM(V155)/1,0) AS  Val155
     , ROUND(SUM(V156)/1,0) AS  Val156
     , ROUND(SUM(V157)/1,0) AS  Val157
     , ROUND(SUM(V158)/1,0) AS  Val158
     , ROUND(SUM(V159)/1,0) AS  Val159
     , ROUND(SUM(V160)/1,0) AS  Val160
     , ROUND(SUM(V161)/1,0) AS  Val161
     , ROUND(SUM(V162)/1,0) AS  Val162
     , ROUND(SUM(V163)/1,0) AS  Val163
     , ROUND(SUM(V164)/1,0) AS  Val164
     , ROUND(SUM(V165)/1,0) AS  Val165
     , ROUND(SUM(V166)/1,0) AS  Val166
     , ROUND(SUM(V167)/1,0) AS  Val167
     , ROUND(SUM(V168)/1,0) AS  Val168
     , ROUND(SUM(V169)/1,0) AS  Val169
     , ROUND(SUM(V170)/1,0) AS  Val170
     , ROUND(SUM(V171)/1,0) AS  Val171
     , ROUND(SUM(V172)/1,0) AS  Val172
     , ROUND(SUM(V173)/1,0) AS  Val173
     , ROUND(SUM(V174)/1,0) AS  Val174
     , ROUND(SUM(V175)/1,0) AS  Val175
     , ROUND(SUM(V176)/1,0) AS  Val176
     , ROUND(SUM(V177)/1,0) AS  Val177
     , ROUND(SUM(V178)/1,0) AS  Val178
     , ROUND(SUM(V179)/1,0) AS  Val179
     , ROUND(SUM(V180)/1,0) AS  Val180
     , ROUND(SUM(V181)/1,0) AS  Val181
     , ROUND(SUM(V182)/1,0) AS  Val182
     , ROUND(SUM(V183)/1,0) AS  Val183
     , ROUND(SUM(V184)/1,0) AS  Val184
     , ROUND(SUM(V185)/1,0) AS  Val185
     , ROUND(SUM(V186)/1,0) AS  Val186
     , ROUND(SUM(V187)/1,0) AS  Val187
     , ROUND(SUM(V188)/1,0) AS  Val188
     , ROUND(SUM(V189)/1,0) AS  Val189
     , ROUND(SUM(V190)/1,0) AS  Val190
     , ROUND(SUM(V191)/1,0) AS  Val191
     , ROUND(SUM(V192)/1,0) AS  Val192
     , ROUND(SUM(V193)/1,0) AS  Val193
     , ROUND(SUM(V194)/1,0) AS  Val194
     , ROUND(SUM(V195)/1,0) AS  Val195
     , ROUND(SUM(V196)/1,0) AS  Val196
     , ROUND(SUM(V197)/1,0) AS  Val197
     , ROUND(SUM(V198)/1,0) AS  Val198
     , ROUND(SUM(V199)/1,0) AS  Val199
     , ROUND(SUM(V200)/1,0) AS  Val200
     , ROUND(SUM(V201)/1,0) AS  Val201
     , ROUND(SUM(V202)/1,0) AS  Val202
     , ROUND(SUM(V203)/1,0) AS  Val203
     , ROUND(SUM(V204)/1,0) AS  Val204
     , ROUND(SUM(V205)/1,0) AS  Val205
     , ROUND(SUM(V206)/1,0) AS  Val206
     , ROUND(SUM(V207)/1,0) AS  Val207
     , ROUND(SUM(V208)/1,0) AS  Val208
     , ROUND(SUM(V209)/1,0) AS  Val209
     , ROUND(SUM(V210)/1,0) AS  Val210
     , ROUND(SUM(V211)/1,0) AS  Val211
     , ROUND(SUM(V212)/1,0) AS  Val212
     , ROUND(SUM(V213)/1,0) AS  Val213
     , ROUND(SUM(V214)/1,0) AS  Val214
     , ROUND(SUM(V215)/1,0) AS  Val215
     , ROUND(SUM(V216)/1,0) AS  Val216
     , ROUND(SUM(V217)/1,0) AS  Val217
     , ROUND(SUM(V218)/1,0) AS  Val218
     , ROUND(SUM(V219)/1,0) AS  Val219
     , ROUND(SUM(V220)/1,0) AS  Val220
     , ROUND(SUM(V221)/1,0) AS  Val221
     , ROUND(SUM(V222)/1,0) AS  Val222
     , ROUND(SUM(V223)/1,0) AS  Val223
     , ROUND(SUM(V224)/1,0) AS  Val224
     , ROUND(SUM(V225)/1,0) AS  Val225
     , ROUND(SUM(V226)/1,0) AS  Val226
     , ROUND(SUM(V227)/1,0) AS  Val227
     , ROUND(SUM(V228)/1,0) AS  Val228
     , ROUND(SUM(V229)/1,0) AS  Val229
     , ROUND(SUM(V230)/1,0) AS  Val230
     , ROUND(SUM(V231)/1,0) AS  Val231
     , ROUND(SUM(V232)/1,0) AS  Val232
     , ROUND(SUM(V233)/1,0) AS  Val233
     , ROUND(SUM(V234)/1,0) AS  Val234
     , ROUND(SUM(V235)/1,0) AS  Val235
     , ROUND(SUM(V236)/1,0) AS  Val236
     , ROUND(SUM(V237)/1,0) AS  Val237
     , ROUND(SUM(V238)/1,0) AS  Val238
     , ROUND(SUM(V239)/1,0) AS  Val239
     , ROUND(SUM(V240)/1,0) AS  Val240
     , ROUND(SUM(V241)/1,0) AS  Val241
     , ROUND(SUM(V242)/1,0) AS  Val242
     , ROUND(SUM(V243)/1,0) AS  Val243
     , ROUND(SUM(V244)/1,0) AS  Val244
     , ROUND(SUM(V245)/1,0) AS  Val245
     , ROUND(SUM(V246)/1,0) AS  Val246
     , ROUND(SUM(V247)/1,0) AS  Val247
     , ROUND(SUM(V248)/1,0) AS  Val248
     , ROUND(SUM(V249)/1,0) AS  Val249
     , ROUND(SUM(V250)/1,0) AS  Val250
     , ROUND(SUM(V251)/1,0) AS  Val251
     , ROUND(SUM(V252)/1,0) AS  Val252
     , ROUND(SUM(V253)/1,0) AS  Val253
     , ROUND(SUM(V254)/1,0) AS  Val254
     , ROUND(SUM(V255)/1,0) AS  Val255
     , ROUND(SUM(V256)/1,0) AS  Val256
     , ROUND(SUM(V257)/1,0) AS  Val257
     , ROUND(SUM(V258)/1,0) AS  Val258
     , ROUND(SUM(V259)/1,0) AS  Val259
     , ROUND(SUM(V260)/1,0) AS  Val260
     , ROUND(SUM(V261)/1,0) AS  Val261
     , ROUND(SUM(V262)/1,0) AS  Val262
     , ROUND(SUM(V263)/1,0) AS  Val263
     , ROUND(SUM(V264)/1,0) AS  Val264
     , ROUND(SUM(V265)/1,0) AS  Val265
     , ROUND(SUM(V266)/1,0) AS  Val266
     , ROUND(SUM(V267)/1,0) AS  Val267
     , ROUND(SUM(V268)/1,0) AS  Val268
     , ROUND(SUM(V269)/1,0) AS  Val269
     , ROUND(SUM(V270)/1,0) AS  Val270
     , ROUND(SUM(V271)/1,0) AS  Val271
     , ROUND(SUM(V272)/1,0) AS  Val272
     , ROUND(SUM(V273)/1,0) AS  Val273
     , ROUND(SUM(V274)/1,0) AS  Val274
     , ROUND(SUM(V275)/1,0) AS  Val275
     , TRUNC(SUM(SHP_QTY)/1,0) AS SHP_QTY 
     , ROUND(DECODE(TO_CHAR(TO_DATE('20200721','YYYYMMDD'),'D'), 2, SUM(NVL(PLN.PLAN_W1,0)), 3, SUM(NVL(PLN.PLAN_W1,0)), SUM(NVL(PLN.PLAN_W2,0)) + SUM(NVL(SHP1.ASSY_MONDAY,0)))/1,0) AS PLAN_W1
     , ROUND(SUM(NVL(SHP1.ASSY_WEEK,0))/1,0)
     , ROUND((DECODE(TO_CHAR(TO_DATE('20200721','YYYYMMDD'),'D'), 2, SUM(NVL(PLN.PLAN_W1,0)), 3, SUM(NVL(PLN.PLAN_W1,0)), SUM(NVL(PLN.PLAN_W2,0)) + SUM(NVL(SHP1.ASSY_MONDAY,0)))) - SUM(NVL(SHP1.ASSY_WEEK,0))/1,0) AS LACK_WEEK
  FROM MWIPMATDEF MAT 
     , ( 
        SELECT A.MAT_ID, MAX(B.EMC_1) AS EMC_1 
             , SUM(QTY_1) AS TOTAL 
             , MAX((SELECT ATTR_VALUE FROM MATRNAMSTS WHERE FACTORY = 'HMVA2' AND ATTR_TYPE = 'MAT_ETC' AND ATTR_NAME = DECODE(LOT_CMF_2, 'SE', 'SEC_VERSION', 'HX', 'HX_VERSION') AND ATTR_KEY = A.MAT_ID)) AS VERSION 
             , SUM(DECODE(A.OPER, 'A0000', QTY_1,0)) V0
             , SUM(DECODE(A.OPER, 'A0005', QTY_1,0)) V1
             , SUM(DECODE(A.OPER, 'A000N', QTY_1,0)) V2
             , SUM(DECODE(A.OPER, 'A0010', QTY_1,0)) V3
             , SUM(DECODE(A.OPER, 'A0012', QTY_1,0)) V4
             , SUM(DECODE(A.OPER, 'A0013', QTY_1,0)) V5
             , SUM(DECODE(A.OPER, 'A0015', QTY_1,0)) V6
             , SUM(DECODE(A.OPER, 'A0020', QTY_1,0)) V7
             , SUM(DECODE(A.OPER, 'A0055', QTY_1,0)) V8
             , SUM(DECODE(A.OPER, 'A0023', QTY_1,0)) V9
             , SUM(DECODE(A.OPER, 'A0025', QTY_1,0)) V10
             , SUM(DECODE(A.OPER, 'A0030', QTY_1,0)) V11
             , SUM(DECODE(A.OPER, 'A0190', QTY_1,0)) V12
             , SUM(DECODE(A.OPER, 'A0033', QTY_1,0)) V13
             , SUM(DECODE(A.OPER, 'A0040', QTY_1,0)) V14
             , SUM(DECODE(A.OPER, 'A0041', QTY_1,0)) V15
             , SUM(DECODE(A.OPER, 'A0042', QTY_1,0)) V16
             , SUM(DECODE(A.OPER, 'A0045', QTY_1,0)) V17
             , SUM(DECODE(A.OPER, 'A0050', QTY_1,0)) V18
             , SUM(DECODE(A.OPER, 'A0060', QTY_1,0)) V19
             , SUM(DECODE(A.OPER, 'A0070', QTY_1,0)) V20
             , SUM(DECODE(A.OPER, 'A0080', QTY_1,0)) V21
             , SUM(DECODE(A.OPER, 'A0090', QTY_1,0)) V22
             , SUM(DECODE(A.OPER, 'A0095', QTY_1,0)) V23
             , SUM(DECODE(A.OPER, 'A0110', QTY_1,0)) V24
             , SUM(DECODE(A.OPER, 'A0120', QTY_1,0)) V25
             , SUM(DECODE(A.OPER, 'A0130', QTY_1,0)) V26
             , SUM(DECODE(A.OPER, 'A0140', QTY_1,0)) V27
             , SUM(DECODE(A.OPER, 'A0160', QTY_1,0)) V28
             , SUM(DECODE(A.OPER, 'A0161', QTY_1,0)) V29
             , SUM(DECODE(A.OPER, 'A0165', QTY_1,0)) V30
             , SUM(DECODE(A.OPER, 'A0065', QTY_1,0)) V31
             , SUM(DECODE(A.OPER, 'A0100', QTY_1,0)) V32
             , SUM(DECODE(A.OPER, 'A0150', QTY_1,0)) V33
             , SUM(DECODE(A.OPER, 'A0175', QTY_1,0)) V34
             , SUM(DECODE(A.OPER, 'A0176', QTY_1,0)) V35
             , SUM(DECODE(A.OPER, 'A0170', QTY_1,0)) V36
             , SUM(DECODE(A.OPER, 'A0180', QTY_1,0)) V37
             , SUM(DECODE(A.OPER, 'A0200', QTY_1,0)) V38
             , SUM(DECODE(A.OPER, 'A0201', QTY_1,0)) V39
             , SUM(DECODE(A.OPER, 'A0202', QTY_1,0)) V40
             , SUM(DECODE(A.OPER, 'A0210', QTY_1,0)) V41
             , SUM(DECODE(A.OPER, 'A0215', QTY_1,0)) V42
             , SUM(DECODE(A.OPER, 'A0220', QTY_1,0)) V43
             , SUM(DECODE(A.OPER, 'A0230', QTY_1,0)) V44
             , SUM(DECODE(A.OPER, 'A0300', QTY_1,0)) V45
             , SUM(DECODE(A.OPER, 'A0250', QTY_1,0)) V46
             , SUM(DECODE(A.OPER, 'A0305', QTY_1,0)) V47
             , SUM(DECODE(A.OPER, 'A0240', QTY_1,0)) V48
             , SUM(DECODE(A.OPER, 'A0260', QTY_1,0)) V49
             , SUM(DECODE(A.OPER, 'A0270', QTY_1,0)) V50
             , SUM(DECODE(A.OPER, 'A0290', QTY_1,0)) V51
             , SUM(DECODE(A.OPER, 'A0295', QTY_1,0)) V52
             , SUM(DECODE(A.OPER, 'A0280', QTY_1,0)) V53
             , SUM(DECODE(A.OPER, 'A0306', QTY_1,0)) V54
             , SUM(DECODE(A.OPER, 'A0307', QTY_1,0)) V55
             , SUM(DECODE(A.OPER, 'A0308', QTY_1,0)) V56
             , SUM(DECODE(A.OPER, 'A0310', QTY_1,0)) V57
             , SUM(DECODE(A.OPER, 'A0320', QTY_1,0)) V58
             , SUM(DECODE(A.OPER, 'A0330', QTY_1,0)) V59
             , SUM(DECODE(A.OPER, 'A1280', QTY_1,0)) V60
             , SUM(DECODE(A.OPER, 'A0333', QTY_1,0)) V61
             , SUM(DECODE(A.OPER, 'A0335', QTY_1,0)) V62
             , SUM(DECODE(A.OPER, 'A0337', QTY_1,0)) V63
             , SUM(DECODE(A.OPER, 'A0372', QTY_1,0)) V64
             , SUM(DECODE(A.OPER, 'A0395', QTY_1,0)) V65
             , SUM(DECODE(A.OPER, 'A0397', QTY_1,0)) V66
             , SUM(DECODE(A.OPER, 'A0340', QTY_1,0)) V67
             , SUM(DECODE(A.OPER, 'A0345', QTY_1,0)) V68
             , SUM(DECODE(A.OPER, 'A0350', QTY_1,0)) V69
             , SUM(DECODE(A.OPER, 'A0360', QTY_1,0)) V70
             , SUM(DECODE(A.OPER, 'A0370', QTY_1,0)) V71
             , SUM(DECODE(A.OPER, 'A0375', QTY_1,0)) V72
             , SUM(DECODE(A.OPER, 'A0380', QTY_1,0)) V73
             , SUM(DECODE(A.OPER, 'A0381', QTY_1,0)) V74
             , SUM(DECODE(A.OPER, 'A0382', QTY_1,0)) V75
             , SUM(DECODE(A.OPER, 'A0383', QTY_1,0)) V76
             , SUM(DECODE(A.OPER, 'A0385', QTY_1,0)) V77
             , SUM(DECODE(A.OPER, 'A0391', QTY_1,0)) V78
             , SUM(DECODE(A.OPER, 'A0399', QTY_1,0)) V79
             , SUM(DECODE(A.OPER, 'A0390', QTY_1,0)) V80
             , SUM(DECODE(A.OPER, 'A0400', QTY_1,0)) V81
             , SUM(DECODE(A.OPER, 'A0401', QTY_1,0)) V82
             , SUM(DECODE(A.OPER, 'A0500', QTY_1,0)) V83
             , SUM(DECODE(A.OPER, 'A0530', QTY_1,0)) V84
             , SUM(DECODE(A.OPER, 'A0531', QTY_1,0)) V85
             , SUM(DECODE(A.OPER, 'A0501', QTY_1,0)) V86
             , SUM(DECODE(A.OPER, 'A0540', QTY_1,0)) V87
             , SUM(DECODE(A.OPER, 'A0550', QTY_1,0)) V88
             , SUM(DECODE(A.OPER, 'A0600', QTY_1,0)) V89
             , SUM(DECODE(A.OPER, 'A0620', QTY_1,0)) V90
             , SUM(DECODE(A.OPER, 'A0660', QTY_1,0)) V91
             , SUM(DECODE(A.OPER, 'A0630', QTY_1,0)) V92
             , SUM(DECODE(A.OPER, 'A0650', QTY_1,0)) V93
             , SUM(DECODE(A.OPER, 'A0670', QTY_1,0)) V94
             , SUM(DECODE(A.OPER, 'A0720', QTY_1,0)) V95
             , SUM(DECODE(A.OPER, 'A0700', QTY_1,0)) V96
             , SUM(DECODE(A.OPER, 'A0339', QTY_1,0)) V97
             , SUM(DECODE(A.OPER, 'A0541', QTY_1,0)) V98
             , SUM(DECODE(A.OPER, 'A0551', QTY_1,0)) V99
             , SUM(DECODE(A.OPER, 'A0561', QTY_1,0)) V100
             , SUM(DECODE(A.OPER, 'A0601', QTY_1,0)) V101
             , SUM(DECODE(A.OPER, 'A0710', QTY_1,0)) V102
             , SUM(DECODE(A.OPER, 'A0800', QTY_1,0)) V103
             , SUM(DECODE(A.OPER, 'A0402', QTY_1,0)) V104
             , SUM(DECODE(A.OPER, 'A0502', QTY_1,0)) V105
             , SUM(DECODE(A.OPER, 'A0532', QTY_1,0)) V106
             , SUM(DECODE(A.OPER, 'A0801', QTY_1,0)) V107
             , SUM(DECODE(A.OPER, 'A0542', QTY_1,0)) V108
             , SUM(DECODE(A.OPER, 'A0552', QTY_1,0)) V109
             , SUM(DECODE(A.OPER, 'A0562', QTY_1,0)) V110
             , SUM(DECODE(A.OPER, 'A0602', QTY_1,0)) V111
             , SUM(DECODE(A.OPER, 'A0711', QTY_1,0)) V112
             , SUM(DECODE(A.OPER, 'A0802', QTY_1,0)) V113
             , SUM(DECODE(A.OPER, 'A0403', QTY_1,0)) V114
             , SUM(DECODE(A.OPER, 'A0503', QTY_1,0)) V115
             , SUM(DECODE(A.OPER, 'A0533', QTY_1,0)) V116
             , SUM(DECODE(A.OPER, 'A0543', QTY_1,0)) V117
             , SUM(DECODE(A.OPER, 'A0553', QTY_1,0)) V118
             , SUM(DECODE(A.OPER, 'A0563', QTY_1,0)) V119
             , SUM(DECODE(A.OPER, 'A0603', QTY_1,0)) V120
             , SUM(DECODE(A.OPER, 'A0712', QTY_1,0)) V121
             , SUM(DECODE(A.OPER, 'A0713', QTY_1,0)) V122
             , SUM(DECODE(A.OPER, 'A0803', QTY_1,0)) V123
             , SUM(DECODE(A.OPER, 'A0404', QTY_1,0)) V124
             , SUM(DECODE(A.OPER, 'A0504', QTY_1,0)) V125
             , SUM(DECODE(A.OPER, 'A0534', QTY_1,0)) V126
             , SUM(DECODE(A.OPER, 'A0544', QTY_1,0)) V127
             , SUM(DECODE(A.OPER, 'A0554', QTY_1,0)) V128
             , SUM(DECODE(A.OPER, 'A0564', QTY_1,0)) V129
             , SUM(DECODE(A.OPER, 'A0604', QTY_1,0)) V130
             , SUM(DECODE(A.OPER, 'A0714', QTY_1,0)) V131
             , SUM(DECODE(A.OPER, 'A0804', QTY_1,0)) V132
             , SUM(DECODE(A.OPER, 'A0405', QTY_1,0)) V133
             , SUM(DECODE(A.OPER, 'A0505', QTY_1,0)) V134
             , SUM(DECODE(A.OPER, 'A0535', QTY_1,0)) V135
             , SUM(DECODE(A.OPER, 'A0545', QTY_1,0)) V136
             , SUM(DECODE(A.OPER, 'A0555', QTY_1,0)) V137
             , SUM(DECODE(A.OPER, 'A0565', QTY_1,0)) V138
             , SUM(DECODE(A.OPER, 'A0605', QTY_1,0)) V139
             , SUM(DECODE(A.OPER, 'A0715', QTY_1,0)) V140
             , SUM(DECODE(A.OPER, 'A0805', QTY_1,0)) V141
             , SUM(DECODE(A.OPER, 'A0406', QTY_1,0)) V142
             , SUM(DECODE(A.OPER, 'A0506', QTY_1,0)) V143
             , SUM(DECODE(A.OPER, 'A0536', QTY_1,0)) V144
             , SUM(DECODE(A.OPER, 'A0546', QTY_1,0)) V145
             , SUM(DECODE(A.OPER, 'A0556', QTY_1,0)) V146
             , SUM(DECODE(A.OPER, 'A0566', QTY_1,0)) V147
             , SUM(DECODE(A.OPER, 'A0606', QTY_1,0)) V148
             , SUM(DECODE(A.OPER, 'A0716', QTY_1,0)) V149
             , SUM(DECODE(A.OPER, 'A0806', QTY_1,0)) V150
             , SUM(DECODE(A.OPER, 'A0407', QTY_1,0)) V151
             , SUM(DECODE(A.OPER, 'A0507', QTY_1,0)) V152
             , SUM(DECODE(A.OPER, 'A0537', QTY_1,0)) V153
             , SUM(DECODE(A.OPER, 'A0547', QTY_1,0)) V154
             , SUM(DECODE(A.OPER, 'A0557', QTY_1,0)) V155
             , SUM(DECODE(A.OPER, 'A0567', QTY_1,0)) V156
             , SUM(DECODE(A.OPER, 'A0607', QTY_1,0)) V157
             , SUM(DECODE(A.OPER, 'A0717', QTY_1,0)) V158
             , SUM(DECODE(A.OPER, 'A0807', QTY_1,0)) V159
             , SUM(DECODE(A.OPER, 'A0408', QTY_1,0)) V160
             , SUM(DECODE(A.OPER, 'A0508', QTY_1,0)) V161
             , SUM(DECODE(A.OPER, 'A0538', QTY_1,0)) V162
             , SUM(DECODE(A.OPER, 'A0558', QTY_1,0)) V163
             , SUM(DECODE(A.OPER, 'A0568', QTY_1,0)) V164
             , SUM(DECODE(A.OPER, 'A0608', QTY_1,0)) V165
             , SUM(DECODE(A.OPER, 'A0808', QTY_1,0)) V166
             , SUM(DECODE(A.OPER, 'A0409', QTY_1,0)) V167
             , SUM(DECODE(A.OPER, 'A0509', QTY_1,0)) V168
             , SUM(DECODE(A.OPER, 'A0539', QTY_1,0)) V169
             , SUM(DECODE(A.OPER, 'A0559', QTY_1,0)) V170
             , SUM(DECODE(A.OPER, 'A0569', QTY_1,0)) V171
             , SUM(DECODE(A.OPER, 'A0609', QTY_1,0)) V172
             , SUM(DECODE(A.OPER, 'A0809', QTY_1,0)) V173
             , SUM(DECODE(A.OPER, 'A080A', QTY_1,0)) V174
             , SUM(DECODE(A.OPER, 'A0890', QTY_1,0)) V175
             , SUM(DECODE(A.OPER, 'A0900', QTY_1,0)) V176
             , SUM(DECODE(A.OPER, 'A0910', QTY_1,0)) V177
             , SUM(DECODE(A.OPER, 'A0920', QTY_1,0)) V178
             , SUM(DECODE(A.OPER, 'A0930', QTY_1,0)) V179
             , SUM(DECODE(A.OPER, 'A0935', QTY_1,0)) V180
             , SUM(DECODE(A.OPER, 'A040A', QTY_1,0)) V181
             , SUM(DECODE(A.OPER, 'A0950', QTY_1,0)) V182
             , SUM(DECODE(A.OPER, 'A053A', QTY_1,0)) V183
             , SUM(DECODE(A.OPER, 'A0970', QTY_1,0)) V184
             , SUM(DECODE(A.OPER, 'A0940', QTY_1,0)) V185
             , SUM(DECODE(A.OPER, 'A0980', QTY_1,0)) V186
             , SUM(DECODE(A.OPER, 'A1000', QTY_1,0)) V187
             , SUM(DECODE(A.OPER, 'A055A', QTY_1,0)) V188
             , SUM(DECODE(A.OPER, 'A060A', QTY_1,0)) V189
             , SUM(DECODE(A.OPER, 'A1040', QTY_1,0)) V190
             , SUM(DECODE(A.OPER, 'A1070', QTY_1,0)) V191
             , SUM(DECODE(A.OPER, 'A1020', QTY_1,0)) V192
             , SUM(DECODE(A.OPER, 'A1100', QTY_1,0)) V193
             , SUM(DECODE(A.OPER, 'A1110', QTY_1,0)) V194
             , SUM(DECODE(A.OPER, 'A1120', QTY_1,0)) V195
             , SUM(DECODE(A.OPER, 'A1130', QTY_1,0)) V196
             , SUM(DECODE(A.OPER, 'A1140', QTY_1,0)) V197
             , SUM(DECODE(A.OPER, 'A1150', QTY_1,0)) V198
             , SUM(DECODE(A.OPER, 'A1600', QTY_1,0)) V199
             , SUM(DECODE(A.OPER, 'A1650', QTY_1,0)) V200
             , SUM(DECODE(A.OPER, 'A1170', QTY_1,0)) V201
             , SUM(DECODE(A.OPER, 'A1180', QTY_1,0)) V202
             , SUM(DECODE(A.OPER, 'A1200', QTY_1,0)) V203
             , SUM(DECODE(A.OPER, 'A1230', QTY_1,0)) V204
             , SUM(DECODE(A.OPER, 'A1240', QTY_1,0)) V205
             , SUM(DECODE(A.OPER, 'A1250', QTY_1,0)) V206
             , SUM(DECODE(A.OPER, 'A1260', QTY_1,0)) V207
             , SUM(DECODE(A.OPER, 'A1270', QTY_1,0)) V208
             , SUM(DECODE(A.OPER, 'A1300', QTY_1,0)) V209
             , SUM(DECODE(A.OPER, 'A1350', QTY_1,0)) V210
             , SUM(DECODE(A.OPER, 'A1370', QTY_1,0)) V211
             , SUM(DECODE(A.OPER, 'A1380', QTY_1,0)) V212
             , SUM(DECODE(A.OPER, 'A1050', QTY_1,0)) V213
             , SUM(DECODE(A.OPER, 'A1420', QTY_1,0)) V214
             , SUM(DECODE(A.OPER, 'A1440', QTY_1,0)) V215
             , SUM(DECODE(A.OPER, 'A1450', QTY_1,0)) V216
             , SUM(DECODE(A.OPER, 'A1821', QTY_1,0)) V217
             , SUM(DECODE(A.OPER, 'A1460', QTY_1,0)) V218
             , SUM(DECODE(A.OPER, 'A1470', QTY_1,0)) V219
             , SUM(DECODE(A.OPER, 'A1500', QTY_1,0)) V220
             , SUM(DECODE(A.OPER, 'A1550', QTY_1,0)) V221
             , SUM(DECODE(A.OPER, 'A1610', QTY_1,0)) V222
             , SUM(DECODE(A.OPER, 'A1560', QTY_1,0)) V223
             , SUM(DECODE(A.OPER, 'A1720', QTY_1,0)) V224
             , SUM(DECODE(A.OPER, 'A1730', QTY_1,0)) V225
             , SUM(DECODE(A.OPER, 'A1740', QTY_1,0)) V226
             , SUM(DECODE(A.OPER, 'A1750', QTY_1,0)) V227
             , SUM(DECODE(A.OPER, 'A1755', QTY_1,0)) V228
             , SUM(DECODE(A.OPER, 'A1760', QTY_1,0)) V229
             , SUM(DECODE(A.OPER, 'A1765', QTY_1,0)) V230
             , SUM(DECODE(A.OPER, 'A1766', QTY_1,0)) V231
             , SUM(DECODE(A.OPER, 'A1763', QTY_1,0)) V232
             , SUM(DECODE(A.OPER, 'A1770', QTY_1,0)) V233
             , SUM(DECODE(A.OPER, 'A1780', QTY_1,0)) V234
             , SUM(DECODE(A.OPER, 'A1790', QTY_1,0)) V235
             , SUM(DECODE(A.OPER, 'A1795', QTY_1,0)) V236
             , SUM(DECODE(A.OPER, 'A1860', QTY_1,0)) V237
             , SUM(DECODE(A.OPER, 'A1850', QTY_1,0)) V238
             , SUM(DECODE(A.OPER, 'A1390', QTY_1,0)) V239
             , SUM(DECODE(A.OPER, 'A1800', QTY_1,0)) V240
             , SUM(DECODE(A.OPER, 'A1805', QTY_1,0)) V241
             , SUM(DECODE(A.OPER, 'A1810', QTY_1,0)) V242
             , SUM(DECODE(A.OPER, 'A1811', QTY_1,0)) V243
             , SUM(DECODE(A.OPER, 'A1812', QTY_1,0)) V244
             , SUM(DECODE(A.OPER, 'A1816', QTY_1,0)) V245
             , SUM(DECODE(A.OPER, 'A1820', QTY_1,0)) V246
             , SUM(DECODE(A.OPER, 'A1825', QTY_1,0)) V247
             , SUM(DECODE(A.OPER, 'A1826', QTY_1,0)) V248
             , SUM(DECODE(A.OPER, 'A1920', QTY_1,0)) V249
             , SUM(DECODE(A.OPER, 'A1960', QTY_1,0)) V250
             , SUM(DECODE(A.OPER, 'A1815', QTY_1,0)) V251
             , SUM(DECODE(A.OPER, 'A1830', QTY_1,0)) V252
             , SUM(DECODE(A.OPER, 'A1710', QTY_1,0)) V253
             , SUM(DECODE(A.OPER, 'A1840', QTY_1,0)) V254
             , SUM(DECODE(A.OPER, 'A1900', QTY_1,0)) V255
             , SUM(DECODE(A.OPER, 'A1910', QTY_1,0)) V256
             , SUM(DECODE(A.OPER, 'A1950', QTY_1,0)) V257
             , SUM(DECODE(A.OPER, 'A2000', QTY_1,0)) V258
             , SUM(DECODE(A.OPER, 'A2010', QTY_1,0)) V259
             , SUM(DECODE(A.OPER, 'A2020', QTY_1,0)) V260
             , SUM(DECODE(A.OPER, 'A2025', QTY_1,0)) V261
             , SUM(DECODE(A.OPER, 'A1819', QTY_1,0)) V262
             , SUM(DECODE(A.OPER, 'A2030', QTY_1,0)) V263
             , SUM(DECODE(A.OPER, 'A2040', QTY_1,0)) V264
             , SUM(DECODE(A.OPER, 'A2041', QTY_1,0)) V265
             , SUM(DECODE(A.OPER, 'A2042', QTY_1,0)) V266
             , SUM(DECODE(A.OPER, 'A2070', QTY_1,0)) V267
             , SUM(DECODE(A.OPER, 'A2050', QTY_1,0)) V268
             , SUM(DECODE(A.OPER, 'A2150', QTY_1,0)) V269
             , SUM(DECODE(A.OPER, 'A2200', QTY_1,0)) V270
             , SUM(DECODE(A.OPER, 'A2100', QTY_1,0)) V271
             , SUM(DECODE(A.OPER, 'A2300', QTY_1,0)) V272
             , SUM(DECODE(A.OPER, 'A2350', QTY_1,0)) V273
             , SUM(DECODE(A.OPER, 'AZ009', QTY_1,0)) V274
             , SUM(DECODE(A.OPER, 'AZ010', QTY_1,0)) V275
          FROM RWIPLOTSTS A, CLOTCRDDAT@RPTTOMES B 
         WHERE 1=1 
           AND A.FACTORY = B.FACTORY(+) 
           AND A.MAT_ID = B.MAT_ID(+) 
           AND A.LOT_DEL_FLAG = ' ' 
           AND A.LOT_TYPE = 'W' 
           AND A.MAT_ID LIKE '%' 
           AND A.FACTORY = 'HMVA2' 
           AND A.OPER BETWEEN 'A0000' AND 'AZ010' 
         GROUP BY A.MAT_ID 
       ) WIP 
     , ( 
        SELECT MAT_ID 
             , SUM(S1_FAC_OUT_QTY_1+S2_FAC_OUT_QTY_1+S3_FAC_OUT_QTY_1) AS SHP_QTY  
          FROM RSUMFACMOV
         WHERE CM_KEY_1 = 'HMVA2' 
           AND MAT_ID LIKE '%' 
           AND WORK_DATE = '20200721'
           AND FACTORY NOT IN ('RETURN')
           AND LOT_TYPE = 'W'
         GROUP BY MAT_ID 
       ) SHP 
     , ( 
        SELECT MAT_ID 
             , SUM(DECODE(WORK_DATE, '20200720', NVL(S1_FAC_OUT_QTY_1 + S2_FAC_OUT_QTY_1 + S3_FAC_OUT_QTY_1 + S4_FAC_OUT_QTY_1, 0), 0)) AS ASSY_MONDAY  
             , SUM(NVL(S1_FAC_OUT_QTY_1 + S2_FAC_OUT_QTY_1 + S3_FAC_OUT_QTY_1 + S4_FAC_OUT_QTY_1, 0)) AS ASSY_WEEK 
          FROM RSUMFACMOV 
         WHERE CM_KEY_1 = 'HMVA2' 
           AND LOT_TYPE = 'W'
           AND CM_KEY_2 = 'PROD' 
           AND CM_KEY_3 LIKE 'P%' 
           AND MAT_ID LIKE 'SES%' 
           AND WORK_DATE BETWEEN '20200720' AND '20200726'
         GROUP BY MAT_ID 
       ) SHP1 
     , ( 
        SELECT MAT_ID 
             , SUM(PLAN_QTY) PLAN_W1 
             , SUM(DECODE(PLAN_DAY, '20200720', 0, PLAN_QTY)) AS PLAN_W2 
          FROM ( 
                SELECT * 
                  FROM CWIPPLNDAY 
                 WHERE 1=1 
                   AND FACTORY = 'HMVA2' 
                   AND PLAN_DAY BETWEEN '20200720' AND '20200726'
                   AND IN_OUT_FLAG = 'OUT'
                   AND CLASS = 'ASSY'
               ) B
         GROUP BY MAT_ID 
       ) PLN 
 WHERE 1=1 
   AND MAT.MAT_ID = WIP.MAT_ID(+) 
   AND MAT.MAT_ID = SHP.MAT_ID(+) 
   AND MAT.MAT_ID = SHP1.MAT_ID(+) 
   AND MAT.MAT_ID = PLN.MAT_ID(+) 
   AND MAT.FACTORY = 'HMVA2' 
   AND MAT.MAT_ID LIKE '%' 
 GROUP BY MAT.MAT_GRP_1,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT.MAT_CMF_10,  ' ', MAT.MAT_ID,  ' ',  ' '
HAVING (NVL(SUM(TOTAL),0) + NVL(SUM(SHP_QTY),0)  + NVL(SUM(ASSY_WEEK),0) + NVL(SUM(PLAN_W1),0)) > 0     
 ORDER BY MAT.MAT_GRP_1,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT.MAT_CMF_10,  ' ', MAT.MAT_ID,  ' ',  ' ' 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE) AS This_Week_First_Day 
     , MAX(SYS_DATE) AS This_Week_Last_Day
  FROM MWIPCALDEF
 WHERE 1=1 
   AND CALENDAR_ID = 'SE'
   AND (PLAN_YEAR,PLAN_WEEK) IN (
                                 SELECT PLAN_YEAR,PLAN_WEEK 
                                   FROM MWIPCALDEF 
                                  WHERE 1=1
                                    AND CALENDAR_ID = 'SE'
                                    AND SYS_DATE = '20200721')

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT NVL((SELECT DATA_1 FROM MGCMTBLDAT WHERE TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = MAT.MAT_GRP_1 AND ROWNUM=1), '-') AS CUSTOMER,  ' ', MAT.MAT_GRP_3 AS PACKAGE,  ' ',  ' ',  ' ',  ' ',  ' ', MAT.MAT_CMF_10 AS PIN_TYPE,  ' ', MAT.MAT_ID AS PRODUCT,  ' ',  ' ' 
     , ROUND(SUM(TOTAL)/1,0) AS TOTAL 
     , ROUND(SUM(V0)/1,0) AS  Val0
     , ROUND(SUM(V1)/1,0) AS  Val1
     , ROUND(SUM(V2)/1,0) AS  Val2
     , ROUND(SUM(V3)/1,0) AS  Val3
     , ROUND(SUM(V4)/1,0) AS  Val4
     , ROUND(SUM(V5)/1,0) AS  Val5
     , ROUND(SUM(V6)/1,0) AS  Val6
     , ROUND(SUM(V7)/1,0) AS  Val7
     , ROUND(SUM(V8)/1,0) AS  Val8
     , ROUND(SUM(V9)/1,0) AS  Val9
     , ROUND(SUM(V10)/1,0) AS  Val10
     , ROUND(SUM(V11)/1,0) AS  Val11
     , ROUND(SUM(V12)/1,0) AS  Val12
     , ROUND(SUM(V13)/1,0) AS  Val13
     , ROUND(SUM(V14)/1,0) AS  Val14
     , ROUND(SUM(V15)/1,0) AS  Val15
     , ROUND(SUM(V16)/1,0) AS  Val16
     , ROUND(SUM(V17)/1,0) AS  Val17
     , ROUND(SUM(V18)/1,0) AS  Val18
     , ROUND(SUM(V19)/1,0) AS  Val19
     , ROUND(SUM(V20)/1,0) AS  Val20
     , ROUND(SUM(V21)/1,0) AS  Val21
     , ROUND(SUM(V22)/1,0) AS  Val22
     , ROUND(SUM(V23)/1,0) AS  Val23
     , ROUND(SUM(V24)/1,0) AS  Val24
     , ROUND(SUM(V25)/1,0) AS  Val25
     , ROUND(SUM(V26)/1,0) AS  Val26
     , ROUND(SUM(V27)/1,0) AS  Val27
     , ROUND(SUM(V28)/1,0) AS  Val28
     , ROUND(SUM(V29)/1,0) AS  Val29
     , ROUND(SUM(V30)/1,0) AS  Val30
     , ROUND(SUM(V31)/1,0) AS  Val31
     , ROUND(SUM(V32)/1,0) AS  Val32
     , ROUND(SUM(V33)/1,0) AS  Val33
     , ROUND(SUM(V34)/1,0) AS  Val34
     , ROUND(SUM(V35)/1,0) AS  Val35
     , ROUND(SUM(V36)/1,0) AS  Val36
     , ROUND(SUM(V37)/1,0) AS  Val37
     , ROUND(SUM(V38)/1,0) AS  Val38
     , ROUND(SUM(V39)/1,0) AS  Val39
     , ROUND(SUM(V40)/1,0) AS  Val40
     , ROUND(SUM(V41)/1,0) AS  Val41
     , ROUND(SUM(V42)/1,0) AS  Val42
     , ROUND(SUM(V43)/1,0) AS  Val43
     , ROUND(SUM(V44)/1,0) AS  Val44
     , ROUND(SUM(V45)/1,0) AS  Val45
     , ROUND(SUM(V46)/1,0) AS  Val46
     , ROUND(SUM(V47)/1,0) AS  Val47
     , ROUND(SUM(V48)/1,0) AS  Val48
     , ROUND(SUM(V49)/1,0) AS  Val49
     , ROUND(SUM(V50)/1,0) AS  Val50
     , ROUND(SUM(V51)/1,0) AS  Val51
     , ROUND(SUM(V52)/1,0) AS  Val52
     , ROUND(SUM(V53)/1,0) AS  Val53
     , ROUND(SUM(V54)/1,0) AS  Val54
     , ROUND(SUM(V55)/1,0) AS  Val55
     , ROUND(SUM(V56)/1,0) AS  Val56
     , ROUND(SUM(V57)/1,0) AS  Val57
     , ROUND(SUM(V58)/1,0) AS  Val58
     , ROUND(SUM(V59)/1,0) AS  Val59
     , ROUND(SUM(V60)/1,0) AS  Val60
     , ROUND(SUM(V61)/1,0) AS  Val61
     , ROUND(SUM(V62)/1,0) AS  Val62
     , ROUND(SUM(V63)/1,0) AS  Val63
     , ROUND(SUM(V64)/1,0) AS  Val64
     , ROUND(SUM(V65)/1,0) AS  Val65
     , ROUND(SUM(V66)/1,0) AS  Val66
     , ROUND(SUM(V67)/1,0) AS  Val67
     , ROUND(SUM(V68)/1,0) AS  Val68
     , ROUND(SUM(V69)/1,0) AS  Val69
     , ROUND(SUM(V70)/1,0) AS  Val70
     , ROUND(SUM(V71)/1,0) AS  Val71
     , ROUND(SUM(V72)/1,0) AS  Val72
     , ROUND(SUM(V73)/1,0) AS  Val73
     , ROUND(SUM(V74)/1,0) AS  Val74
     , ROUND(SUM(V75)/1,0) AS  Val75
     , ROUND(SUM(V76)/1,0) AS  Val76
     , ROUND(SUM(V77)/1,0) AS  Val77
     , ROUND(SUM(V78)/1,0) AS  Val78
     , ROUND(SUM(V79)/1,0) AS  Val79
     , ROUND(SUM(V80)/1,0) AS  Val80
     , ROUND(SUM(V81)/1,0) AS  Val81
     , ROUND(SUM(V82)/1,0) AS  Val82
     , ROUND(SUM(V83)/1,0) AS  Val83
     , ROUND(SUM(V84)/1,0) AS  Val84
     , ROUND(SUM(V85)/1,0) AS  Val85
     , ROUND(SUM(V86)/1,0) AS  Val86
     , ROUND(SUM(V87)/1,0) AS  Val87
     , ROUND(SUM(V88)/1,0) AS  Val88
     , ROUND(SUM(V89)/1,0) AS  Val89
     , ROUND(SUM(V90)/1,0) AS  Val90
     , ROUND(SUM(V91)/1,0) AS  Val91
     , ROUND(SUM(V92)/1,0) AS  Val92
     , ROUND(SUM(V93)/1,0) AS  Val93
     , ROUND(SUM(V94)/1,0) AS  Val94
     , ROUND(SUM(V95)/1,0) AS  Val95
     , ROUND(SUM(V96)/1,0) AS  Val96
     , ROUND(SUM(V97)/1,0) AS  Val97
     , ROUND(SUM(V98)/1,0) AS  Val98
     , ROUND(SUM(V99)/1,0) AS  Val99
     , ROUND(SUM(V100)/1,0) AS  Val100
     , ROUND(SUM(V101)/1,0) AS  Val101
     , ROUND(SUM(V102)/1,0) AS  Val102
     , ROUND(SUM(V103)/1,0) AS  Val103
     , ROUND(SUM(V104)/1,0) AS  Val104
     , ROUND(SUM(V105)/1,0) AS  Val105
     , ROUND(SUM(V106)/1,0) AS  Val106
     , ROUND(SUM(V107)/1,0) AS  Val107
     , ROUND(SUM(V108)/1,0) AS  Val108
     , ROUND(SUM(V109)/1,0) AS  Val109
     , ROUND(SUM(V110)/1,0) AS  Val110
     , ROUND(SUM(V111)/1,0) AS  Val111
     , ROUND(SUM(V112)/1,0) AS  Val112
     , ROUND(SUM(V113)/1,0) AS  Val113
     , ROUND(SUM(V114)/1,0) AS  Val114
     , ROUND(SUM(V115)/1,0) AS  Val115
     , ROUND(SUM(V116)/1,0) AS  Val116
     , ROUND(SUM(V117)/1,0) AS  Val117
     , ROUND(SUM(V118)/1,0) AS  Val118
     , ROUND(SUM(V119)/1,0) AS  Val119
     , ROUND(SUM(V120)/1,0) AS  Val120
     , ROUND(SUM(V121)/1,0) AS  Val121
     , ROUND(SUM(V122)/1,0) AS  Val122
     , ROUND(SUM(V123)/1,0) AS  Val123
     , ROUND(SUM(V124)/1,0) AS  Val124
     , ROUND(SUM(V125)/1,0) AS  Val125
     , ROUND(SUM(V126)/1,0) AS  Val126
     , ROUND(SUM(V127)/1,0) AS  Val127
     , ROUND(SUM(V128)/1,0) AS  Val128
     , ROUND(SUM(V129)/1,0) AS  Val129
     , ROUND(SUM(V130)/1,0) AS  Val130
     , ROUND(SUM(V131)/1,0) AS  Val131
     , ROUND(SUM(V132)/1,0) AS  Val132
     , ROUND(SUM(V133)/1,0) AS  Val133
     , ROUND(SUM(V134)/1,0) AS  Val134
     , ROUND(SUM(V135)/1,0) AS  Val135
     , ROUND(SUM(V136)/1,0) AS  Val136
     , ROUND(SUM(V137)/1,0) AS  Val137
     , ROUND(SUM(V138)/1,0) AS  Val138
     , ROUND(SUM(V139)/1,0) AS  Val139
     , ROUND(SUM(V140)/1,0) AS  Val140
     , ROUND(SUM(V141)/1,0) AS  Val141
     , ROUND(SUM(V142)/1,0) AS  Val142
     , ROUND(SUM(V143)/1,0) AS  Val143
     , ROUND(SUM(V144)/1,0) AS  Val144
     , ROUND(SUM(V145)/1,0) AS  Val145
     , ROUND(SUM(V146)/1,0) AS  Val146
     , ROUND(SUM(V147)/1,0) AS  Val147
     , ROUND(SUM(V148)/1,0) AS  Val148
     , ROUND(SUM(V149)/1,0) AS  Val149
     , ROUND(SUM(V150)/1,0) AS  Val150
     , ROUND(SUM(V151)/1,0) AS  Val151
     , ROUND(SUM(V152)/1,0) AS  Val152
     , ROUND(SUM(V153)/1,0) AS  Val153
     , ROUND(SUM(V154)/1,0) AS  Val154
     , ROUND(SUM(V155)/1,0) AS  Val155
     , ROUND(SUM(V156)/1,0) AS  Val156
     , ROUND(SUM(V157)/1,0) AS  Val157
     , ROUND(SUM(V158)/1,0) AS  Val158
     , ROUND(SUM(V159)/1,0) AS  Val159
     , ROUND(SUM(V160)/1,0) AS  Val160
     , ROUND(SUM(V161)/1,0) AS  Val161
     , ROUND(SUM(V162)/1,0) AS  Val162
     , ROUND(SUM(V163)/1,0) AS  Val163
     , ROUND(SUM(V164)/1,0) AS  Val164
     , ROUND(SUM(V165)/1,0) AS  Val165
     , ROUND(SUM(V166)/1,0) AS  Val166
     , ROUND(SUM(V167)/1,0) AS  Val167
     , ROUND(SUM(V168)/1,0) AS  Val168
     , ROUND(SUM(V169)/1,0) AS  Val169
     , ROUND(SUM(V170)/1,0) AS  Val170
     , ROUND(SUM(V171)/1,0) AS  Val171
     , ROUND(SUM(V172)/1,0) AS  Val172
     , ROUND(SUM(V173)/1,0) AS  Val173
     , ROUND(SUM(V174)/1,0) AS  Val174
     , ROUND(SUM(V175)/1,0) AS  Val175
     , ROUND(SUM(V176)/1,0) AS  Val176
     , ROUND(SUM(V177)/1,0) AS  Val177
     , ROUND(SUM(V178)/1,0) AS  Val178
     , ROUND(SUM(V179)/1,0) AS  Val179
     , ROUND(SUM(V180)/1,0) AS  Val180
     , ROUND(SUM(V181)/1,0) AS  Val181
     , ROUND(SUM(V182)/1,0) AS  Val182
     , ROUND(SUM(V183)/1,0) AS  Val183
     , ROUND(SUM(V184)/1,0) AS  Val184
     , ROUND(SUM(V185)/1,0) AS  Val185
     , ROUND(SUM(V186)/1,0) AS  Val186
     , ROUND(SUM(V187)/1,0) AS  Val187
     , ROUND(SUM(V188)/1,0) AS  Val188
     , ROUND(SUM(V189)/1,0) AS  Val189
     , ROUND(SUM(V190)/1,0) AS  Val190
     , ROUND(SUM(V191)/1,0) AS  Val191
     , ROUND(SUM(V192)/1,0) AS  Val192
     , ROUND(SUM(V193)/1,0) AS  Val193
     , ROUND(SUM(V194)/1,0) AS  Val194
     , ROUND(SUM(V195)/1,0) AS  Val195
     , ROUND(SUM(V196)/1,0) AS  Val196
     , ROUND(SUM(V197)/1,0) AS  Val197
     , ROUND(SUM(V198)/1,0) AS  Val198
     , ROUND(SUM(V199)/1,0) AS  Val199
     , ROUND(SUM(V200)/1,0) AS  Val200
     , ROUND(SUM(V201)/1,0) AS  Val201
     , ROUND(SUM(V202)/1,0) AS  Val202
     , ROUND(SUM(V203)/1,0) AS  Val203
     , ROUND(SUM(V204)/1,0) AS  Val204
     , ROUND(SUM(V205)/1,0) AS  Val205
     , ROUND(SUM(V206)/1,0) AS  Val206
     , ROUND(SUM(V207)/1,0) AS  Val207
     , ROUND(SUM(V208)/1,0) AS  Val208
     , ROUND(SUM(V209)/1,0) AS  Val209
     , ROUND(SUM(V210)/1,0) AS  Val210
     , ROUND(SUM(V211)/1,0) AS  Val211
     , ROUND(SUM(V212)/1,0) AS  Val212
     , ROUND(SUM(V213)/1,0) AS  Val213
     , ROUND(SUM(V214)/1,0) AS  Val214
     , ROUND(SUM(V215)/1,0) AS  Val215
     , ROUND(SUM(V216)/1,0) AS  Val216
     , ROUND(SUM(V217)/1,0) AS  Val217
     , ROUND(SUM(V218)/1,0) AS  Val218
     , ROUND(SUM(V219)/1,0) AS  Val219
     , ROUND(SUM(V220)/1,0) AS  Val220
     , ROUND(SUM(V221)/1,0) AS  Val221
     , ROUND(SUM(V222)/1,0) AS  Val222
     , ROUND(SUM(V223)/1,0) AS  Val223
     , ROUND(SUM(V224)/1,0) AS  Val224
     , ROUND(SUM(V225)/1,0) AS  Val225
     , ROUND(SUM(V226)/1,0) AS  Val226
     , ROUND(SUM(V227)/1,0) AS  Val227
     , ROUND(SUM(V228)/1,0) AS  Val228
     , ROUND(SUM(V229)/1,0) AS  Val229
     , ROUND(SUM(V230)/1,0) AS  Val230
     , ROUND(SUM(V231)/1,0) AS  Val231
     , ROUND(SUM(V232)/1,0) AS  Val232
     , ROUND(SUM(V233)/1,0) AS  Val233
     , ROUND(SUM(V234)/1,0) AS  Val234
     , ROUND(SUM(V235)/1,0) AS  Val235
     , ROUND(SUM(V236)/1,0) AS  Val236
     , ROUND(SUM(V237)/1,0) AS  Val237
     , ROUND(SUM(V238)/1,0) AS  Val238
     , ROUND(SUM(V239)/1,0) AS  Val239
     , ROUND(SUM(V240)/1,0) AS  Val240
     , ROUND(SUM(V241)/1,0) AS  Val241
     , ROUND(SUM(V242)/1,0) AS  Val242
     , ROUND(SUM(V243)/1,0) AS  Val243
     , ROUND(SUM(V244)/1,0) AS  Val244
     , ROUND(SUM(V245)/1,0) AS  Val245
     , ROUND(SUM(V246)/1,0) AS  Val246
     , ROUND(SUM(V247)/1,0) AS  Val247
     , ROUND(SUM(V248)/1,0) AS  Val248
     , ROUND(SUM(V249)/1,0) AS  Val249
     , ROUND(SUM(V250)/1,0) AS  Val250
     , ROUND(SUM(V251)/1,0) AS  Val251
     , ROUND(SUM(V252)/1,0) AS  Val252
     , ROUND(SUM(V253)/1,0) AS  Val253
     , ROUND(SUM(V254)/1,0) AS  Val254
     , ROUND(SUM(V255)/1,0) AS  Val255
     , ROUND(SUM(V256)/1,0) AS  Val256
     , ROUND(SUM(V257)/1,0) AS  Val257
     , ROUND(SUM(V258)/1,0) AS  Val258
     , ROUND(SUM(V259)/1,0) AS  Val259
     , ROUND(SUM(V260)/1,0) AS  Val260
     , ROUND(SUM(V261)/1,0) AS  Val261
     , ROUND(SUM(V262)/1,0) AS  Val262
     , ROUND(SUM(V263)/1,0) AS  Val263
     , ROUND(SUM(V264)/1,0) AS  Val264
     , ROUND(SUM(V265)/1,0) AS  Val265
     , ROUND(SUM(V266)/1,0) AS  Val266
     , ROUND(SUM(V267)/1,0) AS  Val267
     , ROUND(SUM(V268)/1,0) AS  Val268
     , ROUND(SUM(V269)/1,0) AS  Val269
     , ROUND(SUM(V270)/1,0) AS  Val270
     , ROUND(SUM(V271)/1,0) AS  Val271
     , ROUND(SUM(V272)/1,0) AS  Val272
     , ROUND(SUM(V273)/1,0) AS  Val273
     , ROUND(SUM(V274)/1,0) AS  Val274
     , ROUND(SUM(V275)/1,0) AS  Val275
     , TRUNC(SUM(SHP_QTY)/1,0) AS SHP_QTY 
     , ROUND(DECODE(TO_CHAR(TO_DATE('20200721','YYYYMMDD'),'D'), 2, SUM(NVL(PLN.PLAN_W1,0)), 3, SUM(NVL(PLN.PLAN_W1,0)), SUM(NVL(PLN.PLAN_W2,0)) + SUM(NVL(SHP1.ASSY_MONDAY,0)))/1,0) AS PLAN_W1
     , ROUND(SUM(NVL(SHP1.ASSY_WEEK,0))/1,0)
     , ROUND((DECODE(TO_CHAR(TO_DATE('20200721','YYYYMMDD'),'D'), 2, SUM(NVL(PLN.PLAN_W1,0)), 3, SUM(NVL(PLN.PLAN_W1,0)), SUM(NVL(PLN.PLAN_W2,0)) + SUM(NVL(SHP1.ASSY_MONDAY,0)))) - SUM(NVL(SHP1.ASSY_WEEK,0))/1,0) AS LACK_WEEK
  FROM MWIPMATDEF MAT 
     , ( 
        SELECT A.MAT_ID, MAX(B.EMC_1) AS EMC_1 
             , SUM(QTY_1) AS TOTAL 
             , MAX((SELECT ATTR_VALUE FROM MATRNAMSTS WHERE FACTORY = 'HMVA2' AND ATTR_TYPE = 'MAT_ETC' AND ATTR_NAME = DECODE(LOT_CMF_2, 'SE', 'SEC_VERSION', 'HX', 'HX_VERSION') AND ATTR_KEY = A.MAT_ID)) AS VERSION 
             , SUM(DECODE(A.OPER, 'A0000', QTY_1,0)) V0
             , SUM(DECODE(A.OPER, 'A0005', QTY_1,0)) V1
             , SUM(DECODE(A.OPER, 'A000N', QTY_1,0)) V2
             , SUM(DECODE(A.OPER, 'A0010', QTY_1,0)) V3
             , SUM(DECODE(A.OPER, 'A0012', QTY_1,0)) V4
             , SUM(DECODE(A.OPER, 'A0013', QTY_1,0)) V5
             , SUM(DECODE(A.OPER, 'A0015', QTY_1,0)) V6
             , SUM(DECODE(A.OPER, 'A0020', QTY_1,0)) V7
             , SUM(DECODE(A.OPER, 'A0055', QTY_1,0)) V8
             , SUM(DECODE(A.OPER, 'A0023', QTY_1,0)) V9
             , SUM(DECODE(A.OPER, 'A0025', QTY_1,0)) V10
             , SUM(DECODE(A.OPER, 'A0030', QTY_1,0)) V11
             , SUM(DECODE(A.OPER, 'A0190', QTY_1,0)) V12
             , SUM(DECODE(A.OPER, 'A0033', QTY_1,0)) V13
             , SUM(DECODE(A.OPER, 'A0040', QTY_1,0)) V14
             , SUM(DECODE(A.OPER, 'A0041', QTY_1,0)) V15
             , SUM(DECODE(A.OPER, 'A0042', QTY_1,0)) V16
             , SUM(DECODE(A.OPER, 'A0045', QTY_1,0)) V17
             , SUM(DECODE(A.OPER, 'A0050', QTY_1,0)) V18
             , SUM(DECODE(A.OPER, 'A0060', QTY_1,0)) V19
             , SUM(DECODE(A.OPER, 'A0070', QTY_1,0)) V20
             , SUM(DECODE(A.OPER, 'A0080', QTY_1,0)) V21
             , SUM(DECODE(A.OPER, 'A0090', QTY_1,0)) V22
             , SUM(DECODE(A.OPER, 'A0095', QTY_1,0)) V23
             , SUM(DECODE(A.OPER, 'A0110', QTY_1,0)) V24
             , SUM(DECODE(A.OPER, 'A0120', QTY_1,0)) V25
             , SUM(DECODE(A.OPER, 'A0130', QTY_1,0)) V26
             , SUM(DECODE(A.OPER, 'A0140', QTY_1,0)) V27
             , SUM(DECODE(A.OPER, 'A0160', QTY_1,0)) V28
             , SUM(DECODE(A.OPER, 'A0161', QTY_1,0)) V29
             , SUM(DECODE(A.OPER, 'A0165', QTY_1,0)) V30
             , SUM(DECODE(A.OPER, 'A0065', QTY_1,0)) V31
             , SUM(DECODE(A.OPER, 'A0100', QTY_1,0)) V32
             , SUM(DECODE(A.OPER, 'A0150', QTY_1,0)) V33
             , SUM(DECODE(A.OPER, 'A0175', QTY_1,0)) V34
             , SUM(DECODE(A.OPER, 'A0176', QTY_1,0)) V35
             , SUM(DECODE(A.OPER, 'A0170', QTY_1,0)) V36
             , SUM(DECODE(A.OPER, 'A0180', QTY_1,0)) V37
             , SUM(DECODE(A.OPER, 'A0200', QTY_1,0)) V38
             , SUM(DECODE(A.OPER, 'A0201', QTY_1,0)) V39
             , SUM(DECODE(A.OPER, 'A0202', QTY_1,0)) V40
             , SUM(DECODE(A.OPER, 'A0210', QTY_1,0)) V41
             , SUM(DECODE(A.OPER, 'A0215', QTY_1,0)) V42
             , SUM(DECODE(A.OPER, 'A0220', QTY_1,0)) V43
             , SUM(DECODE(A.OPER, 'A0230', QTY_1,0)) V44
             , SUM(DECODE(A.OPER, 'A0300', QTY_1,0)) V45
             , SUM(DECODE(A.OPER, 'A0250', QTY_1,0)) V46
             , SUM(DECODE(A.OPER, 'A0305', QTY_1,0)) V47
             , SUM(DECODE(A.OPER, 'A0240', QTY_1,0)) V48
             , SUM(DECODE(A.OPER, 'A0260', QTY_1,0)) V49
             , SUM(DECODE(A.OPER, 'A0270', QTY_1,0)) V50
             , SUM(DECODE(A.OPER, 'A0290', QTY_1,0)) V51
             , SUM(DECODE(A.OPER, 'A0295', QTY_1,0)) V52
             , SUM(DECODE(A.OPER, 'A0280', QTY_1,0)) V53
             , SUM(DECODE(A.OPER, 'A0306', QTY_1,0)) V54
             , SUM(DECODE(A.OPER, 'A0307', QTY_1,0)) V55
             , SUM(DECODE(A.OPER, 'A0308', QTY_1,0)) V56
             , SUM(DECODE(A.OPER, 'A0310', QTY_1,0)) V57
             , SUM(DECODE(A.OPER, 'A0320', QTY_1,0)) V58
             , SUM(DECODE(A.OPER, 'A0330', QTY_1,0)) V59
             , SUM(DECODE(A.OPER, 'A1280', QTY_1,0)) V60
             , SUM(DECODE(A.OPER, 'A0333', QTY_1,0)) V61
             , SUM(DECODE(A.OPER, 'A0335', QTY_1,0)) V62
             , SUM(DECODE(A.OPER, 'A0337', QTY_1,0)) V63
             , SUM(DECODE(A.OPER, 'A0372', QTY_1,0)) V64
             , SUM(DECODE(A.OPER, 'A0395', QTY_1,0)) V65
             , SUM(DECODE(A.OPER, 'A0397', QTY_1,0)) V66
             , SUM(DECODE(A.OPER, 'A0340', QTY_1,0)) V67
             , SUM(DECODE(A.OPER, 'A0345', QTY_1,0)) V68
             , SUM(DECODE(A.OPER, 'A0350', QTY_1,0)) V69
             , SUM(DECODE(A.OPER, 'A0360', QTY_1,0)) V70
             , SUM(DECODE(A.OPER, 'A0370', QTY_1,0)) V71
             , SUM(DECODE(A.OPER, 'A0375', QTY_1,0)) V72
             , SUM(DECODE(A.OPER, 'A0380', QTY_1,0)) V73
             , SUM(DECODE(A.OPER, 'A0381', QTY_1,0)) V74
             , SUM(DECODE(A.OPER, 'A0382', QTY_1,0)) V75
             , SUM(DECODE(A.OPER, 'A0383', QTY_1,0)) V76
             , SUM(DECODE(A.OPER, 'A0385', QTY_1,0)) V77
             , SUM(DECODE(A.OPER, 'A0391', QTY_1,0)) V78
             , SUM(DECODE(A.OPER, 'A0399', QTY_1,0)) V79
             , SUM(DECODE(A.OPER, 'A0390', QTY_1,0)) V80
             , SUM(DECODE(A.OPER, 'A0400', QTY_1,0)) V81
             , SUM(DECODE(A.OPER, 'A0401', QTY_1,0)) V82
             , SUM(DECODE(A.OPER, 'A0500', QTY_1,0)) V83
             , SUM(DECODE(A.OPER, 'A0530', QTY_1,0)) V84
             , SUM(DECODE(A.OPER, 'A0531', QTY_1,0)) V85
             , SUM(DECODE(A.OPER, 'A0501', QTY_1,0)) V86
             , SUM(DECODE(A.OPER, 'A0540', QTY_1,0)) V87
             , SUM(DECODE(A.OPER, 'A0550', QTY_1,0)) V88
             , SUM(DECODE(A.OPER, 'A0600', QTY_1,0)) V89
             , SUM(DECODE(A.OPER, 'A0620', QTY_1,0)) V90
             , SUM(DECODE(A.OPER, 'A0660', QTY_1,0)) V91
             , SUM(DECODE(A.OPER, 'A0630', QTY_1,0)) V92
             , SUM(DECODE(A.OPER, 'A0650', QTY_1,0)) V93
             , SUM(DECODE(A.OPER, 'A0670', QTY_1,0)) V94
             , SUM(DECODE(A.OPER, 'A0720', QTY_1,0)) V95
             , SUM(DECODE(A.OPER, 'A0700', QTY_1,0)) V96
             , SUM(DECODE(A.OPER, 'A0339', QTY_1,0)) V97
             , SUM(DECODE(A.OPER, 'A0541', QTY_1,0)) V98
             , SUM(DECODE(A.OPER, 'A0551', QTY_1,0)) V99
             , SUM(DECODE(A.OPER, 'A0561', QTY_1,0)) V100
             , SUM(DECODE(A.OPER, 'A0601', QTY_1,0)) V101
             , SUM(DECODE(A.OPER, 'A0710', QTY_1,0)) V102
             , SUM(DECODE(A.OPER, 'A0800', QTY_1,0)) V103
             , SUM(DECODE(A.OPER, 'A0402', QTY_1,0)) V104
             , SUM(DECODE(A.OPER, 'A0502', QTY_1,0)) V105
             , SUM(DECODE(A.OPER, 'A0532', QTY_1,0)) V106
             , SUM(DECODE(A.OPER, 'A0801', QTY_1,0)) V107
             , SUM(DECODE(A.OPER, 'A0542', QTY_1,0)) V108
             , SUM(DECODE(A.OPER, 'A0552', QTY_1,0)) V109
             , SUM(DECODE(A.OPER, 'A0562', QTY_1,0)) V110
             , SUM(DECODE(A.OPER, 'A0602', QTY_1,0)) V111
             , SUM(DECODE(A.OPER, 'A0711', QTY_1,0)) V112
             , SUM(DECODE(A.OPER, 'A0802', QTY_1,0)) V113
             , SUM(DECODE(A.OPER, 'A0403', QTY_1,0)) V114
             , SUM(DECODE(A.OPER, 'A0503', QTY_1,0)) V115
             , SUM(DECODE(A.OPER, 'A0533', QTY_1,0)) V116
             , SUM(DECODE(A.OPER, 'A0543', QTY_1,0)) V117
             , SUM(DECODE(A.OPER, 'A0553', QTY_1,0)) V118
             , SUM(DECODE(A.OPER, 'A0563', QTY_1,0)) V119
             , SUM(DECODE(A.OPER, 'A0603', QTY_1,0)) V120
             , SUM(DECODE(A.OPER, 'A0712', QTY_1,0)) V121
             , SUM(DECODE(A.OPER, 'A0713', QTY_1,0)) V122
             , SUM(DECODE(A.OPER, 'A0803', QTY_1,0)) V123
             , SUM(DECODE(A.OPER, 'A0404', QTY_1,0)) V124
             , SUM(DECODE(A.OPER, 'A0504', QTY_1,0)) V125
             , SUM(DECODE(A.OPER, 'A0534', QTY_1,0)) V126
             , SUM(DECODE(A.OPER, 'A0544', QTY_1,0)) V127
             , SUM(DECODE(A.OPER, 'A0554', QTY_1,0)) V128
             , SUM(DECODE(A.OPER, 'A0564', QTY_1,0)) V129
             , SUM(DECODE(A.OPER, 'A0604', QTY_1,0)) V130
             , SUM(DECODE(A.OPER, 'A0714', QTY_1,0)) V131
             , SUM(DECODE(A.OPER, 'A0804', QTY_1,0)) V132
             , SUM(DECODE(A.OPER, 'A0405', QTY_1,0)) V133
             , SUM(DECODE(A.OPER, 'A0505', QTY_1,0)) V134
             , SUM(DECODE(A.OPER, 'A0535', QTY_1,0)) V135
             , SUM(DECODE(A.OPER, 'A0545', QTY_1,0)) V136
             , SUM(DECODE(A.OPER, 'A0555', QTY_1,0)) V137
             , SUM(DECODE(A.OPER, 'A0565', QTY_1,0)) V138
             , SUM(DECODE(A.OPER, 'A0605', QTY_1,0)) V139
             , SUM(DECODE(A.OPER, 'A0715', QTY_1,0)) V140
             , SUM(DECODE(A.OPER, 'A0805', QTY_1,0)) V141
             , SUM(DECODE(A.OPER, 'A0406', QTY_1,0)) V142
             , SUM(DECODE(A.OPER, 'A0506', QTY_1,0)) V143
             , SUM(DECODE(A.OPER, 'A0536', QTY_1,0)) V144
             , SUM(DECODE(A.OPER, 'A0546', QTY_1,0)) V145
             , SUM(DECODE(A.OPER, 'A0556', QTY_1,0)) V146
             , SUM(DECODE(A.OPER, 'A0566', QTY_1,0)) V147
             , SUM(DECODE(A.OPER, 'A0606', QTY_1,0)) V148
             , SUM(DECODE(A.OPER, 'A0716', QTY_1,0)) V149
             , SUM(DECODE(A.OPER, 'A0806', QTY_1,0)) V150
             , SUM(DECODE(A.OPER, 'A0407', QTY_1,0)) V151
             , SUM(DECODE(A.OPER, 'A0507', QTY_1,0)) V152
             , SUM(DECODE(A.OPER, 'A0537', QTY_1,0)) V153
             , SUM(DECODE(A.OPER, 'A0547', QTY_1,0)) V154
             , SUM(DECODE(A.OPER, 'A0557', QTY_1,0)) V155
             , SUM(DECODE(A.OPER, 'A0567', QTY_1,0)) V156
             , SUM(DECODE(A.OPER, 'A0607', QTY_1,0)) V157
             , SUM(DECODE(A.OPER, 'A0717', QTY_1,0)) V158
             , SUM(DECODE(A.OPER, 'A0807', QTY_1,0)) V159
             , SUM(DECODE(A.OPER, 'A0408', QTY_1,0)) V160
             , SUM(DECODE(A.OPER, 'A0508', QTY_1,0)) V161
             , SUM(DECODE(A.OPER, 'A0538', QTY_1,0)) V162
             , SUM(DECODE(A.OPER, 'A0558', QTY_1,0)) V163
             , SUM(DECODE(A.OPER, 'A0568', QTY_1,0)) V164
             , SUM(DECODE(A.OPER, 'A0608', QTY_1,0)) V165
             , SUM(DECODE(A.OPER, 'A0808', QTY_1,0)) V166
             , SUM(DECODE(A.OPER, 'A0409', QTY_1,0)) V167
             , SUM(DECODE(A.OPER, 'A0509', QTY_1,0)) V168
             , SUM(DECODE(A.OPER, 'A0539', QTY_1,0)) V169
             , SUM(DECODE(A.OPER, 'A0559', QTY_1,0)) V170
             , SUM(DECODE(A.OPER, 'A0569', QTY_1,0)) V171
             , SUM(DECODE(A.OPER, 'A0609', QTY_1,0)) V172
             , SUM(DECODE(A.OPER, 'A0809', QTY_1,0)) V173
             , SUM(DECODE(A.OPER, 'A080A', QTY_1,0)) V174
             , SUM(DECODE(A.OPER, 'A0890', QTY_1,0)) V175
             , SUM(DECODE(A.OPER, 'A0900', QTY_1,0)) V176
             , SUM(DECODE(A.OPER, 'A0910', QTY_1,0)) V177
             , SUM(DECODE(A.OPER, 'A0920', QTY_1,0)) V178
             , SUM(DECODE(A.OPER, 'A0930', QTY_1,0)) V179
             , SUM(DECODE(A.OPER, 'A0935', QTY_1,0)) V180
             , SUM(DECODE(A.OPER, 'A040A', QTY_1,0)) V181
             , SUM(DECODE(A.OPER, 'A0950', QTY_1,0)) V182
             , SUM(DECODE(A.OPER, 'A053A', QTY_1,0)) V183
             , SUM(DECODE(A.OPER, 'A0970', QTY_1,0)) V184
             , SUM(DECODE(A.OPER, 'A0940', QTY_1,0)) V185
             , SUM(DECODE(A.OPER, 'A0980', QTY_1,0)) V186
             , SUM(DECODE(A.OPER, 'A1000', QTY_1,0)) V187
             , SUM(DECODE(A.OPER, 'A055A', QTY_1,0)) V188
             , SUM(DECODE(A.OPER, 'A060A', QTY_1,0)) V189
             , SUM(DECODE(A.OPER, 'A1040', QTY_1,0)) V190
             , SUM(DECODE(A.OPER, 'A1070', QTY_1,0)) V191
             , SUM(DECODE(A.OPER, 'A1020', QTY_1,0)) V192
             , SUM(DECODE(A.OPER, 'A1100', QTY_1,0)) V193
             , SUM(DECODE(A.OPER, 'A1110', QTY_1,0)) V194
             , SUM(DECODE(A.OPER, 'A1120', QTY_1,0)) V195
             , SUM(DECODE(A.OPER, 'A1130', QTY_1,0)) V196
             , SUM(DECODE(A.OPER, 'A1140', QTY_1,0)) V197
             , SUM(DECODE(A.OPER, 'A1150', QTY_1,0)) V198
             , SUM(DECODE(A.OPER, 'A1600', QTY_1,0)) V199
             , SUM(DECODE(A.OPER, 'A1650', QTY_1,0)) V200
             , SUM(DECODE(A.OPER, 'A1170', QTY_1,0)) V201
             , SUM(DECODE(A.OPER, 'A1180', QTY_1,0)) V202
             , SUM(DECODE(A.OPER, 'A1200', QTY_1,0)) V203
             , SUM(DECODE(A.OPER, 'A1230', QTY_1,0)) V204
             , SUM(DECODE(A.OPER, 'A1240', QTY_1,0)) V205
             , SUM(DECODE(A.OPER, 'A1250', QTY_1,0)) V206
             , SUM(DECODE(A.OPER, 'A1260', QTY_1,0)) V207
             , SUM(DECODE(A.OPER, 'A1270', QTY_1,0)) V208
             , SUM(DECODE(A.OPER, 'A1300', QTY_1,0)) V209
             , SUM(DECODE(A.OPER, 'A1350', QTY_1,0)) V210
             , SUM(DECODE(A.OPER, 'A1370', QTY_1,0)) V211
             , SUM(DECODE(A.OPER, 'A1380', QTY_1,0)) V212
             , SUM(DECODE(A.OPER, 'A1050', QTY_1,0)) V213
             , SUM(DECODE(A.OPER, 'A1420', QTY_1,0)) V214
             , SUM(DECODE(A.OPER, 'A1440', QTY_1,0)) V215
             , SUM(DECODE(A.OPER, 'A1450', QTY_1,0)) V216
             , SUM(DECODE(A.OPER, 'A1821', QTY_1,0)) V217
             , SUM(DECODE(A.OPER, 'A1460', QTY_1,0)) V218
             , SUM(DECODE(A.OPER, 'A1470', QTY_1,0)) V219
             , SUM(DECODE(A.OPER, 'A1500', QTY_1,0)) V220
             , SUM(DECODE(A.OPER, 'A1550', QTY_1,0)) V221
             , SUM(DECODE(A.OPER, 'A1610', QTY_1,0)) V222
             , SUM(DECODE(A.OPER, 'A1560', QTY_1,0)) V223
             , SUM(DECODE(A.OPER, 'A1720', QTY_1,0)) V224
             , SUM(DECODE(A.OPER, 'A1730', QTY_1,0)) V225
             , SUM(DECODE(A.OPER, 'A1740', QTY_1,0)) V226
             , SUM(DECODE(A.OPER, 'A1750', QTY_1,0)) V227
             , SUM(DECODE(A.OPER, 'A1755', QTY_1,0)) V228
             , SUM(DECODE(A.OPER, 'A1760', QTY_1,0)) V229
             , SUM(DECODE(A.OPER, 'A1765', QTY_1,0)) V230
             , SUM(DECODE(A.OPER, 'A1766', QTY_1,0)) V231
             , SUM(DECODE(A.OPER, 'A1763', QTY_1,0)) V232
             , SUM(DECODE(A.OPER, 'A1770', QTY_1,0)) V233
             , SUM(DECODE(A.OPER, 'A1780', QTY_1,0)) V234
             , SUM(DECODE(A.OPER, 'A1790', QTY_1,0)) V235
             , SUM(DECODE(A.OPER, 'A1795', QTY_1,0)) V236
             , SUM(DECODE(A.OPER, 'A1860', QTY_1,0)) V237
             , SUM(DECODE(A.OPER, 'A1850', QTY_1,0)) V238
             , SUM(DECODE(A.OPER, 'A1390', QTY_1,0)) V239
             , SUM(DECODE(A.OPER, 'A1800', QTY_1,0)) V240
             , SUM(DECODE(A.OPER, 'A1805', QTY_1,0)) V241
             , SUM(DECODE(A.OPER, 'A1810', QTY_1,0)) V242
             , SUM(DECODE(A.OPER, 'A1811', QTY_1,0)) V243
             , SUM(DECODE(A.OPER, 'A1812', QTY_1,0)) V244
             , SUM(DECODE(A.OPER, 'A1816', QTY_1,0)) V245
             , SUM(DECODE(A.OPER, 'A1820', QTY_1,0)) V246
             , SUM(DECODE(A.OPER, 'A1825', QTY_1,0)) V247
             , SUM(DECODE(A.OPER, 'A1826', QTY_1,0)) V248
             , SUM(DECODE(A.OPER, 'A1920', QTY_1,0)) V249
             , SUM(DECODE(A.OPER, 'A1960', QTY_1,0)) V250
             , SUM(DECODE(A.OPER, 'A1815', QTY_1,0)) V251
             , SUM(DECODE(A.OPER, 'A1830', QTY_1,0)) V252
             , SUM(DECODE(A.OPER, 'A1710', QTY_1,0)) V253
             , SUM(DECODE(A.OPER, 'A1840', QTY_1,0)) V254
             , SUM(DECODE(A.OPER, 'A1900', QTY_1,0)) V255
             , SUM(DECODE(A.OPER, 'A1910', QTY_1,0)) V256
             , SUM(DECODE(A.OPER, 'A1950', QTY_1,0)) V257
             , SUM(DECODE(A.OPER, 'A2000', QTY_1,0)) V258
             , SUM(DECODE(A.OPER, 'A2010', QTY_1,0)) V259
             , SUM(DECODE(A.OPER, 'A2020', QTY_1,0)) V260
             , SUM(DECODE(A.OPER, 'A2025', QTY_1,0)) V261
             , SUM(DECODE(A.OPER, 'A1819', QTY_1,0)) V262
             , SUM(DECODE(A.OPER, 'A2030', QTY_1,0)) V263
             , SUM(DECODE(A.OPER, 'A2040', QTY_1,0)) V264
             , SUM(DECODE(A.OPER, 'A2041', QTY_1,0)) V265
             , SUM(DECODE(A.OPER, 'A2042', QTY_1,0)) V266
             , SUM(DECODE(A.OPER, 'A2070', QTY_1,0)) V267
             , SUM(DECODE(A.OPER, 'A2050', QTY_1,0)) V268
             , SUM(DECODE(A.OPER, 'A2150', QTY_1,0)) V269
             , SUM(DECODE(A.OPER, 'A2200', QTY_1,0)) V270
             , SUM(DECODE(A.OPER, 'A2100', QTY_1,0)) V271
             , SUM(DECODE(A.OPER, 'A2300', QTY_1,0)) V272
             , SUM(DECODE(A.OPER, 'A2350', QTY_1,0)) V273
             , SUM(DECODE(A.OPER, 'AZ009', QTY_1,0)) V274
             , SUM(DECODE(A.OPER, 'AZ010', QTY_1,0)) V275
          FROM RWIPLOTSTS A, CLOTCRDDAT@RPTTOMES B 
         WHERE 1=1 
           AND A.FACTORY = B.FACTORY(+) 
           AND A.MAT_ID = B.MAT_ID(+) 
           AND A.LOT_DEL_FLAG = ' ' 
           AND A.LOT_TYPE = 'W' 
           AND A.MAT_ID LIKE '%' 
           AND A.FACTORY = 'HMVA2' 
           AND A.OPER BETWEEN 'A0000' AND 'AZ010' 
         GROUP BY A.MAT_ID 
       ) WIP 
     , ( 
        SELECT MAT_ID 
             , SUM(S1_FAC_OUT_QTY_1+S2_FAC_OUT_QTY_1+S3_FAC_OUT_QTY_1) AS SHP_QTY  
          FROM RSUMFACMOV
         WHERE CM_KEY_1 = 'HMVA2' 
           AND MAT_ID LIKE '%' 
           AND WORK_DATE = '20200721'
           AND FACTORY NOT IN ('RETURN')
           AND LOT_TYPE = 'W'
         GROUP BY MAT_ID 
       ) SHP 
     , ( 
        SELECT MAT_ID 
             , SUM(DECODE(WORK_DATE, '20200720', NVL(S1_FAC_OUT_QTY_1 + S2_FAC_OUT_QTY_1 + S3_FAC_OUT_QTY_1 + S4_FAC_OUT_QTY_1, 0), 0)) AS ASSY_MONDAY  
             , SUM(NVL(S1_FAC_OUT_QTY_1 + S2_FAC_OUT_QTY_1 + S3_FAC_OUT_QTY_1 + S4_FAC_OUT_QTY_1, 0)) AS ASSY_WEEK 
          FROM RSUMFACMOV 
         WHERE CM_KEY_1 = 'HMVA2' 
           AND LOT_TYPE = 'W'
           AND CM_KEY_2 = 'PROD' 
           AND CM_KEY_3 LIKE 'P%' 
           AND MAT_ID LIKE 'SES%' 
           AND WORK_DATE BETWEEN '20200720' AND '20200726'
         GROUP BY MAT_ID 
       ) SHP1 
     , ( 
        SELECT MAT_ID 
             , SUM(PLAN_QTY) PLAN_W1 
             , SUM(DECODE(PLAN_DAY, '20200720', 0, PLAN_QTY)) AS PLAN_W2 
          FROM ( 
                SELECT * 
                  FROM CWIPPLNDAY 
                 WHERE 1=1 
                   AND FACTORY = 'HMVA2' 
                   AND PLAN_DAY BETWEEN '20200720' AND '20200726'
                   AND IN_OUT_FLAG = 'OUT'
                   AND CLASS = 'ASSY'
               ) B
         GROUP BY MAT_ID 
       ) PLN 
 WHERE 1=1 
   AND MAT.MAT_ID = WIP.MAT_ID(+) 
   AND MAT.MAT_ID = SHP.MAT_ID(+) 
   AND MAT.MAT_ID = SHP1.MAT_ID(+) 
   AND MAT.MAT_ID = PLN.MAT_ID(+) 
   AND MAT.FACTORY = 'HMVA2' 
   AND MAT.MAT_ID LIKE '%' 
 GROUP BY MAT.MAT_GRP_1,  ' ', MAT.MAT_GRP_3,  ' ',  ' ',  ' ',  ' ',  ' ', MAT.MAT_CMF_10,  ' ', MAT.MAT_ID,  ' ',  ' '
HAVING (NVL(SUM(TOTAL),0) + NVL(SUM(SHP_QTY),0)  + NVL(SUM(ASSY_WEEK),0) + NVL(SUM(PLAN_W1),0)) > 0     
 ORDER BY MAT.MAT_GRP_1,  ' ', MAT.MAT_GRP_3,  ' ',  ' ',  ' ',  ' ',  ' ', MAT.MAT_CMF_10,  ' ', MAT.MAT_ID,  ' ',  ' ' 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE) AS This_Week_First_Day 
     , MAX(SYS_DATE) AS This_Week_Last_Day
  FROM MWIPCALDEF
 WHERE 1=1 
   AND CALENDAR_ID = 'SE'
   AND (PLAN_YEAR,PLAN_WEEK) IN (
                                 SELECT PLAN_YEAR,PLAN_WEEK 
                                   FROM MWIPCALDEF 
                                  WHERE 1=1
                                    AND CALENDAR_ID = 'SE'
                                    AND SYS_DATE = '20200721')

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT NVL((SELECT DATA_1 FROM MGCMTBLDAT WHERE TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = MAT.MAT_GRP_1 AND ROWNUM=1), '-') AS CUSTOMER,  ' ',  ' ',  ' ',  ' ', MAT.MAT_GRP_6 AS LDCOUNT,  ' ',  ' ', MAT.MAT_CMF_10 AS PIN_TYPE,  ' ', MAT.MAT_ID AS PRODUCT,  ' ',  ' ' 
     , ROUND(SUM(TOTAL)/1,0) AS TOTAL 
     , ROUND(SUM(V0)/1,0) AS  Val0
     , ROUND(SUM(V1)/1,0) AS  Val1
     , ROUND(SUM(V2)/1,0) AS  Val2
     , ROUND(SUM(V3)/1,0) AS  Val3
     , ROUND(SUM(V4)/1,0) AS  Val4
     , ROUND(SUM(V5)/1,0) AS  Val5
     , ROUND(SUM(V6)/1,0) AS  Val6
     , ROUND(SUM(V7)/1,0) AS  Val7
     , ROUND(SUM(V8)/1,0) AS  Val8
     , ROUND(SUM(V9)/1,0) AS  Val9
     , ROUND(SUM(V10)/1,0) AS  Val10
     , ROUND(SUM(V11)/1,0) AS  Val11
     , ROUND(SUM(V12)/1,0) AS  Val12
     , ROUND(SUM(V13)/1,0) AS  Val13
     , ROUND(SUM(V14)/1,0) AS  Val14
     , ROUND(SUM(V15)/1,0) AS  Val15
     , ROUND(SUM(V16)/1,0) AS  Val16
     , ROUND(SUM(V17)/1,0) AS  Val17
     , ROUND(SUM(V18)/1,0) AS  Val18
     , ROUND(SUM(V19)/1,0) AS  Val19
     , ROUND(SUM(V20)/1,0) AS  Val20
     , ROUND(SUM(V21)/1,0) AS  Val21
     , ROUND(SUM(V22)/1,0) AS  Val22
     , ROUND(SUM(V23)/1,0) AS  Val23
     , ROUND(SUM(V24)/1,0) AS  Val24
     , ROUND(SUM(V25)/1,0) AS  Val25
     , ROUND(SUM(V26)/1,0) AS  Val26
     , ROUND(SUM(V27)/1,0) AS  Val27
     , ROUND(SUM(V28)/1,0) AS  Val28
     , ROUND(SUM(V29)/1,0) AS  Val29
     , ROUND(SUM(V30)/1,0) AS  Val30
     , ROUND(SUM(V31)/1,0) AS  Val31
     , ROUND(SUM(V32)/1,0) AS  Val32
     , ROUND(SUM(V33)/1,0) AS  Val33
     , ROUND(SUM(V34)/1,0) AS  Val34
     , ROUND(SUM(V35)/1,0) AS  Val35
     , ROUND(SUM(V36)/1,0) AS  Val36
     , ROUND(SUM(V37)/1,0) AS  Val37
     , ROUND(SUM(V38)/1,0) AS  Val38
     , ROUND(SUM(V39)/1,0) AS  Val39
     , ROUND(SUM(V40)/1,0) AS  Val40
     , ROUND(SUM(V41)/1,0) AS  Val41
     , ROUND(SUM(V42)/1,0) AS  Val42
     , ROUND(SUM(V43)/1,0) AS  Val43
     , ROUND(SUM(V44)/1,0) AS  Val44
     , ROUND(SUM(V45)/1,0) AS  Val45
     , ROUND(SUM(V46)/1,0) AS  Val46
     , ROUND(SUM(V47)/1,0) AS  Val47
     , ROUND(SUM(V48)/1,0) AS  Val48
     , ROUND(SUM(V49)/1,0) AS  Val49
     , ROUND(SUM(V50)/1,0) AS  Val50
     , ROUND(SUM(V51)/1,0) AS  Val51
     , ROUND(SUM(V52)/1,0) AS  Val52
     , ROUND(SUM(V53)/1,0) AS  Val53
     , ROUND(SUM(V54)/1,0) AS  Val54
     , ROUND(SUM(V55)/1,0) AS  Val55
     , ROUND(SUM(V56)/1,0) AS  Val56
     , ROUND(SUM(V57)/1,0) AS  Val57
     , ROUND(SUM(V58)/1,0) AS  Val58
     , ROUND(SUM(V59)/1,0) AS  Val59
     , ROUND(SUM(V60)/1,0) AS  Val60
     , ROUND(SUM(V61)/1,0) AS  Val61
     , ROUND(SUM(V62)/1,0) AS  Val62
     , ROUND(SUM(V63)/1,0) AS  Val63
     , ROUND(SUM(V64)/1,0) AS  Val64
     , ROUND(SUM(V65)/1,0) AS  Val65
     , ROUND(SUM(V66)/1,0) AS  Val66
     , ROUND(SUM(V67)/1,0) AS  Val67
     , ROUND(SUM(V68)/1,0) AS  Val68
     , ROUND(SUM(V69)/1,0) AS  Val69
     , ROUND(SUM(V70)/1,0) AS  Val70
     , ROUND(SUM(V71)/1,0) AS  Val71
     , ROUND(SUM(V72)/1,0) AS  Val72
     , ROUND(SUM(V73)/1,0) AS  Val73
     , ROUND(SUM(V74)/1,0) AS  Val74
     , ROUND(SUM(V75)/1,0) AS  Val75
     , ROUND(SUM(V76)/1,0) AS  Val76
     , ROUND(SUM(V77)/1,0) AS  Val77
     , ROUND(SUM(V78)/1,0) AS  Val78
     , ROUND(SUM(V79)/1,0) AS  Val79
     , ROUND(SUM(V80)/1,0) AS  Val80
     , ROUND(SUM(V81)/1,0) AS  Val81
     , ROUND(SUM(V82)/1,0) AS  Val82
     , ROUND(SUM(V83)/1,0) AS  Val83
     , ROUND(SUM(V84)/1,0) AS  Val84
     , ROUND(SUM(V85)/1,0) AS  Val85
     , ROUND(SUM(V86)/1,0) AS  Val86
     , ROUND(SUM(V87)/1,0) AS  Val87
     , ROUND(SUM(V88)/1,0) AS  Val88
     , ROUND(SUM(V89)/1,0) AS  Val89
     , ROUND(SUM(V90)/1,0) AS  Val90
     , ROUND(SUM(V91)/1,0) AS  Val91
     , ROUND(SUM(V92)/1,0) AS  Val92
     , ROUND(SUM(V93)/1,0) AS  Val93
     , ROUND(SUM(V94)/1,0) AS  Val94
     , ROUND(SUM(V95)/1,0) AS  Val95
     , ROUND(SUM(V96)/1,0) AS  Val96
     , ROUND(SUM(V97)/1,0) AS  Val97
     , ROUND(SUM(V98)/1,0) AS  Val98
     , ROUND(SUM(V99)/1,0) AS  Val99
     , ROUND(SUM(V100)/1,0) AS  Val100
     , ROUND(SUM(V101)/1,0) AS  Val101
     , ROUND(SUM(V102)/1,0) AS  Val102
     , ROUND(SUM(V103)/1,0) AS  Val103
     , ROUND(SUM(V104)/1,0) AS  Val104
     , ROUND(SUM(V105)/1,0) AS  Val105
     , ROUND(SUM(V106)/1,0) AS  Val106
     , ROUND(SUM(V107)/1,0) AS  Val107
     , ROUND(SUM(V108)/1,0) AS  Val108
     , ROUND(SUM(V109)/1,0) AS  Val109
     , ROUND(SUM(V110)/1,0) AS  Val110
     , ROUND(SUM(V111)/1,0) AS  Val111
     , ROUND(SUM(V112)/1,0) AS  Val112
     , ROUND(SUM(V113)/1,0) AS  Val113
     , ROUND(SUM(V114)/1,0) AS  Val114
     , ROUND(SUM(V115)/1,0) AS  Val115
     , ROUND(SUM(V116)/1,0) AS  Val116
     , ROUND(SUM(V117)/1,0) AS  Val117
     , ROUND(SUM(V118)/1,0) AS  Val118
     , ROUND(SUM(V119)/1,0) AS  Val119
     , ROUND(SUM(V120)/1,0) AS  Val120
     , ROUND(SUM(V121)/1,0) AS  Val121
     , ROUND(SUM(V122)/1,0) AS  Val122
     , ROUND(SUM(V123)/1,0) AS  Val123
     , ROUND(SUM(V124)/1,0) AS  Val124
     , ROUND(SUM(V125)/1,0) AS  Val125
     , ROUND(SUM(V126)/1,0) AS  Val126
     , ROUND(SUM(V127)/1,0) AS  Val127
     , ROUND(SUM(V128)/1,0) AS  Val128
     , ROUND(SUM(V129)/1,0) AS  Val129
     , ROUND(SUM(V130)/1,0) AS  Val130
     , ROUND(SUM(V131)/1,0) AS  Val131
     , ROUND(SUM(V132)/1,0) AS  Val132
     , ROUND(SUM(V133)/1,0) AS  Val133
     , ROUND(SUM(V134)/1,0) AS  Val134
     , ROUND(SUM(V135)/1,0) AS  Val135
     , ROUND(SUM(V136)/1,0) AS  Val136
     , ROUND(SUM(V137)/1,0) AS  Val137
     , ROUND(SUM(V138)/1,0) AS  Val138
     , ROUND(SUM(V139)/1,0) AS  Val139
     , ROUND(SUM(V140)/1,0) AS  Val140
     , ROUND(SUM(V141)/1,0) AS  Val141
     , ROUND(SUM(V142)/1,0) AS  Val142
     , ROUND(SUM(V143)/1,0) AS  Val143
     , ROUND(SUM(V144)/1,0) AS  Val144
     , ROUND(SUM(V145)/1,0) AS  Val145
     , ROUND(SUM(V146)/1,0) AS  Val146
     , ROUND(SUM(V147)/1,0) AS  Val147
     , ROUND(SUM(V148)/1,0) AS  Val148
     , ROUND(SUM(V149)/1,0) AS  Val149
     , ROUND(SUM(V150)/1,0) AS  Val150
     , ROUND(SUM(V151)/1,0) AS  Val151
     , ROUND(SUM(V152)/1,0) AS  Val152
     , ROUND(SUM(V153)/1,0) AS  Val153
     , ROUND(SUM(V154)/1,0) AS  Val154
     , ROUND(SUM(V155)/1,0) AS  Val155
     , ROUND(SUM(V156)/1,0) AS  Val156
     , ROUND(SUM(V157)/1,0) AS  Val157
     , ROUND(SUM(V158)/1,0) AS  Val158
     , ROUND(SUM(V159)/1,0) AS  Val159
     , ROUND(SUM(V160)/1,0) AS  Val160
     , ROUND(SUM(V161)/1,0) AS  Val161
     , ROUND(SUM(V162)/1,0) AS  Val162
     , ROUND(SUM(V163)/1,0) AS  Val163
     , ROUND(SUM(V164)/1,0) AS  Val164
     , ROUND(SUM(V165)/1,0) AS  Val165
     , ROUND(SUM(V166)/1,0) AS  Val166
     , ROUND(SUM(V167)/1,0) AS  Val167
     , ROUND(SUM(V168)/1,0) AS  Val168
     , ROUND(SUM(V169)/1,0) AS  Val169
     , ROUND(SUM(V170)/1,0) AS  Val170
     , ROUND(SUM(V171)/1,0) AS  Val171
     , ROUND(SUM(V172)/1,0) AS  Val172
     , ROUND(SUM(V173)/1,0) AS  Val173
     , ROUND(SUM(V174)/1,0) AS  Val174
     , ROUND(SUM(V175)/1,0) AS  Val175
     , ROUND(SUM(V176)/1,0) AS  Val176
     , ROUND(SUM(V177)/1,0) AS  Val177
     , ROUND(SUM(V178)/1,0) AS  Val178
     , ROUND(SUM(V179)/1,0) AS  Val179
     , ROUND(SUM(V180)/1,0) AS  Val180
     , ROUND(SUM(V181)/1,0) AS  Val181
     , ROUND(SUM(V182)/1,0) AS  Val182
     , ROUND(SUM(V183)/1,0) AS  Val183
     , ROUND(SUM(V184)/1,0) AS  Val184
     , ROUND(SUM(V185)/1,0) AS  Val185
     , ROUND(SUM(V186)/1,0) AS  Val186
     , ROUND(SUM(V187)/1,0) AS  Val187
     , ROUND(SUM(V188)/1,0) AS  Val188
     , ROUND(SUM(V189)/1,0) AS  Val189
     , ROUND(SUM(V190)/1,0) AS  Val190
     , ROUND(SUM(V191)/1,0) AS  Val191
     , ROUND(SUM(V192)/1,0) AS  Val192
     , ROUND(SUM(V193)/1,0) AS  Val193
     , ROUND(SUM(V194)/1,0) AS  Val194
     , ROUND(SUM(V195)/1,0) AS  Val195
     , ROUND(SUM(V196)/1,0) AS  Val196
     , ROUND(SUM(V197)/1,0) AS  Val197
     , ROUND(SUM(V198)/1,0) AS  Val198
     , ROUND(SUM(V199)/1,0) AS  Val199
     , ROUND(SUM(V200)/1,0) AS  Val200
     , ROUND(SUM(V201)/1,0) AS  Val201
     , ROUND(SUM(V202)/1,0) AS  Val202
     , ROUND(SUM(V203)/1,0) AS  Val203
     , ROUND(SUM(V204)/1,0) AS  Val204
     , ROUND(SUM(V205)/1,0) AS  Val205
     , ROUND(SUM(V206)/1,0) AS  Val206
     , ROUND(SUM(V207)/1,0) AS  Val207
     , ROUND(SUM(V208)/1,0) AS  Val208
     , ROUND(SUM(V209)/1,0) AS  Val209
     , ROUND(SUM(V210)/1,0) AS  Val210
     , ROUND(SUM(V211)/1,0) AS  Val211
     , ROUND(SUM(V212)/1,0) AS  Val212
     , ROUND(SUM(V213)/1,0) AS  Val213
     , ROUND(SUM(V214)/1,0) AS  Val214
     , ROUND(SUM(V215)/1,0) AS  Val215
     , ROUND(SUM(V216)/1,0) AS  Val216
     , ROUND(SUM(V217)/1,0) AS  Val217
     , ROUND(SUM(V218)/1,0) AS  Val218
     , ROUND(SUM(V219)/1,0) AS  Val219
     , ROUND(SUM(V220)/1,0) AS  Val220
     , ROUND(SUM(V221)/1,0) AS  Val221
     , ROUND(SUM(V222)/1,0) AS  Val222
     , ROUND(SUM(V223)/1,0) AS  Val223
     , ROUND(SUM(V224)/1,0) AS  Val224
     , ROUND(SUM(V225)/1,0) AS  Val225
     , ROUND(SUM(V226)/1,0) AS  Val226
     , ROUND(SUM(V227)/1,0) AS  Val227
     , ROUND(SUM(V228)/1,0) AS  Val228
     , ROUND(SUM(V229)/1,0) AS  Val229
     , ROUND(SUM(V230)/1,0) AS  Val230
     , ROUND(SUM(V231)/1,0) AS  Val231
     , ROUND(SUM(V232)/1,0) AS  Val232
     , ROUND(SUM(V233)/1,0) AS  Val233
     , ROUND(SUM(V234)/1,0) AS  Val234
     , ROUND(SUM(V235)/1,0) AS  Val235
     , ROUND(SUM(V236)/1,0) AS  Val236
     , ROUND(SUM(V237)/1,0) AS  Val237
     , ROUND(SUM(V238)/1,0) AS  Val238
     , ROUND(SUM(V239)/1,0) AS  Val239
     , ROUND(SUM(V240)/1,0) AS  Val240
     , ROUND(SUM(V241)/1,0) AS  Val241
     , ROUND(SUM(V242)/1,0) AS  Val242
     , ROUND(SUM(V243)/1,0) AS  Val243
     , ROUND(SUM(V244)/1,0) AS  Val244
     , ROUND(SUM(V245)/1,0) AS  Val245
     , ROUND(SUM(V246)/1,0) AS  Val246
     , ROUND(SUM(V247)/1,0) AS  Val247
     , ROUND(SUM(V248)/1,0) AS  Val248
     , ROUND(SUM(V249)/1,0) AS  Val249
     , ROUND(SUM(V250)/1,0) AS  Val250
     , ROUND(SUM(V251)/1,0) AS  Val251
     , ROUND(SUM(V252)/1,0) AS  Val252
     , ROUND(SUM(V253)/1,0) AS  Val253
     , ROUND(SUM(V254)/1,0) AS  Val254
     , ROUND(SUM(V255)/1,0) AS  Val255
     , ROUND(SUM(V256)/1,0) AS  Val256
     , ROUND(SUM(V257)/1,0) AS  Val257
     , ROUND(SUM(V258)/1,0) AS  Val258
     , ROUND(SUM(V259)/1,0) AS  Val259
     , ROUND(SUM(V260)/1,0) AS  Val260
     , ROUND(SUM(V261)/1,0) AS  Val261
     , ROUND(SUM(V262)/1,0) AS  Val262
     , ROUND(SUM(V263)/1,0) AS  Val263
     , ROUND(SUM(V264)/1,0) AS  Val264
     , ROUND(SUM(V265)/1,0) AS  Val265
     , ROUND(SUM(V266)/1,0) AS  Val266
     , ROUND(SUM(V267)/1,0) AS  Val267
     , ROUND(SUM(V268)/1,0) AS  Val268
     , ROUND(SUM(V269)/1,0) AS  Val269
     , ROUND(SUM(V270)/1,0) AS  Val270
     , ROUND(SUM(V271)/1,0) AS  Val271
     , ROUND(SUM(V272)/1,0) AS  Val272
     , ROUND(SUM(V273)/1,0) AS  Val273
     , ROUND(SUM(V274)/1,0) AS  Val274
     , ROUND(SUM(V275)/1,0) AS  Val275
     , TRUNC(SUM(SHP_QTY)/1,0) AS SHP_QTY 
     , ROUND(DECODE(TO_CHAR(TO_DATE('20200721','YYYYMMDD'),'D'), 2, SUM(NVL(PLN.PLAN_W1,0)), 3, SUM(NVL(PLN.PLAN_W1,0)), SUM(NVL(PLN.PLAN_W2,0)) + SUM(NVL(SHP1.ASSY_MONDAY,0)))/1,0) AS PLAN_W1
     , ROUND(SUM(NVL(SHP1.ASSY_WEEK,0))/1,0)
     , ROUND((DECODE(TO_CHAR(TO_DATE('20200721','YYYYMMDD'),'D'), 2, SUM(NVL(PLN.PLAN_W1,0)), 3, SUM(NVL(PLN.PLAN_W1,0)), SUM(NVL(PLN.PLAN_W2,0)) + SUM(NVL(SHP1.ASSY_MONDAY,0)))) - SUM(NVL(SHP1.ASSY_WEEK,0))/1,0) AS LACK_WEEK
  FROM MWIPMATDEF MAT 
     , ( 
        SELECT A.MAT_ID, MAX(B.EMC_1) AS EMC_1 
             , SUM(QTY_1) AS TOTAL 
             , MAX((SELECT ATTR_VALUE FROM MATRNAMSTS WHERE FACTORY = 'HMVA2' AND ATTR_TYPE = 'MAT_ETC' AND ATTR_NAME = DECODE(LOT_CMF_2, 'SE', 'SEC_VERSION', 'HX', 'HX_VERSION') AND ATTR_KEY = A.MAT_ID)) AS VERSION 
             , SUM(DECODE(A.OPER, 'A0000', QTY_1,0)) V0
             , SUM(DECODE(A.OPER, 'A0005', QTY_1,0)) V1
             , SUM(DECODE(A.OPER, 'A000N', QTY_1,0)) V2
             , SUM(DECODE(A.OPER, 'A0010', QTY_1,0)) V3
             , SUM(DECODE(A.OPER, 'A0012', QTY_1,0)) V4
             , SUM(DECODE(A.OPER, 'A0013', QTY_1,0)) V5
             , SUM(DECODE(A.OPER, 'A0015', QTY_1,0)) V6
             , SUM(DECODE(A.OPER, 'A0020', QTY_1,0)) V7
             , SUM(DECODE(A.OPER, 'A0055', QTY_1,0)) V8
             , SUM(DECODE(A.OPER, 'A0023', QTY_1,0)) V9
             , SUM(DECODE(A.OPER, 'A0025', QTY_1,0)) V10
             , SUM(DECODE(A.OPER, 'A0030', QTY_1,0)) V11
             , SUM(DECODE(A.OPER, 'A0190', QTY_1,0)) V12
             , SUM(DECODE(A.OPER, 'A0033', QTY_1,0)) V13
             , SUM(DECODE(A.OPER, 'A0040', QTY_1,0)) V14
             , SUM(DECODE(A.OPER, 'A0041', QTY_1,0)) V15
             , SUM(DECODE(A.OPER, 'A0042', QTY_1,0)) V16
             , SUM(DECODE(A.OPER, 'A0045', QTY_1,0)) V17
             , SUM(DECODE(A.OPER, 'A0050', QTY_1,0)) V18
             , SUM(DECODE(A.OPER, 'A0060', QTY_1,0)) V19
             , SUM(DECODE(A.OPER, 'A0070', QTY_1,0)) V20
             , SUM(DECODE(A.OPER, 'A0080', QTY_1,0)) V21
             , SUM(DECODE(A.OPER, 'A0090', QTY_1,0)) V22
             , SUM(DECODE(A.OPER, 'A0095', QTY_1,0)) V23
             , SUM(DECODE(A.OPER, 'A0110', QTY_1,0)) V24
             , SUM(DECODE(A.OPER, 'A0120', QTY_1,0)) V25
             , SUM(DECODE(A.OPER, 'A0130', QTY_1,0)) V26
             , SUM(DECODE(A.OPER, 'A0140', QTY_1,0)) V27
             , SUM(DECODE(A.OPER, 'A0160', QTY_1,0)) V28
             , SUM(DECODE(A.OPER, 'A0161', QTY_1,0)) V29
             , SUM(DECODE(A.OPER, 'A0165', QTY_1,0)) V30
             , SUM(DECODE(A.OPER, 'A0065', QTY_1,0)) V31
             , SUM(DECODE(A.OPER, 'A0100', QTY_1,0)) V32
             , SUM(DECODE(A.OPER, 'A0150', QTY_1,0)) V33
             , SUM(DECODE(A.OPER, 'A0175', QTY_1,0)) V34
             , SUM(DECODE(A.OPER, 'A0176', QTY_1,0)) V35
             , SUM(DECODE(A.OPER, 'A0170', QTY_1,0)) V36
             , SUM(DECODE(A.OPER, 'A0180', QTY_1,0)) V37
             , SUM(DECODE(A.OPER, 'A0200', QTY_1,0)) V38
             , SUM(DECODE(A.OPER, 'A0201', QTY_1,0)) V39
             , SUM(DECODE(A.OPER, 'A0202', QTY_1,0)) V40
             , SUM(DECODE(A.OPER, 'A0210', QTY_1,0)) V41
             , SUM(DECODE(A.OPER, 'A0215', QTY_1,0)) V42
             , SUM(DECODE(A.OPER, 'A0220', QTY_1,0)) V43
             , SUM(DECODE(A.OPER, 'A0230', QTY_1,0)) V44
             , SUM(DECODE(A.OPER, 'A0300', QTY_1,0)) V45
             , SUM(DECODE(A.OPER, 'A0250', QTY_1,0)) V46
             , SUM(DECODE(A.OPER, 'A0305', QTY_1,0)) V47
             , SUM(DECODE(A.OPER, 'A0240', QTY_1,0)) V48
             , SUM(DECODE(A.OPER, 'A0260', QTY_1,0)) V49
             , SUM(DECODE(A.OPER, 'A0270', QTY_1,0)) V50
             , SUM(DECODE(A.OPER, 'A0290', QTY_1,0)) V51
             , SUM(DECODE(A.OPER, 'A0295', QTY_1,0)) V52
             , SUM(DECODE(A.OPER, 'A0280', QTY_1,0)) V53
             , SUM(DECODE(A.OPER, 'A0306', QTY_1,0)) V54
             , SUM(DECODE(A.OPER, 'A0307', QTY_1,0)) V55
             , SUM(DECODE(A.OPER, 'A0308', QTY_1,0)) V56
             , SUM(DECODE(A.OPER, 'A0310', QTY_1,0)) V57
             , SUM(DECODE(A.OPER, 'A0320', QTY_1,0)) V58
             , SUM(DECODE(A.OPER, 'A0330', QTY_1,0)) V59
             , SUM(DECODE(A.OPER, 'A1280', QTY_1,0)) V60
             , SUM(DECODE(A.OPER, 'A0333', QTY_1,0)) V61
             , SUM(DECODE(A.OPER, 'A0335', QTY_1,0)) V62
             , SUM(DECODE(A.OPER, 'A0337', QTY_1,0)) V63
             , SUM(DECODE(A.OPER, 'A0372', QTY_1,0)) V64
             , SUM(DECODE(A.OPER, 'A0395', QTY_1,0)) V65
             , SUM(DECODE(A.OPER, 'A0397', QTY_1,0)) V66
             , SUM(DECODE(A.OPER, 'A0340', QTY_1,0)) V67
             , SUM(DECODE(A.OPER, 'A0345', QTY_1,0)) V68
             , SUM(DECODE(A.OPER, 'A0350', QTY_1,0)) V69
             , SUM(DECODE(A.OPER, 'A0360', QTY_1,0)) V70
             , SUM(DECODE(A.OPER, 'A0370', QTY_1,0)) V71
             , SUM(DECODE(A.OPER, 'A0375', QTY_1,0)) V72
             , SUM(DECODE(A.OPER, 'A0380', QTY_1,0)) V73
             , SUM(DECODE(A.OPER, 'A0381', QTY_1,0)) V74
             , SUM(DECODE(A.OPER, 'A0382', QTY_1,0)) V75
             , SUM(DECODE(A.OPER, 'A0383', QTY_1,0)) V76
             , SUM(DECODE(A.OPER, 'A0385', QTY_1,0)) V77
             , SUM(DECODE(A.OPER, 'A0391', QTY_1,0)) V78
             , SUM(DECODE(A.OPER, 'A0399', QTY_1,0)) V79
             , SUM(DECODE(A.OPER, 'A0390', QTY_1,0)) V80
             , SUM(DECODE(A.OPER, 'A0400', QTY_1,0)) V81
             , SUM(DECODE(A.OPER, 'A0401', QTY_1,0)) V82
             , SUM(DECODE(A.OPER, 'A0500', QTY_1,0)) V83
             , SUM(DECODE(A.OPER, 'A0530', QTY_1,0)) V84
             , SUM(DECODE(A.OPER, 'A0531', QTY_1,0)) V85
             , SUM(DECODE(A.OPER, 'A0501', QTY_1,0)) V86
             , SUM(DECODE(A.OPER, 'A0540', QTY_1,0)) V87
             , SUM(DECODE(A.OPER, 'A0550', QTY_1,0)) V88
             , SUM(DECODE(A.OPER, 'A0600', QTY_1,0)) V89
             , SUM(DECODE(A.OPER, 'A0620', QTY_1,0)) V90
             , SUM(DECODE(A.OPER, 'A0660', QTY_1,0)) V91
             , SUM(DECODE(A.OPER, 'A0630', QTY_1,0)) V92
             , SUM(DECODE(A.OPER, 'A0650', QTY_1,0)) V93
             , SUM(DECODE(A.OPER, 'A0670', QTY_1,0)) V94
             , SUM(DECODE(A.OPER, 'A0720', QTY_1,0)) V95
             , SUM(DECODE(A.OPER, 'A0700', QTY_1,0)) V96
             , SUM(DECODE(A.OPER, 'A0339', QTY_1,0)) V97
             , SUM(DECODE(A.OPER, 'A0541', QTY_1,0)) V98
             , SUM(DECODE(A.OPER, 'A0551', QTY_1,0)) V99
             , SUM(DECODE(A.OPER, 'A0561', QTY_1,0)) V100
             , SUM(DECODE(A.OPER, 'A0601', QTY_1,0)) V101
             , SUM(DECODE(A.OPER, 'A0710', QTY_1,0)) V102
             , SUM(DECODE(A.OPER, 'A0800', QTY_1,0)) V103
             , SUM(DECODE(A.OPER, 'A0402', QTY_1,0)) V104
             , SUM(DECODE(A.OPER, 'A0502', QTY_1,0)) V105
             , SUM(DECODE(A.OPER, 'A0532', QTY_1,0)) V106
             , SUM(DECODE(A.OPER, 'A0801', QTY_1,0)) V107
             , SUM(DECODE(A.OPER, 'A0542', QTY_1,0)) V108
             , SUM(DECODE(A.OPER, 'A0552', QTY_1,0)) V109
             , SUM(DECODE(A.OPER, 'A0562', QTY_1,0)) V110
             , SUM(DECODE(A.OPER, 'A0602', QTY_1,0)) V111
             , SUM(DECODE(A.OPER, 'A0711', QTY_1,0)) V112
             , SUM(DECODE(A.OPER, 'A0802', QTY_1,0)) V113
             , SUM(DECODE(A.OPER, 'A0403', QTY_1,0)) V114
             , SUM(DECODE(A.OPER, 'A0503', QTY_1,0)) V115
             , SUM(DECODE(A.OPER, 'A0533', QTY_1,0)) V116
             , SUM(DECODE(A.OPER, 'A0543', QTY_1,0)) V117
             , SUM(DECODE(A.OPER, 'A0553', QTY_1,0)) V118
             , SUM(DECODE(A.OPER, 'A0563', QTY_1,0)) V119
             , SUM(DECODE(A.OPER, 'A0603', QTY_1,0)) V120
             , SUM(DECODE(A.OPER, 'A0712', QTY_1,0)) V121
             , SUM(DECODE(A.OPER, 'A0713', QTY_1,0)) V122
             , SUM(DECODE(A.OPER, 'A0803', QTY_1,0)) V123
             , SUM(DECODE(A.OPER, 'A0404', QTY_1,0)) V124
             , SUM(DECODE(A.OPER, 'A0504', QTY_1,0)) V125
             , SUM(DECODE(A.OPER, 'A0534', QTY_1,0)) V126
             , SUM(DECODE(A.OPER, 'A0544', QTY_1,0)) V127
             , SUM(DECODE(A.OPER, 'A0554', QTY_1,0)) V128
             , SUM(DECODE(A.OPER, 'A0564', QTY_1,0)) V129
             , SUM(DECODE(A.OPER, 'A0604', QTY_1,0)) V130
             , SUM(DECODE(A.OPER, 'A0714', QTY_1,0)) V131
             , SUM(DECODE(A.OPER, 'A0804', QTY_1,0)) V132
             , SUM(DECODE(A.OPER, 'A0405', QTY_1,0)) V133
             , SUM(DECODE(A.OPER, 'A0505', QTY_1,0)) V134
             , SUM(DECODE(A.OPER, 'A0535', QTY_1,0)) V135
             , SUM(DECODE(A.OPER, 'A0545', QTY_1,0)) V136
             , SUM(DECODE(A.OPER, 'A0555', QTY_1,0)) V137
             , SUM(DECODE(A.OPER, 'A0565', QTY_1,0)) V138
             , SUM(DECODE(A.OPER, 'A0605', QTY_1,0)) V139
             , SUM(DECODE(A.OPER, 'A0715', QTY_1,0)) V140
             , SUM(DECODE(A.OPER, 'A0805', QTY_1,0)) V141
             , SUM(DECODE(A.OPER, 'A0406', QTY_1,0)) V142
             , SUM(DECODE(A.OPER, 'A0506', QTY_1,0)) V143
             , SUM(DECODE(A.OPER, 'A0536', QTY_1,0)) V144
             , SUM(DECODE(A.OPER, 'A0546', QTY_1,0)) V145
             , SUM(DECODE(A.OPER, 'A0556', QTY_1,0)) V146
             , SUM(DECODE(A.OPER, 'A0566', QTY_1,0)) V147
             , SUM(DECODE(A.OPER, 'A0606', QTY_1,0)) V148
             , SUM(DECODE(A.OPER, 'A0716', QTY_1,0)) V149
             , SUM(DECODE(A.OPER, 'A0806', QTY_1,0)) V150
             , SUM(DECODE(A.OPER, 'A0407', QTY_1,0)) V151
             , SUM(DECODE(A.OPER, 'A0507', QTY_1,0)) V152
             , SUM(DECODE(A.OPER, 'A0537', QTY_1,0)) V153
             , SUM(DECODE(A.OPER, 'A0547', QTY_1,0)) V154
             , SUM(DECODE(A.OPER, 'A0557', QTY_1,0)) V155
             , SUM(DECODE(A.OPER, 'A0567', QTY_1,0)) V156
             , SUM(DECODE(A.OPER, 'A0607', QTY_1,0)) V157
             , SUM(DECODE(A.OPER, 'A0717', QTY_1,0)) V158
             , SUM(DECODE(A.OPER, 'A0807', QTY_1,0)) V159
             , SUM(DECODE(A.OPER, 'A0408', QTY_1,0)) V160
             , SUM(DECODE(A.OPER, 'A0508', QTY_1,0)) V161
             , SUM(DECODE(A.OPER, 'A0538', QTY_1,0)) V162
             , SUM(DECODE(A.OPER, 'A0558', QTY_1,0)) V163
             , SUM(DECODE(A.OPER, 'A0568', QTY_1,0)) V164
             , SUM(DECODE(A.OPER, 'A0608', QTY_1,0)) V165
             , SUM(DECODE(A.OPER, 'A0808', QTY_1,0)) V166
             , SUM(DECODE(A.OPER, 'A0409', QTY_1,0)) V167
             , SUM(DECODE(A.OPER, 'A0509', QTY_1,0)) V168
             , SUM(DECODE(A.OPER, 'A0539', QTY_1,0)) V169
             , SUM(DECODE(A.OPER, 'A0559', QTY_1,0)) V170
             , SUM(DECODE(A.OPER, 'A0569', QTY_1,0)) V171
             , SUM(DECODE(A.OPER, 'A0609', QTY_1,0)) V172
             , SUM(DECODE(A.OPER, 'A0809', QTY_1,0)) V173
             , SUM(DECODE(A.OPER, 'A080A', QTY_1,0)) V174
             , SUM(DECODE(A.OPER, 'A0890', QTY_1,0)) V175
             , SUM(DECODE(A.OPER, 'A0900', QTY_1,0)) V176
             , SUM(DECODE(A.OPER, 'A0910', QTY_1,0)) V177
             , SUM(DECODE(A.OPER, 'A0920', QTY_1,0)) V178
             , SUM(DECODE(A.OPER, 'A0930', QTY_1,0)) V179
             , SUM(DECODE(A.OPER, 'A0935', QTY_1,0)) V180
             , SUM(DECODE(A.OPER, 'A040A', QTY_1,0)) V181
             , SUM(DECODE(A.OPER, 'A0950', QTY_1,0)) V182
             , SUM(DECODE(A.OPER, 'A053A', QTY_1,0)) V183
             , SUM(DECODE(A.OPER, 'A0970', QTY_1,0)) V184
             , SUM(DECODE(A.OPER, 'A0940', QTY_1,0)) V185
             , SUM(DECODE(A.OPER, 'A0980', QTY_1,0)) V186
             , SUM(DECODE(A.OPER, 'A1000', QTY_1,0)) V187
             , SUM(DECODE(A.OPER, 'A055A', QTY_1,0)) V188
             , SUM(DECODE(A.OPER, 'A060A', QTY_1,0)) V189
             , SUM(DECODE(A.OPER, 'A1040', QTY_1,0)) V190
             , SUM(DECODE(A.OPER, 'A1070', QTY_1,0)) V191
             , SUM(DECODE(A.OPER, 'A1020', QTY_1,0)) V192
             , SUM(DECODE(A.OPER, 'A1100', QTY_1,0)) V193
             , SUM(DECODE(A.OPER, 'A1110', QTY_1,0)) V194
             , SUM(DECODE(A.OPER, 'A1120', QTY_1,0)) V195
             , SUM(DECODE(A.OPER, 'A1130', QTY_1,0)) V196
             , SUM(DECODE(A.OPER, 'A1140', QTY_1,0)) V197
             , SUM(DECODE(A.OPER, 'A1150', QTY_1,0)) V198
             , SUM(DECODE(A.OPER, 'A1600', QTY_1,0)) V199
             , SUM(DECODE(A.OPER, 'A1650', QTY_1,0)) V200
             , SUM(DECODE(A.OPER, 'A1170', QTY_1,0)) V201
             , SUM(DECODE(A.OPER, 'A1180', QTY_1,0)) V202
             , SUM(DECODE(A.OPER, 'A1200', QTY_1,0)) V203
             , SUM(DECODE(A.OPER, 'A1230', QTY_1,0)) V204
             , SUM(DECODE(A.OPER, 'A1240', QTY_1,0)) V205
             , SUM(DECODE(A.OPER, 'A1250', QTY_1,0)) V206
             , SUM(DECODE(A.OPER, 'A1260', QTY_1,0)) V207
             , SUM(DECODE(A.OPER, 'A1270', QTY_1,0)) V208
             , SUM(DECODE(A.OPER, 'A1300', QTY_1,0)) V209
             , SUM(DECODE(A.OPER, 'A1350', QTY_1,0)) V210
             , SUM(DECODE(A.OPER, 'A1370', QTY_1,0)) V211
             , SUM(DECODE(A.OPER, 'A1380', QTY_1,0)) V212
             , SUM(DECODE(A.OPER, 'A1050', QTY_1,0)) V213
             , SUM(DECODE(A.OPER, 'A1420', QTY_1,0)) V214
             , SUM(DECODE(A.OPER, 'A1440', QTY_1,0)) V215
             , SUM(DECODE(A.OPER, 'A1450', QTY_1,0)) V216
             , SUM(DECODE(A.OPER, 'A1821', QTY_1,0)) V217
             , SUM(DECODE(A.OPER, 'A1460', QTY_1,0)) V218
             , SUM(DECODE(A.OPER, 'A1470', QTY_1,0)) V219
             , SUM(DECODE(A.OPER, 'A1500', QTY_1,0)) V220
             , SUM(DECODE(A.OPER, 'A1550', QTY_1,0)) V221
             , SUM(DECODE(A.OPER, 'A1610', QTY_1,0)) V222
             , SUM(DECODE(A.OPER, 'A1560', QTY_1,0)) V223
             , SUM(DECODE(A.OPER, 'A1720', QTY_1,0)) V224
             , SUM(DECODE(A.OPER, 'A1730', QTY_1,0)) V225
             , SUM(DECODE(A.OPER, 'A1740', QTY_1,0)) V226
             , SUM(DECODE(A.OPER, 'A1750', QTY_1,0)) V227
             , SUM(DECODE(A.OPER, 'A1755', QTY_1,0)) V228
             , SUM(DECODE(A.OPER, 'A1760', QTY_1,0)) V229
             , SUM(DECODE(A.OPER, 'A1765', QTY_1,0)) V230
             , SUM(DECODE(A.OPER, 'A1766', QTY_1,0)) V231
             , SUM(DECODE(A.OPER, 'A1763', QTY_1,0)) V232
             , SUM(DECODE(A.OPER, 'A1770', QTY_1,0)) V233
             , SUM(DECODE(A.OPER, 'A1780', QTY_1,0)) V234
             , SUM(DECODE(A.OPER, 'A1790', QTY_1,0)) V235
             , SUM(DECODE(A.OPER, 'A1795', QTY_1,0)) V236
             , SUM(DECODE(A.OPER, 'A1860', QTY_1,0)) V237
             , SUM(DECODE(A.OPER, 'A1850', QTY_1,0)) V238
             , SUM(DECODE(A.OPER, 'A1390', QTY_1,0)) V239
             , SUM(DECODE(A.OPER, 'A1800', QTY_1,0)) V240
             , SUM(DECODE(A.OPER, 'A1805', QTY_1,0)) V241
             , SUM(DECODE(A.OPER, 'A1810', QTY_1,0)) V242
             , SUM(DECODE(A.OPER, 'A1811', QTY_1,0)) V243
             , SUM(DECODE(A.OPER, 'A1812', QTY_1,0)) V244
             , SUM(DECODE(A.OPER, 'A1816', QTY_1,0)) V245
             , SUM(DECODE(A.OPER, 'A1820', QTY_1,0)) V246
             , SUM(DECODE(A.OPER, 'A1825', QTY_1,0)) V247
             , SUM(DECODE(A.OPER, 'A1826', QTY_1,0)) V248
             , SUM(DECODE(A.OPER, 'A1920', QTY_1,0)) V249
             , SUM(DECODE(A.OPER, 'A1960', QTY_1,0)) V250
             , SUM(DECODE(A.OPER, 'A1815', QTY_1,0)) V251
             , SUM(DECODE(A.OPER, 'A1830', QTY_1,0)) V252
             , SUM(DECODE(A.OPER, 'A1710', QTY_1,0)) V253
             , SUM(DECODE(A.OPER, 'A1840', QTY_1,0)) V254
             , SUM(DECODE(A.OPER, 'A1900', QTY_1,0)) V255
             , SUM(DECODE(A.OPER, 'A1910', QTY_1,0)) V256
             , SUM(DECODE(A.OPER, 'A1950', QTY_1,0)) V257
             , SUM(DECODE(A.OPER, 'A2000', QTY_1,0)) V258
             , SUM(DECODE(A.OPER, 'A2010', QTY_1,0)) V259
             , SUM(DECODE(A.OPER, 'A2020', QTY_1,0)) V260
             , SUM(DECODE(A.OPER, 'A2025', QTY_1,0)) V261
             , SUM(DECODE(A.OPER, 'A1819', QTY_1,0)) V262
             , SUM(DECODE(A.OPER, 'A2030', QTY_1,0)) V263
             , SUM(DECODE(A.OPER, 'A2040', QTY_1,0)) V264
             , SUM(DECODE(A.OPER, 'A2041', QTY_1,0)) V265
             , SUM(DECODE(A.OPER, 'A2042', QTY_1,0)) V266
             , SUM(DECODE(A.OPER, 'A2070', QTY_1,0)) V267
             , SUM(DECODE(A.OPER, 'A2050', QTY_1,0)) V268
             , SUM(DECODE(A.OPER, 'A2150', QTY_1,0)) V269
             , SUM(DECODE(A.OPER, 'A2200', QTY_1,0)) V270
             , SUM(DECODE(A.OPER, 'A2100', QTY_1,0)) V271
             , SUM(DECODE(A.OPER, 'A2300', QTY_1,0)) V272
             , SUM(DECODE(A.OPER, 'A2350', QTY_1,0)) V273
             , SUM(DECODE(A.OPER, 'AZ009', QTY_1,0)) V274
             , SUM(DECODE(A.OPER, 'AZ010', QTY_1,0)) V275
          FROM RWIPLOTSTS A, CLOTCRDDAT@RPTTOMES B 
         WHERE 1=1 
           AND A.FACTORY = B.FACTORY(+) 
           AND A.MAT_ID = B.MAT_ID(+) 
           AND A.LOT_DEL_FLAG = ' ' 
           AND A.LOT_TYPE = 'W' 
           AND A.MAT_ID LIKE '%' 
           AND A.FACTORY = 'HMVA2' 
           AND A.OPER BETWEEN 'A0000' AND 'AZ010' 
         GROUP BY A.MAT_ID 
       ) WIP 
     , ( 
        SELECT MAT_ID 
             , SUM(S1_FAC_OUT_QTY_1+S2_FAC_OUT_QTY_1+S3_FAC_OUT_QTY_1) AS SHP_QTY  
          FROM RSUMFACMOV
         WHERE CM_KEY_1 = 'HMVA2' 
           AND MAT_ID LIKE '%' 
           AND WORK_DATE = '20200721'
           AND FACTORY NOT IN ('RETURN')
           AND LOT_TYPE = 'W'
         GROUP BY MAT_ID 
       ) SHP 
     , ( 
        SELECT MAT_ID 
             , SUM(DECODE(WORK_DATE, '20200720', NVL(S1_FAC_OUT_QTY_1 + S2_FAC_OUT_QTY_1 + S3_FAC_OUT_QTY_1 + S4_FAC_OUT_QTY_1, 0), 0)) AS ASSY_MONDAY  
             , SUM(NVL(S1_FAC_OUT_QTY_1 + S2_FAC_OUT_QTY_1 + S3_FAC_OUT_QTY_1 + S4_FAC_OUT_QTY_1, 0)) AS ASSY_WEEK 
          FROM RSUMFACMOV 
         WHERE CM_KEY_1 = 'HMVA2' 
           AND LOT_TYPE = 'W'
           AND CM_KEY_2 = 'PROD' 
           AND CM_KEY_3 LIKE 'P%' 
           AND MAT_ID LIKE 'SES%' 
           AND WORK_DATE BETWEEN '20200720' AND '20200726'
         GROUP BY MAT_ID 
       ) SHP1 
     , ( 
        SELECT MAT_ID 
             , SUM(PLAN_QTY) PLAN_W1 
             , SUM(DECODE(PLAN_DAY, '20200720', 0, PLAN_QTY)) AS PLAN_W2 
          FROM ( 
                SELECT * 
                  FROM CWIPPLNDAY 
                 WHERE 1=1 
                   AND FACTORY = 'HMVA2' 
                   AND PLAN_DAY BETWEEN '20200720' AND '20200726'
                   AND IN_OUT_FLAG = 'OUT'
                   AND CLASS = 'ASSY'
               ) B
         GROUP BY MAT_ID 
       ) PLN 
 WHERE 1=1 
   AND MAT.MAT_ID = WIP.MAT_ID(+) 
   AND MAT.MAT_ID = SHP.MAT_ID(+) 
   AND MAT.MAT_ID = SHP1.MAT_ID(+) 
   AND MAT.MAT_ID = PLN.MAT_ID(+) 
   AND MAT.FACTORY = 'HMVA2' 
   AND MAT.MAT_ID LIKE '%' 
 GROUP BY MAT.MAT_GRP_1,  ' ',  ' ',  ' ',  ' ', MAT.MAT_GRP_6,  ' ',  ' ', MAT.MAT_CMF_10,  ' ', MAT.MAT_ID,  ' ',  ' '
HAVING (NVL(SUM(TOTAL),0) + NVL(SUM(SHP_QTY),0)  + NVL(SUM(ASSY_WEEK),0) + NVL(SUM(PLAN_W1),0)) > 0     
 ORDER BY MAT.MAT_GRP_1,  ' ',  ' ',  ' ',  ' ', MAT.MAT_GRP_6,  ' ',  ' ', MAT.MAT_CMF_10,  ' ', MAT.MAT_ID,  ' ',  ' ' 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE) AS This_Week_First_Day 
     , MAX(SYS_DATE) AS This_Week_Last_Day
  FROM MWIPCALDEF
 WHERE 1=1 
   AND CALENDAR_ID = 'SE'
   AND (PLAN_YEAR,PLAN_WEEK) IN (
                                 SELECT PLAN_YEAR,PLAN_WEEK 
                                   FROM MWIPCALDEF 
                                  WHERE 1=1
                                    AND CALENDAR_ID = 'SE'
                                    AND SYS_DATE = '20200721')

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT NVL((SELECT DATA_1 FROM MGCMTBLDAT WHERE TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = MAT.MAT_GRP_1 AND ROWNUM=1), '-') AS CUSTOMER,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT.MAT_CMF_10 AS PIN_TYPE,  ' ', MAT.MAT_ID AS PRODUCT,  ' ',  ' ' 
     , ROUND(SUM(TOTAL)/1,0) AS TOTAL 
     , ROUND(SUM(V0)/1,0) AS  Val0
     , ROUND(SUM(V1)/1,0) AS  Val1
     , ROUND(SUM(V2)/1,0) AS  Val2
     , ROUND(SUM(V3)/1,0) AS  Val3
     , ROUND(SUM(V4)/1,0) AS  Val4
     , ROUND(SUM(V5)/1,0) AS  Val5
     , ROUND(SUM(V6)/1,0) AS  Val6
     , ROUND(SUM(V7)/1,0) AS  Val7
     , ROUND(SUM(V8)/1,0) AS  Val8
     , ROUND(SUM(V9)/1,0) AS  Val9
     , ROUND(SUM(V10)/1,0) AS  Val10
     , ROUND(SUM(V11)/1,0) AS  Val11
     , ROUND(SUM(V12)/1,0) AS  Val12
     , ROUND(SUM(V13)/1,0) AS  Val13
     , ROUND(SUM(V14)/1,0) AS  Val14
     , ROUND(SUM(V15)/1,0) AS  Val15
     , ROUND(SUM(V16)/1,0) AS  Val16
     , ROUND(SUM(V17)/1,0) AS  Val17
     , ROUND(SUM(V18)/1,0) AS  Val18
     , ROUND(SUM(V19)/1,0) AS  Val19
     , ROUND(SUM(V20)/1,0) AS  Val20
     , ROUND(SUM(V21)/1,0) AS  Val21
     , ROUND(SUM(V22)/1,0) AS  Val22
     , ROUND(SUM(V23)/1,0) AS  Val23
     , ROUND(SUM(V24)/1,0) AS  Val24
     , ROUND(SUM(V25)/1,0) AS  Val25
     , ROUND(SUM(V26)/1,0) AS  Val26
     , ROUND(SUM(V27)/1,0) AS  Val27
     , ROUND(SUM(V28)/1,0) AS  Val28
     , ROUND(SUM(V29)/1,0) AS  Val29
     , ROUND(SUM(V30)/1,0) AS  Val30
     , ROUND(SUM(V31)/1,0) AS  Val31
     , ROUND(SUM(V32)/1,0) AS  Val32
     , ROUND(SUM(V33)/1,0) AS  Val33
     , ROUND(SUM(V34)/1,0) AS  Val34
     , ROUND(SUM(V35)/1,0) AS  Val35
     , ROUND(SUM(V36)/1,0) AS  Val36
     , ROUND(SUM(V37)/1,0) AS  Val37
     , ROUND(SUM(V38)/1,0) AS  Val38
     , ROUND(SUM(V39)/1,0) AS  Val39
     , ROUND(SUM(V40)/1,0) AS  Val40
     , ROUND(SUM(V41)/1,0) AS  Val41
     , ROUND(SUM(V42)/1,0) AS  Val42
     , ROUND(SUM(V43)/1,0) AS  Val43
     , ROUND(SUM(V44)/1,0) AS  Val44
     , ROUND(SUM(V45)/1,0) AS  Val45
     , ROUND(SUM(V46)/1,0) AS  Val46
     , ROUND(SUM(V47)/1,0) AS  Val47
     , ROUND(SUM(V48)/1,0) AS  Val48
     , ROUND(SUM(V49)/1,0) AS  Val49
     , ROUND(SUM(V50)/1,0) AS  Val50
     , ROUND(SUM(V51)/1,0) AS  Val51
     , ROUND(SUM(V52)/1,0) AS  Val52
     , ROUND(SUM(V53)/1,0) AS  Val53
     , ROUND(SUM(V54)/1,0) AS  Val54
     , ROUND(SUM(V55)/1,0) AS  Val55
     , ROUND(SUM(V56)/1,0) AS  Val56
     , ROUND(SUM(V57)/1,0) AS  Val57
     , ROUND(SUM(V58)/1,0) AS  Val58
     , ROUND(SUM(V59)/1,0) AS  Val59
     , ROUND(SUM(V60)/1,0) AS  Val60
     , ROUND(SUM(V61)/1,0) AS  Val61
     , ROUND(SUM(V62)/1,0) AS  Val62
     , ROUND(SUM(V63)/1,0) AS  Val63
     , ROUND(SUM(V64)/1,0) AS  Val64
     , ROUND(SUM(V65)/1,0) AS  Val65
     , ROUND(SUM(V66)/1,0) AS  Val66
     , ROUND(SUM(V67)/1,0) AS  Val67
     , ROUND(SUM(V68)/1,0) AS  Val68
     , ROUND(SUM(V69)/1,0) AS  Val69
     , ROUND(SUM(V70)/1,0) AS  Val70
     , ROUND(SUM(V71)/1,0) AS  Val71
     , ROUND(SUM(V72)/1,0) AS  Val72
     , ROUND(SUM(V73)/1,0) AS  Val73
     , ROUND(SUM(V74)/1,0) AS  Val74
     , ROUND(SUM(V75)/1,0) AS  Val75
     , ROUND(SUM(V76)/1,0) AS  Val76
     , ROUND(SUM(V77)/1,0) AS  Val77
     , ROUND(SUM(V78)/1,0) AS  Val78
     , ROUND(SUM(V79)/1,0) AS  Val79
     , ROUND(SUM(V80)/1,0) AS  Val80
     , ROUND(SUM(V81)/1,0) AS  Val81
     , ROUND(SUM(V82)/1,0) AS  Val82
     , ROUND(SUM(V83)/1,0) AS  Val83
     , ROUND(SUM(V84)/1,0) AS  Val84
     , ROUND(SUM(V85)/1,0) AS  Val85
     , ROUND(SUM(V86)/1,0) AS  Val86
     , ROUND(SUM(V87)/1,0) AS  Val87
     , ROUND(SUM(V88)/1,0) AS  Val88
     , ROUND(SUM(V89)/1,0) AS  Val89
     , ROUND(SUM(V90)/1,0) AS  Val90
     , ROUND(SUM(V91)/1,0) AS  Val91
     , ROUND(SUM(V92)/1,0) AS  Val92
     , ROUND(SUM(V93)/1,0) AS  Val93
     , ROUND(SUM(V94)/1,0) AS  Val94
     , ROUND(SUM(V95)/1,0) AS  Val95
     , ROUND(SUM(V96)/1,0) AS  Val96
     , ROUND(SUM(V97)/1,0) AS  Val97
     , ROUND(SUM(V98)/1,0) AS  Val98
     , ROUND(SUM(V99)/1,0) AS  Val99
     , ROUND(SUM(V100)/1,0) AS  Val100
     , ROUND(SUM(V101)/1,0) AS  Val101
     , ROUND(SUM(V102)/1,0) AS  Val102
     , ROUND(SUM(V103)/1,0) AS  Val103
     , ROUND(SUM(V104)/1,0) AS  Val104
     , ROUND(SUM(V105)/1,0) AS  Val105
     , ROUND(SUM(V106)/1,0) AS  Val106
     , ROUND(SUM(V107)/1,0) AS  Val107
     , ROUND(SUM(V108)/1,0) AS  Val108
     , ROUND(SUM(V109)/1,0) AS  Val109
     , ROUND(SUM(V110)/1,0) AS  Val110
     , ROUND(SUM(V111)/1,0) AS  Val111
     , ROUND(SUM(V112)/1,0) AS  Val112
     , ROUND(SUM(V113)/1,0) AS  Val113
     , ROUND(SUM(V114)/1,0) AS  Val114
     , ROUND(SUM(V115)/1,0) AS  Val115
     , ROUND(SUM(V116)/1,0) AS  Val116
     , ROUND(SUM(V117)/1,0) AS  Val117
     , ROUND(SUM(V118)/1,0) AS  Val118
     , ROUND(SUM(V119)/1,0) AS  Val119
     , ROUND(SUM(V120)/1,0) AS  Val120
     , ROUND(SUM(V121)/1,0) AS  Val121
     , ROUND(SUM(V122)/1,0) AS  Val122
     , ROUND(SUM(V123)/1,0) AS  Val123
     , ROUND(SUM(V124)/1,0) AS  Val124
     , ROUND(SUM(V125)/1,0) AS  Val125
     , ROUND(SUM(V126)/1,0) AS  Val126
     , ROUND(SUM(V127)/1,0) AS  Val127
     , ROUND(SUM(V128)/1,0) AS  Val128
     , ROUND(SUM(V129)/1,0) AS  Val129
     , ROUND(SUM(V130)/1,0) AS  Val130
     , ROUND(SUM(V131)/1,0) AS  Val131
     , ROUND(SUM(V132)/1,0) AS  Val132
     , ROUND(SUM(V133)/1,0) AS  Val133
     , ROUND(SUM(V134)/1,0) AS  Val134
     , ROUND(SUM(V135)/1,0) AS  Val135
     , ROUND(SUM(V136)/1,0) AS  Val136
     , ROUND(SUM(V137)/1,0) AS  Val137
     , ROUND(SUM(V138)/1,0) AS  Val138
     , ROUND(SUM(V139)/1,0) AS  Val139
     , ROUND(SUM(V140)/1,0) AS  Val140
     , ROUND(SUM(V141)/1,0) AS  Val141
     , ROUND(SUM(V142)/1,0) AS  Val142
     , ROUND(SUM(V143)/1,0) AS  Val143
     , ROUND(SUM(V144)/1,0) AS  Val144
     , ROUND(SUM(V145)/1,0) AS  Val145
     , ROUND(SUM(V146)/1,0) AS  Val146
     , ROUND(SUM(V147)/1,0) AS  Val147
     , ROUND(SUM(V148)/1,0) AS  Val148
     , ROUND(SUM(V149)/1,0) AS  Val149
     , ROUND(SUM(V150)/1,0) AS  Val150
     , ROUND(SUM(V151)/1,0) AS  Val151
     , ROUND(SUM(V152)/1,0) AS  Val152
     , ROUND(SUM(V153)/1,0) AS  Val153
     , ROUND(SUM(V154)/1,0) AS  Val154
     , ROUND(SUM(V155)/1,0) AS  Val155
     , ROUND(SUM(V156)/1,0) AS  Val156
     , ROUND(SUM(V157)/1,0) AS  Val157
     , ROUND(SUM(V158)/1,0) AS  Val158
     , ROUND(SUM(V159)/1,0) AS  Val159
     , ROUND(SUM(V160)/1,0) AS  Val160
     , ROUND(SUM(V161)/1,0) AS  Val161
     , ROUND(SUM(V162)/1,0) AS  Val162
     , ROUND(SUM(V163)/1,0) AS  Val163
     , ROUND(SUM(V164)/1,0) AS  Val164
     , ROUND(SUM(V165)/1,0) AS  Val165
     , ROUND(SUM(V166)/1,0) AS  Val166
     , ROUND(SUM(V167)/1,0) AS  Val167
     , ROUND(SUM(V168)/1,0) AS  Val168
     , ROUND(SUM(V169)/1,0) AS  Val169
     , ROUND(SUM(V170)/1,0) AS  Val170
     , ROUND(SUM(V171)/1,0) AS  Val171
     , ROUND(SUM(V172)/1,0) AS  Val172
     , ROUND(SUM(V173)/1,0) AS  Val173
     , ROUND(SUM(V174)/1,0) AS  Val174
     , ROUND(SUM(V175)/1,0) AS  Val175
     , ROUND(SUM(V176)/1,0) AS  Val176
     , ROUND(SUM(V177)/1,0) AS  Val177
     , ROUND(SUM(V178)/1,0) AS  Val178
     , ROUND(SUM(V179)/1,0) AS  Val179
     , ROUND(SUM(V180)/1,0) AS  Val180
     , ROUND(SUM(V181)/1,0) AS  Val181
     , ROUND(SUM(V182)/1,0) AS  Val182
     , ROUND(SUM(V183)/1,0) AS  Val183
     , ROUND(SUM(V184)/1,0) AS  Val184
     , ROUND(SUM(V185)/1,0) AS  Val185
     , ROUND(SUM(V186)/1,0) AS  Val186
     , ROUND(SUM(V187)/1,0) AS  Val187
     , ROUND(SUM(V188)/1,0) AS  Val188
     , ROUND(SUM(V189)/1,0) AS  Val189
     , ROUND(SUM(V190)/1,0) AS  Val190
     , ROUND(SUM(V191)/1,0) AS  Val191
     , ROUND(SUM(V192)/1,0) AS  Val192
     , ROUND(SUM(V193)/1,0) AS  Val193
     , ROUND(SUM(V194)/1,0) AS  Val194
     , ROUND(SUM(V195)/1,0) AS  Val195
     , ROUND(SUM(V196)/1,0) AS  Val196
     , ROUND(SUM(V197)/1,0) AS  Val197
     , ROUND(SUM(V198)/1,0) AS  Val198
     , ROUND(SUM(V199)/1,0) AS  Val199
     , ROUND(SUM(V200)/1,0) AS  Val200
     , ROUND(SUM(V201)/1,0) AS  Val201
     , ROUND(SUM(V202)/1,0) AS  Val202
     , ROUND(SUM(V203)/1,0) AS  Val203
     , ROUND(SUM(V204)/1,0) AS  Val204
     , ROUND(SUM(V205)/1,0) AS  Val205
     , ROUND(SUM(V206)/1,0) AS  Val206
     , ROUND(SUM(V207)/1,0) AS  Val207
     , ROUND(SUM(V208)/1,0) AS  Val208
     , ROUND(SUM(V209)/1,0) AS  Val209
     , ROUND(SUM(V210)/1,0) AS  Val210
     , ROUND(SUM(V211)/1,0) AS  Val211
     , ROUND(SUM(V212)/1,0) AS  Val212
     , ROUND(SUM(V213)/1,0) AS  Val213
     , ROUND(SUM(V214)/1,0) AS  Val214
     , ROUND(SUM(V215)/1,0) AS  Val215
     , ROUND(SUM(V216)/1,0) AS  Val216
     , ROUND(SUM(V217)/1,0) AS  Val217
     , ROUND(SUM(V218)/1,0) AS  Val218
     , ROUND(SUM(V219)/1,0) AS  Val219
     , ROUND(SUM(V220)/1,0) AS  Val220
     , ROUND(SUM(V221)/1,0) AS  Val221
     , ROUND(SUM(V222)/1,0) AS  Val222
     , ROUND(SUM(V223)/1,0) AS  Val223
     , ROUND(SUM(V224)/1,0) AS  Val224
     , ROUND(SUM(V225)/1,0) AS  Val225
     , ROUND(SUM(V226)/1,0) AS  Val226
     , ROUND(SUM(V227)/1,0) AS  Val227
     , ROUND(SUM(V228)/1,0) AS  Val228
     , ROUND(SUM(V229)/1,0) AS  Val229
     , ROUND(SUM(V230)/1,0) AS  Val230
     , ROUND(SUM(V231)/1,0) AS  Val231
     , ROUND(SUM(V232)/1,0) AS  Val232
     , ROUND(SUM(V233)/1,0) AS  Val233
     , ROUND(SUM(V234)/1,0) AS  Val234
     , ROUND(SUM(V235)/1,0) AS  Val235
     , ROUND(SUM(V236)/1,0) AS  Val236
     , ROUND(SUM(V237)/1,0) AS  Val237
     , ROUND(SUM(V238)/1,0) AS  Val238
     , ROUND(SUM(V239)/1,0) AS  Val239
     , ROUND(SUM(V240)/1,0) AS  Val240
     , ROUND(SUM(V241)/1,0) AS  Val241
     , ROUND(SUM(V242)/1,0) AS  Val242
     , ROUND(SUM(V243)/1,0) AS  Val243
     , ROUND(SUM(V244)/1,0) AS  Val244
     , ROUND(SUM(V245)/1,0) AS  Val245
     , ROUND(SUM(V246)/1,0) AS  Val246
     , ROUND(SUM(V247)/1,0) AS  Val247
     , ROUND(SUM(V248)/1,0) AS  Val248
     , ROUND(SUM(V249)/1,0) AS  Val249
     , ROUND(SUM(V250)/1,0) AS  Val250
     , ROUND(SUM(V251)/1,0) AS  Val251
     , ROUND(SUM(V252)/1,0) AS  Val252
     , ROUND(SUM(V253)/1,0) AS  Val253
     , ROUND(SUM(V254)/1,0) AS  Val254
     , ROUND(SUM(V255)/1,0) AS  Val255
     , ROUND(SUM(V256)/1,0) AS  Val256
     , ROUND(SUM(V257)/1,0) AS  Val257
     , ROUND(SUM(V258)/1,0) AS  Val258
     , ROUND(SUM(V259)/1,0) AS  Val259
     , ROUND(SUM(V260)/1,0) AS  Val260
     , ROUND(SUM(V261)/1,0) AS  Val261
     , ROUND(SUM(V262)/1,0) AS  Val262
     , ROUND(SUM(V263)/1,0) AS  Val263
     , ROUND(SUM(V264)/1,0) AS  Val264
     , ROUND(SUM(V265)/1,0) AS  Val265
     , ROUND(SUM(V266)/1,0) AS  Val266
     , ROUND(SUM(V267)/1,0) AS  Val267
     , ROUND(SUM(V268)/1,0) AS  Val268
     , ROUND(SUM(V269)/1,0) AS  Val269
     , ROUND(SUM(V270)/1,0) AS  Val270
     , ROUND(SUM(V271)/1,0) AS  Val271
     , ROUND(SUM(V272)/1,0) AS  Val272
     , ROUND(SUM(V273)/1,0) AS  Val273
     , ROUND(SUM(V274)/1,0) AS  Val274
     , ROUND(SUM(V275)/1,0) AS  Val275
     , TRUNC(SUM(SHP_QTY)/1,0) AS SHP_QTY 
     , ROUND(DECODE(TO_CHAR(TO_DATE('20200721','YYYYMMDD'),'D'), 2, SUM(NVL(PLN.PLAN_W1,0)), 3, SUM(NVL(PLN.PLAN_W1,0)), SUM(NVL(PLN.PLAN_W2,0)) + SUM(NVL(SHP1.ASSY_MONDAY,0)))/1,0) AS PLAN_W1
     , ROUND(SUM(NVL(SHP1.ASSY_WEEK,0))/1,0)
     , ROUND((DECODE(TO_CHAR(TO_DATE('20200721','YYYYMMDD'),'D'), 2, SUM(NVL(PLN.PLAN_W1,0)), 3, SUM(NVL(PLN.PLAN_W1,0)), SUM(NVL(PLN.PLAN_W2,0)) + SUM(NVL(SHP1.ASSY_MONDAY,0)))) - SUM(NVL(SHP1.ASSY_WEEK,0))/1,0) AS LACK_WEEK
  FROM MWIPMATDEF MAT 
     , ( 
        SELECT A.MAT_ID, MAX(B.EMC_1) AS EMC_1 
             , SUM(QTY_1) AS TOTAL 
             , MAX((SELECT ATTR_VALUE FROM MATRNAMSTS WHERE FACTORY = 'HMVA2' AND ATTR_TYPE = 'MAT_ETC' AND ATTR_NAME = DECODE(LOT_CMF_2, 'SE', 'SEC_VERSION', 'HX', 'HX_VERSION') AND ATTR_KEY = A.MAT_ID)) AS VERSION 
             , SUM(DECODE(A.OPER, 'A0000', QTY_1,0)) V0
             , SUM(DECODE(A.OPER, 'A0005', QTY_1,0)) V1
             , SUM(DECODE(A.OPER, 'A000N', QTY_1,0)) V2
             , SUM(DECODE(A.OPER, 'A0010', QTY_1,0)) V3
             , SUM(DECODE(A.OPER, 'A0012', QTY_1,0)) V4
             , SUM(DECODE(A.OPER, 'A0013', QTY_1,0)) V5
             , SUM(DECODE(A.OPER, 'A0015', QTY_1,0)) V6
             , SUM(DECODE(A.OPER, 'A0020', QTY_1,0)) V7
             , SUM(DECODE(A.OPER, 'A0055', QTY_1,0)) V8
             , SUM(DECODE(A.OPER, 'A0023', QTY_1,0)) V9
             , SUM(DECODE(A.OPER, 'A0025', QTY_1,0)) V10
             , SUM(DECODE(A.OPER, 'A0030', QTY_1,0)) V11
             , SUM(DECODE(A.OPER, 'A0190', QTY_1,0)) V12
             , SUM(DECODE(A.OPER, 'A0033', QTY_1,0)) V13
             , SUM(DECODE(A.OPER, 'A0040', QTY_1,0)) V14
             , SUM(DECODE(A.OPER, 'A0041', QTY_1,0)) V15
             , SUM(DECODE(A.OPER, 'A0042', QTY_1,0)) V16
             , SUM(DECODE(A.OPER, 'A0045', QTY_1,0)) V17
             , SUM(DECODE(A.OPER, 'A0050', QTY_1,0)) V18
             , SUM(DECODE(A.OPER, 'A0060', QTY_1,0)) V19
             , SUM(DECODE(A.OPER, 'A0070', QTY_1,0)) V20
             , SUM(DECODE(A.OPER, 'A0080', QTY_1,0)) V21
             , SUM(DECODE(A.OPER, 'A0090', QTY_1,0)) V22
             , SUM(DECODE(A.OPER, 'A0095', QTY_1,0)) V23
             , SUM(DECODE(A.OPER, 'A0110', QTY_1,0)) V24
             , SUM(DECODE(A.OPER, 'A0120', QTY_1,0)) V25
             , SUM(DECODE(A.OPER, 'A0130', QTY_1,0)) V26
             , SUM(DECODE(A.OPER, 'A0140', QTY_1,0)) V27
             , SUM(DECODE(A.OPER, 'A0160', QTY_1,0)) V28
             , SUM(DECODE(A.OPER, 'A0161', QTY_1,0)) V29
             , SUM(DECODE(A.OPER, 'A0165', QTY_1,0)) V30
             , SUM(DECODE(A.OPER, 'A0065', QTY_1,0)) V31
             , SUM(DECODE(A.OPER, 'A0100', QTY_1,0)) V32
             , SUM(DECODE(A.OPER, 'A0150', QTY_1,0)) V33
             , SUM(DECODE(A.OPER, 'A0175', QTY_1,0)) V34
             , SUM(DECODE(A.OPER, 'A0176', QTY_1,0)) V35
             , SUM(DECODE(A.OPER, 'A0170', QTY_1,0)) V36
             , SUM(DECODE(A.OPER, 'A0180', QTY_1,0)) V37
             , SUM(DECODE(A.OPER, 'A0200', QTY_1,0)) V38
             , SUM(DECODE(A.OPER, 'A0201', QTY_1,0)) V39
             , SUM(DECODE(A.OPER, 'A0202', QTY_1,0)) V40
             , SUM(DECODE(A.OPER, 'A0210', QTY_1,0)) V41
             , SUM(DECODE(A.OPER, 'A0215', QTY_1,0)) V42
             , SUM(DECODE(A.OPER, 'A0220', QTY_1,0)) V43
             , SUM(DECODE(A.OPER, 'A0230', QTY_1,0)) V44
             , SUM(DECODE(A.OPER, 'A0300', QTY_1,0)) V45
             , SUM(DECODE(A.OPER, 'A0250', QTY_1,0)) V46
             , SUM(DECODE(A.OPER, 'A0305', QTY_1,0)) V47
             , SUM(DECODE(A.OPER, 'A0240', QTY_1,0)) V48
             , SUM(DECODE(A.OPER, 'A0260', QTY_1,0)) V49
             , SUM(DECODE(A.OPER, 'A0270', QTY_1,0)) V50
             , SUM(DECODE(A.OPER, 'A0290', QTY_1,0)) V51
             , SUM(DECODE(A.OPER, 'A0295', QTY_1,0)) V52
             , SUM(DECODE(A.OPER, 'A0280', QTY_1,0)) V53
             , SUM(DECODE(A.OPER, 'A0306', QTY_1,0)) V54
             , SUM(DECODE(A.OPER, 'A0307', QTY_1,0)) V55
             , SUM(DECODE(A.OPER, 'A0308', QTY_1,0)) V56
             , SUM(DECODE(A.OPER, 'A0310', QTY_1,0)) V57
             , SUM(DECODE(A.OPER, 'A0320', QTY_1,0)) V58
             , SUM(DECODE(A.OPER, 'A0330', QTY_1,0)) V59
             , SUM(DECODE(A.OPER, 'A1280', QTY_1,0)) V60
             , SUM(DECODE(A.OPER, 'A0333', QTY_1,0)) V61
             , SUM(DECODE(A.OPER, 'A0335', QTY_1,0)) V62
             , SUM(DECODE(A.OPER, 'A0337', QTY_1,0)) V63
             , SUM(DECODE(A.OPER, 'A0372', QTY_1,0)) V64
             , SUM(DECODE(A.OPER, 'A0395', QTY_1,0)) V65
             , SUM(DECODE(A.OPER, 'A0397', QTY_1,0)) V66
             , SUM(DECODE(A.OPER, 'A0340', QTY_1,0)) V67
             , SUM(DECODE(A.OPER, 'A0345', QTY_1,0)) V68
             , SUM(DECODE(A.OPER, 'A0350', QTY_1,0)) V69
             , SUM(DECODE(A.OPER, 'A0360', QTY_1,0)) V70
             , SUM(DECODE(A.OPER, 'A0370', QTY_1,0)) V71
             , SUM(DECODE(A.OPER, 'A0375', QTY_1,0)) V72
             , SUM(DECODE(A.OPER, 'A0380', QTY_1,0)) V73
             , SUM(DECODE(A.OPER, 'A0381', QTY_1,0)) V74
             , SUM(DECODE(A.OPER, 'A0382', QTY_1,0)) V75
             , SUM(DECODE(A.OPER, 'A0383', QTY_1,0)) V76
             , SUM(DECODE(A.OPER, 'A0385', QTY_1,0)) V77
             , SUM(DECODE(A.OPER, 'A0391', QTY_1,0)) V78
             , SUM(DECODE(A.OPER, 'A0399', QTY_1,0)) V79
             , SUM(DECODE(A.OPER, 'A0390', QTY_1,0)) V80
             , SUM(DECODE(A.OPER, 'A0400', QTY_1,0)) V81
             , SUM(DECODE(A.OPER, 'A0401', QTY_1,0)) V82
             , SUM(DECODE(A.OPER, 'A0500', QTY_1,0)) V83
             , SUM(DECODE(A.OPER, 'A0530', QTY_1,0)) V84
             , SUM(DECODE(A.OPER, 'A0531', QTY_1,0)) V85
             , SUM(DECODE(A.OPER, 'A0501', QTY_1,0)) V86
             , SUM(DECODE(A.OPER, 'A0540', QTY_1,0)) V87
             , SUM(DECODE(A.OPER, 'A0550', QTY_1,0)) V88
             , SUM(DECODE(A.OPER, 'A0600', QTY_1,0)) V89
             , SUM(DECODE(A.OPER, 'A0620', QTY_1,0)) V90
             , SUM(DECODE(A.OPER, 'A0660', QTY_1,0)) V91
             , SUM(DECODE(A.OPER, 'A0630', QTY_1,0)) V92
             , SUM(DECODE(A.OPER, 'A0650', QTY_1,0)) V93
             , SUM(DECODE(A.OPER, 'A0670', QTY_1,0)) V94
             , SUM(DECODE(A.OPER, 'A0720', QTY_1,0)) V95
             , SUM(DECODE(A.OPER, 'A0700', QTY_1,0)) V96
             , SUM(DECODE(A.OPER, 'A0339', QTY_1,0)) V97
             , SUM(DECODE(A.OPER, 'A0541', QTY_1,0)) V98
             , SUM(DECODE(A.OPER, 'A0551', QTY_1,0)) V99
             , SUM(DECODE(A.OPER, 'A0561', QTY_1,0)) V100
             , SUM(DECODE(A.OPER, 'A0601', QTY_1,0)) V101
             , SUM(DECODE(A.OPER, 'A0710', QTY_1,0)) V102
             , SUM(DECODE(A.OPER, 'A0800', QTY_1,0)) V103
             , SUM(DECODE(A.OPER, 'A0402', QTY_1,0)) V104
             , SUM(DECODE(A.OPER, 'A0502', QTY_1,0)) V105
             , SUM(DECODE(A.OPER, 'A0532', QTY_1,0)) V106
             , SUM(DECODE(A.OPER, 'A0801', QTY_1,0)) V107
             , SUM(DECODE(A.OPER, 'A0542', QTY_1,0)) V108
             , SUM(DECODE(A.OPER, 'A0552', QTY_1,0)) V109
             , SUM(DECODE(A.OPER, 'A0562', QTY_1,0)) V110
             , SUM(DECODE(A.OPER, 'A0602', QTY_1,0)) V111
             , SUM(DECODE(A.OPER, 'A0711', QTY_1,0)) V112
             , SUM(DECODE(A.OPER, 'A0802', QTY_1,0)) V113
             , SUM(DECODE(A.OPER, 'A0403', QTY_1,0)) V114
             , SUM(DECODE(A.OPER, 'A0503', QTY_1,0)) V115
             , SUM(DECODE(A.OPER, 'A0533', QTY_1,0)) V116
             , SUM(DECODE(A.OPER, 'A0543', QTY_1,0)) V117
             , SUM(DECODE(A.OPER, 'A0553', QTY_1,0)) V118
             , SUM(DECODE(A.OPER, 'A0563', QTY_1,0)) V119
             , SUM(DECODE(A.OPER, 'A0603', QTY_1,0)) V120
             , SUM(DECODE(A.OPER, 'A0712', QTY_1,0)) V121
             , SUM(DECODE(A.OPER, 'A0713', QTY_1,0)) V122
             , SUM(DECODE(A.OPER, 'A0803', QTY_1,0)) V123
             , SUM(DECODE(A.OPER, 'A0404', QTY_1,0)) V124
             , SUM(DECODE(A.OPER, 'A0504', QTY_1,0)) V125
             , SUM(DECODE(A.OPER, 'A0534', QTY_1,0)) V126
             , SUM(DECODE(A.OPER, 'A0544', QTY_1,0)) V127
             , SUM(DECODE(A.OPER, 'A0554', QTY_1,0)) V128
             , SUM(DECODE(A.OPER, 'A0564', QTY_1,0)) V129
             , SUM(DECODE(A.OPER, 'A0604', QTY_1,0)) V130
             , SUM(DECODE(A.OPER, 'A0714', QTY_1,0)) V131
             , SUM(DECODE(A.OPER, 'A0804', QTY_1,0)) V132
             , SUM(DECODE(A.OPER, 'A0405', QTY_1,0)) V133
             , SUM(DECODE(A.OPER, 'A0505', QTY_1,0)) V134
             , SUM(DECODE(A.OPER, 'A0535', QTY_1,0)) V135
             , SUM(DECODE(A.OPER, 'A0545', QTY_1,0)) V136
             , SUM(DECODE(A.OPER, 'A0555', QTY_1,0)) V137
             , SUM(DECODE(A.OPER, 'A0565', QTY_1,0)) V138
             , SUM(DECODE(A.OPER, 'A0605', QTY_1,0)) V139
             , SUM(DECODE(A.OPER, 'A0715', QTY_1,0)) V140
             , SUM(DECODE(A.OPER, 'A0805', QTY_1,0)) V141
             , SUM(DECODE(A.OPER, 'A0406', QTY_1,0)) V142
             , SUM(DECODE(A.OPER, 'A0506', QTY_1,0)) V143
             , SUM(DECODE(A.OPER, 'A0536', QTY_1,0)) V144
             , SUM(DECODE(A.OPER, 'A0546', QTY_1,0)) V145
             , SUM(DECODE(A.OPER, 'A0556', QTY_1,0)) V146
             , SUM(DECODE(A.OPER, 'A0566', QTY_1,0)) V147
             , SUM(DECODE(A.OPER, 'A0606', QTY_1,0)) V148
             , SUM(DECODE(A.OPER, 'A0716', QTY_1,0)) V149
             , SUM(DECODE(A.OPER, 'A0806', QTY_1,0)) V150
             , SUM(DECODE(A.OPER, 'A0407', QTY_1,0)) V151
             , SUM(DECODE(A.OPER, 'A0507', QTY_1,0)) V152
             , SUM(DECODE(A.OPER, 'A0537', QTY_1,0)) V153
             , SUM(DECODE(A.OPER, 'A0547', QTY_1,0)) V154
             , SUM(DECODE(A.OPER, 'A0557', QTY_1,0)) V155
             , SUM(DECODE(A.OPER, 'A0567', QTY_1,0)) V156
             , SUM(DECODE(A.OPER, 'A0607', QTY_1,0)) V157
             , SUM(DECODE(A.OPER, 'A0717', QTY_1,0)) V158
             , SUM(DECODE(A.OPER, 'A0807', QTY_1,0)) V159
             , SUM(DECODE(A.OPER, 'A0408', QTY_1,0)) V160
             , SUM(DECODE(A.OPER, 'A0508', QTY_1,0)) V161
             , SUM(DECODE(A.OPER, 'A0538', QTY_1,0)) V162
             , SUM(DECODE(A.OPER, 'A0558', QTY_1,0)) V163
             , SUM(DECODE(A.OPER, 'A0568', QTY_1,0)) V164
             , SUM(DECODE(A.OPER, 'A0608', QTY_1,0)) V165
             , SUM(DECODE(A.OPER, 'A0808', QTY_1,0)) V166
             , SUM(DECODE(A.OPER, 'A0409', QTY_1,0)) V167
             , SUM(DECODE(A.OPER, 'A0509', QTY_1,0)) V168
             , SUM(DECODE(A.OPER, 'A0539', QTY_1,0)) V169
             , SUM(DECODE(A.OPER, 'A0559', QTY_1,0)) V170
             , SUM(DECODE(A.OPER, 'A0569', QTY_1,0)) V171
             , SUM(DECODE(A.OPER, 'A0609', QTY_1,0)) V172
             , SUM(DECODE(A.OPER, 'A0809', QTY_1,0)) V173
             , SUM(DECODE(A.OPER, 'A080A', QTY_1,0)) V174
             , SUM(DECODE(A.OPER, 'A0890', QTY_1,0)) V175
             , SUM(DECODE(A.OPER, 'A0900', QTY_1,0)) V176
             , SUM(DECODE(A.OPER, 'A0910', QTY_1,0)) V177
             , SUM(DECODE(A.OPER, 'A0920', QTY_1,0)) V178
             , SUM(DECODE(A.OPER, 'A0930', QTY_1,0)) V179
             , SUM(DECODE(A.OPER, 'A0935', QTY_1,0)) V180
             , SUM(DECODE(A.OPER, 'A040A', QTY_1,0)) V181
             , SUM(DECODE(A.OPER, 'A0950', QTY_1,0)) V182
             , SUM(DECODE(A.OPER, 'A053A', QTY_1,0)) V183
             , SUM(DECODE(A.OPER, 'A0970', QTY_1,0)) V184
             , SUM(DECODE(A.OPER, 'A0940', QTY_1,0)) V185
             , SUM(DECODE(A.OPER, 'A0980', QTY_1,0)) V186
             , SUM(DECODE(A.OPER, 'A1000', QTY_1,0)) V187
             , SUM(DECODE(A.OPER, 'A055A', QTY_1,0)) V188
             , SUM(DECODE(A.OPER, 'A060A', QTY_1,0)) V189
             , SUM(DECODE(A.OPER, 'A1040', QTY_1,0)) V190
             , SUM(DECODE(A.OPER, 'A1070', QTY_1,0)) V191
             , SUM(DECODE(A.OPER, 'A1020', QTY_1,0)) V192
             , SUM(DECODE(A.OPER, 'A1100', QTY_1,0)) V193
             , SUM(DECODE(A.OPER, 'A1110', QTY_1,0)) V194
             , SUM(DECODE(A.OPER, 'A1120', QTY_1,0)) V195
             , SUM(DECODE(A.OPER, 'A1130', QTY_1,0)) V196
             , SUM(DECODE(A.OPER, 'A1140', QTY_1,0)) V197
             , SUM(DECODE(A.OPER, 'A1150', QTY_1,0)) V198
             , SUM(DECODE(A.OPER, 'A1600', QTY_1,0)) V199
             , SUM(DECODE(A.OPER, 'A1650', QTY_1,0)) V200
             , SUM(DECODE(A.OPER, 'A1170', QTY_1,0)) V201
             , SUM(DECODE(A.OPER, 'A1180', QTY_1,0)) V202
             , SUM(DECODE(A.OPER, 'A1200', QTY_1,0)) V203
             , SUM(DECODE(A.OPER, 'A1230', QTY_1,0)) V204
             , SUM(DECODE(A.OPER, 'A1240', QTY_1,0)) V205
             , SUM(DECODE(A.OPER, 'A1250', QTY_1,0)) V206
             , SUM(DECODE(A.OPER, 'A1260', QTY_1,0)) V207
             , SUM(DECODE(A.OPER, 'A1270', QTY_1,0)) V208
             , SUM(DECODE(A.OPER, 'A1300', QTY_1,0)) V209
             , SUM(DECODE(A.OPER, 'A1350', QTY_1,0)) V210
             , SUM(DECODE(A.OPER, 'A1370', QTY_1,0)) V211
             , SUM(DECODE(A.OPER, 'A1380', QTY_1,0)) V212
             , SUM(DECODE(A.OPER, 'A1050', QTY_1,0)) V213
             , SUM(DECODE(A.OPER, 'A1420', QTY_1,0)) V214
             , SUM(DECODE(A.OPER, 'A1440', QTY_1,0)) V215
             , SUM(DECODE(A.OPER, 'A1450', QTY_1,0)) V216
             , SUM(DECODE(A.OPER, 'A1821', QTY_1,0)) V217
             , SUM(DECODE(A.OPER, 'A1460', QTY_1,0)) V218
             , SUM(DECODE(A.OPER, 'A1470', QTY_1,0)) V219
             , SUM(DECODE(A.OPER, 'A1500', QTY_1,0)) V220
             , SUM(DECODE(A.OPER, 'A1550', QTY_1,0)) V221
             , SUM(DECODE(A.OPER, 'A1610', QTY_1,0)) V222
             , SUM(DECODE(A.OPER, 'A1560', QTY_1,0)) V223
             , SUM(DECODE(A.OPER, 'A1720', QTY_1,0)) V224
             , SUM(DECODE(A.OPER, 'A1730', QTY_1,0)) V225
             , SUM(DECODE(A.OPER, 'A1740', QTY_1,0)) V226
             , SUM(DECODE(A.OPER, 'A1750', QTY_1,0)) V227
             , SUM(DECODE(A.OPER, 'A1755', QTY_1,0)) V228
             , SUM(DECODE(A.OPER, 'A1760', QTY_1,0)) V229
             , SUM(DECODE(A.OPER, 'A1765', QTY_1,0)) V230
             , SUM(DECODE(A.OPER, 'A1766', QTY_1,0)) V231
             , SUM(DECODE(A.OPER, 'A1763', QTY_1,0)) V232
             , SUM(DECODE(A.OPER, 'A1770', QTY_1,0)) V233
             , SUM(DECODE(A.OPER, 'A1780', QTY_1,0)) V234
             , SUM(DECODE(A.OPER, 'A1790', QTY_1,0)) V235
             , SUM(DECODE(A.OPER, 'A1795', QTY_1,0)) V236
             , SUM(DECODE(A.OPER, 'A1860', QTY_1,0)) V237
             , SUM(DECODE(A.OPER, 'A1850', QTY_1,0)) V238
             , SUM(DECODE(A.OPER, 'A1390', QTY_1,0)) V239
             , SUM(DECODE(A.OPER, 'A1800', QTY_1,0)) V240
             , SUM(DECODE(A.OPER, 'A1805', QTY_1,0)) V241
             , SUM(DECODE(A.OPER, 'A1810', QTY_1,0)) V242
             , SUM(DECODE(A.OPER, 'A1811', QTY_1,0)) V243
             , SUM(DECODE(A.OPER, 'A1812', QTY_1,0)) V244
             , SUM(DECODE(A.OPER, 'A1816', QTY_1,0)) V245
             , SUM(DECODE(A.OPER, 'A1820', QTY_1,0)) V246
             , SUM(DECODE(A.OPER, 'A1825', QTY_1,0)) V247
             , SUM(DECODE(A.OPER, 'A1826', QTY_1,0)) V248
             , SUM(DECODE(A.OPER, 'A1920', QTY_1,0)) V249
             , SUM(DECODE(A.OPER, 'A1960', QTY_1,0)) V250
             , SUM(DECODE(A.OPER, 'A1815', QTY_1,0)) V251
             , SUM(DECODE(A.OPER, 'A1830', QTY_1,0)) V252
             , SUM(DECODE(A.OPER, 'A1710', QTY_1,0)) V253
             , SUM(DECODE(A.OPER, 'A1840', QTY_1,0)) V254
             , SUM(DECODE(A.OPER, 'A1900', QTY_1,0)) V255
             , SUM(DECODE(A.OPER, 'A1910', QTY_1,0)) V256
             , SUM(DECODE(A.OPER, 'A1950', QTY_1,0)) V257
             , SUM(DECODE(A.OPER, 'A2000', QTY_1,0)) V258
             , SUM(DECODE(A.OPER, 'A2010', QTY_1,0)) V259
             , SUM(DECODE(A.OPER, 'A2020', QTY_1,0)) V260
             , SUM(DECODE(A.OPER, 'A2025', QTY_1,0)) V261
             , SUM(DECODE(A.OPER, 'A1819', QTY_1,0)) V262
             , SUM(DECODE(A.OPER, 'A2030', QTY_1,0)) V263
             , SUM(DECODE(A.OPER, 'A2040', QTY_1,0)) V264
             , SUM(DECODE(A.OPER, 'A2041', QTY_1,0)) V265
             , SUM(DECODE(A.OPER, 'A2042', QTY_1,0)) V266
             , SUM(DECODE(A.OPER, 'A2070', QTY_1,0)) V267
             , SUM(DECODE(A.OPER, 'A2050', QTY_1,0)) V268
             , SUM(DECODE(A.OPER, 'A2150', QTY_1,0)) V269
             , SUM(DECODE(A.OPER, 'A2200', QTY_1,0)) V270
             , SUM(DECODE(A.OPER, 'A2100', QTY_1,0)) V271
             , SUM(DECODE(A.OPER, 'A2300', QTY_1,0)) V272
             , SUM(DECODE(A.OPER, 'A2350', QTY_1,0)) V273
             , SUM(DECODE(A.OPER, 'AZ009', QTY_1,0)) V274
             , SUM(DECODE(A.OPER, 'AZ010', QTY_1,0)) V275
          FROM RWIPLOTSTS A, CLOTCRDDAT@RPTTOMES B 
         WHERE 1=1 
           AND A.FACTORY = B.FACTORY(+) 
           AND A.MAT_ID = B.MAT_ID(+) 
           AND A.LOT_DEL_FLAG = ' ' 
           AND A.LOT_TYPE = 'W' 
           AND A.MAT_ID LIKE '%' 
           AND A.FACTORY = 'HMVA2' 
           AND A.OPER BETWEEN 'A0000' AND 'AZ010' 
         GROUP BY A.MAT_ID 
       ) WIP 
     , ( 
        SELECT MAT_ID 
             , SUM(S1_FAC_OUT_QTY_1+S2_FAC_OUT_QTY_1+S3_FAC_OUT_QTY_1) AS SHP_QTY  
          FROM RSUMFACMOV
         WHERE CM_KEY_1 = 'HMVA2' 
           AND MAT_ID LIKE '%' 
           AND WORK_DATE = '20200721'
           AND FACTORY NOT IN ('RETURN')
           AND LOT_TYPE = 'W'
         GROUP BY MAT_ID 
       ) SHP 
     , ( 
        SELECT MAT_ID 
             , SUM(DECODE(WORK_DATE, '20200720', NVL(S1_FAC_OUT_QTY_1 + S2_FAC_OUT_QTY_1 + S3_FAC_OUT_QTY_1 + S4_FAC_OUT_QTY_1, 0), 0)) AS ASSY_MONDAY  
             , SUM(NVL(S1_FAC_OUT_QTY_1 + S2_FAC_OUT_QTY_1 + S3_FAC_OUT_QTY_1 + S4_FAC_OUT_QTY_1, 0)) AS ASSY_WEEK 
          FROM RSUMFACMOV 
         WHERE CM_KEY_1 = 'HMVA2' 
           AND LOT_TYPE = 'W'
           AND CM_KEY_2 = 'PROD' 
           AND CM_KEY_3 LIKE 'P%' 
           AND MAT_ID LIKE 'SES%' 
           AND WORK_DATE BETWEEN '20200720' AND '20200726'
         GROUP BY MAT_ID 
       ) SHP1 
     , ( 
        SELECT MAT_ID 
             , SUM(PLAN_QTY) PLAN_W1 
             , SUM(DECODE(PLAN_DAY, '20200720', 0, PLAN_QTY)) AS PLAN_W2 
          FROM ( 
                SELECT * 
                  FROM CWIPPLNDAY 
                 WHERE 1=1 
                   AND FACTORY = 'HMVA2' 
                   AND PLAN_DAY BETWEEN '20200720' AND '20200726'
                   AND IN_OUT_FLAG = 'OUT'
                   AND CLASS = 'ASSY'
               ) B
         GROUP BY MAT_ID 
       ) PLN 
 WHERE 1=1 
   AND MAT.MAT_ID = WIP.MAT_ID(+) 
   AND MAT.MAT_ID = SHP.MAT_ID(+) 
   AND MAT.MAT_ID = SHP1.MAT_ID(+) 
   AND MAT.MAT_ID = PLN.MAT_ID(+) 
   AND MAT.FACTORY = 'HMVA2' 
   AND MAT.MAT_ID LIKE '%' 
 GROUP BY MAT.MAT_GRP_1,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT.MAT_CMF_10,  ' ', MAT.MAT_ID,  ' ',  ' '
HAVING (NVL(SUM(TOTAL),0) + NVL(SUM(SHP_QTY),0)  + NVL(SUM(ASSY_WEEK),0) + NVL(SUM(PLAN_W1),0)) > 0     
 ORDER BY MAT.MAT_GRP_1,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT.MAT_CMF_10,  ' ', MAT.MAT_ID,  ' ',  ' ' 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
SELECT MIN(SYS_DATE) AS START_DAY 
     , MAX(SYS_DATE) AS END_DAY 
     , PLAN_YEAR||DECODE(LENGTH(PLAN_WEEK), 1, '0'||PLAN_WEEK, PLAN_WEEK) AS WEEK
  FROM MWIPCALDEF 
 WHERE CALENDAR_ID = 'OTD'
   AND (PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) IN ( 
                                                SELECT WW
                                                  FROM (
                                                        SELECT WW
                                                             , ROW_NUMBER() OVER(ORDER BY WW) AS RNK
                                                          FROM (
                                                                SELECT DISTINCT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW
                                                                  FROM MWIPCALDEF
                                                                 WHERE CALENDAR_ID = 'OTD'
                                                                   AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') >= (
                                                                                                              SELECT MAX(PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) AS WW
                                                                                                                FROM MWIPCALDEF
                                                                                                               WHERE CALENDAR_ID = 'OTD'
                                                                                                                 AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') < (SELECT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW FROM MWIPCALDEF WHERE CALENDAR_ID = 'OTD' AND SYS_DATE = '20200721')
                                                                                                                 AND SYS_DATE >= TO_CHAR(TO_DATE('20200721', 'YYYYMMDD')-14, 'YYYYMMDD')
                                                                                                             )
                                                               ) 
                                                       )
                                                 WHERE RNK <= 7
                                               ) 
 GROUP BY PLAN_YEAR, PLAN_WEEK 
 ORDER BY PLAN_YEAR, PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT LANGUAGE_2 FROM RWEBFUNDEF WHERE FUNC_NAME = 'PRD010420'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE) AS START_DAY 
     , MAX(SYS_DATE) AS END_DAY 
     , PLAN_YEAR||DECODE(LENGTH(PLAN_WEEK), 1, '0'||PLAN_WEEK, PLAN_WEEK) AS WEEK
  FROM MWIPCALDEF 
 WHERE CALENDAR_ID = 'OTD'
   AND (PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) IN ( 
                                                SELECT WW
                                                  FROM (
                                                        SELECT WW
                                                             , ROW_NUMBER() OVER(ORDER BY WW) AS RNK
                                                          FROM (
                                                                SELECT DISTINCT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW
                                                                  FROM MWIPCALDEF
                                                                 WHERE CALENDAR_ID = 'OTD'
                                                                   AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') >= (
                                                                                                              SELECT MAX(PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) AS WW
                                                                                                                FROM MWIPCALDEF
                                                                                                               WHERE CALENDAR_ID = 'OTD'
                                                                                                                 AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') < (SELECT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW FROM MWIPCALDEF WHERE CALENDAR_ID = 'OTD' AND SYS_DATE = '20200721')
                                                                                                                 AND SYS_DATE >= TO_CHAR(TO_DATE('20200721', 'YYYYMMDD')-14, 'YYYYMMDD')
                                                                                                             )
                                                               ) 
                                                       )
                                                 WHERE RNK <= 7
                                               ) 
 GROUP BY PLAN_YEAR, PLAN_WEEK 
 ORDER BY PLAN_YEAR, PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
(SELECT TO_CHAR(LAST_DAY(TO_DATE('202006', 'YYYYMM')),'YYYYMMDD') FROM DUAL)
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
(SELECT TO_CHAR(LAST_DAY(TO_DATE('202007', 'YYYYMM')),'YYYYMMDD') FROM DUAL)
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE-1) 
  FROM MWIPCALDEF 
 WHERE 1=1
   AND CALENDAR_ID='SE'
   AND PLAN_YEAR='2020'
   AND PLAN_WEEK=(
                  SELECT PLAN_WEEK 
                    FROM MWIPCALDEF 
                   WHERE 1=1 
                     AND CALENDAR_ID='SE' 
                     AND SYS_DATE=TO_CHAR(TO_DATE('20200721','YYYYMMDD'),'YYYYMMDD')
                 )

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT CUSTOMER, MAJOR, PKG,  ' ',  ' ',  ' ',  ' ',  ' ',  ' '
     , ROUND(MAX(ORI_PLAN)/1000,0) AS "월계획"  
     , ROUND(MAX(MON_PLAN)/1000,0) AS "월계획Rev"  
     , ROUND((MAX(MON_PLAN) - MAX(ORI_PLAN))/1000,0) AS "월계획 차이"  
     , ROUND(MAX(TARGET_MON)/1000,0), ROUND(MAX(ASSY_MON)/1000,0)  
     , DECODE(MAX(MON_PLAN), 0, 0, ROUND((MAX(ASSY_MON)/MAX(MON_PLAN))*100, 1)) JINDO 
     , ROUND((MAX(MON_PLAN)-MAX(ASSY_MON))/1000,0) AS "잔량"  
     , ROUND(SUM(NVL(OPT_WIP,0))/1000,0) AS OPT_WIP 
     , ROUND(SUM(NVL(DAY01,0))/1000,0) AS DAY01, ROUND(SUM(NVL(DAY02,0))/1000,0) AS DAY02, ROUND(SUM(NVL(DAY03,0))/1000,0) AS DAY03, ROUND(SUM(NVL(DAY04,0))/1000,0) AS DAY04, ROUND(SUM(NVL(DAY05,0))/1000,0) AS DAY05, ROUND(SUM(NVL(DAY06,0))/1000,0) AS DAY06, ROUND(SUM(NVL(DAY07,0))/1000,0) AS DAY07, ROUND(SUM(NVL(DAY08,0))/1000,0) AS DAY08, ROUND(SUM(NVL(DAY09,0))/1000,0) AS DAY09, ROUND(SUM(NVL(DAY10,0))/1000,0) AS DAY10   
     , ROUND(SUM(NVL(DAY11,0))/1000,0) AS DAY11, ROUND(SUM(NVL(DAY12,0))/1000,0) AS DAY12, ROUND(SUM(NVL(DAY13,0))/1000,0) AS DAY13, ROUND(SUM(NVL(DAY14,0))/1000,0) AS DAY14, ROUND(SUM(NVL(DAY15,0))/1000,0) AS DAY15, ROUND(SUM(NVL(DAY16,0))/1000,0) AS DAY16, ROUND(SUM(NVL(DAY17,0))/1000,0) AS DAY17, ROUND(SUM(NVL(DAY18,0))/1000,0) AS DAY18, ROUND(SUM(NVL(DAY19,0))/1000,0) AS DAY19, ROUND(SUM(NVL(DAY20,0))/1000,0) AS DAY20   
     , ROUND(SUM(NVL(DAY21,0))/1000,0) AS DAY21, ROUND(SUM(NVL(DAY22,0))/1000,0) AS DAY22, ROUND(SUM(NVL(DAY23,0))/1000,0) AS DAY23, ROUND(SUM(NVL(DAY24,0))/1000,0) AS DAY24, ROUND(SUM(NVL(DAY25,0))/1000,0) AS DAY25, ROUND(SUM(NVL(DAY26,0))/1000,0) AS DAY26, ROUND(SUM(NVL(DAY27,0))/1000,0) AS DAY27, ROUND(SUM(NVL(DAY28,0))/1000,0) AS DAY28, ROUND(SUM(NVL(DAY29,0))/1000,0) AS DAY29, ROUND(SUM(NVL(DAY30,0))/1000,0) AS DAY30, ROUND(SUM(NVL(DAY31,0))/1000,0) AS DAY31 
     , ROUND(MAX(WIP_DAY),1) AS WIP_DAY 
     , ROUND(SUM(NVL(TAT,0)),2) AS TAT 

  FROM ( 
        SELECT (CASE WHEN MAT.MAT_GRP_1 = 'SE' THEN 'SAMSUNG' WHEN MAT.MAT_GRP_1 = 'HX' THEN 'SK Hynix' ELSE 'Fabless' END) AS CUSTOMER, MAT.MAT_GRP_9 AS MAJOR, MAT.MAT_GRP_10 AS PKG,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT.OPER_GRP AS OPER_GRP
             , SUM(NVL(M.ORI_PLAN,0)) AS ORI_PLAN 
             , SUM(NVL(M.MON_PLAN,0)) AS MON_PLAN 
             , SUM(NVL(M.TARGET_MON,0)) AS TARGET_MON 
             , SUM(NVL(M.ASSY_MON,0)) AS ASSY_MON 
             , SUM(NVL(M.ASSY_MON_SHIP,0)) AS ASSY_MON_SHIP 
             , CASE WHEN SUM(NVL(M.MON_PLAN,0))=0 THEN 0 
                    ELSE CASE WHEN MAT.OPER_GRP='STOCK' THEN DECODE(MIN(T.STOCK_TAT),0, 0, ((SUM(NVL(M.MON_PLAN,0))/31)*MIN(T.STOCK_TAT)*1.1)) 
                              WHEN MAT.OPER_GRP='SAW' THEN DECODE(MIN(T.SAW_TAT),0, 0, ((SUM(NVL(M.MON_PLAN,0))/31)*MIN(T.SAW_TAT)*1.1)) 
                              WHEN MAT.OPER_GRP='DA' THEN DECODE(MIN(T.DA_TAT),0, 0, ((SUM(NVL(M.MON_PLAN,0))/31)*MIN(T.DA_TAT)*1.1)) 
                              WHEN MAT.OPER_GRP='WB' THEN DECODE(MIN(T.WB_TAT),0, 0, ((SUM(NVL(M.MON_PLAN,0))/31)*MIN(T.WB_TAT)*1.1)) 
                              WHEN MAT.OPER_GRP='MOLD' THEN DECODE(MIN(T.MOLD_TAT),0, 0, ((SUM(NVL(M.MON_PLAN,0))/31)*MIN(T.MOLD_TAT)*1.1)) 
                              WHEN MAT.OPER_GRP='FINISH' THEN DECODE(MIN(T.FINISH_TAT),0, 0, ((SUM(NVL(M.MON_PLAN,0))/31)*MIN(T.FINISH_TAT)*1.1)) 
                              WHEN MAT.OPER_GRP='HMK3A' THEN DECODE(MIN(T.HMK3A_TAT),0, 0, ((SUM(NVL(M.MON_PLAN,0))/31)*MIN(T.HMK3A_TAT)*1.1)) 
                              ELSE 0 
                          END 
                END OPT_WIP 
             , SUM(NVL(A.DAY01,0)) AS DAY01, SUM(NVL(A.DAY02,0)) AS DAY02, SUM(NVL(A.DAY03,0)) AS DAY03, SUM(NVL(A.DAY04,0)) AS DAY04, SUM(NVL(A.DAY05,0)) AS DAY05, SUM(NVL(A.DAY06,0)) AS DAY06, SUM(NVL(A.DAY07,0)) AS DAY07, SUM(NVL(A.DAY08,0)) AS DAY08, SUM(NVL(A.DAY09,0)) AS DAY09, SUM(NVL(A.DAY10,0)) AS DAY10 
             , SUM(NVL(A.DAY11,0)) AS DAY11, SUM(NVL(A.DAY12,0)) AS DAY12, SUM(NVL(A.DAY13,0)) AS DAY13, SUM(NVL(A.DAY14,0)) AS DAY14, SUM(NVL(A.DAY15,0)) AS DAY15, SUM(NVL(A.DAY16,0)) AS DAY16, SUM(NVL(A.DAY17,0)) AS DAY17, SUM(NVL(A.DAY18,0)) AS DAY18, SUM(NVL(A.DAY19,0)) AS DAY19, SUM(NVL(A.DAY20,0)) AS DAY20 
             , SUM(NVL(A.DAY21,0)) AS DAY21, SUM(NVL(A.DAY22,0)) AS DAY22, SUM(NVL(A.DAY23,0)) AS DAY23, SUM(NVL(A.DAY24,0)) AS DAY24, SUM(NVL(A.DAY25,0)) AS DAY25, SUM(NVL(A.DAY26,0)) AS DAY26, SUM(NVL(A.DAY27,0)) AS DAY27, SUM(NVL(A.DAY28,0)) AS DAY28, SUM(NVL(A.DAY29,0)) AS DAY29, SUM(NVL(A.DAY30,0)) AS DAY30, SUM(NVL(A.DAY31,0)) AS DAY31 
             , CASE WHEN SUM(NVL(M.MON_PLAN,0))=0 THEN 0 
                    ELSE CASE WHEN MAT.OPER_GRP='STOCK' THEN DECODE(MIN(T.STOCK_TAT),0, 0, SUM(NVL(A.DAY21,0))/((SUM(NVL(M.MON_PLAN,0))/31)*MIN(T.STOCK_TAT)*1.1)) 
                              WHEN MAT.OPER_GRP='SAW' THEN DECODE(MIN(T.SAW_TAT),0, 0, SUM(NVL(A.DAY21,0))/((SUM(NVL(M.MON_PLAN,0))/31)*MIN(T.SAW_TAT)*1.1)) 
                              WHEN MAT.OPER_GRP='DA' THEN DECODE(MIN(T.DA_TAT),0, 0, SUM(NVL(A.DAY21,0))/((SUM(NVL(M.MON_PLAN,0))/31)*MIN(T.DA_TAT)*1.1)) 
                              WHEN MAT.OPER_GRP='WB' THEN DECODE(MIN(T.WB_TAT),0, 0, SUM(NVL(A.DAY21,0))/((SUM(NVL(M.MON_PLAN,0))/31)*MIN(T.WB_TAT)*1.1)) 
                              WHEN MAT.OPER_GRP='MOLD' THEN DECODE(MIN(T.MOLD_TAT),0, 0, SUM(NVL(A.DAY21,0))/((SUM(NVL(M.MON_PLAN,0))/31)*MIN(T.MOLD_TAT)*1.1)) 
                              WHEN MAT.OPER_GRP='FINISH' THEN DECODE(MIN(T.FINISH_TAT),0, 0, SUM(NVL(A.DAY21,0))/((SUM(NVL(M.MON_PLAN,0))/31)*MIN(T.FINISH_TAT)*1.1)) 
                              WHEN MAT.OPER_GRP='HMK3A' THEN DECODE(MIN(T.HMK3A_TAT),0, 0, SUM(NVL(A.DAY21,0))/((SUM(NVL(M.MON_PLAN,0))/31)*MIN(T.HMK3A_TAT)*1.1)) 
                              ELSE 0 
                          END 
                END WIP_DAY 
             , MIN(CASE WHEN MAT.OPER_GRP='STOCK' THEN T.STOCK_TAT 
                        WHEN MAT.OPER_GRP='SAW' THEN T.SAW_TAT 
                        WHEN MAT.OPER_GRP='DA' THEN T.DA_TAT 
                        WHEN MAT.OPER_GRP='WB' THEN T.WB_TAT 
                        WHEN MAT.OPER_GRP='MOLD' THEN T.MOLD_TAT 
                        WHEN MAT.OPER_GRP='FINISH' THEN T.FINISH_TAT 
                        WHEN MAT.OPER_GRP='HMK3A' THEN T.HMK3A_TAT 
                        ELSE 0 
                    END) TAT 
      FROM ( 
            SELECT MAT.*, OPER.OPER_GRP 
              FROM MWIPMATDEF MAT 
                 , ( 
                    SELECT DISTINCT A.FACTORY, DECODE(A.OPER_GRP_1, 'HMK3A', 'HMK3A', 'M/K', 'FINISH', 'V/I', 'FINISH', 'TRIM', 'FINISH', 'S/B/A', 'FINISH', 'TIN', 'FINISH', 'SIG', 'FINISH', 'AVI', 'FINISH', 'MOLD', 'MOLD', 'CURE', 'MOLD', 'W/B', 'WB', 'GATE', 'WB', 'D/A', 'DA', 'SMT', 'DA', 'S/P', 'DA', 'B/G', 'SAW', 'SAW', 'SAW', 'HMK2A', 'STOCK') OPER_GRP 
                      FROM  MWIPOPRDEF A 
                     WHERE 1 = 1 
                       AND FACTORY = 'HMVA2' 
                       AND OPER_GRP_1 IN ('HMK3A', 'M/K', 'V/I', 'TRIM', 'S/B/A', 'TIN', 'SIG', 'AVI', 'MOLD', 'CURE', 'W/B', 'GATE', 'D/A', 'SMT', 'S/P', 'B/G', 'SAW', 'HMK2A') 
                     GROUP BY A.FACTORY, A.OPER_GRP_1 
                    ) OPER 
             WHERE 1 = 1 
               AND OPER_GRP <> ' ' 
               AND MAT.VENDOR_ID <> ' ' 
               AND MAT.FACTORY = 'HMVA2' 
               AND MAT.DELETE_FLAG = ' ' 
           ) MAT 
         , (  
            SELECT MAT_ID, OPER_GRP 
                     , SUM(NVL(DECODE(CUTOFF_DAY,'20200701', QTY),0)) AS DAY01 
                     , SUM(NVL(DECODE(CUTOFF_DAY,'20200702', QTY),0)) AS DAY02 
                     , SUM(NVL(DECODE(CUTOFF_DAY,'20200703', QTY),0)) AS DAY03 
                     , SUM(NVL(DECODE(CUTOFF_DAY,'20200704', QTY),0)) AS DAY04 
                     , SUM(NVL(DECODE(CUTOFF_DAY,'20200705', QTY),0)) AS DAY05 
                     , SUM(NVL(DECODE(CUTOFF_DAY,'20200706', QTY),0)) AS DAY06 
                     , SUM(NVL(DECODE(CUTOFF_DAY,'20200707', QTY),0)) AS DAY07 
                     , SUM(NVL(DECODE(CUTOFF_DAY,'20200708', QTY),0)) AS DAY08 
                     , SUM(NVL(DECODE(CUTOFF_DAY,'20200709', QTY),0)) AS DAY09 
                     , SUM(NVL(DECODE(CUTOFF_DAY,'20200710', QTY),0)) AS DAY10 
                     , SUM(NVL(DECODE(CUTOFF_DAY,'20200711', QTY),0)) AS DAY11 
                     , SUM(NVL(DECODE(CUTOFF_DAY,'20200712', QTY),0)) AS DAY12 
                     , SUM(NVL(DECODE(CUTOFF_DAY,'20200713', QTY),0)) AS DAY13 
                     , SUM(NVL(DECODE(CUTOFF_DAY,'20200714', QTY),0)) AS DAY14 
                     , SUM(NVL(DECODE(CUTOFF_DAY,'20200715', QTY),0)) AS DAY15 
                     , SUM(NVL(DECODE(CUTOFF_DAY,'20200716', QTY),0)) AS DAY16 
                     , SUM(NVL(DECODE(CUTOFF_DAY,'20200717', QTY),0)) AS DAY17 
                     , SUM(NVL(DECODE(CUTOFF_DAY,'20200718', QTY),0)) AS DAY18 
                     , SUM(NVL(DECODE(CUTOFF_DAY,'20200719', QTY),0)) AS DAY19 
                     , SUM(NVL(DECODE(CUTOFF_DAY,'20200720', QTY),0)) AS DAY20 
                     , SUM(NVL(DECODE(CUTOFF_DAY,'20200721', QTY),0)) AS DAY21 
                     , SUM(NVL(DECODE(CUTOFF_DAY,'20200722', QTY),0)) AS DAY22 
                     , SUM(NVL(DECODE(CUTOFF_DAY,'20200723', QTY),0)) AS DAY23 
                     , SUM(NVL(DECODE(CUTOFF_DAY,'20200724', QTY),0)) AS DAY24 
                     , SUM(NVL(DECODE(CUTOFF_DAY,'20200725', QTY),0)) AS DAY25 
                     , SUM(NVL(DECODE(CUTOFF_DAY,'20200726', QTY),0)) AS DAY26 
                     , SUM(NVL(DECODE(CUTOFF_DAY,'20200727', QTY),0)) AS DAY27 
                     , SUM(NVL(DECODE(CUTOFF_DAY,'20200728', QTY),0)) AS DAY28 
                     , SUM(NVL(DECODE(CUTOFF_DAY,'20200729', QTY),0)) AS DAY29 
                     , SUM(NVL(DECODE(CUTOFF_DAY,'20200730', QTY),0)) AS DAY30 
                     , SUM(NVL(DECODE(CUTOFF_DAY,'20200731', QTY),0)) AS DAY31 
                  FROM ( 
                        SELECT MAT_ID, CUTOFF_DAY, OPER_GRP 
                             , SUM(NVL(DECODE(OPER_GRP, 'STOCK', STOCK, 'SAW', SAW, 'DA', DA, 'WB', WB, 'MOLD', MOLD, 'FINISH', FINISH, 'HMK3A', HMK3A),0)) AS QTY 
                          FROM ( 
                                SELECT A.MAT_ID 
                                     , F.CUTOFF_DAY AS CUTOFF_DAY, DECODE(OPER_GRP_1, 'HMK3A', 'HMK3A', 'M/K', 'FINISH', 'V/I', 'FINISH', 'TRIM', 'FINISH', 'S/B/A', 'FINISH', 'TIN', 'FINISH', 'SIG', 'FINISH', 'AVI', 'FINISH', 'MOLD', 'MOLD', 'CURE', 'MOLD', 'W/B', 'WB', 'GATE', 'WB', 'D/A', 'DA', 'SMT', 'DA', 'S/P', 'DA', 'B/G', 'SAW', 'SAW', 'SAW', 'HMK2A', 'STOCK') AS OPER_GRP 
                                     , SUM(NVL(F.V0,0)) AS STOCK  
                                     , SUM(NVL(F.V1,0)+NVL(F.V2,0)) AS SAW
                                     , SUM(NVL(F.V3,0)+NVL(F.V4,0)) AS DA
                                     , SUM(NVL(F.V5,0)+NVL(F.V16,0)) AS WB
                                     , SUM(NVL(F.V6,0)+NVL(F.V7,0)) AS MOLD
                                     , SUM(NVL(F.V8+F.V9+F.V10+F.V11+F.V12+F.V13+F.V14,0)) AS FINISH
                                     , SUM(NVL(F.V15,0)) AS HMK3A  
                                  FROM ( 
                                        SELECT MAT.MAT_GRP_1, MAT.MAT_GRP_2, MAT.MAT_GRP_3, MAT.MAT_GRP_4, MAT.MAT_GRP_5, MAT.MAT_GRP_6, MAT.MAT_GRP_7, MAT.MAT_GRP_8 
                                             , DECODE(MAT.MAT_GRP_1,'SE',MAT.MAT_GRP_9,' ') AS MAT_GRP_9, MAT.MAT_GRP_10, MAT.MAT_CMF_10, MAT.MAT_ID, MAT.MAT_CMF_7, MAT.MAT_CMF_13, MAT.MAT_CMF_11  
                                          FROM MWIPMATDEF MAT 
                                             , ( 
                                                SELECT FACTORY,MAT_ID,PLAN_QTY_ASSY,PLAN_MONTH, RESV_FIELD1 
                                                  FROM ( 
                                                        SELECT FACTORY, MAT_ID, SUM(PLAN_QTY_ASSY) AS PLAN_QTY_ASSY, PLAN_MONTH, SUM(RESV_FIELD1) AS RESV_FIELD1  
                                                          FROM ( 
                                                                SELECT FACTORY, MAT_ID, SUM(PLAN_QTY_ASSY) AS PLAN_QTY_ASSY, PLAN_MONTH, SUM(TO_NUMBER(DECODE(RESV_FIELD1,' ',0,RESV_FIELD1))) AS RESV_FIELD1 
                                                                  FROM CWIPPLNMON 
                                                                 WHERE 1=1 
                                                                   AND FACTORY = 'HMVA2' 
                                                                 GROUP BY FACTORY, MAT_ID, PLAN_MONTH 
                                                               ) 
                                                         GROUP BY FACTORY, MAT_ID,PLAN_MONTH 
                                                       ) 
                                               ) PLAN 
                                         WHERE 1 = 1 
                                           AND MAT.FACTORY =PLAN.FACTORY(+) 
                                           AND MAT.MAT_ID = PLAN.MAT_ID(+) 
                                           AND MAT.FACTORY = 'HMVA2' 
                                           AND PLAN.PLAN_MONTH(+) = '202007' 
                                           AND MAT.MAT_TYPE= 'FG' 
                                           AND MAT.DELETE_FLAG <> 'Y' 
                                         GROUP BY MAT.MAT_GRP_1, MAT.MAT_GRP_2, MAT.MAT_GRP_3, MAT.MAT_GRP_4, MAT.MAT_GRP_5, MAT.MAT_GRP_6, MAT.MAT_GRP_7, MAT.MAT_GRP_8, MAT.MAT_GRP_9, MAT.MAT_GRP_10, MAT.MAT_CMF_10, MAT.MAT_ID, MAT.MAT_CMF_7, MAT.MAT_CMF_13, MAT.MAT_CMF_11
                                       ) A  
                                       
                                     , ( 
                                        SELECT MAT_ID, OPER_GRP_1, CUTOFF_DAY 
                                             , ROUND(SUM(DECODE(OPER_GRP_1, 'HMK2A', QTY, 0))) AS V0 
                                             , ROUND(SUM(DECODE(OPER_GRP_1, 'B/G', QTY, 0))) AS V1 
                                             , ROUND(SUM(DECODE(OPER_GRP_1, 'SAW', QTY, 0))) AS V2 
                                             , ROUND(SUM(DECODE(OPER_GRP_1, 'S/P', QTY, 0))) AS V3 
                                             , ROUND(SUM(DECODE(OPER_GRP_1, 'D/A', QTY, 0))) AS V4 
                                             , ROUND(SUM(DECODE(OPER_GRP_1, 'W/B', QTY, 0))) AS V5 
                                             , ROUND(SUM(DECODE(OPER_GRP_1, 'MOLD', QTY, 0))) AS V6 
                                             , ROUND(SUM(DECODE(OPER_GRP_1, 'CURE', QTY, 0))) AS V7 
                                             , ROUND(SUM(DECODE(OPER_GRP_1, 'M/K', QTY, 0))) AS V8 
                                             , ROUND(SUM(DECODE(OPER_GRP_1, 'TRIM', QTY, 0))) AS V9 
                                             , ROUND(SUM(DECODE(OPER_GRP_1, 'TIN', QTY, 0))) AS V10
                                             , ROUND(SUM(DECODE(OPER_GRP_1, 'S/B/A', QTY, 0))) AS V11 
                                             , ROUND(SUM(DECODE(OPER_GRP_1, 'SIG', QTY, 0))) AS V12 
                                             , ROUND(SUM(DECODE(OPER_GRP_1, 'AVI', QTY, 0))) AS V13 
                                             , ROUND(SUM(DECODE(OPER_GRP_1, 'V/I', QTY, 0))) AS V14 
                                             , ROUND(SUM(DECODE(OPER_GRP_1, 'HMK3A', QTY, 0))) AS V15 
                                             , ROUND(SUM(DECODE(OPER_GRP_1, 'GATE', QTY, 0))) AS V16 
                                          FROM (  
                                                SELECT MAT_ID, OPER_GRP_1, SUBSTR(CUTOFF_DT, 1, 8) AS CUTOFF_DAY 
                                                     , SUM(CASE WHEN OPER <= 'A0395' THEN QTY_1 / NVL(COMP_CNT,1) 
                                                                ELSE QTY_1 
                                                           END) QTY 
                                                  FROM (
                                                        SELECT A.CUTOFF_DT, A.FACTORY, A.MAT_ID, B.OPER_GRP_1, B.OPER 
                                                             , CASE WHEN MAT_GRP_3 IN ('COB', 'BGN') THEN A.QTY_1 / C.NET_DIE ELSE A.QTY_1 END AS QTY_1 
                                                             , C.COMP_CNT 
                                                          FROM (
                                                                SELECT '2020072122' AS CUTOFF_DT, A.*, 0 AS REJECT_QTY, 0 AS CV_QTY 
                                                                  FROM RWIPLOTSTS A 
                                                                 UNION ALL 
                                                                SELECT * 
                                                                  FROM RWIPLOTSTS_BOH B 
                                                                 WHERE CUTOFF_DT IN ('2020070122','2020070222','2020070322','2020070422','2020070522','2020070622','2020070722','2020070822','2020070922','2020071022','2020071122','2020071222','2020071322','2020071422','2020071522','2020071622','2020071722','2020071822','2020071922','2020072022') 
                                                               ) A 
                                                               , MWIPOPRDEF B 
                                                               , VWIPMATDEF C 
                                                           WHERE 1 = 1 
                                                             AND A.FACTORY = B.FACTORY 
                                                             AND A.FACTORY = C.FACTORY 
                                                             AND A.OPER = B.OPER 
                                                             AND A.MAT_ID = C.MAT_ID 
                                                             AND A.FACTORY = 'HMVA2' 
                                                             AND A.MAT_VER = 1 
                                                             AND A.LOT_DEL_FLAG = ' ' 
                                                             AND A.LOT_TYPE = 'W' 
                                                             AND A.LOT_CMF_5 LIKE 'P%'
                                                             AND C.DELETE_FLAG <> 'Y' 
                                                             AND C.MAT_GRP_2 <> '-'  
                                                             AND REGEXP_LIKE(C.MAT_GRP_5, 'Middle*|Merge|1st|-') 
                                                       ) 
                                                 GROUP BY MAT_ID, OPER_GRP_1, SUBSTR(CUTOFF_DT, 1, 8)   
                                               )  
                                         GROUP BY MAT_ID ,OPER_GRP_1, CUTOFF_DAY  
                                       ) F 
                                 WHERE 1 = 1 
                                   AND A.MAT_ID = F.MAT_ID(+)
                                   AND A.MAT_ID LIKE '%' 
                                 GROUP BY A.MAT_ID ,F.CUTOFF_DAY, DECODE(OPER_GRP_1, 'HMK3A', 'HMK3A', 'M/K', 'FINISH', 'V/I', 'FINISH', 'TRIM', 'FINISH', 'S/B/A', 'FINISH', 'TIN', 'FINISH', 'SIG', 'FINISH', 'AVI', 'FINISH', 'MOLD', 'MOLD', 'CURE', 'MOLD', 'W/B', 'WB', 'GATE', 'WB', 'D/A', 'DA', 'SMT', 'DA', 'S/P', 'DA', 'B/G', 'SAW', 'SAW', 'SAW', 'HMK2A', 'STOCK')
                                HAVING (
                                        NVL(SUM(F.V0+F.V1+F.V2+F.V3+F.V4+F.V5+F.V6+F.V7+F.V8+F.V9+F.V10+F.V11+F.V12+F.V13+F.V14+F.V15+F.V16), 0)  
                                       ) <> 0
                               ) 
                         GROUP BY MAT_ID, CUTOFF_DAY, OPER_GRP 
                       ) 
                 GROUP BY MAT_ID, OPER_GRP 
               ) A 
             , ( 
                SELECT A.MAT_ID 
                     , SUM(NVL(A.MON_PLAN,0)) AS MON_PLAN 
                     , SUM(NVL(A.ORI_PLAN,0)) AS ORI_PLAN 
                     , ROUND(((SUM(NVL(A.MON_PLAN,0)) * 67.7) / 100),0) AS TARGET_MON 
                     , SUM(NVL(A.ASSY_MON,0)) AS ASSY_MON 
                     , SUM(NVL(A.ASSY_MON_SHIP,0)) AS ASSY_MON_SHIP 
                     , SUM(NVL(A.ASSY_MON,0)) - ROUND(((SUM(NVL(A.MON_PLAN,0)) * 67.7) / 100),1) AS DEF   
                     , ROUND(((SUM(NVL(A.MON_PLAN,0)) - SUM(NVL(A.ASSY_MON,0))) /11), 1) AS TARGET_DAY 
                  FROM ( 
                        SELECT MAT.MAT_ID 
                             , CASE WHEN MAT.MAT_GRP_3 IN ('COB') THEN ROUND(SUM(PLAN.RESV_FIELD1)/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0)
                                    ELSE SUM(PLAN.RESV_FIELD1)
                                END MON_PLAN
                             , CASE WHEN MAT.MAT_GRP_3 IN ('COB') THEN ROUND(SUM(PLAN.PLAN_QTY_ASSY)/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0)
                                    ELSE SUM(PLAN.PLAN_QTY_ASSY)
                                END ORI_PLAN
                             , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN ROUND(SUM(MON_AO.ASSY_MON)/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0)
                                    ELSE SUM(MON_AO.ASSY_MON)
                                END ASSY_MON
                             , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN ROUND(SUM(MON_AO_SHIP.ASSY_MON)/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0)
                                    ELSE SUM(MON_AO_SHIP.ASSY_MON)
                                END ASSY_MON_SHIP
                          FROM MWIPMATDEF MAT 
                             , ( 
                                SELECT FACTORY,MAT_ID,PLAN_QTY_ASSY,PLAN_MONTH, RESV_FIELD1 
                                  FROM ( 
                                        SELECT FACTORY, MAT_ID, SUM(PLAN_QTY_ASSY) AS PLAN_QTY_ASSY, PLAN_MONTH, SUM(RESV_FIELD1) AS RESV_FIELD1  
                                          FROM ( 
                                                SELECT FACTORY, MAT_ID, SUM(PLAN_QTY_ASSY) AS PLAN_QTY_ASSY, PLAN_MONTH, SUM(TO_NUMBER(DECODE(RESV_FIELD1,' ',0,RESV_FIELD1))) AS RESV_FIELD1 
                                                  FROM CWIPPLNMON 
                                                 WHERE 1=1 
                                                   AND FACTORY = 'HMVA2' 
                                                 GROUP BY FACTORY, MAT_ID, PLAN_MONTH 
                                               ) 
                                         GROUP BY FACTORY, MAT_ID,PLAN_MONTH 
                                       ) 
                               ) PLAN 
                             , ( 
                                SELECT MAT_ID 
                                     , SUM(DECODE(WORK_DATE,'20200630', 0, NVL(S1_FAC_OUT_QTY_1 + S2_FAC_OUT_QTY_1 + S3_FAC_OUT_QTY_1 + S4_FAC_OUT_QTY_1, 0))) AS ASSY_MON 
                                  FROM RSUMFACMOV 
                                 WHERE 1=1 
                                   AND WORK_DATE BETWEEN '20200630' AND '20200721'
                                   AND LOT_TYPE = 'W' 
                                   AND CM_KEY_1 = 'HMVA2' 
                                   AND CM_KEY_2 = 'PROD' 
                                   AND CM_KEY_3 LIKE 'P%'
                                   AND FACTORY NOT IN ('RETURN') 
                                 GROUP BY MAT_ID 
                               ) MON_AO 
                             , ( 
                                SELECT MAT_ID 
                                     , SUM(DECODE(WORK_DATE,'20200630', 0, NVL(S1_FAC_OUT_QTY_1 + S2_FAC_OUT_QTY_1 + S3_FAC_OUT_QTY_1 + S4_FAC_OUT_QTY_1, 0))) AS ASSY_MON 
                                  FROM CSUMFACMOV 
                                 WHERE 1=1 
                                   AND WORK_DATE BETWEEN '20200630' AND '20200721'
                                   AND LOT_TYPE = 'W' 
                                   AND CM_KEY_1 = 'HMVA2' 
                                   AND CM_KEY_2 = 'PROD' 
                                   AND CM_KEY_3 LIKE 'P%'
                                   AND FACTORY NOT IN ('RETURN') 
                                 GROUP BY MAT_ID 
                               ) MON_AO_HX 
                             , ( 
                                SELECT MAT_ID 
                                     , SUM(DECODE(WORK_DATE,'20200630', 0, NVL(S1_FAC_OUT_QTY_1 + S2_FAC_OUT_QTY_1 + S3_FAC_OUT_QTY_1 + S4_FAC_OUT_QTY_1, 0))) AS ASSY_MON 
                                  FROM RSUMFACMOV 
                                 WHERE 1=1 
                                   AND WORK_DATE BETWEEN '20200630' AND '20200720'
                                   AND LOT_TYPE = 'W' 
                                   AND CM_KEY_1 = 'HMVA2' 
                                   AND CM_KEY_2 = 'PROD' 
                                   AND CM_KEY_3 LIKE 'P%'
                                   AND FACTORY NOT IN ('RETURN') 
                                 GROUP BY MAT_ID 
                               ) MON_AO_SHIP 
                             , ( 
                                SELECT MAT_ID 
                                     , SUM(DECODE(WORK_DATE,'20200630', 0, NVL(S1_FAC_OUT_QTY_1 + S2_FAC_OUT_QTY_1 + S3_FAC_OUT_QTY_1 + S4_FAC_OUT_QTY_1, 0))) AS ASSY_MON 
                                  FROM CSUMFACMOV 
                                 WHERE 1=1 
                                   AND WORK_DATE BETWEEN '20200630' AND '20200720'
                                   AND LOT_TYPE = 'W' 
                                   AND CM_KEY_1 = 'HMVA2' 
                                   AND CM_KEY_2 = 'PROD' 
                                   AND CM_KEY_3 LIKE 'P%'
                                   AND FACTORY NOT IN ('RETURN') 
                                 GROUP BY MAT_ID 
                               ) MON_AO_HX_SHIP 
                         WHERE 1 = 1 
                           AND MAT.FACTORY =PLAN.FACTORY(+) 
                           AND MAT.MAT_ID = PLAN.MAT_ID(+) 
                           AND MAT.MAT_ID = MON_AO.MAT_ID(+)  
                           AND MAT.MAT_ID = MON_AO_HX.MAT_ID(+) 
                           AND MAT.MAT_ID = MON_AO_SHIP.MAT_ID(+)  
                           AND MAT.MAT_ID = MON_AO_HX_SHIP.MAT_ID(+) 
                           AND MAT.FACTORY = 'HMVA2' 
                           AND PLAN.PLAN_MONTH(+) = '202007' 
                           AND MAT.MAT_TYPE= 'FG' 
                           AND MAT.DELETE_FLAG <> 'Y' 
                         GROUP BY MAT.MAT_ID, MAT.MAT_GRP_3, MAT.MAT_CMF_13 
                       ) A  
                 GROUP BY A.MAT_ID 
               ) M 
             , (  
                SELECT SAP_CODE, MIN(STOCK_TAT) AS STOCK_TAT, MIN(HMK3A_TAT) AS HMK3A_TAT, MIN(SAW_TAT) AS SAW_TAT, MIN(DA_TAT) AS DA_TAT, MIN(WB_TAT) AS WB_TAT, MIN(MOLD_TAT) AS MOLD_TAT, MIN(FINISH_TAT) AS FINISH_TAT, MIN(TOTAL_TAT) AS TAT  
                  FROM (  
                        SELECT CUSTOMER, MAJOR, PKG,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', SAP_CODE  
                             , MAX(STOCK_TAT) STOCK_TAT, MAX(HMK3A_TAT) HMK3A_TAT, MAX(SAW_TAT) SAW_TAT, MAX(DA_TAT) DA_TAT, MAX(WB_TAT) WB_TAT, MAX(MOLD_TAT) MOLD_TAT, MAX(FINISH_TAT) FINISH_TAT, MAX(SAW_TAT)+MAX(DA_TAT)+MAX(WB_TAT)+MAX(MOLD_TAT)+MAX(FINISH_TAT) AS TOTAL_TAT  
                             , RANK() OVER (PARTITION BY CUSTOMER, MAJOR, PKG,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', SAP_CODE ORDER BY MAX(SAW_TAT)+MAX(DA_TAT)+MAX(WB_TAT)+MAX(MOLD_TAT)+MAX(FINISH_TAT), SAP_CODE) AS RANK  
                          FROM (  
                                SELECT MAT.MAT_ID 
                                     , (CASE WHEN MAT.MAT_GRP_1 = 'SE' THEN 'SAMSUNG' WHEN MAT.MAT_GRP_1 = 'HX' THEN 'SK Hynix' ELSE 'Fabless' END) AS CUSTOMER, MAT.MAT_GRP_9 AS MAJOR, MAT.MAT_GRP_10 AS PKG,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', OPER_GRP 
                                     , MAT.VENDOR_ID  
                                     , OPER.SAP_CODE  
                                     , NVL(DECODE(OPER_GRP, 'STOCK',SUM(OPER.TAT)),0) STOCK_TAT 
                                     , NVL(DECODE(OPER_GRP, 'SAW',SUM(OPER.TAT)),0) SAW_TAT  
                                     , NVL(DECODE(OPER_GRP, 'DA',SUM(OPER.TAT)),0) DA_TAT  
                                     , NVL(DECODE(OPER_GRP, 'WB',SUM(OPER.TAT)),0) WB_TAT  
                                     , NVL(DECODE(OPER_GRP, 'MOLD',SUM(OPER.TAT)),0) MOLD_TAT  
                                     , NVL(DECODE(OPER_GRP, 'FINISH',SUM(OPER.TAT)),0) FINISH_TAT   
                                     , NVL(DECODE(OPER_GRP, 'HMK3A',SUM(OPER.TAT)),0) HMK3A_TAT 
                                  FROM MWIPMATDEF MAT   
                                     , (   
                                        SELECT A.FACTORY, A.OPER, A.SAP_CODE, DECODE(B.OPER_GRP_1, 'HMK3A', 'HMK3A', 'M/K', 'FINISH', 'V/I', 'FINISH', 'TRIM', 'FINISH', 'S/B/A', 'FINISH', 'TIN', 'FINISH', 'SIG', 'FINISH', 'AVI', 'FINISH', 'MOLD', 'MOLD', 'CURE', 'MOLD', 'W/B', 'WB', 'GATE', 'WB', 'D/A', 'DA', 'SMT', 'DA', 'S/P', 'DA', 'B/G', 'SAW', 'SAW', 'SAW', 'HMK2A', 'STOCK') OPER_GRP, SUM(A.TAT_DAY+A.TAT_DAY_WAIT) AS TAT   
                                          FROM CWIPSAPTAT@RPTTOMES A   
                                             , MWIPOPRDEF B   
                                         WHERE 1 = 1   
                                           AND A.RESV_FIELD_2 = ' '   
                                           AND A.FACTORY = B.FACTORY   
                                           AND A.OPER = B.OPER   
                                           AND OPER_GRP_1 IN ('HMK3A', 'M/K', 'V/I', 'TRIM', 'S/B/A', 'TIN', 'SIG', 'AVI', 'MOLD', 'CURE', 'W/B', 'GATE', 'D/A', 'SMT', 'S/P', 'B/G', 'SAW', 'HMK2A')   
                                         GROUP BY A.FACTORY, A.OPER, A.SAP_CODE, B.OPER_GRP_1   
                                       ) OPER  
                                 WHERE 1 = 1   
                                   AND MAT.VENDOR_ID = OPER.SAP_CODE(+)  
                                   AND OPER_GRP <> ' '   
                                 GROUP BY  MAT.MAT_ID, (CASE WHEN MAT.MAT_GRP_1 = 'SE' THEN 'SAMSUNG' WHEN MAT.MAT_GRP_1 = 'HX' THEN 'SK Hynix' ELSE 'Fabless'  END), MAT.MAT_GRP_9, MAT.MAT_GRP_10,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT.VENDOR_ID, OPER.SAP_CODE, OPER_GRP  
                               )   
                         GROUP BY CUSTOMER, MAJOR, PKG,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', SAP_CODE 
                       )  
                 WHERE RANK = 1  
                 GROUP BY SAP_CODE 
               ) T 
         WHERE 1=1 
           AND MAT.MAT_ID = A.MAT_ID(+) 
           AND MAT.OPER_GRP = A.OPER_GRP(+) 
           AND MAT.MAT_ID = M.MAT_ID(+) 
           AND MAT.VENDOR_ID = T.SAP_CODE(+) 
         GROUP BY (CASE WHEN MAT.MAT_GRP_1 = 'SE' THEN 'SAMSUNG' WHEN MAT.MAT_GRP_1 = 'HX' THEN 'SK Hynix' ELSE 'Fabless'  END), MAT.MAT_GRP_9, MAT.MAT_GRP_10,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT.OPER_GRP 
   )  
 GROUP BY CUSTOMER, MAJOR, PKG,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ' 
HAVING ( 
        SUM(NVL(ORI_PLAN,0) + NVL(MON_PLAN,0) + NVL(TARGET_MON,0) + NVL(ASSY_MON,0))  +  
        SUM(NVL(DAY01,0) + NVL(DAY02,0) + NVL(DAY03,0) + NVL(DAY04,0) + NVL(DAY05,0) + NVL(DAY06,0) + NVL(DAY07,0) + NVL(DAY08,0) + NVL(DAY09,0) + NVL(DAY10,0) +  
            NVL(DAY11,0) + NVL(DAY12,0) + NVL(DAY13,0) + NVL(DAY14,0) + NVL(DAY15,0) + NVL(DAY16,0) + NVL(DAY17,0) + NVL(DAY18,0) + NVL(DAY19,0) + NVL(DAY20,0) +  
            NVL(DAY21,0) + NVL(DAY22,0) + NVL(DAY23,0) + NVL(DAY24,0) + NVL(DAY25,0) + NVL(DAY26,0) + NVL(DAY27,0) + NVL(DAY28,0) + NVL(DAY29,0) + NVL(DAY30,0) + NVL(DAY31,0)) 
       ) <> 0 
 ORDER BY DECODE(CUSTOMER, '', 1, 'SAMSUNG', 2, 'SK Hynix', 3, 'Fabless', 4, 5), CUSTOMER, MAJOR, PKG,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ' 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT PLAN_WEEK V1    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_DATE = TO_CHAR(SYSDATE,'yyyymmdd')      AND ROWNUM = 1  
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT LANGUAGE_2 FROM RWEBFUNDEF WHERE FUNC_NAME = 'STD1701'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT FACTORY Code, FAC_DESC Data
  FROM MWIPFACDEF
 WHERE FAC_GRP_5 = 'Y' 
 ORDER BY FAC_GRP_4 ASC
-------------------------------------------------------------
SELECT OPER, OPER_DESC  FROM MWIPOPRDEF
  WHERE FACTORY = 'HMVA2'  AND OPER NOT IN ('00001', '00002') AND OPER NOT LIKE 'V%' ORDER BY DECODE(OPER_CMF_2, ' ', 99999, TO_NUMBER(OPER_CMF_2)), OPER
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT (SELECT DATA_1 FROM MGCMTBLDAT WHERE TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = B.MAT_GRP_1 AND ROWNUM=1) AS MAT_GRP_1,  ' ', B.MAT_GRP_3,  ' ',  ' ',  ' ',  ' ',  ' ', B.MAT_CMF_10, B.MAT_ID, A.FLOW 
     , (SELECT FLOW_DESC FROM MWIPFLWDEF WHERE FACTORY = 'HMVA2' AND FLOW = A.FLOW) AS FLOW_DESC 
     , MAX(DECODE(OPER, 'A0000',  '■', '')) AS  V0
     , MAX(DECODE(OPER, 'A0005',  '■', '')) AS  V1
     , MAX(DECODE(OPER, 'A000N',  '■', '')) AS  V2
     , MAX(DECODE(OPER, 'A0010',  '■', '')) AS  V3
     , MAX(DECODE(OPER, 'A0012',  '■', '')) AS  V4
     , MAX(DECODE(OPER, 'A0013',  '■', '')) AS  V5
     , MAX(DECODE(OPER, 'A0015',  '■', '')) AS  V6
     , MAX(DECODE(OPER, 'A0020',  '■', '')) AS  V7
     , MAX(DECODE(OPER, 'A0055',  '■', '')) AS  V8
     , MAX(DECODE(OPER, 'A0023',  '■', '')) AS  V9
     , MAX(DECODE(OPER, 'A0025',  '■', '')) AS  V10
     , MAX(DECODE(OPER, 'A0030',  '■', '')) AS  V11
     , MAX(DECODE(OPER, 'A0190',  '■', '')) AS  V12
     , MAX(DECODE(OPER, 'A0033',  '■', '')) AS  V13
     , MAX(DECODE(OPER, 'A0040',  '■', '')) AS  V14
     , MAX(DECODE(OPER, 'A0041',  '■', '')) AS  V15
     , MAX(DECODE(OPER, 'A0042',  '■', '')) AS  V16
     , MAX(DECODE(OPER, 'A0045',  '■', '')) AS  V17
     , MAX(DECODE(OPER, 'A0050',  '■', '')) AS  V18
     , MAX(DECODE(OPER, 'A0060',  '■', '')) AS  V19
     , MAX(DECODE(OPER, 'A0070',  '■', '')) AS  V20
     , MAX(DECODE(OPER, 'A0080',  '■', '')) AS  V21
     , MAX(DECODE(OPER, 'A0090',  '■', '')) AS  V22
     , MAX(DECODE(OPER, 'A0095',  '■', '')) AS  V23
     , MAX(DECODE(OPER, 'A0110',  '■', '')) AS  V24
     , MAX(DECODE(OPER, 'A0120',  '■', '')) AS  V25
     , MAX(DECODE(OPER, 'A0130',  '■', '')) AS  V26
     , MAX(DECODE(OPER, 'A0140',  '■', '')) AS  V27
     , MAX(DECODE(OPER, 'A0160',  '■', '')) AS  V28
     , MAX(DECODE(OPER, 'A0161',  '■', '')) AS  V29
     , MAX(DECODE(OPER, 'A0165',  '■', '')) AS  V30
     , MAX(DECODE(OPER, 'A0065',  '■', '')) AS  V31
     , MAX(DECODE(OPER, 'A0100',  '■', '')) AS  V32
     , MAX(DECODE(OPER, 'A0150',  '■', '')) AS  V33
     , MAX(DECODE(OPER, 'A0175',  '■', '')) AS  V34
     , MAX(DECODE(OPER, 'A0176',  '■', '')) AS  V35
     , MAX(DECODE(OPER, 'A0170',  '■', '')) AS  V36
     , MAX(DECODE(OPER, 'A0180',  '■', '')) AS  V37
     , MAX(DECODE(OPER, 'A0200',  '■', '')) AS  V38
     , MAX(DECODE(OPER, 'A0201',  '■', '')) AS  V39
     , MAX(DECODE(OPER, 'A0202',  '■', '')) AS  V40
     , MAX(DECODE(OPER, 'A0210',  '■', '')) AS  V41
     , MAX(DECODE(OPER, 'A0215',  '■', '')) AS  V42
     , MAX(DECODE(OPER, 'A0220',  '■', '')) AS  V43
     , MAX(DECODE(OPER, 'A0230',  '■', '')) AS  V44
     , MAX(DECODE(OPER, 'A0300',  '■', '')) AS  V45
     , MAX(DECODE(OPER, 'A0250',  '■', '')) AS  V46
     , MAX(DECODE(OPER, 'A0305',  '■', '')) AS  V47
     , MAX(DECODE(OPER, 'A0240',  '■', '')) AS  V48
     , MAX(DECODE(OPER, 'A0260',  '■', '')) AS  V49
     , MAX(DECODE(OPER, 'A0270',  '■', '')) AS  V50
     , MAX(DECODE(OPER, 'A0290',  '■', '')) AS  V51
     , MAX(DECODE(OPER, 'A0295',  '■', '')) AS  V52
     , MAX(DECODE(OPER, 'A0280',  '■', '')) AS  V53
     , MAX(DECODE(OPER, 'A0306',  '■', '')) AS  V54
     , MAX(DECODE(OPER, 'A0307',  '■', '')) AS  V55
     , MAX(DECODE(OPER, 'A0308',  '■', '')) AS  V56
     , MAX(DECODE(OPER, 'A0310',  '■', '')) AS  V57
     , MAX(DECODE(OPER, 'A0320',  '■', '')) AS  V58
     , MAX(DECODE(OPER, 'A0330',  '■', '')) AS  V59
     , MAX(DECODE(OPER, 'A1280',  '■', '')) AS  V60
     , MAX(DECODE(OPER, 'A0333',  '■', '')) AS  V61
     , MAX(DECODE(OPER, 'A0335',  '■', '')) AS  V62
     , MAX(DECODE(OPER, 'A0337',  '■', '')) AS  V63
     , MAX(DECODE(OPER, 'A0372',  '■', '')) AS  V64
     , MAX(DECODE(OPER, 'A0395',  '■', '')) AS  V65
     , MAX(DECODE(OPER, 'A0397',  '■', '')) AS  V66
     , MAX(DECODE(OPER, 'A0340',  '■', '')) AS  V67
     , MAX(DECODE(OPER, 'A0345',  '■', '')) AS  V68
     , MAX(DECODE(OPER, 'A0350',  '■', '')) AS  V69
     , MAX(DECODE(OPER, 'A0360',  '■', '')) AS  V70
     , MAX(DECODE(OPER, 'A0370',  '■', '')) AS  V71
     , MAX(DECODE(OPER, 'A0375',  '■', '')) AS  V72
     , MAX(DECODE(OPER, 'A0380',  '■', '')) AS  V73
     , MAX(DECODE(OPER, 'A0381',  '■', '')) AS  V74
     , MAX(DECODE(OPER, 'A0382',  '■', '')) AS  V75
     , MAX(DECODE(OPER, 'A0383',  '■', '')) AS  V76
     , MAX(DECODE(OPER, 'A0385',  '■', '')) AS  V77
     , MAX(DECODE(OPER, 'A0391',  '■', '')) AS  V78
     , MAX(DECODE(OPER, 'A0399',  '■', '')) AS  V79
     , MAX(DECODE(OPER, 'A0390',  '■', '')) AS  V80
     , MAX(DECODE(OPER, 'A0400',  '■', '')) AS  V81
     , MAX(DECODE(OPER, 'A0401',  '■', '')) AS  V82
     , MAX(DECODE(OPER, 'A0500',  '■', '')) AS  V83
     , MAX(DECODE(OPER, 'A0530',  '■', '')) AS  V84
     , MAX(DECODE(OPER, 'A0531',  '■', '')) AS  V85
     , MAX(DECODE(OPER, 'A0501',  '■', '')) AS  V86
     , MAX(DECODE(OPER, 'A0540',  '■', '')) AS  V87
     , MAX(DECODE(OPER, 'A0550',  '■', '')) AS  V88
     , MAX(DECODE(OPER, 'A0600',  '■', '')) AS  V89
     , MAX(DECODE(OPER, 'A0620',  '■', '')) AS  V90
     , MAX(DECODE(OPER, 'A0660',  '■', '')) AS  V91
     , MAX(DECODE(OPER, 'A0630',  '■', '')) AS  V92
     , MAX(DECODE(OPER, 'A0650',  '■', '')) AS  V93
     , MAX(DECODE(OPER, 'A0670',  '■', '')) AS  V94
     , MAX(DECODE(OPER, 'A0720',  '■', '')) AS  V95
     , MAX(DECODE(OPER, 'A0700',  '■', '')) AS  V96
     , MAX(DECODE(OPER, 'A0339',  '■', '')) AS  V97
     , MAX(DECODE(OPER, 'A0541',  '■', '')) AS  V98
     , MAX(DECODE(OPER, 'A0551',  '■', '')) AS  V99
     , MAX(DECODE(OPER, 'A0561',  '■', '')) AS  V100
     , MAX(DECODE(OPER, 'A0601',  '■', '')) AS  V101
     , MAX(DECODE(OPER, 'A0710',  '■', '')) AS  V102
     , MAX(DECODE(OPER, 'A0800',  '■', '')) AS  V103
     , MAX(DECODE(OPER, 'A0402',  '■', '')) AS  V104
     , MAX(DECODE(OPER, 'A0502',  '■', '')) AS  V105
     , MAX(DECODE(OPER, 'A0532',  '■', '')) AS  V106
     , MAX(DECODE(OPER, 'A0801',  '■', '')) AS  V107
     , MAX(DECODE(OPER, 'A0542',  '■', '')) AS  V108
     , MAX(DECODE(OPER, 'A0552',  '■', '')) AS  V109
     , MAX(DECODE(OPER, 'A0562',  '■', '')) AS  V110
     , MAX(DECODE(OPER, 'A0602',  '■', '')) AS  V111
     , MAX(DECODE(OPER, 'A0711',  '■', '')) AS  V112
     , MAX(DECODE(OPER, 'A0802',  '■', '')) AS  V113
     , MAX(DECODE(OPER, 'A0403',  '■', '')) AS  V114
     , MAX(DECODE(OPER, 'A0503',  '■', '')) AS  V115
     , MAX(DECODE(OPER, 'A0533',  '■', '')) AS  V116
     , MAX(DECODE(OPER, 'A0543',  '■', '')) AS  V117
     , MAX(DECODE(OPER, 'A0553',  '■', '')) AS  V118
     , MAX(DECODE(OPER, 'A0563',  '■', '')) AS  V119
     , MAX(DECODE(OPER, 'A0603',  '■', '')) AS  V120
     , MAX(DECODE(OPER, 'A0712',  '■', '')) AS  V121
     , MAX(DECODE(OPER, 'A0713',  '■', '')) AS  V122
     , MAX(DECODE(OPER, 'A0803',  '■', '')) AS  V123
     , MAX(DECODE(OPER, 'A0404',  '■', '')) AS  V124
     , MAX(DECODE(OPER, 'A0504',  '■', '')) AS  V125
     , MAX(DECODE(OPER, 'A0534',  '■', '')) AS  V126
     , MAX(DECODE(OPER, 'A0544',  '■', '')) AS  V127
     , MAX(DECODE(OPER, 'A0554',  '■', '')) AS  V128
     , MAX(DECODE(OPER, 'A0564',  '■', '')) AS  V129
     , MAX(DECODE(OPER, 'A0604',  '■', '')) AS  V130
     , MAX(DECODE(OPER, 'A0714',  '■', '')) AS  V131
     , MAX(DECODE(OPER, 'A0804',  '■', '')) AS  V132
     , MAX(DECODE(OPER, 'A0405',  '■', '')) AS  V133
     , MAX(DECODE(OPER, 'A0505',  '■', '')) AS  V134
     , MAX(DECODE(OPER, 'A0535',  '■', '')) AS  V135
     , MAX(DECODE(OPER, 'A0545',  '■', '')) AS  V136
     , MAX(DECODE(OPER, 'A0555',  '■', '')) AS  V137
     , MAX(DECODE(OPER, 'A0565',  '■', '')) AS  V138
     , MAX(DECODE(OPER, 'A0605',  '■', '')) AS  V139
     , MAX(DECODE(OPER, 'A0715',  '■', '')) AS  V140
     , MAX(DECODE(OPER, 'A0805',  '■', '')) AS  V141
     , MAX(DECODE(OPER, 'A0406',  '■', '')) AS  V142
     , MAX(DECODE(OPER, 'A0506',  '■', '')) AS  V143
     , MAX(DECODE(OPER, 'A0536',  '■', '')) AS  V144
     , MAX(DECODE(OPER, 'A0546',  '■', '')) AS  V145
     , MAX(DECODE(OPER, 'A0556',  '■', '')) AS  V146
     , MAX(DECODE(OPER, 'A0566',  '■', '')) AS  V147
     , MAX(DECODE(OPER, 'A0606',  '■', '')) AS  V148
     , MAX(DECODE(OPER, 'A0716',  '■', '')) AS  V149
     , MAX(DECODE(OPER, 'A0806',  '■', '')) AS  V150
     , MAX(DECODE(OPER, 'A0407',  '■', '')) AS  V151
     , MAX(DECODE(OPER, 'A0507',  '■', '')) AS  V152
     , MAX(DECODE(OPER, 'A0537',  '■', '')) AS  V153
     , MAX(DECODE(OPER, 'A0547',  '■', '')) AS  V154
     , MAX(DECODE(OPER, 'A0557',  '■', '')) AS  V155
     , MAX(DECODE(OPER, 'A0567',  '■', '')) AS  V156
     , MAX(DECODE(OPER, 'A0607',  '■', '')) AS  V157
     , MAX(DECODE(OPER, 'A0717',  '■', '')) AS  V158
     , MAX(DECODE(OPER, 'A0807',  '■', '')) AS  V159
     , MAX(DECODE(OPER, 'A0408',  '■', '')) AS  V160
     , MAX(DECODE(OPER, 'A0508',  '■', '')) AS  V161
     , MAX(DECODE(OPER, 'A0538',  '■', '')) AS  V162
     , MAX(DECODE(OPER, 'A0558',  '■', '')) AS  V163
     , MAX(DECODE(OPER, 'A0568',  '■', '')) AS  V164
     , MAX(DECODE(OPER, 'A0608',  '■', '')) AS  V165
     , MAX(DECODE(OPER, 'A0808',  '■', '')) AS  V166
     , MAX(DECODE(OPER, 'A0409',  '■', '')) AS  V167
     , MAX(DECODE(OPER, 'A0509',  '■', '')) AS  V168
     , MAX(DECODE(OPER, 'A0539',  '■', '')) AS  V169
     , MAX(DECODE(OPER, 'A0559',  '■', '')) AS  V170
     , MAX(DECODE(OPER, 'A0569',  '■', '')) AS  V171
     , MAX(DECODE(OPER, 'A0609',  '■', '')) AS  V172
     , MAX(DECODE(OPER, 'A0809',  '■', '')) AS  V173
     , MAX(DECODE(OPER, 'A080A',  '■', '')) AS  V174
     , MAX(DECODE(OPER, 'A0890',  '■', '')) AS  V175
     , MAX(DECODE(OPER, 'A0900',  '■', '')) AS  V176
     , MAX(DECODE(OPER, 'A0910',  '■', '')) AS  V177
     , MAX(DECODE(OPER, 'A0920',  '■', '')) AS  V178
     , MAX(DECODE(OPER, 'A0930',  '■', '')) AS  V179
     , MAX(DECODE(OPER, 'A0935',  '■', '')) AS  V180
     , MAX(DECODE(OPER, 'A040A',  '■', '')) AS  V181
     , MAX(DECODE(OPER, 'A0950',  '■', '')) AS  V182
     , MAX(DECODE(OPER, 'A053A',  '■', '')) AS  V183
     , MAX(DECODE(OPER, 'A0970',  '■', '')) AS  V184
     , MAX(DECODE(OPER, 'A0940',  '■', '')) AS  V185
     , MAX(DECODE(OPER, 'A0980',  '■', '')) AS  V186
     , MAX(DECODE(OPER, 'A1000',  '■', '')) AS  V187
     , MAX(DECODE(OPER, 'A055A',  '■', '')) AS  V188
     , MAX(DECODE(OPER, 'A060A',  '■', '')) AS  V189
     , MAX(DECODE(OPER, 'A1040',  '■', '')) AS  V190
     , MAX(DECODE(OPER, 'A1070',  '■', '')) AS  V191
     , MAX(DECODE(OPER, 'A1020',  '■', '')) AS  V192
     , MAX(DECODE(OPER, 'A1100',  '■', '')) AS  V193
     , MAX(DECODE(OPER, 'A1110',  '■', '')) AS  V194
     , MAX(DECODE(OPER, 'A1120',  '■', '')) AS  V195
     , MAX(DECODE(OPER, 'A1130',  '■', '')) AS  V196
     , MAX(DECODE(OPER, 'A1140',  '■', '')) AS  V197
     , MAX(DECODE(OPER, 'A1150',  '■', '')) AS  V198
     , MAX(DECODE(OPER, 'A1600',  '■', '')) AS  V199
     , MAX(DECODE(OPER, 'A1650',  '■', '')) AS  V200
     , MAX(DECODE(OPER, 'A1170',  '■', '')) AS  V201
     , MAX(DECODE(OPER, 'A1180',  '■', '')) AS  V202
     , MAX(DECODE(OPER, 'A1200',  '■', '')) AS  V203
     , MAX(DECODE(OPER, 'A1230',  '■', '')) AS  V204
     , MAX(DECODE(OPER, 'A1240',  '■', '')) AS  V205
     , MAX(DECODE(OPER, 'A1250',  '■', '')) AS  V206
     , MAX(DECODE(OPER, 'A1260',  '■', '')) AS  V207
     , MAX(DECODE(OPER, 'A1270',  '■', '')) AS  V208
     , MAX(DECODE(OPER, 'A1300',  '■', '')) AS  V209
     , MAX(DECODE(OPER, 'A1350',  '■', '')) AS  V210
     , MAX(DECODE(OPER, 'A1370',  '■', '')) AS  V211
     , MAX(DECODE(OPER, 'A1380',  '■', '')) AS  V212
     , MAX(DECODE(OPER, 'A1050',  '■', '')) AS  V213
     , MAX(DECODE(OPER, 'A1420',  '■', '')) AS  V214
     , MAX(DECODE(OPER, 'A1440',  '■', '')) AS  V215
     , MAX(DECODE(OPER, 'A1450',  '■', '')) AS  V216
     , MAX(DECODE(OPER, 'A1821',  '■', '')) AS  V217
     , MAX(DECODE(OPER, 'A1460',  '■', '')) AS  V218
     , MAX(DECODE(OPER, 'A1470',  '■', '')) AS  V219
     , MAX(DECODE(OPER, 'A1500',  '■', '')) AS  V220
     , MAX(DECODE(OPER, 'A1550',  '■', '')) AS  V221
     , MAX(DECODE(OPER, 'A1610',  '■', '')) AS  V222
     , MAX(DECODE(OPER, 'A1560',  '■', '')) AS  V223
     , MAX(DECODE(OPER, 'A1720',  '■', '')) AS  V224
     , MAX(DECODE(OPER, 'A1730',  '■', '')) AS  V225
     , MAX(DECODE(OPER, 'A1740',  '■', '')) AS  V226
     , MAX(DECODE(OPER, 'A1750',  '■', '')) AS  V227
     , MAX(DECODE(OPER, 'A1755',  '■', '')) AS  V228
     , MAX(DECODE(OPER, 'A1760',  '■', '')) AS  V229
     , MAX(DECODE(OPER, 'A1765',  '■', '')) AS  V230
     , MAX(DECODE(OPER, 'A1766',  '■', '')) AS  V231
     , MAX(DECODE(OPER, 'A1763',  '■', '')) AS  V232
     , MAX(DECODE(OPER, 'A1770',  '■', '')) AS  V233
     , MAX(DECODE(OPER, 'A1780',  '■', '')) AS  V234
     , MAX(DECODE(OPER, 'A1790',  '■', '')) AS  V235
     , MAX(DECODE(OPER, 'A1795',  '■', '')) AS  V236
     , MAX(DECODE(OPER, 'A1860',  '■', '')) AS  V237
     , MAX(DECODE(OPER, 'A1850',  '■', '')) AS  V238
     , MAX(DECODE(OPER, 'A1390',  '■', '')) AS  V239
     , MAX(DECODE(OPER, 'A1800',  '■', '')) AS  V240
     , MAX(DECODE(OPER, 'A1805',  '■', '')) AS  V241
     , MAX(DECODE(OPER, 'A1810',  '■', '')) AS  V242
     , MAX(DECODE(OPER, 'A1811',  '■', '')) AS  V243
     , MAX(DECODE(OPER, 'A1812',  '■', '')) AS  V244
     , MAX(DECODE(OPER, 'A1816',  '■', '')) AS  V245
     , MAX(DECODE(OPER, 'A1820',  '■', '')) AS  V246
     , MAX(DECODE(OPER, 'A1825',  '■', '')) AS  V247
     , MAX(DECODE(OPER, 'A1826',  '■', '')) AS  V248
     , MAX(DECODE(OPER, 'A1920',  '■', '')) AS  V249
     , MAX(DECODE(OPER, 'A1960',  '■', '')) AS  V250
     , MAX(DECODE(OPER, 'A1815',  '■', '')) AS  V251
     , MAX(DECODE(OPER, 'A1830',  '■', '')) AS  V252
     , MAX(DECODE(OPER, 'A1710',  '■', '')) AS  V253
     , MAX(DECODE(OPER, 'A1840',  '■', '')) AS  V254
     , MAX(DECODE(OPER, 'A1900',  '■', '')) AS  V255
     , MAX(DECODE(OPER, 'A1910',  '■', '')) AS  V256
     , MAX(DECODE(OPER, 'A1950',  '■', '')) AS  V257
     , MAX(DECODE(OPER, 'A2000',  '■', '')) AS  V258
     , MAX(DECODE(OPER, 'A2010',  '■', '')) AS  V259
     , MAX(DECODE(OPER, 'A2020',  '■', '')) AS  V260
     , MAX(DECODE(OPER, 'A2025',  '■', '')) AS  V261
     , MAX(DECODE(OPER, 'A1819',  '■', '')) AS  V262
     , MAX(DECODE(OPER, 'A2030',  '■', '')) AS  V263
     , MAX(DECODE(OPER, 'A2040',  '■', '')) AS  V264
     , MAX(DECODE(OPER, 'A2041',  '■', '')) AS  V265
     , MAX(DECODE(OPER, 'A2042',  '■', '')) AS  V266
     , MAX(DECODE(OPER, 'A2070',  '■', '')) AS  V267
     , MAX(DECODE(OPER, 'A2050',  '■', '')) AS  V268
     , MAX(DECODE(OPER, 'A2150',  '■', '')) AS  V269
     , MAX(DECODE(OPER, 'A2200',  '■', '')) AS  V270
     , MAX(DECODE(OPER, 'A2100',  '■', '')) AS  V271
     , MAX(DECODE(OPER, 'A2300',  '■', '')) AS  V272
     , MAX(DECODE(OPER, 'A2350',  '■', '')) AS  V273
     , MAX(DECODE(OPER, 'AZ009',  '■', '')) AS  V274
     , MAX(DECODE(OPER, 'AZ010',  '■', '')) AS  V275
     , MAX(DECODE(OPER, 'M0300',  '■', '')) AS  V276
     , MAX(DECODE(OPER, 'M0315',  '■', '')) AS  V277
     , MAX(DECODE(OPER, 'M0320',  '■', '')) AS  V278
     , MAX(DECODE(OPER, 'M0339',  '■', '')) AS  V279
     , MAX(DECODE(OPER, 'M0345',  '■', '')) AS  V280
     , MAX(DECODE(OPER, 'M0323',  '■', '')) AS  V281
     , MAX(DECODE(OPER, 'M0329',  '■', '')) AS  V282
     , MAX(DECODE(OPER, 'Q0001',  '■', '')) AS  V283
     , MAX(DECODE(OPER, 'Q0002',  '■', '')) AS  V284
     , MAX(DECODE(OPER, 'M0325',  '■', '')) AS  V285
     , MAX(DECODE(OPER, 'M0330',  '■', '')) AS  V286
     , MAX(DECODE(OPER, 'M0337',  '■', '')) AS  V287
     , MAX(DECODE(OPER, 'M0391',  '■', '')) AS  V288
     , MAX(DECODE(OPER, 'M0336',  '■', '')) AS  V289
     , MAX(DECODE(OPER, 'M0340',  '■', '')) AS  V290
     , MAX(DECODE(OPER, 'M0400',  '■', '')) AS  V291
     , MAX(DECODE(OPER, 'M0500',  '■', '')) AS  V292
     , MAX(DECODE(OPER, 'M0550',  '■', '')) AS  V293
     , MAX(DECODE(OPER, 'M0110',  '■', '')) AS  V294
     , MAX(DECODE(OPER, 'M0120',  '■', '')) AS  V295
     , MAX(DECODE(OPER, 'M0160',  '■', '')) AS  V296
     , MAX(DECODE(OPER, 'M0161',  '■', '')) AS  V297
     , MAX(DECODE(OPER, 'M0401',  '■', '')) AS  V298
     , MAX(DECODE(OPER, 'M1750',  '■', '')) AS  V299
   FROM MWIPFLWOPR@RPTTOMES A 
     , MWIPMATDEF B 
 WHERE 1 = 1 
   AND A.FACTORY = B.FACTORY 
   AND A.FLOW = B.FIRST_FLOW 
   AND A.FACTORY = 'HMVA2'
   AND B.MAT_TYPE = 'FG'  
   AND B.DELETE_FLAG = ' ' 
   AND B.MAT_ID LIKE 'DRET523_M31S_KN7'
 GROUP BY B.MAT_GRP_1,  ' ', B.MAT_GRP_3,  ' ',  ' ',  ' ',  ' ',  ' ', B.MAT_CMF_10, B.MAT_ID, A.FLOW 
 ORDER BY B.MAT_GRP_1,  ' ', B.MAT_GRP_3,  ' ',  ' ',  ' ',  ' ',  ' ', B.MAT_CMF_10, B.MAT_ID, A.FLOW 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
SELECT MIN(SYS_DATE) AS START_DAY 
     , MAX(SYS_DATE) AS END_DAY 
     , PLAN_YEAR||DECODE(LENGTH(PLAN_WEEK), 1, '0'||PLAN_WEEK, PLAN_WEEK) AS WEEK
  FROM MWIPCALDEF 
 WHERE CALENDAR_ID = 'OTD'
   AND (PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) IN ( 
                                                SELECT WW
                                                  FROM (
                                                        SELECT WW
                                                             , ROW_NUMBER() OVER(ORDER BY WW) AS RNK
                                                          FROM (
                                                                SELECT DISTINCT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW
                                                                  FROM MWIPCALDEF
                                                                 WHERE CALENDAR_ID = 'OTD'
                                                                   AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') >= (
                                                                                                              SELECT MAX(PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) AS WW
                                                                                                                FROM MWIPCALDEF
                                                                                                               WHERE CALENDAR_ID = 'OTD'
                                                                                                                 AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') < (SELECT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW FROM MWIPCALDEF WHERE CALENDAR_ID = 'OTD' AND SYS_DATE = '20200721')
                                                                                                                 AND SYS_DATE >= TO_CHAR(TO_DATE('20200721', 'YYYYMMDD')-14, 'YYYYMMDD')
                                                                                                             )
                                                               ) 
                                                       )
                                                 WHERE RNK <= 7
                                               ) 
 GROUP BY PLAN_YEAR, PLAN_WEEK 
 ORDER BY PLAN_YEAR, PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE) AS START_DAY 
     , MAX(SYS_DATE) AS END_DAY 
     , PLAN_YEAR||DECODE(LENGTH(PLAN_WEEK), 1, '0'||PLAN_WEEK, PLAN_WEEK) AS WEEK
  FROM MWIPCALDEF 
 WHERE CALENDAR_ID = 'SE'
   AND (PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) IN ( 
                                                SELECT WW
                                                  FROM (
                                                        SELECT WW
                                                             , ROW_NUMBER() OVER(ORDER BY WW) AS RNK
                                                          FROM (
                                                                SELECT DISTINCT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW
                                                                  FROM MWIPCALDEF
                                                                 WHERE CALENDAR_ID = 'SE'
                                                                   AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') >= (
                                                                                                              SELECT MAX(PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) AS WW
                                                                                                                FROM MWIPCALDEF
                                                                                                               WHERE CALENDAR_ID = 'SE'
                                                                                                                 AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') < (SELECT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW FROM MWIPCALDEF WHERE CALENDAR_ID = 'SE' AND SYS_DATE = '20200721')
                                                                                                                 AND SYS_DATE >= TO_CHAR(TO_DATE('20200721', 'YYYYMMDD')-14, 'YYYYMMDD')
                                                                                                             )
                                                               ) 
                                                       )
                                                 WHERE RNK <= 7
                                               ) 
 GROUP BY PLAN_YEAR, PLAN_WEEK 
 ORDER BY PLAN_YEAR, PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT (SELECT DATA_1 FROM MGCMTBLDAT@RPTTOMES WHERE FACTORY = 'HMVA2' AND TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = MAT_GRP_1) AS CUSTOMER, MAT_GRP_9 AS MAJOR, MAT_GRP_10 AS PKG, MAT_GRP_6 AS LD_COUNT, MAT_CMF_11 AS PKG_CODE,  ' ', CONV_MAT_ID AS PRODUCT,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ' 
     , ROUND(SUM(PLAN)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS PLAN 
     , ROUND(SUM(SHP)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS SHP 
     , ROUND(SUM(DEF)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS DEF 
     , GUBUN 
     , ROUND(SUM(HMK3A)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS HMK3A 
     , ROUND(SUM(QC_GATE)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS QC_GATE 
     , ROUND(SUM(PVI)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS PVI 
     , ROUND(SUM(AVI)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS AVI 
     , ROUND(SUM(SIG)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS SIG 
     , ROUND(SUM(SBA)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS SBA 
     , ROUND(SUM(TIN)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS TIN 
     , ROUND(SUM(TRIM)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS TRIM 
     , ROUND(SUM(MK)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS MK 
     , ROUND(SUM(CURE)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS CURE 
     , ROUND(SUM(MOLD)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS MOLD 
     , ROUND(SUM(GATE)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS GATE 
     , ROUND(SUM(WB9)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS WB9 
     , ROUND(SUM(DA9)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS DA9 
     , ROUND(SUM(WB8)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS WB8 
     , ROUND(SUM(DA8)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS DA8 
     , ROUND(SUM(WB7)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS WB7 
     , ROUND(SUM(DA7)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS DA7 
     , ROUND(SUM(WB6)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS WB6 
     , ROUND(SUM(DA6)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS DA6 
     , ROUND(SUM(WB5)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS WB5 
     , ROUND(SUM(DA5)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS DA5 
     , ROUND(SUM(WB4)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS WB4 
     , ROUND(SUM(DA4)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS DA4 
     , ROUND(SUM(WB3)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS WB3 
     , ROUND(SUM(DA3)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS DA3 
     , ROUND(SUM(WB2)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS WB2 
     , ROUND(SUM(DA2)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS DA2 
     , ROUND(SUM(WB1)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS WB1 
     , ROUND(SUM(DA1)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS DA1 
     , ROUND(SUM(SP)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS SP 
     , ROUND(SUM(SAW)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS SAW 
     , ROUND(SUM(BG)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS BG 
     , ROUND(SUM(HMK2A)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS HMK2A 
     , ROUND(SUM(WIP_DEF)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS WIP_DEF 
  FROM (  
        SELECT MAT_GRP_1, MAT_GRP_9, MAT_GRP_10, MAT_GRP_6, MAT_CMF_11,  ' ', CONV_MAT_ID,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', GUBUN 
             , MAX(PLAN) AS PLAN 
             , MAX(SHP) AS SHP 
             , MAX(DEF) AS DEF 
             , SUM(DECODE(OPER_GRP_1, 'HMK3A', SUM_DEF, 0)) AS HMK3A 
             , SUM(DECODE(OPER_GRP_1, 'QC_GATE', SUM_DEF, 0)) AS QC_GATE 
             , SUM(DECODE(OPER_GRP_1, 'PVI', SUM_DEF, 0)) AS PVI 
             , SUM(DECODE(OPER_GRP_1, 'AVI', SUM_DEF, 0)) AS AVI 
             , SUM(DECODE(OPER_GRP_1, 'SIG', SUM_DEF, 0)) AS SIG 
             , SUM(DECODE(OPER_GRP_1, 'SBA', SUM_DEF, 0)) AS SBA 
             , SUM(DECODE(OPER_GRP_1, 'TIN', SUM_DEF, 0)) AS TIN 
             , SUM(DECODE(OPER_GRP_1, 'TRIM', SUM_DEF, 0)) AS TRIM 
             , SUM(DECODE(OPER_GRP_1, 'MK', SUM_DEF, 0)) AS MK 
             , SUM(DECODE(OPER_GRP_1, 'CURE', SUM_DEF, 0)) AS CURE 
             , SUM(DECODE(OPER_GRP_1, 'MOLD', SUM_DEF, 0)) AS MOLD 
             , SUM(DECODE(OPER_GRP_1, 'GATE', SUM_DEF, 0)) AS GATE 
             , SUM(DECODE(OPER_GRP_1, 'WB9', SUM_DEF, 0)) AS WB9 
             , SUM(DECODE(OPER_GRP_1, 'DA9', SUM_DEF, 0)) AS DA9 
             , SUM(DECODE(OPER_GRP_1, 'WB8', SUM_DEF, 0)) AS WB8 
             , SUM(DECODE(OPER_GRP_1, 'DA8', SUM_DEF, 0)) AS DA8 
             , SUM(DECODE(OPER_GRP_1, 'WB7', SUM_DEF, 0)) AS WB7 
             , SUM(DECODE(OPER_GRP_1, 'DA7', SUM_DEF, 0)) AS DA7 
             , SUM(DECODE(OPER_GRP_1, 'WB6', SUM_DEF, 0)) AS WB6 
             , SUM(DECODE(OPER_GRP_1, 'DA6', SUM_DEF, 0)) AS DA6 
             , SUM(DECODE(OPER_GRP_1, 'WB5', SUM_DEF, 0)) AS WB5 
             , SUM(DECODE(OPER_GRP_1, 'DA5', SUM_DEF, 0)) AS DA5 
             , SUM(DECODE(OPER_GRP_1, 'WB4', SUM_DEF, 0)) AS WB4 
             , SUM(DECODE(OPER_GRP_1, 'DA4', SUM_DEF, 0)) AS DA4 
             , SUM(DECODE(OPER_GRP_1, 'WB3', SUM_DEF, 0)) AS WB3 
             , SUM(DECODE(OPER_GRP_1, 'DA3', SUM_DEF, 0)) AS DA3 
             , SUM(DECODE(OPER_GRP_1, 'WB2', SUM_DEF, 0)) AS WB2 
             , SUM(DECODE(OPER_GRP_1, 'DA2', SUM_DEF, 0)) AS DA2 
             , SUM(DECODE(OPER_GRP_1, 'WB1', SUM_DEF, 0)) AS WB1 
             , SUM(DECODE(OPER_GRP_1, 'DA1', SUM_DEF, 0)) AS DA1 
             , SUM(DECODE(OPER_GRP_1, 'SP', SUM_DEF, 0)) AS SP 
             , SUM(DECODE(OPER_GRP_1, 'SAW', SUM_DEF, 0)) AS SAW 
             , SUM(DECODE(OPER_GRP_1, 'BG', SUM_DEF, 0)) AS BG 
             , SUM(DECODE(OPER_GRP_1, 'HMK2A',SUM_DEF, 0)) AS HMK2A 
             , MAX(WIP_TTL) AS WIP_TTL 
             , MAX(DEF) - MAX(WIP_TTL) AS WIP_DEF 
          FROM ( 
                SELECT MAT_GRP_1, MAT_GRP_9, MAT_GRP_10, MAT_GRP_6, MAT_CMF_11,  ' ', CONV_MAT_ID,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ' 
                     , OPER_GRP_1 
                     , DECODE(SEQ, 1, 'WIP', 2, '설비대수', 3, 'CAPA현황', 4, '당일 실적', 5, 'D0 잔량', 6, 'D1 잔량', 7, 'D2 잔량', 8, '당주 잔량', 9, '차주 잔량', 10, '월간 잔량') AS GUBUN 
                     , SUM(DECODE(SEQ, 1, 0, 2, 0, 3, 0, 4, 0, 5, D0_PLAN, 6, D1_PLAN, 7, D2_PLAN, 8, WEEK_PLAN, 9, WEEK2_PLAN, 10, MON_PLAN)) AS PLAN  
                     , SUM(DECODE(SEQ, 1, 0, 2, 0, 3, 0, 4, 0, 5, SHP_TODAY, 6, SHP_D1, 7, SHP_D2, 8, SHP_WEEK, 9, SHP2_WEEK, 10, SHP_MONTH)) AS SHP 
                     , SUM(DECODE(SEQ, 1, 0, 2, 0, 3, 0, 4, 0, 5, D0_DEF, 6, D1_DEF, 7, D2_DEF, 8, WEEK_DEF, 9, WEEK2_DEF, 10, MONTH_DEF)) AS DEF 
                     , SUM(DECODE(SEQ, 1, WIP_QTY, 2, RES_CNT, 3, RES_CAPA, 4, ASSY_END_QTY, 5, D0_SUM_QUANTITY, 6, D1_SUM_QUANTITY, 7, D2_SUM_QUANTITY, 8, WEEK_SUM_QUANTITY, 9, WEEK2_SUM_QUANTITY, 10, MONTH_SUM_QUANTITY)) AS SUM_DEF 
                     , MAX(DECODE(SEQ, 1, 0, 2, 0, 3, 0, 4, 0, WIP_TTL)) AS WIP_TTL 
                  FROM ( 
                        SELECT MAT_GRP_1, MAT_GRP_9, MAT_GRP_10, MAT_GRP_6, MAT_CMF_11,  ' ', CONV_MAT_ID,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', OPER_GRP_1 
                             , SUM(NVL(D0_PLAN,0)) AS D0_PLAN, SUM(NVL(SHP_TODAY,0)) AS SHP_TODAY, SUM(NVL(D0_DEF,0)) AS D0_DEF 
                             , SUM(NVL(D1_PLAN,0)) AS D1_PLAN, SUM(NVL(SHP_D1,0)) AS SHP_D1, SUM(NVL(D1_DEF,0)) AS D1_DEF 
                             , SUM(NVL(D2_PLAN,0)) AS D2_PLAN, SUM(NVL(SHP_D2,0)) AS SHP_D2, SUM(NVL(D2_DEF,0)) AS D2_DEF 
                             , SUM(NVL(WEEK_PLAN,0)) AS WEEK_PLAN, SUM(NVL(SHP_WEEK,0)) AS SHP_WEEK, SUM(NVL(WEEK_DEF,0)) AS WEEK_DEF 
                             , SUM(NVL(WEEK2_PLAN,0)) AS WEEK2_PLAN, SUM(NVL(SHP2_WEEK,0)) AS SHP2_WEEK, SUM(NVL(WEEK2_DEF,0)) AS WEEK2_DEF 
                             , SUM(NVL(MON_PLAN,0)) AS MON_PLAN, SUM(NVL(SHP_MONTH,0)) AS SHP_MONTH, SUM(NVL(MONTH_DEF,0)) AS MONTH_DEF 
                             , SUM(NVL(ASSY_END_QTY,0)) AS ASSY_END_QTY 
                             , SUM(NVL(WIP_QTY,0)) AS WIP_QTY 
                             , SUM(SUM(WIP_QTY)) OVER(PARTITION BY MAT_GRP_1, MAT_GRP_9, MAT_GRP_10, MAT_GRP_6, MAT_CMF_11,  ' ', CONV_MAT_ID,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ') AS WIP_TTL 
                             , SUM(RES_CNT) AS RES_CNT 
                             , SUM(RES_CAPA) AS RES_CAPA 
                             , SUM(NVL(D0_DEF-WIP_SUM_QUANTITY+WIP_QTY,0)) AS D0_SUM_QUANTITY 
                             , SUM(NVL(D1_DEF-WIP_SUM_QUANTITY+WIP_QTY,0)) AS D1_SUM_QUANTITY 
                             , SUM(NVL(D2_DEF-WIP_SUM_QUANTITY+WIP_QTY,0)) AS D2_SUM_QUANTITY 
                             , SUM(NVL(WEEK_DEF-WIP_SUM_QUANTITY+WIP_QTY,0)) AS WEEK_SUM_QUANTITY 
                             , SUM(NVL(WEEK2_DEF-WIP_SUM_QUANTITY+WIP_QTY,0)) AS WEEK2_SUM_QUANTITY 
                             , SUM(NVL(MONTH_DEF-WIP_SUM_QUANTITY+WIP_QTY,0)) AS MONTH_SUM_QUANTITY 
                          FROM ( 
                                SELECT MAT.MAT_GRP_1, MAT.MAT_GRP_2, MAT.MAT_GRP_4, MAT.MAT_GRP_5, MAT.MAT_GRP_6, MAT.MAT_GRP_7, MAT.MAT_GRP_8, MAT.MAT_GRP_9, MAT.MAT_GRP_10, MAT.MAT_CMF_10, MAT.MAT_CMF_7, MAT.MAT_CMF_8, MAT.MAT_CMF_11, MAT.MAT_ID, MAT.CONV_MAT_ID, MAT.OPER_GRP_1 
                                     , A.D0_PLAN, A.SHP_TODAY, A.D0_DEF 
                                     , A.D1_PLAN, A.SHP_D1, A.D1_DEF 
                                     , A.D2_PLAN, A.SHP_D2, A.D2_DEF 
                                     , A.WEEK_PLAN, A.SHP_WEEK, A.WEEK_DEF 
                                     , A.WEEK2_PLAN, A.SHP2_WEEK, A.WEEK2_DEF 
                                     , A.MON_PLAN, A.SHP_MONTH, A.MONTH_DEF 
                                     , A.D0_ORI_PLAN 
                                     , NVL(B.ASSY_END_QTY,0) AS ASSY_END_QTY 
                                     , MAX(NVL(B.ASSY_END_QTY,0)) OVER(PARTITION BY MAT.MAT_GRP_1, MAT.MAT_GRP_9, MAT.MAT_GRP_10, MAT.MAT_GRP_6, MAT.MAT_CMF_11,  ' ', CONV_MAT_ID,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ') AS CHK_ASSY_END_QTY 
                                     , NVL(WIP.QTY,0) AS WIP_QTY 
                                     , RES_CNT 
                                     , RES_CAPA 
                                     , SUM(NVL(WIP.QTY,0)) OVER(PARTITION BY A.MAT_ID ORDER BY MAT.MAT_ID, DECODE(MAT.OPER_GRP_1, 'HMK3A', 1, 'QC_GATE', 2, 'PVI', 3, 'AVI', 4, 'SIG', 5, 'SBA', 6, 'TIN', 7, 'TRIM', 8, 'MK', 9, 'CURE', 10, 'MOLD', 11, 'GATE', 12 
                                                                                                                                , 'WB9', 13, 'DA9', 14, 'WB8', 15, 'DA8', 16, 'WB7', 17, 'DA7', 18, 'WB6', 19, 'DA6', 20, 'WB5', 21, 'DA5', 22, 'WB4', 23, 'DA4', 24 
                                                                                                                                , 'WB3', 25, 'DA3', 26, 'WB2', 27, 'DA2', 28, 'WB1', 29, 'DA1', 30, 'SP', 31, 'SAW', 32, 'BG', 33, 'HMK2A',34, 35)) AS WIP_SUM_QUANTITY 
                                  FROM ( 
                                        SELECT MAT_GRP_1, MAT_GRP_2, MAT_GRP_4, MAT_GRP_5, MAT_GRP_6, MAT_GRP_7, MAT_GRP_8, MAT_GRP_9, MAT_GRP_10, MAT_CMF_10, MAT_CMF_7, MAT_CMF_8, MAT_CMF_11, MAT_ID, OPER_GRP_1 
                                             , CASE WHEN MAT_GRP_1 = 'SE' AND MAT_GRP_9 = 'MEMORY' THEN 'SEK_________-___' || SUBSTR(MAT_ID, -3) 
                                                    WHEN MAT_GRP_1 = 'HX' THEN MAT_CMF_10 
                                                    ELSE MAT_ID 
                                                END CONV_MAT_ID 
                                          FROM ( 
                                                SELECT * 
                                                  FROM (
                                                        SELECT A.* 
                                                          FROM MWIPMATDEF A
                                                         WHERE 1=1 
                                                           AND FACTORY = 'HMVA2' 
                                                           AND DELETE_FLAG = ' ' 
                                                           AND MAT_TYPE = 'FG' 
                                                           AND MAT_ID LIKE '%' 
                                                           AND MAT_GRP_10 NOT LIKE 'COB%' 
                                                       ) 
                                               ) 
                                             , ( 
                                                SELECT DECODE(LEVEL, 1, 'HMK3A', 2, 'QC_GATE', 3, 'PVI', 4, 'AVI', 5, 'SIG', 6, 'SBA', 7, 'TIN', 8, 'TRIM', 9, 'MK', 10, 'CURE', 11, 'MOLD', 12, 'GATE' 
                                                                   , 13, 'WB9', 14, 'DA9', 15, 'WB8', 16, 'DA8', 17, 'WB7', 18, 'DA7', 19, 'WB6', 20, 'DA6', 21, 'WB5', 22, 'DA5', 23, 'WB4', 24, 'DA4'
                                                                   , 25, 'WB3', 26, 'DA3', 27, 'WB2', 28, 'DA2', 29, 'WB1', 30, 'DA1', 31, 'SP', 32, 'SAW', 33, 'BG', 34, 'HMK2A' 
                                                             ) OPER_GRP_1 
                                                  FROM DUAL CONNECT BY LEVEL <= 34 
                                               ) 
                                       ) MAT 
                                     , ( 
                                        SELECT MAT.MAT_ID 
                                             , SUM(NVL(D0_PLAN, 0) + (NVL(WEEK1_TTL, 0) - NVL(SHP_WEEK_TTL, 0))) AS D0_PLAN 
                                             , SUM(NVL(D0_PLAN, 0)) AS D0_ORI_PLAN 
                                             , SUM(NVL(SHP_TODAY, 0)) AS SHP_TODAY 
                                             , SUM(NVL(D0_PLAN, 0) + (NVL(WEEK1_TTL, 0) - NVL(SHP_WEEK_TTL, 0)) - NVL(SHP_TODAY, 0)) AS D0_DEF 
                                             , SUM(NVL(D1_PLAN, 0)) AS D1_PLAN 
                                             , 0 AS SHP_D1 
                                             , SUM(NVL(D1_PLAN, 0) + NVL(D0_PLAN, 0) + (NVL(WEEK1_TTL, 0) - NVL(SHP_WEEK_TTL, 0)) - NVL(SHP_TODAY, 0)) AS D1_DEF 
                                             , SUM(NVL(D2_PLAN, 0)) AS D2_PLAN 
                                             , 0 AS SHP_D2 
                                             , SUM(NVL(D2_PLAN, 0) + NVL(D1_PLAN, 0) + NVL(D0_PLAN, 0) + (NVL(WEEK1_TTL, 0) - NVL(SHP_WEEK_TTL, 0)) - NVL(SHP_TODAY, 0)) AS D2_DEF 
                                             , SUM(NVL(WEEK1_PLAN, 0)) AS WEEK_PLAN 
                                             , SUM(NVL(SHP_WEEK, 0)) AS SHP_WEEK 
                                             , SUM(NVL(WEEK1_PLAN, 0) - NVL(SHP_WEEK, 0)) AS WEEK_DEF 
                                             , SUM(NVL(WEEK2_PLAN, 0)) AS WEEK2_PLAN 
                                             , 0 AS SHP2_WEEK 
                                             , SUM(NVL(WEEK2_PLAN, 0) + NVL(WEEK1_PLAN, 0) - NVL(SHP_WEEK, 0)) AS WEEK2_DEF 
                                             , SUM(NVL(CASE WHEN MAT.MAT_GRP_3 IN ('COB') THEN ROUND(MON.RESV_FIELD1/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0) 
                                                    ELSE MON.RESV_FIELD1 
                                                END,0)) MON_PLAN 
                                             , SUM(NVL(SHP_MONTH, 0)) AS SHP_MONTH 
                                             , SUM(NVL(CASE WHEN MAT.MAT_GRP_3 IN ('COB') THEN ROUND(NVL(MON.RESV_FIELD1,0)/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0)-NVL(SHP_MONTH, 0) 
                                                    ELSE NVL(MON.RESV_FIELD1, 0)-NVL(SHP_MONTH, 0) 
                                                END,0)) MONTH_DEF 
                                          FROM MWIPMATDEF MAT 
                                             , ( 
                                                SELECT FACTORY, MAT_ID 
                                                     , SUM(CASE WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 1 THEN D0_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 2 THEN D0_QTY + D1_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 3 THEN D0_QTY + D1_QTY + D2_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 4 THEN D0_QTY + D1_QTY + D2_QTY + D3_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 5 THEN D0_QTY + D1_QTY + D2_QTY + D3_QTY + D4_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 6 THEN D0_QTY + D1_QTY + D2_QTY + D3_QTY + D4_QTY + D5_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 3 THEN D0_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 4 THEN D0_QTY + D1_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 5 THEN D0_QTY + D1_QTY + D2_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 6 THEN D0_QTY + D1_QTY + D2_QTY + D3_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 7 THEN D0_QTY + D1_QTY + D2_QTY + D3_QTY + D4_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 1 THEN D0_QTY + D1_QTY + D2_QTY + D3_QTY + D4_QTY + D5_QTY 
                                                                ELSE 0 
                                                           END) AS WEEK1_TTL 
                                                     , SUM(W1_QTY) AS WEEK1_PLAN 
                                                     , SUM(W2_QTY) AS WEEK2_PLAN 
                                                     , SUM(NVL(W1_QTY,0) + NVL(W2_QTY,0)) AS WEEK_TTL 
                                                     , SUM(CASE WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 7 THEN D0_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 1 THEN D1_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 2 THEN D2_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 3 THEN D3_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 4 THEN D4_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 5 THEN D5_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 6 THEN D6_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 2 THEN D0_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 3 THEN D1_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 4 THEN D2_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 5 THEN D3_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 6 THEN D4_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 7 THEN D5_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 1 THEN D6_QTY 
                                                                ELSE 0 
                                                           END) AS D0_PLAN 
                                                     , SUM(CASE WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 7 THEN D1_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 1 THEN D2_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 2 THEN D3_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 3 THEN D4_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 4 THEN D5_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 5 THEN D6_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 6 THEN D7_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 2 THEN D1_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 3 THEN D2_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 4 THEN D3_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 5 THEN D4_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 6 THEN D5_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 7 THEN D6_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 1 THEN D7_QTY 
                                                                ELSE 0 
                                                           END) AS D1_PLAN 
                                                     , SUM(CASE WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 7 THEN D2_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 1 THEN D3_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 2 THEN D4_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 3 THEN D5_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 4 THEN D6_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 5 THEN D7_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 6 THEN D8_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 2 THEN D2_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 3 THEN D3_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 4 THEN D4_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 5 THEN D5_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 6 THEN D6_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 7 THEN D7_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 1 THEN D8_QTY 
                                                                ELSE 0 
                                                           END) AS D2_PLAN 
                                                  FROM ( 
                                                        SELECT FACTORY, MAT_ID, 'OTD' AS CALENDAR_ID 
                                                             , SUM(DECODE(PLAN_WEEK, '202030', D0_QTY, 0)) AS D0_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202030', D1_QTY, 0)) AS D1_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202030', D2_QTY, 0)) AS D2_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202030', D3_QTY, 0)) AS D3_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202030', D4_QTY, 0)) AS D4_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202030', D5_QTY, 0)) AS D5_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202030', D6_QTY, 0)) AS D6_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202031', D0_QTY, 0)) AS D7_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202031', D1_QTY, 0)) AS D8_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202031', D2_QTY, 0)) AS D9_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202031', D3_QTY, 0)) AS D10_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202031', D4_QTY, 0)) AS D11_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202031', D5_QTY, 0)) AS D12_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202031', D6_QTY, 0)) AS D13_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202030', WW_QTY, 0)) AS W1_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202031', WW_QTY, 0)) AS W2_QTY  
                                                          FROM RWIPPLNWEK  
                                                         WHERE 1=1  
                                                           AND FACTORY = 'HMVA2'  
                                                           AND GUBUN = '3'  
                                                           AND MAT_ID NOT LIKE 'SES%' 
                                                           AND PLAN_WEEK IN ('202030','202031') 
                                                         GROUP BY FACTORY, MAT_ID  
                                                         UNION ALL 
                                                        SELECT FACTORY, MAT_ID, 'SE' AS CALENDAR_ID  
                                                             , SUM(DECODE(PLAN_WEEK, '202030', D0_QTY, 0)) AS D0_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202030', D1_QTY, 0)) AS D1_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202030', D2_QTY, 0)) AS D2_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202030', D3_QTY, 0)) AS D3_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202030', D4_QTY, 0)) AS D4_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202030', D5_QTY, 0)) AS D5_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202030', D6_QTY, 0)) AS D6_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202031', D0_QTY, 0)) AS D7_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202031', D1_QTY, 0)) AS D8_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202031', D2_QTY, 0)) AS D9_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202031', D3_QTY, 0)) AS D10_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202031', D4_QTY, 0)) AS D11_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202031', D5_QTY, 0)) AS D12_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202031', D6_QTY, 0)) AS D13_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202030', WW_QTY, 0)) AS W1_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202031', WW_QTY, 0)) AS W2_QTY  
                                                          FROM RWIPPLNWEK  
                                                         WHERE 1=1  
                                                           AND FACTORY = 'HMVA2'  
                                                           AND GUBUN = '3'  
                                                           AND MAT_ID LIKE 'SES%' 
                                                           AND PLAN_WEEK IN ('202030','202031') 
                                                         GROUP BY FACTORY, MAT_ID  
                                                       )  
                                                 GROUP BY FACTORY, MAT_ID  
                                               ) PLN 
                                             , (  
                                                SELECT FACTORY,MAT_ID, RESV_FIELD1  
                                                  FROM (  
                                                        SELECT FACTORY, MAT_ID, SUM(RESV_FIELD1) AS RESV_FIELD1   
                                                          FROM (  
                                                                SELECT FACTORY, MAT_ID, SUM(TO_NUMBER(DECODE(RESV_FIELD1,' ',0,RESV_FIELD1))) AS RESV_FIELD1  
                                                                  FROM CWIPPLNMON  
                                                                 WHERE 1=1  
                                                                   AND FACTORY = 'HMVA2'  
                                                                   AND PLAN_MONTH = '202007' 
                                                                 GROUP BY FACTORY, MAT_ID 
                                                               )  
                                                         GROUP BY FACTORY, MAT_ID 
                                                       ) 
                                               ) MON 
                                             , (  
                                                SELECT MAT_ID  
                                                     , SUM(CASE WHEN SHP_QTY_1 > 0 AND WORK_DATE = '20200721' THEN NVL(SHP_QTY_1, 0) ELSE 0 END) AS SHP_TODAY  
                                                     , SUM(CASE WHEN SHP_QTY_1 > 0 AND MAT_ID LIKE 'SES%' AND WORK_DATE BETWEEN '20200720' AND '20200721' THEN NVL(SHP_QTY_1, 0)  
                                                                WHEN SHP_QTY_1 > 0 AND MAT_ID NOT LIKE 'SES%' AND WORK_DATE BETWEEN '20200718' AND '20200721' THEN NVL(SHP_QTY_1, 0) 
                                                                ELSE 0 END) AS SHP_WEEK  
                                                     , SUM(CASE WHEN SHP_QTY_1 > 0 AND MAT_ID LIKE 'SES%' AND WORK_DATE BETWEEN '20200720' AND '20200720' THEN NVL(SHP_QTY_1, 0)  
                                                                WHEN SHP_QTY_1 > 0 AND MAT_ID NOT LIKE 'SES%' AND WORK_DATE BETWEEN '20200718' AND '20200720' THEN NVL(SHP_QTY_1, 0)  
                                                                ELSE 0 END) AS SHP_WEEK_TTL  
                                                     , SUM(CASE WHEN WORK_DATE BETWEEN '20200701' AND '20200721' THEN NVL(SHP_QTY_1, 0) END) AS SHP_MONTH  
                                                  FROM VSUMWIPOUT 
                                                 WHERE 1=1  
                                                   AND FACTORY  = 'HMVA2'  
                                                   AND LOT_TYPE = 'W'  
                                                   AND CM_KEY_2 = 'PROD'  
                                                   AND CM_KEY_3 LIKE 'P%'
                                                   AND MAT_ID NOT LIKE 'HX%'  
                                                   AND WORK_DATE BETWEEN LEAST('20200701', '20200718', '20200720') AND '20200721' 
                                                 GROUP BY MAT_ID  
                                                 UNION ALL  
                                                SELECT MAT_ID  
                                                     , SUM(CASE WHEN SHP_QTY_1 > 0 AND WORK_DATE = '20200721' THEN NVL(SHP_QTY_1, 0) ELSE 0 END) AS SHP_TODAY  
                                                     , SUM(CASE WHEN SHP_QTY_1 > 0 AND WORK_DATE BETWEEN '20200718' AND '20200721' THEN NVL(SHP_QTY_1, 0) ELSE 0 END) AS SHP_WEEK  
                                                     , SUM(CASE WHEN SHP_QTY_1 > 0 AND WORK_DATE BETWEEN '20200718' AND '20200720' THEN NVL(SHP_QTY_1, 0) ELSE 0 END) AS SHP_WEEK_TTL  
                                                     , SUM(CASE WHEN WORK_DATE BETWEEN '20200701' AND '20200721' THEN NVL(SHP_QTY_1, 0) END) AS SHP_MONTH  
                                                  FROM VSUMWIPOUT_06 
                                                 WHERE 1=1  
                                                   AND FACTORY  = 'HMVA2'  
                                                   AND LOT_TYPE = 'W'  
                                                   AND CM_KEY_2 = 'PROD'  
                                                   AND CM_KEY_3 LIKE 'P%'
                                                   AND MAT_ID LIKE 'HX%'  
                                                   AND WORK_DATE BETWEEN '20200701' AND '20200721' 
                                                 GROUP BY MAT_ID 
                                               ) SHP 
                                         WHERE 1=1 
                                           AND MAT.FACTORY = 'HMVA2' 
                                           AND MAT.MAT_TYPE = 'FG' 
                                           AND MAT.DELETE_FLAG = ' ' 
                                           AND MAT.MAT_ID = PLN.MAT_ID(+) 
                                           AND MAT.MAT_ID = MON.MAT_ID(+) 
                                           AND MAT.MAT_ID = SHP.MAT_ID(+) 
                                         GROUP BY MAT.MAT_ID 
                                         ORDER BY MAT.MAT_ID 
                                       ) A 
                                     , ( 
                                        SELECT MAT_ID, OPER_GRP_1 
                                             , SUM(ASSY_END_QTY) AS ASSY_END_QTY 
                                          FROM ( 
                                                SELECT B.MAT_ID 
                                                     , CASE WHEN OPER IN ('A0000', 'A000N') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'HMK2A' 
                                                            WHEN OPER IN ('A0040') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'BG' 
                                                            WHEN OPER IN ('A0200', 'A0230') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'SAW' 
                                                            WHEN OPER IN ('A0400', 'A0401', 'A0333') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'DA1' 
                                                            WHEN OPER IN ('A0402') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'DA2' 
                                                            WHEN OPER IN ('A0403') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'DA3' 
                                                            WHEN OPER IN ('A0404') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'DA4' 
                                                            WHEN OPER IN ('A0405') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'DA5' 
                                                            WHEN OPER IN ('A0406') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'DA6' 
                                                            WHEN OPER IN ('A0407') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'DA7' 
                                                            WHEN OPER IN ('A0408') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'DA8' 
                                                            WHEN OPER IN ('A0409') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'DA9' 
                                                            WHEN OPER IN ('A0600','A0601') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'WB1' 
                                                            WHEN OPER IN ('A0602') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'WB2' 
                                                            WHEN OPER IN ('A0603') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'WB3' 
                                                            WHEN OPER IN ('A0604') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'WB4' 
                                                            WHEN OPER IN ('A0605') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'WB5' 
                                                            WHEN OPER IN ('A0606') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'WB6' 
                                                            WHEN OPER IN ('A0607') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'WB7' 
                                                            WHEN OPER IN ('A0608') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'WB8' 
                                                            WHEN OPER IN ('A0609') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'WB9' 
                                                            WHEN OPER IN ('A0800', 'A0801', 'A0802', 'A0803', 'A0804', 'A0805', 'A0806', 'A0807', 'A0808', 'A0809') AND MAT_GRP_5 IN ('-', 'Merge') THEN 'GATE' 
                                                            WHEN OPER IN ('A1000', 'A0910') THEN 'MOLD' 
                                                            WHEN OPER IN ('A1100') THEN 'CURE' 
                                                            WHEN OPER IN ('A1150', 'A1500') THEN 'MK' 
                                                            WHEN OPER IN ('A1200') THEN 'TRIM' 
                                                            WHEN OPER IN ('A1450') THEN 'TIN' 
                                                            WHEN OPER IN ('A1300') THEN 'SBA' 
                                                            WHEN OPER IN ('A1750', 'A1800', 'A1900', 'A1825') THEN 'SIG' 
                                                            WHEN OPER IN ('A2000') THEN 'AVI' 
                                                            WHEN OPER IN ('A2050') THEN 'PVI' 
                                                            WHEN OPER IN ('A2100') THEN 'QC_GATE' 
                                                            WHEN OPER IN ('AZ010') THEN 'HMK3A' 
                                                            ELSE ' ' 
                                                        END OPER_GRP_1 
                                                     , (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END) ASSY_END_QTY 
                                                  FROM ( 
                                                        SELECT FACTORY, MAT_ID, OPER, LOT_TYPE, WORK_DATE, CM_KEY_3 
                                                             , SUM(END_LOT) AS END_LOT 
                                                             , SUM(END_QTY_1) AS END_QTY_1 
                                                             , SUM(END_QTY_2) AS END_QTY_2 
                                                             , SUM(CASE WHEN SHIP_QTY_1 > 0 THEN SHIP_QTY_1 ELSE 0 END) AS SHIP_QTY_1 
                                                             , SUM(CASE WHEN SHIP_QTY_2 > 0 THEN SHIP_QTY_2 ELSE 0 END) AS SHIP_QTY_2 
                                                          FROM ( 
                                                                SELECT FACTORY, MAT_ID, OPER, LOT_TYPE, WORK_DATE, CM_KEY_3 
                                                                     , DECODE(SUBSTR(OPER,2,4),'0000',SUM(S1_OPER_IN_LOT+S2_OPER_IN_LOT+S3_OPER_IN_LOT),SUM(S1_END_LOT+S2_END_LOT+S3_END_LOT)) END_LOT 
                                                                     , DECODE(SUBSTR(OPER,2,4),'0000',SUM(S1_OPER_IN_QTY_1+S2_OPER_IN_QTY_1+S3_OPER_IN_QTY_1),SUM(S1_END_QTY_1+S2_END_QTY_1+S3_END_QTY_1+S1_END_RWK_QTY_1 + S2_END_RWK_QTY_1 + S3_END_RWK_QTY_1)) END_QTY_1 
                                                                     , DECODE(SUBSTR(OPER,2,4),'0000',SUM(S1_OPER_IN_QTY_2+S2_OPER_IN_QTY_2+S3_OPER_IN_QTY_2),SUM(S1_END_QTY_2+S2_END_QTY_2+S3_END_QTY_2+S1_END_RWK_QTY_2 + S2_END_RWK_QTY_2 + S3_END_RWK_QTY_2)) END_QTY_2 
                                                                     , 0 SHIP_QTY_1 
                                                                     , 0 SHIP_QTY_2 
                                                                  FROM RSUMWIPMOV 
                                                                 WHERE FACTORY = 'HMVA2' 
                                                                   AND OPER NOT IN ('AZ010') 
                                                                   AND MAT_ID NOT LIKE 'HX%' 
                                                                 GROUP BY FACTORY, MAT_ID, OPER, LOT_TYPE, WORK_DATE, CM_KEY_3 
                                                                 UNION ALL 
                                                                SELECT FACTORY, MAT_ID 
                                                                     , 'AZ010' AS OPER 
                                                                     , LOT_TYPE, WORK_DATE, CM_KEY_3 
                                                                     , 0 END_LOT 
                                                                     , 0 END_QTY_1 
                                                                     , 0 END_QTY_2 
                                                                     , SUM(SHP_QTY_1) SHIP_QTY_1 
                                                                     , SUM(SHP_QTY_2) SHIP_QTY_2 
                                                                  FROM VSUMWIPOUT 
                                                                 WHERE FACTORY = 'HMVA2' 
                                                                   AND MAT_ID NOT LIKE 'HX%' 
                                                                 GROUP BY FACTORY, MAT_ID, LOT_TYPE, WORK_DATE, CM_KEY_3 
                                                                 UNION ALL 
                                                                SELECT FACTORY, MAT_ID, OPER, LOT_TYPE, WORK_DATE, CM_KEY_3 
                                                                     , DECODE(SUBSTR(OPER,2,4),'0000',SUM(S1_OPER_IN_LOT+S2_OPER_IN_LOT+S3_OPER_IN_LOT),SUM(S1_END_LOT+S2_END_LOT+S3_END_LOT)) END_LOT 
                                                                     , DECODE(SUBSTR(OPER,2,4),'0000',SUM(S1_OPER_IN_QTY_1+S2_OPER_IN_QTY_1+S3_OPER_IN_QTY_1),SUM(S1_END_QTY_1+S2_END_QTY_1+S3_END_QTY_1+S1_END_RWK_QTY_1 + S2_END_RWK_QTY_1 + S3_END_RWK_QTY_1)) END_QTY_1 
                                                                     , DECODE(SUBSTR(OPER,2,4),'0000',SUM(S1_OPER_IN_QTY_2+S2_OPER_IN_QTY_2+S3_OPER_IN_QTY_2),SUM(S1_END_QTY_2+S2_END_QTY_2+S3_END_QTY_2+S1_END_RWK_QTY_2 + S2_END_RWK_QTY_2 + S3_END_RWK_QTY_2)) END_QTY_2 
                                                                     , 0 SHIP_QTY_1 
                                                                     , 0 SHIP_QTY_2 
                                                                  FROM CSUMWIPMOV 
                                                                 WHERE FACTORY = 'HMVA2' 
                                                                   AND OPER NOT IN ('AZ010') 
                                                                   AND MAT_ID LIKE 'HX%' 
                                                                 GROUP BY FACTORY, MAT_ID, OPER, LOT_TYPE, WORK_DATE, CM_KEY_3 
                                                                 UNION ALL 
                                                                SELECT FACTORY, MAT_ID 
                                                                     , 'AZ010' AS OPER 
                                                                     , LOT_TYPE, WORK_DATE, CM_KEY_3 
                                                                     , 0 END_LOT 
                                                                     , 0 END_QTY_1 
                                                                     , 0 END_QTY_2 
                                                                     , SUM(SHP_QTY_1) SHIP_QTY_1 
                                                                     , SUM(SHP_QTY_2) SHIP_QTY_2 
                                                                  FROM VSUMWIPOUT_06 
                                                                 WHERE FACTORY = 'HMVA2' 
                                                                   AND MAT_ID LIKE 'HX%' 
                                                                 GROUP BY FACTORY, MAT_ID, LOT_TYPE, WORK_DATE, CM_KEY_3 
                                                               ) 
                                                         GROUP BY FACTORY, MAT_ID, OPER, LOT_TYPE, WORK_DATE, CM_KEY_3 
                                                       ) A 
                                                     , MWIPMATDEF B 
                                                 WHERE 1=1 
                                                   AND A.FACTORY  = 'HMVA2' 
                                                   AND A.FACTORY = B.FACTORY 
                                                   AND A.MAT_ID = B.MAT_ID 
                                                   AND B.MAT_TYPE = 'FG' 
                                                   AND A.MAT_ID LIKE '%' 
                                                   AND A.CM_KEY_3 LIKE 'P%'
                                                   AND A.OPER NOT IN ('00001','00002') 
                                                   AND A.WORK_DATE = '20200721' 
                                                 ) 
                                         GROUP BY MAT_ID, OPER_GRP_1 
                                        HAVING SUM(ASSY_END_QTY) > 0 
                                       ) B 
                                     , ( 
                                        SELECT MAT_ID, OPER_GRP_1, SUM(NVL(QTY,0)) QTY 
                                          FROM (  
                                                SELECT MAT_ID 
                                                     , QTY 
                                                     , CASE WHEN OPER_GRP_8 = 'HMK2A' THEN 'HMK2A' 
                                                            WHEN OPER_GRP_8 = 'B/G' THEN 'BG' 
                                                            WHEN OPER_GRP_8 = 'SAW' THEN 'SAW' 
                                                            WHEN OPER_GRP_8 = 'S/P' THEN 'SP' 
                                                            WHEN OPER_GRP_8 IN ('D/A1', 'D/A1 CURE') THEN 'DA1' 
                                                            WHEN OPER_GRP_8 IN ('D/A2', 'D/A2 CURE') THEN 'DA2' 
                                                            WHEN OPER_GRP_8 IN ('D/A3', 'D/A3 CURE') THEN 'DA3' 
                                                            WHEN OPER_GRP_8 IN ('D/A4', 'D/A4 CURE') THEN 'DA4' 
                                                            WHEN OPER_GRP_8 IN ('D/A5', 'D/A5 CURE') THEN 'DA5' 
                                                            WHEN OPER_GRP_8 IN ('D/A6', 'D/A6 CURE') THEN 'DA6' 
                                                            WHEN OPER_GRP_8 IN ('D/A7', 'D/A7 CURE') THEN 'DA7' 
                                                            WHEN OPER_GRP_8 IN ('D/A8', 'D/A8 CURE') THEN 'DA8' 
                                                            WHEN OPER_GRP_8 IN ('D/A9', 'D/A9 CURE') THEN 'DA9' 
                                                            WHEN OPER_GRP_8 = 'W/B1' THEN 'WB1' 
                                                            WHEN OPER_GRP_8 = 'W/B2' THEN 'WB2' 
                                                            WHEN OPER_GRP_8 = 'W/B3' THEN 'WB3' 
                                                            WHEN OPER_GRP_8 = 'W/B4' THEN 'WB4' 
                                                            WHEN OPER_GRP_8 = 'W/B5' THEN 'WB5' 
                                                            WHEN OPER_GRP_8 = 'W/B6' THEN 'WB6' 
                                                            WHEN OPER_GRP_8 = 'W/B7' THEN 'WB7' 
                                                            WHEN OPER_GRP_8 = 'W/B8' THEN 'WB8' 
                                                            WHEN OPER_GRP_8 = 'W/B9' THEN 'WB9' 
                                                            WHEN OPER_GRP_8 = 'GATE' AND MAT_GRP_5 = '-' THEN 'GATE' 
                                                            WHEN OPER_GRP_8 = 'GATE' AND MAT_GRP_1 = 'SE' AND MAT_GRP_5 = 'Merge' THEN 'GATE' 
                                                            WHEN OPER_GRP_8 = 'GATE' AND MAT_GRP_1 = 'HX' THEN 'GATE' 
                                                            WHEN OPER_GRP_8 = 'GATE' AND MAT_GRP_1 NOT IN ('SE','HX') AND SUBSTR(MAT_GRP_4,-1) = SUBSTR(OPER, -1) THEN 'GATE' 
                                                            WHEN OPER_GRP_8 = 'MOLD' THEN 'MOLD' 
                                                            WHEN OPER_GRP_8 = 'CURE' THEN 'CURE' 
                                                            WHEN OPER_GRP_8 = 'M/K' THEN 'MK' 
                                                            WHEN OPER_GRP_8 = 'TRIM' THEN 'TRIM' 
                                                            WHEN OPER_GRP_8 = 'TIN' THEN 'TIN' 
                                                            WHEN OPER_GRP_8 = 'S/B/A' THEN 'SBA' 
                                                            WHEN OPER_GRP_8 = 'SIG' THEN 'SIG' 
                                                            WHEN OPER_GRP_8 = 'AVI' THEN 'AVI' 
                                                            WHEN OPER_GRP_8 = 'V/I' THEN 'PVI' 
                                                            WHEN OPER_GRP_8 = 'QC GATE' THEN 'QC_GATE' 
                                                            WHEN OPER_GRP_8 = 'HMK3A' THEN 'HMK3A' 
                                                            ELSE ' ' 
                                                        END OPER_GRP_1 
                                                  FROM ( 
                                                        SELECT MAT_ID, OPER, OPER_GRP_8, MAT_GRP_1, MAT_GRP_4, MAT_GRP_5, MAT_GRP_10 
                                                             , CASE WHEN MAT_GRP_1 = 'HX' AND HX_COMP_MIN IS NOT NULL
                                                                         THEN (CASE WHEN HX_COMP_MIN <> HX_COMP_MAX AND OPER > HX_COMP_MIN AND OPER <= HX_COMP_MAX THEN QTY_1 / NVL(COMP_CNT / 2,1)
                                                                         WHEN OPER <= HX_COMP_MAX THEN QTY_1 / NVL(COMP_CNT,1)
                                                                         ELSE QTY_1 END)
                                                                    WHEN OPER <= 'A0395' THEN QTY_1 / NVL(COMP_CNT,1) 
                                                                    ELSE QTY_1 
                                                               END QTY 
                                                          FROM ( 
                                                                SELECT A.MAT_ID, B.OPER, B.OPER_GRP_8, C.MAT_GRP_1, C.MAT_GRP_4, C.MAT_GRP_5, C.MAT_GRP_10 
                                                                     , CASE WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN CASE WHEN MAT_GRP_5 IN ('1st','Merge') OR MAT_GRP_5 LIKE 'Middle%' THEN QTY_1 ELSE 0 END 
                                                                            WHEN MAT_GRP_3 IN ('COB', 'BGN') THEN ROUND(QTY_1/TO_NUMBER(DECODE(MAT_CMF_13, ' ', 1, '-', 1, MAT_CMF_13)),0) 
                                                                            ELSE QTY_1 
                                                                       END AS QTY_1 
                                                                     , COMP_CNT  
                                                                     , HX_COMP_MIN, HX_COMP_MAX 
                                                                  FROM RWIPLOTSTS A   
                                                                     , MWIPOPRDEF B   
                                                                     , VWIPMATDEF C 
                                                                 WHERE 1 = 1  
                                                                   AND A.FACTORY = B.FACTORY 
                                                                   AND A.FACTORY = C.FACTORY 
                                                                   AND A.OPER = B.OPER 
                                                                   AND A.MAT_ID = C.MAT_ID 
                                                                   AND A.FACTORY = 'HMVA2'   
                                                                   AND A.LOT_TYPE = 'W'  
                                                                   AND A.LOT_CMF_5 LIKE 'P%'
                                                                   AND A.LOT_DEL_FLAG = ' '  
                                                                   AND C.MAT_GRP_2 <> '-' 
                                                                   AND C.DELETE_FLAG = ' '  
                                                               ) 
                                                       ) 
                                               ) 
                                         WHERE 1=1 
                                           AND OPER_GRP_1 <> ' ' 
                                         GROUP BY MAT_ID, OPER_GRP_1 
                                        HAVING SUM(NVL(QTY,0)) > 0 
                                       ) WIP 
                                     , ( 
                                        SELECT A.RES_STS_2 AS MAT_ID 
                                             , A.OPER_GRP_1 
                                             , SUM(A.RES_CNT) AS RES_CNT 
                                             , SUM(TRUNC(NVL(NVL(B.UPEH,0) * 24 * A.PERCENT * A.RES_CNT, 0))) AS RES_CAPA 
                                          FROM ( 
                                                SELECT FACTORY, RES_STS_2, RES_STS_8 AS OPER, RES_GRP_6 AS RES_MODEL, RES_GRP_7 AS UPEH_GRP, COUNT(RES_ID) AS RES_CNT 
                                                     , CASE WHEN RES_STS_8 LIKE 'A06%' THEN 0.71
                                                            WHEN RES_STS_8 LIKE 'A04%' THEN 0.68
                                                            WHEN RES_STS_8 = 'A0333' THEN 0.68
                                                            ELSE 0.7
                                                       END PERCENT 
                                                     , CASE WHEN RES_STS_8 IN ('A0040') THEN 'BG' 
                                                            WHEN RES_STS_8 IN ('A0200', 'A0230') THEN 'SAW' 
                                                            WHEN RES_STS_8 IN ('A0400', 'A0401', 'A0333') THEN 'DA1' 
                                                            WHEN RES_STS_8 IN ('A0402') THEN 'DA2' 
                                                            WHEN RES_STS_8 IN ('A0403') THEN 'DA3' 
                                                            WHEN RES_STS_8 IN ('A0404') THEN 'DA4' 
                                                            WHEN RES_STS_8 IN ('A0405') THEN 'DA5' 
                                                            WHEN RES_STS_8 IN ('A0406') THEN 'DA6' 
                                                            WHEN RES_STS_8 IN ('A0407') THEN 'DA7' 
                                                            WHEN RES_STS_8 IN ('A0408') THEN 'DA8' 
                                                            WHEN RES_STS_8 IN ('A0409') THEN 'DA9' 
                                                            WHEN RES_STS_8 IN ('A0600','A0601') THEN 'WB1' 
                                                            WHEN RES_STS_8 IN ('A0602') THEN 'WB2' 
                                                            WHEN RES_STS_8 IN ('A0603') THEN 'WB3' 
                                                            WHEN RES_STS_8 IN ('A0604') THEN 'WB4' 
                                                            WHEN RES_STS_8 IN ('A0605') THEN 'WB5' 
                                                            WHEN RES_STS_8 IN ('A0606') THEN 'WB6' 
                                                            WHEN RES_STS_8 IN ('A0607') THEN 'WB7' 
                                                            WHEN RES_STS_8 IN ('A0608') THEN 'WB8' 
                                                            WHEN RES_STS_8 IN ('A0609') THEN 'WB9' 
                                                            WHEN RES_STS_8 IN ('A0800', 'A0801', 'A0802', 'A0803', 'A0804', 'A0805', 'A0806', 'A0807', 'A0808', 'A0809') THEN 'GATE' 
                                                            WHEN RES_STS_8 IN ('A1000', 'A0910') THEN 'MOLD' 
                                                            WHEN RES_STS_8 IN ('A1100') THEN 'CURE' 
                                                            WHEN RES_STS_8 IN ('A1150', 'A1500') THEN 'MK' 
                                                            WHEN RES_STS_8 IN ('A1200') THEN 'TRIM' 
                                                            WHEN RES_STS_8 IN ('A1450') THEN 'TIN' 
                                                            WHEN RES_STS_8 IN ('A1300') THEN 'SBA' 
                                                            WHEN RES_STS_8 IN ('A1750', 'A1800', 'A1900', 'A1825') THEN 'SIG' 
                                                            WHEN RES_STS_8 IN ('A2000') THEN 'AVI' 
                                                            WHEN RES_STS_8 IN ('A2050') THEN 'PVI' 
                                                            WHEN RES_STS_8 IN ('A2100') THEN 'QC_GATE' 
                                                            ELSE ' ' 
                                                       END OPER_GRP_1 
                                                  FROM MRASRESDEF 
                                                 WHERE 1 = 1  
                                                   AND FACTORY  = 'HMVA2' 
                                                   AND RES_CMF_9 = 'Y' 
                                                   AND RES_CMF_7 = 'Y' 
                                                   AND DELETE_FLAG = ' ' 
                                                   AND RES_TYPE='EQUIPMENT' 
                                                   AND (RES_STS_1 NOT IN ('C200', 'B199') OR RES_UP_DOWN_FLAG = 'U') 
                                                 GROUP BY FACTORY,RES_STS_2,RES_STS_8,RES_GRP_6,RES_GRP_7  
                                               ) A 
                                             , CRASUPHDEF B 
                                         WHERE 1=1 
                                           AND A.FACTORY = B.FACTORY(+) 
                                           AND A.OPER = B.OPER(+) 
                                           AND A.RES_MODEL = B.RES_MODEL(+) 
                                           AND A.UPEH_GRP = B.UPEH_GRP(+) 
                                           AND A.RES_STS_2 = B.MAT_ID(+) 
                                           AND A.FACTORY  = 'HMVA2' 
                                           AND A.OPER NOT IN ('00001','00002') 
                                           AND A.OPER_GRP_1 <> ' ' 
                                         GROUP BY A.RES_STS_2, A.OPER_GRP_1 
                                       ) RES 
                                 WHERE 1=1 
                                   AND MAT.MAT_ID = A.MAT_ID(+) 
                                   AND MAT.MAT_ID = B.MAT_ID(+) 
                                   AND MAT.MAT_ID = WIP.MAT_ID(+) 
                                   AND MAT.MAT_ID = RES.MAT_ID(+) 
                                   AND MAT.OPER_GRP_1 = B.OPER_GRP_1(+) 
                                   AND MAT.OPER_GRP_1 = WIP.OPER_GRP_1(+) 
                                   AND MAT.OPER_GRP_1 = RES.OPER_GRP_1(+) 
                               ) 
                         GROUP BY MAT_GRP_1, MAT_GRP_9, MAT_GRP_10, MAT_GRP_6, MAT_CMF_11,  ' ', CONV_MAT_ID,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', OPER_GRP_1 
                        HAVING ( 
                                SUM(NVL(D0_ORI_PLAN,0))+SUM(NVL(D1_PLAN,0))+SUM(NVL(D2_PLAN,0))+SUM(NVL(WEEK_PLAN,0))+SUM(NVL(WEEK2_PLAN,0))+SUM(NVL(MON_PLAN,0))+SUM(NVL(WIP_QTY,0)) 
                              + SUM(NVL(D0_PLAN,0))+SUM(NVL(SHP_WEEK,0))+SUM(NVL(SHP_MONTH,0))+SUM(NVL(ASSY_END_QTY,0)) 
                               ) > 0 
                      ) 
                    , (SELECT LEVEL AS SEQ FROM DUAL CONNECT BY LEVEL <= 10) 
                 GROUP BY MAT_GRP_1, MAT_GRP_9, MAT_GRP_10, MAT_GRP_6, MAT_CMF_11,  ' ', CONV_MAT_ID,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', OPER_GRP_1, DECODE(SEQ, 1, 'WIP', 2, '설비대수', 3, 'CAPA현황', 4, '당일 실적', 5, 'D0 잔량', 6, 'D1 잔량', 7, 'D2 잔량', 8, '당주 잔량', 9, '차주 잔량', 10, '월간 잔량') 
               ) 
         GROUP BY  MAT_GRP_1, MAT_GRP_9, MAT_GRP_10, MAT_GRP_6, MAT_CMF_11,  ' ', CONV_MAT_ID,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', GUBUN 
       ) A 
 WHERE 1=1 
 GROUP BY MAT_GRP_1, MAT_GRP_9, MAT_GRP_10, MAT_GRP_6, MAT_CMF_11,  ' ', CONV_MAT_ID,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', GUBUN 
 ORDER BY DECODE(MAT_GRP_1, 'SE', 1, 'HX', 2, 'IM', 3, 'FC', 4, 'IG', 5, 6), CUSTOMER, MAJOR, PKG, LD_COUNT, PKG_CODE,  ' ', PRODUCT,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', DECODE(GUBUN, 'WIP', 1, '설비대수', 2, 'CAPA현황', 3, '당일 실적', 4, 'D0 잔량', 5, 'D1 잔량', 6, 'D2 잔량', 7, '당주 잔량', 8, '차주 잔량', 9, '월간 잔량', 10) 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT (SELECT DATA_1 FROM MGCMTBLDAT@RPTTOMES WHERE FACTORY = 'HMVA2' AND TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = MAT_GRP_1) AS CUSTOMER, MAT_GRP_9 AS MAJOR, MAT_GRP_10 AS PKG, MAT_GRP_6 AS LD_COUNT, MAT_CMF_11 AS PKG_CODE,  ' ', CONV_MAT_ID AS PRODUCT,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ' 
     , MAX(DECODE(OPER_GRP_1, 'HMK3A', 'T', '', 'F', 'F')) AS HMK3A 
     , MAX(DECODE(OPER_GRP_1, 'QC_GATE', 'T', '', 'F', 'F')) AS QC_GATE 
     , MAX(DECODE(OPER_GRP_1, 'PVI', 'T', '', 'F', 'F')) AS PVI 
     , MAX(DECODE(OPER_GRP_1, 'AVI', 'T', '', 'F', 'F')) AS AVI 
     , MAX(DECODE(OPER_GRP_1, 'SIG', 'T', '', 'F', 'F')) AS SIG 
     , MAX(DECODE(OPER_GRP_1, 'SBA', 'T', '', 'F', 'F')) AS SBA 
     , MAX(DECODE(OPER_GRP_1, 'TIN', 'T', '', 'F', 'F')) AS TIN 
     , MAX(DECODE(OPER_GRP_1, 'TRIM', 'T', '', 'F', 'F')) AS TRIM 
     , MAX(DECODE(OPER_GRP_1, 'MK', 'T', '', 'F', 'F')) AS MK 
     , MAX(DECODE(OPER_GRP_1, 'CURE', 'T', '', 'F', 'F')) AS CURE 
     , MAX(DECODE(OPER_GRP_1, 'MOLD', 'T', '', 'F', 'F')) AS MOLD 
     , MAX(DECODE(OPER_GRP_1, 'GATE', 'T', '', 'F', 'F')) AS GATE 
     , MAX(DECODE(OPER_GRP_1, 'WB9', 'T', '', 'F', 'F')) AS WB9 
     , MAX(DECODE(OPER_GRP_1, 'DA9', 'T', '', 'F', 'F')) AS DA9 
     , MAX(DECODE(OPER_GRP_1, 'WB8', 'T', '', 'F', 'F')) AS WB8 
     , MAX(DECODE(OPER_GRP_1, 'DA8', 'T', '', 'F', 'F')) AS DA8 
     , MAX(DECODE(OPER_GRP_1, 'WB7', 'T', '', 'F', 'F')) AS WB7 
     , MAX(DECODE(OPER_GRP_1, 'DA7', 'T', '', 'F', 'F')) AS DA7 
     , MAX(DECODE(OPER_GRP_1, 'WB6', 'T', '', 'F', 'F')) AS WB6 
     , MAX(DECODE(OPER_GRP_1, 'DA6', 'T', '', 'F', 'F')) AS DA6 
     , MAX(DECODE(OPER_GRP_1, 'WB5', 'T', '', 'F', 'F')) AS WB5 
     , MAX(DECODE(OPER_GRP_1, 'DA5', 'T', '', 'F', 'F')) AS DA5 
     , MAX(DECODE(OPER_GRP_1, 'WB4', 'T', '', 'F', 'F')) AS WB4 
     , MAX(DECODE(OPER_GRP_1, 'DA4', 'T', '', 'F', 'F')) AS DA4 
     , MAX(DECODE(OPER_GRP_1, 'WB3', 'T', '', 'F', 'F')) AS WB3 
     , MAX(DECODE(OPER_GRP_1, 'DA3', 'T', '', 'F', 'F')) AS DA3  
     , MAX(DECODE(OPER_GRP_1, 'WB2', 'T', '', 'F', 'F')) AS WB2 
     , MAX(DECODE(OPER_GRP_1, 'DA2', 'T', '', 'F', 'F')) AS DA2 
     , MAX(DECODE(OPER_GRP_1, 'WB1', 'T', '', 'F', 'F')) AS WB1 
     , MAX(DECODE(OPER_GRP_1, 'DA1', 'T', '', 'F', 'F')) AS DA1 
     , MAX(DECODE(OPER_GRP_1, 'SP', 'T', '', 'F', 'F')) AS SP 
     , MAX(DECODE(OPER_GRP_1, 'SAW', 'T', '', 'F', 'F')) AS SAW 
     , MAX(DECODE(OPER_GRP_1, 'BG', 'T', '', 'F', 'F')) AS BG 
     , MAX(DECODE(OPER_GRP_1, 'HMK2A','T', '', 'F', 'F')) AS HMK2A 
  FROM ( 
        SELECT MAT.FACTORY, MAT.MAT_GRP_1, MAT.MAT_GRP_9, MAT.MAT_GRP_10, MAT.MAT_GRP_6, MAT.MAT_CMF_11,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT.MAT_ID, MAT.DELETE_FLAG 
             , CASE WHEN MAT.MAT_GRP_1 = 'SE' AND MAT.MAT_GRP_9 = 'MEMORY' THEN 'SEK_________-___' || SUBSTR(MAT.MAT_ID, -3) 
                                                                    WHEN MAT.MAT_GRP_1 = 'HX' THEN MAT.MAT_CMF_10 
                                                                    ELSE MAT_ID 
                                                               END CONV_MAT_ID 
          FROM MWIPMATDEF MAT 
       ) MAT 
     , ( 
        SELECT A.MAT_ID 
                     , CASE WHEN B.OPER IN ('A0400', 'A0401', 'A0333') THEN 'DA1' 
                            WHEN B.OPER IN ('A0402') THEN 'DA2' 
                            WHEN B.OPER IN ('A0403') THEN 'DA3' 
                            WHEN B.OPER IN ('A0404') THEN 'DA4' 
                            WHEN B.OPER IN ('A0405') THEN 'DA5' 
                            WHEN B.OPER IN ('A0406') THEN 'DA6' 
                            WHEN B.OPER IN ('A0407') THEN 'DA7' 
                            WHEN B.OPER IN ('A0408') THEN 'DA8' 
                            WHEN B.OPER IN ('A0409') THEN 'DA9' 
                            WHEN B.OPER IN ('A0600', 'A0601') THEN 'WB1' 
                            WHEN B.OPER IN ('A0602') THEN 'WB2' 
                            WHEN B.OPER IN ('A0603') THEN 'WB3' 
                            WHEN B.OPER IN ('A0604') THEN 'WB4' 
                            WHEN B.OPER IN ('A0605') THEN 'WB5' 
                            WHEN B.OPER IN ('A0606') THEN 'WB6' 
                            WHEN B.OPER IN ('A0607') THEN 'WB7' 
                            WHEN B.OPER IN ('A0608') THEN 'WB8' 
                            WHEN B.OPER IN ('A0609') THEN 'WB9' 
                            ELSE ' ' 
                        END OPER_GRP_1 
          FROM MWIPMATDEF A 
             , MWIPFLWOPR@RPTTOMES B 
         WHERE 1=1 
           AND A.FACTORY = B.FACTORY 
           AND A.FIRST_FLOW = B.FLOW 
           AND A.FACTORY = 'HMVA2' 
           AND A.DELETE_FLAG = ' ' 
           AND A.MAT_TYPE = 'FG' 
           AND A.MAT_GRP_5 IN ('-', 'Merge') 
           AND A.MAT_ID LIKE '%' 
       ) A 
 WHERE 1=1 
   AND MAT.FACTORY = 'HMVA2' 
   AND MAT.DELETE_FLAG = ' ' 
   AND MAT.MAT_ID = A.MAT_ID  
 GROUP BY MAT.MAT_GRP_1, MAT.MAT_GRP_9, MAT.MAT_GRP_10, MAT.MAT_GRP_6, MAT.MAT_CMF_11,  ' ', CONV_MAT_ID,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ' 
 ORDER BY DECODE(MAT_GRP_1, 'SE', 1, 'HX', 2, 'IM', 3, 'FC', 4, 'IG', 5, 6), CUSTOMER, MAJOR, PKG, LD_COUNT, PKG_CODE,  ' ', PRODUCT,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ' 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE) AS START_DAY 
     , MAX(SYS_DATE) AS END_DAY 
     , PLAN_YEAR||DECODE(LENGTH(PLAN_WEEK), 1, '0'||PLAN_WEEK, PLAN_WEEK) AS WEEK
  FROM MWIPCALDEF 
 WHERE CALENDAR_ID = 'OTD'
   AND (PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) IN ( 
                                                SELECT WW
                                                  FROM (
                                                        SELECT WW
                                                             , ROW_NUMBER() OVER(ORDER BY WW) AS RNK
                                                          FROM (
                                                                SELECT DISTINCT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW
                                                                  FROM MWIPCALDEF
                                                                 WHERE CALENDAR_ID = 'OTD'
                                                                   AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') >= (
                                                                                                              SELECT MAX(PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) AS WW
                                                                                                                FROM MWIPCALDEF
                                                                                                               WHERE CALENDAR_ID = 'OTD'
                                                                                                                 AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') < (SELECT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW FROM MWIPCALDEF WHERE CALENDAR_ID = 'OTD' AND SYS_DATE = '20200721')
                                                                                                                 AND SYS_DATE >= TO_CHAR(TO_DATE('20200721', 'YYYYMMDD')-14, 'YYYYMMDD')
                                                                                                             )
                                                               ) 
                                                       )
                                                 WHERE RNK <= 7
                                               ) 
 GROUP BY PLAN_YEAR, PLAN_WEEK 
 ORDER BY PLAN_YEAR, PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE) AS START_DAY 
     , MAX(SYS_DATE) AS END_DAY 
     , PLAN_YEAR||DECODE(LENGTH(PLAN_WEEK), 1, '0'||PLAN_WEEK, PLAN_WEEK) AS WEEK
  FROM MWIPCALDEF 
 WHERE CALENDAR_ID = 'SE'
   AND (PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) IN ( 
                                                SELECT WW
                                                  FROM (
                                                        SELECT WW
                                                             , ROW_NUMBER() OVER(ORDER BY WW) AS RNK
                                                          FROM (
                                                                SELECT DISTINCT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW
                                                                  FROM MWIPCALDEF
                                                                 WHERE CALENDAR_ID = 'SE'
                                                                   AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') >= (
                                                                                                              SELECT MAX(PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) AS WW
                                                                                                                FROM MWIPCALDEF
                                                                                                               WHERE CALENDAR_ID = 'SE'
                                                                                                                 AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') < (SELECT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW FROM MWIPCALDEF WHERE CALENDAR_ID = 'SE' AND SYS_DATE = '20200721')
                                                                                                                 AND SYS_DATE >= TO_CHAR(TO_DATE('20200721', 'YYYYMMDD')-14, 'YYYYMMDD')
                                                                                                             )
                                                               ) 
                                                       )
                                                 WHERE RNK <= 7
                                               ) 
 GROUP BY PLAN_YEAR, PLAN_WEEK 
 ORDER BY PLAN_YEAR, PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT (SELECT DATA_1 FROM MGCMTBLDAT@RPTTOMES WHERE FACTORY = 'HMVA2' AND TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = MAT_GRP_1) AS CUSTOMER, MAT_GRP_9 AS MAJOR, MAT_GRP_10 AS PKG, MAT_GRP_6 AS LD_COUNT, MAT_CMF_11 AS PKG_CODE,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ' 
     , ROUND(SUM(PLAN)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS PLAN 
     , ROUND(SUM(SHP)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS SHP 
     , ROUND(SUM(DEF)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS DEF 
     , GUBUN 
     , ROUND(SUM(HMK3A)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS HMK3A 
     , ROUND(SUM(QC_GATE)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS QC_GATE 
     , ROUND(SUM(PVI)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS PVI 
     , ROUND(SUM(AVI)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS AVI 
     , ROUND(SUM(SIG)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS SIG 
     , ROUND(SUM(SBA)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS SBA 
     , ROUND(SUM(TIN)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS TIN 
     , ROUND(SUM(TRIM)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS TRIM 
     , ROUND(SUM(MK)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS MK 
     , ROUND(SUM(CURE)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS CURE 
     , ROUND(SUM(MOLD)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS MOLD 
     , ROUND(SUM(GATE)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS GATE 
     , ROUND(SUM(WB9)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS WB9 
     , ROUND(SUM(DA9)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS DA9 
     , ROUND(SUM(WB8)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS WB8 
     , ROUND(SUM(DA8)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS DA8 
     , ROUND(SUM(WB7)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS WB7 
     , ROUND(SUM(DA7)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS DA7 
     , ROUND(SUM(WB6)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS WB6 
     , ROUND(SUM(DA6)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS DA6 
     , ROUND(SUM(WB5)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS WB5 
     , ROUND(SUM(DA5)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS DA5 
     , ROUND(SUM(WB4)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS WB4 
     , ROUND(SUM(DA4)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS DA4 
     , ROUND(SUM(WB3)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS WB3 
     , ROUND(SUM(DA3)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS DA3 
     , ROUND(SUM(WB2)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS WB2 
     , ROUND(SUM(DA2)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS DA2 
     , ROUND(SUM(WB1)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS WB1 
     , ROUND(SUM(DA1)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS DA1 
     , ROUND(SUM(SP)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS SP 
     , ROUND(SUM(SAW)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS SAW 
     , ROUND(SUM(BG)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS BG 
     , ROUND(SUM(HMK2A)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS HMK2A 
     , ROUND(SUM(WIP_DEF)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS WIP_DEF 
  FROM (  
        SELECT MAT_GRP_1, MAT_GRP_9, MAT_GRP_10, MAT_GRP_6, MAT_CMF_11,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', GUBUN 
             , MAX(PLAN) AS PLAN 
             , MAX(SHP) AS SHP 
             , MAX(DEF) AS DEF 
             , SUM(DECODE(OPER_GRP_1, 'HMK3A', SUM_DEF, 0)) AS HMK3A 
             , SUM(DECODE(OPER_GRP_1, 'QC_GATE', SUM_DEF, 0)) AS QC_GATE 
             , SUM(DECODE(OPER_GRP_1, 'PVI', SUM_DEF, 0)) AS PVI 
             , SUM(DECODE(OPER_GRP_1, 'AVI', SUM_DEF, 0)) AS AVI 
             , SUM(DECODE(OPER_GRP_1, 'SIG', SUM_DEF, 0)) AS SIG 
             , SUM(DECODE(OPER_GRP_1, 'SBA', SUM_DEF, 0)) AS SBA 
             , SUM(DECODE(OPER_GRP_1, 'TIN', SUM_DEF, 0)) AS TIN 
             , SUM(DECODE(OPER_GRP_1, 'TRIM', SUM_DEF, 0)) AS TRIM 
             , SUM(DECODE(OPER_GRP_1, 'MK', SUM_DEF, 0)) AS MK 
             , SUM(DECODE(OPER_GRP_1, 'CURE', SUM_DEF, 0)) AS CURE 
             , SUM(DECODE(OPER_GRP_1, 'MOLD', SUM_DEF, 0)) AS MOLD 
             , SUM(DECODE(OPER_GRP_1, 'GATE', SUM_DEF, 0)) AS GATE 
             , SUM(DECODE(OPER_GRP_1, 'WB9', SUM_DEF, 0)) AS WB9 
             , SUM(DECODE(OPER_GRP_1, 'DA9', SUM_DEF, 0)) AS DA9 
             , SUM(DECODE(OPER_GRP_1, 'WB8', SUM_DEF, 0)) AS WB8 
             , SUM(DECODE(OPER_GRP_1, 'DA8', SUM_DEF, 0)) AS DA8 
             , SUM(DECODE(OPER_GRP_1, 'WB7', SUM_DEF, 0)) AS WB7 
             , SUM(DECODE(OPER_GRP_1, 'DA7', SUM_DEF, 0)) AS DA7 
             , SUM(DECODE(OPER_GRP_1, 'WB6', SUM_DEF, 0)) AS WB6 
             , SUM(DECODE(OPER_GRP_1, 'DA6', SUM_DEF, 0)) AS DA6 
             , SUM(DECODE(OPER_GRP_1, 'WB5', SUM_DEF, 0)) AS WB5 
             , SUM(DECODE(OPER_GRP_1, 'DA5', SUM_DEF, 0)) AS DA5 
             , SUM(DECODE(OPER_GRP_1, 'WB4', SUM_DEF, 0)) AS WB4 
             , SUM(DECODE(OPER_GRP_1, 'DA4', SUM_DEF, 0)) AS DA4 
             , SUM(DECODE(OPER_GRP_1, 'WB3', SUM_DEF, 0)) AS WB3 
             , SUM(DECODE(OPER_GRP_1, 'DA3', SUM_DEF, 0)) AS DA3 
             , SUM(DECODE(OPER_GRP_1, 'WB2', SUM_DEF, 0)) AS WB2 
             , SUM(DECODE(OPER_GRP_1, 'DA2', SUM_DEF, 0)) AS DA2 
             , SUM(DECODE(OPER_GRP_1, 'WB1', SUM_DEF, 0)) AS WB1 
             , SUM(DECODE(OPER_GRP_1, 'DA1', SUM_DEF, 0)) AS DA1 
             , SUM(DECODE(OPER_GRP_1, 'SP', SUM_DEF, 0)) AS SP 
             , SUM(DECODE(OPER_GRP_1, 'SAW', SUM_DEF, 0)) AS SAW 
             , SUM(DECODE(OPER_GRP_1, 'BG', SUM_DEF, 0)) AS BG 
             , SUM(DECODE(OPER_GRP_1, 'HMK2A',SUM_DEF, 0)) AS HMK2A 
             , MAX(WIP_TTL) AS WIP_TTL 
             , MAX(DEF) - MAX(WIP_TTL) AS WIP_DEF 
          FROM ( 
                SELECT MAT_GRP_1, MAT_GRP_9, MAT_GRP_10, MAT_GRP_6, MAT_CMF_11,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ' 
                     , OPER_GRP_1 
                     , DECODE(SEQ, 1, 'WIP', 2, '설비대수', 3, 'CAPA현황', 4, '당일 실적', 5, 'D0 잔량', 6, 'D1 잔량', 7, 'D2 잔량', 8, '당주 잔량', 9, '차주 잔량', 10, '월간 잔량') AS GUBUN 
                     , SUM(DECODE(SEQ, 1, 0, 2, 0, 3, 0, 4, 0, 5, D0_PLAN, 6, D1_PLAN, 7, D2_PLAN, 8, WEEK_PLAN, 9, WEEK2_PLAN, 10, MON_PLAN)) AS PLAN  
                     , SUM(DECODE(SEQ, 1, 0, 2, 0, 3, 0, 4, 0, 5, SHP_TODAY, 6, SHP_D1, 7, SHP_D2, 8, SHP_WEEK, 9, SHP2_WEEK, 10, SHP_MONTH)) AS SHP 
                     , SUM(DECODE(SEQ, 1, 0, 2, 0, 3, 0, 4, 0, 5, D0_DEF, 6, D1_DEF, 7, D2_DEF, 8, WEEK_DEF, 9, WEEK2_DEF, 10, MONTH_DEF)) AS DEF 
                     , SUM(DECODE(SEQ, 1, WIP_QTY, 2, RES_CNT, 3, RES_CAPA, 4, ASSY_END_QTY, 5, D0_SUM_QUANTITY, 6, D1_SUM_QUANTITY, 7, D2_SUM_QUANTITY, 8, WEEK_SUM_QUANTITY, 9, WEEK2_SUM_QUANTITY, 10, MONTH_SUM_QUANTITY)) AS SUM_DEF 
                     , MAX(DECODE(SEQ, 1, 0, 2, 0, 3, 0, 4, 0, WIP_TTL)) AS WIP_TTL 
                  FROM ( 
                        SELECT MAT_GRP_1, MAT_GRP_9, MAT_GRP_10, MAT_GRP_6, MAT_CMF_11,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', OPER_GRP_1 
                             , SUM(NVL(D0_PLAN,0)) AS D0_PLAN, SUM(NVL(SHP_TODAY,0)) AS SHP_TODAY, SUM(NVL(D0_DEF,0)) AS D0_DEF 
                             , SUM(NVL(D1_PLAN,0)) AS D1_PLAN, SUM(NVL(SHP_D1,0)) AS SHP_D1, SUM(NVL(D1_DEF,0)) AS D1_DEF 
                             , SUM(NVL(D2_PLAN,0)) AS D2_PLAN, SUM(NVL(SHP_D2,0)) AS SHP_D2, SUM(NVL(D2_DEF,0)) AS D2_DEF 
                             , SUM(NVL(WEEK_PLAN,0)) AS WEEK_PLAN, SUM(NVL(SHP_WEEK,0)) AS SHP_WEEK, SUM(NVL(WEEK_DEF,0)) AS WEEK_DEF 
                             , SUM(NVL(WEEK2_PLAN,0)) AS WEEK2_PLAN, SUM(NVL(SHP2_WEEK,0)) AS SHP2_WEEK, SUM(NVL(WEEK2_DEF,0)) AS WEEK2_DEF 
                             , SUM(NVL(MON_PLAN,0)) AS MON_PLAN, SUM(NVL(SHP_MONTH,0)) AS SHP_MONTH, SUM(NVL(MONTH_DEF,0)) AS MONTH_DEF 
                             , SUM(NVL(ASSY_END_QTY,0)) AS ASSY_END_QTY 
                             , SUM(NVL(WIP_QTY,0)) AS WIP_QTY 
                             , SUM(SUM(WIP_QTY)) OVER(PARTITION BY MAT_GRP_1, MAT_GRP_9, MAT_GRP_10, MAT_GRP_6, MAT_CMF_11,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ') AS WIP_TTL 
                             , SUM(RES_CNT) AS RES_CNT 
                             , SUM(RES_CAPA) AS RES_CAPA 
                             , SUM(NVL(D0_DEF-WIP_SUM_QUANTITY+WIP_QTY,0)) AS D0_SUM_QUANTITY 
                             , SUM(NVL(D1_DEF-WIP_SUM_QUANTITY+WIP_QTY,0)) AS D1_SUM_QUANTITY 
                             , SUM(NVL(D2_DEF-WIP_SUM_QUANTITY+WIP_QTY,0)) AS D2_SUM_QUANTITY 
                             , SUM(NVL(WEEK_DEF-WIP_SUM_QUANTITY+WIP_QTY,0)) AS WEEK_SUM_QUANTITY 
                             , SUM(NVL(WEEK2_DEF-WIP_SUM_QUANTITY+WIP_QTY,0)) AS WEEK2_SUM_QUANTITY 
                             , SUM(NVL(MONTH_DEF-WIP_SUM_QUANTITY+WIP_QTY,0)) AS MONTH_SUM_QUANTITY 
                          FROM ( 
                                SELECT MAT.MAT_GRP_1, MAT.MAT_GRP_2, MAT.MAT_GRP_4, MAT.MAT_GRP_5, MAT.MAT_GRP_6, MAT.MAT_GRP_7, MAT.MAT_GRP_8, MAT.MAT_GRP_9, MAT.MAT_GRP_10, MAT.MAT_CMF_10, MAT.MAT_CMF_7, MAT.MAT_CMF_8, MAT.MAT_CMF_11, MAT.MAT_ID, MAT.CONV_MAT_ID, MAT.OPER_GRP_1 
                                     , A.D0_PLAN, A.SHP_TODAY, A.D0_DEF 
                                     , A.D1_PLAN, A.SHP_D1, A.D1_DEF 
                                     , A.D2_PLAN, A.SHP_D2, A.D2_DEF 
                                     , A.WEEK_PLAN, A.SHP_WEEK, A.WEEK_DEF 
                                     , A.WEEK2_PLAN, A.SHP2_WEEK, A.WEEK2_DEF 
                                     , A.MON_PLAN, A.SHP_MONTH, A.MONTH_DEF 
                                     , A.D0_ORI_PLAN 
                                     , NVL(B.ASSY_END_QTY,0) AS ASSY_END_QTY 
                                     , MAX(NVL(B.ASSY_END_QTY,0)) OVER(PARTITION BY MAT.MAT_GRP_1, MAT.MAT_GRP_9, MAT.MAT_GRP_10, MAT.MAT_GRP_6, MAT.MAT_CMF_11,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ') AS CHK_ASSY_END_QTY 
                                     , NVL(WIP.QTY,0) AS WIP_QTY 
                                     , RES_CNT 
                                     , RES_CAPA 
                                     , SUM(NVL(WIP.QTY,0)) OVER(PARTITION BY A.MAT_ID ORDER BY MAT.MAT_ID, DECODE(MAT.OPER_GRP_1, 'HMK3A', 1, 'QC_GATE', 2, 'PVI', 3, 'AVI', 4, 'SIG', 5, 'SBA', 6, 'TIN', 7, 'TRIM', 8, 'MK', 9, 'CURE', 10, 'MOLD', 11, 'GATE', 12 
                                                                                                                                , 'WB9', 13, 'DA9', 14, 'WB8', 15, 'DA8', 16, 'WB7', 17, 'DA7', 18, 'WB6', 19, 'DA6', 20, 'WB5', 21, 'DA5', 22, 'WB4', 23, 'DA4', 24 
                                                                                                                                , 'WB3', 25, 'DA3', 26, 'WB2', 27, 'DA2', 28, 'WB1', 29, 'DA1', 30, 'SP', 31, 'SAW', 32, 'BG', 33, 'HMK2A',34, 35)) AS WIP_SUM_QUANTITY 
                                  FROM ( 
                                        SELECT MAT_GRP_1, MAT_GRP_2, MAT_GRP_4, MAT_GRP_5, MAT_GRP_6, MAT_GRP_7, MAT_GRP_8, MAT_GRP_9, MAT_GRP_10, MAT_CMF_10, MAT_CMF_7, MAT_CMF_8, MAT_CMF_11, MAT_ID, OPER_GRP_1 
                                             , CASE WHEN MAT_GRP_1 = 'SE' AND MAT_GRP_9 = 'MEMORY' THEN 'SEK_________-___' || SUBSTR(MAT_ID, -3) 
                                                    WHEN MAT_GRP_1 = 'HX' THEN MAT_CMF_10 
                                                    ELSE MAT_ID 
                                                END CONV_MAT_ID 
                                          FROM ( 
                                                SELECT * 
                                                  FROM (
                                                        SELECT A.* 
                                                          FROM MWIPMATDEF A
                                                         WHERE 1=1 
                                                           AND FACTORY = 'HMVA2' 
                                                           AND DELETE_FLAG = ' ' 
                                                           AND MAT_TYPE = 'FG' 
                                                           AND MAT_ID LIKE '%' 
                                                           AND MAT_GRP_10 NOT LIKE 'COB%' 
                                                       ) 
                                               ) 
                                             , ( 
                                                SELECT DECODE(LEVEL, 1, 'HMK3A', 2, 'QC_GATE', 3, 'PVI', 4, 'AVI', 5, 'SIG', 6, 'SBA', 7, 'TIN', 8, 'TRIM', 9, 'MK', 10, 'CURE', 11, 'MOLD', 12, 'GATE' 
                                                                   , 13, 'WB9', 14, 'DA9', 15, 'WB8', 16, 'DA8', 17, 'WB7', 18, 'DA7', 19, 'WB6', 20, 'DA6', 21, 'WB5', 22, 'DA5', 23, 'WB4', 24, 'DA4'
                                                                   , 25, 'WB3', 26, 'DA3', 27, 'WB2', 28, 'DA2', 29, 'WB1', 30, 'DA1', 31, 'SP', 32, 'SAW', 33, 'BG', 34, 'HMK2A' 
                                                             ) OPER_GRP_1 
                                                  FROM DUAL CONNECT BY LEVEL <= 34 
                                               ) 
                                       ) MAT 
                                     , ( 
                                        SELECT MAT.MAT_ID 
                                             , SUM(NVL(D0_PLAN, 0) + (NVL(WEEK1_TTL, 0) - NVL(SHP_WEEK_TTL, 0))) AS D0_PLAN 
                                             , SUM(NVL(D0_PLAN, 0)) AS D0_ORI_PLAN 
                                             , SUM(NVL(SHP_TODAY, 0)) AS SHP_TODAY 
                                             , SUM(NVL(D0_PLAN, 0) + (NVL(WEEK1_TTL, 0) - NVL(SHP_WEEK_TTL, 0)) - NVL(SHP_TODAY, 0)) AS D0_DEF 
                                             , SUM(NVL(D1_PLAN, 0)) AS D1_PLAN 
                                             , 0 AS SHP_D1 
                                             , SUM(NVL(D1_PLAN, 0) + NVL(D0_PLAN, 0) + (NVL(WEEK1_TTL, 0) - NVL(SHP_WEEK_TTL, 0)) - NVL(SHP_TODAY, 0)) AS D1_DEF 
                                             , SUM(NVL(D2_PLAN, 0)) AS D2_PLAN 
                                             , 0 AS SHP_D2 
                                             , SUM(NVL(D2_PLAN, 0) + NVL(D1_PLAN, 0) + NVL(D0_PLAN, 0) + (NVL(WEEK1_TTL, 0) - NVL(SHP_WEEK_TTL, 0)) - NVL(SHP_TODAY, 0)) AS D2_DEF 
                                             , SUM(NVL(WEEK1_PLAN, 0)) AS WEEK_PLAN 
                                             , SUM(NVL(SHP_WEEK, 0)) AS SHP_WEEK 
                                             , SUM(NVL(WEEK1_PLAN, 0) - NVL(SHP_WEEK, 0)) AS WEEK_DEF 
                                             , SUM(NVL(WEEK2_PLAN, 0)) AS WEEK2_PLAN 
                                             , 0 AS SHP2_WEEK 
                                             , SUM(NVL(WEEK2_PLAN, 0) + NVL(WEEK1_PLAN, 0) - NVL(SHP_WEEK, 0)) AS WEEK2_DEF 
                                             , SUM(NVL(CASE WHEN MAT.MAT_GRP_3 IN ('COB') THEN ROUND(MON.RESV_FIELD1/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0) 
                                                    ELSE MON.RESV_FIELD1 
                                                END,0)) MON_PLAN 
                                             , SUM(NVL(SHP_MONTH, 0)) AS SHP_MONTH 
                                             , SUM(NVL(CASE WHEN MAT.MAT_GRP_3 IN ('COB') THEN ROUND(NVL(MON.RESV_FIELD1,0)/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0)-NVL(SHP_MONTH, 0) 
                                                    ELSE NVL(MON.RESV_FIELD1, 0)-NVL(SHP_MONTH, 0) 
                                                END,0)) MONTH_DEF 
                                          FROM MWIPMATDEF MAT 
                                             , ( 
                                                SELECT FACTORY, MAT_ID 
                                                     , SUM(CASE WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 1 THEN D0_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 2 THEN D0_QTY + D1_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 3 THEN D0_QTY + D1_QTY + D2_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 4 THEN D0_QTY + D1_QTY + D2_QTY + D3_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 5 THEN D0_QTY + D1_QTY + D2_QTY + D3_QTY + D4_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 6 THEN D0_QTY + D1_QTY + D2_QTY + D3_QTY + D4_QTY + D5_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 3 THEN D0_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 4 THEN D0_QTY + D1_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 5 THEN D0_QTY + D1_QTY + D2_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 6 THEN D0_QTY + D1_QTY + D2_QTY + D3_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 7 THEN D0_QTY + D1_QTY + D2_QTY + D3_QTY + D4_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 1 THEN D0_QTY + D1_QTY + D2_QTY + D3_QTY + D4_QTY + D5_QTY 
                                                                ELSE 0 
                                                           END) AS WEEK1_TTL 
                                                     , SUM(W1_QTY) AS WEEK1_PLAN 
                                                     , SUM(W2_QTY) AS WEEK2_PLAN 
                                                     , SUM(NVL(W1_QTY,0) + NVL(W2_QTY,0)) AS WEEK_TTL 
                                                     , SUM(CASE WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 7 THEN D0_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 1 THEN D1_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 2 THEN D2_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 3 THEN D3_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 4 THEN D4_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 5 THEN D5_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 6 THEN D6_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 2 THEN D0_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 3 THEN D1_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 4 THEN D2_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 5 THEN D3_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 6 THEN D4_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 7 THEN D5_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 1 THEN D6_QTY 
                                                                ELSE 0 
                                                           END) AS D0_PLAN 
                                                     , SUM(CASE WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 7 THEN D1_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 1 THEN D2_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 2 THEN D3_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 3 THEN D4_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 4 THEN D5_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 5 THEN D6_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 6 THEN D7_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 2 THEN D1_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 3 THEN D2_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 4 THEN D3_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 5 THEN D4_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 6 THEN D5_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 7 THEN D6_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 1 THEN D7_QTY 
                                                                ELSE 0 
                                                           END) AS D1_PLAN 
                                                     , SUM(CASE WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 7 THEN D2_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 1 THEN D3_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 2 THEN D4_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 3 THEN D5_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 4 THEN D6_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 5 THEN D7_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 6 THEN D8_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 2 THEN D2_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 3 THEN D3_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 4 THEN D4_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 5 THEN D5_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 6 THEN D6_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 7 THEN D7_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 1 THEN D8_QTY 
                                                                ELSE 0 
                                                           END) AS D2_PLAN 
                                                  FROM ( 
                                                        SELECT FACTORY, MAT_ID, 'OTD' AS CALENDAR_ID 
                                                             , SUM(DECODE(PLAN_WEEK, '202030', D0_QTY, 0)) AS D0_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202030', D1_QTY, 0)) AS D1_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202030', D2_QTY, 0)) AS D2_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202030', D3_QTY, 0)) AS D3_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202030', D4_QTY, 0)) AS D4_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202030', D5_QTY, 0)) AS D5_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202030', D6_QTY, 0)) AS D6_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202031', D0_QTY, 0)) AS D7_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202031', D1_QTY, 0)) AS D8_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202031', D2_QTY, 0)) AS D9_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202031', D3_QTY, 0)) AS D10_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202031', D4_QTY, 0)) AS D11_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202031', D5_QTY, 0)) AS D12_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202031', D6_QTY, 0)) AS D13_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202030', WW_QTY, 0)) AS W1_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202031', WW_QTY, 0)) AS W2_QTY  
                                                          FROM RWIPPLNWEK  
                                                         WHERE 1=1  
                                                           AND FACTORY = 'HMVA2'  
                                                           AND GUBUN = '3'  
                                                           AND MAT_ID NOT LIKE 'SES%' 
                                                           AND PLAN_WEEK IN ('202030','202031') 
                                                         GROUP BY FACTORY, MAT_ID  
                                                         UNION ALL 
                                                        SELECT FACTORY, MAT_ID, 'SE' AS CALENDAR_ID  
                                                             , SUM(DECODE(PLAN_WEEK, '202030', D0_QTY, 0)) AS D0_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202030', D1_QTY, 0)) AS D1_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202030', D2_QTY, 0)) AS D2_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202030', D3_QTY, 0)) AS D3_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202030', D4_QTY, 0)) AS D4_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202030', D5_QTY, 0)) AS D5_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202030', D6_QTY, 0)) AS D6_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202031', D0_QTY, 0)) AS D7_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202031', D1_QTY, 0)) AS D8_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202031', D2_QTY, 0)) AS D9_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202031', D3_QTY, 0)) AS D10_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202031', D4_QTY, 0)) AS D11_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202031', D5_QTY, 0)) AS D12_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202031', D6_QTY, 0)) AS D13_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202030', WW_QTY, 0)) AS W1_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202031', WW_QTY, 0)) AS W2_QTY  
                                                          FROM RWIPPLNWEK  
                                                         WHERE 1=1  
                                                           AND FACTORY = 'HMVA2'  
                                                           AND GUBUN = '3'  
                                                           AND MAT_ID LIKE 'SES%' 
                                                           AND PLAN_WEEK IN ('202030','202031') 
                                                         GROUP BY FACTORY, MAT_ID  
                                                       )  
                                                 GROUP BY FACTORY, MAT_ID  
                                               ) PLN 
                                             , (  
                                                SELECT FACTORY,MAT_ID, RESV_FIELD1  
                                                  FROM (  
                                                        SELECT FACTORY, MAT_ID, SUM(RESV_FIELD1) AS RESV_FIELD1   
                                                          FROM (  
                                                                SELECT FACTORY, MAT_ID, SUM(TO_NUMBER(DECODE(RESV_FIELD1,' ',0,RESV_FIELD1))) AS RESV_FIELD1  
                                                                  FROM CWIPPLNMON  
                                                                 WHERE 1=1  
                                                                   AND FACTORY = 'HMVA2'  
                                                                   AND PLAN_MONTH = '202007' 
                                                                 GROUP BY FACTORY, MAT_ID 
                                                               )  
                                                         GROUP BY FACTORY, MAT_ID 
                                                       ) 
                                               ) MON 
                                             , (  
                                                SELECT MAT_ID  
                                                     , SUM(CASE WHEN SHP_QTY_1 > 0 AND WORK_DATE = '20200721' THEN NVL(SHP_QTY_1, 0) ELSE 0 END) AS SHP_TODAY  
                                                     , SUM(CASE WHEN SHP_QTY_1 > 0 AND MAT_ID LIKE 'SES%' AND WORK_DATE BETWEEN '20200720' AND '20200721' THEN NVL(SHP_QTY_1, 0)  
                                                                WHEN SHP_QTY_1 > 0 AND MAT_ID NOT LIKE 'SES%' AND WORK_DATE BETWEEN '20200718' AND '20200721' THEN NVL(SHP_QTY_1, 0) 
                                                                ELSE 0 END) AS SHP_WEEK  
                                                     , SUM(CASE WHEN SHP_QTY_1 > 0 AND MAT_ID LIKE 'SES%' AND WORK_DATE BETWEEN '20200720' AND '20200720' THEN NVL(SHP_QTY_1, 0)  
                                                                WHEN SHP_QTY_1 > 0 AND MAT_ID NOT LIKE 'SES%' AND WORK_DATE BETWEEN '20200718' AND '20200720' THEN NVL(SHP_QTY_1, 0)  
                                                                ELSE 0 END) AS SHP_WEEK_TTL  
                                                     , SUM(CASE WHEN WORK_DATE BETWEEN '20200701' AND '20200721' THEN NVL(SHP_QTY_1, 0) END) AS SHP_MONTH  
                                                  FROM VSUMWIPOUT 
                                                 WHERE 1=1  
                                                   AND FACTORY  = 'HMVA2'  
                                                   AND LOT_TYPE = 'W'  
                                                   AND CM_KEY_2 = 'PROD'  
                                                   AND CM_KEY_3 LIKE 'P%'
                                                   AND MAT_ID NOT LIKE 'HX%'  
                                                   AND WORK_DATE BETWEEN LEAST('20200701', '20200718', '20200720') AND '20200721' 
                                                 GROUP BY MAT_ID  
                                                 UNION ALL  
                                                SELECT MAT_ID  
                                                     , SUM(CASE WHEN SHP_QTY_1 > 0 AND WORK_DATE = '20200721' THEN NVL(SHP_QTY_1, 0) ELSE 0 END) AS SHP_TODAY  
                                                     , SUM(CASE WHEN SHP_QTY_1 > 0 AND WORK_DATE BETWEEN '20200718' AND '20200721' THEN NVL(SHP_QTY_1, 0) ELSE 0 END) AS SHP_WEEK  
                                                     , SUM(CASE WHEN SHP_QTY_1 > 0 AND WORK_DATE BETWEEN '20200718' AND '20200720' THEN NVL(SHP_QTY_1, 0) ELSE 0 END) AS SHP_WEEK_TTL  
                                                     , SUM(CASE WHEN WORK_DATE BETWEEN '20200701' AND '20200721' THEN NVL(SHP_QTY_1, 0) END) AS SHP_MONTH  
                                                  FROM VSUMWIPOUT_06 
                                                 WHERE 1=1  
                                                   AND FACTORY  = 'HMVA2'  
                                                   AND LOT_TYPE = 'W'  
                                                   AND CM_KEY_2 = 'PROD'  
                                                   AND CM_KEY_3 LIKE 'P%'
                                                   AND MAT_ID LIKE 'HX%'  
                                                   AND WORK_DATE BETWEEN '20200701' AND '20200721' 
                                                 GROUP BY MAT_ID 
                                               ) SHP 
                                         WHERE 1=1 
                                           AND MAT.FACTORY = 'HMVA2' 
                                           AND MAT.MAT_TYPE = 'FG' 
                                           AND MAT.DELETE_FLAG = ' ' 
                                           AND MAT.MAT_ID = PLN.MAT_ID(+) 
                                           AND MAT.MAT_ID = MON.MAT_ID(+) 
                                           AND MAT.MAT_ID = SHP.MAT_ID(+) 
                                         GROUP BY MAT.MAT_ID 
                                         ORDER BY MAT.MAT_ID 
                                       ) A 
                                     , ( 
                                        SELECT MAT_ID, OPER_GRP_1 
                                             , SUM(ASSY_END_QTY) AS ASSY_END_QTY 
                                          FROM ( 
                                                SELECT B.MAT_ID 
                                                     , CASE WHEN OPER IN ('A0000', 'A000N') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'HMK2A' 
                                                            WHEN OPER IN ('A0040') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'BG' 
                                                            WHEN OPER IN ('A0200', 'A0230') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'SAW' 
                                                            WHEN OPER IN ('A0400', 'A0401', 'A0333') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'DA1' 
                                                            WHEN OPER IN ('A0402') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'DA2' 
                                                            WHEN OPER IN ('A0403') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'DA3' 
                                                            WHEN OPER IN ('A0404') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'DA4' 
                                                            WHEN OPER IN ('A0405') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'DA5' 
                                                            WHEN OPER IN ('A0406') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'DA6' 
                                                            WHEN OPER IN ('A0407') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'DA7' 
                                                            WHEN OPER IN ('A0408') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'DA8' 
                                                            WHEN OPER IN ('A0409') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'DA9' 
                                                            WHEN OPER IN ('A0600','A0601') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'WB1' 
                                                            WHEN OPER IN ('A0602') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'WB2' 
                                                            WHEN OPER IN ('A0603') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'WB3' 
                                                            WHEN OPER IN ('A0604') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'WB4' 
                                                            WHEN OPER IN ('A0605') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'WB5' 
                                                            WHEN OPER IN ('A0606') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'WB6' 
                                                            WHEN OPER IN ('A0607') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'WB7' 
                                                            WHEN OPER IN ('A0608') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'WB8' 
                                                            WHEN OPER IN ('A0609') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'WB9' 
                                                            WHEN OPER IN ('A0800', 'A0801', 'A0802', 'A0803', 'A0804', 'A0805', 'A0806', 'A0807', 'A0808', 'A0809') AND MAT_GRP_5 IN ('-', 'Merge') THEN 'GATE' 
                                                            WHEN OPER IN ('A1000', 'A0910') THEN 'MOLD' 
                                                            WHEN OPER IN ('A1100') THEN 'CURE' 
                                                            WHEN OPER IN ('A1150', 'A1500') THEN 'MK' 
                                                            WHEN OPER IN ('A1200') THEN 'TRIM' 
                                                            WHEN OPER IN ('A1450') THEN 'TIN' 
                                                            WHEN OPER IN ('A1300') THEN 'SBA' 
                                                            WHEN OPER IN ('A1750', 'A1800', 'A1900', 'A1825') THEN 'SIG' 
                                                            WHEN OPER IN ('A2000') THEN 'AVI' 
                                                            WHEN OPER IN ('A2050') THEN 'PVI' 
                                                            WHEN OPER IN ('A2100') THEN 'QC_GATE' 
                                                            WHEN OPER IN ('AZ010') THEN 'HMK3A' 
                                                            ELSE ' ' 
                                                        END OPER_GRP_1 
                                                     , (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END) ASSY_END_QTY 
                                                  FROM ( 
                                                        SELECT FACTORY, MAT_ID, OPER, LOT_TYPE, WORK_DATE, CM_KEY_3 
                                                             , SUM(END_LOT) AS END_LOT 
                                                             , SUM(END_QTY_1) AS END_QTY_1 
                                                             , SUM(END_QTY_2) AS END_QTY_2 
                                                             , SUM(CASE WHEN SHIP_QTY_1 > 0 THEN SHIP_QTY_1 ELSE 0 END) AS SHIP_QTY_1 
                                                             , SUM(CASE WHEN SHIP_QTY_2 > 0 THEN SHIP_QTY_2 ELSE 0 END) AS SHIP_QTY_2 
                                                          FROM ( 
                                                                SELECT FACTORY, MAT_ID, OPER, LOT_TYPE, WORK_DATE, CM_KEY_3 
                                                                     , DECODE(SUBSTR(OPER,2,4),'0000',SUM(S1_OPER_IN_LOT+S2_OPER_IN_LOT+S3_OPER_IN_LOT),SUM(S1_END_LOT+S2_END_LOT+S3_END_LOT)) END_LOT 
                                                                     , DECODE(SUBSTR(OPER,2,4),'0000',SUM(S1_OPER_IN_QTY_1+S2_OPER_IN_QTY_1+S3_OPER_IN_QTY_1),SUM(S1_END_QTY_1+S2_END_QTY_1+S3_END_QTY_1+S1_END_RWK_QTY_1 + S2_END_RWK_QTY_1 + S3_END_RWK_QTY_1)) END_QTY_1 
                                                                     , DECODE(SUBSTR(OPER,2,4),'0000',SUM(S1_OPER_IN_QTY_2+S2_OPER_IN_QTY_2+S3_OPER_IN_QTY_2),SUM(S1_END_QTY_2+S2_END_QTY_2+S3_END_QTY_2+S1_END_RWK_QTY_2 + S2_END_RWK_QTY_2 + S3_END_RWK_QTY_2)) END_QTY_2 
                                                                     , 0 SHIP_QTY_1 
                                                                     , 0 SHIP_QTY_2 
                                                                  FROM RSUMWIPMOV 
                                                                 WHERE FACTORY = 'HMVA2' 
                                                                   AND OPER NOT IN ('AZ010') 
                                                                   AND MAT_ID NOT LIKE 'HX%' 
                                                                 GROUP BY FACTORY, MAT_ID, OPER, LOT_TYPE, WORK_DATE, CM_KEY_3 
                                                                 UNION ALL 
                                                                SELECT FACTORY, MAT_ID 
                                                                     , 'AZ010' AS OPER 
                                                                     , LOT_TYPE, WORK_DATE, CM_KEY_3 
                                                                     , 0 END_LOT 
                                                                     , 0 END_QTY_1 
                                                                     , 0 END_QTY_2 
                                                                     , SUM(SHP_QTY_1) SHIP_QTY_1 
                                                                     , SUM(SHP_QTY_2) SHIP_QTY_2 
                                                                  FROM VSUMWIPOUT 
                                                                 WHERE FACTORY = 'HMVA2' 
                                                                   AND MAT_ID NOT LIKE 'HX%' 
                                                                 GROUP BY FACTORY, MAT_ID, LOT_TYPE, WORK_DATE, CM_KEY_3 
                                                                 UNION ALL 
                                                                SELECT FACTORY, MAT_ID, OPER, LOT_TYPE, WORK_DATE, CM_KEY_3 
                                                                     , DECODE(SUBSTR(OPER,2,4),'0000',SUM(S1_OPER_IN_LOT+S2_OPER_IN_LOT+S3_OPER_IN_LOT),SUM(S1_END_LOT+S2_END_LOT+S3_END_LOT)) END_LOT 
                                                                     , DECODE(SUBSTR(OPER,2,4),'0000',SUM(S1_OPER_IN_QTY_1+S2_OPER_IN_QTY_1+S3_OPER_IN_QTY_1),SUM(S1_END_QTY_1+S2_END_QTY_1+S3_END_QTY_1+S1_END_RWK_QTY_1 + S2_END_RWK_QTY_1 + S3_END_RWK_QTY_1)) END_QTY_1 
                                                                     , DECODE(SUBSTR(OPER,2,4),'0000',SUM(S1_OPER_IN_QTY_2+S2_OPER_IN_QTY_2+S3_OPER_IN_QTY_2),SUM(S1_END_QTY_2+S2_END_QTY_2+S3_END_QTY_2+S1_END_RWK_QTY_2 + S2_END_RWK_QTY_2 + S3_END_RWK_QTY_2)) END_QTY_2 
                                                                     , 0 SHIP_QTY_1 
                                                                     , 0 SHIP_QTY_2 
                                                                  FROM CSUMWIPMOV 
                                                                 WHERE FACTORY = 'HMVA2' 
                                                                   AND OPER NOT IN ('AZ010') 
                                                                   AND MAT_ID LIKE 'HX%' 
                                                                 GROUP BY FACTORY, MAT_ID, OPER, LOT_TYPE, WORK_DATE, CM_KEY_3 
                                                                 UNION ALL 
                                                                SELECT FACTORY, MAT_ID 
                                                                     , 'AZ010' AS OPER 
                                                                     , LOT_TYPE, WORK_DATE, CM_KEY_3 
                                                                     , 0 END_LOT 
                                                                     , 0 END_QTY_1 
                                                                     , 0 END_QTY_2 
                                                                     , SUM(SHP_QTY_1) SHIP_QTY_1 
                                                                     , SUM(SHP_QTY_2) SHIP_QTY_2 
                                                                  FROM VSUMWIPOUT_06 
                                                                 WHERE FACTORY = 'HMVA2' 
                                                                   AND MAT_ID LIKE 'HX%' 
                                                                 GROUP BY FACTORY, MAT_ID, LOT_TYPE, WORK_DATE, CM_KEY_3 
                                                               ) 
                                                         GROUP BY FACTORY, MAT_ID, OPER, LOT_TYPE, WORK_DATE, CM_KEY_3 
                                                       ) A 
                                                     , MWIPMATDEF B 
                                                 WHERE 1=1 
                                                   AND A.FACTORY  = 'HMVA2' 
                                                   AND A.FACTORY = B.FACTORY 
                                                   AND A.MAT_ID = B.MAT_ID 
                                                   AND B.MAT_TYPE = 'FG' 
                                                   AND A.MAT_ID LIKE '%' 
                                                   AND A.CM_KEY_3 LIKE 'P%'
                                                   AND A.OPER NOT IN ('00001','00002') 
                                                   AND A.WORK_DATE = '20200721' 
                                                 ) 
                                         GROUP BY MAT_ID, OPER_GRP_1 
                                        HAVING SUM(ASSY_END_QTY) > 0 
                                       ) B 
                                     , ( 
                                        SELECT MAT_ID, OPER_GRP_1, SUM(NVL(QTY,0)) QTY 
                                          FROM (  
                                                SELECT MAT_ID 
                                                     , QTY 
                                                     , CASE WHEN OPER_GRP_8 = 'HMK2A' THEN 'HMK2A' 
                                                            WHEN OPER_GRP_8 = 'B/G' THEN 'BG' 
                                                            WHEN OPER_GRP_8 = 'SAW' THEN 'SAW' 
                                                            WHEN OPER_GRP_8 = 'S/P' THEN 'SP' 
                                                            WHEN OPER_GRP_8 IN ('D/A1', 'D/A1 CURE') THEN 'DA1' 
                                                            WHEN OPER_GRP_8 IN ('D/A2', 'D/A2 CURE') THEN 'DA2' 
                                                            WHEN OPER_GRP_8 IN ('D/A3', 'D/A3 CURE') THEN 'DA3' 
                                                            WHEN OPER_GRP_8 IN ('D/A4', 'D/A4 CURE') THEN 'DA4' 
                                                            WHEN OPER_GRP_8 IN ('D/A5', 'D/A5 CURE') THEN 'DA5' 
                                                            WHEN OPER_GRP_8 IN ('D/A6', 'D/A6 CURE') THEN 'DA6' 
                                                            WHEN OPER_GRP_8 IN ('D/A7', 'D/A7 CURE') THEN 'DA7' 
                                                            WHEN OPER_GRP_8 IN ('D/A8', 'D/A8 CURE') THEN 'DA8' 
                                                            WHEN OPER_GRP_8 IN ('D/A9', 'D/A9 CURE') THEN 'DA9' 
                                                            WHEN OPER_GRP_8 = 'W/B1' THEN 'WB1' 
                                                            WHEN OPER_GRP_8 = 'W/B2' THEN 'WB2' 
                                                            WHEN OPER_GRP_8 = 'W/B3' THEN 'WB3' 
                                                            WHEN OPER_GRP_8 = 'W/B4' THEN 'WB4' 
                                                            WHEN OPER_GRP_8 = 'W/B5' THEN 'WB5' 
                                                            WHEN OPER_GRP_8 = 'W/B6' THEN 'WB6' 
                                                            WHEN OPER_GRP_8 = 'W/B7' THEN 'WB7' 
                                                            WHEN OPER_GRP_8 = 'W/B8' THEN 'WB8' 
                                                            WHEN OPER_GRP_8 = 'W/B9' THEN 'WB9' 
                                                            WHEN OPER_GRP_8 = 'GATE' AND MAT_GRP_5 = '-' THEN 'GATE' 
                                                            WHEN OPER_GRP_8 = 'GATE' AND MAT_GRP_1 = 'SE' AND MAT_GRP_5 = 'Merge' THEN 'GATE' 
                                                            WHEN OPER_GRP_8 = 'GATE' AND MAT_GRP_1 = 'HX' THEN 'GATE' 
                                                            WHEN OPER_GRP_8 = 'GATE' AND MAT_GRP_1 NOT IN ('SE','HX') AND SUBSTR(MAT_GRP_4,-1) = SUBSTR(OPER, -1) THEN 'GATE' 
                                                            WHEN OPER_GRP_8 = 'MOLD' THEN 'MOLD' 
                                                            WHEN OPER_GRP_8 = 'CURE' THEN 'CURE' 
                                                            WHEN OPER_GRP_8 = 'M/K' THEN 'MK' 
                                                            WHEN OPER_GRP_8 = 'TRIM' THEN 'TRIM' 
                                                            WHEN OPER_GRP_8 = 'TIN' THEN 'TIN' 
                                                            WHEN OPER_GRP_8 = 'S/B/A' THEN 'SBA' 
                                                            WHEN OPER_GRP_8 = 'SIG' THEN 'SIG' 
                                                            WHEN OPER_GRP_8 = 'AVI' THEN 'AVI' 
                                                            WHEN OPER_GRP_8 = 'V/I' THEN 'PVI' 
                                                            WHEN OPER_GRP_8 = 'QC GATE' THEN 'QC_GATE' 
                                                            WHEN OPER_GRP_8 = 'HMK3A' THEN 'HMK3A' 
                                                            ELSE ' ' 
                                                        END OPER_GRP_1 
                                                  FROM ( 
                                                        SELECT MAT_ID, OPER, OPER_GRP_8, MAT_GRP_1, MAT_GRP_4, MAT_GRP_5, MAT_GRP_10 
                                                             , CASE WHEN MAT_GRP_1 = 'HX' AND HX_COMP_MIN IS NOT NULL
                                                                         THEN (CASE WHEN HX_COMP_MIN <> HX_COMP_MAX AND OPER > HX_COMP_MIN AND OPER <= HX_COMP_MAX THEN QTY_1 / NVL(COMP_CNT / 2,1)
                                                                         WHEN OPER <= HX_COMP_MAX THEN QTY_1 / NVL(COMP_CNT,1)
                                                                         ELSE QTY_1 END)
                                                                    WHEN OPER <= 'A0395' THEN QTY_1 / NVL(COMP_CNT,1) 
                                                                    ELSE QTY_1 
                                                               END QTY 
                                                          FROM ( 
                                                                SELECT A.MAT_ID, B.OPER, B.OPER_GRP_8, C.MAT_GRP_1, C.MAT_GRP_4, C.MAT_GRP_5, C.MAT_GRP_10 
                                                                     , CASE WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN CASE WHEN MAT_GRP_5 IN ('1st','Merge') OR MAT_GRP_5 LIKE 'Middle%' THEN QTY_1 ELSE 0 END 
                                                                            WHEN MAT_GRP_3 IN ('COB', 'BGN') THEN ROUND(QTY_1/TO_NUMBER(DECODE(MAT_CMF_13, ' ', 1, '-', 1, MAT_CMF_13)),0) 
                                                                            ELSE QTY_1 
                                                                       END AS QTY_1 
                                                                     , COMP_CNT  
                                                                     , HX_COMP_MIN, HX_COMP_MAX 
                                                                  FROM RWIPLOTSTS A   
                                                                     , MWIPOPRDEF B   
                                                                     , VWIPMATDEF C 
                                                                 WHERE 1 = 1  
                                                                   AND A.FACTORY = B.FACTORY 
                                                                   AND A.FACTORY = C.FACTORY 
                                                                   AND A.OPER = B.OPER 
                                                                   AND A.MAT_ID = C.MAT_ID 
                                                                   AND A.FACTORY = 'HMVA2'   
                                                                   AND A.LOT_TYPE = 'W'  
                                                                   AND A.LOT_CMF_5 LIKE 'P%'
                                                                   AND A.LOT_DEL_FLAG = ' '  
                                                                   AND C.MAT_GRP_2 <> '-' 
                                                                   AND C.DELETE_FLAG = ' '  
                                                               ) 
                                                       ) 
                                               ) 
                                         WHERE 1=1 
                                           AND OPER_GRP_1 <> ' ' 
                                         GROUP BY MAT_ID, OPER_GRP_1 
                                        HAVING SUM(NVL(QTY,0)) > 0 
                                       ) WIP 
                                     , ( 
                                        SELECT A.RES_STS_2 AS MAT_ID 
                                             , A.OPER_GRP_1 
                                             , SUM(A.RES_CNT) AS RES_CNT 
                                             , SUM(TRUNC(NVL(NVL(B.UPEH,0) * 24 * A.PERCENT * A.RES_CNT, 0))) AS RES_CAPA 
                                          FROM ( 
                                                SELECT FACTORY, RES_STS_2, RES_STS_8 AS OPER, RES_GRP_6 AS RES_MODEL, RES_GRP_7 AS UPEH_GRP, COUNT(RES_ID) AS RES_CNT 
                                                     , CASE WHEN RES_STS_8 LIKE 'A06%' THEN 0.71
                                                            WHEN RES_STS_8 LIKE 'A04%' THEN 0.68
                                                            WHEN RES_STS_8 = 'A0333' THEN 0.68
                                                            ELSE 0.7
                                                       END PERCENT 
                                                     , CASE WHEN RES_STS_8 IN ('A0040') THEN 'BG' 
                                                            WHEN RES_STS_8 IN ('A0200', 'A0230') THEN 'SAW' 
                                                            WHEN RES_STS_8 IN ('A0400', 'A0401', 'A0333') THEN 'DA1' 
                                                            WHEN RES_STS_8 IN ('A0402') THEN 'DA2' 
                                                            WHEN RES_STS_8 IN ('A0403') THEN 'DA3' 
                                                            WHEN RES_STS_8 IN ('A0404') THEN 'DA4' 
                                                            WHEN RES_STS_8 IN ('A0405') THEN 'DA5' 
                                                            WHEN RES_STS_8 IN ('A0406') THEN 'DA6' 
                                                            WHEN RES_STS_8 IN ('A0407') THEN 'DA7' 
                                                            WHEN RES_STS_8 IN ('A0408') THEN 'DA8' 
                                                            WHEN RES_STS_8 IN ('A0409') THEN 'DA9' 
                                                            WHEN RES_STS_8 IN ('A0600','A0601') THEN 'WB1' 
                                                            WHEN RES_STS_8 IN ('A0602') THEN 'WB2' 
                                                            WHEN RES_STS_8 IN ('A0603') THEN 'WB3' 
                                                            WHEN RES_STS_8 IN ('A0604') THEN 'WB4' 
                                                            WHEN RES_STS_8 IN ('A0605') THEN 'WB5' 
                                                            WHEN RES_STS_8 IN ('A0606') THEN 'WB6' 
                                                            WHEN RES_STS_8 IN ('A0607') THEN 'WB7' 
                                                            WHEN RES_STS_8 IN ('A0608') THEN 'WB8' 
                                                            WHEN RES_STS_8 IN ('A0609') THEN 'WB9' 
                                                            WHEN RES_STS_8 IN ('A0800', 'A0801', 'A0802', 'A0803', 'A0804', 'A0805', 'A0806', 'A0807', 'A0808', 'A0809') THEN 'GATE' 
                                                            WHEN RES_STS_8 IN ('A1000', 'A0910') THEN 'MOLD' 
                                                            WHEN RES_STS_8 IN ('A1100') THEN 'CURE' 
                                                            WHEN RES_STS_8 IN ('A1150', 'A1500') THEN 'MK' 
                                                            WHEN RES_STS_8 IN ('A1200') THEN 'TRIM' 
                                                            WHEN RES_STS_8 IN ('A1450') THEN 'TIN' 
                                                            WHEN RES_STS_8 IN ('A1300') THEN 'SBA' 
                                                            WHEN RES_STS_8 IN ('A1750', 'A1800', 'A1900', 'A1825') THEN 'SIG' 
                                                            WHEN RES_STS_8 IN ('A2000') THEN 'AVI' 
                                                            WHEN RES_STS_8 IN ('A2050') THEN 'PVI' 
                                                            WHEN RES_STS_8 IN ('A2100') THEN 'QC_GATE' 
                                                            ELSE ' ' 
                                                       END OPER_GRP_1 
                                                  FROM MRASRESDEF 
                                                 WHERE 1 = 1  
                                                   AND FACTORY  = 'HMVA2' 
                                                   AND RES_CMF_9 = 'Y' 
                                                   AND RES_CMF_7 = 'Y' 
                                                   AND DELETE_FLAG = ' ' 
                                                   AND RES_TYPE='EQUIPMENT' 
                                                   AND (RES_STS_1 NOT IN ('C200', 'B199') OR RES_UP_DOWN_FLAG = 'U') 
                                                 GROUP BY FACTORY,RES_STS_2,RES_STS_8,RES_GRP_6,RES_GRP_7  
                                               ) A 
                                             , CRASUPHDEF B 
                                         WHERE 1=1 
                                           AND A.FACTORY = B.FACTORY(+) 
                                           AND A.OPER = B.OPER(+) 
                                           AND A.RES_MODEL = B.RES_MODEL(+) 
                                           AND A.UPEH_GRP = B.UPEH_GRP(+) 
                                           AND A.RES_STS_2 = B.MAT_ID(+) 
                                           AND A.FACTORY  = 'HMVA2' 
                                           AND A.OPER NOT IN ('00001','00002') 
                                           AND A.OPER_GRP_1 <> ' ' 
                                         GROUP BY A.RES_STS_2, A.OPER_GRP_1 
                                       ) RES 
                                 WHERE 1=1 
                                   AND MAT.MAT_ID = A.MAT_ID(+) 
                                   AND MAT.MAT_ID = B.MAT_ID(+) 
                                   AND MAT.MAT_ID = WIP.MAT_ID(+) 
                                   AND MAT.MAT_ID = RES.MAT_ID(+) 
                                   AND MAT.OPER_GRP_1 = B.OPER_GRP_1(+) 
                                   AND MAT.OPER_GRP_1 = WIP.OPER_GRP_1(+) 
                                   AND MAT.OPER_GRP_1 = RES.OPER_GRP_1(+) 
                               ) 
                         GROUP BY MAT_GRP_1, MAT_GRP_9, MAT_GRP_10, MAT_GRP_6, MAT_CMF_11,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', OPER_GRP_1 
                        HAVING ( 
                                SUM(NVL(D0_ORI_PLAN,0))+SUM(NVL(D1_PLAN,0))+SUM(NVL(D2_PLAN,0))+SUM(NVL(WEEK_PLAN,0))+SUM(NVL(WEEK2_PLAN,0))+SUM(NVL(MON_PLAN,0))+SUM(NVL(WIP_QTY,0)) 
                              + SUM(NVL(D0_PLAN,0))+SUM(NVL(SHP_WEEK,0))+SUM(NVL(SHP_MONTH,0))+SUM(NVL(ASSY_END_QTY,0)) 
                               ) > 0 
                      ) 
                    , (SELECT LEVEL AS SEQ FROM DUAL CONNECT BY LEVEL <= 10) 
                 GROUP BY MAT_GRP_1, MAT_GRP_9, MAT_GRP_10, MAT_GRP_6, MAT_CMF_11,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', OPER_GRP_1, DECODE(SEQ, 1, 'WIP', 2, '설비대수', 3, 'CAPA현황', 4, '당일 실적', 5, 'D0 잔량', 6, 'D1 잔량', 7, 'D2 잔량', 8, '당주 잔량', 9, '차주 잔량', 10, '월간 잔량') 
               ) 
         GROUP BY  MAT_GRP_1, MAT_GRP_9, MAT_GRP_10, MAT_GRP_6, MAT_CMF_11,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', GUBUN 
       ) A 
 WHERE 1=1 
 GROUP BY MAT_GRP_1, MAT_GRP_9, MAT_GRP_10, MAT_GRP_6, MAT_CMF_11,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', GUBUN 
 ORDER BY DECODE(MAT_GRP_1, 'SE', 1, 'HX', 2, 'IM', 3, 'FC', 4, 'IG', 5, 6), CUSTOMER, MAJOR, PKG, LD_COUNT, PKG_CODE,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', DECODE(GUBUN, 'WIP', 1, '설비대수', 2, 'CAPA현황', 3, '당일 실적', 4, 'D0 잔량', 5, 'D1 잔량', 6, 'D2 잔량', 7, '당주 잔량', 8, '차주 잔량', 9, '월간 잔량', 10) 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT (SELECT DATA_1 FROM MGCMTBLDAT@RPTTOMES WHERE FACTORY = 'HMVA2' AND TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = MAT_GRP_1) AS CUSTOMER, MAT_GRP_9 AS MAJOR, MAT_GRP_10 AS PKG, MAT_GRP_6 AS LD_COUNT, MAT_CMF_11 AS PKG_CODE,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ' 
     , MAX(DECODE(OPER_GRP_1, 'HMK3A', 'T', '', 'F', 'F')) AS HMK3A 
     , MAX(DECODE(OPER_GRP_1, 'QC_GATE', 'T', '', 'F', 'F')) AS QC_GATE 
     , MAX(DECODE(OPER_GRP_1, 'PVI', 'T', '', 'F', 'F')) AS PVI 
     , MAX(DECODE(OPER_GRP_1, 'AVI', 'T', '', 'F', 'F')) AS AVI 
     , MAX(DECODE(OPER_GRP_1, 'SIG', 'T', '', 'F', 'F')) AS SIG 
     , MAX(DECODE(OPER_GRP_1, 'SBA', 'T', '', 'F', 'F')) AS SBA 
     , MAX(DECODE(OPER_GRP_1, 'TIN', 'T', '', 'F', 'F')) AS TIN 
     , MAX(DECODE(OPER_GRP_1, 'TRIM', 'T', '', 'F', 'F')) AS TRIM 
     , MAX(DECODE(OPER_GRP_1, 'MK', 'T', '', 'F', 'F')) AS MK 
     , MAX(DECODE(OPER_GRP_1, 'CURE', 'T', '', 'F', 'F')) AS CURE 
     , MAX(DECODE(OPER_GRP_1, 'MOLD', 'T', '', 'F', 'F')) AS MOLD 
     , MAX(DECODE(OPER_GRP_1, 'GATE', 'T', '', 'F', 'F')) AS GATE 
     , MAX(DECODE(OPER_GRP_1, 'WB9', 'T', '', 'F', 'F')) AS WB9 
     , MAX(DECODE(OPER_GRP_1, 'DA9', 'T', '', 'F', 'F')) AS DA9 
     , MAX(DECODE(OPER_GRP_1, 'WB8', 'T', '', 'F', 'F')) AS WB8 
     , MAX(DECODE(OPER_GRP_1, 'DA8', 'T', '', 'F', 'F')) AS DA8 
     , MAX(DECODE(OPER_GRP_1, 'WB7', 'T', '', 'F', 'F')) AS WB7 
     , MAX(DECODE(OPER_GRP_1, 'DA7', 'T', '', 'F', 'F')) AS DA7 
     , MAX(DECODE(OPER_GRP_1, 'WB6', 'T', '', 'F', 'F')) AS WB6 
     , MAX(DECODE(OPER_GRP_1, 'DA6', 'T', '', 'F', 'F')) AS DA6 
     , MAX(DECODE(OPER_GRP_1, 'WB5', 'T', '', 'F', 'F')) AS WB5 
     , MAX(DECODE(OPER_GRP_1, 'DA5', 'T', '', 'F', 'F')) AS DA5 
     , MAX(DECODE(OPER_GRP_1, 'WB4', 'T', '', 'F', 'F')) AS WB4 
     , MAX(DECODE(OPER_GRP_1, 'DA4', 'T', '', 'F', 'F')) AS DA4 
     , MAX(DECODE(OPER_GRP_1, 'WB3', 'T', '', 'F', 'F')) AS WB3 
     , MAX(DECODE(OPER_GRP_1, 'DA3', 'T', '', 'F', 'F')) AS DA3  
     , MAX(DECODE(OPER_GRP_1, 'WB2', 'T', '', 'F', 'F')) AS WB2 
     , MAX(DECODE(OPER_GRP_1, 'DA2', 'T', '', 'F', 'F')) AS DA2 
     , MAX(DECODE(OPER_GRP_1, 'WB1', 'T', '', 'F', 'F')) AS WB1 
     , MAX(DECODE(OPER_GRP_1, 'DA1', 'T', '', 'F', 'F')) AS DA1 
     , MAX(DECODE(OPER_GRP_1, 'SP', 'T', '', 'F', 'F')) AS SP 
     , MAX(DECODE(OPER_GRP_1, 'SAW', 'T', '', 'F', 'F')) AS SAW 
     , MAX(DECODE(OPER_GRP_1, 'BG', 'T', '', 'F', 'F')) AS BG 
     , MAX(DECODE(OPER_GRP_1, 'HMK2A','T', '', 'F', 'F')) AS HMK2A 
  FROM ( 
        SELECT MAT.FACTORY, MAT.MAT_GRP_1, MAT.MAT_GRP_9, MAT.MAT_GRP_10, MAT.MAT_GRP_6, MAT.MAT_CMF_11,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT.MAT_ID, MAT.DELETE_FLAG 
             , CASE WHEN MAT.MAT_GRP_1 = 'SE' AND MAT.MAT_GRP_9 = 'MEMORY' THEN 'SEK_________-___' || SUBSTR(MAT.MAT_ID, -3) 
                                                                    WHEN MAT.MAT_GRP_1 = 'HX' THEN MAT.MAT_CMF_10 
                                                                    ELSE MAT_ID 
                                                               END CONV_MAT_ID 
          FROM MWIPMATDEF MAT 
       ) MAT 
     , ( 
        SELECT A.MAT_ID 
                     , CASE WHEN B.OPER IN ('A0400', 'A0401', 'A0333') THEN 'DA1' 
                            WHEN B.OPER IN ('A0402') THEN 'DA2' 
                            WHEN B.OPER IN ('A0403') THEN 'DA3' 
                            WHEN B.OPER IN ('A0404') THEN 'DA4' 
                            WHEN B.OPER IN ('A0405') THEN 'DA5' 
                            WHEN B.OPER IN ('A0406') THEN 'DA6' 
                            WHEN B.OPER IN ('A0407') THEN 'DA7' 
                            WHEN B.OPER IN ('A0408') THEN 'DA8' 
                            WHEN B.OPER IN ('A0409') THEN 'DA9' 
                            WHEN B.OPER IN ('A0600', 'A0601') THEN 'WB1' 
                            WHEN B.OPER IN ('A0602') THEN 'WB2' 
                            WHEN B.OPER IN ('A0603') THEN 'WB3' 
                            WHEN B.OPER IN ('A0604') THEN 'WB4' 
                            WHEN B.OPER IN ('A0605') THEN 'WB5' 
                            WHEN B.OPER IN ('A0606') THEN 'WB6' 
                            WHEN B.OPER IN ('A0607') THEN 'WB7' 
                            WHEN B.OPER IN ('A0608') THEN 'WB8' 
                            WHEN B.OPER IN ('A0609') THEN 'WB9' 
                            ELSE ' ' 
                        END OPER_GRP_1 
          FROM MWIPMATDEF A 
             , MWIPFLWOPR@RPTTOMES B 
         WHERE 1=1 
           AND A.FACTORY = B.FACTORY 
           AND A.FIRST_FLOW = B.FLOW 
           AND A.FACTORY = 'HMVA2' 
           AND A.DELETE_FLAG = ' ' 
           AND A.MAT_TYPE = 'FG' 
           AND A.MAT_GRP_5 IN ('-', 'Merge') 
           AND A.MAT_ID LIKE '%' 
       ) A 
 WHERE 1=1 
   AND MAT.FACTORY = 'HMVA2' 
   AND MAT.DELETE_FLAG = ' ' 
   AND MAT.MAT_ID = A.MAT_ID  
 GROUP BY MAT.MAT_GRP_1, MAT.MAT_GRP_9, MAT.MAT_GRP_10, MAT.MAT_GRP_6, MAT.MAT_CMF_11,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ' 
 ORDER BY DECODE(MAT_GRP_1, 'SE', 1, 'HX', 2, 'IM', 3, 'FC', 4, 'IG', 5, 6), CUSTOMER, MAJOR, PKG, LD_COUNT, PKG_CODE,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ' 

-------------------------------------------------------------
SELECT * FROM RWEBUSRDEF WHERE FACTORY = :FACTORY AND USER_ID= :USER_ID
-------------------------------------------------------------
SELECT A.FUNC_GRP_SEQ,A.SEC_GRP_ID,A.FUNC_GRP_ID,NVL(A.FUNC_NAME, ' ') FUNC_NAME, NVL(B.FUNC_DESC, ' ') FUNC_DESC, LANGUAGE_1, LANGUAGE_2, LANGUAGE_3
  FROM RWEBGRPFUN A, RWEBFUNDEF B
 WHERE A.FACTORY = :p_FACTORY
   AND A.SEC_GRP_ID = :p_SEC_GRP_ID
   AND A.FUNC_NAME=B.FUNC_NAME(+)
 ORDER BY A.FUNC_GRP_SEQ, A.FUNC_SEQ
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
 SELECT PLAN_WEEK V1    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_DATE = TO_CHAR(SYSDATE,'yyyymmdd')      AND ROWNUM = 1  
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT LANGUAGE_2 FROM RWEBFUNDEF WHERE FUNC_NAME = 'PRD010405'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT FACTORY Code, FAC_DESC Data
  FROM MWIPFACDEF
 WHERE FAC_GRP_5 = 'Y' 
 ORDER BY FAC_GRP_4 ASC
-------------------------------------------------------------
SELECT OPER, OPER_DESC  FROM MWIPOPRDEF
  WHERE FACTORY = 'HMVA2'  AND OPER NOT IN ('00001', '00002') AND OPER NOT LIKE 'V%' ORDER BY DECODE(OPER_CMF_2, ' ', 99999, TO_NUMBER(OPER_CMF_2)), OPER
-------------------------------------------------------------
SELECT OPER, OPER_DESC  FROM MWIPOPRDEF
  WHERE FACTORY = 'HMVA2'  AND OPER NOT IN ('00001', '00002') AND OPER NOT LIKE 'V%' ORDER BY DECODE(OPER_CMF_2, ' ', 99999, TO_NUMBER(OPER_CMF_2)), OPER
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT A.RES_ID Code, ' ' Data
  FROM MRASRESDEF A
 WHERE 1 = 1 
   AND DELETE_FLAG = ' ' 
   AND RES_ID NOT LIKE '%$%' 
   AND A.FACTORY  = 'HMVA2'  
 ORDER BY 1,2
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', SUMMERY.OPER,  ' ',  ' '
     , SUMMERY.MAT_ID 
     , SUMMERY.LOT_ID 
     , SUMMERY.LOT_CMF_5 
     , SUMMERY.END_RES_ID 
     , SUMMERY.QTY_1 + SUMMERY.LOSS_QTY AS OPER_IN_QTY_1 
     , SUMMERY.QTY_1 
     , ROUND(SUMMERY.QTY_1/(SUMMERY.QTY_1 + SUMMERY.LOSS_QTY)*100,3) AS YIELD 
     , TO_CHAR(TO_DATE(SUMMERY.OPER_IN_TIME,'yyyymmddhh24miss')) AS OPER_IN_TIME 
     , TO_CHAR(TO_DATE(SUMMERY.TRAN_TIME,'yyyymmddhh24miss')) AS TRAN_TIME 
     , DECODE(SUMMERY.TRAN_CMF_18, ' ', ' ', SUMMERY.IN_USER_DESC || '(' || SUMMERY.TRAN_CMF_18 || ')') AS IN_USER_ID 
     , SUMMERY.END_USER_DESC || '(' || SUMMERY.TRAN_USER_ID || ')' AS END_USER_ID 
     , SUMMERY.LOT_CMF_10 
     , SUMMERY.TRAN_CMF_2 AS HD 
     , SUMMERY.TRAN_CMF_3 AS PGM 
     , SUMMERY.CRR_ID 
     , '' EPOXY 
     , '' LF 
     , '' GW 
     , '' MATAL_CARD 
     , '' EMC_LOT 
     , '' EMC_CAN 
     , '' EMC_TYPE 
     , SUMMERY.TRAN_COMMENT 
     , SUMMERY.QTY_2 
     , SUMMERY.TRAN_CMF_17 AS CV 
     , SUMMERY.LOT_CMF_7 AS ASSY_SITE 
     , SUMMERY.LOT_CMF_11 AS SHIP_SITE 
     , SUMMERY.TRAN_CMF_7 AS REWORK_BALL 
     , SUMMERY.TRAN_CMF_8 AS REWORK_CLEAN 
     , SUMMERY.TRAN_CMF_9 AS REWORK_PRINT 
     , LOT_CMF_3 
  FROM (  
        SELECT MAT_ID 
             , LOT_ID 
             , LOT_CMF_5 
             , LOT_CMF_10 
             , OLD_OPER AS OPER 
             , END_RES_ID 
             , TRAN_CMF_2 
             , TRAN_CMF_3 
             , NVL(( 
                    SELECT SUM(LOSS_QTY) AS LOSS_QTY 
                      FROM RWIPLOTLSM 
                     WHERE LOT_ID = A.LOT_ID 
                       AND OPER = A.OLD_OPER 
                     GROUP BY LOT_ID 
                  ), 0) AS LOSS_QTY 
             , CASE WHEN TRAN_CODE = 'SHIP' AND FACTORY = OLD_FACTORY THEN OLD_QTY_1 - QTY_1 
                    ELSE QTY_1 
               END QTY_1 
             , DECODE(START_TIME, ' ', OLD_OPER_IN_TIME, START_TIME) AS OPER_IN_TIME 
             , TRAN_TIME 
             , TRAN_USER_ID 
             , CRR_ID 
             , TRAN_COMMENT 
             , ( 
                SELECT USER_DESC FROM RWEBUSRDEF WHERE FACTORY = 'SYSTEM' AND USER_ID = A.TRAN_USER_ID 
               ) AS END_USER_DESC 
             , QTY_2 
             , CASE WHEN A.OLD_OPER LIKE 'A040%' AND A.RESV_FLAG_5 = 'Y' AND (SELECT CASE WHEN (TRAN_CMF_4 = 'RFID TAG WRITE : SUCCESS') 
                                                                                            OR (RESV_FLAG_5 = 'Y' AND TRAN_CMF_19 = 'RFID' AND TRAN_USER_ID = 'EIS') THEN 'RFID' 
                                                                                          ELSE ' ' 
                                                                                     END  
                                                                                FROM RWIPLOTHIS 
                                                                               WHERE FACTORY = A.OLD_FACTORY 
                                                                                 AND LOT_TYPE = A.OLD_LOT_TYPE 
                                                                                 AND LOT_ID = A.LOT_ID 
                                                                                 AND OPER = A.OLD_OPER 
                                                                                 AND TRAN_TIME < A.TRAN_TIME 
                                                                                 AND FACTORY = 'HMVA2' 
                                                                                 AND LOT_TYPE = 'W' 
                                                                                 AND RESV_FLAG_5 = 'Y' 
                                                                                 AND TRAN_CODE = 'START' 
                                                                                 AND HIST_DEL_FLAG = ' ') = 'RFID' THEN TRAN_CMF_18 || '[RFID]' 
                     WHEN A.OLD_OPER NOT LIKE 'A040%' AND A.RESV_FLAG_5 = 'Y' AND A.TRAN_CMF_19 = 'RFID' AND A.TRAN_USER_ID = 'EIS' THEN TRAN_CMF_18 || '[' || TRIM(TRAN_CMF_19) || ']' 
                     ELSE TRAN_CMF_18 
               END AS TRAN_CMF_18 
             , ( 
                SELECT USER_DESC FROM RWEBUSRDEF WHERE FACTORY = 'SYSTEM' AND USER_ID = A.TRAN_CMF_18 
               ) AS IN_USER_DESC 
             , LOT_CMF_7 
             , TRAN_CMF_17 
             , LOT_CMF_11 
             , TRAN_CMF_7 
             , TRAN_CMF_8 
             , TRAN_CMF_9 
             , LOT_CMF_3 
          FROM RWIPLOTHIS A 
         WHERE 1=1 
           AND TRAN_TIME BETWEEN '20200717220000' AND '20200721215959' 
           AND OLD_FACTORY = 'HMVA2' 
           AND TRAN_CODE IN ('END','SHIP') 
           AND LOT_TYPE = 'W' 
           AND HIST_DEL_FLAG = ' ' 
           AND MAT_ID LIKE 'AK%' 
           AND OLD_OPER IN ('A0400')
           AND END_RES_ID LIKE '%'
           AND LOT_CMF_5 LIKE '%'
       ) SUMMERY 
     , MWIPMATDEF MAT 
 WHERE 1=1 
   AND SUMMERY.MAT_ID = MAT.MAT_ID 
   AND MAT.FACTORY = 'HMVA2' 
   AND MAT.MAT_TYPE = 'FG' 
 ORDER BY  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', SUMMERY.OPER,  ' ',  ' ',SUMMERY.END_RES_ID,LOT_ID,MAT_ID 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
SELECT  KEY_1,DATA_3,DATA_4  
FROM    MGCMTBLDAT  
WHERE   1=1 
        AND FACTORY = '' 
        AND TABLE_NAME='LOSS_CODE' 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT PLAN_WEEK V1    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_DATE = TO_CHAR(SYSDATE,'yyyymmdd')      AND ROWNUM = 1  
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT LANGUAGE_2 FROM RWEBFUNDEF WHERE FUNC_NAME = 'YLD040601'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT FACTORY Code, FAC_DESC Data
  FROM MWIPFACDEF
 WHERE FAC_GRP_5 = 'Y' 
 ORDER BY FAC_GRP_4 ASC
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT  KEY_1,DATA_3,DATA_4  
FROM    MGCMTBLDAT  
WHERE   1=1 
        AND FACTORY = 'HMVA2' 
        AND TABLE_NAME='LOSS_CODE' 
        AND DATA_3='Y'  
ORDER BY TO_NUMBER(DATA_4) 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT  KEY_1,DATA_3,DATA_4  
FROM    MGCMTBLDAT  
WHERE   1=1 
        AND FACTORY = 'HMVA2' 
        AND TABLE_NAME='LOSS_CODE' 
        AND DATA_3='Y'  
ORDER BY TO_NUMBER(DATA_4) 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
WITH DT AS
(
 SELECT * 
   FROM CWIPLOTEND 
  WHERE 1=1 
    AND TRAN_TIME BETWEEN '20200719220000' AND '20200722215959' 
    AND TRAN_CODE = 'END' 
    AND LOT_TYPE = 'W' 
    AND FACTORY = 'HMVA2' 
    AND HIST_DEL_FLAG = ' ' 
    AND TRAN_CMF_1 = 'CLOSE' 
    AND MAT_ID LIKE 'AK%'
)
SELECT  ' ',  ' ', SUMMERY.MAT_GRP_6, SUMMERY.MAT_GRP_3,  ' ',  ' ',  ' ',  ' ', SUMMERY.MAT_ID
     , SUMMERY.LOT_ID,SUMMERY.IN_TIME,SUMMERY.SHIP_TIME 
     , SUMMERY.TAT AS TAT 
     , SUMMERY.BE_OUT + NVL(SUM(LOSS.BE_LOSS_QTY),0) + NVL(SUM(LOSS.IL_LOSS_QTY),0) AS IL_IN 
     , SUMMERY.BE_OUT + NVL(SUM(LOSS.BE_LOSS_QTY),0) AS IL_OUT 
     , ROUND(((SUMMERY.BE_OUT + NVL(SUM(LOSS.BE_LOSS_QTY),0))/(SUMMERY.BE_OUT + NVL(SUM(LOSS.BE_LOSS_QTY),0) + NVL(SUM(LOSS.IL_LOSS_QTY),0)))*100,3)||'%' AS IL_YIELD 
     , SUMMERY.BE_OUT + NVL(SUM(LOSS.BE_LOSS_QTY),0) AS BE_IN 
     , SUMMERY.BE_OUT 
     , ROUND((SUMMERY.BE_OUT/(SUMMERY.BE_OUT + NVL(SUM(LOSS.BE_LOSS_QTY),0)))*100,3)||'%' AS BE_YIELD 
     , SUMMERY.OUT_QTY + NVL(SUM(LOSS.LOSS_QTY),0) AS IN_QTY  
     , SUMMERY.OUT_QTY 
     , ROUND(SUMMERY.OUT_QTY/(SUMMERY.OUT_QTY + NVL(SUM(LOSS.LOSS_QTY),0))*100,3)||'%' AS YIELD 
     , '' AS BONUS 
     , NVL(SUM(LOSS.LOSS_QTY),0) AS LOSS_QTY 
     , SUM(DECODE(LOSS.LOSS_CODE,'80',LOSS.LOSS_QTY,0))  LOSS0
     , SUM(DECODE(LOSS.LOSS_CODE,'81',LOSS.LOSS_QTY,0))  LOSS1
     , SUM(DECODE(LOSS.LOSS_CODE,'82',LOSS.LOSS_QTY,0))  LOSS2
     , SUM(DECODE(LOSS.LOSS_CODE,'83',LOSS.LOSS_QTY,0))  LOSS3
     , SUM(DECODE(LOSS.LOSS_CODE,'84',LOSS.LOSS_QTY,0))  LOSS4
     , SUM(DECODE(LOSS.LOSS_CODE,'85',LOSS.LOSS_QTY,0))  LOSS5
     , SUM(DECODE(LOSS.LOSS_CODE,'86',LOSS.LOSS_QTY,0))  LOSS6
     , SUM(DECODE(LOSS.LOSS_CODE,'87',LOSS.LOSS_QTY,0))  LOSS7
     , SUM(DECODE(LOSS.LOSS_CODE,'88',LOSS.LOSS_QTY,0))  LOSS8
     , SUM(DECODE(LOSS.LOSS_CODE,'100',LOSS.LOSS_QTY,0))  LOSS9
     , SUM(DECODE(LOSS.LOSS_CODE,'102',LOSS.LOSS_QTY,0))  LOSS10
     , SUM(DECODE(LOSS.LOSS_CODE,'104',LOSS.LOSS_QTY,0))  LOSS11
     , SUM(DECODE(LOSS.LOSS_CODE,'105',LOSS.LOSS_QTY,0))  LOSS12
     , SUM(DECODE(LOSS.LOSS_CODE,'106',LOSS.LOSS_QTY,0))  LOSS13
     , SUM(DECODE(LOSS.LOSS_CODE,'107',LOSS.LOSS_QTY,0))  LOSS14
     , SUM(DECODE(LOSS.LOSS_CODE,'110',LOSS.LOSS_QTY,0))  LOSS15
     , SUM(DECODE(LOSS.LOSS_CODE,'111',LOSS.LOSS_QTY,0))  LOSS16
     , SUM(DECODE(LOSS.LOSS_CODE,'112',LOSS.LOSS_QTY,0))  LOSS17
     , SUM(DECODE(LOSS.LOSS_CODE,'114',LOSS.LOSS_QTY,0))  LOSS18
     , SUM(DECODE(LOSS.LOSS_CODE,'115',LOSS.LOSS_QTY,0))  LOSS19
     , SUM(DECODE(LOSS.LOSS_CODE,'116',LOSS.LOSS_QTY,0))  LOSS20
     , SUM(DECODE(LOSS.LOSS_CODE,'119',LOSS.LOSS_QTY,0))  LOSS21
     , SUM(DECODE(LOSS.LOSS_CODE,'120',LOSS.LOSS_QTY,0))  LOSS22
     , SUM(DECODE(LOSS.LOSS_CODE,'121',LOSS.LOSS_QTY,0))  LOSS23
     , SUM(DECODE(LOSS.LOSS_CODE,'122',LOSS.LOSS_QTY,0))  LOSS24
     , SUM(DECODE(LOSS.LOSS_CODE,'123',LOSS.LOSS_QTY,0))  LOSS25
     , SUM(DECODE(LOSS.LOSS_CODE,'124',LOSS.LOSS_QTY,0))  LOSS26
     , SUM(DECODE(LOSS.LOSS_CODE,'125',LOSS.LOSS_QTY,0))  LOSS27
     , SUM(DECODE(LOSS.LOSS_CODE,'127',LOSS.LOSS_QTY,0))  LOSS28
     , SUM(DECODE(LOSS.LOSS_CODE,'128',LOSS.LOSS_QTY,0))  LOSS29
     , SUM(DECODE(LOSS.LOSS_CODE,'200',LOSS.LOSS_QTY,0))  LOSS30
     , SUM(DECODE(LOSS.LOSS_CODE,'202',LOSS.LOSS_QTY,0))  LOSS31
     , SUM(DECODE(LOSS.LOSS_CODE,'203',LOSS.LOSS_QTY,0))  LOSS32
     , SUM(DECODE(LOSS.LOSS_CODE,'204',LOSS.LOSS_QTY,0))  LOSS33
     , SUM(DECODE(LOSS.LOSS_CODE,'205',LOSS.LOSS_QTY,0))  LOSS34
     , SUM(DECODE(LOSS.LOSS_CODE,'206',LOSS.LOSS_QTY,0))  LOSS35
     , SUM(DECODE(LOSS.LOSS_CODE,'207',LOSS.LOSS_QTY,0))  LOSS36
     , SUM(DECODE(LOSS.LOSS_CODE,'208',LOSS.LOSS_QTY,0))  LOSS37
     , SUM(DECODE(LOSS.LOSS_CODE,'209',LOSS.LOSS_QTY,0))  LOSS38
     , SUM(DECODE(LOSS.LOSS_CODE,'210',LOSS.LOSS_QTY,0))  LOSS39
     , SUM(DECODE(LOSS.LOSS_CODE,'211',LOSS.LOSS_QTY,0))  LOSS40
     , SUM(DECODE(LOSS.LOSS_CODE,'212',LOSS.LOSS_QTY,0))  LOSS41
     , SUM(DECODE(LOSS.LOSS_CODE,'213',LOSS.LOSS_QTY,0))  LOSS42
     , SUM(DECODE(LOSS.LOSS_CODE,'214',LOSS.LOSS_QTY,0))  LOSS43
     , SUM(DECODE(LOSS.LOSS_CODE,'215',LOSS.LOSS_QTY,0))  LOSS44
     , SUM(DECODE(LOSS.LOSS_CODE,'216',LOSS.LOSS_QTY,0))  LOSS45
     , SUM(DECODE(LOSS.LOSS_CODE,'217',LOSS.LOSS_QTY,0))  LOSS46
     , SUM(DECODE(LOSS.LOSS_CODE,'218',LOSS.LOSS_QTY,0))  LOSS47
     , SUM(DECODE(LOSS.LOSS_CODE,'219',LOSS.LOSS_QTY,0))  LOSS48
     , SUM(DECODE(LOSS.LOSS_CODE,'222',LOSS.LOSS_QTY,0))  LOSS49
     , SUM(DECODE(LOSS.LOSS_CODE,'224',LOSS.LOSS_QTY,0))  LOSS50
     , SUM(DECODE(LOSS.LOSS_CODE,'225',LOSS.LOSS_QTY,0))  LOSS51
     , SUM(DECODE(LOSS.LOSS_CODE,'250',LOSS.LOSS_QTY,0))  LOSS52
     , SUM(DECODE(LOSS.LOSS_CODE,'251',LOSS.LOSS_QTY,0))  LOSS53
     , SUM(DECODE(LOSS.LOSS_CODE,'265',LOSS.LOSS_QTY,0))  LOSS54
     , SUM(DECODE(LOSS.LOSS_CODE,'270',LOSS.LOSS_QTY,0))  LOSS55
     , SUM(DECODE(LOSS.LOSS_CODE,'291',LOSS.LOSS_QTY,0))  LOSS56
     , SUM(DECODE(LOSS.LOSS_CODE,'299',LOSS.LOSS_QTY,0))  LOSS57
     , SUM(DECODE(LOSS.LOSS_CODE,'302',LOSS.LOSS_QTY,0))  LOSS58
     , SUM(DECODE(LOSS.LOSS_CODE,'303',LOSS.LOSS_QTY,0))  LOSS59
     , SUM(DECODE(LOSS.LOSS_CODE,'304',LOSS.LOSS_QTY,0))  LOSS60
     , SUM(DECODE(LOSS.LOSS_CODE,'305',LOSS.LOSS_QTY,0))  LOSS61
     , SUM(DECODE(LOSS.LOSS_CODE,'306',LOSS.LOSS_QTY,0))  LOSS62
     , SUM(DECODE(LOSS.LOSS_CODE,'307',LOSS.LOSS_QTY,0))  LOSS63
     , SUM(DECODE(LOSS.LOSS_CODE,'308',LOSS.LOSS_QTY,0))  LOSS64
     , SUM(DECODE(LOSS.LOSS_CODE,'311',LOSS.LOSS_QTY,0))  LOSS65
     , SUM(DECODE(LOSS.LOSS_CODE,'312',LOSS.LOSS_QTY,0))  LOSS66
     , SUM(DECODE(LOSS.LOSS_CODE,'313',LOSS.LOSS_QTY,0))  LOSS67
     , SUM(DECODE(LOSS.LOSS_CODE,'314',LOSS.LOSS_QTY,0))  LOSS68
     , SUM(DECODE(LOSS.LOSS_CODE,'315',LOSS.LOSS_QTY,0))  LOSS69
     , SUM(DECODE(LOSS.LOSS_CODE,'316',LOSS.LOSS_QTY,0))  LOSS70
     , SUM(DECODE(LOSS.LOSS_CODE,'317',LOSS.LOSS_QTY,0))  LOSS71
     , SUM(DECODE(LOSS.LOSS_CODE,'318',LOSS.LOSS_QTY,0))  LOSS72
     , SUM(DECODE(LOSS.LOSS_CODE,'319',LOSS.LOSS_QTY,0))  LOSS73
     , SUM(DECODE(LOSS.LOSS_CODE,'320',LOSS.LOSS_QTY,0))  LOSS74
     , SUM(DECODE(LOSS.LOSS_CODE,'321',LOSS.LOSS_QTY,0))  LOSS75
     , SUM(DECODE(LOSS.LOSS_CODE,'322',LOSS.LOSS_QTY,0))  LOSS76
     , SUM(DECODE(LOSS.LOSS_CODE,'323',LOSS.LOSS_QTY,0))  LOSS77
     , SUM(DECODE(LOSS.LOSS_CODE,'324',LOSS.LOSS_QTY,0))  LOSS78
     , SUM(DECODE(LOSS.LOSS_CODE,'326',LOSS.LOSS_QTY,0))  LOSS79
     , SUM(DECODE(LOSS.LOSS_CODE,'330',LOSS.LOSS_QTY,0))  LOSS80
     , SUM(DECODE(LOSS.LOSS_CODE,'331',LOSS.LOSS_QTY,0))  LOSS81
     , SUM(DECODE(LOSS.LOSS_CODE,'332',LOSS.LOSS_QTY,0))  LOSS82
     , SUM(DECODE(LOSS.LOSS_CODE,'333',LOSS.LOSS_QTY,0))  LOSS83
     , SUM(DECODE(LOSS.LOSS_CODE,'368',LOSS.LOSS_QTY,0))  LOSS84
     , SUM(DECODE(LOSS.LOSS_CODE,'371',LOSS.LOSS_QTY,0))  LOSS85
     , SUM(DECODE(LOSS.LOSS_CODE,'373',LOSS.LOSS_QTY,0))  LOSS86
     , SUM(DECODE(LOSS.LOSS_CODE,'388',LOSS.LOSS_QTY,0))  LOSS87
     , SUM(DECODE(LOSS.LOSS_CODE,'392',LOSS.LOSS_QTY,0))  LOSS88
     , SUM(DECODE(LOSS.LOSS_CODE,'395',LOSS.LOSS_QTY,0))  LOSS89
     , SUM(DECODE(LOSS.LOSS_CODE,'402',LOSS.LOSS_QTY,0))  LOSS90
     , SUM(DECODE(LOSS.LOSS_CODE,'403',LOSS.LOSS_QTY,0))  LOSS91
     , SUM(DECODE(LOSS.LOSS_CODE,'404',LOSS.LOSS_QTY,0))  LOSS92
     , SUM(DECODE(LOSS.LOSS_CODE,'405',LOSS.LOSS_QTY,0))  LOSS93
     , SUM(DECODE(LOSS.LOSS_CODE,'406',LOSS.LOSS_QTY,0))  LOSS94
     , SUM(DECODE(LOSS.LOSS_CODE,'407',LOSS.LOSS_QTY,0))  LOSS95
     , SUM(DECODE(LOSS.LOSS_CODE,'408',LOSS.LOSS_QTY,0))  LOSS96
     , SUM(DECODE(LOSS.LOSS_CODE,'409',LOSS.LOSS_QTY,0))  LOSS97
     , SUM(DECODE(LOSS.LOSS_CODE,'410',LOSS.LOSS_QTY,0))  LOSS98
     , SUM(DECODE(LOSS.LOSS_CODE,'411',LOSS.LOSS_QTY,0))  LOSS99
     , SUM(DECODE(LOSS.LOSS_CODE,'412',LOSS.LOSS_QTY,0))  LOSS100
     , SUM(DECODE(LOSS.LOSS_CODE,'413',LOSS.LOSS_QTY,0))  LOSS101
     , SUM(DECODE(LOSS.LOSS_CODE,'414',LOSS.LOSS_QTY,0))  LOSS102
     , SUM(DECODE(LOSS.LOSS_CODE,'415',LOSS.LOSS_QTY,0))  LOSS103
     , SUM(DECODE(LOSS.LOSS_CODE,'417',LOSS.LOSS_QTY,0))  LOSS104
     , SUM(DECODE(LOSS.LOSS_CODE,'418',LOSS.LOSS_QTY,0))  LOSS105
     , SUM(DECODE(LOSS.LOSS_CODE,'419',LOSS.LOSS_QTY,0))  LOSS106
     , SUM(DECODE(LOSS.LOSS_CODE,'420',LOSS.LOSS_QTY,0))  LOSS107
     , SUM(DECODE(LOSS.LOSS_CODE,'421',LOSS.LOSS_QTY,0))  LOSS108
     , SUM(DECODE(LOSS.LOSS_CODE,'422',LOSS.LOSS_QTY,0))  LOSS109
     , SUM(DECODE(LOSS.LOSS_CODE,'423',LOSS.LOSS_QTY,0))  LOSS110
     , SUM(DECODE(LOSS.LOSS_CODE,'424',LOSS.LOSS_QTY,0))  LOSS111
     , SUM(DECODE(LOSS.LOSS_CODE,'425',LOSS.LOSS_QTY,0))  LOSS112
     , SUM(DECODE(LOSS.LOSS_CODE,'426',LOSS.LOSS_QTY,0))  LOSS113
     , SUM(DECODE(LOSS.LOSS_CODE,'427',LOSS.LOSS_QTY,0))  LOSS114
     , SUM(DECODE(LOSS.LOSS_CODE,'440',LOSS.LOSS_QTY,0))  LOSS115
     , SUM(DECODE(LOSS.LOSS_CODE,'472',LOSS.LOSS_QTY,0))  LOSS116
     , SUM(DECODE(LOSS.LOSS_CODE,'430',LOSS.LOSS_QTY,0))  LOSS117
     , SUM(DECODE(LOSS.LOSS_CODE,'473',LOSS.LOSS_QTY,0))  LOSS118
     , SUM(DECODE(LOSS.LOSS_CODE,'474',LOSS.LOSS_QTY,0))  LOSS119
     , SUM(DECODE(LOSS.LOSS_CODE,'475',LOSS.LOSS_QTY,0))  LOSS120
     , SUM(DECODE(LOSS.LOSS_CODE,'476',LOSS.LOSS_QTY,0))  LOSS121
     , SUM(DECODE(LOSS.LOSS_CODE,'477',LOSS.LOSS_QTY,0))  LOSS122
     , SUM(DECODE(LOSS.LOSS_CODE,'478',LOSS.LOSS_QTY,0))  LOSS123
     , SUM(DECODE(LOSS.LOSS_CODE,'479',LOSS.LOSS_QTY,0))  LOSS124
     , SUM(DECODE(LOSS.LOSS_CODE,'480',LOSS.LOSS_QTY,0))  LOSS125
     , SUM(DECODE(LOSS.LOSS_CODE,'481',LOSS.LOSS_QTY,0))  LOSS126
     , SUM(DECODE(LOSS.LOSS_CODE,'491',LOSS.LOSS_QTY,0))  LOSS127
     , SUM(DECODE(LOSS.LOSS_CODE,'492',LOSS.LOSS_QTY,0))  LOSS128
     , SUM(DECODE(LOSS.LOSS_CODE,'493',LOSS.LOSS_QTY,0))  LOSS129
     , SUM(DECODE(LOSS.LOSS_CODE,'494',LOSS.LOSS_QTY,0))  LOSS130
     , SUM(DECODE(LOSS.LOSS_CODE,'495',LOSS.LOSS_QTY,0))  LOSS131
     , SUM(DECODE(LOSS.LOSS_CODE,'503',LOSS.LOSS_QTY,0))  LOSS132
     , SUM(DECODE(LOSS.LOSS_CODE,'504',LOSS.LOSS_QTY,0))  LOSS133
     , SUM(DECODE(LOSS.LOSS_CODE,'508',LOSS.LOSS_QTY,0))  LOSS134
     , SUM(DECODE(LOSS.LOSS_CODE,'510',LOSS.LOSS_QTY,0))  LOSS135
     , SUM(DECODE(LOSS.LOSS_CODE,'512',LOSS.LOSS_QTY,0))  LOSS136
     , SUM(DECODE(LOSS.LOSS_CODE,'513',LOSS.LOSS_QTY,0))  LOSS137
     , SUM(DECODE(LOSS.LOSS_CODE,'514',LOSS.LOSS_QTY,0))  LOSS138
     , SUM(DECODE(LOSS.LOSS_CODE,'517',LOSS.LOSS_QTY,0))  LOSS139
     , SUM(DECODE(LOSS.LOSS_CODE,'520',LOSS.LOSS_QTY,0))  LOSS140
     , SUM(DECODE(LOSS.LOSS_CODE,'531',LOSS.LOSS_QTY,0))  LOSS141
     , SUM(DECODE(LOSS.LOSS_CODE,'538',LOSS.LOSS_QTY,0))  LOSS142
     , SUM(DECODE(LOSS.LOSS_CODE,'539',LOSS.LOSS_QTY,0))  LOSS143
     , SUM(DECODE(LOSS.LOSS_CODE,'563',LOSS.LOSS_QTY,0))  LOSS144
     , SUM(DECODE(LOSS.LOSS_CODE,'564',LOSS.LOSS_QTY,0))  LOSS145
     , SUM(DECODE(LOSS.LOSS_CODE,'565',LOSS.LOSS_QTY,0))  LOSS146
     , SUM(DECODE(LOSS.LOSS_CODE,'566',LOSS.LOSS_QTY,0))  LOSS147
     , SUM(DECODE(LOSS.LOSS_CODE,'567',LOSS.LOSS_QTY,0))  LOSS148
     , SUM(DECODE(LOSS.LOSS_CODE,'568',LOSS.LOSS_QTY,0))  LOSS149
     , SUM(DECODE(LOSS.LOSS_CODE,'571',LOSS.LOSS_QTY,0))  LOSS150
     , SUM(DECODE(LOSS.LOSS_CODE,'572',LOSS.LOSS_QTY,0))  LOSS151
     , SUM(DECODE(LOSS.LOSS_CODE,'573',LOSS.LOSS_QTY,0))  LOSS152
     , SUM(DECODE(LOSS.LOSS_CODE,'602',LOSS.LOSS_QTY,0))  LOSS153
     , SUM(DECODE(LOSS.LOSS_CODE,'603',LOSS.LOSS_QTY,0))  LOSS154
     , SUM(DECODE(LOSS.LOSS_CODE,'604',LOSS.LOSS_QTY,0))  LOSS155
     , SUM(DECODE(LOSS.LOSS_CODE,'605',LOSS.LOSS_QTY,0))  LOSS156
     , SUM(DECODE(LOSS.LOSS_CODE,'606',LOSS.LOSS_QTY,0))  LOSS157
     , SUM(DECODE(LOSS.LOSS_CODE,'607',LOSS.LOSS_QTY,0))  LOSS158
     , SUM(DECODE(LOSS.LOSS_CODE,'608',LOSS.LOSS_QTY,0))  LOSS159
     , SUM(DECODE(LOSS.LOSS_CODE,'609',LOSS.LOSS_QTY,0))  LOSS160
     , SUM(DECODE(LOSS.LOSS_CODE,'610',LOSS.LOSS_QTY,0))  LOSS161
     , SUM(DECODE(LOSS.LOSS_CODE,'611',LOSS.LOSS_QTY,0))  LOSS162
     , SUM(DECODE(LOSS.LOSS_CODE,'612',LOSS.LOSS_QTY,0))  LOSS163
     , SUM(DECODE(LOSS.LOSS_CODE,'613',LOSS.LOSS_QTY,0))  LOSS164
     , SUM(DECODE(LOSS.LOSS_CODE,'614',LOSS.LOSS_QTY,0))  LOSS165
     , SUM(DECODE(LOSS.LOSS_CODE,'615',LOSS.LOSS_QTY,0))  LOSS166
     , SUM(DECODE(LOSS.LOSS_CODE,'616',LOSS.LOSS_QTY,0))  LOSS167
     , SUM(DECODE(LOSS.LOSS_CODE,'619',LOSS.LOSS_QTY,0))  LOSS168
     , SUM(DECODE(LOSS.LOSS_CODE,'620',LOSS.LOSS_QTY,0))  LOSS169
     , SUM(DECODE(LOSS.LOSS_CODE,'621',LOSS.LOSS_QTY,0))  LOSS170
     , SUM(DECODE(LOSS.LOSS_CODE,'631',LOSS.LOSS_QTY,0))  LOSS171
     , SUM(DECODE(LOSS.LOSS_CODE,'633',LOSS.LOSS_QTY,0))  LOSS172
     , SUM(DECODE(LOSS.LOSS_CODE,'632',LOSS.LOSS_QTY,0))  LOSS173
     , SUM(DECODE(LOSS.LOSS_CODE,'702',LOSS.LOSS_QTY,0))  LOSS174
     , SUM(DECODE(LOSS.LOSS_CODE,'703',LOSS.LOSS_QTY,0))  LOSS175
     , SUM(DECODE(LOSS.LOSS_CODE,'704',LOSS.LOSS_QTY,0))  LOSS176
     , SUM(DECODE(LOSS.LOSS_CODE,'705',LOSS.LOSS_QTY,0))  LOSS177
     , SUM(DECODE(LOSS.LOSS_CODE,'706',LOSS.LOSS_QTY,0))  LOSS178
     , SUM(DECODE(LOSS.LOSS_CODE,'707',LOSS.LOSS_QTY,0))  LOSS179
     , SUM(DECODE(LOSS.LOSS_CODE,'708',LOSS.LOSS_QTY,0))  LOSS180
     , SUM(DECODE(LOSS.LOSS_CODE,'709',LOSS.LOSS_QTY,0))  LOSS181
     , SUM(DECODE(LOSS.LOSS_CODE,'710',LOSS.LOSS_QTY,0))  LOSS182
     , SUM(DECODE(LOSS.LOSS_CODE,'711',LOSS.LOSS_QTY,0))  LOSS183
     , SUM(DECODE(LOSS.LOSS_CODE,'712',LOSS.LOSS_QTY,0))  LOSS184
     , SUM(DECODE(LOSS.LOSS_CODE,'713',LOSS.LOSS_QTY,0))  LOSS185
     , SUM(DECODE(LOSS.LOSS_CODE,'714',LOSS.LOSS_QTY,0))  LOSS186
     , SUM(DECODE(LOSS.LOSS_CODE,'715',LOSS.LOSS_QTY,0))  LOSS187
     , SUM(DECODE(LOSS.LOSS_CODE,'716',LOSS.LOSS_QTY,0))  LOSS188
     , SUM(DECODE(LOSS.LOSS_CODE,'718',LOSS.LOSS_QTY,0))  LOSS189
     , SUM(DECODE(LOSS.LOSS_CODE,'719',LOSS.LOSS_QTY,0))  LOSS190
     , SUM(DECODE(LOSS.LOSS_CODE,'720',LOSS.LOSS_QTY,0))  LOSS191
     , SUM(DECODE(LOSS.LOSS_CODE,'721',LOSS.LOSS_QTY,0))  LOSS192
     , SUM(DECODE(LOSS.LOSS_CODE,'722',LOSS.LOSS_QTY,0))  LOSS193
     , SUM(DECODE(LOSS.LOSS_CODE,'760',LOSS.LOSS_QTY,0))  LOSS194
     , SUM(DECODE(LOSS.LOSS_CODE,'802',LOSS.LOSS_QTY,0))  LOSS195
     , SUM(DECODE(LOSS.LOSS_CODE,'803',LOSS.LOSS_QTY,0))  LOSS196
     , SUM(DECODE(LOSS.LOSS_CODE,'804',LOSS.LOSS_QTY,0))  LOSS197
     , SUM(DECODE(LOSS.LOSS_CODE,'805',LOSS.LOSS_QTY,0))  LOSS198
     , SUM(DECODE(LOSS.LOSS_CODE,'808',LOSS.LOSS_QTY,0))  LOSS199
     , SUM(DECODE(LOSS.LOSS_CODE,'809',LOSS.LOSS_QTY,0))  LOSS200
     , SUM(DECODE(LOSS.LOSS_CODE,'810',LOSS.LOSS_QTY,0))  LOSS201
     , SUM(DECODE(LOSS.LOSS_CODE,'811',LOSS.LOSS_QTY,0))  LOSS202
     , SUM(DECODE(LOSS.LOSS_CODE,'812',LOSS.LOSS_QTY,0))  LOSS203
     , SUM(DECODE(LOSS.LOSS_CODE,'813',LOSS.LOSS_QTY,0))  LOSS204
     , SUM(DECODE(LOSS.LOSS_CODE,'815',LOSS.LOSS_QTY,0))  LOSS205
     , SUM(DECODE(LOSS.LOSS_CODE,'816',LOSS.LOSS_QTY,0))  LOSS206
     , SUM(DECODE(LOSS.LOSS_CODE,'818',LOSS.LOSS_QTY,0))  LOSS207
     , SUM(DECODE(LOSS.LOSS_CODE,'819',LOSS.LOSS_QTY,0))  LOSS208
     , SUM(DECODE(LOSS.LOSS_CODE,'820',LOSS.LOSS_QTY,0))  LOSS209
     , SUM(DECODE(LOSS.LOSS_CODE,'821',LOSS.LOSS_QTY,0))  LOSS210
     , SUM(DECODE(LOSS.LOSS_CODE,'822',LOSS.LOSS_QTY,0))  LOSS211
     , SUM(DECODE(LOSS.LOSS_CODE,'823',LOSS.LOSS_QTY,0))  LOSS212
     , SUM(DECODE(LOSS.LOSS_CODE,'829',LOSS.LOSS_QTY,0))  LOSS213
     , SUM(DECODE(LOSS.LOSS_CODE,'830',LOSS.LOSS_QTY,0))  LOSS214
     , SUM(DECODE(LOSS.LOSS_CODE,'862',LOSS.LOSS_QTY,0))  LOSS215
     , SUM(DECODE(LOSS.LOSS_CODE,'866',LOSS.LOSS_QTY,0))  LOSS216
     , SUM(DECODE(LOSS.LOSS_CODE,'867',LOSS.LOSS_QTY,0))  LOSS217
     , SUM(DECODE(LOSS.LOSS_CODE,'889',LOSS.LOSS_QTY,0))  LOSS218
     , SUM(DECODE(LOSS.LOSS_CODE,'890',LOSS.LOSS_QTY,0))  LOSS219
     , SUM(DECODE(LOSS.LOSS_CODE,'891',LOSS.LOSS_QTY,0))  LOSS220
     , SUM(DECODE(LOSS.LOSS_CODE,'892',LOSS.LOSS_QTY,0))  LOSS221
     , SUM(DECODE(LOSS.LOSS_CODE,'893',LOSS.LOSS_QTY,0))  LOSS222
     , SUM(DECODE(LOSS.LOSS_CODE,'894',LOSS.LOSS_QTY,0))  LOSS223
     , SUM(DECODE(LOSS.LOSS_CODE,'903',LOSS.LOSS_QTY,0))  LOSS224
     , SUM(DECODE(LOSS.LOSS_CODE,'904',LOSS.LOSS_QTY,0))  LOSS225
     , SUM(DECODE(LOSS.LOSS_CODE,'905',LOSS.LOSS_QTY,0))  LOSS226
     , SUM(DECODE(LOSS.LOSS_CODE,'924',LOSS.LOSS_QTY,0))  LOSS227
     , SUM(DECODE(LOSS.LOSS_CODE,'925',LOSS.LOSS_QTY,0))  LOSS228
     , SUM(DECODE(LOSS.LOSS_CODE,'929',LOSS.LOSS_QTY,0))  LOSS229
     , SUM(DECODE(LOSS.LOSS_CODE,'930',LOSS.LOSS_QTY,0))  LOSS230
     , SUM(DECODE(LOSS.LOSS_CODE,'931',LOSS.LOSS_QTY,0))  LOSS231
     , SUM(DECODE(LOSS.LOSS_CODE,'932',LOSS.LOSS_QTY,0))  LOSS232
     , SUM(DECODE(LOSS.LOSS_CODE,'935',LOSS.LOSS_QTY,0))  LOSS233
     , SUM(DECODE(LOSS.LOSS_CODE,'936',LOSS.LOSS_QTY,0))  LOSS234
     , SUM(DECODE(LOSS.LOSS_CODE,'937',LOSS.LOSS_QTY,0))  LOSS235
     , SUM(DECODE(LOSS.LOSS_CODE,'940',LOSS.LOSS_QTY,0))  LOSS236
     , SUM(DECODE(LOSS.LOSS_CODE,'944',LOSS.LOSS_QTY,0))  LOSS237
     , SUM(DECODE(LOSS.LOSS_CODE,'945',LOSS.LOSS_QTY,0))  LOSS238
     , SUM(DECODE(LOSS.LOSS_CODE,'947',LOSS.LOSS_QTY,0))  LOSS239
     , SUM(DECODE(LOSS.LOSS_CODE,'948',LOSS.LOSS_QTY,0))  LOSS240
     , SUM(DECODE(LOSS.LOSS_CODE,'949',LOSS.LOSS_QTY,0))  LOSS241
     , SUM(DECODE(LOSS.LOSS_CODE,'950',LOSS.LOSS_QTY,0))  LOSS242
     , SUM(DECODE(LOSS.LOSS_CODE,'951',LOSS.LOSS_QTY,0))  LOSS243
     , SUM(DECODE(LOSS.LOSS_CODE,'953',LOSS.LOSS_QTY,0))  LOSS244
     , SUM(DECODE(LOSS.LOSS_CODE,'954',LOSS.LOSS_QTY,0))  LOSS245
     , SUM(DECODE(LOSS.LOSS_CODE,'955',LOSS.LOSS_QTY,0))  LOSS246
     , SUM(DECODE(LOSS.LOSS_CODE,'956',LOSS.LOSS_QTY,0))  LOSS247
     , SUM(DECODE(LOSS.LOSS_CODE,'957',LOSS.LOSS_QTY,0))  LOSS248
     , SUM(DECODE(LOSS.LOSS_CODE,'958',LOSS.LOSS_QTY,0))  LOSS249
     , SUM(DECODE(LOSS.LOSS_CODE,'962',LOSS.LOSS_QTY,0))  LOSS250
     , SUM(DECODE(LOSS.LOSS_CODE,'970',LOSS.LOSS_QTY,0))  LOSS251
     , SUM(DECODE(LOSS.LOSS_CODE,'971',LOSS.LOSS_QTY,0))  LOSS252
     , SUM(DECODE(LOSS.LOSS_CODE,'991',LOSS.LOSS_QTY,0))  LOSS253
     , SUM(DECODE(LOSS.LOSS_CODE,'992',LOSS.LOSS_QTY,0))  LOSS254
     , SUM(DECODE(LOSS.LOSS_CODE,'995',LOSS.LOSS_QTY,0))  LOSS255
     , SUM(DECODE(LOSS.LOSS_CODE,'996',LOSS.LOSS_QTY,0))  LOSS256
     , SUM(DECODE(LOSS.LOSS_CODE,'997',LOSS.LOSS_QTY,0))  LOSS257
     , SUM(DECODE(LOSS.LOSS_CODE,'129',LOSS.LOSS_QTY,0))  LOSS258
     , SUM(DECODE(LOSS.LOSS_CODE,'130',LOSS.LOSS_QTY,0))  LOSS259
     , SUM(DECODE(LOSS.LOSS_CODE,'131',LOSS.LOSS_QTY,0))  LOSS260
     , SUM(DECODE(LOSS.LOSS_CODE,'132',LOSS.LOSS_QTY,0))  LOSS261
     , SUM(DECODE(LOSS.LOSS_CODE,'133',LOSS.LOSS_QTY,0))  LOSS262
     , SUM(DECODE(LOSS.LOSS_CODE,'1001',LOSS.LOSS_QTY,0))  LOSS263
     , SUM(DECODE(LOSS.LOSS_CODE,'1002',LOSS.LOSS_QTY,0))  LOSS264
     , SUM(DECODE(LOSS.LOSS_CODE,'1003',LOSS.LOSS_QTY,0))  LOSS265
     , SUM(DECODE(LOSS.LOSS_CODE,'1004',LOSS.LOSS_QTY,0))  LOSS266
     , SUM(DECODE(LOSS.LOSS_CODE,'1005',LOSS.LOSS_QTY,0))  LOSS267
     , SUM(DECODE(LOSS.LOSS_CODE,'1006',LOSS.LOSS_QTY,0))  LOSS268
     , SUM(DECODE(LOSS.LOSS_CODE,'1007',LOSS.LOSS_QTY,0))  LOSS269
     , SUM(DECODE(LOSS.LOSS_CODE,'1008',LOSS.LOSS_QTY,0))  LOSS270
     , SUM(DECODE(LOSS.LOSS_CODE,'1009',LOSS.LOSS_QTY,0))  LOSS271
     , SUM(DECODE(LOSS.LOSS_CODE,'1010',LOSS.LOSS_QTY,0))  LOSS272
     , SUM(DECODE(LOSS.LOSS_CODE,'1011',LOSS.LOSS_QTY,0))  LOSS273
     , SUM(DECODE(LOSS.LOSS_CODE,'1012',LOSS.LOSS_QTY,0))  LOSS274
     , SUM(DECODE(LOSS.LOSS_CODE,'1021',LOSS.LOSS_QTY,0))  LOSS275
     , SUM(DECODE(LOSS.LOSS_CODE,'1022',LOSS.LOSS_QTY,0))  LOSS276
     , SUM(DECODE(LOSS.LOSS_CODE,'1023',LOSS.LOSS_QTY,0))  LOSS277
     , SUM(DECODE(LOSS.LOSS_CODE,'1024',LOSS.LOSS_QTY,0))  LOSS278
     , SUM(DECODE(LOSS.LOSS_CODE,'1025',LOSS.LOSS_QTY,0))  LOSS279
     , SUM(DECODE(LOSS.LOSS_CODE,'1026',LOSS.LOSS_QTY,0))  LOSS280
     , SUM(DECODE(LOSS.LOSS_CODE,'1027',LOSS.LOSS_QTY,0))  LOSS281
     , SUM(DECODE(LOSS.LOSS_CODE,'1028',LOSS.LOSS_QTY,0))  LOSS282
     , SUM(DECODE(LOSS.LOSS_CODE,'1029',LOSS.LOSS_QTY,0))  LOSS283
     , SUM(DECODE(LOSS.LOSS_CODE,'1031',LOSS.LOSS_QTY,0))  LOSS284
     , SUM(DECODE(LOSS.LOSS_CODE,'1032',LOSS.LOSS_QTY,0))  LOSS285
     , SUM(DECODE(LOSS.LOSS_CODE,'1033',LOSS.LOSS_QTY,0))  LOSS286
     , SUM(DECODE(LOSS.LOSS_CODE,'1034',LOSS.LOSS_QTY,0))  LOSS287
     , SUM(DECODE(LOSS.LOSS_CODE,'1035',LOSS.LOSS_QTY,0))  LOSS288
     , SUM(DECODE(LOSS.LOSS_CODE,'1099',LOSS.LOSS_QTY,0))  LOSS289
     , SUM(DECODE(LOSS.LOSS_CODE,'1101',LOSS.LOSS_QTY,0))  LOSS290
     , SUM(DECODE(LOSS.LOSS_CODE,'1102',LOSS.LOSS_QTY,0))  LOSS291
     , SUM(DECODE(LOSS.LOSS_CODE,'1103',LOSS.LOSS_QTY,0))  LOSS292
     , SUM(DECODE(LOSS.LOSS_CODE,'1111',LOSS.LOSS_QTY,0))  LOSS293
     , SUM(DECODE(LOSS.LOSS_CODE,'1112',LOSS.LOSS_QTY,0))  LOSS294
     , SUM(DECODE(LOSS.LOSS_CODE,'1113',LOSS.LOSS_QTY,0))  LOSS295
     , SUM(DECODE(LOSS.LOSS_CODE,'1114',LOSS.LOSS_QTY,0))  LOSS296
     , SUM(DECODE(LOSS.LOSS_CODE,'1115',LOSS.LOSS_QTY,0))  LOSS297
     , SUM(DECODE(LOSS.LOSS_CODE,'1116',LOSS.LOSS_QTY,0))  LOSS298
     , SUM(DECODE(LOSS.LOSS_CODE,'1117',LOSS.LOSS_QTY,0))  LOSS299
     , SUM(DECODE(LOSS.LOSS_CODE,'1118',LOSS.LOSS_QTY,0))  LOSS300
     , SUM(DECODE(LOSS.LOSS_CODE,'1119',LOSS.LOSS_QTY,0))  LOSS301
     , SUM(DECODE(LOSS.LOSS_CODE,'1131',LOSS.LOSS_QTY,0))  LOSS302
     , SUM(DECODE(LOSS.LOSS_CODE,'1132',LOSS.LOSS_QTY,0))  LOSS303
     , SUM(DECODE(LOSS.LOSS_CODE,'1133',LOSS.LOSS_QTY,0))  LOSS304
     , SUM(DECODE(LOSS.LOSS_CODE,'1134',LOSS.LOSS_QTY,0))  LOSS305
     , SUM(DECODE(LOSS.LOSS_CODE,'1135',LOSS.LOSS_QTY,0))  LOSS306
     , SUM(DECODE(LOSS.LOSS_CODE,'1201',LOSS.LOSS_QTY,0))  LOSS307
     , SUM(DECODE(LOSS.LOSS_CODE,'1202',LOSS.LOSS_QTY,0))  LOSS308
     , SUM(DECODE(LOSS.LOSS_CODE,'1203',LOSS.LOSS_QTY,0))  LOSS309
     , SUM(DECODE(LOSS.LOSS_CODE,'1204',LOSS.LOSS_QTY,0))  LOSS310
     , SUM(DECODE(LOSS.LOSS_CODE,'1205',LOSS.LOSS_QTY,0))  LOSS311
     , SUM(DECODE(LOSS.LOSS_CODE,'1206',LOSS.LOSS_QTY,0))  LOSS312
     , SUM(DECODE(LOSS.LOSS_CODE,'1207',LOSS.LOSS_QTY,0))  LOSS313
     , SUM(DECODE(LOSS.LOSS_CODE,'1208',LOSS.LOSS_QTY,0))  LOSS314
     , SUM(DECODE(LOSS.LOSS_CODE,'1209',LOSS.LOSS_QTY,0))  LOSS315
     , SUM(DECODE(LOSS.LOSS_CODE,'1210',LOSS.LOSS_QTY,0))  LOSS316
     , SUM(DECODE(LOSS.LOSS_CODE,'1211',LOSS.LOSS_QTY,0))  LOSS317
     , SUM(DECODE(LOSS.LOSS_CODE,'9500',LOSS.LOSS_QTY,0))  LOSS318
     , SUM(DECODE(LOSS.LOSS_CODE,'9100',LOSS.LOSS_QTY,0))  LOSS319
     , SUM(DECODE(LOSS.LOSS_CODE,'9000',LOSS.LOSS_QTY,0))  LOSS320
     , SUM(DECODE(LOSS.LOSS_CODE,'9501',LOSS.LOSS_QTY,0))  LOSS321
     , SUM(DECODE(LOSS.LOSS_CODE,'1076',LOSS.LOSS_QTY,0))  LOSS322
     , SUM(DECODE(LOSS.LOSS_CODE,'1077',LOSS.LOSS_QTY,0))  LOSS323
     , SUM(DECODE(LOSS.LOSS_CODE,'1078',LOSS.LOSS_QTY,0))  LOSS324
     , SUM(DECODE(LOSS.LOSS_CODE,'1079',LOSS.LOSS_QTY,0))  LOSS325
     , SUM(DECODE(LOSS.LOSS_CODE,'1080',LOSS.LOSS_QTY,0))  LOSS326
     , SUM(DECODE(LOSS.LOSS_CODE,'1081',LOSS.LOSS_QTY,0))  LOSS327
     , SUM(DECODE(LOSS.LOSS_CODE,'1082',LOSS.LOSS_QTY,0))  LOSS328
     , SUM(DECODE(LOSS.LOSS_CODE,'1083',LOSS.LOSS_QTY,0))  LOSS329
     , SUM(DECODE(LOSS.LOSS_CODE,'1084',LOSS.LOSS_QTY,0))  LOSS330
     , SUM(DECODE(LOSS.LOSS_CODE,'1085',LOSS.LOSS_QTY,0))  LOSS331
     , SUM(DECODE(LOSS.LOSS_CODE,'1086',LOSS.LOSS_QTY,0))  LOSS332
     , SUM(DECODE(LOSS.LOSS_CODE,'1087',LOSS.LOSS_QTY,0))  LOSS333
     , SUM(DECODE(LOSS.LOSS_CODE,'1088',LOSS.LOSS_QTY,0))  LOSS334
     , SUM(DECODE(LOSS.LOSS_CODE,'1089',LOSS.LOSS_QTY,0))  LOSS335
     , SUM(DECODE(LOSS.LOSS_CODE,'1801',LOSS.LOSS_QTY,0))  LOSS336
     , SUM(DECODE(LOSS.LOSS_CODE,'1802',LOSS.LOSS_QTY,0))  LOSS337
     , SUM(DECODE(LOSS.LOSS_CODE,'1803',LOSS.LOSS_QTY,0))  LOSS338
     , SUM(DECODE(LOSS.LOSS_CODE,'1804',LOSS.LOSS_QTY,0))  LOSS339
     , SUM(DECODE(LOSS.LOSS_CODE,'1805',LOSS.LOSS_QTY,0))  LOSS340
     , SUM(DECODE(LOSS.LOSS_CODE,'1806',LOSS.LOSS_QTY,0))  LOSS341
     , SUM(DECODE(LOSS.LOSS_CODE,'1807',LOSS.LOSS_QTY,0))  LOSS342
     , SUM(DECODE(LOSS.LOSS_CODE,'1075',LOSS.LOSS_QTY,0))  LOSS343
     , SUM(DECODE(LOSS.LOSS_CODE,'1074',LOSS.LOSS_QTY,0))  LOSS344
     , SUM(DECODE(LOSS.LOSS_CODE,'1073',LOSS.LOSS_QTY,0))  LOSS345
     , SUM(DECODE(LOSS.LOSS_CODE,'1071',LOSS.LOSS_QTY,0))  LOSS346
     , SUM(DECODE(LOSS.LOSS_CODE,'1072',LOSS.LOSS_QTY,0))  LOSS347
     , SUM(DECODE(LOSS.LOSS_CODE,'1090',LOSS.LOSS_QTY,0))  LOSS348

  FROM ( 
        SELECT  ' ',  ' ', MAT.MAT_GRP_6, MAT.MAT_GRP_3,  ' ',  ' ',  ' ',  ' ', A.MAT_ID
             , A.LOT_ID AS LOT_ID 
             , TO_CHAR(TO_DATE(C.CREATE_TIME,'yyyymmddhh24miss')) AS IN_TIME 
             , TO_CHAR(TO_DATE(A.TRAN_TIME,'yyyymmddhh24miss')) AS SHIP_TIME 
             , ROUND((TO_DATE(A.TRAN_TIME,'yyyymmddhh24miss') - TO_DATE(C.CREATE_TIME,'yyyymmddhh24miss')),2) AS TAT 
             , (  
                SELECT MIN(QTY_1)   
                  FROM RWIPLOTHIS  
                 WHERE FACTORY = 'HMVA2'  
                   AND OLD_OPER >= 'A1000'  
                   AND LOT_ID=A.LOT_ID  
                   AND TRAN_CODE IN ('END','SHIP')    
                   AND HIST_DEL_FLAG = ' '               
               ) AS BE_OUT 
             , A.QTY_1 AS OUT_QTY 
          FROM DT A
             , MWIPMATDEF MAT
             , RWIPLOTSTS C 
         WHERE 1=1
           AND A.MAT_ID=MAT.MAT_ID 
           AND A.LOT_ID=C.LOT_ID 
           AND MAT.FACTORY = 'HMVA2' 
       ) SUMMERY
     , (
        SELECT LOT_ID
             , LOSS_CODE
             , SUM(LOSS_QTY) AS LOSS_QTY 
             , SUM(CASE WHEN OPER < 'A1000' THEN LOSS_QTY 
                        ELSE 0 
                   END) IL_LOSS_QTY 
             , SUM(CASE WHEN OPER >= 'A1000' THEN LOSS_QTY 
                        ELSE 0 
                   END) BE_LOSS_QTY 
          FROM (
                SELECT LOT_ID, OPER, LOSS_CODE, LOSS_QTY
                  FROM RWIPLOTLSM
                 WHERE 1=1
                   AND FACTORY = 'HMVA2'  
                   AND HIST_DEL_FLAG = ' '
                   AND LOT_ID IN ( 
                                  SELECT LOT_ID 
                                    FROM DT 
                                 ) 
                UNION ALL 
                SELECT /*+ INDEX (LSM, RWIPLOTLSM_IDX02) */SPL.FROM_TO_LOT_ID AS LOT_ID, OPER, LOSS_CODE, LOSS_QTY
                  FROM RWIPLOTLSM LSM
                     , (
                        SELECT LOT_ID, FROM_TO_LOT_ID 
                          FROM RWIPLOTSTS 
                         WHERE 1=1
                           AND FACTORY = 'HMVA2'  
                           AND LOT_TYPE = 'W' 
                           AND ADD_ORDER_ID_2 = 'MULTIEQP' 
                           AND FROM_TO_LOT_ID IN ( 
                                                  SELECT LOT_ID 
                                                    FROM DT 
                                                 ) 
                       ) SPL
                 WHERE 1=1
                   AND LSM.LOT_ID = SPL.LOT_ID
                   AND LSM.FACTORY = 'HMVA2'  
                   AND HIST_DEL_FLAG = ' '
               )
         GROUP BY LOT_ID,LOSS_CODE,LOSS_QTY
       ) LOSS
 WHERE SUMMERY.LOT_ID=LOSS.LOT_ID(+)
 GROUP BY  ' ',  ' ', SUMMERY.MAT_GRP_6, SUMMERY.MAT_GRP_3,  ' ',  ' ',  ' ',  ' ', SUMMERY.MAT_ID
        , SUMMERY.LOT_ID,SUMMERY.IN_TIME,SUMMERY.SHIP_TIME, SUMMERY.TAT 
        , SUMMERY.BE_OUT, SUMMERY.OUT_QTY 
 ORDER BY   ' ',  ' ', SUMMERY.MAT_GRP_6, SUMMERY.MAT_GRP_3,  ' ',  ' ',  ' ',  ' ', SUMMERY.MAT_ID,SUMMERY.LOT_ID

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT  KEY_1,DATA_3,DATA_4  
FROM    MGCMTBLDAT  
WHERE   1=1 
        AND FACTORY = 'HMVA2' 
        AND TABLE_NAME='LOSS_CODE' 
        AND DATA_3='Y'  
ORDER BY TO_NUMBER(DATA_4) 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT  KEY_1,DATA_3,DATA_4  
FROM    MGCMTBLDAT  
WHERE   1=1 
        AND FACTORY = 'HMVA2' 
        AND TABLE_NAME='LOSS_CODE' 
        AND DATA_3='Y'  
ORDER BY TO_NUMBER(DATA_4) 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
WITH DT AS
(
 SELECT * 
   FROM CWIPLOTEND 
  WHERE 1=1 
    AND TRAN_TIME BETWEEN '20200719220000' AND '20200722215959' 
    AND TRAN_CODE = 'END' 
    AND LOT_TYPE = 'W' 
    AND FACTORY = 'HMVA2' 
    AND HIST_DEL_FLAG = ' ' 
    AND TRAN_CMF_1 = 'CLOSE' 
    AND MAT_ID LIKE 'AK%'
)
SELECT  ' ',  ' ', SUMMERY.MAT_GRP_6, SUMMERY.MAT_GRP_3,  ' ',  ' ',  ' ',  ' ', SUMMERY.MAT_ID
     , SUMMERY.LOT_ID,SUMMERY.IN_TIME,SUMMERY.SHIP_TIME 
     , SUMMERY.TAT AS TAT 
     , SUMMERY.BE_OUT + NVL(SUM(LOSS.BE_LOSS_QTY),0) + NVL(SUM(LOSS.IL_LOSS_QTY),0) AS IL_IN 
     , SUMMERY.BE_OUT + NVL(SUM(LOSS.BE_LOSS_QTY),0) AS IL_OUT 
     , ROUND(((SUMMERY.BE_OUT + NVL(SUM(LOSS.BE_LOSS_QTY),0))/(SUMMERY.BE_OUT + NVL(SUM(LOSS.BE_LOSS_QTY),0) + NVL(SUM(LOSS.IL_LOSS_QTY),0)))*100,3)||'%' AS IL_YIELD 
     , SUMMERY.BE_OUT + NVL(SUM(LOSS.BE_LOSS_QTY),0) AS BE_IN 
     , SUMMERY.BE_OUT 
     , ROUND((SUMMERY.BE_OUT/(SUMMERY.BE_OUT + NVL(SUM(LOSS.BE_LOSS_QTY),0)))*100,3)||'%' AS BE_YIELD 
     , SUMMERY.OUT_QTY + NVL(SUM(LOSS.LOSS_QTY),0) AS IN_QTY  
     , SUMMERY.OUT_QTY 
     , ROUND(SUMMERY.OUT_QTY/(SUMMERY.OUT_QTY + NVL(SUM(LOSS.LOSS_QTY),0))*100,3)||'%' AS YIELD 
     , '' AS BONUS 
     , NVL(SUM(LOSS.LOSS_QTY),0) AS LOSS_QTY 
     , SUM(DECODE(LOSS.LOSS_CODE,'80',LOSS.LOSS_QTY,0))  LOSS0
     , SUM(DECODE(LOSS.LOSS_CODE,'81',LOSS.LOSS_QTY,0))  LOSS1
     , SUM(DECODE(LOSS.LOSS_CODE,'82',LOSS.LOSS_QTY,0))  LOSS2
     , SUM(DECODE(LOSS.LOSS_CODE,'83',LOSS.LOSS_QTY,0))  LOSS3
     , SUM(DECODE(LOSS.LOSS_CODE,'84',LOSS.LOSS_QTY,0))  LOSS4
     , SUM(DECODE(LOSS.LOSS_CODE,'85',LOSS.LOSS_QTY,0))  LOSS5
     , SUM(DECODE(LOSS.LOSS_CODE,'86',LOSS.LOSS_QTY,0))  LOSS6
     , SUM(DECODE(LOSS.LOSS_CODE,'87',LOSS.LOSS_QTY,0))  LOSS7
     , SUM(DECODE(LOSS.LOSS_CODE,'88',LOSS.LOSS_QTY,0))  LOSS8
     , SUM(DECODE(LOSS.LOSS_CODE,'100',LOSS.LOSS_QTY,0))  LOSS9
     , SUM(DECODE(LOSS.LOSS_CODE,'102',LOSS.LOSS_QTY,0))  LOSS10
     , SUM(DECODE(LOSS.LOSS_CODE,'104',LOSS.LOSS_QTY,0))  LOSS11
     , SUM(DECODE(LOSS.LOSS_CODE,'105',LOSS.LOSS_QTY,0))  LOSS12
     , SUM(DECODE(LOSS.LOSS_CODE,'106',LOSS.LOSS_QTY,0))  LOSS13
     , SUM(DECODE(LOSS.LOSS_CODE,'107',LOSS.LOSS_QTY,0))  LOSS14
     , SUM(DECODE(LOSS.LOSS_CODE,'110',LOSS.LOSS_QTY,0))  LOSS15
     , SUM(DECODE(LOSS.LOSS_CODE,'111',LOSS.LOSS_QTY,0))  LOSS16
     , SUM(DECODE(LOSS.LOSS_CODE,'112',LOSS.LOSS_QTY,0))  LOSS17
     , SUM(DECODE(LOSS.LOSS_CODE,'114',LOSS.LOSS_QTY,0))  LOSS18
     , SUM(DECODE(LOSS.LOSS_CODE,'115',LOSS.LOSS_QTY,0))  LOSS19
     , SUM(DECODE(LOSS.LOSS_CODE,'116',LOSS.LOSS_QTY,0))  LOSS20
     , SUM(DECODE(LOSS.LOSS_CODE,'119',LOSS.LOSS_QTY,0))  LOSS21
     , SUM(DECODE(LOSS.LOSS_CODE,'120',LOSS.LOSS_QTY,0))  LOSS22
     , SUM(DECODE(LOSS.LOSS_CODE,'121',LOSS.LOSS_QTY,0))  LOSS23
     , SUM(DECODE(LOSS.LOSS_CODE,'122',LOSS.LOSS_QTY,0))  LOSS24
     , SUM(DECODE(LOSS.LOSS_CODE,'123',LOSS.LOSS_QTY,0))  LOSS25
     , SUM(DECODE(LOSS.LOSS_CODE,'124',LOSS.LOSS_QTY,0))  LOSS26
     , SUM(DECODE(LOSS.LOSS_CODE,'125',LOSS.LOSS_QTY,0))  LOSS27
     , SUM(DECODE(LOSS.LOSS_CODE,'127',LOSS.LOSS_QTY,0))  LOSS28
     , SUM(DECODE(LOSS.LOSS_CODE,'128',LOSS.LOSS_QTY,0))  LOSS29
     , SUM(DECODE(LOSS.LOSS_CODE,'200',LOSS.LOSS_QTY,0))  LOSS30
     , SUM(DECODE(LOSS.LOSS_CODE,'202',LOSS.LOSS_QTY,0))  LOSS31
     , SUM(DECODE(LOSS.LOSS_CODE,'203',LOSS.LOSS_QTY,0))  LOSS32
     , SUM(DECODE(LOSS.LOSS_CODE,'204',LOSS.LOSS_QTY,0))  LOSS33
     , SUM(DECODE(LOSS.LOSS_CODE,'205',LOSS.LOSS_QTY,0))  LOSS34
     , SUM(DECODE(LOSS.LOSS_CODE,'206',LOSS.LOSS_QTY,0))  LOSS35
     , SUM(DECODE(LOSS.LOSS_CODE,'207',LOSS.LOSS_QTY,0))  LOSS36
     , SUM(DECODE(LOSS.LOSS_CODE,'208',LOSS.LOSS_QTY,0))  LOSS37
     , SUM(DECODE(LOSS.LOSS_CODE,'209',LOSS.LOSS_QTY,0))  LOSS38
     , SUM(DECODE(LOSS.LOSS_CODE,'210',LOSS.LOSS_QTY,0))  LOSS39
     , SUM(DECODE(LOSS.LOSS_CODE,'211',LOSS.LOSS_QTY,0))  LOSS40
     , SUM(DECODE(LOSS.LOSS_CODE,'212',LOSS.LOSS_QTY,0))  LOSS41
     , SUM(DECODE(LOSS.LOSS_CODE,'213',LOSS.LOSS_QTY,0))  LOSS42
     , SUM(DECODE(LOSS.LOSS_CODE,'214',LOSS.LOSS_QTY,0))  LOSS43
     , SUM(DECODE(LOSS.LOSS_CODE,'215',LOSS.LOSS_QTY,0))  LOSS44
     , SUM(DECODE(LOSS.LOSS_CODE,'216',LOSS.LOSS_QTY,0))  LOSS45
     , SUM(DECODE(LOSS.LOSS_CODE,'217',LOSS.LOSS_QTY,0))  LOSS46
     , SUM(DECODE(LOSS.LOSS_CODE,'218',LOSS.LOSS_QTY,0))  LOSS47
     , SUM(DECODE(LOSS.LOSS_CODE,'219',LOSS.LOSS_QTY,0))  LOSS48
     , SUM(DECODE(LOSS.LOSS_CODE,'222',LOSS.LOSS_QTY,0))  LOSS49
     , SUM(DECODE(LOSS.LOSS_CODE,'224',LOSS.LOSS_QTY,0))  LOSS50
     , SUM(DECODE(LOSS.LOSS_CODE,'225',LOSS.LOSS_QTY,0))  LOSS51
     , SUM(DECODE(LOSS.LOSS_CODE,'250',LOSS.LOSS_QTY,0))  LOSS52
     , SUM(DECODE(LOSS.LOSS_CODE,'251',LOSS.LOSS_QTY,0))  LOSS53
     , SUM(DECODE(LOSS.LOSS_CODE,'265',LOSS.LOSS_QTY,0))  LOSS54
     , SUM(DECODE(LOSS.LOSS_CODE,'270',LOSS.LOSS_QTY,0))  LOSS55
     , SUM(DECODE(LOSS.LOSS_CODE,'291',LOSS.LOSS_QTY,0))  LOSS56
     , SUM(DECODE(LOSS.LOSS_CODE,'299',LOSS.LOSS_QTY,0))  LOSS57
     , SUM(DECODE(LOSS.LOSS_CODE,'302',LOSS.LOSS_QTY,0))  LOSS58
     , SUM(DECODE(LOSS.LOSS_CODE,'303',LOSS.LOSS_QTY,0))  LOSS59
     , SUM(DECODE(LOSS.LOSS_CODE,'304',LOSS.LOSS_QTY,0))  LOSS60
     , SUM(DECODE(LOSS.LOSS_CODE,'305',LOSS.LOSS_QTY,0))  LOSS61
     , SUM(DECODE(LOSS.LOSS_CODE,'306',LOSS.LOSS_QTY,0))  LOSS62
     , SUM(DECODE(LOSS.LOSS_CODE,'307',LOSS.LOSS_QTY,0))  LOSS63
     , SUM(DECODE(LOSS.LOSS_CODE,'308',LOSS.LOSS_QTY,0))  LOSS64
     , SUM(DECODE(LOSS.LOSS_CODE,'311',LOSS.LOSS_QTY,0))  LOSS65
     , SUM(DECODE(LOSS.LOSS_CODE,'312',LOSS.LOSS_QTY,0))  LOSS66
     , SUM(DECODE(LOSS.LOSS_CODE,'313',LOSS.LOSS_QTY,0))  LOSS67
     , SUM(DECODE(LOSS.LOSS_CODE,'314',LOSS.LOSS_QTY,0))  LOSS68
     , SUM(DECODE(LOSS.LOSS_CODE,'315',LOSS.LOSS_QTY,0))  LOSS69
     , SUM(DECODE(LOSS.LOSS_CODE,'316',LOSS.LOSS_QTY,0))  LOSS70
     , SUM(DECODE(LOSS.LOSS_CODE,'317',LOSS.LOSS_QTY,0))  LOSS71
     , SUM(DECODE(LOSS.LOSS_CODE,'318',LOSS.LOSS_QTY,0))  LOSS72
     , SUM(DECODE(LOSS.LOSS_CODE,'319',LOSS.LOSS_QTY,0))  LOSS73
     , SUM(DECODE(LOSS.LOSS_CODE,'320',LOSS.LOSS_QTY,0))  LOSS74
     , SUM(DECODE(LOSS.LOSS_CODE,'321',LOSS.LOSS_QTY,0))  LOSS75
     , SUM(DECODE(LOSS.LOSS_CODE,'322',LOSS.LOSS_QTY,0))  LOSS76
     , SUM(DECODE(LOSS.LOSS_CODE,'323',LOSS.LOSS_QTY,0))  LOSS77
     , SUM(DECODE(LOSS.LOSS_CODE,'324',LOSS.LOSS_QTY,0))  LOSS78
     , SUM(DECODE(LOSS.LOSS_CODE,'326',LOSS.LOSS_QTY,0))  LOSS79
     , SUM(DECODE(LOSS.LOSS_CODE,'330',LOSS.LOSS_QTY,0))  LOSS80
     , SUM(DECODE(LOSS.LOSS_CODE,'331',LOSS.LOSS_QTY,0))  LOSS81
     , SUM(DECODE(LOSS.LOSS_CODE,'332',LOSS.LOSS_QTY,0))  LOSS82
     , SUM(DECODE(LOSS.LOSS_CODE,'333',LOSS.LOSS_QTY,0))  LOSS83
     , SUM(DECODE(LOSS.LOSS_CODE,'368',LOSS.LOSS_QTY,0))  LOSS84
     , SUM(DECODE(LOSS.LOSS_CODE,'371',LOSS.LOSS_QTY,0))  LOSS85
     , SUM(DECODE(LOSS.LOSS_CODE,'373',LOSS.LOSS_QTY,0))  LOSS86
     , SUM(DECODE(LOSS.LOSS_CODE,'388',LOSS.LOSS_QTY,0))  LOSS87
     , SUM(DECODE(LOSS.LOSS_CODE,'392',LOSS.LOSS_QTY,0))  LOSS88
     , SUM(DECODE(LOSS.LOSS_CODE,'395',LOSS.LOSS_QTY,0))  LOSS89
     , SUM(DECODE(LOSS.LOSS_CODE,'402',LOSS.LOSS_QTY,0))  LOSS90
     , SUM(DECODE(LOSS.LOSS_CODE,'403',LOSS.LOSS_QTY,0))  LOSS91
     , SUM(DECODE(LOSS.LOSS_CODE,'404',LOSS.LOSS_QTY,0))  LOSS92
     , SUM(DECODE(LOSS.LOSS_CODE,'405',LOSS.LOSS_QTY,0))  LOSS93
     , SUM(DECODE(LOSS.LOSS_CODE,'406',LOSS.LOSS_QTY,0))  LOSS94
     , SUM(DECODE(LOSS.LOSS_CODE,'407',LOSS.LOSS_QTY,0))  LOSS95
     , SUM(DECODE(LOSS.LOSS_CODE,'408',LOSS.LOSS_QTY,0))  LOSS96
     , SUM(DECODE(LOSS.LOSS_CODE,'409',LOSS.LOSS_QTY,0))  LOSS97
     , SUM(DECODE(LOSS.LOSS_CODE,'410',LOSS.LOSS_QTY,0))  LOSS98
     , SUM(DECODE(LOSS.LOSS_CODE,'411',LOSS.LOSS_QTY,0))  LOSS99
     , SUM(DECODE(LOSS.LOSS_CODE,'412',LOSS.LOSS_QTY,0))  LOSS100
     , SUM(DECODE(LOSS.LOSS_CODE,'413',LOSS.LOSS_QTY,0))  LOSS101
     , SUM(DECODE(LOSS.LOSS_CODE,'414',LOSS.LOSS_QTY,0))  LOSS102
     , SUM(DECODE(LOSS.LOSS_CODE,'415',LOSS.LOSS_QTY,0))  LOSS103
     , SUM(DECODE(LOSS.LOSS_CODE,'417',LOSS.LOSS_QTY,0))  LOSS104
     , SUM(DECODE(LOSS.LOSS_CODE,'418',LOSS.LOSS_QTY,0))  LOSS105
     , SUM(DECODE(LOSS.LOSS_CODE,'419',LOSS.LOSS_QTY,0))  LOSS106
     , SUM(DECODE(LOSS.LOSS_CODE,'420',LOSS.LOSS_QTY,0))  LOSS107
     , SUM(DECODE(LOSS.LOSS_CODE,'421',LOSS.LOSS_QTY,0))  LOSS108
     , SUM(DECODE(LOSS.LOSS_CODE,'422',LOSS.LOSS_QTY,0))  LOSS109
     , SUM(DECODE(LOSS.LOSS_CODE,'423',LOSS.LOSS_QTY,0))  LOSS110
     , SUM(DECODE(LOSS.LOSS_CODE,'424',LOSS.LOSS_QTY,0))  LOSS111
     , SUM(DECODE(LOSS.LOSS_CODE,'425',LOSS.LOSS_QTY,0))  LOSS112
     , SUM(DECODE(LOSS.LOSS_CODE,'426',LOSS.LOSS_QTY,0))  LOSS113
     , SUM(DECODE(LOSS.LOSS_CODE,'427',LOSS.LOSS_QTY,0))  LOSS114
     , SUM(DECODE(LOSS.LOSS_CODE,'440',LOSS.LOSS_QTY,0))  LOSS115
     , SUM(DECODE(LOSS.LOSS_CODE,'472',LOSS.LOSS_QTY,0))  LOSS116
     , SUM(DECODE(LOSS.LOSS_CODE,'430',LOSS.LOSS_QTY,0))  LOSS117
     , SUM(DECODE(LOSS.LOSS_CODE,'473',LOSS.LOSS_QTY,0))  LOSS118
     , SUM(DECODE(LOSS.LOSS_CODE,'474',LOSS.LOSS_QTY,0))  LOSS119
     , SUM(DECODE(LOSS.LOSS_CODE,'475',LOSS.LOSS_QTY,0))  LOSS120
     , SUM(DECODE(LOSS.LOSS_CODE,'476',LOSS.LOSS_QTY,0))  LOSS121
     , SUM(DECODE(LOSS.LOSS_CODE,'477',LOSS.LOSS_QTY,0))  LOSS122
     , SUM(DECODE(LOSS.LOSS_CODE,'478',LOSS.LOSS_QTY,0))  LOSS123
     , SUM(DECODE(LOSS.LOSS_CODE,'479',LOSS.LOSS_QTY,0))  LOSS124
     , SUM(DECODE(LOSS.LOSS_CODE,'480',LOSS.LOSS_QTY,0))  LOSS125
     , SUM(DECODE(LOSS.LOSS_CODE,'481',LOSS.LOSS_QTY,0))  LOSS126
     , SUM(DECODE(LOSS.LOSS_CODE,'491',LOSS.LOSS_QTY,0))  LOSS127
     , SUM(DECODE(LOSS.LOSS_CODE,'492',LOSS.LOSS_QTY,0))  LOSS128
     , SUM(DECODE(LOSS.LOSS_CODE,'493',LOSS.LOSS_QTY,0))  LOSS129
     , SUM(DECODE(LOSS.LOSS_CODE,'494',LOSS.LOSS_QTY,0))  LOSS130
     , SUM(DECODE(LOSS.LOSS_CODE,'495',LOSS.LOSS_QTY,0))  LOSS131
     , SUM(DECODE(LOSS.LOSS_CODE,'503',LOSS.LOSS_QTY,0))  LOSS132
     , SUM(DECODE(LOSS.LOSS_CODE,'504',LOSS.LOSS_QTY,0))  LOSS133
     , SUM(DECODE(LOSS.LOSS_CODE,'508',LOSS.LOSS_QTY,0))  LOSS134
     , SUM(DECODE(LOSS.LOSS_CODE,'510',LOSS.LOSS_QTY,0))  LOSS135
     , SUM(DECODE(LOSS.LOSS_CODE,'512',LOSS.LOSS_QTY,0))  LOSS136
     , SUM(DECODE(LOSS.LOSS_CODE,'513',LOSS.LOSS_QTY,0))  LOSS137
     , SUM(DECODE(LOSS.LOSS_CODE,'514',LOSS.LOSS_QTY,0))  LOSS138
     , SUM(DECODE(LOSS.LOSS_CODE,'517',LOSS.LOSS_QTY,0))  LOSS139
     , SUM(DECODE(LOSS.LOSS_CODE,'520',LOSS.LOSS_QTY,0))  LOSS140
     , SUM(DECODE(LOSS.LOSS_CODE,'531',LOSS.LOSS_QTY,0))  LOSS141
     , SUM(DECODE(LOSS.LOSS_CODE,'538',LOSS.LOSS_QTY,0))  LOSS142
     , SUM(DECODE(LOSS.LOSS_CODE,'539',LOSS.LOSS_QTY,0))  LOSS143
     , SUM(DECODE(LOSS.LOSS_CODE,'563',LOSS.LOSS_QTY,0))  LOSS144
     , SUM(DECODE(LOSS.LOSS_CODE,'564',LOSS.LOSS_QTY,0))  LOSS145
     , SUM(DECODE(LOSS.LOSS_CODE,'565',LOSS.LOSS_QTY,0))  LOSS146
     , SUM(DECODE(LOSS.LOSS_CODE,'566',LOSS.LOSS_QTY,0))  LOSS147
     , SUM(DECODE(LOSS.LOSS_CODE,'567',LOSS.LOSS_QTY,0))  LOSS148
     , SUM(DECODE(LOSS.LOSS_CODE,'568',LOSS.LOSS_QTY,0))  LOSS149
     , SUM(DECODE(LOSS.LOSS_CODE,'571',LOSS.LOSS_QTY,0))  LOSS150
     , SUM(DECODE(LOSS.LOSS_CODE,'572',LOSS.LOSS_QTY,0))  LOSS151
     , SUM(DECODE(LOSS.LOSS_CODE,'573',LOSS.LOSS_QTY,0))  LOSS152
     , SUM(DECODE(LOSS.LOSS_CODE,'602',LOSS.LOSS_QTY,0))  LOSS153
     , SUM(DECODE(LOSS.LOSS_CODE,'603',LOSS.LOSS_QTY,0))  LOSS154
     , SUM(DECODE(LOSS.LOSS_CODE,'604',LOSS.LOSS_QTY,0))  LOSS155
     , SUM(DECODE(LOSS.LOSS_CODE,'605',LOSS.LOSS_QTY,0))  LOSS156
     , SUM(DECODE(LOSS.LOSS_CODE,'606',LOSS.LOSS_QTY,0))  LOSS157
     , SUM(DECODE(LOSS.LOSS_CODE,'607',LOSS.LOSS_QTY,0))  LOSS158
     , SUM(DECODE(LOSS.LOSS_CODE,'608',LOSS.LOSS_QTY,0))  LOSS159
     , SUM(DECODE(LOSS.LOSS_CODE,'609',LOSS.LOSS_QTY,0))  LOSS160
     , SUM(DECODE(LOSS.LOSS_CODE,'610',LOSS.LOSS_QTY,0))  LOSS161
     , SUM(DECODE(LOSS.LOSS_CODE,'611',LOSS.LOSS_QTY,0))  LOSS162
     , SUM(DECODE(LOSS.LOSS_CODE,'612',LOSS.LOSS_QTY,0))  LOSS163
     , SUM(DECODE(LOSS.LOSS_CODE,'613',LOSS.LOSS_QTY,0))  LOSS164
     , SUM(DECODE(LOSS.LOSS_CODE,'614',LOSS.LOSS_QTY,0))  LOSS165
     , SUM(DECODE(LOSS.LOSS_CODE,'615',LOSS.LOSS_QTY,0))  LOSS166
     , SUM(DECODE(LOSS.LOSS_CODE,'616',LOSS.LOSS_QTY,0))  LOSS167
     , SUM(DECODE(LOSS.LOSS_CODE,'619',LOSS.LOSS_QTY,0))  LOSS168
     , SUM(DECODE(LOSS.LOSS_CODE,'620',LOSS.LOSS_QTY,0))  LOSS169
     , SUM(DECODE(LOSS.LOSS_CODE,'621',LOSS.LOSS_QTY,0))  LOSS170
     , SUM(DECODE(LOSS.LOSS_CODE,'631',LOSS.LOSS_QTY,0))  LOSS171
     , SUM(DECODE(LOSS.LOSS_CODE,'633',LOSS.LOSS_QTY,0))  LOSS172
     , SUM(DECODE(LOSS.LOSS_CODE,'632',LOSS.LOSS_QTY,0))  LOSS173
     , SUM(DECODE(LOSS.LOSS_CODE,'702',LOSS.LOSS_QTY,0))  LOSS174
     , SUM(DECODE(LOSS.LOSS_CODE,'703',LOSS.LOSS_QTY,0))  LOSS175
     , SUM(DECODE(LOSS.LOSS_CODE,'704',LOSS.LOSS_QTY,0))  LOSS176
     , SUM(DECODE(LOSS.LOSS_CODE,'705',LOSS.LOSS_QTY,0))  LOSS177
     , SUM(DECODE(LOSS.LOSS_CODE,'706',LOSS.LOSS_QTY,0))  LOSS178
     , SUM(DECODE(LOSS.LOSS_CODE,'707',LOSS.LOSS_QTY,0))  LOSS179
     , SUM(DECODE(LOSS.LOSS_CODE,'708',LOSS.LOSS_QTY,0))  LOSS180
     , SUM(DECODE(LOSS.LOSS_CODE,'709',LOSS.LOSS_QTY,0))  LOSS181
     , SUM(DECODE(LOSS.LOSS_CODE,'710',LOSS.LOSS_QTY,0))  LOSS182
     , SUM(DECODE(LOSS.LOSS_CODE,'711',LOSS.LOSS_QTY,0))  LOSS183
     , SUM(DECODE(LOSS.LOSS_CODE,'712',LOSS.LOSS_QTY,0))  LOSS184
     , SUM(DECODE(LOSS.LOSS_CODE,'713',LOSS.LOSS_QTY,0))  LOSS185
     , SUM(DECODE(LOSS.LOSS_CODE,'714',LOSS.LOSS_QTY,0))  LOSS186
     , SUM(DECODE(LOSS.LOSS_CODE,'715',LOSS.LOSS_QTY,0))  LOSS187
     , SUM(DECODE(LOSS.LOSS_CODE,'716',LOSS.LOSS_QTY,0))  LOSS188
     , SUM(DECODE(LOSS.LOSS_CODE,'718',LOSS.LOSS_QTY,0))  LOSS189
     , SUM(DECODE(LOSS.LOSS_CODE,'719',LOSS.LOSS_QTY,0))  LOSS190
     , SUM(DECODE(LOSS.LOSS_CODE,'720',LOSS.LOSS_QTY,0))  LOSS191
     , SUM(DECODE(LOSS.LOSS_CODE,'721',LOSS.LOSS_QTY,0))  LOSS192
     , SUM(DECODE(LOSS.LOSS_CODE,'722',LOSS.LOSS_QTY,0))  LOSS193
     , SUM(DECODE(LOSS.LOSS_CODE,'760',LOSS.LOSS_QTY,0))  LOSS194
     , SUM(DECODE(LOSS.LOSS_CODE,'802',LOSS.LOSS_QTY,0))  LOSS195
     , SUM(DECODE(LOSS.LOSS_CODE,'803',LOSS.LOSS_QTY,0))  LOSS196
     , SUM(DECODE(LOSS.LOSS_CODE,'804',LOSS.LOSS_QTY,0))  LOSS197
     , SUM(DECODE(LOSS.LOSS_CODE,'805',LOSS.LOSS_QTY,0))  LOSS198
     , SUM(DECODE(LOSS.LOSS_CODE,'808',LOSS.LOSS_QTY,0))  LOSS199
     , SUM(DECODE(LOSS.LOSS_CODE,'809',LOSS.LOSS_QTY,0))  LOSS200
     , SUM(DECODE(LOSS.LOSS_CODE,'810',LOSS.LOSS_QTY,0))  LOSS201
     , SUM(DECODE(LOSS.LOSS_CODE,'811',LOSS.LOSS_QTY,0))  LOSS202
     , SUM(DECODE(LOSS.LOSS_CODE,'812',LOSS.LOSS_QTY,0))  LOSS203
     , SUM(DECODE(LOSS.LOSS_CODE,'813',LOSS.LOSS_QTY,0))  LOSS204
     , SUM(DECODE(LOSS.LOSS_CODE,'815',LOSS.LOSS_QTY,0))  LOSS205
     , SUM(DECODE(LOSS.LOSS_CODE,'816',LOSS.LOSS_QTY,0))  LOSS206
     , SUM(DECODE(LOSS.LOSS_CODE,'818',LOSS.LOSS_QTY,0))  LOSS207
     , SUM(DECODE(LOSS.LOSS_CODE,'819',LOSS.LOSS_QTY,0))  LOSS208
     , SUM(DECODE(LOSS.LOSS_CODE,'820',LOSS.LOSS_QTY,0))  LOSS209
     , SUM(DECODE(LOSS.LOSS_CODE,'821',LOSS.LOSS_QTY,0))  LOSS210
     , SUM(DECODE(LOSS.LOSS_CODE,'822',LOSS.LOSS_QTY,0))  LOSS211
     , SUM(DECODE(LOSS.LOSS_CODE,'823',LOSS.LOSS_QTY,0))  LOSS212
     , SUM(DECODE(LOSS.LOSS_CODE,'829',LOSS.LOSS_QTY,0))  LOSS213
     , SUM(DECODE(LOSS.LOSS_CODE,'830',LOSS.LOSS_QTY,0))  LOSS214
     , SUM(DECODE(LOSS.LOSS_CODE,'862',LOSS.LOSS_QTY,0))  LOSS215
     , SUM(DECODE(LOSS.LOSS_CODE,'866',LOSS.LOSS_QTY,0))  LOSS216
     , SUM(DECODE(LOSS.LOSS_CODE,'867',LOSS.LOSS_QTY,0))  LOSS217
     , SUM(DECODE(LOSS.LOSS_CODE,'889',LOSS.LOSS_QTY,0))  LOSS218
     , SUM(DECODE(LOSS.LOSS_CODE,'890',LOSS.LOSS_QTY,0))  LOSS219
     , SUM(DECODE(LOSS.LOSS_CODE,'891',LOSS.LOSS_QTY,0))  LOSS220
     , SUM(DECODE(LOSS.LOSS_CODE,'892',LOSS.LOSS_QTY,0))  LOSS221
     , SUM(DECODE(LOSS.LOSS_CODE,'893',LOSS.LOSS_QTY,0))  LOSS222
     , SUM(DECODE(LOSS.LOSS_CODE,'894',LOSS.LOSS_QTY,0))  LOSS223
     , SUM(DECODE(LOSS.LOSS_CODE,'903',LOSS.LOSS_QTY,0))  LOSS224
     , SUM(DECODE(LOSS.LOSS_CODE,'904',LOSS.LOSS_QTY,0))  LOSS225
     , SUM(DECODE(LOSS.LOSS_CODE,'905',LOSS.LOSS_QTY,0))  LOSS226
     , SUM(DECODE(LOSS.LOSS_CODE,'924',LOSS.LOSS_QTY,0))  LOSS227
     , SUM(DECODE(LOSS.LOSS_CODE,'925',LOSS.LOSS_QTY,0))  LOSS228
     , SUM(DECODE(LOSS.LOSS_CODE,'929',LOSS.LOSS_QTY,0))  LOSS229
     , SUM(DECODE(LOSS.LOSS_CODE,'930',LOSS.LOSS_QTY,0))  LOSS230
     , SUM(DECODE(LOSS.LOSS_CODE,'931',LOSS.LOSS_QTY,0))  LOSS231
     , SUM(DECODE(LOSS.LOSS_CODE,'932',LOSS.LOSS_QTY,0))  LOSS232
     , SUM(DECODE(LOSS.LOSS_CODE,'935',LOSS.LOSS_QTY,0))  LOSS233
     , SUM(DECODE(LOSS.LOSS_CODE,'936',LOSS.LOSS_QTY,0))  LOSS234
     , SUM(DECODE(LOSS.LOSS_CODE,'937',LOSS.LOSS_QTY,0))  LOSS235
     , SUM(DECODE(LOSS.LOSS_CODE,'940',LOSS.LOSS_QTY,0))  LOSS236
     , SUM(DECODE(LOSS.LOSS_CODE,'944',LOSS.LOSS_QTY,0))  LOSS237
     , SUM(DECODE(LOSS.LOSS_CODE,'945',LOSS.LOSS_QTY,0))  LOSS238
     , SUM(DECODE(LOSS.LOSS_CODE,'947',LOSS.LOSS_QTY,0))  LOSS239
     , SUM(DECODE(LOSS.LOSS_CODE,'948',LOSS.LOSS_QTY,0))  LOSS240
     , SUM(DECODE(LOSS.LOSS_CODE,'949',LOSS.LOSS_QTY,0))  LOSS241
     , SUM(DECODE(LOSS.LOSS_CODE,'950',LOSS.LOSS_QTY,0))  LOSS242
     , SUM(DECODE(LOSS.LOSS_CODE,'951',LOSS.LOSS_QTY,0))  LOSS243
     , SUM(DECODE(LOSS.LOSS_CODE,'953',LOSS.LOSS_QTY,0))  LOSS244
     , SUM(DECODE(LOSS.LOSS_CODE,'954',LOSS.LOSS_QTY,0))  LOSS245
     , SUM(DECODE(LOSS.LOSS_CODE,'955',LOSS.LOSS_QTY,0))  LOSS246
     , SUM(DECODE(LOSS.LOSS_CODE,'956',LOSS.LOSS_QTY,0))  LOSS247
     , SUM(DECODE(LOSS.LOSS_CODE,'957',LOSS.LOSS_QTY,0))  LOSS248
     , SUM(DECODE(LOSS.LOSS_CODE,'958',LOSS.LOSS_QTY,0))  LOSS249
     , SUM(DECODE(LOSS.LOSS_CODE,'962',LOSS.LOSS_QTY,0))  LOSS250
     , SUM(DECODE(LOSS.LOSS_CODE,'970',LOSS.LOSS_QTY,0))  LOSS251
     , SUM(DECODE(LOSS.LOSS_CODE,'971',LOSS.LOSS_QTY,0))  LOSS252
     , SUM(DECODE(LOSS.LOSS_CODE,'991',LOSS.LOSS_QTY,0))  LOSS253
     , SUM(DECODE(LOSS.LOSS_CODE,'992',LOSS.LOSS_QTY,0))  LOSS254
     , SUM(DECODE(LOSS.LOSS_CODE,'995',LOSS.LOSS_QTY,0))  LOSS255
     , SUM(DECODE(LOSS.LOSS_CODE,'996',LOSS.LOSS_QTY,0))  LOSS256
     , SUM(DECODE(LOSS.LOSS_CODE,'997',LOSS.LOSS_QTY,0))  LOSS257
     , SUM(DECODE(LOSS.LOSS_CODE,'129',LOSS.LOSS_QTY,0))  LOSS258
     , SUM(DECODE(LOSS.LOSS_CODE,'130',LOSS.LOSS_QTY,0))  LOSS259
     , SUM(DECODE(LOSS.LOSS_CODE,'131',LOSS.LOSS_QTY,0))  LOSS260
     , SUM(DECODE(LOSS.LOSS_CODE,'132',LOSS.LOSS_QTY,0))  LOSS261
     , SUM(DECODE(LOSS.LOSS_CODE,'133',LOSS.LOSS_QTY,0))  LOSS262
     , SUM(DECODE(LOSS.LOSS_CODE,'1001',LOSS.LOSS_QTY,0))  LOSS263
     , SUM(DECODE(LOSS.LOSS_CODE,'1002',LOSS.LOSS_QTY,0))  LOSS264
     , SUM(DECODE(LOSS.LOSS_CODE,'1003',LOSS.LOSS_QTY,0))  LOSS265
     , SUM(DECODE(LOSS.LOSS_CODE,'1004',LOSS.LOSS_QTY,0))  LOSS266
     , SUM(DECODE(LOSS.LOSS_CODE,'1005',LOSS.LOSS_QTY,0))  LOSS267
     , SUM(DECODE(LOSS.LOSS_CODE,'1006',LOSS.LOSS_QTY,0))  LOSS268
     , SUM(DECODE(LOSS.LOSS_CODE,'1007',LOSS.LOSS_QTY,0))  LOSS269
     , SUM(DECODE(LOSS.LOSS_CODE,'1008',LOSS.LOSS_QTY,0))  LOSS270
     , SUM(DECODE(LOSS.LOSS_CODE,'1009',LOSS.LOSS_QTY,0))  LOSS271
     , SUM(DECODE(LOSS.LOSS_CODE,'1010',LOSS.LOSS_QTY,0))  LOSS272
     , SUM(DECODE(LOSS.LOSS_CODE,'1011',LOSS.LOSS_QTY,0))  LOSS273
     , SUM(DECODE(LOSS.LOSS_CODE,'1012',LOSS.LOSS_QTY,0))  LOSS274
     , SUM(DECODE(LOSS.LOSS_CODE,'1021',LOSS.LOSS_QTY,0))  LOSS275
     , SUM(DECODE(LOSS.LOSS_CODE,'1022',LOSS.LOSS_QTY,0))  LOSS276
     , SUM(DECODE(LOSS.LOSS_CODE,'1023',LOSS.LOSS_QTY,0))  LOSS277
     , SUM(DECODE(LOSS.LOSS_CODE,'1024',LOSS.LOSS_QTY,0))  LOSS278
     , SUM(DECODE(LOSS.LOSS_CODE,'1025',LOSS.LOSS_QTY,0))  LOSS279
     , SUM(DECODE(LOSS.LOSS_CODE,'1026',LOSS.LOSS_QTY,0))  LOSS280
     , SUM(DECODE(LOSS.LOSS_CODE,'1027',LOSS.LOSS_QTY,0))  LOSS281
     , SUM(DECODE(LOSS.LOSS_CODE,'1028',LOSS.LOSS_QTY,0))  LOSS282
     , SUM(DECODE(LOSS.LOSS_CODE,'1029',LOSS.LOSS_QTY,0))  LOSS283
     , SUM(DECODE(LOSS.LOSS_CODE,'1031',LOSS.LOSS_QTY,0))  LOSS284
     , SUM(DECODE(LOSS.LOSS_CODE,'1032',LOSS.LOSS_QTY,0))  LOSS285
     , SUM(DECODE(LOSS.LOSS_CODE,'1033',LOSS.LOSS_QTY,0))  LOSS286
     , SUM(DECODE(LOSS.LOSS_CODE,'1034',LOSS.LOSS_QTY,0))  LOSS287
     , SUM(DECODE(LOSS.LOSS_CODE,'1035',LOSS.LOSS_QTY,0))  LOSS288
     , SUM(DECODE(LOSS.LOSS_CODE,'1099',LOSS.LOSS_QTY,0))  LOSS289
     , SUM(DECODE(LOSS.LOSS_CODE,'1101',LOSS.LOSS_QTY,0))  LOSS290
     , SUM(DECODE(LOSS.LOSS_CODE,'1102',LOSS.LOSS_QTY,0))  LOSS291
     , SUM(DECODE(LOSS.LOSS_CODE,'1103',LOSS.LOSS_QTY,0))  LOSS292
     , SUM(DECODE(LOSS.LOSS_CODE,'1111',LOSS.LOSS_QTY,0))  LOSS293
     , SUM(DECODE(LOSS.LOSS_CODE,'1112',LOSS.LOSS_QTY,0))  LOSS294
     , SUM(DECODE(LOSS.LOSS_CODE,'1113',LOSS.LOSS_QTY,0))  LOSS295
     , SUM(DECODE(LOSS.LOSS_CODE,'1114',LOSS.LOSS_QTY,0))  LOSS296
     , SUM(DECODE(LOSS.LOSS_CODE,'1115',LOSS.LOSS_QTY,0))  LOSS297
     , SUM(DECODE(LOSS.LOSS_CODE,'1116',LOSS.LOSS_QTY,0))  LOSS298
     , SUM(DECODE(LOSS.LOSS_CODE,'1117',LOSS.LOSS_QTY,0))  LOSS299
     , SUM(DECODE(LOSS.LOSS_CODE,'1118',LOSS.LOSS_QTY,0))  LOSS300
     , SUM(DECODE(LOSS.LOSS_CODE,'1119',LOSS.LOSS_QTY,0))  LOSS301
     , SUM(DECODE(LOSS.LOSS_CODE,'1131',LOSS.LOSS_QTY,0))  LOSS302
     , SUM(DECODE(LOSS.LOSS_CODE,'1132',LOSS.LOSS_QTY,0))  LOSS303
     , SUM(DECODE(LOSS.LOSS_CODE,'1133',LOSS.LOSS_QTY,0))  LOSS304
     , SUM(DECODE(LOSS.LOSS_CODE,'1134',LOSS.LOSS_QTY,0))  LOSS305
     , SUM(DECODE(LOSS.LOSS_CODE,'1135',LOSS.LOSS_QTY,0))  LOSS306
     , SUM(DECODE(LOSS.LOSS_CODE,'1201',LOSS.LOSS_QTY,0))  LOSS307
     , SUM(DECODE(LOSS.LOSS_CODE,'1202',LOSS.LOSS_QTY,0))  LOSS308
     , SUM(DECODE(LOSS.LOSS_CODE,'1203',LOSS.LOSS_QTY,0))  LOSS309
     , SUM(DECODE(LOSS.LOSS_CODE,'1204',LOSS.LOSS_QTY,0))  LOSS310
     , SUM(DECODE(LOSS.LOSS_CODE,'1205',LOSS.LOSS_QTY,0))  LOSS311
     , SUM(DECODE(LOSS.LOSS_CODE,'1206',LOSS.LOSS_QTY,0))  LOSS312
     , SUM(DECODE(LOSS.LOSS_CODE,'1207',LOSS.LOSS_QTY,0))  LOSS313
     , SUM(DECODE(LOSS.LOSS_CODE,'1208',LOSS.LOSS_QTY,0))  LOSS314
     , SUM(DECODE(LOSS.LOSS_CODE,'1209',LOSS.LOSS_QTY,0))  LOSS315
     , SUM(DECODE(LOSS.LOSS_CODE,'1210',LOSS.LOSS_QTY,0))  LOSS316
     , SUM(DECODE(LOSS.LOSS_CODE,'1211',LOSS.LOSS_QTY,0))  LOSS317
     , SUM(DECODE(LOSS.LOSS_CODE,'9500',LOSS.LOSS_QTY,0))  LOSS318
     , SUM(DECODE(LOSS.LOSS_CODE,'9100',LOSS.LOSS_QTY,0))  LOSS319
     , SUM(DECODE(LOSS.LOSS_CODE,'9000',LOSS.LOSS_QTY,0))  LOSS320
     , SUM(DECODE(LOSS.LOSS_CODE,'9501',LOSS.LOSS_QTY,0))  LOSS321
     , SUM(DECODE(LOSS.LOSS_CODE,'1076',LOSS.LOSS_QTY,0))  LOSS322
     , SUM(DECODE(LOSS.LOSS_CODE,'1077',LOSS.LOSS_QTY,0))  LOSS323
     , SUM(DECODE(LOSS.LOSS_CODE,'1078',LOSS.LOSS_QTY,0))  LOSS324
     , SUM(DECODE(LOSS.LOSS_CODE,'1079',LOSS.LOSS_QTY,0))  LOSS325
     , SUM(DECODE(LOSS.LOSS_CODE,'1080',LOSS.LOSS_QTY,0))  LOSS326
     , SUM(DECODE(LOSS.LOSS_CODE,'1081',LOSS.LOSS_QTY,0))  LOSS327
     , SUM(DECODE(LOSS.LOSS_CODE,'1082',LOSS.LOSS_QTY,0))  LOSS328
     , SUM(DECODE(LOSS.LOSS_CODE,'1083',LOSS.LOSS_QTY,0))  LOSS329
     , SUM(DECODE(LOSS.LOSS_CODE,'1084',LOSS.LOSS_QTY,0))  LOSS330
     , SUM(DECODE(LOSS.LOSS_CODE,'1085',LOSS.LOSS_QTY,0))  LOSS331
     , SUM(DECODE(LOSS.LOSS_CODE,'1086',LOSS.LOSS_QTY,0))  LOSS332
     , SUM(DECODE(LOSS.LOSS_CODE,'1087',LOSS.LOSS_QTY,0))  LOSS333
     , SUM(DECODE(LOSS.LOSS_CODE,'1088',LOSS.LOSS_QTY,0))  LOSS334
     , SUM(DECODE(LOSS.LOSS_CODE,'1089',LOSS.LOSS_QTY,0))  LOSS335
     , SUM(DECODE(LOSS.LOSS_CODE,'1801',LOSS.LOSS_QTY,0))  LOSS336
     , SUM(DECODE(LOSS.LOSS_CODE,'1802',LOSS.LOSS_QTY,0))  LOSS337
     , SUM(DECODE(LOSS.LOSS_CODE,'1803',LOSS.LOSS_QTY,0))  LOSS338
     , SUM(DECODE(LOSS.LOSS_CODE,'1804',LOSS.LOSS_QTY,0))  LOSS339
     , SUM(DECODE(LOSS.LOSS_CODE,'1805',LOSS.LOSS_QTY,0))  LOSS340
     , SUM(DECODE(LOSS.LOSS_CODE,'1806',LOSS.LOSS_QTY,0))  LOSS341
     , SUM(DECODE(LOSS.LOSS_CODE,'1807',LOSS.LOSS_QTY,0))  LOSS342
     , SUM(DECODE(LOSS.LOSS_CODE,'1075',LOSS.LOSS_QTY,0))  LOSS343
     , SUM(DECODE(LOSS.LOSS_CODE,'1074',LOSS.LOSS_QTY,0))  LOSS344
     , SUM(DECODE(LOSS.LOSS_CODE,'1073',LOSS.LOSS_QTY,0))  LOSS345
     , SUM(DECODE(LOSS.LOSS_CODE,'1071',LOSS.LOSS_QTY,0))  LOSS346
     , SUM(DECODE(LOSS.LOSS_CODE,'1072',LOSS.LOSS_QTY,0))  LOSS347
     , SUM(DECODE(LOSS.LOSS_CODE,'1090',LOSS.LOSS_QTY,0))  LOSS348

  FROM ( 
        SELECT  ' ',  ' ', MAT.MAT_GRP_6, MAT.MAT_GRP_3,  ' ',  ' ',  ' ',  ' ', A.MAT_ID
             , A.LOT_ID AS LOT_ID 
             , TO_CHAR(TO_DATE(C.CREATE_TIME,'yyyymmddhh24miss')) AS IN_TIME 
             , TO_CHAR(TO_DATE(A.TRAN_TIME,'yyyymmddhh24miss')) AS SHIP_TIME 
             , ROUND((TO_DATE(A.TRAN_TIME,'yyyymmddhh24miss') - TO_DATE(C.CREATE_TIME,'yyyymmddhh24miss')),2) AS TAT 
             , (  
                SELECT MIN(QTY_1)   
                  FROM RWIPLOTHIS  
                 WHERE FACTORY = 'HMVA2'  
                   AND OLD_OPER >= 'A1000'  
                   AND LOT_ID=A.LOT_ID  
                   AND TRAN_CODE IN ('END','SHIP')    
                   AND HIST_DEL_FLAG = ' '               
               ) AS BE_OUT 
             , A.QTY_1 AS OUT_QTY 
          FROM DT A
             , MWIPMATDEF MAT
             , RWIPLOTSTS C 
         WHERE 1=1
           AND A.MAT_ID=MAT.MAT_ID 
           AND A.LOT_ID=C.LOT_ID 
           AND MAT.FACTORY = 'HMVA2' 
       ) SUMMERY
     , (
        SELECT LOT_ID
             , LOSS_CODE
             , SUM(LOSS_QTY) AS LOSS_QTY 
             , SUM(CASE WHEN OPER < 'A1000' THEN LOSS_QTY 
                        ELSE 0 
                   END) IL_LOSS_QTY 
             , SUM(CASE WHEN OPER >= 'A1000' THEN LOSS_QTY 
                        ELSE 0 
                   END) BE_LOSS_QTY 
          FROM (
                SELECT LOT_ID, OPER, LOSS_CODE, LOSS_QTY
                  FROM RWIPLOTLSM
                 WHERE 1=1
                   AND FACTORY = 'HMVA2'  
                   AND HIST_DEL_FLAG = ' '
                   AND LOT_ID IN ( 
                                  SELECT LOT_ID 
                                    FROM DT 
                                 ) 
                UNION ALL 
                SELECT /*+ INDEX (LSM, RWIPLOTLSM_IDX02) */SPL.FROM_TO_LOT_ID AS LOT_ID, OPER, LOSS_CODE, LOSS_QTY
                  FROM RWIPLOTLSM LSM
                     , (
                        SELECT LOT_ID, FROM_TO_LOT_ID 
                          FROM RWIPLOTSTS 
                         WHERE 1=1
                           AND FACTORY = 'HMVA2'  
                           AND LOT_TYPE = 'W' 
                           AND ADD_ORDER_ID_2 = 'MULTIEQP' 
                           AND FROM_TO_LOT_ID IN ( 
                                                  SELECT LOT_ID 
                                                    FROM DT 
                                                 ) 
                       ) SPL
                 WHERE 1=1
                   AND LSM.LOT_ID = SPL.LOT_ID
                   AND LSM.FACTORY = 'HMVA2'  
                   AND HIST_DEL_FLAG = ' '
               )
         GROUP BY LOT_ID,LOSS_CODE,LOSS_QTY
       ) LOSS
 WHERE SUMMERY.LOT_ID=LOSS.LOT_ID(+)
 GROUP BY  ' ',  ' ', SUMMERY.MAT_GRP_6, SUMMERY.MAT_GRP_3,  ' ',  ' ',  ' ',  ' ', SUMMERY.MAT_ID
        , SUMMERY.LOT_ID,SUMMERY.IN_TIME,SUMMERY.SHIP_TIME, SUMMERY.TAT 
        , SUMMERY.BE_OUT, SUMMERY.OUT_QTY 
 ORDER BY   ' ',  ' ', SUMMERY.MAT_GRP_6, SUMMERY.MAT_GRP_3,  ' ',  ' ',  ' ',  ' ', SUMMERY.MAT_ID,SUMMERY.LOT_ID

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
SELECT  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', SUMMERY.OPER,  ' ',  ' '
     , SUMMERY.MAT_ID 
     , SUMMERY.LOT_ID 
     , SUMMERY.LOT_CMF_5 
     , SUMMERY.END_RES_ID 
     , SUMMERY.QTY_1 + SUMMERY.LOSS_QTY AS OPER_IN_QTY_1 
     , SUMMERY.QTY_1 
     , ROUND(SUMMERY.QTY_1/(SUMMERY.QTY_1 + SUMMERY.LOSS_QTY)*100,3) AS YIELD 
     , TO_CHAR(TO_DATE(SUMMERY.OPER_IN_TIME,'yyyymmddhh24miss')) AS OPER_IN_TIME 
     , TO_CHAR(TO_DATE(SUMMERY.TRAN_TIME,'yyyymmddhh24miss')) AS TRAN_TIME 
     , DECODE(SUMMERY.TRAN_CMF_18, ' ', ' ', SUMMERY.IN_USER_DESC || '(' || SUMMERY.TRAN_CMF_18 || ')') AS IN_USER_ID 
     , SUMMERY.END_USER_DESC || '(' || SUMMERY.TRAN_USER_ID || ')' AS END_USER_ID 
     , SUMMERY.LOT_CMF_10 
     , SUMMERY.TRAN_CMF_2 AS HD 
     , SUMMERY.TRAN_CMF_3 AS PGM 
     , SUMMERY.CRR_ID 
     , '' EPOXY 
     , '' LF 
     , '' GW 
     , '' MATAL_CARD 
     , '' EMC_LOT 
     , '' EMC_CAN 
     , '' EMC_TYPE 
     , SUMMERY.TRAN_COMMENT 
     , SUMMERY.QTY_2 
     , SUMMERY.TRAN_CMF_17 AS CV 
     , SUMMERY.LOT_CMF_7 AS ASSY_SITE 
     , SUMMERY.LOT_CMF_11 AS SHIP_SITE 
     , SUMMERY.TRAN_CMF_7 AS REWORK_BALL 
     , SUMMERY.TRAN_CMF_8 AS REWORK_CLEAN 
     , SUMMERY.TRAN_CMF_9 AS REWORK_PRINT 
     , LOT_CMF_3 
  FROM (  
        SELECT MAT_ID 
             , LOT_ID 
             , LOT_CMF_5 
             , LOT_CMF_10 
             , OLD_OPER AS OPER 
             , END_RES_ID 
             , TRAN_CMF_2 
             , TRAN_CMF_3 
             , NVL(( 
                    SELECT SUM(LOSS_QTY) AS LOSS_QTY 
                      FROM RWIPLOTLSM 
                     WHERE LOT_ID = A.LOT_ID 
                       AND OPER = A.OLD_OPER 
                     GROUP BY LOT_ID 
                  ), 0) AS LOSS_QTY 
             , CASE WHEN TRAN_CODE = 'SHIP' AND FACTORY = OLD_FACTORY THEN OLD_QTY_1 - QTY_1 
                    ELSE QTY_1 
               END QTY_1 
             , DECODE(START_TIME, ' ', OLD_OPER_IN_TIME, START_TIME) AS OPER_IN_TIME 
             , TRAN_TIME 
             , TRAN_USER_ID 
             , CRR_ID 
             , TRAN_COMMENT 
             , ( 
                SELECT USER_DESC FROM RWEBUSRDEF WHERE FACTORY = 'SYSTEM' AND USER_ID = A.TRAN_USER_ID 
               ) AS END_USER_DESC 
             , QTY_2 
             , CASE WHEN A.OLD_OPER LIKE 'A040%' AND A.RESV_FLAG_5 = 'Y' AND (SELECT CASE WHEN (TRAN_CMF_4 = 'RFID TAG WRITE : SUCCESS') 
                                                                                            OR (RESV_FLAG_5 = 'Y' AND TRAN_CMF_19 = 'RFID' AND TRAN_USER_ID = 'EIS') THEN 'RFID' 
                                                                                          ELSE ' ' 
                                                                                     END  
                                                                                FROM RWIPLOTHIS 
                                                                               WHERE FACTORY = A.OLD_FACTORY 
                                                                                 AND LOT_TYPE = A.OLD_LOT_TYPE 
                                                                                 AND LOT_ID = A.LOT_ID 
                                                                                 AND OPER = A.OLD_OPER 
                                                                                 AND TRAN_TIME < A.TRAN_TIME 
                                                                                 AND FACTORY = 'HMVA2' 
                                                                                 AND LOT_TYPE = 'W' 
                                                                                 AND RESV_FLAG_5 = 'Y' 
                                                                                 AND TRAN_CODE = 'START' 
                                                                                 AND HIST_DEL_FLAG = ' ') = 'RFID' THEN TRAN_CMF_18 || '[RFID]' 
                     WHEN A.OLD_OPER NOT LIKE 'A040%' AND A.RESV_FLAG_5 = 'Y' AND A.TRAN_CMF_19 = 'RFID' AND A.TRAN_USER_ID = 'EIS' THEN TRAN_CMF_18 || '[' || TRIM(TRAN_CMF_19) || ']' 
                     ELSE TRAN_CMF_18 
               END AS TRAN_CMF_18 
             , ( 
                SELECT USER_DESC FROM RWEBUSRDEF WHERE FACTORY = 'SYSTEM' AND USER_ID = A.TRAN_CMF_18 
               ) AS IN_USER_DESC 
             , LOT_CMF_7 
             , TRAN_CMF_17 
             , LOT_CMF_11 
             , TRAN_CMF_7 
             , TRAN_CMF_8 
             , TRAN_CMF_9 
             , LOT_CMF_3 
          FROM RWIPLOTHIS A 
         WHERE 1=1 
           AND TRAN_TIME BETWEEN '20200717220000' AND '20200721215959' 
           AND OLD_FACTORY = 'HMVA2' 
           AND TRAN_CODE IN ('END','SHIP') 
           AND LOT_TYPE = 'W' 
           AND HIST_DEL_FLAG = ' ' 
           AND MAT_ID LIKE 'AK%' 
           AND OLD_OPER IN ('A1150')
           AND END_RES_ID LIKE '%'
           AND LOT_CMF_5 LIKE '%'
       ) SUMMERY 
     , MWIPMATDEF MAT 
 WHERE 1=1 
   AND SUMMERY.MAT_ID = MAT.MAT_ID 
   AND MAT.FACTORY = 'HMVA2' 
   AND MAT.MAT_TYPE = 'FG' 
 ORDER BY  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', SUMMERY.OPER,  ' ',  ' ',SUMMERY.END_RES_ID,LOT_ID,MAT_ID 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', SUMMERY.OPER,  ' ',  ' '
     , SUMMERY.MAT_ID 
     , SUMMERY.LOT_ID 
     , SUMMERY.LOT_CMF_5 
     , SUMMERY.END_RES_ID 
     , SUMMERY.QTY_1 + SUMMERY.LOSS_QTY AS OPER_IN_QTY_1 
     , SUMMERY.QTY_1 
     , ROUND(SUMMERY.QTY_1/(SUMMERY.QTY_1 + SUMMERY.LOSS_QTY)*100,3) AS YIELD 
     , TO_CHAR(TO_DATE(SUMMERY.OPER_IN_TIME,'yyyymmddhh24miss')) AS OPER_IN_TIME 
     , TO_CHAR(TO_DATE(SUMMERY.TRAN_TIME,'yyyymmddhh24miss')) AS TRAN_TIME 
     , DECODE(SUMMERY.TRAN_CMF_18, ' ', ' ', SUMMERY.IN_USER_DESC || '(' || SUMMERY.TRAN_CMF_18 || ')') AS IN_USER_ID 
     , SUMMERY.END_USER_DESC || '(' || SUMMERY.TRAN_USER_ID || ')' AS END_USER_ID 
     , SUMMERY.LOT_CMF_10 
     , SUMMERY.TRAN_CMF_2 AS HD 
     , SUMMERY.TRAN_CMF_3 AS PGM 
     , SUMMERY.CRR_ID 
     , '' EPOXY 
     , '' LF 
     , '' GW 
     , '' MATAL_CARD 
     , '' EMC_LOT 
     , '' EMC_CAN 
     , '' EMC_TYPE 
     , SUMMERY.TRAN_COMMENT 
     , SUMMERY.QTY_2 
     , SUMMERY.TRAN_CMF_17 AS CV 
     , SUMMERY.LOT_CMF_7 AS ASSY_SITE 
     , SUMMERY.LOT_CMF_11 AS SHIP_SITE 
     , SUMMERY.TRAN_CMF_7 AS REWORK_BALL 
     , SUMMERY.TRAN_CMF_8 AS REWORK_CLEAN 
     , SUMMERY.TRAN_CMF_9 AS REWORK_PRINT 
     , LOT_CMF_3 
  FROM (  
        SELECT MAT_ID 
             , LOT_ID 
             , LOT_CMF_5 
             , LOT_CMF_10 
             , OLD_OPER AS OPER 
             , END_RES_ID 
             , TRAN_CMF_2 
             , TRAN_CMF_3 
             , NVL(( 
                    SELECT SUM(LOSS_QTY) AS LOSS_QTY 
                      FROM RWIPLOTLSM 
                     WHERE LOT_ID = A.LOT_ID 
                       AND OPER = A.OLD_OPER 
                     GROUP BY LOT_ID 
                  ), 0) AS LOSS_QTY 
             , CASE WHEN TRAN_CODE = 'SHIP' AND FACTORY = OLD_FACTORY THEN OLD_QTY_1 - QTY_1 
                    ELSE QTY_1 
               END QTY_1 
             , DECODE(START_TIME, ' ', OLD_OPER_IN_TIME, START_TIME) AS OPER_IN_TIME 
             , TRAN_TIME 
             , TRAN_USER_ID 
             , CRR_ID 
             , TRAN_COMMENT 
             , ( 
                SELECT USER_DESC FROM RWEBUSRDEF WHERE FACTORY = 'SYSTEM' AND USER_ID = A.TRAN_USER_ID 
               ) AS END_USER_DESC 
             , QTY_2 
             , CASE WHEN A.OLD_OPER LIKE 'A040%' AND A.RESV_FLAG_5 = 'Y' AND (SELECT CASE WHEN (TRAN_CMF_4 = 'RFID TAG WRITE : SUCCESS') 
                                                                                            OR (RESV_FLAG_5 = 'Y' AND TRAN_CMF_19 = 'RFID' AND TRAN_USER_ID = 'EIS') THEN 'RFID' 
                                                                                          ELSE ' ' 
                                                                                     END  
                                                                                FROM RWIPLOTHIS 
                                                                               WHERE FACTORY = A.OLD_FACTORY 
                                                                                 AND LOT_TYPE = A.OLD_LOT_TYPE 
                                                                                 AND LOT_ID = A.LOT_ID 
                                                                                 AND OPER = A.OLD_OPER 
                                                                                 AND TRAN_TIME < A.TRAN_TIME 
                                                                                 AND FACTORY = 'HMVA2' 
                                                                                 AND LOT_TYPE = 'W' 
                                                                                 AND RESV_FLAG_5 = 'Y' 
                                                                                 AND TRAN_CODE = 'START' 
                                                                                 AND HIST_DEL_FLAG = ' ') = 'RFID' THEN TRAN_CMF_18 || '[RFID]' 
                     WHEN A.OLD_OPER NOT LIKE 'A040%' AND A.RESV_FLAG_5 = 'Y' AND A.TRAN_CMF_19 = 'RFID' AND A.TRAN_USER_ID = 'EIS' THEN TRAN_CMF_18 || '[' || TRIM(TRAN_CMF_19) || ']' 
                     ELSE TRAN_CMF_18 
               END AS TRAN_CMF_18 
             , ( 
                SELECT USER_DESC FROM RWEBUSRDEF WHERE FACTORY = 'SYSTEM' AND USER_ID = A.TRAN_CMF_18 
               ) AS IN_USER_DESC 
             , LOT_CMF_7 
             , TRAN_CMF_17 
             , LOT_CMF_11 
             , TRAN_CMF_7 
             , TRAN_CMF_8 
             , TRAN_CMF_9 
             , LOT_CMF_3 
          FROM RWIPLOTHIS A 
         WHERE 1=1 
           AND TRAN_TIME BETWEEN '20200717220000' AND '20200721215959' 
           AND OLD_FACTORY = 'HMVA2' 
           AND TRAN_CODE IN ('END','SHIP') 
           AND LOT_TYPE = 'W' 
           AND HIST_DEL_FLAG = ' ' 
           AND MAT_ID LIKE 'AK%' 
           AND OLD_OPER IN ('A0400')
           AND END_RES_ID LIKE '%'
           AND LOT_CMF_5 LIKE '%'
       ) SUMMERY 
     , MWIPMATDEF MAT 
 WHERE 1=1 
   AND SUMMERY.MAT_ID = MAT.MAT_ID 
   AND MAT.FACTORY = 'HMVA2' 
   AND MAT.MAT_TYPE = 'FG' 
 ORDER BY  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', SUMMERY.OPER,  ' ',  ' ',SUMMERY.END_RES_ID,LOT_ID,MAT_ID 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', SUMMERY.OPER,  ' ',  ' '
     , SUMMERY.MAT_ID 
     , SUMMERY.LOT_ID 
     , SUMMERY.LOT_CMF_5 
     , SUMMERY.END_RES_ID 
     , SUMMERY.QTY_1 + SUMMERY.LOSS_QTY AS OPER_IN_QTY_1 
     , SUMMERY.QTY_1 
     , ROUND(SUMMERY.QTY_1/(SUMMERY.QTY_1 + SUMMERY.LOSS_QTY)*100,3) AS YIELD 
     , TO_CHAR(TO_DATE(SUMMERY.OPER_IN_TIME,'yyyymmddhh24miss')) AS OPER_IN_TIME 
     , TO_CHAR(TO_DATE(SUMMERY.TRAN_TIME,'yyyymmddhh24miss')) AS TRAN_TIME 
     , DECODE(SUMMERY.TRAN_CMF_18, ' ', ' ', SUMMERY.IN_USER_DESC || '(' || SUMMERY.TRAN_CMF_18 || ')') AS IN_USER_ID 
     , SUMMERY.END_USER_DESC || '(' || SUMMERY.TRAN_USER_ID || ')' AS END_USER_ID 
     , SUMMERY.LOT_CMF_10 
     , SUMMERY.TRAN_CMF_2 AS HD 
     , SUMMERY.TRAN_CMF_3 AS PGM 
     , SUMMERY.CRR_ID 
     , '' EPOXY 
     , '' LF 
     , '' GW 
     , '' MATAL_CARD 
     , '' EMC_LOT 
     , '' EMC_CAN 
     , '' EMC_TYPE 
     , SUMMERY.TRAN_COMMENT 
     , SUMMERY.QTY_2 
     , SUMMERY.TRAN_CMF_17 AS CV 
     , SUMMERY.LOT_CMF_7 AS ASSY_SITE 
     , SUMMERY.LOT_CMF_11 AS SHIP_SITE 
     , SUMMERY.TRAN_CMF_7 AS REWORK_BALL 
     , SUMMERY.TRAN_CMF_8 AS REWORK_CLEAN 
     , SUMMERY.TRAN_CMF_9 AS REWORK_PRINT 
     , LOT_CMF_3 
  FROM (  
        SELECT MAT_ID 
             , LOT_ID 
             , LOT_CMF_5 
             , LOT_CMF_10 
             , OLD_OPER AS OPER 
             , END_RES_ID 
             , TRAN_CMF_2 
             , TRAN_CMF_3 
             , NVL(( 
                    SELECT SUM(LOSS_QTY) AS LOSS_QTY 
                      FROM RWIPLOTLSM 
                     WHERE LOT_ID = A.LOT_ID 
                       AND OPER = A.OLD_OPER 
                     GROUP BY LOT_ID 
                  ), 0) AS LOSS_QTY 
             , CASE WHEN TRAN_CODE = 'SHIP' AND FACTORY = OLD_FACTORY THEN OLD_QTY_1 - QTY_1 
                    ELSE QTY_1 
               END QTY_1 
             , DECODE(START_TIME, ' ', OLD_OPER_IN_TIME, START_TIME) AS OPER_IN_TIME 
             , TRAN_TIME 
             , TRAN_USER_ID 
             , CRR_ID 
             , TRAN_COMMENT 
             , ( 
                SELECT USER_DESC FROM RWEBUSRDEF WHERE FACTORY = 'SYSTEM' AND USER_ID = A.TRAN_USER_ID 
               ) AS END_USER_DESC 
             , QTY_2 
             , CASE WHEN A.OLD_OPER LIKE 'A040%' AND A.RESV_FLAG_5 = 'Y' AND (SELECT CASE WHEN (TRAN_CMF_4 = 'RFID TAG WRITE : SUCCESS') 
                                                                                            OR (RESV_FLAG_5 = 'Y' AND TRAN_CMF_19 = 'RFID' AND TRAN_USER_ID = 'EIS') THEN 'RFID' 
                                                                                          ELSE ' ' 
                                                                                     END  
                                                                                FROM RWIPLOTHIS 
                                                                               WHERE FACTORY = A.OLD_FACTORY 
                                                                                 AND LOT_TYPE = A.OLD_LOT_TYPE 
                                                                                 AND LOT_ID = A.LOT_ID 
                                                                                 AND OPER = A.OLD_OPER 
                                                                                 AND TRAN_TIME < A.TRAN_TIME 
                                                                                 AND FACTORY = 'HMVA2' 
                                                                                 AND LOT_TYPE = 'W' 
                                                                                 AND RESV_FLAG_5 = 'Y' 
                                                                                 AND TRAN_CODE = 'START' 
                                                                                 AND HIST_DEL_FLAG = ' ') = 'RFID' THEN TRAN_CMF_18 || '[RFID]' 
                     WHEN A.OLD_OPER NOT LIKE 'A040%' AND A.RESV_FLAG_5 = 'Y' AND A.TRAN_CMF_19 = 'RFID' AND A.TRAN_USER_ID = 'EIS' THEN TRAN_CMF_18 || '[' || TRIM(TRAN_CMF_19) || ']' 
                     ELSE TRAN_CMF_18 
               END AS TRAN_CMF_18 
             , ( 
                SELECT USER_DESC FROM RWEBUSRDEF WHERE FACTORY = 'SYSTEM' AND USER_ID = A.TRAN_CMF_18 
               ) AS IN_USER_DESC 
             , LOT_CMF_7 
             , TRAN_CMF_17 
             , LOT_CMF_11 
             , TRAN_CMF_7 
             , TRAN_CMF_8 
             , TRAN_CMF_9 
             , LOT_CMF_3 
          FROM RWIPLOTHIS A 
         WHERE 1=1 
           AND TRAN_TIME BETWEEN '20200716220000' AND '20200721215959' 
           AND OLD_FACTORY = 'HMVA2' 
           AND TRAN_CODE IN ('END','SHIP') 
           AND LOT_TYPE = 'W' 
           AND HIST_DEL_FLAG = ' ' 
           AND MAT_ID LIKE 'AK%' 
           AND OLD_OPER IN ('A0400')
           AND END_RES_ID LIKE '%'
           AND LOT_CMF_5 LIKE '%'
       ) SUMMERY 
     , MWIPMATDEF MAT 
 WHERE 1=1 
   AND SUMMERY.MAT_ID = MAT.MAT_ID 
   AND MAT.FACTORY = 'HMVA2' 
   AND MAT.MAT_TYPE = 'FG' 
 ORDER BY  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', SUMMERY.OPER,  ' ',  ' ',SUMMERY.END_RES_ID,LOT_ID,MAT_ID 

-------------------------------------------------------------
SELECT OPER, OPER_DESC  FROM MWIPOPRDEF
  WHERE FACTORY = 'HMVA2'  AND OPER NOT IN ('00001', '00002') AND OPER NOT LIKE 'V%' ORDER BY DECODE(OPER_CMF_2, ' ', 99999, TO_NUMBER(OPER_CMF_2)), OPER
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
        SELECT (SELECT DATA_1 FROM MGCMTBLDAT WHERE TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = MAT_GRP_1 AND ROWNUM=1) AS CUSTOMER,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT_CMF_10, MAT_ID, OPER,  ' ', CASE WHEN OPER <= 'A0200' THEN VENDOR_MAT_ID ELSE BASE_MAT_ID END SAP_CODE
             , SUM(TOTAL) AS TOTAL
             , SUM(ASSY_END_QTY0 ) VAL0
             , SUM(ASSY_END_QTY1 ) VAL1
             , SUM(ASSY_END_QTY2 ) VAL2
             , SUM(ASSY_END_QTY3 ) VAL3
             , ROUND(SUM(TOTAL)/4, 1) AVG
          FROM (
               SELECT B.MAT_GRP_1,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', B.MAT_CMF_10, B.MAT_ID, A.OPER,  ' ', BASE_MAT_ID,VENDOR_MAT_ID 
                    , DECODE(WORK_MONTH, '202004', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY0
                    , DECODE(WORK_MONTH, '202005', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY1
                    , DECODE(WORK_MONTH, '202006', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY2
                    , DECODE(WORK_MONTH, '202007', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY3
                    , (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END) TOTAL
                 FROM (
                      SELECT FACTORY, MAT_ID, OPER, LOT_TYPE, MAT_VER, WORK_MONTH, CM_KEY_3
                           , SUM(END_LOT) AS END_LOT
                           , SUM(END_QTY_1) AS END_QTY_1
                           , SUM(END_QTY_2) AS END_QTY_2
                           , SUM(SHIP_QTY_1) AS SHIP_QTY_1
                           , SUM(SHIP_QTY_2) AS SHIP_QTY_2
                        FROM (
                             SELECT FACTORY, MAT_ID, OPER, LOT_TYPE, MAT_VER, WORK_MONTH, CM_KEY_3
                           , DECODE(SUBSTR(OPER,2,4),'0000',SUM(S1_OPER_IN_LOT+S2_OPER_IN_LOT+S3_OPER_IN_LOT),SUM(S1_END_LOT+S2_END_LOT+S3_END_LOT)) END_LOT
                           , DECODE(SUBSTR(OPER,2,4),'0000',SUM(S1_OPER_IN_QTY_1+S2_OPER_IN_QTY_1+S3_OPER_IN_QTY_1),SUM(S1_END_QTY_1+S2_END_QTY_1+S3_END_QTY_1+S1_END_RWK_QTY_1 + S2_END_RWK_QTY_1 + S3_END_RWK_QTY_1)) END_QTY_1
                           , DECODE(SUBSTR(OPER,2,4),'0000',SUM(S1_OPER_IN_QTY_2+S2_OPER_IN_QTY_2+S3_OPER_IN_QTY_2),SUM(S1_END_QTY_2+S2_END_QTY_2+S3_END_QTY_2+S1_END_RWK_QTY_2 + S2_END_RWK_QTY_2 + S3_END_RWK_QTY_2)) END_QTY_2
                           , 0 SHIP_QTY_1
                           , 0 SHIP_QTY_2
                        FROM RSUMWIPMOV 
                       WHERE OPER NOT IN ('AZ010','TZ010','F0000','EZ010', 'SZ010', 'BZ010')
                    GROUP BY FACTORY, MAT_ID, OPER, LOT_TYPE, MAT_VER, WORK_MONTH, CM_KEY_3
                   UNION ALL
                      SELECT CM_KEY_1 AS FACTORY, MAT_ID
                           , DECODE(CM_KEY_1,'HMVA2','AZ010','HMKT1','TZ010','FGS','F0000','HMKE1','EZ010','HMKS1','SZ010', 'BZ010') OPER
                           , LOT_TYPE, MAT_VER,  WORK_MONTH,CM_KEY_3
                           , 0 END_LOT
                           , 0 END_QTY_1
                           , 0 END_QTY_2
                           , SUM(S1_FAC_OUT_QTY_1+S2_FAC_OUT_QTY_1+S3_FAC_OUT_QTY_1) SHIP_QTY_1
                           , SUM(S1_FAC_OUT_QTY_2+S2_FAC_OUT_QTY_2+S3_FAC_OUT_QTY_2) SHIP_QTY_2
                        FROM RSUMFACMOV 
                       WHERE FACTORY NOT IN ('RETURN')
                    GROUP BY CM_KEY_1, MAT_ID, OPER, LOT_TYPE, MAT_VER, WORK_MONTH, CM_KEY_3
                             )
                    GROUP BY FACTORY, MAT_ID, OPER, LOT_TYPE, MAT_VER, WORK_MONTH, CM_KEY_3
                    )A
                  , MWIPMATDEF B 
              WHERE 1=1 
                AND A.FACTORY  = 'HMVA2' 
                AND A.FACTORY = B.FACTORY 
                AND A.MAT_ID = B.MAT_ID                
                AND A.MAT_VER = 1 
                AND B.MAT_VER = 1 
                AND B.MAT_TYPE = 'FG' 
                AND A.OPER IN ('AZ010')
                AND A.MAT_ID LIKE '%'  
                AND A.CM_KEY_3 LIKE 'P%'
                AND A.OPER NOT IN ('00001','00002') 
                AND A.WORK_MONTH BETWEEN '202004' AND '202007' 
         )   
   WHERE TOTAL > 0           
GROUP BY MAT_GRP_1,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT_CMF_10, MAT_ID, OPER,  ' ', BASE_MAT_ID,VENDOR_MAT_ID
ORDER BY MAT_GRP_1,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT_CMF_10, MAT_ID, DECODE(OPER,'AISSUE','A0001','TISSUE','T0001','EISSUE','E0001',OPER),  ' ', BASE_MAT_ID,VENDOR_MAT_ID

-------------------------------------------------------------
SELECT * FROM RWEBUSRDEF WHERE FACTORY = :FACTORY AND USER_ID= :USER_ID
-------------------------------------------------------------
SELECT A.FUNC_GRP_SEQ,A.SEC_GRP_ID,A.FUNC_GRP_ID,NVL(A.FUNC_NAME, ' ') FUNC_NAME, NVL(B.FUNC_DESC, ' ') FUNC_DESC, LANGUAGE_1, LANGUAGE_2, LANGUAGE_3
  FROM RWEBGRPFUN A, RWEBFUNDEF B
 WHERE A.FACTORY = :p_FACTORY
   AND A.SEC_GRP_ID = :p_SEC_GRP_ID
   AND A.FUNC_NAME=B.FUNC_NAME(+)
 ORDER BY A.FUNC_GRP_SEQ, A.FUNC_SEQ
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
SELECT MIN(SYS_DATE) AS START_DAY 
     , MAX(SYS_DATE) AS END_DAY 
     , PLAN_YEAR||DECODE(LENGTH(PLAN_WEEK), 1, '0'||PLAN_WEEK, PLAN_WEEK) AS WEEK
  FROM MWIPCALDEF 
 WHERE CALENDAR_ID = 'OTD'
   AND (PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) IN ( 
                                                SELECT WW
                                                  FROM (
                                                        SELECT WW
                                                             , ROW_NUMBER() OVER(ORDER BY WW) AS RNK
                                                          FROM (
                                                                SELECT DISTINCT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW
                                                                  FROM MWIPCALDEF
                                                                 WHERE CALENDAR_ID = 'OTD'
                                                                   AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') >= (
                                                                                                              SELECT MAX(PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) AS WW
                                                                                                                FROM MWIPCALDEF
                                                                                                               WHERE CALENDAR_ID = 'OTD'
                                                                                                                 AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') < (SELECT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW FROM MWIPCALDEF WHERE CALENDAR_ID = 'OTD' AND SYS_DATE = '20200721')
                                                                                                                 AND SYS_DATE >= TO_CHAR(TO_DATE('20200721', 'YYYYMMDD')-14, 'YYYYMMDD')
                                                                                                             )
                                                               ) 
                                                       )
                                                 WHERE RNK <= 7
                                               ) 
 GROUP BY PLAN_YEAR, PLAN_WEEK 
 ORDER BY PLAN_YEAR, PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE) AS START_DAY 
     , MAX(SYS_DATE) AS END_DAY 
     , PLAN_YEAR||DECODE(LENGTH(PLAN_WEEK), 1, '0'||PLAN_WEEK, PLAN_WEEK) AS WEEK
  FROM MWIPCALDEF 
 WHERE CALENDAR_ID = 'SE'
   AND (PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) IN ( 
                                                SELECT WW
                                                  FROM (
                                                        SELECT WW
                                                             , ROW_NUMBER() OVER(ORDER BY WW) AS RNK
                                                          FROM (
                                                                SELECT DISTINCT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW
                                                                  FROM MWIPCALDEF
                                                                 WHERE CALENDAR_ID = 'SE'
                                                                   AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') >= (
                                                                                                              SELECT MAX(PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) AS WW
                                                                                                                FROM MWIPCALDEF
                                                                                                               WHERE CALENDAR_ID = 'SE'
                                                                                                                 AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') < (SELECT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW FROM MWIPCALDEF WHERE CALENDAR_ID = 'SE' AND SYS_DATE = '20200721')
                                                                                                                 AND SYS_DATE >= TO_CHAR(TO_DATE('20200721', 'YYYYMMDD')-14, 'YYYYMMDD')
                                                                                                             )
                                                               ) 
                                                       )
                                                 WHERE RNK <= 7
                                               ) 
 GROUP BY PLAN_YEAR, PLAN_WEEK 
 ORDER BY PLAN_YEAR, PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT LANGUAGE_2 FROM RWEBFUNDEF WHERE FUNC_NAME = 'PRD010216'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE) AS START_DAY 
     , MAX(SYS_DATE) AS END_DAY 
     , PLAN_YEAR||DECODE(LENGTH(PLAN_WEEK), 1, '0'||PLAN_WEEK, PLAN_WEEK) AS WEEK
  FROM MWIPCALDEF 
 WHERE CALENDAR_ID = 'OTD'
   AND (PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) IN ( 
                                                SELECT WW
                                                  FROM (
                                                        SELECT WW
                                                             , ROW_NUMBER() OVER(ORDER BY WW) AS RNK
                                                          FROM (
                                                                SELECT DISTINCT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW
                                                                  FROM MWIPCALDEF
                                                                 WHERE CALENDAR_ID = 'OTD'
                                                                   AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') >= (
                                                                                                              SELECT MAX(PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) AS WW
                                                                                                                FROM MWIPCALDEF
                                                                                                               WHERE CALENDAR_ID = 'OTD'
                                                                                                                 AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') < (SELECT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW FROM MWIPCALDEF WHERE CALENDAR_ID = 'OTD' AND SYS_DATE = '20200718')
                                                                                                                 AND SYS_DATE >= TO_CHAR(TO_DATE('20200718', 'YYYYMMDD')-14, 'YYYYMMDD')
                                                                                                             )
                                                               ) 
                                                       )
                                                 WHERE RNK <= 7
                                               ) 
 GROUP BY PLAN_YEAR, PLAN_WEEK 
 ORDER BY PLAN_YEAR, PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE) AS START_DAY 
     , MAX(SYS_DATE) AS END_DAY 
     , PLAN_YEAR||DECODE(LENGTH(PLAN_WEEK), 1, '0'||PLAN_WEEK, PLAN_WEEK) AS WEEK
  FROM MWIPCALDEF 
 WHERE CALENDAR_ID = 'SE'
   AND (PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) IN ( 
                                                SELECT WW
                                                  FROM (
                                                        SELECT WW
                                                             , ROW_NUMBER() OVER(ORDER BY WW) AS RNK
                                                          FROM (
                                                                SELECT DISTINCT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW
                                                                  FROM MWIPCALDEF
                                                                 WHERE CALENDAR_ID = 'SE'
                                                                   AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') >= (
                                                                                                              SELECT MAX(PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) AS WW
                                                                                                                FROM MWIPCALDEF
                                                                                                               WHERE CALENDAR_ID = 'SE'
                                                                                                                 AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') < (SELECT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW FROM MWIPCALDEF WHERE CALENDAR_ID = 'SE' AND SYS_DATE = '20200718')
                                                                                                                 AND SYS_DATE >= TO_CHAR(TO_DATE('20200718', 'YYYYMMDD')-14, 'YYYYMMDD')
                                                                                                             )
                                                               ) 
                                                       )
                                                 WHERE RNK <= 7
                                               ) 
 GROUP BY PLAN_YEAR, PLAN_WEEK 
 ORDER BY PLAN_YEAR, PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT CUSTOMER,  ' ', MAT_GRP_2, MAT_GRP_3, MAT_GRP_4,  ' ', MAT_GRP_6,  ' ',  ' ',  ' ', CONV_MAT_ID,  ' ',  ' ',  ' ' 
     , WEEK_PLAN, SHP_WEEK, WEEK_DEF, REMAIN_MOLD, REMAIN_WB, REMAIN_DA, REMAIN_BG, REMAIN_INPUT, REMAIN_WF, DA_CAPA, WB_CAPA
     , D0_PLAN2, D0_DEF, SHP_TODAY, HMK3A, QC_GATE, PVI, BAKE, AVI, DC2, DC1, SIG, SBA, TRIM, MK, TIN, CURE, MOLD, PLASMA, GATE
     , WB9, DA9, WB8, DA8, WB7, DA7, WB6, DA6, WB5, DA5, WB4, DA4, WB3, DA3, WB2, DA2, WB1, DA1, SP, SAW, BG, HMK2A
     , D0_PLAN, D1_PLAN, D2_PLAN, D3_PLAN, D4_PLAN, DA1_CAPA, WB1_CAPA, DA2_CAPA, WB2_CAPA, DA3_CAPA, WB3_CAPA, DA4_CAPA, WB4_CAPA, DA5_CAPA, WB5_CAPA
     , DA6_CAPA, WB6_CAPA, DA7_CAPA, WB7_CAPA, DA8_CAPA, WB8_CAPA, DA9_CAPA, WB9_CAPA, WEEK2_PLAN, WEEK3_PLAN, WEEK4_PLAN, WEEK5_PLAN, ORI_PLAN, SHP_MONTH, MONTH_DEF, REV_PLAN, PER
  FROM(
SELECT (SELECT DATA_1 FROM MGCMTBLDAT WHERE TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = MAT.MAT_GRP_1 AND ROWNUM=1) AS CUSTOMER,  ' ', MAT.MAT_GRP_2, MAT.MAT_GRP_3, MAT.MAT_GRP_4,  ' ', MAT.MAT_GRP_6,  ' ',  ' ',  ' ', MAT.CONV_MAT_ID,  ' ',  ' ',  ' ' 
     , ROUND(SUM(NVL(WEEK1_PLAN, 0)) / 1, 0) AS WEEK_PLAN
     , ROUND(SUM(NVL(SHP_WEEK, 0)) / 1, 0) AS SHP_WEEK
     , ROUND(SUM(NVL(WEEK1_PLAN, 0) - NVL(SHP_WEEK, 0)) / 1, 0) AS WEEK_DEF
     , ROUND(SUM(NVL(WEEK1_PLAN, 0) - NVL(SHP_WEEK, 0) - NVL(W_MOLD, 0)) / 1, 0) AS REMAIN_MOLD 
     , ROUND(SUM(NVL(WEEK1_PLAN, 0) - NVL(SHP_WEEK, 0) - NVL(W_WB, 0)) / 1, 0) AS REMAIN_WB
     , ROUND(SUM(NVL(WEEK1_PLAN, 0) - NVL(SHP_WEEK, 0) - NVL(W_DA, 0)) / 1, 0) AS REMAIN_DA
     , ROUND(SUM(NVL(WEEK1_PLAN, 0) - NVL(SHP_WEEK, 0) - NVL(W_BG, 0)) / 1, 0) AS REMAIN_BG
     , ROUND(SUM(NVL(WEEK1_PLAN, 0) - NVL(SHP_WEEK, 0) - NVL(W_ISSUE, 0)) / 1, 0) AS REMAIN_INPUT
     , ROUND(SUM(NVL(WEEK1_PLAN, 0) - NVL(SHP_WEEK, 0) - NVL(TOTAL, 0)) / 1, 0) AS REMAIN_WF
     , ROUND(SUM(NVL(DA_CAPA, 0)) / 1, 0) AS DA_CAPA
     , ROUND(SUM(NVL(WB_CAPA, 0)) / 1, 0) AS WB_CAPA
     , ROUND(SUM(NVL(D0_PLAN, 0) + (NVL(WEEK1_TTL, 0) - NVL(SHP_WEEK_TTL, 0))) / 1, 0) AS D0_PLAN2
     , ROUND(SUM(NVL(D0_PLAN, 0) + (NVL(WEEK1_TTL, 0) - NVL(SHP_WEEK_TTL, 0)) - NVL(SHP_TODAY, 0)) / 1, 0) AS D0_DEF
     , ROUND(SUM(NVL(SHP_TODAY, 0)) / 1, 0) AS SHP_TODAY
     , ROUND(SUM(NVL(WIP.HMK3A, 0)) / 1, 0) AS HMK3A
     , ROUND(SUM(NVL(WIP.QC_GATE, 0)) / 1, 0) AS QC_GATE
     , ROUND(SUM(NVL(WIP.PVI, 0)) / 1, 0) AS PVI
     , ROUND(SUM(NVL(WIP.BAKE,0)) / 1, 0) AS BAKE
     , ROUND(SUM(NVL(WIP.AVI,0)) / 1, 0) AS AVI
     , ROUND(SUM(NVL(WIP.DC2,0)) / 1, 0) AS DC2
     , ROUND(SUM(NVL(WIP.DC1,0)) / 1, 0) AS DC1
     , ROUND(SUM(NVL(WIP.SIG,0)) / 1, 0) AS SIG
     , ROUND(SUM(NVL(WIP.SBA,0)) / 1, 0) AS SBA
     , ROUND(SUM(NVL(WIP.TIN,0)) / 1, 0) AS TIN
     , ROUND(SUM(NVL(WIP.TRIM,0)) / 1, 0) AS TRIM
     , ROUND(SUM(NVL(WIP.MK,0)) / 1, 0) AS MK
     , ROUND(SUM(NVL(WIP.CURE,0)) / 1, 0) AS CURE
     , ROUND(SUM(NVL(WIP.MOLD,0)) / 1, 0) AS MOLD
     , ROUND(SUM(NVL(WIP.PLASMA,0)) / 1, 0) AS PLASMA
     , ROUND(SUM(NVL(WIP.GATE,0)) / 1, 0) AS GATE
     , ROUND(SUM(NVL(WIP.WB9,0)) / 1, 0) AS WB9
     , ROUND(SUM(NVL(WIP.DA9,0)) / 1, 0) AS DA9
     , ROUND(SUM(NVL(WIP.WB8,0)) / 1, 0) AS WB8
     , ROUND(SUM(NVL(WIP.DA8,0)) / 1, 0) AS DA8
     , ROUND(SUM(NVL(WIP.WB7,0)) / 1, 0) AS WB7
     , ROUND(SUM(NVL(WIP.DA7,0)) / 1, 0) AS DA7
     , ROUND(SUM(NVL(WIP.WB6,0)) / 1, 0) AS WB6
     , ROUND(SUM(NVL(WIP.DA6,0)) / 1, 0) AS DA6
     , ROUND(SUM(NVL(WIP.WB5,0)) / 1, 0) AS WB5
     , ROUND(SUM(NVL(WIP.DA5,0)) / 1, 0) AS DA5
     , ROUND(SUM(NVL(WIP.WB4,0)) / 1, 0) AS WB4
     , ROUND(SUM(NVL(WIP.DA4,0)) / 1, 0) AS DA4
     , ROUND(SUM(NVL(WIP.WB3,0)) / 1, 0) AS WB3
     , ROUND(SUM(NVL(WIP.DA3,0)) / 1, 0) AS DA3
     , ROUND(SUM(NVL(WIP.WB2,0)) / 1, 0) AS WB2
     , ROUND(SUM(NVL(WIP.DA2,0)) / 1, 0) AS DA2
     , ROUND(SUM(NVL(WIP.WB1,0)) / 1, 0) AS WB1
     , ROUND(SUM(NVL(WIP.DA1,0)) / 1, 0) AS DA1
     , ROUND(SUM(NVL(WIP.SP,0)) / 1, 0) AS SP
     , ROUND(SUM(NVL(WIP.SAW,0)) / 1, 0) AS SAW
     , ROUND(SUM(NVL(WIP.BG,0)) / 1, 0) AS BG
     , ROUND(SUM(NVL(WIP.HMK2A,0)) / 1, 0) AS HMK2A
     , ROUND(SUM(NVL(D0_PLAN, 0) + (NVL(WEEK1_TTL, 0) - NVL(SHP_WEEK_TTL, 0))) / 1, 0) AS D0_PLAN
     , ROUND(SUM(NVL(D1_PLAN, 0)) / 1, 0) AS D1_PLAN
     , ROUND(SUM(NVL(D2_PLAN, 0)) / 1, 0) AS D2_PLAN
     , ROUND(SUM(NVL(D3_PLAN, 0)) / 1, 0) AS D3_PLAN
     , ROUND(SUM(NVL(D4_PLAN, 0)) / 1, 0) AS D4_PLAN
     , ROUND(SUM(NVL(DA1_CAPA, 0)) / 1, 0) AS DA1_CAPA
     , ROUND(SUM(NVL(WB1_CAPA, 0)) / 1, 0) AS WB1_CAPA
     , ROUND(SUM(NVL(DA2_CAPA, 0)) / 1, 0) AS DA2_CAPA
     , ROUND(SUM(NVL(WB2_CAPA, 0)) / 1, 0) AS WB2_CAPA
     , ROUND(SUM(NVL(DA3_CAPA, 0)) / 1, 0) AS DA3_CAPA
     , ROUND(SUM(NVL(WB3_CAPA, 0)) / 1, 0) AS WB3_CAPA
     , ROUND(SUM(NVL(DA4_CAPA, 0)) / 1, 0) AS DA4_CAPA
     , ROUND(SUM(NVL(WB4_CAPA, 0)) / 1, 0) AS WB4_CAPA
     , ROUND(SUM(NVL(DA5_CAPA, 0)) / 1, 0) AS DA5_CAPA
     , ROUND(SUM(NVL(WB5_CAPA, 0)) / 1, 0) AS WB5_CAPA
     , ROUND(SUM(NVL(DA6_CAPA, 0)) / 1, 0) AS DA6_CAPA
     , ROUND(SUM(NVL(WB6_CAPA, 0)) / 1, 0) AS WB6_CAPA
     , ROUND(SUM(NVL(DA7_CAPA, 0)) / 1, 0) AS DA7_CAPA
     , ROUND(SUM(NVL(WB7_CAPA, 0)) / 1, 0) AS WB7_CAPA
     , ROUND(SUM(NVL(DA8_CAPA, 0)) / 1, 0) AS DA8_CAPA
     , ROUND(SUM(NVL(WB8_CAPA, 0)) / 1, 0) AS WB8_CAPA
     , ROUND(SUM(NVL(DA9_CAPA, 0)) / 1, 0) AS DA9_CAPA
     , ROUND(SUM(NVL(WB9_CAPA, 0)) / 1, 0) AS WB9_CAPA
     , ROUND(SUM(NVL(WEEK2_PLAN, 0)) / 1, 0) AS WEEK2_PLAN
     , ROUND(SUM(NVL(WEEK3_PLAN, 0)) / 1, 0) AS WEEK3_PLAN
     , ROUND(SUM(NVL(WEEK4_PLAN, 0)) / 1, 0) AS WEEK4_PLAN
     , ROUND(SUM(NVL(WEEK5_PLAN, 0)) / 1, 0) AS WEEK5_PLAN
     , ROUND(SUM(NVL(ORI_PLAN, 0)) / 1, 0) AS ORI_PLAN
     , ROUND(SUM(NVL(SHP_MONTH, 0)) / 1, 0) AS SHP_MONTH
     , ROUND(SUM(NVL(ORI_PLAN, 0) - NVL(SHP_MONTH, 0)) / 1, 0) AS MONTH_DEF
     , ROUND(SUM(NVL(REV_PLAN, 0)) / 1, 0) AS REV_PLAN
     , CASE WHEN SUM(NVL(ORI_PLAN, 0)) = 0 THEN 0
            ELSE ROUND(SUM(NVL(REV_PLAN, 0)) / SUM(NVL(ORI_PLAN, 0)) * 100, 0)
       END PER
     , ROUND(SUM(NVL(W_MOLD, 0)) / 1, 0) AS W_MOLD 
     , ROUND(SUM(NVL(W_WB, 0)) / 1, 0) AS W_WB
     , ROUND(SUM(NVL(W_DA, 0)) / 1, 0) AS W_DA
     , ROUND(SUM(NVL(W_BG, 0)) / 1, 0) AS W_BG
     , ROUND(SUM(NVL(W_ISSUE, 0)) / 1, 0) AS W_ISSUE
     , ROUND(SUM(NVL(TOTAL, 0)) / 1, 0) AS TOTAL
  FROM (
        SELECT MAT_GRP_1, MAT_GRP_2, MAT_GRP_3, MAT_GRP_4, MAT_GRP_5, MAT_GRP_6
             , MAT_GRP_7, MAT_GRP_8, MAT_GRP_9, MAT_GRP_10, MAT_CMF_7, MAT_CMF_10, MAT_ID, MAT_CMF_11
             , CASE WHEN MAT_GRP_9 = 'MEMORY' AND MAT_GRP_1 = 'HX' AND INSTR(MAT_ID, '_') = 0 THEN SUBSTR(MAT_ID, 1, 12) || '%' || SUBSTR(MAT_ID, -3)
                    WHEN MAT_GRP_9 = 'MEMORY' AND MAT_GRP_1 = 'HX' AND INSTR(MAT_ID, '_') > 0 THEN SUBSTR(MAT_ID, 1, INSTR(MAT_ID, '_')) || '%' || SUBSTR(MAT_ID, -3)
                    WHEN MAT_GRP_9 = 'MEMORY' AND MAT_GRP_1 = 'SE' THEN 'SEK_________-___' || SUBSTR(MAT_ID, -3)
                    ELSE MAT_ID
               END CONV_MAT_ID
             , VENDOR_ID AS SAP_CODE
          FROM MWIPMATDEF
         WHERE FACTORY = 'HMVA2'
           AND MAT_TYPE = 'FG' 
           AND DELETE_FLAG = ' ' 
           AND (MAT_GRP_5 IN ('1st','Merge', '-') OR MAT_GRP_5 LIKE 'Middle%') 
           AND MAT_GRP_3 <> 'COB' 
           AND MAT_ID LIKE '%'
       ) MAT 
     , ( 
        SELECT FACTORY, MAT_ID 
             , SUM(CASE WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200718', 'YYYYMMDD'), 'D') = 1 THEN D0_QTY
                        WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200718', 'YYYYMMDD'), 'D') = 2 THEN D0_QTY + D1_QTY
                        WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200718', 'YYYYMMDD'), 'D') = 3 THEN D0_QTY + D1_QTY + D2_QTY
                        WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200718', 'YYYYMMDD'), 'D') = 4 THEN D0_QTY + D1_QTY + D2_QTY + D3_QTY
                        WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200718', 'YYYYMMDD'), 'D') = 5 THEN D0_QTY + D1_QTY + D2_QTY + D3_QTY + D4_QTY
                        WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200718', 'YYYYMMDD'), 'D') = 6 THEN D0_QTY + D1_QTY + D2_QTY + D3_QTY + D4_QTY + D5_QTY
                        WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200718', 'YYYYMMDD'), 'D') = 3 THEN D0_QTY 
                        WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200718', 'YYYYMMDD'), 'D') = 4 THEN D0_QTY + D1_QTY 
                        WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200718', 'YYYYMMDD'), 'D') = 5 THEN D0_QTY + D1_QTY + D2_QTY 
                        WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200718', 'YYYYMMDD'), 'D') = 6 THEN D0_QTY + D1_QTY + D2_QTY + D3_QTY 
                        WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200718', 'YYYYMMDD'), 'D') = 7 THEN D0_QTY + D1_QTY + D2_QTY + D3_QTY + D4_QTY 
                        WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200718', 'YYYYMMDD'), 'D') = 1 THEN D0_QTY + D1_QTY + D2_QTY + D3_QTY + D4_QTY + D5_QTY 
                        ELSE 0
                   END) AS WEEK1_TTL 
             , SUM(W1_QTY) AS WEEK1_PLAN 
             , SUM(W2_QTY) AS WEEK2_PLAN 
             , SUM(W3_QTY) AS WEEK3_PLAN 
             , SUM(W4_QTY) AS WEEK4_PLAN 
             , SUM(W5_QTY) AS WEEK5_PLAN 
             , SUM(NVL(W1_QTY,0) + NVL(W2_QTY,0)) AS WEEK_TTL 
             , SUM(CASE WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200718', 'YYYYMMDD'), 'D') = 7 THEN D0_QTY
                        WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200718', 'YYYYMMDD'), 'D') = 1 THEN D1_QTY
                        WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200718', 'YYYYMMDD'), 'D') = 2 THEN D2_QTY
                        WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200718', 'YYYYMMDD'), 'D') = 3 THEN D3_QTY
                        WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200718', 'YYYYMMDD'), 'D') = 4 THEN D4_QTY
                        WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200718', 'YYYYMMDD'), 'D') = 5 THEN D5_QTY
                        WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200718', 'YYYYMMDD'), 'D') = 6 THEN D6_QTY
                        WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200718', 'YYYYMMDD'), 'D') = 2 THEN D0_QTY 
                        WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200718', 'YYYYMMDD'), 'D') = 3 THEN D1_QTY 
                        WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200718', 'YYYYMMDD'), 'D') = 4 THEN D2_QTY 
                        WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200718', 'YYYYMMDD'), 'D') = 5 THEN D3_QTY 
                        WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200718', 'YYYYMMDD'), 'D') = 6 THEN D4_QTY 
                        WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200718', 'YYYYMMDD'), 'D') = 7 THEN D5_QTY 
                        WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200718', 'YYYYMMDD'), 'D') = 1 THEN D6_QTY 
                        ELSE 0
                   END) AS D0_PLAN 
             , SUM(CASE WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200718', 'YYYYMMDD'), 'D') = 7 THEN D1_QTY
                        WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200718', 'YYYYMMDD'), 'D') = 1 THEN D2_QTY
                        WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200718', 'YYYYMMDD'), 'D') = 2 THEN D3_QTY
                        WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200718', 'YYYYMMDD'), 'D') = 3 THEN D4_QTY
                        WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200718', 'YYYYMMDD'), 'D') = 4 THEN D5_QTY
                        WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200718', 'YYYYMMDD'), 'D') = 5 THEN D6_QTY
                        WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200718', 'YYYYMMDD'), 'D') = 6 THEN D7_QTY
                        WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200718', 'YYYYMMDD'), 'D') = 2 THEN D1_QTY 
                        WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200718', 'YYYYMMDD'), 'D') = 3 THEN D2_QTY 
                        WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200718', 'YYYYMMDD'), 'D') = 4 THEN D3_QTY 
                        WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200718', 'YYYYMMDD'), 'D') = 5 THEN D4_QTY 
                        WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200718', 'YYYYMMDD'), 'D') = 6 THEN D5_QTY 
                        WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200718', 'YYYYMMDD'), 'D') = 7 THEN D6_QTY 
                        WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200718', 'YYYYMMDD'), 'D') = 1 THEN D7_QTY 
                        ELSE 0
                   END) AS D1_PLAN 
             , SUM(CASE WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200718', 'YYYYMMDD'), 'D') = 7 THEN D2_QTY
                        WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200718', 'YYYYMMDD'), 'D') = 1 THEN D3_QTY
                        WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200718', 'YYYYMMDD'), 'D') = 2 THEN D4_QTY
                        WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200718', 'YYYYMMDD'), 'D') = 3 THEN D5_QTY
                        WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200718', 'YYYYMMDD'), 'D') = 4 THEN D6_QTY
                        WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200718', 'YYYYMMDD'), 'D') = 5 THEN D7_QTY
                        WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200718', 'YYYYMMDD'), 'D') = 6 THEN D8_QTY
                        WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200718', 'YYYYMMDD'), 'D') = 2 THEN D2_QTY 
                        WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200718', 'YYYYMMDD'), 'D') = 3 THEN D3_QTY 
                        WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200718', 'YYYYMMDD'), 'D') = 4 THEN D4_QTY 
                        WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200718', 'YYYYMMDD'), 'D') = 5 THEN D5_QTY 
                        WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200718', 'YYYYMMDD'), 'D') = 6 THEN D6_QTY 
                        WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200718', 'YYYYMMDD'), 'D') = 7 THEN D7_QTY 
                        WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200718', 'YYYYMMDD'), 'D') = 1 THEN D8_QTY 
                        ELSE 0
                   END) AS D2_PLAN 
             , SUM(CASE WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200718', 'YYYYMMDD'), 'D') = 7 THEN D3_QTY
                        WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200718', 'YYYYMMDD'), 'D') = 1 THEN D4_QTY
                        WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200718', 'YYYYMMDD'), 'D') = 2 THEN D5_QTY
                        WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200718', 'YYYYMMDD'), 'D') = 3 THEN D6_QTY
                        WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200718', 'YYYYMMDD'), 'D') = 4 THEN D7_QTY
                        WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200718', 'YYYYMMDD'), 'D') = 5 THEN D8_QTY
                        WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200718', 'YYYYMMDD'), 'D') = 6 THEN D9_QTY
                        WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200718', 'YYYYMMDD'), 'D') = 2 THEN D3_QTY 
                        WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200718', 'YYYYMMDD'), 'D') = 3 THEN D4_QTY 
                        WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200718', 'YYYYMMDD'), 'D') = 4 THEN D5_QTY 
                        WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200718', 'YYYYMMDD'), 'D') = 5 THEN D6_QTY 
                        WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200718', 'YYYYMMDD'), 'D') = 6 THEN D7_QTY 
                        WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200718', 'YYYYMMDD'), 'D') = 7 THEN D8_QTY 
                        WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200718', 'YYYYMMDD'), 'D') = 1 THEN D9_QTY 
                        ELSE 0
                   END) AS D3_PLAN 
             , SUM(CASE WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200718', 'YYYYMMDD'), 'D') = 7 THEN D4_QTY
                        WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200718', 'YYYYMMDD'), 'D') = 1 THEN D5_QTY
                        WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200718', 'YYYYMMDD'), 'D') = 2 THEN D6_QTY
                        WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200718', 'YYYYMMDD'), 'D') = 3 THEN D7_QTY
                        WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200718', 'YYYYMMDD'), 'D') = 4 THEN D8_QTY
                        WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200718', 'YYYYMMDD'), 'D') = 5 THEN D9_QTY
                        WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200718', 'YYYYMMDD'), 'D') = 6 THEN D10_QTY
                        WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200718', 'YYYYMMDD'), 'D') = 2 THEN D4_QTY 
                        WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200718', 'YYYYMMDD'), 'D') = 3 THEN D5_QTY 
                        WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200718', 'YYYYMMDD'), 'D') = 4 THEN D6_QTY 
                        WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200718', 'YYYYMMDD'), 'D') = 5 THEN D7_QTY 
                        WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200718', 'YYYYMMDD'), 'D') = 6 THEN D8_QTY 
                        WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200718', 'YYYYMMDD'), 'D') = 7 THEN D9_QTY 
                        WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200718', 'YYYYMMDD'), 'D') = 1 THEN D10_QTY 
                        ELSE 0
                   END) AS D4_PLAN 
          FROM ( 
                SELECT FACTORY, MAT_ID, 'OTD' AS CALENDAR_ID 
                     , SUM(DECODE(PLAN_WEEK, '202030', D0_QTY, 0)) AS D0_QTY 
                     , SUM(DECODE(PLAN_WEEK, '202030', D1_QTY, 0)) AS D1_QTY 
                     , SUM(DECODE(PLAN_WEEK, '202030', D2_QTY, 0)) AS D2_QTY 
                     , SUM(DECODE(PLAN_WEEK, '202030', D3_QTY, 0)) AS D3_QTY 
                     , SUM(DECODE(PLAN_WEEK, '202030', D4_QTY, 0)) AS D4_QTY 
                     , SUM(DECODE(PLAN_WEEK, '202030', D5_QTY, 0)) AS D5_QTY 
                     , SUM(DECODE(PLAN_WEEK, '202030', D6_QTY, 0)) AS D6_QTY 
                     , SUM(DECODE(PLAN_WEEK, '202031', D0_QTY, 0)) AS D7_QTY 
                     , SUM(DECODE(PLAN_WEEK, '202031', D1_QTY, 0)) AS D8_QTY 
                     , SUM(DECODE(PLAN_WEEK, '202031', D2_QTY, 0)) AS D9_QTY 
                     , SUM(DECODE(PLAN_WEEK, '202031', D3_QTY, 0)) AS D10_QTY 
                     , SUM(DECODE(PLAN_WEEK, '202031', D4_QTY, 0)) AS D11_QTY 
                     , SUM(DECODE(PLAN_WEEK, '202031', D5_QTY, 0)) AS D12_QTY 
                     , SUM(DECODE(PLAN_WEEK, '202031', D6_QTY, 0)) AS D13_QTY 
                     , SUM(DECODE(PLAN_WEEK, '202030', WW_QTY, 0)) AS W1_QTY 
                     , SUM(DECODE(PLAN_WEEK, '202031', WW_QTY, 0)) AS W2_QTY 
                     , SUM(DECODE(PLAN_WEEK, '202032', WW_QTY, 0)) AS W3_QTY 
                     , SUM(DECODE(PLAN_WEEK, '202033', WW_QTY, 0)) AS W4_QTY 
                     , SUM(DECODE(PLAN_WEEK, '202034', WW_QTY, 0)) AS W5_QTY 
                  FROM RWIPPLNWEK 
                 WHERE 1=1 
                   AND FACTORY = 'HMVA2' 
                   AND GUBUN = '3' 
                   AND MAT_ID NOT LIKE 'SES%' 
                   AND PLAN_WEEK IN ('202030','202031','202032','202033','202034')
                 GROUP BY FACTORY, MAT_ID 
                 UNION ALL 
                SELECT FACTORY, MAT_ID, 'SE' AS CALENDAR_ID 
                     , SUM(DECODE(PLAN_WEEK, '202029', D0_QTY, 0)) AS D0_QTY 
                     , SUM(DECODE(PLAN_WEEK, '202029', D1_QTY, 0)) AS D1_QTY 
                     , SUM(DECODE(PLAN_WEEK, '202029', D2_QTY, 0)) AS D2_QTY 
                     , SUM(DECODE(PLAN_WEEK, '202029', D3_QTY, 0)) AS D3_QTY 
                     , SUM(DECODE(PLAN_WEEK, '202029', D4_QTY, 0)) AS D4_QTY 
                     , SUM(DECODE(PLAN_WEEK, '202029', D5_QTY, 0)) AS D5_QTY 
                     , SUM(DECODE(PLAN_WEEK, '202029', D6_QTY, 0)) AS D6_QTY 
                     , SUM(DECODE(PLAN_WEEK, '202030', D0_QTY, 0)) AS D7_QTY 
                     , SUM(DECODE(PLAN_WEEK, '202030', D1_QTY, 0)) AS D8_QTY 
                     , SUM(DECODE(PLAN_WEEK, '202030', D2_QTY, 0)) AS D9_QTY 
                     , SUM(DECODE(PLAN_WEEK, '202030', D3_QTY, 0)) AS D10_QTY 
                     , SUM(DECODE(PLAN_WEEK, '202030', D4_QTY, 0)) AS D11_QTY 
                     , SUM(DECODE(PLAN_WEEK, '202030', D5_QTY, 0)) AS D12_QTY 
                     , SUM(DECODE(PLAN_WEEK, '202030', D6_QTY, 0)) AS D13_QTY 
                     , SUM(DECODE(PLAN_WEEK, '202029', WW_QTY, 0)) AS W1_QTY 
                     , SUM(DECODE(PLAN_WEEK, '202030', WW_QTY, 0)) AS W2_QTY 
                     , SUM(DECODE(PLAN_WEEK, '202031', WW_QTY, 0)) AS W3_QTY 
                     , SUM(DECODE(PLAN_WEEK, '202032', WW_QTY, 0)) AS W4_QTY 
                     , SUM(DECODE(PLAN_WEEK, '202033', WW_QTY, 0)) AS W5_QTY 
                  FROM RWIPPLNWEK 
                 WHERE 1=1 
                   AND FACTORY = 'HMVA2' 
                   AND GUBUN = '3' 
                   AND MAT_ID LIKE 'SES%' 
                   AND PLAN_WEEK IN ('202029','202030','202031','202032','202033')
                 GROUP BY FACTORY, MAT_ID 
               ) 
         GROUP BY FACTORY, MAT_ID 
       ) PLN 
     , ( 
        SELECT MAT_ID 
             , SUM(CASE WHEN SHP_QTY_1 > 0 AND WORK_DATE = '20200718' THEN NVL(SHP_QTY_1, 0) ELSE 0 END) AS SHP_TODAY 
             , SUM(CASE WHEN SHP_QTY_1 > 0 AND MAT_ID LIKE 'SES%' AND WORK_DATE BETWEEN '20200713' AND '20200718' THEN NVL(SHP_QTY_1, 0)  
                        WHEN SHP_QTY_1 > 0 AND MAT_ID NOT LIKE 'SES%' AND WORK_DATE BETWEEN '20200718' AND '20200718' THEN NVL(SHP_QTY_1, 0) 
                        ELSE 0 END) AS SHP_WEEK  
             , SUM(CASE WHEN SHP_QTY_1 > 0 AND MAT_ID LIKE 'SES%' AND WORK_DATE BETWEEN '20200713' AND '20200717' THEN NVL(SHP_QTY_1, 0) 
                        WHEN SHP_QTY_1 > 0 AND MAT_ID NOT LIKE 'SES%' AND WORK_DATE BETWEEN '20200718' AND '20200717' THEN NVL(SHP_QTY_1, 0) 
                        ELSE 0 END) AS SHP_WEEK_TTL  
             , SUM(CASE WHEN WORK_DATE BETWEEN '20200701' AND '20200718' THEN NVL(SHP_QTY_1, 0) END) AS SHP_MONTH  
          FROM VSUMWIPOUT
         WHERE 1=1 
           AND FACTORY  = 'HMVA2' 
           AND CM_KEY_2 = 'PROD' 
           AND CM_KEY_3 LIKE 'P%' 
           AND LOT_TYPE = 'W' 
           AND MAT_ID NOT LIKE 'HX%' 
           AND WORK_DATE BETWEEN LEAST('20200701', '20200718', '20200713') AND '20200718' 
         GROUP BY MAT_ID 
         UNION ALL 
        SELECT MAT_ID 
             , SUM(CASE WHEN SHP_QTY_1 > 0 AND WORK_DATE = '20200718' THEN NVL(SHP_QTY_1, 0) ELSE 0 END) AS SHP_TODAY 
             , SUM(CASE WHEN SHP_QTY_1 > 0 AND WORK_DATE BETWEEN '20200718' AND '20200718' THEN NVL(SHP_QTY_1, 0) ELSE 0 END) AS SHP_WEEK 
             , SUM(CASE WHEN SHP_QTY_1 > 0 AND WORK_DATE BETWEEN '20200718' AND '20200717' THEN NVL(SHP_QTY_1, 0) ELSE 0 END) AS SHP_WEEK_TTL 
             , SUM(CASE WHEN WORK_DATE BETWEEN '20200701' AND '20200718' THEN NVL(SHP_QTY_1, 0) END) AS SHP_MONTH 
          FROM VSUMWIPOUT_06
         WHERE 1=1 
           AND FACTORY  = 'HMVA2' 
           AND CM_KEY_2 = 'PROD' 
           AND CM_KEY_3 LIKE 'P%' 
           AND LOT_TYPE = 'W' 
           AND MAT_ID LIKE 'HX%' 
           AND WORK_DATE BETWEEN '20200701' AND '20200718' 
         GROUP BY MAT_ID 
       ) SHP 
     , ( 
        SELECT MAT_ID
             , SUM(QTY) TOTAL
             , SUM(DECODE(OPER_GRP_1, 'HMK2A', QTY, 0)) AS HMK2A
             , SUM(DECODE(OPER_GRP_1, 'B/G', QTY, 0)) AS BG
             , SUM(DECODE(OPER_GRP_1, 'SAW', QTY, 0)) AS SAW
             , SUM(DECODE(OPER_GRP_1, 'S/P', QTY, 0)) AS SP
             , SUM(CASE WHEN OPER IN ('A0250','A0310','A0333','A0340','A0401','A0501', 'A0400', 'A0500', 'A0530', 'A0531', 'A0370', 'A0380', 'A0395') THEN QTY 
                        WHEN OPER_GRP_1 = 'SMT' THEN QTY 
                        ELSE 0 END) AS DA1 
             , SUM(CASE WHEN OPER IN ('A0402','A0502', 'A0532') THEN QTY ELSE 0 END) AS DA2 
             , SUM(CASE WHEN OPER IN ('A0403','A0503', 'A0533') THEN QTY ELSE 0 END) AS DA3 
             , SUM(CASE WHEN OPER IN ('A0404','A0504', 'A0534') THEN QTY ELSE 0 END) AS DA4 
             , SUM(CASE WHEN OPER IN ('A0405','A0505', 'A0535') THEN QTY ELSE 0 END) AS DA5 
             , SUM(CASE WHEN OPER IN ('A0406','A0506', 'A0536') THEN QTY ELSE 0 END) AS DA6 
             , SUM(CASE WHEN OPER IN ('A0407','A0507', 'A0537') THEN QTY ELSE 0 END) AS DA7 
             , SUM(CASE WHEN OPER IN ('A0408','A0508', 'A0538') THEN QTY ELSE 0 END) AS DA8 
             , SUM(CASE WHEN OPER IN ('A0409','A0509', 'A0539') THEN QTY ELSE 0 END) AS DA9 
             , SUM(CASE WHEN OPER IN ('A0551', 'A0601', 'A0550', 'A0600') THEN QTY
                        WHEN OPER = 'A0801' AND MAT_GRP_1 = 'SE' AND MAT_GRP_5 <> 'Merge' THEN QTY 
                        WHEN OPER = 'A0801' AND MAT_GRP_1 <> 'SE' THEN QTY 
                        ELSE 0 END) AS WB1 
             , SUM(CASE WHEN OPER IN ('A0552', 'A0602') THEN QTY
                        WHEN OPER = 'A0802' AND MAT_GRP_1 = 'SE' AND MAT_GRP_5 <> 'Merge' THEN QTY 
                        WHEN OPER = 'A0802' AND MAT_GRP_1 <> 'SE' THEN DECODE(SUBSTR(MAT_GRP_4,-1), '2', 0, QTY) 
                        ELSE 0 END) AS WB2 
             , SUM(CASE WHEN OPER IN ('A0553', 'A0603') THEN QTY
                        WHEN OPER = 'A0803' AND MAT_GRP_1 = 'SE' AND MAT_GRP_5 <> 'Merge' THEN QTY  
                        WHEN OPER = 'A0803' AND MAT_GRP_1 <> 'SE' THEN DECODE(SUBSTR(MAT_GRP_4,-1), '2', 0, '3', 0, QTY) 
                        ELSE 0 END) AS WB3 
             , SUM(CASE WHEN OPER IN ('A0554', 'A0604') THEN QTY
                        WHEN OPER = 'A0804' AND MAT_GRP_1 = 'SE' AND MAT_GRP_5 <> 'Merge' THEN QTY 
                        WHEN OPER = 'A0804' AND MAT_GRP_1 <> 'SE' THEN DECODE(SUBSTR(MAT_GRP_4,-1), '2', 0, '3', 0, '4', 0, QTY) 
                        ELSE 0 END) AS WB4 
             , SUM(CASE WHEN OPER IN ('A0555', 'A0605') THEN QTY
                        WHEN OPER = 'A0805' AND MAT_GRP_1 = 'SE' AND MAT_GRP_5 <> 'Merge' THEN QTY 
                        WHEN OPER = 'A0805' AND MAT_GRP_1 <> 'SE' THEN DECODE(SUBSTR(MAT_GRP_4,-1), '2', 0, '3', 0, '4', 0, '5', 0, QTY) 
                        ELSE 0 END) AS WB5 
             , SUM(CASE WHEN OPER IN ('A0556', 'A0606') THEN QTY
                        WHEN OPER = 'A0806' AND MAT_GRP_1 = 'SE' AND MAT_GRP_5 <> 'Merge' THEN QTY 
                        WHEN OPER = 'A0806' AND MAT_GRP_1 <> 'SE' THEN DECODE(SUBSTR(MAT_GRP_4,-1), '2', 0, '3', 0, '4', 0, '5', 0, '6', 0, QTY) 
                        ELSE 0 END) AS WB6 
             , SUM(CASE WHEN OPER IN ('A0557', 'A0607') THEN QTY
                        WHEN OPER = 'A0807' AND MAT_GRP_1 = 'SE' AND MAT_GRP_5 <> 'Merge' THEN QTY 
                        WHEN OPER = 'A0807' AND MAT_GRP_1 <> 'SE' THEN DECODE(SUBSTR(MAT_GRP_4,-1), '2', 0, '3', 0, '4', 0, '5', 0, '6', 0, '7', 0, QTY) 
                        ELSE 0 END) AS WB7 
             , SUM(CASE WHEN OPER IN ('A0558', 'A0608') THEN QTY
                        WHEN OPER = 'A0808' AND MAT_GRP_1 = 'SE' AND MAT_GRP_5 <> 'Merge' THEN QTY 
                        WHEN OPER = 'A0808' AND MAT_GRP_1 <> 'SE' THEN DECODE(SUBSTR(MAT_GRP_4,-1), '2', 0, '3', 0, '4', 0, '5', 0, '6', 0, '7', 0, '8', 0, QTY) 
                        ELSE 0 END) AS WB8 
             , SUM(CASE WHEN OPER IN ('A0559', 'A0609') THEN QTY
                        WHEN OPER = 'A0809' AND MAT_GRP_1 = 'SE' AND MAT_GRP_5 <> 'Merge' THEN QTY 
                        WHEN OPER = 'A0809' AND MAT_GRP_1 <> 'SE' THEN DECODE(SUBSTR(MAT_GRP_4,-1), '2', 0, '3', 0, '4', 0, '5', 0, '6', 0, '7', 0, '8', 0, '9', 0, QTY) 
                        ELSE 0 END) AS WB9 
             , SUM(CASE WHEN OPER_GRP_1 = 'GATE' AND MAT_GRP_5 = '-' THEN QTY 
                        WHEN OPER_GRP_1 = 'GATE' AND MAT_GRP_1 = 'SE' AND MAT_GRP_5 = 'Merge' THEN QTY 
                        WHEN OPER_GRP_1 = 'GATE' AND MAT_GRP_1 <> 'SE' AND SUBSTR(MAT_GRP_4,-1) = SUBSTR(OPER, -1) THEN QTY 
                        ELSE 0 END) AS GATE 
             , SUM(CASE WHEN OPER IN ('A0950','A0900', 'A0910', 'A0920', 'A0930') THEN QTY ELSE 0 END) AS PLASMA 
             , SUM(CASE WHEN OPER IN ('A1000','A0980') THEN QTY ELSE 0 END) AS MOLD 
             , SUM(DECODE(OPER_GRP_1, 'CURE', QTY, 0)) AS CURE
             , SUM(DECODE(OPER_GRP_1, 'M/K', QTY, 0)) AS MK
             , SUM(DECODE(OPER_GRP_1, 'TRIM', QTY, 0)) AS TRIM
             , SUM(DECODE(OPER_GRP_1, 'TIN', QTY, 0)) AS TIN
             , SUM(DECODE(OPER_GRP_1, 'S/B/A', QTY, 0)) AS SBA
             , SUM(DECODE(OPER_GRP_1, 'SIG', QTY, 0)) AS SIG
             , SUM(DECODE(OPER, 'A1790', QTY, 0)) AS DC1
             , SUM(DECODE(OPER, 'A1795', QTY, 0)) AS DC2
             , SUM(CASE WHEN OPER_GRP_1 = 'AVI' AND OPER NOT IN ('A1790', 'A1795') THEN QTY ELSE 0 END) AS AVI
             , SUM(CASE WHEN OPER = 'A2030' THEN QTY ELSE 0 END) AS BAKE
             , SUM(CASE WHEN OPER IN ('A2050') THEN QTY ELSE 0 END) AS PVI
             , SUM(CASE WHEN OPER IN ('A2100','A2300') THEN QTY ELSE 0 END) AS QC_GATE 
             , SUM(DECODE(OPER_GRP_1, 'HMK3A', QTY, 0)) AS HMK3A
             , SUM(DECODE(OPER_GRP_1, 'HMK2A', 0, QTY)) AS W_ISSUE
             , SUM(CASE WHEN OPER_GRP_1 IN ('HMK2A', 'B/G') THEN 0 ELSE QTY END) AS W_BG
             , SUM(CASE WHEN OPER_GRP_1 IN ('HMK2A', 'B/G', 'SAW', 'SMT', 'S/P', 'D/A') THEN 0 
                        WHEN OPER_GRP_1 = 'W/B' AND MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> 'Merge' THEN 0 
                        ELSE QTY END) AS W_DA 
             , SUM(CASE WHEN OPER_GRP_1 IN ('HMK2A', 'B/G', 'SAW', 'SMT', 'S/P', 'D/A', 'W/B') THEN 0 ELSE QTY END) AS W_WB
             , SUM(CASE WHEN OPER_GRP_1 IN ('HMK2A', 'B/G', 'SAW', 'SMT', 'S/P', 'D/A', 'W/B', 'GATE', 'MOLD') THEN 0 ELSE QTY END) AS W_MOLD
          FROM (
                SELECT A.MAT_ID, A.OPER, B.OPER_GRP_1, C.MAT_GRP_1, C.MAT_GRP_4, C.MAT_GRP_5, QTY_1
                     , COMP_CNT, HX_COMP_MIN, HX_COMP_MAX 
                     , CASE WHEN MAT_GRP_1 = 'HX' AND HX_COMP_MIN IS NOT NULL
                                 THEN (CASE WHEN HX_COMP_MIN <> HX_COMP_MAX AND A.OPER > HX_COMP_MIN AND A.OPER <= HX_COMP_MAX THEN QTY_1 / NVL(COMP_CNT / 2,1)
                                            WHEN A.OPER <= HX_COMP_MAX THEN QTY_1 / NVL(COMP_CNT,1)
                                            ELSE QTY_1 END)
                            WHEN A.OPER <= 'A0395' THEN QTY_1 / NVL(COMP_CNT,1) 
                            ELSE QTY_1 
                       END QTY 
                  FROM RWIPLOTSTS_BOH A 
                     , MWIPOPRDEF B
                     , VWIPMATDEF C
                 WHERE ((CUTOFF_DT = '2020071822' AND C.MAT_ID NOT LIKE 'HX%')
                       OR (CUTOFF_DT = '2020071906' AND C.MAT_ID LIKE 'HX%')) 
                   AND A.FACTORY = B.FACTORY 
                   AND A.FACTORY = C.FACTORY 
                   AND A.OPER = B.OPER
                   AND A.MAT_ID = C.MAT_ID
                   AND A.FACTORY  = 'HMVA2' 
                   AND A.LOT_DEL_FLAG = ' '
                   AND A.LOT_TYPE = 'W'
                   AND A.LOT_CMF_5 LIKE 'P%' 
                   AND C.DELETE_FLAG = ' ' 
               )
         GROUP BY MAT_ID
       ) WIP  
     , ( 
        SELECT MAT.MAT_ID
             , SUM(CASE WHEN GUBUN ='DA' AND MAT.MAT_GRP_5 IN ('Merge', '-') THEN TRUNC(NVL(NVL(UPH.UPEH,0) * 24 * 0.68 * RES.RAS_CNT, 0)) ELSE 0 END) AS DA_CAPA
             , SUM(CASE WHEN GUBUN ='WB' AND MAT.MAT_GRP_5 IN ('Merge', '-') THEN TRUNC(NVL(NVL(UPH.UPEH,0) * 24 * 0.71 * RES.RAS_CNT, 0)) ELSE 0 END) AS WB_CAPA
             , SUM(CASE WHEN RES.OPER IN ('A0333','A0400', 'A0401') THEN TRUNC(NVL(NVL(UPH.UPEH,0) * 24 * 0.68 * RES.RAS_CNT, 0)) ELSE 0 END) AS DA1_CAPA
             , SUM(CASE WHEN RES.OPER = 'A0402' THEN TRUNC(NVL(NVL(UPH.UPEH,0) * 24 * 0.68 * RES.RAS_CNT, 0)) ELSE 0 END) AS DA2_CAPA
             , SUM(CASE WHEN RES.OPER = 'A0403' THEN TRUNC(NVL(NVL(UPH.UPEH,0) * 24 * 0.68 * RES.RAS_CNT, 0)) ELSE 0 END) AS DA3_CAPA
             , SUM(CASE WHEN RES.OPER = 'A0404' THEN TRUNC(NVL(NVL(UPH.UPEH,0) * 24 * 0.68 * RES.RAS_CNT, 0)) ELSE 0 END) AS DA4_CAPA
             , SUM(CASE WHEN RES.OPER = 'A0405' THEN TRUNC(NVL(NVL(UPH.UPEH,0) * 24 * 0.68 * RES.RAS_CNT, 0)) ELSE 0 END) AS DA5_CAPA
             , SUM(CASE WHEN RES.OPER = 'A0406' THEN TRUNC(NVL(NVL(UPH.UPEH,0) * 24 * 0.68 * RES.RAS_CNT, 0)) ELSE 0 END) AS DA6_CAPA
             , SUM(CASE WHEN RES.OPER = 'A0407' THEN TRUNC(NVL(NVL(UPH.UPEH,0) * 24 * 0.68 * RES.RAS_CNT, 0)) ELSE 0 END) AS DA7_CAPA
             , SUM(CASE WHEN RES.OPER = 'A0408' THEN TRUNC(NVL(NVL(UPH.UPEH,0) * 24 * 0.68 * RES.RAS_CNT, 0)) ELSE 0 END) AS DA8_CAPA
             , SUM(CASE WHEN RES.OPER = 'A0409' THEN TRUNC(NVL(NVL(UPH.UPEH,0) * 24 * 0.68 * RES.RAS_CNT, 0)) ELSE 0 END) AS DA9_CAPA
             , SUM(CASE WHEN RES.OPER IN ('A0600', 'A0601') THEN TRUNC(NVL(NVL(UPH.UPEH,0) * 24 * 0.71 * RES.RAS_CNT, 0)) ELSE 0 END) AS WB1_CAPA
             , SUM(CASE WHEN RES.OPER = 'A0602' THEN TRUNC(NVL(NVL(UPH.UPEH,0) * 24 * 0.71 * RES.RAS_CNT, 0)) ELSE 0 END) AS WB2_CAPA
             , SUM(CASE WHEN RES.OPER = 'A0603' THEN TRUNC(NVL(NVL(UPH.UPEH,0) * 24 * 0.71 * RES.RAS_CNT, 0)) ELSE 0 END) AS WB3_CAPA
             , SUM(CASE WHEN RES.OPER = 'A0604' THEN TRUNC(NVL(NVL(UPH.UPEH,0) * 24 * 0.71 * RES.RAS_CNT, 0)) ELSE 0 END) AS WB4_CAPA
             , SUM(CASE WHEN RES.OPER = 'A0605' THEN TRUNC(NVL(NVL(UPH.UPEH,0) * 24 * 0.71 * RES.RAS_CNT, 0)) ELSE 0 END) AS WB5_CAPA
             , SUM(CASE WHEN RES.OPER = 'A0606' THEN TRUNC(NVL(NVL(UPH.UPEH,0) * 24 * 0.71 * RES.RAS_CNT, 0)) ELSE 0 END) AS WB6_CAPA
             , SUM(CASE WHEN RES.OPER = 'A0607' THEN TRUNC(NVL(NVL(UPH.UPEH,0) * 24 * 0.71 * RES.RAS_CNT, 0)) ELSE 0 END) AS WB7_CAPA
             , SUM(CASE WHEN RES.OPER = 'A0608' THEN TRUNC(NVL(NVL(UPH.UPEH,0) * 24 * 0.71 * RES.RAS_CNT, 0)) ELSE 0 END) AS WB8_CAPA
             , SUM(CASE WHEN RES.OPER = 'A0609' THEN TRUNC(NVL(NVL(UPH.UPEH,0) * 24 * 0.71 * RES.RAS_CNT, 0)) ELSE 0 END) AS WB9_CAPA
          FROM ( 
                SELECT FACTORY, RES_STS_2, RES_STS_8 AS OPER 
                     , CASE WHEN RES_STS_8 LIKE 'A06%' THEN 'WB' ELSE 'DA' END AS GUBUN 
                     , RES_GRP_6 AS RES_MODEL, RES_GRP_7 AS UPEH_GRP, COUNT(RES_ID) AS RAS_CNT 
                  FROM MRASRESDEF 
                 WHERE FACTORY  = 'HMVA2' 
                   AND RES_CMF_9 = 'Y' 
                   AND RES_CMF_7 = 'Y' 
                   AND DELETE_FLAG = ' ' 
                   AND (RES_STS_8 LIKE 'A04%' OR RES_STS_8 LIKE 'A06%' OR RES_STS_8 = 'A0333')
                   AND (RES_STS_1 NOT IN ('C200', 'B199') OR RES_UP_DOWN_FLAG = 'U') 
                 GROUP BY FACTORY,RES_STS_2,RES_STS_8,RES_GRP_6,RES_GRP_7 
               ) RES 
             , CRASUPHDEF UPH 
             , MWIPMATDEF MAT 
         WHERE 1 = 1 
           AND RES.FACTORY = UPH.FACTORY(+) 
           AND RES.FACTORY = MAT.FACTORY 
           AND RES.OPER = UPH.OPER(+) 
           AND RES.RES_MODEL = UPH.RES_MODEL(+) 
           AND RES.UPEH_GRP = UPH.UPEH_GRP(+) 
           AND RES.RES_STS_2 = UPH.MAT_ID(+) 
           AND RES.RES_STS_2 = MAT.MAT_ID 
           AND MAT.DELETE_FLAG = ' ' 
         GROUP BY MAT.MAT_ID 
       ) CAP  
     , ( 
        SELECT MAT_ID 
             , DECODE(RESV_FIELD1, ' ', 0, RESV_FIELD1) AS ORI_PLAN 
             , DECODE(RESV_FIELD3, ' ', 0, RESV_FIELD3) AS REV_PLAN 
          FROM CWIPPLNMON 
         WHERE FACTORY  = 'HMVA2' 
           AND PLAN_MONTH = '202007' 
           AND PLAN_QTY_ASSY + DECODE(RESV_FIELD3, ' ', 0, RESV_FIELD3) > 0 
       ) MON  
 WHERE 1 = 1  
   AND MAT.MAT_ID = PLN.MAT_ID(+) 
   AND MAT.MAT_ID = SHP.MAT_ID(+) 
   AND MAT.MAT_ID = WIP.MAT_ID(+) 
   AND MAT.MAT_ID = CAP.MAT_ID(+) 
   AND MAT.MAT_ID = MON.MAT_ID(+) 
 GROUP BY MAT.MAT_GRP_1,  ' ', MAT.MAT_GRP_2, MAT.MAT_GRP_3, MAT.MAT_GRP_4,  ' ', MAT.MAT_GRP_6,  ' ',  ' ',  ' ', MAT.CONV_MAT_ID,  ' ',  ' ',  ' ' 
HAVING SUM(NVL(WEEK1_PLAN, 0) + NVL(SHP_WEEK, 0) + NVL(TOTAL, 0) + NVL(DA_CAPA, 0) + NVL(WB_CAPA, 0) + NVL(ORI_PLAN, 0) + NVL(REV_PLAN, 0) + NVL(SHP_MONTH, 0)) > 0
 ORDER BY MAT.MAT_GRP_1,  ' ', MAT.MAT_GRP_2, MAT.MAT_GRP_3, MAT.MAT_GRP_4,  ' ', MAT.MAT_GRP_6,  ' ',  ' ',  ' ', MAT.CONV_MAT_ID,  ' ',  ' ',  ' '
 )

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT PLAN_WEEK V1    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_DATE = TO_CHAR(SYSDATE,'yyyymmdd')      AND ROWNUM = 1  
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT DISTINCT PLAN_YEAR||LPAD(PLAN_WEEK,2,'0') AS PLAN_WEEK 
  FROM MWIPCALDEF
 WHERE 1=1 
   AND CALENDAR_ID = 'OTD' 
   AND SYS_YEAR||LPAD(SYS_MONTH,2,'0') = '202007' 
 ORDER BY PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT DISTINCT PLAN_YEAR||LPAD(PLAN_WEEK,2,'0') AS PLAN_WEEK 
  FROM MWIPCALDEF
 WHERE 1=1 
   AND CALENDAR_ID = 'OTD' 
   AND SYS_YEAR||LPAD(SYS_MONTH,2,'0') = '202007' 
   AND SYS_DATE <= '20200721' 
 ORDER BY PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT LANGUAGE_2 FROM RWEBFUNDEF WHERE FUNC_NAME = 'PRD010907'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT DISTINCT PLAN_YEAR||LPAD(PLAN_WEEK,2,'0') AS PLAN_WEEK 
  FROM MWIPCALDEF
 WHERE 1=1 
   AND CALENDAR_ID = 'OTD' 
   AND SYS_YEAR||LPAD(SYS_MONTH,2,'0') = '202207' 
 ORDER BY PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT DISTINCT PLAN_YEAR||LPAD(PLAN_WEEK,2,'0') AS PLAN_WEEK 
  FROM MWIPCALDEF
 WHERE 1=1 
   AND CALENDAR_ID = 'OTD' 
   AND SYS_YEAR||LPAD(SYS_MONTH,2,'0') = '202207' 
   AND SYS_DATE <= '20220701' 
 ORDER BY PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE) AS START_DAY 
     , MAX(SYS_DATE) AS END_DAY 
     , PLAN_YEAR||DECODE(LENGTH(PLAN_WEEK), 1, '0'||PLAN_WEEK, PLAN_WEEK) AS WEEK
  FROM MWIPCALDEF 
 WHERE CALENDAR_ID = 'OTD'
   AND (PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) IN ( 
                                                SELECT WW
                                                  FROM (
                                                        SELECT WW
                                                             , ROW_NUMBER() OVER(ORDER BY WW) AS RNK
                                                          FROM (
                                                                SELECT DISTINCT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW
                                                                  FROM MWIPCALDEF
                                                                 WHERE CALENDAR_ID = 'OTD'
                                                                   AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') >= (
                                                                                                              SELECT MAX(PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) AS WW
                                                                                                                FROM MWIPCALDEF
                                                                                                               WHERE CALENDAR_ID = 'OTD'
                                                                                                                 AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') < (SELECT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW FROM MWIPCALDEF WHERE CALENDAR_ID = 'OTD' AND SYS_DATE = '20220701')
                                                                                                                 AND SYS_DATE >= TO_CHAR(TO_DATE('20220701', 'YYYYMMDD')-14, 'YYYYMMDD')
                                                                                                             )
                                                               ) 
                                                       )
                                                 WHERE RNK <= 7
                                               ) 
 GROUP BY PLAN_YEAR, PLAN_WEEK 
 ORDER BY PLAN_YEAR, PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
SELECT MIN(SYS_DATE) AS START_DAY 
     , MAX(SYS_DATE) AS END_DAY 
     , PLAN_YEAR||DECODE(LENGTH(PLAN_WEEK), 1, '0'||PLAN_WEEK, PLAN_WEEK) AS WEEK
  FROM MWIPCALDEF 
 WHERE CALENDAR_ID = 'OTD'
   AND (PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) IN ( 
                                                SELECT WW
                                                  FROM (
                                                        SELECT WW
                                                             , ROW_NUMBER() OVER(ORDER BY WW) AS RNK
                                                          FROM (
                                                                SELECT DISTINCT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW
                                                                  FROM MWIPCALDEF
                                                                 WHERE CALENDAR_ID = 'OTD'
                                                                   AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') >= (
                                                                                                              SELECT MAX(PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) AS WW
                                                                                                                FROM MWIPCALDEF
                                                                                                               WHERE CALENDAR_ID = 'OTD'
                                                                                                                 AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') < (SELECT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW FROM MWIPCALDEF WHERE CALENDAR_ID = 'OTD' AND SYS_DATE = '20200720')
                                                                                                                 AND SYS_DATE >= TO_CHAR(TO_DATE('20200720', 'YYYYMMDD')-14, 'YYYYMMDD')
                                                                                                             )
                                                               ) 
                                                       )
                                                 WHERE RNK <= 7
                                               ) 
 GROUP BY PLAN_YEAR, PLAN_WEEK 
 ORDER BY PLAN_YEAR, PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE) AS START_DAY 
     , MAX(SYS_DATE) AS END_DAY 
     , PLAN_YEAR||DECODE(LENGTH(PLAN_WEEK), 1, '0'||PLAN_WEEK, PLAN_WEEK) AS WEEK
  FROM MWIPCALDEF 
 WHERE CALENDAR_ID = 'SE'
   AND (PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) IN ( 
                                                SELECT WW
                                                  FROM (
                                                        SELECT WW
                                                             , ROW_NUMBER() OVER(ORDER BY WW) AS RNK
                                                          FROM (
                                                                SELECT DISTINCT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW
                                                                  FROM MWIPCALDEF
                                                                 WHERE CALENDAR_ID = 'SE'
                                                                   AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') >= (
                                                                                                              SELECT MAX(PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) AS WW
                                                                                                                FROM MWIPCALDEF
                                                                                                               WHERE CALENDAR_ID = 'SE'
                                                                                                                 AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') < (SELECT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW FROM MWIPCALDEF WHERE CALENDAR_ID = 'SE' AND SYS_DATE = '20200720')
                                                                                                                 AND SYS_DATE >= TO_CHAR(TO_DATE('20200720', 'YYYYMMDD')-14, 'YYYYMMDD')
                                                                                                             )
                                                               ) 
                                                       )
                                                 WHERE RNK <= 7
                                               ) 
 GROUP BY PLAN_YEAR, PLAN_WEEK 
 ORDER BY PLAN_YEAR, PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT (SELECT DATA_1 FROM MGCMTBLDAT@RPTTOMES WHERE FACTORY = 'HMVA2' AND TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = MAT_GRP_1) AS CUSTOMER, MAT_GRP_9 AS MAJOR, MAT_GRP_10 AS PKG, MAT_GRP_6 AS LD_COUNT, MAT_CMF_11 AS PKG_CODE,  ' ', CONV_MAT_ID AS PRODUCT,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ' 
     , ROUND(SUM(PLAN)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS PLAN 
     , ROUND(SUM(SHP)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS SHP 
     , ROUND(SUM(DEF)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS DEF 
     , GUBUN 
     , ROUND(SUM(HMK3A)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS HMK3A 
     , ROUND(SUM(QC_GATE)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS QC_GATE 
     , ROUND(SUM(PVI)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS PVI 
     , ROUND(SUM(AVI)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS AVI 
     , ROUND(SUM(SIG)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS SIG 
     , ROUND(SUM(SBA)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS SBA 
     , ROUND(SUM(TIN)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS TIN 
     , ROUND(SUM(TRIM)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS TRIM 
     , ROUND(SUM(MK)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS MK 
     , ROUND(SUM(CURE)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS CURE 
     , ROUND(SUM(MOLD)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS MOLD 
     , ROUND(SUM(GATE)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS GATE 
     , ROUND(SUM(WB9)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS WB9 
     , ROUND(SUM(DA9)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS DA9 
     , ROUND(SUM(WB8)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS WB8 
     , ROUND(SUM(DA8)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS DA8 
     , ROUND(SUM(WB7)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS WB7 
     , ROUND(SUM(DA7)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS DA7 
     , ROUND(SUM(WB6)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS WB6 
     , ROUND(SUM(DA6)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS DA6 
     , ROUND(SUM(WB5)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS WB5 
     , ROUND(SUM(DA5)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS DA5 
     , ROUND(SUM(WB4)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS WB4 
     , ROUND(SUM(DA4)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS DA4 
     , ROUND(SUM(WB3)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS WB3 
     , ROUND(SUM(DA3)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS DA3 
     , ROUND(SUM(WB2)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS WB2 
     , ROUND(SUM(DA2)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS DA2 
     , ROUND(SUM(WB1)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS WB1 
     , ROUND(SUM(DA1)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS DA1 
     , ROUND(SUM(SP)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS SP 
     , ROUND(SUM(SAW)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS SAW 
     , ROUND(SUM(BG)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS BG 
     , ROUND(SUM(HMK2A)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS HMK2A 
     , ROUND(SUM(WIP_DEF)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS WIP_DEF 
  FROM (  
        SELECT MAT_GRP_1, MAT_GRP_9, MAT_GRP_10, MAT_GRP_6, MAT_CMF_11,  ' ', CONV_MAT_ID,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', GUBUN 
             , MAX(PLAN) AS PLAN 
             , MAX(SHP) AS SHP 
             , MAX(DEF) AS DEF 
             , SUM(DECODE(OPER_GRP_1, 'HMK3A', SUM_DEF, 0)) AS HMK3A 
             , SUM(DECODE(OPER_GRP_1, 'QC_GATE', SUM_DEF, 0)) AS QC_GATE 
             , SUM(DECODE(OPER_GRP_1, 'PVI', SUM_DEF, 0)) AS PVI 
             , SUM(DECODE(OPER_GRP_1, 'AVI', SUM_DEF, 0)) AS AVI 
             , SUM(DECODE(OPER_GRP_1, 'SIG', SUM_DEF, 0)) AS SIG 
             , SUM(DECODE(OPER_GRP_1, 'SBA', SUM_DEF, 0)) AS SBA 
             , SUM(DECODE(OPER_GRP_1, 'TIN', SUM_DEF, 0)) AS TIN 
             , SUM(DECODE(OPER_GRP_1, 'TRIM', SUM_DEF, 0)) AS TRIM 
             , SUM(DECODE(OPER_GRP_1, 'MK', SUM_DEF, 0)) AS MK 
             , SUM(DECODE(OPER_GRP_1, 'CURE', SUM_DEF, 0)) AS CURE 
             , SUM(DECODE(OPER_GRP_1, 'MOLD', SUM_DEF, 0)) AS MOLD 
             , SUM(DECODE(OPER_GRP_1, 'GATE', SUM_DEF, 0)) AS GATE 
             , SUM(DECODE(OPER_GRP_1, 'WB9', SUM_DEF, 0)) AS WB9 
             , SUM(DECODE(OPER_GRP_1, 'DA9', SUM_DEF, 0)) AS DA9 
             , SUM(DECODE(OPER_GRP_1, 'WB8', SUM_DEF, 0)) AS WB8 
             , SUM(DECODE(OPER_GRP_1, 'DA8', SUM_DEF, 0)) AS DA8 
             , SUM(DECODE(OPER_GRP_1, 'WB7', SUM_DEF, 0)) AS WB7 
             , SUM(DECODE(OPER_GRP_1, 'DA7', SUM_DEF, 0)) AS DA7 
             , SUM(DECODE(OPER_GRP_1, 'WB6', SUM_DEF, 0)) AS WB6 
             , SUM(DECODE(OPER_GRP_1, 'DA6', SUM_DEF, 0)) AS DA6 
             , SUM(DECODE(OPER_GRP_1, 'WB5', SUM_DEF, 0)) AS WB5 
             , SUM(DECODE(OPER_GRP_1, 'DA5', SUM_DEF, 0)) AS DA5 
             , SUM(DECODE(OPER_GRP_1, 'WB4', SUM_DEF, 0)) AS WB4 
             , SUM(DECODE(OPER_GRP_1, 'DA4', SUM_DEF, 0)) AS DA4 
             , SUM(DECODE(OPER_GRP_1, 'WB3', SUM_DEF, 0)) AS WB3 
             , SUM(DECODE(OPER_GRP_1, 'DA3', SUM_DEF, 0)) AS DA3 
             , SUM(DECODE(OPER_GRP_1, 'WB2', SUM_DEF, 0)) AS WB2 
             , SUM(DECODE(OPER_GRP_1, 'DA2', SUM_DEF, 0)) AS DA2 
             , SUM(DECODE(OPER_GRP_1, 'WB1', SUM_DEF, 0)) AS WB1 
             , SUM(DECODE(OPER_GRP_1, 'DA1', SUM_DEF, 0)) AS DA1 
             , SUM(DECODE(OPER_GRP_1, 'SP', SUM_DEF, 0)) AS SP 
             , SUM(DECODE(OPER_GRP_1, 'SAW', SUM_DEF, 0)) AS SAW 
             , SUM(DECODE(OPER_GRP_1, 'BG', SUM_DEF, 0)) AS BG 
             , SUM(DECODE(OPER_GRP_1, 'HMK2A',SUM_DEF, 0)) AS HMK2A 
             , MAX(WIP_TTL) AS WIP_TTL 
             , MAX(DEF) - MAX(WIP_TTL) AS WIP_DEF 
          FROM ( 
                SELECT MAT_GRP_1, MAT_GRP_9, MAT_GRP_10, MAT_GRP_6, MAT_CMF_11,  ' ', CONV_MAT_ID,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ' 
                     , OPER_GRP_1 
                     , DECODE(SEQ, 1, 'WIP', 2, '설비대수', 3, 'CAPA현황', 4, '당일 실적', 5, 'D0 잔량', 6, 'D1 잔량', 7, 'D2 잔량', 8, '당주 잔량', 9, '차주 잔량', 10, '월간 잔량') AS GUBUN 
                     , SUM(DECODE(SEQ, 1, 0, 2, 0, 3, 0, 4, 0, 5, D0_PLAN, 6, D1_PLAN, 7, D2_PLAN, 8, WEEK_PLAN, 9, WEEK2_PLAN, 10, MON_PLAN)) AS PLAN  
                     , SUM(DECODE(SEQ, 1, 0, 2, 0, 3, 0, 4, 0, 5, SHP_TODAY, 6, SHP_D1, 7, SHP_D2, 8, SHP_WEEK, 9, SHP2_WEEK, 10, SHP_MONTH)) AS SHP 
                     , SUM(DECODE(SEQ, 1, 0, 2, 0, 3, 0, 4, 0, 5, D0_DEF, 6, D1_DEF, 7, D2_DEF, 8, WEEK_DEF, 9, WEEK2_DEF, 10, MONTH_DEF)) AS DEF 
                     , SUM(DECODE(SEQ, 1, WIP_QTY, 2, RES_CNT, 3, RES_CAPA, 4, ASSY_END_QTY, 5, D0_SUM_QUANTITY, 6, D1_SUM_QUANTITY, 7, D2_SUM_QUANTITY, 8, WEEK_SUM_QUANTITY, 9, WEEK2_SUM_QUANTITY, 10, MONTH_SUM_QUANTITY)) AS SUM_DEF 
                     , MAX(DECODE(SEQ, 1, 0, 2, 0, 3, 0, 4, 0, WIP_TTL)) AS WIP_TTL 
                  FROM ( 
                        SELECT MAT_GRP_1, MAT_GRP_9, MAT_GRP_10, MAT_GRP_6, MAT_CMF_11,  ' ', CONV_MAT_ID,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', OPER_GRP_1 
                             , SUM(NVL(D0_PLAN,0)) AS D0_PLAN, SUM(NVL(SHP_TODAY,0)) AS SHP_TODAY, SUM(NVL(D0_DEF,0)) AS D0_DEF 
                             , SUM(NVL(D1_PLAN,0)) AS D1_PLAN, SUM(NVL(SHP_D1,0)) AS SHP_D1, SUM(NVL(D1_DEF,0)) AS D1_DEF 
                             , SUM(NVL(D2_PLAN,0)) AS D2_PLAN, SUM(NVL(SHP_D2,0)) AS SHP_D2, SUM(NVL(D2_DEF,0)) AS D2_DEF 
                             , SUM(NVL(WEEK_PLAN,0)) AS WEEK_PLAN, SUM(NVL(SHP_WEEK,0)) AS SHP_WEEK, SUM(NVL(WEEK_DEF,0)) AS WEEK_DEF 
                             , SUM(NVL(WEEK2_PLAN,0)) AS WEEK2_PLAN, SUM(NVL(SHP2_WEEK,0)) AS SHP2_WEEK, SUM(NVL(WEEK2_DEF,0)) AS WEEK2_DEF 
                             , SUM(NVL(MON_PLAN,0)) AS MON_PLAN, SUM(NVL(SHP_MONTH,0)) AS SHP_MONTH, SUM(NVL(MONTH_DEF,0)) AS MONTH_DEF 
                             , SUM(NVL(ASSY_END_QTY,0)) AS ASSY_END_QTY 
                             , SUM(NVL(WIP_QTY,0)) AS WIP_QTY 
                             , SUM(SUM(WIP_QTY)) OVER(PARTITION BY MAT_GRP_1, MAT_GRP_9, MAT_GRP_10, MAT_GRP_6, MAT_CMF_11,  ' ', CONV_MAT_ID,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ') AS WIP_TTL 
                             , SUM(RES_CNT) AS RES_CNT 
                             , SUM(RES_CAPA) AS RES_CAPA 
                             , SUM(NVL(D0_DEF-WIP_SUM_QUANTITY+WIP_QTY,0)) AS D0_SUM_QUANTITY 
                             , SUM(NVL(D1_DEF-WIP_SUM_QUANTITY+WIP_QTY,0)) AS D1_SUM_QUANTITY 
                             , SUM(NVL(D2_DEF-WIP_SUM_QUANTITY+WIP_QTY,0)) AS D2_SUM_QUANTITY 
                             , SUM(NVL(WEEK_DEF-WIP_SUM_QUANTITY+WIP_QTY,0)) AS WEEK_SUM_QUANTITY 
                             , SUM(NVL(WEEK2_DEF-WIP_SUM_QUANTITY+WIP_QTY,0)) AS WEEK2_SUM_QUANTITY 
                             , SUM(NVL(MONTH_DEF-WIP_SUM_QUANTITY+WIP_QTY,0)) AS MONTH_SUM_QUANTITY 
                          FROM ( 
                                SELECT MAT.MAT_GRP_1, MAT.MAT_GRP_2, MAT.MAT_GRP_4, MAT.MAT_GRP_5, MAT.MAT_GRP_6, MAT.MAT_GRP_7, MAT.MAT_GRP_8, MAT.MAT_GRP_9, MAT.MAT_GRP_10, MAT.MAT_CMF_10, MAT.MAT_CMF_7, MAT.MAT_CMF_8, MAT.MAT_CMF_11, MAT.MAT_ID, MAT.CONV_MAT_ID, MAT.OPER_GRP_1 
                                     , A.D0_PLAN, A.SHP_TODAY, A.D0_DEF 
                                     , A.D1_PLAN, A.SHP_D1, A.D1_DEF 
                                     , A.D2_PLAN, A.SHP_D2, A.D2_DEF 
                                     , A.WEEK_PLAN, A.SHP_WEEK, A.WEEK_DEF 
                                     , A.WEEK2_PLAN, A.SHP2_WEEK, A.WEEK2_DEF 
                                     , A.MON_PLAN, A.SHP_MONTH, A.MONTH_DEF 
                                     , A.D0_ORI_PLAN 
                                     , NVL(B.ASSY_END_QTY,0) AS ASSY_END_QTY 
                                     , MAX(NVL(B.ASSY_END_QTY,0)) OVER(PARTITION BY MAT.MAT_GRP_1, MAT.MAT_GRP_9, MAT.MAT_GRP_10, MAT.MAT_GRP_6, MAT.MAT_CMF_11,  ' ', CONV_MAT_ID,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ') AS CHK_ASSY_END_QTY 
                                     , NVL(WIP.QTY,0) AS WIP_QTY 
                                     , RES_CNT 
                                     , RES_CAPA 
                                     , SUM(NVL(WIP.QTY,0)) OVER(PARTITION BY A.MAT_ID ORDER BY MAT.MAT_ID, DECODE(MAT.OPER_GRP_1, 'HMK3A', 1, 'QC_GATE', 2, 'PVI', 3, 'AVI', 4, 'SIG', 5, 'SBA', 6, 'TIN', 7, 'TRIM', 8, 'MK', 9, 'CURE', 10, 'MOLD', 11, 'GATE', 12 
                                                                                                                                , 'WB9', 13, 'DA9', 14, 'WB8', 15, 'DA8', 16, 'WB7', 17, 'DA7', 18, 'WB6', 19, 'DA6', 20, 'WB5', 21, 'DA5', 22, 'WB4', 23, 'DA4', 24 
                                                                                                                                , 'WB3', 25, 'DA3', 26, 'WB2', 27, 'DA2', 28, 'WB1', 29, 'DA1', 30, 'SP', 31, 'SAW', 32, 'BG', 33, 'HMK2A',34, 35)) AS WIP_SUM_QUANTITY 
                                  FROM ( 
                                        SELECT MAT_GRP_1, MAT_GRP_2, MAT_GRP_4, MAT_GRP_5, MAT_GRP_6, MAT_GRP_7, MAT_GRP_8, MAT_GRP_9, MAT_GRP_10, MAT_CMF_10, MAT_CMF_7, MAT_CMF_8, MAT_CMF_11, MAT_ID, OPER_GRP_1 
                                             , CASE WHEN MAT_GRP_1 = 'SE' AND MAT_GRP_9 = 'MEMORY' THEN 'SEK_________-___' || SUBSTR(MAT_ID, -3) 
                                                    WHEN MAT_GRP_1 = 'HX' THEN MAT_CMF_10 
                                                    ELSE MAT_ID 
                                                END CONV_MAT_ID 
                                          FROM ( 
                                                SELECT * 
                                                  FROM (
                                                        SELECT A.* 
                                                          FROM MWIPMATDEF A
                                                         WHERE 1=1 
                                                           AND FACTORY = 'HMVA2' 
                                                           AND DELETE_FLAG = ' ' 
                                                           AND MAT_TYPE = 'FG' 
                                                           AND MAT_ID LIKE '%' 
                                                           AND MAT_GRP_10 NOT LIKE 'COB%' 
                                                       ) 
                                               ) 
                                             , ( 
                                                SELECT DECODE(LEVEL, 1, 'HMK3A', 2, 'QC_GATE', 3, 'PVI', 4, 'AVI', 5, 'SIG', 6, 'SBA', 7, 'TIN', 8, 'TRIM', 9, 'MK', 10, 'CURE', 11, 'MOLD', 12, 'GATE' 
                                                                   , 13, 'WB9', 14, 'DA9', 15, 'WB8', 16, 'DA8', 17, 'WB7', 18, 'DA7', 19, 'WB6', 20, 'DA6', 21, 'WB5', 22, 'DA5', 23, 'WB4', 24, 'DA4'
                                                                   , 25, 'WB3', 26, 'DA3', 27, 'WB2', 28, 'DA2', 29, 'WB1', 30, 'DA1', 31, 'SP', 32, 'SAW', 33, 'BG', 34, 'HMK2A' 
                                                             ) OPER_GRP_1 
                                                  FROM DUAL CONNECT BY LEVEL <= 34 
                                               ) 
                                       ) MAT 
                                     , ( 
                                        SELECT MAT.MAT_ID 
                                             , SUM(NVL(D0_PLAN, 0) + (NVL(WEEK1_TTL, 0) - NVL(SHP_WEEK_TTL, 0))) AS D0_PLAN 
                                             , SUM(NVL(D0_PLAN, 0)) AS D0_ORI_PLAN 
                                             , SUM(NVL(SHP_TODAY, 0)) AS SHP_TODAY 
                                             , SUM(NVL(D0_PLAN, 0) + (NVL(WEEK1_TTL, 0) - NVL(SHP_WEEK_TTL, 0)) - NVL(SHP_TODAY, 0)) AS D0_DEF 
                                             , SUM(NVL(D1_PLAN, 0)) AS D1_PLAN 
                                             , 0 AS SHP_D1 
                                             , SUM(NVL(D1_PLAN, 0) + NVL(D0_PLAN, 0) + (NVL(WEEK1_TTL, 0) - NVL(SHP_WEEK_TTL, 0)) - NVL(SHP_TODAY, 0)) AS D1_DEF 
                                             , SUM(NVL(D2_PLAN, 0)) AS D2_PLAN 
                                             , 0 AS SHP_D2 
                                             , SUM(NVL(D2_PLAN, 0) + NVL(D1_PLAN, 0) + NVL(D0_PLAN, 0) + (NVL(WEEK1_TTL, 0) - NVL(SHP_WEEK_TTL, 0)) - NVL(SHP_TODAY, 0)) AS D2_DEF 
                                             , SUM(NVL(WEEK1_PLAN, 0)) AS WEEK_PLAN 
                                             , SUM(NVL(SHP_WEEK, 0)) AS SHP_WEEK 
                                             , SUM(NVL(WEEK1_PLAN, 0) - NVL(SHP_WEEK, 0)) AS WEEK_DEF 
                                             , SUM(NVL(WEEK2_PLAN, 0)) AS WEEK2_PLAN 
                                             , 0 AS SHP2_WEEK 
                                             , SUM(NVL(WEEK2_PLAN, 0) + NVL(WEEK1_PLAN, 0) - NVL(SHP_WEEK, 0)) AS WEEK2_DEF 
                                             , SUM(NVL(CASE WHEN MAT.MAT_GRP_3 IN ('COB') THEN ROUND(MON.RESV_FIELD1/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0) 
                                                    ELSE MON.RESV_FIELD1 
                                                END,0)) MON_PLAN 
                                             , SUM(NVL(SHP_MONTH, 0)) AS SHP_MONTH 
                                             , SUM(NVL(CASE WHEN MAT.MAT_GRP_3 IN ('COB') THEN ROUND(NVL(MON.RESV_FIELD1,0)/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0)-NVL(SHP_MONTH, 0) 
                                                    ELSE NVL(MON.RESV_FIELD1, 0)-NVL(SHP_MONTH, 0) 
                                                END,0)) MONTH_DEF 
                                          FROM MWIPMATDEF MAT 
                                             , ( 
                                                SELECT FACTORY, MAT_ID 
                                                     , SUM(CASE WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 1 THEN D0_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 2 THEN D0_QTY + D1_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 3 THEN D0_QTY + D1_QTY + D2_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 4 THEN D0_QTY + D1_QTY + D2_QTY + D3_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 5 THEN D0_QTY + D1_QTY + D2_QTY + D3_QTY + D4_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 6 THEN D0_QTY + D1_QTY + D2_QTY + D3_QTY + D4_QTY + D5_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 3 THEN D0_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 4 THEN D0_QTY + D1_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 5 THEN D0_QTY + D1_QTY + D2_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 6 THEN D0_QTY + D1_QTY + D2_QTY + D3_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 7 THEN D0_QTY + D1_QTY + D2_QTY + D3_QTY + D4_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 1 THEN D0_QTY + D1_QTY + D2_QTY + D3_QTY + D4_QTY + D5_QTY 
                                                                ELSE 0 
                                                           END) AS WEEK1_TTL 
                                                     , SUM(W1_QTY) AS WEEK1_PLAN 
                                                     , SUM(W2_QTY) AS WEEK2_PLAN 
                                                     , SUM(NVL(W1_QTY,0) + NVL(W2_QTY,0)) AS WEEK_TTL 
                                                     , SUM(CASE WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 7 THEN D0_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 1 THEN D1_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 2 THEN D2_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 3 THEN D3_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 4 THEN D4_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 5 THEN D5_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 6 THEN D6_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 2 THEN D0_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 3 THEN D1_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 4 THEN D2_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 5 THEN D3_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 6 THEN D4_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 7 THEN D5_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 1 THEN D6_QTY 
                                                                ELSE 0 
                                                           END) AS D0_PLAN 
                                                     , SUM(CASE WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 7 THEN D1_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 1 THEN D2_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 2 THEN D3_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 3 THEN D4_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 4 THEN D5_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 5 THEN D6_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 6 THEN D7_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 2 THEN D1_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 3 THEN D2_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 4 THEN D3_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 5 THEN D4_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 6 THEN D5_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 7 THEN D6_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 1 THEN D7_QTY 
                                                                ELSE 0 
                                                           END) AS D1_PLAN 
                                                     , SUM(CASE WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 7 THEN D2_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 1 THEN D3_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 2 THEN D4_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 3 THEN D5_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 4 THEN D6_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 5 THEN D7_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 6 THEN D8_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 2 THEN D2_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 3 THEN D3_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 4 THEN D4_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 5 THEN D5_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 6 THEN D6_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 7 THEN D7_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200720', 'YYYYMMDD'), 'D') = 1 THEN D8_QTY 
                                                                ELSE 0 
                                                           END) AS D2_PLAN 
                                                  FROM ( 
                                                        SELECT FACTORY, MAT_ID, 'OTD' AS CALENDAR_ID 
                                                             , SUM(DECODE(PLAN_WEEK, '202030', D0_QTY, 0)) AS D0_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202030', D1_QTY, 0)) AS D1_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202030', D2_QTY, 0)) AS D2_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202030', D3_QTY, 0)) AS D3_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202030', D4_QTY, 0)) AS D4_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202030', D5_QTY, 0)) AS D5_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202030', D6_QTY, 0)) AS D6_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202031', D0_QTY, 0)) AS D7_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202031', D1_QTY, 0)) AS D8_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202031', D2_QTY, 0)) AS D9_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202031', D3_QTY, 0)) AS D10_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202031', D4_QTY, 0)) AS D11_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202031', D5_QTY, 0)) AS D12_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202031', D6_QTY, 0)) AS D13_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202030', WW_QTY, 0)) AS W1_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202031', WW_QTY, 0)) AS W2_QTY  
                                                          FROM RWIPPLNWEK  
                                                         WHERE 1=1  
                                                           AND FACTORY = 'HMVA2'  
                                                           AND GUBUN = '3'  
                                                           AND MAT_ID NOT LIKE 'SES%' 
                                                           AND PLAN_WEEK IN ('202030','202031') 
                                                         GROUP BY FACTORY, MAT_ID  
                                                         UNION ALL 
                                                        SELECT FACTORY, MAT_ID, 'SE' AS CALENDAR_ID  
                                                             , SUM(DECODE(PLAN_WEEK, '202030', D0_QTY, 0)) AS D0_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202030', D1_QTY, 0)) AS D1_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202030', D2_QTY, 0)) AS D2_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202030', D3_QTY, 0)) AS D3_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202030', D4_QTY, 0)) AS D4_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202030', D5_QTY, 0)) AS D5_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202030', D6_QTY, 0)) AS D6_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202031', D0_QTY, 0)) AS D7_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202031', D1_QTY, 0)) AS D8_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202031', D2_QTY, 0)) AS D9_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202031', D3_QTY, 0)) AS D10_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202031', D4_QTY, 0)) AS D11_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202031', D5_QTY, 0)) AS D12_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202031', D6_QTY, 0)) AS D13_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202030', WW_QTY, 0)) AS W1_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202031', WW_QTY, 0)) AS W2_QTY  
                                                          FROM RWIPPLNWEK  
                                                         WHERE 1=1  
                                                           AND FACTORY = 'HMVA2'  
                                                           AND GUBUN = '3'  
                                                           AND MAT_ID LIKE 'SES%' 
                                                           AND PLAN_WEEK IN ('202030','202031') 
                                                         GROUP BY FACTORY, MAT_ID  
                                                       )  
                                                 GROUP BY FACTORY, MAT_ID  
                                               ) PLN 
                                             , (  
                                                SELECT FACTORY,MAT_ID, RESV_FIELD1  
                                                  FROM (  
                                                        SELECT FACTORY, MAT_ID, SUM(RESV_FIELD1) AS RESV_FIELD1   
                                                          FROM (  
                                                                SELECT FACTORY, MAT_ID, SUM(TO_NUMBER(DECODE(RESV_FIELD1,' ',0,RESV_FIELD1))) AS RESV_FIELD1  
                                                                  FROM CWIPPLNMON  
                                                                 WHERE 1=1  
                                                                   AND FACTORY = 'HMVA2'  
                                                                   AND PLAN_MONTH = '202007' 
                                                                 GROUP BY FACTORY, MAT_ID 
                                                               )  
                                                         GROUP BY FACTORY, MAT_ID 
                                                       ) 
                                               ) MON 
                                             , (  
                                                SELECT MAT_ID  
                                                     , SUM(CASE WHEN SHP_QTY_1 > 0 AND WORK_DATE = '20200720' THEN NVL(SHP_QTY_1, 0) ELSE 0 END) AS SHP_TODAY  
                                                     , SUM(CASE WHEN SHP_QTY_1 > 0 AND MAT_ID LIKE 'SES%' AND WORK_DATE BETWEEN '20200720' AND '20200720' THEN NVL(SHP_QTY_1, 0)  
                                                                WHEN SHP_QTY_1 > 0 AND MAT_ID NOT LIKE 'SES%' AND WORK_DATE BETWEEN '20200718' AND '20200720' THEN NVL(SHP_QTY_1, 0) 
                                                                ELSE 0 END) AS SHP_WEEK  
                                                     , SUM(CASE WHEN SHP_QTY_1 > 0 AND MAT_ID LIKE 'SES%' AND WORK_DATE BETWEEN '20200720' AND '20200719' THEN NVL(SHP_QTY_1, 0)  
                                                                WHEN SHP_QTY_1 > 0 AND MAT_ID NOT LIKE 'SES%' AND WORK_DATE BETWEEN '20200718' AND '20200719' THEN NVL(SHP_QTY_1, 0)  
                                                                ELSE 0 END) AS SHP_WEEK_TTL  
                                                     , SUM(CASE WHEN WORK_DATE BETWEEN '20200701' AND '20200720' THEN NVL(SHP_QTY_1, 0) END) AS SHP_MONTH  
                                                  FROM VSUMWIPOUT 
                                                 WHERE 1=1  
                                                   AND FACTORY  = 'HMVA2'  
                                                   AND LOT_TYPE = 'W'  
                                                   AND CM_KEY_2 = 'PROD'  
                                                   AND CM_KEY_3 LIKE 'P%'
                                                   AND MAT_ID NOT LIKE 'HX%'  
                                                   AND WORK_DATE BETWEEN LEAST('20200701', '20200718', '20200720') AND '20200720' 
                                                 GROUP BY MAT_ID  
                                                 UNION ALL  
                                                SELECT MAT_ID  
                                                     , SUM(CASE WHEN SHP_QTY_1 > 0 AND WORK_DATE = '20200720' THEN NVL(SHP_QTY_1, 0) ELSE 0 END) AS SHP_TODAY  
                                                     , SUM(CASE WHEN SHP_QTY_1 > 0 AND WORK_DATE BETWEEN '20200718' AND '20200720' THEN NVL(SHP_QTY_1, 0) ELSE 0 END) AS SHP_WEEK  
                                                     , SUM(CASE WHEN SHP_QTY_1 > 0 AND WORK_DATE BETWEEN '20200718' AND '20200719' THEN NVL(SHP_QTY_1, 0) ELSE 0 END) AS SHP_WEEK_TTL  
                                                     , SUM(CASE WHEN WORK_DATE BETWEEN '20200701' AND '20200720' THEN NVL(SHP_QTY_1, 0) END) AS SHP_MONTH  
                                                  FROM VSUMWIPOUT_06 
                                                 WHERE 1=1  
                                                   AND FACTORY  = 'HMVA2'  
                                                   AND LOT_TYPE = 'W'  
                                                   AND CM_KEY_2 = 'PROD'  
                                                   AND CM_KEY_3 LIKE 'P%'
                                                   AND MAT_ID LIKE 'HX%'  
                                                   AND WORK_DATE BETWEEN '20200701' AND '20200720' 
                                                 GROUP BY MAT_ID 
                                               ) SHP 
                                         WHERE 1=1 
                                           AND MAT.FACTORY = 'HMVA2' 
                                           AND MAT.MAT_TYPE = 'FG' 
                                           AND MAT.DELETE_FLAG = ' ' 
                                           AND MAT.MAT_ID = PLN.MAT_ID(+) 
                                           AND MAT.MAT_ID = MON.MAT_ID(+) 
                                           AND MAT.MAT_ID = SHP.MAT_ID(+) 
                                         GROUP BY MAT.MAT_ID 
                                         ORDER BY MAT.MAT_ID 
                                       ) A 
                                     , ( 
                                        SELECT MAT_ID, OPER_GRP_1 
                                             , SUM(ASSY_END_QTY) AS ASSY_END_QTY 
                                          FROM ( 
                                                SELECT B.MAT_ID 
                                                     , CASE WHEN OPER IN ('A0000', 'A000N') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'HMK2A' 
                                                            WHEN OPER IN ('A0040') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'BG' 
                                                            WHEN OPER IN ('A0200', 'A0230') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'SAW' 
                                                            WHEN OPER IN ('A0400', 'A0401', 'A0333') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'DA1' 
                                                            WHEN OPER IN ('A0402') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'DA2' 
                                                            WHEN OPER IN ('A0403') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'DA3' 
                                                            WHEN OPER IN ('A0404') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'DA4' 
                                                            WHEN OPER IN ('A0405') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'DA5' 
                                                            WHEN OPER IN ('A0406') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'DA6' 
                                                            WHEN OPER IN ('A0407') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'DA7' 
                                                            WHEN OPER IN ('A0408') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'DA8' 
                                                            WHEN OPER IN ('A0409') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'DA9' 
                                                            WHEN OPER IN ('A0600','A0601') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'WB1' 
                                                            WHEN OPER IN ('A0602') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'WB2' 
                                                            WHEN OPER IN ('A0603') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'WB3' 
                                                            WHEN OPER IN ('A0604') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'WB4' 
                                                            WHEN OPER IN ('A0605') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'WB5' 
                                                            WHEN OPER IN ('A0606') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'WB6' 
                                                            WHEN OPER IN ('A0607') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'WB7' 
                                                            WHEN OPER IN ('A0608') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'WB8' 
                                                            WHEN OPER IN ('A0609') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'WB9' 
                                                            WHEN OPER IN ('A0800', 'A0801', 'A0802', 'A0803', 'A0804', 'A0805', 'A0806', 'A0807', 'A0808', 'A0809') AND MAT_GRP_5 IN ('-', 'Merge') THEN 'GATE' 
                                                            WHEN OPER IN ('A1000', 'A0910') THEN 'MOLD' 
                                                            WHEN OPER IN ('A1100') THEN 'CURE' 
                                                            WHEN OPER IN ('A1150', 'A1500') THEN 'MK' 
                                                            WHEN OPER IN ('A1200') THEN 'TRIM' 
                                                            WHEN OPER IN ('A1450') THEN 'TIN' 
                                                            WHEN OPER IN ('A1300') THEN 'SBA' 
                                                            WHEN OPER IN ('A1750', 'A1800', 'A1900', 'A1825') THEN 'SIG' 
                                                            WHEN OPER IN ('A2000') THEN 'AVI' 
                                                            WHEN OPER IN ('A2050') THEN 'PVI' 
                                                            WHEN OPER IN ('A2100') THEN 'QC_GATE' 
                                                            WHEN OPER IN ('AZ010') THEN 'HMK3A' 
                                                            ELSE ' ' 
                                                        END OPER_GRP_1 
                                                     , (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END) ASSY_END_QTY 
                                                  FROM ( 
                                                        SELECT FACTORY, MAT_ID, OPER, LOT_TYPE, WORK_DATE, CM_KEY_3 
                                                             , SUM(END_LOT) AS END_LOT 
                                                             , SUM(END_QTY_1) AS END_QTY_1 
                                                             , SUM(END_QTY_2) AS END_QTY_2 
                                                             , SUM(CASE WHEN SHIP_QTY_1 > 0 THEN SHIP_QTY_1 ELSE 0 END) AS SHIP_QTY_1 
                                                             , SUM(CASE WHEN SHIP_QTY_2 > 0 THEN SHIP_QTY_2 ELSE 0 END) AS SHIP_QTY_2 
                                                          FROM ( 
                                                                SELECT FACTORY, MAT_ID, OPER, LOT_TYPE, WORK_DATE, CM_KEY_3 
                                                                     , DECODE(SUBSTR(OPER,2,4),'0000',SUM(S1_OPER_IN_LOT+S2_OPER_IN_LOT+S3_OPER_IN_LOT),SUM(S1_END_LOT+S2_END_LOT+S3_END_LOT)) END_LOT 
                                                                     , DECODE(SUBSTR(OPER,2,4),'0000',SUM(S1_OPER_IN_QTY_1+S2_OPER_IN_QTY_1+S3_OPER_IN_QTY_1),SUM(S1_END_QTY_1+S2_END_QTY_1+S3_END_QTY_1+S1_END_RWK_QTY_1 + S2_END_RWK_QTY_1 + S3_END_RWK_QTY_1)) END_QTY_1 
                                                                     , DECODE(SUBSTR(OPER,2,4),'0000',SUM(S1_OPER_IN_QTY_2+S2_OPER_IN_QTY_2+S3_OPER_IN_QTY_2),SUM(S1_END_QTY_2+S2_END_QTY_2+S3_END_QTY_2+S1_END_RWK_QTY_2 + S2_END_RWK_QTY_2 + S3_END_RWK_QTY_2)) END_QTY_2 
                                                                     , 0 SHIP_QTY_1 
                                                                     , 0 SHIP_QTY_2 
                                                                  FROM RSUMWIPMOV 
                                                                 WHERE FACTORY = 'HMVA2' 
                                                                   AND OPER NOT IN ('AZ010') 
                                                                   AND MAT_ID NOT LIKE 'HX%' 
                                                                 GROUP BY FACTORY, MAT_ID, OPER, LOT_TYPE, WORK_DATE, CM_KEY_3 
                                                                 UNION ALL 
                                                                SELECT FACTORY, MAT_ID 
                                                                     , 'AZ010' AS OPER 
                                                                     , LOT_TYPE, WORK_DATE, CM_KEY_3 
                                                                     , 0 END_LOT 
                                                                     , 0 END_QTY_1 
                                                                     , 0 END_QTY_2 
                                                                     , SUM(SHP_QTY_1) SHIP_QTY_1 
                                                                     , SUM(SHP_QTY_2) SHIP_QTY_2 
                                                                  FROM VSUMWIPOUT 
                                                                 WHERE FACTORY = 'HMVA2' 
                                                                   AND MAT_ID NOT LIKE 'HX%' 
                                                                 GROUP BY FACTORY, MAT_ID, LOT_TYPE, WORK_DATE, CM_KEY_3 
                                                                 UNION ALL 
                                                                SELECT FACTORY, MAT_ID, OPER, LOT_TYPE, WORK_DATE, CM_KEY_3 
                                                                     , DECODE(SUBSTR(OPER,2,4),'0000',SUM(S1_OPER_IN_LOT+S2_OPER_IN_LOT+S3_OPER_IN_LOT),SUM(S1_END_LOT+S2_END_LOT+S3_END_LOT)) END_LOT 
                                                                     , DECODE(SUBSTR(OPER,2,4),'0000',SUM(S1_OPER_IN_QTY_1+S2_OPER_IN_QTY_1+S3_OPER_IN_QTY_1),SUM(S1_END_QTY_1+S2_END_QTY_1+S3_END_QTY_1+S1_END_RWK_QTY_1 + S2_END_RWK_QTY_1 + S3_END_RWK_QTY_1)) END_QTY_1 
                                                                     , DECODE(SUBSTR(OPER,2,4),'0000',SUM(S1_OPER_IN_QTY_2+S2_OPER_IN_QTY_2+S3_OPER_IN_QTY_2),SUM(S1_END_QTY_2+S2_END_QTY_2+S3_END_QTY_2+S1_END_RWK_QTY_2 + S2_END_RWK_QTY_2 + S3_END_RWK_QTY_2)) END_QTY_2 
                                                                     , 0 SHIP_QTY_1 
                                                                     , 0 SHIP_QTY_2 
                                                                  FROM CSUMWIPMOV 
                                                                 WHERE FACTORY = 'HMVA2' 
                                                                   AND OPER NOT IN ('AZ010') 
                                                                   AND MAT_ID LIKE 'HX%' 
                                                                 GROUP BY FACTORY, MAT_ID, OPER, LOT_TYPE, WORK_DATE, CM_KEY_3 
                                                                 UNION ALL 
                                                                SELECT FACTORY, MAT_ID 
                                                                     , 'AZ010' AS OPER 
                                                                     , LOT_TYPE, WORK_DATE, CM_KEY_3 
                                                                     , 0 END_LOT 
                                                                     , 0 END_QTY_1 
                                                                     , 0 END_QTY_2 
                                                                     , SUM(SHP_QTY_1) SHIP_QTY_1 
                                                                     , SUM(SHP_QTY_2) SHIP_QTY_2 
                                                                  FROM VSUMWIPOUT_06 
                                                                 WHERE FACTORY = 'HMVA2' 
                                                                   AND MAT_ID LIKE 'HX%' 
                                                                 GROUP BY FACTORY, MAT_ID, LOT_TYPE, WORK_DATE, CM_KEY_3 
                                                               ) 
                                                         GROUP BY FACTORY, MAT_ID, OPER, LOT_TYPE, WORK_DATE, CM_KEY_3 
                                                       ) A 
                                                     , MWIPMATDEF B 
                                                 WHERE 1=1 
                                                   AND A.FACTORY  = 'HMVA2' 
                                                   AND A.FACTORY = B.FACTORY 
                                                   AND A.MAT_ID = B.MAT_ID 
                                                   AND B.MAT_TYPE = 'FG' 
                                                   AND A.MAT_ID LIKE '%' 
                                                   AND A.CM_KEY_3 LIKE 'P%'
                                                   AND A.OPER NOT IN ('00001','00002') 
                                                   AND A.WORK_DATE = '20200720' 
                                                 ) 
                                         GROUP BY MAT_ID, OPER_GRP_1 
                                        HAVING SUM(ASSY_END_QTY) > 0 
                                       ) B 
                                     , ( 
                                        SELECT MAT_ID, OPER_GRP_1, SUM(NVL(QTY,0)) QTY 
                                          FROM (  
                                                SELECT MAT_ID 
                                                     , QTY 
                                                     , CASE WHEN OPER_GRP_8 = 'HMK2A' THEN 'HMK2A' 
                                                            WHEN OPER_GRP_8 = 'B/G' THEN 'BG' 
                                                            WHEN OPER_GRP_8 = 'SAW' THEN 'SAW' 
                                                            WHEN OPER_GRP_8 = 'S/P' THEN 'SP' 
                                                            WHEN OPER_GRP_8 IN ('D/A1', 'D/A1 CURE') THEN 'DA1' 
                                                            WHEN OPER_GRP_8 IN ('D/A2', 'D/A2 CURE') THEN 'DA2' 
                                                            WHEN OPER_GRP_8 IN ('D/A3', 'D/A3 CURE') THEN 'DA3' 
                                                            WHEN OPER_GRP_8 IN ('D/A4', 'D/A4 CURE') THEN 'DA4' 
                                                            WHEN OPER_GRP_8 IN ('D/A5', 'D/A5 CURE') THEN 'DA5' 
                                                            WHEN OPER_GRP_8 IN ('D/A6', 'D/A6 CURE') THEN 'DA6' 
                                                            WHEN OPER_GRP_8 IN ('D/A7', 'D/A7 CURE') THEN 'DA7' 
                                                            WHEN OPER_GRP_8 IN ('D/A8', 'D/A8 CURE') THEN 'DA8' 
                                                            WHEN OPER_GRP_8 IN ('D/A9', 'D/A9 CURE') THEN 'DA9' 
                                                            WHEN OPER_GRP_8 = 'W/B1' THEN 'WB1' 
                                                            WHEN OPER_GRP_8 = 'W/B2' THEN 'WB2' 
                                                            WHEN OPER_GRP_8 = 'W/B3' THEN 'WB3' 
                                                            WHEN OPER_GRP_8 = 'W/B4' THEN 'WB4' 
                                                            WHEN OPER_GRP_8 = 'W/B5' THEN 'WB5' 
                                                            WHEN OPER_GRP_8 = 'W/B6' THEN 'WB6' 
                                                            WHEN OPER_GRP_8 = 'W/B7' THEN 'WB7' 
                                                            WHEN OPER_GRP_8 = 'W/B8' THEN 'WB8' 
                                                            WHEN OPER_GRP_8 = 'W/B9' THEN 'WB9' 
                                                            WHEN OPER_GRP_8 = 'GATE' AND MAT_GRP_5 = '-' THEN 'GATE' 
                                                            WHEN OPER_GRP_8 = 'GATE' AND MAT_GRP_1 = 'SE' AND MAT_GRP_5 = 'Merge' THEN 'GATE' 
                                                            WHEN OPER_GRP_8 = 'GATE' AND MAT_GRP_1 = 'HX' THEN 'GATE' 
                                                            WHEN OPER_GRP_8 = 'GATE' AND MAT_GRP_1 NOT IN ('SE','HX') AND SUBSTR(MAT_GRP_4,-1) = SUBSTR(OPER, -1) THEN 'GATE' 
                                                            WHEN OPER_GRP_8 = 'MOLD' THEN 'MOLD' 
                                                            WHEN OPER_GRP_8 = 'CURE' THEN 'CURE' 
                                                            WHEN OPER_GRP_8 = 'M/K' THEN 'MK' 
                                                            WHEN OPER_GRP_8 = 'TRIM' THEN 'TRIM' 
                                                            WHEN OPER_GRP_8 = 'TIN' THEN 'TIN' 
                                                            WHEN OPER_GRP_8 = 'S/B/A' THEN 'SBA' 
                                                            WHEN OPER_GRP_8 = 'SIG' THEN 'SIG' 
                                                            WHEN OPER_GRP_8 = 'AVI' THEN 'AVI' 
                                                            WHEN OPER_GRP_8 = 'V/I' THEN 'PVI' 
                                                            WHEN OPER_GRP_8 = 'QC GATE' THEN 'QC_GATE' 
                                                            WHEN OPER_GRP_8 = 'HMK3A' THEN 'HMK3A' 
                                                            ELSE ' ' 
                                                        END OPER_GRP_1 
                                                  FROM ( 
                                                        SELECT MAT_ID, OPER, OPER_GRP_8, MAT_GRP_1, MAT_GRP_4, MAT_GRP_5, MAT_GRP_10 
                                                             , CASE WHEN MAT_GRP_1 = 'HX' AND HX_COMP_MIN IS NOT NULL
                                                                         THEN (CASE WHEN HX_COMP_MIN <> HX_COMP_MAX AND OPER > HX_COMP_MIN AND OPER <= HX_COMP_MAX THEN QTY_1 / NVL(COMP_CNT / 2,1)
                                                                         WHEN OPER <= HX_COMP_MAX THEN QTY_1 / NVL(COMP_CNT,1)
                                                                         ELSE QTY_1 END)
                                                                    WHEN OPER <= 'A0395' THEN QTY_1 / NVL(COMP_CNT,1) 
                                                                    ELSE QTY_1 
                                                               END QTY 
                                                          FROM ( 
                                                                SELECT A.MAT_ID, B.OPER, B.OPER_GRP_8, C.MAT_GRP_1, C.MAT_GRP_4, C.MAT_GRP_5, C.MAT_GRP_10 
                                                                     , CASE WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN CASE WHEN MAT_GRP_5 IN ('1st','Merge') OR MAT_GRP_5 LIKE 'Middle%' THEN QTY_1 ELSE 0 END 
                                                                            WHEN MAT_GRP_3 IN ('COB', 'BGN') THEN ROUND(QTY_1/TO_NUMBER(DECODE(MAT_CMF_13, ' ', 1, '-', 1, MAT_CMF_13)),0) 
                                                                            ELSE QTY_1 
                                                                       END AS QTY_1 
                                                                     , COMP_CNT  
                                                                     , HX_COMP_MIN, HX_COMP_MAX 
                                                                  FROM RWIPLOTSTS_BOH A   
                                                                     , MWIPOPRDEF B   
                                                                     , VWIPMATDEF C 
                                                                 WHERE 1 = 1  
                                                                   AND A.CUTOFF_DT = '2020072022' 
                                                                   AND A.FACTORY = B.FACTORY 
                                                                   AND A.FACTORY = C.FACTORY 
                                                                   AND A.OPER = B.OPER 
                                                                   AND A.MAT_ID = C.MAT_ID 
                                                                   AND A.FACTORY = 'HMVA2'   
                                                                   AND A.LOT_TYPE = 'W'  
                                                                   AND A.LOT_CMF_5 LIKE 'P%'
                                                                   AND A.LOT_DEL_FLAG = ' '  
                                                                   AND C.MAT_GRP_2 <> '-' 
                                                                   AND C.DELETE_FLAG = ' '  
                                                               ) 
                                                       ) 
                                               ) 
                                         WHERE 1=1 
                                           AND OPER_GRP_1 <> ' ' 
                                         GROUP BY MAT_ID, OPER_GRP_1 
                                        HAVING SUM(NVL(QTY,0)) > 0 
                                       ) WIP 
                                     , ( 
                                        SELECT A.RES_STS_2 AS MAT_ID 
                                             , A.OPER_GRP_1 
                                             , SUM(A.RES_CNT) AS RES_CNT 
                                             , SUM(TRUNC(NVL(NVL(B.UPEH,0) * 24 * A.PERCENT * A.RES_CNT, 0))) AS RES_CAPA 
                                          FROM ( 
                                                SELECT FACTORY, RES_STS_2, RES_STS_8 AS OPER, RES_GRP_6 AS RES_MODEL, RES_GRP_7 AS UPEH_GRP, COUNT(RES_ID) AS RES_CNT 
                                                     , CASE WHEN RES_STS_8 LIKE 'A06%' THEN 0.71
                                                            WHEN RES_STS_8 LIKE 'A04%' THEN 0.68
                                                            WHEN RES_STS_8 = 'A0333' THEN 0.68
                                                            ELSE 0.7
                                                       END PERCENT 
                                                     , CASE WHEN RES_STS_8 IN ('A0040') THEN 'BG' 
                                                            WHEN RES_STS_8 IN ('A0200', 'A0230') THEN 'SAW' 
                                                            WHEN RES_STS_8 IN ('A0400', 'A0401', 'A0333') THEN 'DA1' 
                                                            WHEN RES_STS_8 IN ('A0402') THEN 'DA2' 
                                                            WHEN RES_STS_8 IN ('A0403') THEN 'DA3' 
                                                            WHEN RES_STS_8 IN ('A0404') THEN 'DA4' 
                                                            WHEN RES_STS_8 IN ('A0405') THEN 'DA5' 
                                                            WHEN RES_STS_8 IN ('A0406') THEN 'DA6' 
                                                            WHEN RES_STS_8 IN ('A0407') THEN 'DA7' 
                                                            WHEN RES_STS_8 IN ('A0408') THEN 'DA8' 
                                                            WHEN RES_STS_8 IN ('A0409') THEN 'DA9' 
                                                            WHEN RES_STS_8 IN ('A0600','A0601') THEN 'WB1' 
                                                            WHEN RES_STS_8 IN ('A0602') THEN 'WB2' 
                                                            WHEN RES_STS_8 IN ('A0603') THEN 'WB3' 
                                                            WHEN RES_STS_8 IN ('A0604') THEN 'WB4' 
                                                            WHEN RES_STS_8 IN ('A0605') THEN 'WB5' 
                                                            WHEN RES_STS_8 IN ('A0606') THEN 'WB6' 
                                                            WHEN RES_STS_8 IN ('A0607') THEN 'WB7' 
                                                            WHEN RES_STS_8 IN ('A0608') THEN 'WB8' 
                                                            WHEN RES_STS_8 IN ('A0609') THEN 'WB9' 
                                                            WHEN RES_STS_8 IN ('A0800', 'A0801', 'A0802', 'A0803', 'A0804', 'A0805', 'A0806', 'A0807', 'A0808', 'A0809') THEN 'GATE' 
                                                            WHEN RES_STS_8 IN ('A1000', 'A0910') THEN 'MOLD' 
                                                            WHEN RES_STS_8 IN ('A1100') THEN 'CURE' 
                                                            WHEN RES_STS_8 IN ('A1150', 'A1500') THEN 'MK' 
                                                            WHEN RES_STS_8 IN ('A1200') THEN 'TRIM' 
                                                            WHEN RES_STS_8 IN ('A1450') THEN 'TIN' 
                                                            WHEN RES_STS_8 IN ('A1300') THEN 'SBA' 
                                                            WHEN RES_STS_8 IN ('A1750', 'A1800', 'A1900', 'A1825') THEN 'SIG' 
                                                            WHEN RES_STS_8 IN ('A2000') THEN 'AVI' 
                                                            WHEN RES_STS_8 IN ('A2050') THEN 'PVI' 
                                                            WHEN RES_STS_8 IN ('A2100') THEN 'QC_GATE' 
                                                            ELSE ' ' 
                                                       END OPER_GRP_1 
                                                  FROM MRASRESDEF_BOH 
                                                 WHERE 1 = 1  
                                                   AND CUTOFF_DT = '2020072022' 
                                                   AND FACTORY  = 'HMVA2' 
                                                   AND RES_CMF_9 = 'Y' 
                                                   AND RES_CMF_7 = 'Y' 
                                                   AND DELETE_FLAG = ' ' 
                                                   AND RES_TYPE='EQUIPMENT' 
                                                   AND (RES_STS_1 NOT IN ('C200', 'B199') OR RES_UP_DOWN_FLAG = 'U') 
                                                 GROUP BY FACTORY,RES_STS_2,RES_STS_8,RES_GRP_6,RES_GRP_7  
                                               ) A 
                                             , CRASUPHDEF B 
                                         WHERE 1=1 
                                           AND A.FACTORY = B.FACTORY(+) 
                                           AND A.OPER = B.OPER(+) 
                                           AND A.RES_MODEL = B.RES_MODEL(+) 
                                           AND A.UPEH_GRP = B.UPEH_GRP(+) 
                                           AND A.RES_STS_2 = B.MAT_ID(+) 
                                           AND A.FACTORY  = 'HMVA2' 
                                           AND A.OPER NOT IN ('00001','00002') 
                                           AND A.OPER_GRP_1 <> ' ' 
                                         GROUP BY A.RES_STS_2, A.OPER_GRP_1 
                                       ) RES 
                                 WHERE 1=1 
                                   AND MAT.MAT_ID = A.MAT_ID(+) 
                                   AND MAT.MAT_ID = B.MAT_ID(+) 
                                   AND MAT.MAT_ID = WIP.MAT_ID(+) 
                                   AND MAT.MAT_ID = RES.MAT_ID(+) 
                                   AND MAT.OPER_GRP_1 = B.OPER_GRP_1(+) 
                                   AND MAT.OPER_GRP_1 = WIP.OPER_GRP_1(+) 
                                   AND MAT.OPER_GRP_1 = RES.OPER_GRP_1(+) 
                               ) 
                         GROUP BY MAT_GRP_1, MAT_GRP_9, MAT_GRP_10, MAT_GRP_6, MAT_CMF_11,  ' ', CONV_MAT_ID,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', OPER_GRP_1 
                        HAVING ( 
                                SUM(NVL(D0_ORI_PLAN,0))+SUM(NVL(D1_PLAN,0))+SUM(NVL(D2_PLAN,0))+SUM(NVL(WEEK_PLAN,0))+SUM(NVL(WEEK2_PLAN,0))+SUM(NVL(MON_PLAN,0))+SUM(NVL(WIP_QTY,0)) 
                              + SUM(NVL(D0_PLAN,0))+SUM(NVL(SHP_WEEK,0))+SUM(NVL(SHP_MONTH,0))+SUM(NVL(ASSY_END_QTY,0)) 
                               ) > 0 
                      ) 
                    , (SELECT LEVEL AS SEQ FROM DUAL CONNECT BY LEVEL <= 10) 
                 GROUP BY MAT_GRP_1, MAT_GRP_9, MAT_GRP_10, MAT_GRP_6, MAT_CMF_11,  ' ', CONV_MAT_ID,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', OPER_GRP_1, DECODE(SEQ, 1, 'WIP', 2, '설비대수', 3, 'CAPA현황', 4, '당일 실적', 5, 'D0 잔량', 6, 'D1 잔량', 7, 'D2 잔량', 8, '당주 잔량', 9, '차주 잔량', 10, '월간 잔량') 
               ) 
         GROUP BY  MAT_GRP_1, MAT_GRP_9, MAT_GRP_10, MAT_GRP_6, MAT_CMF_11,  ' ', CONV_MAT_ID,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', GUBUN 
       ) A 
 WHERE 1=1 
 GROUP BY MAT_GRP_1, MAT_GRP_9, MAT_GRP_10, MAT_GRP_6, MAT_CMF_11,  ' ', CONV_MAT_ID,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', GUBUN 
 ORDER BY DECODE(MAT_GRP_1, 'SE', 1, 'HX', 2, 'IM', 3, 'FC', 4, 'IG', 5, 6), CUSTOMER, MAJOR, PKG, LD_COUNT, PKG_CODE,  ' ', PRODUCT,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', DECODE(GUBUN, 'WIP', 1, '설비대수', 2, 'CAPA현황', 3, '당일 실적', 4, 'D0 잔량', 5, 'D1 잔량', 6, 'D2 잔량', 7, '당주 잔량', 8, '차주 잔량', 9, '월간 잔량', 10) 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT (SELECT DATA_1 FROM MGCMTBLDAT@RPTTOMES WHERE FACTORY = 'HMVA2' AND TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = MAT_GRP_1) AS CUSTOMER, MAT_GRP_9 AS MAJOR, MAT_GRP_10 AS PKG, MAT_GRP_6 AS LD_COUNT, MAT_CMF_11 AS PKG_CODE,  ' ', CONV_MAT_ID AS PRODUCT,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ' 
     , MAX(DECODE(OPER_GRP_1, 'HMK3A', 'T', '', 'F', 'F')) AS HMK3A 
     , MAX(DECODE(OPER_GRP_1, 'QC_GATE', 'T', '', 'F', 'F')) AS QC_GATE 
     , MAX(DECODE(OPER_GRP_1, 'PVI', 'T', '', 'F', 'F')) AS PVI 
     , MAX(DECODE(OPER_GRP_1, 'AVI', 'T', '', 'F', 'F')) AS AVI 
     , MAX(DECODE(OPER_GRP_1, 'SIG', 'T', '', 'F', 'F')) AS SIG 
     , MAX(DECODE(OPER_GRP_1, 'SBA', 'T', '', 'F', 'F')) AS SBA 
     , MAX(DECODE(OPER_GRP_1, 'TIN', 'T', '', 'F', 'F')) AS TIN 
     , MAX(DECODE(OPER_GRP_1, 'TRIM', 'T', '', 'F', 'F')) AS TRIM 
     , MAX(DECODE(OPER_GRP_1, 'MK', 'T', '', 'F', 'F')) AS MK 
     , MAX(DECODE(OPER_GRP_1, 'CURE', 'T', '', 'F', 'F')) AS CURE 
     , MAX(DECODE(OPER_GRP_1, 'MOLD', 'T', '', 'F', 'F')) AS MOLD 
     , MAX(DECODE(OPER_GRP_1, 'GATE', 'T', '', 'F', 'F')) AS GATE 
     , MAX(DECODE(OPER_GRP_1, 'WB9', 'T', '', 'F', 'F')) AS WB9 
     , MAX(DECODE(OPER_GRP_1, 'DA9', 'T', '', 'F', 'F')) AS DA9 
     , MAX(DECODE(OPER_GRP_1, 'WB8', 'T', '', 'F', 'F')) AS WB8 
     , MAX(DECODE(OPER_GRP_1, 'DA8', 'T', '', 'F', 'F')) AS DA8 
     , MAX(DECODE(OPER_GRP_1, 'WB7', 'T', '', 'F', 'F')) AS WB7 
     , MAX(DECODE(OPER_GRP_1, 'DA7', 'T', '', 'F', 'F')) AS DA7 
     , MAX(DECODE(OPER_GRP_1, 'WB6', 'T', '', 'F', 'F')) AS WB6 
     , MAX(DECODE(OPER_GRP_1, 'DA6', 'T', '', 'F', 'F')) AS DA6 
     , MAX(DECODE(OPER_GRP_1, 'WB5', 'T', '', 'F', 'F')) AS WB5 
     , MAX(DECODE(OPER_GRP_1, 'DA5', 'T', '', 'F', 'F')) AS DA5 
     , MAX(DECODE(OPER_GRP_1, 'WB4', 'T', '', 'F', 'F')) AS WB4 
     , MAX(DECODE(OPER_GRP_1, 'DA4', 'T', '', 'F', 'F')) AS DA4 
     , MAX(DECODE(OPER_GRP_1, 'WB3', 'T', '', 'F', 'F')) AS WB3 
     , MAX(DECODE(OPER_GRP_1, 'DA3', 'T', '', 'F', 'F')) AS DA3  
     , MAX(DECODE(OPER_GRP_1, 'WB2', 'T', '', 'F', 'F')) AS WB2 
     , MAX(DECODE(OPER_GRP_1, 'DA2', 'T', '', 'F', 'F')) AS DA2 
     , MAX(DECODE(OPER_GRP_1, 'WB1', 'T', '', 'F', 'F')) AS WB1 
     , MAX(DECODE(OPER_GRP_1, 'DA1', 'T', '', 'F', 'F')) AS DA1 
     , MAX(DECODE(OPER_GRP_1, 'SP', 'T', '', 'F', 'F')) AS SP 
     , MAX(DECODE(OPER_GRP_1, 'SAW', 'T', '', 'F', 'F')) AS SAW 
     , MAX(DECODE(OPER_GRP_1, 'BG', 'T', '', 'F', 'F')) AS BG 
     , MAX(DECODE(OPER_GRP_1, 'HMK2A','T', '', 'F', 'F')) AS HMK2A 
  FROM ( 
        SELECT MAT.FACTORY, MAT.MAT_GRP_1, MAT.MAT_GRP_9, MAT.MAT_GRP_10, MAT.MAT_GRP_6, MAT.MAT_CMF_11,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT.MAT_ID, MAT.DELETE_FLAG 
             , CASE WHEN MAT.MAT_GRP_1 = 'SE' AND MAT.MAT_GRP_9 = 'MEMORY' THEN 'SEK_________-___' || SUBSTR(MAT.MAT_ID, -3) 
                                                                    WHEN MAT.MAT_GRP_1 = 'HX' THEN MAT.MAT_CMF_10 
                                                                    ELSE MAT_ID 
                                                               END CONV_MAT_ID 
          FROM MWIPMATDEF MAT 
       ) MAT 
     , ( 
        SELECT A.MAT_ID 
                     , CASE WHEN B.OPER IN ('A0400', 'A0401', 'A0333') THEN 'DA1' 
                            WHEN B.OPER IN ('A0402') THEN 'DA2' 
                            WHEN B.OPER IN ('A0403') THEN 'DA3' 
                            WHEN B.OPER IN ('A0404') THEN 'DA4' 
                            WHEN B.OPER IN ('A0405') THEN 'DA5' 
                            WHEN B.OPER IN ('A0406') THEN 'DA6' 
                            WHEN B.OPER IN ('A0407') THEN 'DA7' 
                            WHEN B.OPER IN ('A0408') THEN 'DA8' 
                            WHEN B.OPER IN ('A0409') THEN 'DA9' 
                            WHEN B.OPER IN ('A0600', 'A0601') THEN 'WB1' 
                            WHEN B.OPER IN ('A0602') THEN 'WB2' 
                            WHEN B.OPER IN ('A0603') THEN 'WB3' 
                            WHEN B.OPER IN ('A0604') THEN 'WB4' 
                            WHEN B.OPER IN ('A0605') THEN 'WB5' 
                            WHEN B.OPER IN ('A0606') THEN 'WB6' 
                            WHEN B.OPER IN ('A0607') THEN 'WB7' 
                            WHEN B.OPER IN ('A0608') THEN 'WB8' 
                            WHEN B.OPER IN ('A0609') THEN 'WB9' 
                            ELSE ' ' 
                        END OPER_GRP_1 
          FROM MWIPMATDEF A 
             , MWIPFLWOPR@RPTTOMES B 
         WHERE 1=1 
           AND A.FACTORY = B.FACTORY 
           AND A.FIRST_FLOW = B.FLOW 
           AND A.FACTORY = 'HMVA2' 
           AND A.DELETE_FLAG = ' ' 
           AND A.MAT_TYPE = 'FG' 
           AND A.MAT_GRP_5 IN ('-', 'Merge') 
           AND A.MAT_ID LIKE '%' 
       ) A 
 WHERE 1=1 
   AND MAT.FACTORY = 'HMVA2' 
   AND MAT.DELETE_FLAG = ' ' 
   AND MAT.MAT_ID = A.MAT_ID  
 GROUP BY MAT.MAT_GRP_1, MAT.MAT_GRP_9, MAT.MAT_GRP_10, MAT.MAT_GRP_6, MAT.MAT_CMF_11,  ' ', CONV_MAT_ID,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ' 
 ORDER BY DECODE(MAT_GRP_1, 'SE', 1, 'HX', 2, 'IM', 3, 'FC', 4, 'IG', 5, 6), CUSTOMER, MAJOR, PKG, LD_COUNT, PKG_CODE,  ' ', PRODUCT,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ' 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE) AS START_DAY 
     , MAX(SYS_DATE) AS END_DAY 
     , PLAN_YEAR||DECODE(LENGTH(PLAN_WEEK), 1, '0'||PLAN_WEEK, PLAN_WEEK) AS WEEK
  FROM MWIPCALDEF 
 WHERE CALENDAR_ID = 'OTD'
   AND (PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) IN ( 
                                                SELECT WW
                                                  FROM (
                                                        SELECT WW
                                                             , ROW_NUMBER() OVER(ORDER BY WW) AS RNK
                                                          FROM (
                                                                SELECT DISTINCT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW
                                                                  FROM MWIPCALDEF
                                                                 WHERE CALENDAR_ID = 'OTD'
                                                                   AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') >= (
                                                                                                              SELECT MAX(PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) AS WW
                                                                                                                FROM MWIPCALDEF
                                                                                                               WHERE CALENDAR_ID = 'OTD'
                                                                                                                 AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') < (SELECT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW FROM MWIPCALDEF WHERE CALENDAR_ID = 'OTD' AND SYS_DATE = '20200721')
                                                                                                                 AND SYS_DATE >= TO_CHAR(TO_DATE('20200721', 'YYYYMMDD')-14, 'YYYYMMDD')
                                                                                                             )
                                                               ) 
                                                       )
                                                 WHERE RNK <= 7
                                               ) 
 GROUP BY PLAN_YEAR, PLAN_WEEK 
 ORDER BY PLAN_YEAR, PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE) AS START_DAY 
     , MAX(SYS_DATE) AS END_DAY 
     , PLAN_YEAR||DECODE(LENGTH(PLAN_WEEK), 1, '0'||PLAN_WEEK, PLAN_WEEK) AS WEEK
  FROM MWIPCALDEF 
 WHERE CALENDAR_ID = 'SE'
   AND (PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) IN ( 
                                                SELECT WW
                                                  FROM (
                                                        SELECT WW
                                                             , ROW_NUMBER() OVER(ORDER BY WW) AS RNK
                                                          FROM (
                                                                SELECT DISTINCT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW
                                                                  FROM MWIPCALDEF
                                                                 WHERE CALENDAR_ID = 'SE'
                                                                   AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') >= (
                                                                                                              SELECT MAX(PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) AS WW
                                                                                                                FROM MWIPCALDEF
                                                                                                               WHERE CALENDAR_ID = 'SE'
                                                                                                                 AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') < (SELECT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW FROM MWIPCALDEF WHERE CALENDAR_ID = 'SE' AND SYS_DATE = '20200721')
                                                                                                                 AND SYS_DATE >= TO_CHAR(TO_DATE('20200721', 'YYYYMMDD')-14, 'YYYYMMDD')
                                                                                                             )
                                                               ) 
                                                       )
                                                 WHERE RNK <= 7
                                               ) 
 GROUP BY PLAN_YEAR, PLAN_WEEK 
 ORDER BY PLAN_YEAR, PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT (SELECT DATA_1 FROM MGCMTBLDAT@RPTTOMES WHERE FACTORY = 'HMVA2' AND TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = MAT_GRP_1) AS CUSTOMER, MAT_GRP_9 AS MAJOR, MAT_GRP_10 AS PKG, MAT_GRP_6 AS LD_COUNT, MAT_CMF_11 AS PKG_CODE,  ' ', CONV_MAT_ID AS PRODUCT,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ' 
     , ROUND(SUM(PLAN)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS PLAN 
     , ROUND(SUM(SHP)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS SHP 
     , ROUND(SUM(DEF)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS DEF 
     , GUBUN 
     , ROUND(SUM(HMK3A)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS HMK3A 
     , ROUND(SUM(QC_GATE)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS QC_GATE 
     , ROUND(SUM(PVI)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS PVI 
     , ROUND(SUM(AVI)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS AVI 
     , ROUND(SUM(SIG)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS SIG 
     , ROUND(SUM(SBA)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS SBA 
     , ROUND(SUM(TIN)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS TIN 
     , ROUND(SUM(TRIM)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS TRIM 
     , ROUND(SUM(MK)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS MK 
     , ROUND(SUM(CURE)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS CURE 
     , ROUND(SUM(MOLD)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS MOLD 
     , ROUND(SUM(GATE)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS GATE 
     , ROUND(SUM(WB9)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS WB9 
     , ROUND(SUM(DA9)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS DA9 
     , ROUND(SUM(WB8)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS WB8 
     , ROUND(SUM(DA8)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS DA8 
     , ROUND(SUM(WB7)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS WB7 
     , ROUND(SUM(DA7)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS DA7 
     , ROUND(SUM(WB6)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS WB6 
     , ROUND(SUM(DA6)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS DA6 
     , ROUND(SUM(WB5)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS WB5 
     , ROUND(SUM(DA5)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS DA5 
     , ROUND(SUM(WB4)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS WB4 
     , ROUND(SUM(DA4)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS DA4 
     , ROUND(SUM(WB3)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS WB3 
     , ROUND(SUM(DA3)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS DA3 
     , ROUND(SUM(WB2)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS WB2 
     , ROUND(SUM(DA2)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS DA2 
     , ROUND(SUM(WB1)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS WB1 
     , ROUND(SUM(DA1)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS DA1 
     , ROUND(SUM(SP)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS SP 
     , ROUND(SUM(SAW)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS SAW 
     , ROUND(SUM(BG)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS BG 
     , ROUND(SUM(HMK2A)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS HMK2A 
     , ROUND(SUM(WIP_DEF)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS WIP_DEF 
  FROM (  
        SELECT MAT_GRP_1, MAT_GRP_9, MAT_GRP_10, MAT_GRP_6, MAT_CMF_11,  ' ', CONV_MAT_ID,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', GUBUN 
             , MAX(PLAN) AS PLAN 
             , MAX(SHP) AS SHP 
             , MAX(DEF) AS DEF 
             , SUM(DECODE(OPER_GRP_1, 'HMK3A', SUM_DEF, 0)) AS HMK3A 
             , SUM(DECODE(OPER_GRP_1, 'QC_GATE', SUM_DEF, 0)) AS QC_GATE 
             , SUM(DECODE(OPER_GRP_1, 'PVI', SUM_DEF, 0)) AS PVI 
             , SUM(DECODE(OPER_GRP_1, 'AVI', SUM_DEF, 0)) AS AVI 
             , SUM(DECODE(OPER_GRP_1, 'SIG', SUM_DEF, 0)) AS SIG 
             , SUM(DECODE(OPER_GRP_1, 'SBA', SUM_DEF, 0)) AS SBA 
             , SUM(DECODE(OPER_GRP_1, 'TIN', SUM_DEF, 0)) AS TIN 
             , SUM(DECODE(OPER_GRP_1, 'TRIM', SUM_DEF, 0)) AS TRIM 
             , SUM(DECODE(OPER_GRP_1, 'MK', SUM_DEF, 0)) AS MK 
             , SUM(DECODE(OPER_GRP_1, 'CURE', SUM_DEF, 0)) AS CURE 
             , SUM(DECODE(OPER_GRP_1, 'MOLD', SUM_DEF, 0)) AS MOLD 
             , SUM(DECODE(OPER_GRP_1, 'GATE', SUM_DEF, 0)) AS GATE 
             , SUM(DECODE(OPER_GRP_1, 'WB9', SUM_DEF, 0)) AS WB9 
             , SUM(DECODE(OPER_GRP_1, 'DA9', SUM_DEF, 0)) AS DA9 
             , SUM(DECODE(OPER_GRP_1, 'WB8', SUM_DEF, 0)) AS WB8 
             , SUM(DECODE(OPER_GRP_1, 'DA8', SUM_DEF, 0)) AS DA8 
             , SUM(DECODE(OPER_GRP_1, 'WB7', SUM_DEF, 0)) AS WB7 
             , SUM(DECODE(OPER_GRP_1, 'DA7', SUM_DEF, 0)) AS DA7 
             , SUM(DECODE(OPER_GRP_1, 'WB6', SUM_DEF, 0)) AS WB6 
             , SUM(DECODE(OPER_GRP_1, 'DA6', SUM_DEF, 0)) AS DA6 
             , SUM(DECODE(OPER_GRP_1, 'WB5', SUM_DEF, 0)) AS WB5 
             , SUM(DECODE(OPER_GRP_1, 'DA5', SUM_DEF, 0)) AS DA5 
             , SUM(DECODE(OPER_GRP_1, 'WB4', SUM_DEF, 0)) AS WB4 
             , SUM(DECODE(OPER_GRP_1, 'DA4', SUM_DEF, 0)) AS DA4 
             , SUM(DECODE(OPER_GRP_1, 'WB3', SUM_DEF, 0)) AS WB3 
             , SUM(DECODE(OPER_GRP_1, 'DA3', SUM_DEF, 0)) AS DA3 
             , SUM(DECODE(OPER_GRP_1, 'WB2', SUM_DEF, 0)) AS WB2 
             , SUM(DECODE(OPER_GRP_1, 'DA2', SUM_DEF, 0)) AS DA2 
             , SUM(DECODE(OPER_GRP_1, 'WB1', SUM_DEF, 0)) AS WB1 
             , SUM(DECODE(OPER_GRP_1, 'DA1', SUM_DEF, 0)) AS DA1 
             , SUM(DECODE(OPER_GRP_1, 'SP', SUM_DEF, 0)) AS SP 
             , SUM(DECODE(OPER_GRP_1, 'SAW', SUM_DEF, 0)) AS SAW 
             , SUM(DECODE(OPER_GRP_1, 'BG', SUM_DEF, 0)) AS BG 
             , SUM(DECODE(OPER_GRP_1, 'HMK2A',SUM_DEF, 0)) AS HMK2A 
             , MAX(WIP_TTL) AS WIP_TTL 
             , MAX(DEF) - MAX(WIP_TTL) AS WIP_DEF 
          FROM ( 
                SELECT MAT_GRP_1, MAT_GRP_9, MAT_GRP_10, MAT_GRP_6, MAT_CMF_11,  ' ', CONV_MAT_ID,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ' 
                     , OPER_GRP_1 
                     , DECODE(SEQ, 1, 'WIP', 2, '설비대수', 3, 'CAPA현황', 4, '당일 실적', 5, 'D0 잔량', 6, 'D1 잔량', 7, 'D2 잔량', 8, '당주 잔량', 9, '차주 잔량', 10, '월간 잔량') AS GUBUN 
                     , SUM(DECODE(SEQ, 1, 0, 2, 0, 3, 0, 4, 0, 5, D0_PLAN, 6, D1_PLAN, 7, D2_PLAN, 8, WEEK_PLAN, 9, WEEK2_PLAN, 10, MON_PLAN)) AS PLAN  
                     , SUM(DECODE(SEQ, 1, 0, 2, 0, 3, 0, 4, 0, 5, SHP_TODAY, 6, SHP_D1, 7, SHP_D2, 8, SHP_WEEK, 9, SHP2_WEEK, 10, SHP_MONTH)) AS SHP 
                     , SUM(DECODE(SEQ, 1, 0, 2, 0, 3, 0, 4, 0, 5, D0_DEF, 6, D1_DEF, 7, D2_DEF, 8, WEEK_DEF, 9, WEEK2_DEF, 10, MONTH_DEF)) AS DEF 
                     , SUM(DECODE(SEQ, 1, WIP_QTY, 2, RES_CNT, 3, RES_CAPA, 4, ASSY_END_QTY, 5, D0_SUM_QUANTITY, 6, D1_SUM_QUANTITY, 7, D2_SUM_QUANTITY, 8, WEEK_SUM_QUANTITY, 9, WEEK2_SUM_QUANTITY, 10, MONTH_SUM_QUANTITY)) AS SUM_DEF 
                     , MAX(DECODE(SEQ, 1, 0, 2, 0, 3, 0, 4, 0, WIP_TTL)) AS WIP_TTL 
                  FROM ( 
                        SELECT MAT_GRP_1, MAT_GRP_9, MAT_GRP_10, MAT_GRP_6, MAT_CMF_11,  ' ', CONV_MAT_ID,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', OPER_GRP_1 
                             , SUM(NVL(D0_PLAN,0)) AS D0_PLAN, SUM(NVL(SHP_TODAY,0)) AS SHP_TODAY, SUM(NVL(D0_DEF,0)) AS D0_DEF 
                             , SUM(NVL(D1_PLAN,0)) AS D1_PLAN, SUM(NVL(SHP_D1,0)) AS SHP_D1, SUM(NVL(D1_DEF,0)) AS D1_DEF 
                             , SUM(NVL(D2_PLAN,0)) AS D2_PLAN, SUM(NVL(SHP_D2,0)) AS SHP_D2, SUM(NVL(D2_DEF,0)) AS D2_DEF 
                             , SUM(NVL(WEEK_PLAN,0)) AS WEEK_PLAN, SUM(NVL(SHP_WEEK,0)) AS SHP_WEEK, SUM(NVL(WEEK_DEF,0)) AS WEEK_DEF 
                             , SUM(NVL(WEEK2_PLAN,0)) AS WEEK2_PLAN, SUM(NVL(SHP2_WEEK,0)) AS SHP2_WEEK, SUM(NVL(WEEK2_DEF,0)) AS WEEK2_DEF 
                             , SUM(NVL(MON_PLAN,0)) AS MON_PLAN, SUM(NVL(SHP_MONTH,0)) AS SHP_MONTH, SUM(NVL(MONTH_DEF,0)) AS MONTH_DEF 
                             , SUM(NVL(ASSY_END_QTY,0)) AS ASSY_END_QTY 
                             , SUM(NVL(WIP_QTY,0)) AS WIP_QTY 
                             , SUM(SUM(WIP_QTY)) OVER(PARTITION BY MAT_GRP_1, MAT_GRP_9, MAT_GRP_10, MAT_GRP_6, MAT_CMF_11,  ' ', CONV_MAT_ID,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ') AS WIP_TTL 
                             , SUM(RES_CNT) AS RES_CNT 
                             , SUM(RES_CAPA) AS RES_CAPA 
                             , SUM(NVL(D0_DEF-WIP_SUM_QUANTITY+WIP_QTY,0)) AS D0_SUM_QUANTITY 
                             , SUM(NVL(D1_DEF-WIP_SUM_QUANTITY+WIP_QTY,0)) AS D1_SUM_QUANTITY 
                             , SUM(NVL(D2_DEF-WIP_SUM_QUANTITY+WIP_QTY,0)) AS D2_SUM_QUANTITY 
                             , SUM(NVL(WEEK_DEF-WIP_SUM_QUANTITY+WIP_QTY,0)) AS WEEK_SUM_QUANTITY 
                             , SUM(NVL(WEEK2_DEF-WIP_SUM_QUANTITY+WIP_QTY,0)) AS WEEK2_SUM_QUANTITY 
                             , SUM(NVL(MONTH_DEF-WIP_SUM_QUANTITY+WIP_QTY,0)) AS MONTH_SUM_QUANTITY 
                          FROM ( 
                                SELECT MAT.MAT_GRP_1, MAT.MAT_GRP_2, MAT.MAT_GRP_4, MAT.MAT_GRP_5, MAT.MAT_GRP_6, MAT.MAT_GRP_7, MAT.MAT_GRP_8, MAT.MAT_GRP_9, MAT.MAT_GRP_10, MAT.MAT_CMF_10, MAT.MAT_CMF_7, MAT.MAT_CMF_8, MAT.MAT_CMF_11, MAT.MAT_ID, MAT.CONV_MAT_ID, MAT.OPER_GRP_1 
                                     , A.D0_PLAN, A.SHP_TODAY, A.D0_DEF 
                                     , A.D1_PLAN, A.SHP_D1, A.D1_DEF 
                                     , A.D2_PLAN, A.SHP_D2, A.D2_DEF 
                                     , A.WEEK_PLAN, A.SHP_WEEK, A.WEEK_DEF 
                                     , A.WEEK2_PLAN, A.SHP2_WEEK, A.WEEK2_DEF 
                                     , A.MON_PLAN, A.SHP_MONTH, A.MONTH_DEF 
                                     , A.D0_ORI_PLAN 
                                     , NVL(B.ASSY_END_QTY,0) AS ASSY_END_QTY 
                                     , MAX(NVL(B.ASSY_END_QTY,0)) OVER(PARTITION BY MAT.MAT_GRP_1, MAT.MAT_GRP_9, MAT.MAT_GRP_10, MAT.MAT_GRP_6, MAT.MAT_CMF_11,  ' ', CONV_MAT_ID,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ') AS CHK_ASSY_END_QTY 
                                     , NVL(WIP.QTY,0) AS WIP_QTY 
                                     , RES_CNT 
                                     , RES_CAPA 
                                     , SUM(NVL(WIP.QTY,0)) OVER(PARTITION BY A.MAT_ID ORDER BY MAT.MAT_ID, DECODE(MAT.OPER_GRP_1, 'HMK3A', 1, 'QC_GATE', 2, 'PVI', 3, 'AVI', 4, 'SIG', 5, 'SBA', 6, 'TIN', 7, 'TRIM', 8, 'MK', 9, 'CURE', 10, 'MOLD', 11, 'GATE', 12 
                                                                                                                                , 'WB9', 13, 'DA9', 14, 'WB8', 15, 'DA8', 16, 'WB7', 17, 'DA7', 18, 'WB6', 19, 'DA6', 20, 'WB5', 21, 'DA5', 22, 'WB4', 23, 'DA4', 24 
                                                                                                                                , 'WB3', 25, 'DA3', 26, 'WB2', 27, 'DA2', 28, 'WB1', 29, 'DA1', 30, 'SP', 31, 'SAW', 32, 'BG', 33, 'HMK2A',34, 35)) AS WIP_SUM_QUANTITY 
                                  FROM ( 
                                        SELECT MAT_GRP_1, MAT_GRP_2, MAT_GRP_4, MAT_GRP_5, MAT_GRP_6, MAT_GRP_7, MAT_GRP_8, MAT_GRP_9, MAT_GRP_10, MAT_CMF_10, MAT_CMF_7, MAT_CMF_8, MAT_CMF_11, MAT_ID, OPER_GRP_1 
                                             , CASE WHEN MAT_GRP_1 = 'SE' AND MAT_GRP_9 = 'MEMORY' THEN 'SEK_________-___' || SUBSTR(MAT_ID, -3) 
                                                    WHEN MAT_GRP_1 = 'HX' THEN MAT_CMF_10 
                                                    ELSE MAT_ID 
                                                END CONV_MAT_ID 
                                          FROM ( 
                                                SELECT * 
                                                  FROM (
                                                        SELECT A.* 
                                                          FROM MWIPMATDEF A
                                                         WHERE 1=1 
                                                           AND FACTORY = 'HMVA2' 
                                                           AND DELETE_FLAG = ' ' 
                                                           AND MAT_TYPE = 'FG' 
                                                           AND MAT_ID LIKE '%' 
                                                           AND MAT_GRP_10 NOT LIKE 'COB%' 
                                                       ) 
                                               ) 
                                             , ( 
                                                SELECT DECODE(LEVEL, 1, 'HMK3A', 2, 'QC_GATE', 3, 'PVI', 4, 'AVI', 5, 'SIG', 6, 'SBA', 7, 'TIN', 8, 'TRIM', 9, 'MK', 10, 'CURE', 11, 'MOLD', 12, 'GATE' 
                                                                   , 13, 'WB9', 14, 'DA9', 15, 'WB8', 16, 'DA8', 17, 'WB7', 18, 'DA7', 19, 'WB6', 20, 'DA6', 21, 'WB5', 22, 'DA5', 23, 'WB4', 24, 'DA4'
                                                                   , 25, 'WB3', 26, 'DA3', 27, 'WB2', 28, 'DA2', 29, 'WB1', 30, 'DA1', 31, 'SP', 32, 'SAW', 33, 'BG', 34, 'HMK2A' 
                                                             ) OPER_GRP_1 
                                                  FROM DUAL CONNECT BY LEVEL <= 34 
                                               ) 
                                       ) MAT 
                                     , ( 
                                        SELECT MAT.MAT_ID 
                                             , SUM(NVL(D0_PLAN, 0) + (NVL(WEEK1_TTL, 0) - NVL(SHP_WEEK_TTL, 0))) AS D0_PLAN 
                                             , SUM(NVL(D0_PLAN, 0)) AS D0_ORI_PLAN 
                                             , SUM(NVL(SHP_TODAY, 0)) AS SHP_TODAY 
                                             , SUM(NVL(D0_PLAN, 0) + (NVL(WEEK1_TTL, 0) - NVL(SHP_WEEK_TTL, 0)) - NVL(SHP_TODAY, 0)) AS D0_DEF 
                                             , SUM(NVL(D1_PLAN, 0)) AS D1_PLAN 
                                             , 0 AS SHP_D1 
                                             , SUM(NVL(D1_PLAN, 0) + NVL(D0_PLAN, 0) + (NVL(WEEK1_TTL, 0) - NVL(SHP_WEEK_TTL, 0)) - NVL(SHP_TODAY, 0)) AS D1_DEF 
                                             , SUM(NVL(D2_PLAN, 0)) AS D2_PLAN 
                                             , 0 AS SHP_D2 
                                             , SUM(NVL(D2_PLAN, 0) + NVL(D1_PLAN, 0) + NVL(D0_PLAN, 0) + (NVL(WEEK1_TTL, 0) - NVL(SHP_WEEK_TTL, 0)) - NVL(SHP_TODAY, 0)) AS D2_DEF 
                                             , SUM(NVL(WEEK1_PLAN, 0)) AS WEEK_PLAN 
                                             , SUM(NVL(SHP_WEEK, 0)) AS SHP_WEEK 
                                             , SUM(NVL(WEEK1_PLAN, 0) - NVL(SHP_WEEK, 0)) AS WEEK_DEF 
                                             , SUM(NVL(WEEK2_PLAN, 0)) AS WEEK2_PLAN 
                                             , 0 AS SHP2_WEEK 
                                             , SUM(NVL(WEEK2_PLAN, 0) + NVL(WEEK1_PLAN, 0) - NVL(SHP_WEEK, 0)) AS WEEK2_DEF 
                                             , SUM(NVL(CASE WHEN MAT.MAT_GRP_3 IN ('COB') THEN ROUND(MON.RESV_FIELD1/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0) 
                                                    ELSE MON.RESV_FIELD1 
                                                END,0)) MON_PLAN 
                                             , SUM(NVL(SHP_MONTH, 0)) AS SHP_MONTH 
                                             , SUM(NVL(CASE WHEN MAT.MAT_GRP_3 IN ('COB') THEN ROUND(NVL(MON.RESV_FIELD1,0)/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0)-NVL(SHP_MONTH, 0) 
                                                    ELSE NVL(MON.RESV_FIELD1, 0)-NVL(SHP_MONTH, 0) 
                                                END,0)) MONTH_DEF 
                                          FROM MWIPMATDEF MAT 
                                             , ( 
                                                SELECT FACTORY, MAT_ID 
                                                     , SUM(CASE WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 1 THEN D0_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 2 THEN D0_QTY + D1_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 3 THEN D0_QTY + D1_QTY + D2_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 4 THEN D0_QTY + D1_QTY + D2_QTY + D3_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 5 THEN D0_QTY + D1_QTY + D2_QTY + D3_QTY + D4_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 6 THEN D0_QTY + D1_QTY + D2_QTY + D3_QTY + D4_QTY + D5_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 3 THEN D0_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 4 THEN D0_QTY + D1_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 5 THEN D0_QTY + D1_QTY + D2_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 6 THEN D0_QTY + D1_QTY + D2_QTY + D3_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 7 THEN D0_QTY + D1_QTY + D2_QTY + D3_QTY + D4_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 1 THEN D0_QTY + D1_QTY + D2_QTY + D3_QTY + D4_QTY + D5_QTY 
                                                                ELSE 0 
                                                           END) AS WEEK1_TTL 
                                                     , SUM(W1_QTY) AS WEEK1_PLAN 
                                                     , SUM(W2_QTY) AS WEEK2_PLAN 
                                                     , SUM(NVL(W1_QTY,0) + NVL(W2_QTY,0)) AS WEEK_TTL 
                                                     , SUM(CASE WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 7 THEN D0_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 1 THEN D1_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 2 THEN D2_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 3 THEN D3_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 4 THEN D4_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 5 THEN D5_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 6 THEN D6_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 2 THEN D0_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 3 THEN D1_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 4 THEN D2_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 5 THEN D3_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 6 THEN D4_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 7 THEN D5_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 1 THEN D6_QTY 
                                                                ELSE 0 
                                                           END) AS D0_PLAN 
                                                     , SUM(CASE WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 7 THEN D1_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 1 THEN D2_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 2 THEN D3_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 3 THEN D4_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 4 THEN D5_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 5 THEN D6_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 6 THEN D7_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 2 THEN D1_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 3 THEN D2_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 4 THEN D3_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 5 THEN D4_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 6 THEN D5_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 7 THEN D6_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 1 THEN D7_QTY 
                                                                ELSE 0 
                                                           END) AS D1_PLAN 
                                                     , SUM(CASE WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 7 THEN D2_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 1 THEN D3_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 2 THEN D4_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 3 THEN D5_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 4 THEN D6_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 5 THEN D7_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 6 THEN D8_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 2 THEN D2_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 3 THEN D3_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 4 THEN D4_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 5 THEN D5_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 6 THEN D6_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 7 THEN D7_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'D') = 1 THEN D8_QTY 
                                                                ELSE 0 
                                                           END) AS D2_PLAN 
                                                  FROM ( 
                                                        SELECT FACTORY, MAT_ID, 'OTD' AS CALENDAR_ID 
                                                             , SUM(DECODE(PLAN_WEEK, '202030', D0_QTY, 0)) AS D0_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202030', D1_QTY, 0)) AS D1_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202030', D2_QTY, 0)) AS D2_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202030', D3_QTY, 0)) AS D3_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202030', D4_QTY, 0)) AS D4_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202030', D5_QTY, 0)) AS D5_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202030', D6_QTY, 0)) AS D6_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202031', D0_QTY, 0)) AS D7_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202031', D1_QTY, 0)) AS D8_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202031', D2_QTY, 0)) AS D9_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202031', D3_QTY, 0)) AS D10_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202031', D4_QTY, 0)) AS D11_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202031', D5_QTY, 0)) AS D12_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202031', D6_QTY, 0)) AS D13_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202030', WW_QTY, 0)) AS W1_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202031', WW_QTY, 0)) AS W2_QTY  
                                                          FROM RWIPPLNWEK  
                                                         WHERE 1=1  
                                                           AND FACTORY = 'HMVA2'  
                                                           AND GUBUN = '3'  
                                                           AND MAT_ID NOT LIKE 'SES%' 
                                                           AND PLAN_WEEK IN ('202030','202031') 
                                                         GROUP BY FACTORY, MAT_ID  
                                                         UNION ALL 
                                                        SELECT FACTORY, MAT_ID, 'SE' AS CALENDAR_ID  
                                                             , SUM(DECODE(PLAN_WEEK, '202030', D0_QTY, 0)) AS D0_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202030', D1_QTY, 0)) AS D1_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202030', D2_QTY, 0)) AS D2_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202030', D3_QTY, 0)) AS D3_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202030', D4_QTY, 0)) AS D4_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202030', D5_QTY, 0)) AS D5_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202030', D6_QTY, 0)) AS D6_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202031', D0_QTY, 0)) AS D7_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202031', D1_QTY, 0)) AS D8_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202031', D2_QTY, 0)) AS D9_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202031', D3_QTY, 0)) AS D10_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202031', D4_QTY, 0)) AS D11_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202031', D5_QTY, 0)) AS D12_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202031', D6_QTY, 0)) AS D13_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202030', WW_QTY, 0)) AS W1_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202031', WW_QTY, 0)) AS W2_QTY  
                                                          FROM RWIPPLNWEK  
                                                         WHERE 1=1  
                                                           AND FACTORY = 'HMVA2'  
                                                           AND GUBUN = '3'  
                                                           AND MAT_ID LIKE 'SES%' 
                                                           AND PLAN_WEEK IN ('202030','202031') 
                                                         GROUP BY FACTORY, MAT_ID  
                                                       )  
                                                 GROUP BY FACTORY, MAT_ID  
                                               ) PLN 
                                             , (  
                                                SELECT FACTORY,MAT_ID, RESV_FIELD1  
                                                  FROM (  
                                                        SELECT FACTORY, MAT_ID, SUM(RESV_FIELD1) AS RESV_FIELD1   
                                                          FROM (  
                                                                SELECT FACTORY, MAT_ID, SUM(TO_NUMBER(DECODE(RESV_FIELD1,' ',0,RESV_FIELD1))) AS RESV_FIELD1  
                                                                  FROM CWIPPLNMON  
                                                                 WHERE 1=1  
                                                                   AND FACTORY = 'HMVA2'  
                                                                   AND PLAN_MONTH = '202007' 
                                                                 GROUP BY FACTORY, MAT_ID 
                                                               )  
                                                         GROUP BY FACTORY, MAT_ID 
                                                       ) 
                                               ) MON 
                                             , (  
                                                SELECT MAT_ID  
                                                     , SUM(CASE WHEN SHP_QTY_1 > 0 AND WORK_DATE = '20200721' THEN NVL(SHP_QTY_1, 0) ELSE 0 END) AS SHP_TODAY  
                                                     , SUM(CASE WHEN SHP_QTY_1 > 0 AND MAT_ID LIKE 'SES%' AND WORK_DATE BETWEEN '20200720' AND '20200721' THEN NVL(SHP_QTY_1, 0)  
                                                                WHEN SHP_QTY_1 > 0 AND MAT_ID NOT LIKE 'SES%' AND WORK_DATE BETWEEN '20200718' AND '20200721' THEN NVL(SHP_QTY_1, 0) 
                                                                ELSE 0 END) AS SHP_WEEK  
                                                     , SUM(CASE WHEN SHP_QTY_1 > 0 AND MAT_ID LIKE 'SES%' AND WORK_DATE BETWEEN '20200720' AND '20200720' THEN NVL(SHP_QTY_1, 0)  
                                                                WHEN SHP_QTY_1 > 0 AND MAT_ID NOT LIKE 'SES%' AND WORK_DATE BETWEEN '20200718' AND '20200720' THEN NVL(SHP_QTY_1, 0)  
                                                                ELSE 0 END) AS SHP_WEEK_TTL  
                                                     , SUM(CASE WHEN WORK_DATE BETWEEN '20200701' AND '20200721' THEN NVL(SHP_QTY_1, 0) END) AS SHP_MONTH  
                                                  FROM VSUMWIPOUT 
                                                 WHERE 1=1  
                                                   AND FACTORY  = 'HMVA2'  
                                                   AND LOT_TYPE = 'W'  
                                                   AND CM_KEY_2 = 'PROD'  
                                                   AND CM_KEY_3 LIKE 'P%'
                                                   AND MAT_ID NOT LIKE 'HX%'  
                                                   AND WORK_DATE BETWEEN LEAST('20200701', '20200718', '20200720') AND '20200721' 
                                                 GROUP BY MAT_ID  
                                                 UNION ALL  
                                                SELECT MAT_ID  
                                                     , SUM(CASE WHEN SHP_QTY_1 > 0 AND WORK_DATE = '20200721' THEN NVL(SHP_QTY_1, 0) ELSE 0 END) AS SHP_TODAY  
                                                     , SUM(CASE WHEN SHP_QTY_1 > 0 AND WORK_DATE BETWEEN '20200718' AND '20200721' THEN NVL(SHP_QTY_1, 0) ELSE 0 END) AS SHP_WEEK  
                                                     , SUM(CASE WHEN SHP_QTY_1 > 0 AND WORK_DATE BETWEEN '20200718' AND '20200720' THEN NVL(SHP_QTY_1, 0) ELSE 0 END) AS SHP_WEEK_TTL  
                                                     , SUM(CASE WHEN WORK_DATE BETWEEN '20200701' AND '20200721' THEN NVL(SHP_QTY_1, 0) END) AS SHP_MONTH  
                                                  FROM VSUMWIPOUT_06 
                                                 WHERE 1=1  
                                                   AND FACTORY  = 'HMVA2'  
                                                   AND LOT_TYPE = 'W'  
                                                   AND CM_KEY_2 = 'PROD'  
                                                   AND CM_KEY_3 LIKE 'P%'
                                                   AND MAT_ID LIKE 'HX%'  
                                                   AND WORK_DATE BETWEEN '20200701' AND '20200721' 
                                                 GROUP BY MAT_ID 
                                               ) SHP 
                                         WHERE 1=1 
                                           AND MAT.FACTORY = 'HMVA2' 
                                           AND MAT.MAT_TYPE = 'FG' 
                                           AND MAT.DELETE_FLAG = ' ' 
                                           AND MAT.MAT_ID = PLN.MAT_ID(+) 
                                           AND MAT.MAT_ID = MON.MAT_ID(+) 
                                           AND MAT.MAT_ID = SHP.MAT_ID(+) 
                                         GROUP BY MAT.MAT_ID 
                                         ORDER BY MAT.MAT_ID 
                                       ) A 
                                     , ( 
                                        SELECT MAT_ID, OPER_GRP_1 
                                             , SUM(ASSY_END_QTY) AS ASSY_END_QTY 
                                          FROM ( 
                                                SELECT B.MAT_ID 
                                                     , CASE WHEN OPER IN ('A0000', 'A000N') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'HMK2A' 
                                                            WHEN OPER IN ('A0040') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'BG' 
                                                            WHEN OPER IN ('A0200', 'A0230') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'SAW' 
                                                            WHEN OPER IN ('A0400', 'A0401', 'A0333') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'DA1' 
                                                            WHEN OPER IN ('A0402') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'DA2' 
                                                            WHEN OPER IN ('A0403') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'DA3' 
                                                            WHEN OPER IN ('A0404') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'DA4' 
                                                            WHEN OPER IN ('A0405') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'DA5' 
                                                            WHEN OPER IN ('A0406') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'DA6' 
                                                            WHEN OPER IN ('A0407') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'DA7' 
                                                            WHEN OPER IN ('A0408') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'DA8' 
                                                            WHEN OPER IN ('A0409') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'DA9' 
                                                            WHEN OPER IN ('A0600','A0601') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'WB1' 
                                                            WHEN OPER IN ('A0602') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'WB2' 
                                                            WHEN OPER IN ('A0603') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'WB3' 
                                                            WHEN OPER IN ('A0604') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'WB4' 
                                                            WHEN OPER IN ('A0605') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'WB5' 
                                                            WHEN OPER IN ('A0606') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'WB6' 
                                                            WHEN OPER IN ('A0607') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'WB7' 
                                                            WHEN OPER IN ('A0608') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'WB8' 
                                                            WHEN OPER IN ('A0609') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'WB9' 
                                                            WHEN OPER IN ('A0800', 'A0801', 'A0802', 'A0803', 'A0804', 'A0805', 'A0806', 'A0807', 'A0808', 'A0809') AND MAT_GRP_5 IN ('-', 'Merge') THEN 'GATE' 
                                                            WHEN OPER IN ('A1000', 'A0910') THEN 'MOLD' 
                                                            WHEN OPER IN ('A1100') THEN 'CURE' 
                                                            WHEN OPER IN ('A1150', 'A1500') THEN 'MK' 
                                                            WHEN OPER IN ('A1200') THEN 'TRIM' 
                                                            WHEN OPER IN ('A1450') THEN 'TIN' 
                                                            WHEN OPER IN ('A1300') THEN 'SBA' 
                                                            WHEN OPER IN ('A1750', 'A1800', 'A1900', 'A1825') THEN 'SIG' 
                                                            WHEN OPER IN ('A2000') THEN 'AVI' 
                                                            WHEN OPER IN ('A2050') THEN 'PVI' 
                                                            WHEN OPER IN ('A2100') THEN 'QC_GATE' 
                                                            WHEN OPER IN ('AZ010') THEN 'HMK3A' 
                                                            ELSE ' ' 
                                                        END OPER_GRP_1 
                                                     , (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END) ASSY_END_QTY 
                                                  FROM ( 
                                                        SELECT FACTORY, MAT_ID, OPER, LOT_TYPE, WORK_DATE, CM_KEY_3 
                                                             , SUM(END_LOT) AS END_LOT 
                                                             , SUM(END_QTY_1) AS END_QTY_1 
                                                             , SUM(END_QTY_2) AS END_QTY_2 
                                                             , SUM(CASE WHEN SHIP_QTY_1 > 0 THEN SHIP_QTY_1 ELSE 0 END) AS SHIP_QTY_1 
                                                             , SUM(CASE WHEN SHIP_QTY_2 > 0 THEN SHIP_QTY_2 ELSE 0 END) AS SHIP_QTY_2 
                                                          FROM ( 
                                                                SELECT FACTORY, MAT_ID, OPER, LOT_TYPE, WORK_DATE, CM_KEY_3 
                                                                     , DECODE(SUBSTR(OPER,2,4),'0000',SUM(S1_OPER_IN_LOT+S2_OPER_IN_LOT+S3_OPER_IN_LOT),SUM(S1_END_LOT+S2_END_LOT+S3_END_LOT)) END_LOT 
                                                                     , DECODE(SUBSTR(OPER,2,4),'0000',SUM(S1_OPER_IN_QTY_1+S2_OPER_IN_QTY_1+S3_OPER_IN_QTY_1),SUM(S1_END_QTY_1+S2_END_QTY_1+S3_END_QTY_1+S1_END_RWK_QTY_1 + S2_END_RWK_QTY_1 + S3_END_RWK_QTY_1)) END_QTY_1 
                                                                     , DECODE(SUBSTR(OPER,2,4),'0000',SUM(S1_OPER_IN_QTY_2+S2_OPER_IN_QTY_2+S3_OPER_IN_QTY_2),SUM(S1_END_QTY_2+S2_END_QTY_2+S3_END_QTY_2+S1_END_RWK_QTY_2 + S2_END_RWK_QTY_2 + S3_END_RWK_QTY_2)) END_QTY_2 
                                                                     , 0 SHIP_QTY_1 
                                                                     , 0 SHIP_QTY_2 
                                                                  FROM RSUMWIPMOV 
                                                                 WHERE FACTORY = 'HMVA2' 
                                                                   AND OPER NOT IN ('AZ010') 
                                                                   AND MAT_ID NOT LIKE 'HX%' 
                                                                 GROUP BY FACTORY, MAT_ID, OPER, LOT_TYPE, WORK_DATE, CM_KEY_3 
                                                                 UNION ALL 
                                                                SELECT FACTORY, MAT_ID 
                                                                     , 'AZ010' AS OPER 
                                                                     , LOT_TYPE, WORK_DATE, CM_KEY_3 
                                                                     , 0 END_LOT 
                                                                     , 0 END_QTY_1 
                                                                     , 0 END_QTY_2 
                                                                     , SUM(SHP_QTY_1) SHIP_QTY_1 
                                                                     , SUM(SHP_QTY_2) SHIP_QTY_2 
                                                                  FROM VSUMWIPOUT 
                                                                 WHERE FACTORY = 'HMVA2' 
                                                                   AND MAT_ID NOT LIKE 'HX%' 
                                                                 GROUP BY FACTORY, MAT_ID, LOT_TYPE, WORK_DATE, CM_KEY_3 
                                                                 UNION ALL 
                                                                SELECT FACTORY, MAT_ID, OPER, LOT_TYPE, WORK_DATE, CM_KEY_3 
                                                                     , DECODE(SUBSTR(OPER,2,4),'0000',SUM(S1_OPER_IN_LOT+S2_OPER_IN_LOT+S3_OPER_IN_LOT),SUM(S1_END_LOT+S2_END_LOT+S3_END_LOT)) END_LOT 
                                                                     , DECODE(SUBSTR(OPER,2,4),'0000',SUM(S1_OPER_IN_QTY_1+S2_OPER_IN_QTY_1+S3_OPER_IN_QTY_1),SUM(S1_END_QTY_1+S2_END_QTY_1+S3_END_QTY_1+S1_END_RWK_QTY_1 + S2_END_RWK_QTY_1 + S3_END_RWK_QTY_1)) END_QTY_1 
                                                                     , DECODE(SUBSTR(OPER,2,4),'0000',SUM(S1_OPER_IN_QTY_2+S2_OPER_IN_QTY_2+S3_OPER_IN_QTY_2),SUM(S1_END_QTY_2+S2_END_QTY_2+S3_END_QTY_2+S1_END_RWK_QTY_2 + S2_END_RWK_QTY_2 + S3_END_RWK_QTY_2)) END_QTY_2 
                                                                     , 0 SHIP_QTY_1 
                                                                     , 0 SHIP_QTY_2 
                                                                  FROM CSUMWIPMOV 
                                                                 WHERE FACTORY = 'HMVA2' 
                                                                   AND OPER NOT IN ('AZ010') 
                                                                   AND MAT_ID LIKE 'HX%' 
                                                                 GROUP BY FACTORY, MAT_ID, OPER, LOT_TYPE, WORK_DATE, CM_KEY_3 
                                                                 UNION ALL 
                                                                SELECT FACTORY, MAT_ID 
                                                                     , 'AZ010' AS OPER 
                                                                     , LOT_TYPE, WORK_DATE, CM_KEY_3 
                                                                     , 0 END_LOT 
                                                                     , 0 END_QTY_1 
                                                                     , 0 END_QTY_2 
                                                                     , SUM(SHP_QTY_1) SHIP_QTY_1 
                                                                     , SUM(SHP_QTY_2) SHIP_QTY_2 
                                                                  FROM VSUMWIPOUT_06 
                                                                 WHERE FACTORY = 'HMVA2' 
                                                                   AND MAT_ID LIKE 'HX%' 
                                                                 GROUP BY FACTORY, MAT_ID, LOT_TYPE, WORK_DATE, CM_KEY_3 
                                                               ) 
                                                         GROUP BY FACTORY, MAT_ID, OPER, LOT_TYPE, WORK_DATE, CM_KEY_3 
                                                       ) A 
                                                     , MWIPMATDEF B 
                                                 WHERE 1=1 
                                                   AND A.FACTORY  = 'HMVA2' 
                                                   AND A.FACTORY = B.FACTORY 
                                                   AND A.MAT_ID = B.MAT_ID 
                                                   AND B.MAT_TYPE = 'FG' 
                                                   AND A.MAT_ID LIKE '%' 
                                                   AND A.CM_KEY_3 LIKE 'P%'
                                                   AND A.OPER NOT IN ('00001','00002') 
                                                   AND A.WORK_DATE = '20200721' 
                                                 ) 
                                         GROUP BY MAT_ID, OPER_GRP_1 
                                        HAVING SUM(ASSY_END_QTY) > 0 
                                       ) B 
                                     , ( 
                                        SELECT MAT_ID, OPER_GRP_1, SUM(NVL(QTY,0)) QTY 
                                          FROM (  
                                                SELECT MAT_ID 
                                                     , QTY 
                                                     , CASE WHEN OPER_GRP_8 = 'HMK2A' THEN 'HMK2A' 
                                                            WHEN OPER_GRP_8 = 'B/G' THEN 'BG' 
                                                            WHEN OPER_GRP_8 = 'SAW' THEN 'SAW' 
                                                            WHEN OPER_GRP_8 = 'S/P' THEN 'SP' 
                                                            WHEN OPER_GRP_8 IN ('D/A1', 'D/A1 CURE') THEN 'DA1' 
                                                            WHEN OPER_GRP_8 IN ('D/A2', 'D/A2 CURE') THEN 'DA2' 
                                                            WHEN OPER_GRP_8 IN ('D/A3', 'D/A3 CURE') THEN 'DA3' 
                                                            WHEN OPER_GRP_8 IN ('D/A4', 'D/A4 CURE') THEN 'DA4' 
                                                            WHEN OPER_GRP_8 IN ('D/A5', 'D/A5 CURE') THEN 'DA5' 
                                                            WHEN OPER_GRP_8 IN ('D/A6', 'D/A6 CURE') THEN 'DA6' 
                                                            WHEN OPER_GRP_8 IN ('D/A7', 'D/A7 CURE') THEN 'DA7' 
                                                            WHEN OPER_GRP_8 IN ('D/A8', 'D/A8 CURE') THEN 'DA8' 
                                                            WHEN OPER_GRP_8 IN ('D/A9', 'D/A9 CURE') THEN 'DA9' 
                                                            WHEN OPER_GRP_8 = 'W/B1' THEN 'WB1' 
                                                            WHEN OPER_GRP_8 = 'W/B2' THEN 'WB2' 
                                                            WHEN OPER_GRP_8 = 'W/B3' THEN 'WB3' 
                                                            WHEN OPER_GRP_8 = 'W/B4' THEN 'WB4' 
                                                            WHEN OPER_GRP_8 = 'W/B5' THEN 'WB5' 
                                                            WHEN OPER_GRP_8 = 'W/B6' THEN 'WB6' 
                                                            WHEN OPER_GRP_8 = 'W/B7' THEN 'WB7' 
                                                            WHEN OPER_GRP_8 = 'W/B8' THEN 'WB8' 
                                                            WHEN OPER_GRP_8 = 'W/B9' THEN 'WB9' 
                                                            WHEN OPER_GRP_8 = 'GATE' AND MAT_GRP_5 = '-' THEN 'GATE' 
                                                            WHEN OPER_GRP_8 = 'GATE' AND MAT_GRP_1 = 'SE' AND MAT_GRP_5 = 'Merge' THEN 'GATE' 
                                                            WHEN OPER_GRP_8 = 'GATE' AND MAT_GRP_1 = 'HX' THEN 'GATE' 
                                                            WHEN OPER_GRP_8 = 'GATE' AND MAT_GRP_1 NOT IN ('SE','HX') AND SUBSTR(MAT_GRP_4,-1) = SUBSTR(OPER, -1) THEN 'GATE' 
                                                            WHEN OPER_GRP_8 = 'MOLD' THEN 'MOLD' 
                                                            WHEN OPER_GRP_8 = 'CURE' THEN 'CURE' 
                                                            WHEN OPER_GRP_8 = 'M/K' THEN 'MK' 
                                                            WHEN OPER_GRP_8 = 'TRIM' THEN 'TRIM' 
                                                            WHEN OPER_GRP_8 = 'TIN' THEN 'TIN' 
                                                            WHEN OPER_GRP_8 = 'S/B/A' THEN 'SBA' 
                                                            WHEN OPER_GRP_8 = 'SIG' THEN 'SIG' 
                                                            WHEN OPER_GRP_8 = 'AVI' THEN 'AVI' 
                                                            WHEN OPER_GRP_8 = 'V/I' THEN 'PVI' 
                                                            WHEN OPER_GRP_8 = 'QC GATE' THEN 'QC_GATE' 
                                                            WHEN OPER_GRP_8 = 'HMK3A' THEN 'HMK3A' 
                                                            ELSE ' ' 
                                                        END OPER_GRP_1 
                                                  FROM ( 
                                                        SELECT MAT_ID, OPER, OPER_GRP_8, MAT_GRP_1, MAT_GRP_4, MAT_GRP_5, MAT_GRP_10 
                                                             , CASE WHEN MAT_GRP_1 = 'HX' AND HX_COMP_MIN IS NOT NULL
                                                                         THEN (CASE WHEN HX_COMP_MIN <> HX_COMP_MAX AND OPER > HX_COMP_MIN AND OPER <= HX_COMP_MAX THEN QTY_1 / NVL(COMP_CNT / 2,1)
                                                                         WHEN OPER <= HX_COMP_MAX THEN QTY_1 / NVL(COMP_CNT,1)
                                                                         ELSE QTY_1 END)
                                                                    WHEN OPER <= 'A0395' THEN QTY_1 / NVL(COMP_CNT,1) 
                                                                    ELSE QTY_1 
                                                               END QTY 
                                                          FROM ( 
                                                                SELECT A.MAT_ID, B.OPER, B.OPER_GRP_8, C.MAT_GRP_1, C.MAT_GRP_4, C.MAT_GRP_5, C.MAT_GRP_10 
                                                                     , CASE WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN CASE WHEN MAT_GRP_5 IN ('1st','Merge') OR MAT_GRP_5 LIKE 'Middle%' THEN QTY_1 ELSE 0 END 
                                                                            WHEN MAT_GRP_3 IN ('COB', 'BGN') THEN ROUND(QTY_1/TO_NUMBER(DECODE(MAT_CMF_13, ' ', 1, '-', 1, MAT_CMF_13)),0) 
                                                                            ELSE QTY_1 
                                                                       END AS QTY_1 
                                                                     , COMP_CNT  
                                                                     , HX_COMP_MIN, HX_COMP_MAX 
                                                                  FROM RWIPLOTSTS A   
                                                                     , MWIPOPRDEF B   
                                                                     , VWIPMATDEF C 
                                                                 WHERE 1 = 1  
                                                                   AND A.FACTORY = B.FACTORY 
                                                                   AND A.FACTORY = C.FACTORY 
                                                                   AND A.OPER = B.OPER 
                                                                   AND A.MAT_ID = C.MAT_ID 
                                                                   AND A.FACTORY = 'HMVA2'   
                                                                   AND A.LOT_TYPE = 'W'  
                                                                   AND A.LOT_CMF_5 LIKE 'P%'
                                                                   AND A.LOT_DEL_FLAG = ' '  
                                                                   AND C.MAT_GRP_2 <> '-' 
                                                                   AND C.DELETE_FLAG = ' '  
                                                               ) 
                                                       ) 
                                               ) 
                                         WHERE 1=1 
                                           AND OPER_GRP_1 <> ' ' 
                                         GROUP BY MAT_ID, OPER_GRP_1 
                                        HAVING SUM(NVL(QTY,0)) > 0 
                                       ) WIP 
                                     , ( 
                                        SELECT A.RES_STS_2 AS MAT_ID 
                                             , A.OPER_GRP_1 
                                             , SUM(A.RES_CNT) AS RES_CNT 
                                             , SUM(TRUNC(NVL(NVL(B.UPEH,0) * 24 * A.PERCENT * A.RES_CNT, 0))) AS RES_CAPA 
                                          FROM ( 
                                                SELECT FACTORY, RES_STS_2, RES_STS_8 AS OPER, RES_GRP_6 AS RES_MODEL, RES_GRP_7 AS UPEH_GRP, COUNT(RES_ID) AS RES_CNT 
                                                     , CASE WHEN RES_STS_8 LIKE 'A06%' THEN 0.71
                                                            WHEN RES_STS_8 LIKE 'A04%' THEN 0.68
                                                            WHEN RES_STS_8 = 'A0333' THEN 0.68
                                                            ELSE 0.7
                                                       END PERCENT 
                                                     , CASE WHEN RES_STS_8 IN ('A0040') THEN 'BG' 
                                                            WHEN RES_STS_8 IN ('A0200', 'A0230') THEN 'SAW' 
                                                            WHEN RES_STS_8 IN ('A0400', 'A0401', 'A0333') THEN 'DA1' 
                                                            WHEN RES_STS_8 IN ('A0402') THEN 'DA2' 
                                                            WHEN RES_STS_8 IN ('A0403') THEN 'DA3' 
                                                            WHEN RES_STS_8 IN ('A0404') THEN 'DA4' 
                                                            WHEN RES_STS_8 IN ('A0405') THEN 'DA5' 
                                                            WHEN RES_STS_8 IN ('A0406') THEN 'DA6' 
                                                            WHEN RES_STS_8 IN ('A0407') THEN 'DA7' 
                                                            WHEN RES_STS_8 IN ('A0408') THEN 'DA8' 
                                                            WHEN RES_STS_8 IN ('A0409') THEN 'DA9' 
                                                            WHEN RES_STS_8 IN ('A0600','A0601') THEN 'WB1' 
                                                            WHEN RES_STS_8 IN ('A0602') THEN 'WB2' 
                                                            WHEN RES_STS_8 IN ('A0603') THEN 'WB3' 
                                                            WHEN RES_STS_8 IN ('A0604') THEN 'WB4' 
                                                            WHEN RES_STS_8 IN ('A0605') THEN 'WB5' 
                                                            WHEN RES_STS_8 IN ('A0606') THEN 'WB6' 
                                                            WHEN RES_STS_8 IN ('A0607') THEN 'WB7' 
                                                            WHEN RES_STS_8 IN ('A0608') THEN 'WB8' 
                                                            WHEN RES_STS_8 IN ('A0609') THEN 'WB9' 
                                                            WHEN RES_STS_8 IN ('A0800', 'A0801', 'A0802', 'A0803', 'A0804', 'A0805', 'A0806', 'A0807', 'A0808', 'A0809') THEN 'GATE' 
                                                            WHEN RES_STS_8 IN ('A1000', 'A0910') THEN 'MOLD' 
                                                            WHEN RES_STS_8 IN ('A1100') THEN 'CURE' 
                                                            WHEN RES_STS_8 IN ('A1150', 'A1500') THEN 'MK' 
                                                            WHEN RES_STS_8 IN ('A1200') THEN 'TRIM' 
                                                            WHEN RES_STS_8 IN ('A1450') THEN 'TIN' 
                                                            WHEN RES_STS_8 IN ('A1300') THEN 'SBA' 
                                                            WHEN RES_STS_8 IN ('A1750', 'A1800', 'A1900', 'A1825') THEN 'SIG' 
                                                            WHEN RES_STS_8 IN ('A2000') THEN 'AVI' 
                                                            WHEN RES_STS_8 IN ('A2050') THEN 'PVI' 
                                                            WHEN RES_STS_8 IN ('A2100') THEN 'QC_GATE' 
                                                            ELSE ' ' 
                                                       END OPER_GRP_1 
                                                  FROM MRASRESDEF 
                                                 WHERE 1 = 1  
                                                   AND FACTORY  = 'HMVA2' 
                                                   AND RES_CMF_9 = 'Y' 
                                                   AND RES_CMF_7 = 'Y' 
                                                   AND DELETE_FLAG = ' ' 
                                                   AND RES_TYPE='EQUIPMENT' 
                                                   AND (RES_STS_1 NOT IN ('C200', 'B199') OR RES_UP_DOWN_FLAG = 'U') 
                                                 GROUP BY FACTORY,RES_STS_2,RES_STS_8,RES_GRP_6,RES_GRP_7  
                                               ) A 
                                             , CRASUPHDEF B 
                                         WHERE 1=1 
                                           AND A.FACTORY = B.FACTORY(+) 
                                           AND A.OPER = B.OPER(+) 
                                           AND A.RES_MODEL = B.RES_MODEL(+) 
                                           AND A.UPEH_GRP = B.UPEH_GRP(+) 
                                           AND A.RES_STS_2 = B.MAT_ID(+) 
                                           AND A.FACTORY  = 'HMVA2' 
                                           AND A.OPER NOT IN ('00001','00002') 
                                           AND A.OPER_GRP_1 <> ' ' 
                                         GROUP BY A.RES_STS_2, A.OPER_GRP_1 
                                       ) RES 
                                 WHERE 1=1 
                                   AND MAT.MAT_ID = A.MAT_ID(+) 
                                   AND MAT.MAT_ID = B.MAT_ID(+) 
                                   AND MAT.MAT_ID = WIP.MAT_ID(+) 
                                   AND MAT.MAT_ID = RES.MAT_ID(+) 
                                   AND MAT.OPER_GRP_1 = B.OPER_GRP_1(+) 
                                   AND MAT.OPER_GRP_1 = WIP.OPER_GRP_1(+) 
                                   AND MAT.OPER_GRP_1 = RES.OPER_GRP_1(+) 
                               ) 
                         GROUP BY MAT_GRP_1, MAT_GRP_9, MAT_GRP_10, MAT_GRP_6, MAT_CMF_11,  ' ', CONV_MAT_ID,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', OPER_GRP_1 
                        HAVING ( 
                                SUM(NVL(D0_ORI_PLAN,0))+SUM(NVL(D1_PLAN,0))+SUM(NVL(D2_PLAN,0))+SUM(NVL(WEEK_PLAN,0))+SUM(NVL(WEEK2_PLAN,0))+SUM(NVL(MON_PLAN,0))+SUM(NVL(WIP_QTY,0)) 
                              + SUM(NVL(D0_PLAN,0))+SUM(NVL(SHP_WEEK,0))+SUM(NVL(SHP_MONTH,0))+SUM(NVL(ASSY_END_QTY,0)) 
                               ) > 0 
                      ) 
                    , (SELECT LEVEL AS SEQ FROM DUAL CONNECT BY LEVEL <= 10) 
                 GROUP BY MAT_GRP_1, MAT_GRP_9, MAT_GRP_10, MAT_GRP_6, MAT_CMF_11,  ' ', CONV_MAT_ID,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', OPER_GRP_1, DECODE(SEQ, 1, 'WIP', 2, '설비대수', 3, 'CAPA현황', 4, '당일 실적', 5, 'D0 잔량', 6, 'D1 잔량', 7, 'D2 잔량', 8, '당주 잔량', 9, '차주 잔량', 10, '월간 잔량') 
               ) 
         GROUP BY  MAT_GRP_1, MAT_GRP_9, MAT_GRP_10, MAT_GRP_6, MAT_CMF_11,  ' ', CONV_MAT_ID,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', GUBUN 
       ) A 
 WHERE 1=1 
 GROUP BY MAT_GRP_1, MAT_GRP_9, MAT_GRP_10, MAT_GRP_6, MAT_CMF_11,  ' ', CONV_MAT_ID,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', GUBUN 
 ORDER BY DECODE(MAT_GRP_1, 'SE', 1, 'HX', 2, 'IM', 3, 'FC', 4, 'IG', 5, 6), CUSTOMER, MAJOR, PKG, LD_COUNT, PKG_CODE,  ' ', PRODUCT,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', DECODE(GUBUN, 'WIP', 1, '설비대수', 2, 'CAPA현황', 3, '당일 실적', 4, 'D0 잔량', 5, 'D1 잔량', 6, 'D2 잔량', 7, '당주 잔량', 8, '차주 잔량', 9, '월간 잔량', 10) 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT (SELECT DATA_1 FROM MGCMTBLDAT@RPTTOMES WHERE FACTORY = 'HMVA2' AND TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = MAT_GRP_1) AS CUSTOMER, MAT_GRP_9 AS MAJOR, MAT_GRP_10 AS PKG, MAT_GRP_6 AS LD_COUNT, MAT_CMF_11 AS PKG_CODE,  ' ', CONV_MAT_ID AS PRODUCT,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ' 
     , MAX(DECODE(OPER_GRP_1, 'HMK3A', 'T', '', 'F', 'F')) AS HMK3A 
     , MAX(DECODE(OPER_GRP_1, 'QC_GATE', 'T', '', 'F', 'F')) AS QC_GATE 
     , MAX(DECODE(OPER_GRP_1, 'PVI', 'T', '', 'F', 'F')) AS PVI 
     , MAX(DECODE(OPER_GRP_1, 'AVI', 'T', '', 'F', 'F')) AS AVI 
     , MAX(DECODE(OPER_GRP_1, 'SIG', 'T', '', 'F', 'F')) AS SIG 
     , MAX(DECODE(OPER_GRP_1, 'SBA', 'T', '', 'F', 'F')) AS SBA 
     , MAX(DECODE(OPER_GRP_1, 'TIN', 'T', '', 'F', 'F')) AS TIN 
     , MAX(DECODE(OPER_GRP_1, 'TRIM', 'T', '', 'F', 'F')) AS TRIM 
     , MAX(DECODE(OPER_GRP_1, 'MK', 'T', '', 'F', 'F')) AS MK 
     , MAX(DECODE(OPER_GRP_1, 'CURE', 'T', '', 'F', 'F')) AS CURE 
     , MAX(DECODE(OPER_GRP_1, 'MOLD', 'T', '', 'F', 'F')) AS MOLD 
     , MAX(DECODE(OPER_GRP_1, 'GATE', 'T', '', 'F', 'F')) AS GATE 
     , MAX(DECODE(OPER_GRP_1, 'WB9', 'T', '', 'F', 'F')) AS WB9 
     , MAX(DECODE(OPER_GRP_1, 'DA9', 'T', '', 'F', 'F')) AS DA9 
     , MAX(DECODE(OPER_GRP_1, 'WB8', 'T', '', 'F', 'F')) AS WB8 
     , MAX(DECODE(OPER_GRP_1, 'DA8', 'T', '', 'F', 'F')) AS DA8 
     , MAX(DECODE(OPER_GRP_1, 'WB7', 'T', '', 'F', 'F')) AS WB7 
     , MAX(DECODE(OPER_GRP_1, 'DA7', 'T', '', 'F', 'F')) AS DA7 
     , MAX(DECODE(OPER_GRP_1, 'WB6', 'T', '', 'F', 'F')) AS WB6 
     , MAX(DECODE(OPER_GRP_1, 'DA6', 'T', '', 'F', 'F')) AS DA6 
     , MAX(DECODE(OPER_GRP_1, 'WB5', 'T', '', 'F', 'F')) AS WB5 
     , MAX(DECODE(OPER_GRP_1, 'DA5', 'T', '', 'F', 'F')) AS DA5 
     , MAX(DECODE(OPER_GRP_1, 'WB4', 'T', '', 'F', 'F')) AS WB4 
     , MAX(DECODE(OPER_GRP_1, 'DA4', 'T', '', 'F', 'F')) AS DA4 
     , MAX(DECODE(OPER_GRP_1, 'WB3', 'T', '', 'F', 'F')) AS WB3 
     , MAX(DECODE(OPER_GRP_1, 'DA3', 'T', '', 'F', 'F')) AS DA3  
     , MAX(DECODE(OPER_GRP_1, 'WB2', 'T', '', 'F', 'F')) AS WB2 
     , MAX(DECODE(OPER_GRP_1, 'DA2', 'T', '', 'F', 'F')) AS DA2 
     , MAX(DECODE(OPER_GRP_1, 'WB1', 'T', '', 'F', 'F')) AS WB1 
     , MAX(DECODE(OPER_GRP_1, 'DA1', 'T', '', 'F', 'F')) AS DA1 
     , MAX(DECODE(OPER_GRP_1, 'SP', 'T', '', 'F', 'F')) AS SP 
     , MAX(DECODE(OPER_GRP_1, 'SAW', 'T', '', 'F', 'F')) AS SAW 
     , MAX(DECODE(OPER_GRP_1, 'BG', 'T', '', 'F', 'F')) AS BG 
     , MAX(DECODE(OPER_GRP_1, 'HMK2A','T', '', 'F', 'F')) AS HMK2A 
  FROM ( 
        SELECT MAT.FACTORY, MAT.MAT_GRP_1, MAT.MAT_GRP_9, MAT.MAT_GRP_10, MAT.MAT_GRP_6, MAT.MAT_CMF_11,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT.MAT_ID, MAT.DELETE_FLAG 
             , CASE WHEN MAT.MAT_GRP_1 = 'SE' AND MAT.MAT_GRP_9 = 'MEMORY' THEN 'SEK_________-___' || SUBSTR(MAT.MAT_ID, -3) 
                                                                    WHEN MAT.MAT_GRP_1 = 'HX' THEN MAT.MAT_CMF_10 
                                                                    ELSE MAT_ID 
                                                               END CONV_MAT_ID 
          FROM MWIPMATDEF MAT 
       ) MAT 
     , ( 
        SELECT A.MAT_ID 
                     , CASE WHEN B.OPER IN ('A0400', 'A0401', 'A0333') THEN 'DA1' 
                            WHEN B.OPER IN ('A0402') THEN 'DA2' 
                            WHEN B.OPER IN ('A0403') THEN 'DA3' 
                            WHEN B.OPER IN ('A0404') THEN 'DA4' 
                            WHEN B.OPER IN ('A0405') THEN 'DA5' 
                            WHEN B.OPER IN ('A0406') THEN 'DA6' 
                            WHEN B.OPER IN ('A0407') THEN 'DA7' 
                            WHEN B.OPER IN ('A0408') THEN 'DA8' 
                            WHEN B.OPER IN ('A0409') THEN 'DA9' 
                            WHEN B.OPER IN ('A0600', 'A0601') THEN 'WB1' 
                            WHEN B.OPER IN ('A0602') THEN 'WB2' 
                            WHEN B.OPER IN ('A0603') THEN 'WB3' 
                            WHEN B.OPER IN ('A0604') THEN 'WB4' 
                            WHEN B.OPER IN ('A0605') THEN 'WB5' 
                            WHEN B.OPER IN ('A0606') THEN 'WB6' 
                            WHEN B.OPER IN ('A0607') THEN 'WB7' 
                            WHEN B.OPER IN ('A0608') THEN 'WB8' 
                            WHEN B.OPER IN ('A0609') THEN 'WB9' 
                            ELSE ' ' 
                        END OPER_GRP_1 
          FROM MWIPMATDEF A 
             , MWIPFLWOPR@RPTTOMES B 
         WHERE 1=1 
           AND A.FACTORY = B.FACTORY 
           AND A.FIRST_FLOW = B.FLOW 
           AND A.FACTORY = 'HMVA2' 
           AND A.DELETE_FLAG = ' ' 
           AND A.MAT_TYPE = 'FG' 
           AND A.MAT_GRP_5 IN ('-', 'Merge') 
           AND A.MAT_ID LIKE '%' 
       ) A 
 WHERE 1=1 
   AND MAT.FACTORY = 'HMVA2' 
   AND MAT.DELETE_FLAG = ' ' 
   AND MAT.MAT_ID = A.MAT_ID  
 GROUP BY MAT.MAT_GRP_1, MAT.MAT_GRP_9, MAT.MAT_GRP_10, MAT.MAT_GRP_6, MAT.MAT_CMF_11,  ' ', CONV_MAT_ID,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ' 
 ORDER BY DECODE(MAT_GRP_1, 'SE', 1, 'HX', 2, 'IM', 3, 'FC', 4, 'IG', 5, 6), CUSTOMER, MAJOR, PKG, LD_COUNT, PKG_CODE,  ' ', PRODUCT,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ' 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT A.RES_MODEL
     , SUM(A.RES_CNT) AS RES_CNT
     , MAX(B.UPEH) AS UPEH
     , SUM(TRUNC(NVL(NVL(B.UPEH,0) * 24 * A.PERCENT * A.RES_CNT, 0))) AS RES_CAPA
     , SUM(RUN_CNT) AS RUN_CNT
     , SUM(WAIT_CNT) AS WAIT_CNT
     , SUM(RES_DOWN_CNT) AS RES_DOWN_CNT
     , SUM(DEV_CHANG_CNT) AS DEV_CHANG_CNT
  FROM ( 
        SELECT RAS.FACTORY, RES_STS_2, RES_STS_8 AS OPER, RES_GRP_6 AS RES_MODEL, RES_GRP_7 AS UPEH_GRP, COUNT(RES_ID) AS RES_CNT 
             , CASE WHEN RES_STS_8 LIKE 'A06%' THEN 0.71
                    WHEN RES_STS_8 LIKE 'A04%' THEN 0.68
                    WHEN RES_STS_8 = 'A0333' THEN 0.68
                    ELSE 0.7
               END PERCENT 
             , CASE WHEN RES_STS_8 IN ('A0040') THEN 'BG' 
                    WHEN RES_STS_8 IN ('A0200', 'A0230') THEN 'SAW' 
                    WHEN RES_STS_8 IN ('A0400', 'A0401', 'A0333') THEN 'DA1' 
                    WHEN RES_STS_8 IN ('A0402') THEN 'DA2' 
                    WHEN RES_STS_8 IN ('A0403') THEN 'DA3' 
                    WHEN RES_STS_8 IN ('A0404') THEN 'DA4' 
                    WHEN RES_STS_8 IN ('A0405') THEN 'DA5' 
                    WHEN RES_STS_8 IN ('A0406') THEN 'DA6' 
                    WHEN RES_STS_8 IN ('A0407') THEN 'DA7' 
                    WHEN RES_STS_8 IN ('A0408') THEN 'DA8' 
                    WHEN RES_STS_8 IN ('A0409') THEN 'DA9' 
                    WHEN RES_STS_8 IN ('A0600','A0601') THEN 'WB1' 
                    WHEN RES_STS_8 IN ('A0602') THEN 'WB2' 
                    WHEN RES_STS_8 IN ('A0603') THEN 'WB3' 
                    WHEN RES_STS_8 IN ('A0604') THEN 'WB4' 
                    WHEN RES_STS_8 IN ('A0605') THEN 'WB5' 
                    WHEN RES_STS_8 IN ('A0606') THEN 'WB6' 
                    WHEN RES_STS_8 IN ('A0607') THEN 'WB7' 
                    WHEN RES_STS_8 IN ('A0608') THEN 'WB8' 
                    WHEN RES_STS_8 IN ('A0609') THEN 'WB9' 
                    WHEN RES_STS_8 IN ('A0800', 'A0801', 'A0802', 'A0803', 'A0804', 'A0805', 'A0806', 'A0807', 'A0808', 'A0809') THEN 'GATE' 
                    WHEN RES_STS_8 IN ('A1000', 'A0910') THEN 'MOLD' 
                    WHEN RES_STS_8 IN ('A1100') THEN 'CURE' 
                    WHEN RES_STS_8 IN ('A1150', 'A1500') THEN 'MK' 
                    WHEN RES_STS_8 IN ('A1200') THEN 'TRIM' 
                    WHEN RES_STS_8 IN ('A1450') THEN 'TIN' 
                    WHEN RES_STS_8 IN ('A1300') THEN 'SBA' 
                    WHEN RES_STS_8 IN ('A1750', 'A1800', 'A1900', 'A1825') THEN 'SIG' 
                    WHEN RES_STS_8 IN ('A2000') THEN 'AVI' 
                    WHEN RES_STS_8 IN ('A2050') THEN 'PVI' 
                    WHEN RES_STS_8 IN ('A2100') THEN 'QC_GATE' 
                    ELSE ' ' 
               END OPER_GRP_1 
             , SUM(DECODE(RES_UP_DOWN_FLAG, 'U', DECODE(NVL(LOT.START_RES_ID, '-'), '-', 1, 0), 0)) AS WAIT_CNT 
             , SUM(DECODE(RES_UP_DOWN_FLAG, 'U', DECODE(NVL(LOT.START_RES_ID, '-'), '-', 0, 1), 0)) AS RUN_CNT 
             , SUM(DECODE(RES_UP_DOWN_FLAG, 'D', DECODE(NVL(SUBSTR(RES_STS_1, 1, 1), '-'), 'D', 0, 1), 0)) AS RES_DOWN_CNT 
             , SUM(DECODE(RES_UP_DOWN_FLAG, 'D', DECODE(NVL(SUBSTR(RES_STS_1, 1, 1), '-'), 'D', 1, 0), 0)) AS DEV_CHANG_CNT 
          FROM MRASRESDEF RAS
             , (
                SELECT DISTINCT FACTORY, START_RES_ID
                  FROM MWIPLOTSTS
                 WHERE FACTORY = 'HMVA2'
                   AND LOT_TYPE = 'W' 
                   AND LOT_DEL_FLAG = ' '
                   AND LOT_CMF_5 LIKE 'P%'
                   AND LOT_STATUS = 'PROC'
               ) LOT
         WHERE 1=1  
           AND RAS.FACTORY = LOT.FACTORY(+) 
           AND RAS.RES_ID = LOT.START_RES_ID(+) 
           AND RAS.FACTORY  = 'HMVA2' 
           AND RES_CMF_9 = 'Y' 
           AND RES_CMF_7 = 'Y' 
           AND DELETE_FLAG = ' ' 
           AND RES_TYPE='EQUIPMENT' 
           AND (RES_STS_1 NOT IN ('C200', 'B199') OR RES_UP_DOWN_FLAG = 'U') 
         GROUP BY RAS.FACTORY,RES_STS_2,RES_STS_8,RES_GRP_6,RES_GRP_7  
       ) A 
     , CRASUPHDEF B 
     , ( 
        SELECT (SELECT DATA_1 FROM MGCMTBLDAT@RPTTOMES WHERE FACTORY = 'HMVA2' AND TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = MAT_GRP_1) AS CUSTOMER
             , A.* 
          FROM MWIPMATDEF A 
       ) C 
 WHERE 1=1 
   AND A.FACTORY = B.FACTORY(+) 
   AND A.FACTORY = C.FACTORY(+) 
   AND A.OPER = B.OPER(+) 
   AND A.RES_MODEL = B.RES_MODEL(+) 
   AND A.UPEH_GRP = B.UPEH_GRP(+) 
   AND A.RES_STS_2 = B.MAT_ID(+) 
   AND A.RES_STS_2 = C.MAT_ID(+) 
   AND A.FACTORY  = 'HMVA2' 
   AND A.OPER NOT IN ('00001','00002') 
   AND A.OPER_GRP_1 = 'WB1'
   AND C.MAT_GRP_9 = 'S-LSI'
   AND C.MAT_GRP_10 = 'FLGA'
   AND C.MAT_GRP_6 = '12'
   AND C.MAT_CMF_11 = 'KN7'
   AND C.MAT_ID = 'DRET523_M31S_KN7'
 GROUP BY A.RES_MODEL 
 ORDER BY A.RES_MODEL 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT A.RES_MODEL
     , SUM(A.RES_CNT) AS RES_CNT
     , MAX(B.UPEH) AS UPEH
     , SUM(TRUNC(NVL(NVL(B.UPEH,0) * 24 * A.PERCENT * A.RES_CNT, 0))) AS RES_CAPA
     , SUM(RUN_CNT) AS RUN_CNT
     , SUM(WAIT_CNT) AS WAIT_CNT
     , SUM(RES_DOWN_CNT) AS RES_DOWN_CNT
     , SUM(DEV_CHANG_CNT) AS DEV_CHANG_CNT
  FROM ( 
        SELECT RAS.FACTORY, RES_STS_2, RES_STS_8 AS OPER, RES_GRP_6 AS RES_MODEL, RES_GRP_7 AS UPEH_GRP, COUNT(RES_ID) AS RES_CNT 
             , CASE WHEN RES_STS_8 LIKE 'A06%' THEN 0.71
                    WHEN RES_STS_8 LIKE 'A04%' THEN 0.68
                    WHEN RES_STS_8 = 'A0333' THEN 0.68
                    ELSE 0.7
               END PERCENT 
             , CASE WHEN RES_STS_8 IN ('A0040') THEN 'BG' 
                    WHEN RES_STS_8 IN ('A0200', 'A0230') THEN 'SAW' 
                    WHEN RES_STS_8 IN ('A0400', 'A0401', 'A0333') THEN 'DA1' 
                    WHEN RES_STS_8 IN ('A0402') THEN 'DA2' 
                    WHEN RES_STS_8 IN ('A0403') THEN 'DA3' 
                    WHEN RES_STS_8 IN ('A0404') THEN 'DA4' 
                    WHEN RES_STS_8 IN ('A0405') THEN 'DA5' 
                    WHEN RES_STS_8 IN ('A0406') THEN 'DA6' 
                    WHEN RES_STS_8 IN ('A0407') THEN 'DA7' 
                    WHEN RES_STS_8 IN ('A0408') THEN 'DA8' 
                    WHEN RES_STS_8 IN ('A0409') THEN 'DA9' 
                    WHEN RES_STS_8 IN ('A0600','A0601') THEN 'WB1' 
                    WHEN RES_STS_8 IN ('A0602') THEN 'WB2' 
                    WHEN RES_STS_8 IN ('A0603') THEN 'WB3' 
                    WHEN RES_STS_8 IN ('A0604') THEN 'WB4' 
                    WHEN RES_STS_8 IN ('A0605') THEN 'WB5' 
                    WHEN RES_STS_8 IN ('A0606') THEN 'WB6' 
                    WHEN RES_STS_8 IN ('A0607') THEN 'WB7' 
                    WHEN RES_STS_8 IN ('A0608') THEN 'WB8' 
                    WHEN RES_STS_8 IN ('A0609') THEN 'WB9' 
                    WHEN RES_STS_8 IN ('A0800', 'A0801', 'A0802', 'A0803', 'A0804', 'A0805', 'A0806', 'A0807', 'A0808', 'A0809') THEN 'GATE' 
                    WHEN RES_STS_8 IN ('A1000', 'A0910') THEN 'MOLD' 
                    WHEN RES_STS_8 IN ('A1100') THEN 'CURE' 
                    WHEN RES_STS_8 IN ('A1150', 'A1500') THEN 'MK' 
                    WHEN RES_STS_8 IN ('A1200') THEN 'TRIM' 
                    WHEN RES_STS_8 IN ('A1450') THEN 'TIN' 
                    WHEN RES_STS_8 IN ('A1300') THEN 'SBA' 
                    WHEN RES_STS_8 IN ('A1750', 'A1800', 'A1900', 'A1825') THEN 'SIG' 
                    WHEN RES_STS_8 IN ('A2000') THEN 'AVI' 
                    WHEN RES_STS_8 IN ('A2050') THEN 'PVI' 
                    WHEN RES_STS_8 IN ('A2100') THEN 'QC_GATE' 
                    ELSE ' ' 
               END OPER_GRP_1 
             , SUM(DECODE(RES_UP_DOWN_FLAG, 'U', DECODE(NVL(LOT.START_RES_ID, '-'), '-', 1, 0), 0)) AS WAIT_CNT 
             , SUM(DECODE(RES_UP_DOWN_FLAG, 'U', DECODE(NVL(LOT.START_RES_ID, '-'), '-', 0, 1), 0)) AS RUN_CNT 
             , SUM(DECODE(RES_UP_DOWN_FLAG, 'D', DECODE(NVL(SUBSTR(RES_STS_1, 1, 1), '-'), 'D', 0, 1), 0)) AS RES_DOWN_CNT 
             , SUM(DECODE(RES_UP_DOWN_FLAG, 'D', DECODE(NVL(SUBSTR(RES_STS_1, 1, 1), '-'), 'D', 1, 0), 0)) AS DEV_CHANG_CNT 
          FROM MRASRESDEF RAS
             , (
                SELECT DISTINCT FACTORY, START_RES_ID
                  FROM MWIPLOTSTS
                 WHERE FACTORY = 'HMVA2'
                   AND LOT_TYPE = 'W' 
                   AND LOT_DEL_FLAG = ' '
                   AND LOT_CMF_5 LIKE 'P%'
                   AND LOT_STATUS = 'PROC'
               ) LOT
         WHERE 1=1  
           AND RAS.FACTORY = LOT.FACTORY(+) 
           AND RAS.RES_ID = LOT.START_RES_ID(+) 
           AND RAS.FACTORY  = 'HMVA2' 
           AND RES_CMF_9 = 'Y' 
           AND RES_CMF_7 = 'Y' 
           AND DELETE_FLAG = ' ' 
           AND RES_TYPE='EQUIPMENT' 
           AND (RES_STS_1 NOT IN ('C200', 'B199') OR RES_UP_DOWN_FLAG = 'U') 
         GROUP BY RAS.FACTORY,RES_STS_2,RES_STS_8,RES_GRP_6,RES_GRP_7  
       ) A 
     , CRASUPHDEF B 
     , ( 
        SELECT (SELECT DATA_1 FROM MGCMTBLDAT@RPTTOMES WHERE FACTORY = 'HMVA2' AND TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = MAT_GRP_1) AS CUSTOMER
             , A.* 
          FROM MWIPMATDEF A 
       ) C 
 WHERE 1=1 
   AND A.FACTORY = B.FACTORY(+) 
   AND A.FACTORY = C.FACTORY(+) 
   AND A.OPER = B.OPER(+) 
   AND A.RES_MODEL = B.RES_MODEL(+) 
   AND A.UPEH_GRP = B.UPEH_GRP(+) 
   AND A.RES_STS_2 = B.MAT_ID(+) 
   AND A.RES_STS_2 = C.MAT_ID(+) 
   AND A.FACTORY  = 'HMVA2' 
   AND A.OPER NOT IN ('00001','00002') 
   AND A.OPER_GRP_1 = 'MOLD'
   AND C.MAT_GRP_9 = 'S-LSI'
   AND C.MAT_GRP_10 = 'FLGA'
   AND C.MAT_GRP_6 = '24'
   AND C.MAT_CMF_11 = 'KM7'
   AND C.MAT_ID = 'AKKC2100B-87CNKM7'
 GROUP BY A.RES_MODEL 
 ORDER BY A.RES_MODEL 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT PLAN_WEEK V1    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_DATE = TO_CHAR(SYSDATE,'yyyymmdd')      AND ROWNUM = 1  
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT LANGUAGE_2 FROM RWEBFUNDEF WHERE FUNC_NAME = 'PRD010401'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT FACTORY Code, FAC_DESC Data
  FROM MWIPFACDEF
 WHERE FAC_GRP_5 = 'Y' 
 ORDER BY FAC_GRP_4 ASC
-------------------------------------------------------------
SELECT OPER, OPER_DESC  FROM MWIPOPRDEF
  WHERE FACTORY = 'HMVA2'  AND OPER NOT IN ('00001', '00002') AND OPER NOT LIKE 'V%' ORDER BY DECODE(OPER_CMF_2, ' ', 99999, TO_NUMBER(OPER_CMF_2)), OPER
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
        SELECT (SELECT DATA_1 FROM MGCMTBLDAT WHERE TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = MAT_GRP_1 AND ROWNUM=1) AS CUSTOMER,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT_CMF_10, MAT_ID, OPER,  ' ', CASE WHEN OPER <= 'A0200' THEN VENDOR_MAT_ID ELSE BASE_MAT_ID END SAP_CODE
             , SUM(TOTAL) AS TOTAL
             , SUM(ASSY_END_QTY0 ) VAL0
             , SUM(ASSY_END_QTY1 ) VAL1
             , SUM(ASSY_END_QTY2 ) VAL2
             , SUM(ASSY_END_QTY3 ) VAL3
             , SUM(ASSY_END_QTY4 ) VAL4
             , SUM(ASSY_END_QTY5 ) VAL5
             , SUM(ASSY_END_QTY6 ) VAL6
             , SUM(ASSY_END_QTY7 ) VAL7
             , SUM(ASSY_END_QTY8 ) VAL8
             , SUM(ASSY_END_QTY9 ) VAL9
             , SUM(ASSY_END_QTY10 ) VAL10
             , SUM(ASSY_END_QTY11 ) VAL11
             , SUM(ASSY_END_QTY12 ) VAL12
             , SUM(ASSY_END_QTY13 ) VAL13
             , SUM(ASSY_END_QTY14 ) VAL14
             , SUM(ASSY_END_QTY15 ) VAL15
             , SUM(ASSY_END_QTY16 ) VAL16
             , SUM(ASSY_END_QTY17 ) VAL17
             , SUM(ASSY_END_QTY18 ) VAL18
             , SUM(ASSY_END_QTY19 ) VAL19
             , SUM(ASSY_END_QTY20 ) VAL20
             , SUM(ASSY_END_QTY21 ) VAL21
             , SUM(ASSY_END_QTY22 ) VAL22
             , SUM(ASSY_END_QTY23 ) VAL23
             , SUM(ASSY_END_QTY24 ) VAL24
             , SUM(ASSY_END_QTY25 ) VAL25
             , SUM(ASSY_END_QTY26 ) VAL26
             , SUM(ASSY_END_QTY27 ) VAL27
             , SUM(ASSY_END_QTY28 ) VAL28
             , SUM(ASSY_END_QTY29 ) VAL29
             , SUM(ASSY_END_QTY30 ) VAL30
             , SUM(ASSY_END_QTY31 ) VAL31
             , ROUND(SUM(TOTAL)/32, 1) AVG
          FROM (
               SELECT B.MAT_GRP_1,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', B.MAT_CMF_10, B.MAT_ID, A.OPER,  ' ', BASE_MAT_ID,VENDOR_MAT_ID 
                    , DECODE(WORK_DATE, '20200714', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY0
                    , DECODE(WORK_DATE, '20200715', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY1
                    , DECODE(WORK_DATE, '20200716', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY2
                    , DECODE(WORK_DATE, '20200717', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY3
                    , DECODE(WORK_DATE, '20200718', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY4
                    , DECODE(WORK_DATE, '20200719', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY5
                    , DECODE(WORK_DATE, '20200720', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY6
                    , DECODE(WORK_DATE, '20200721', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY7
                    , DECODE(WORK_DATE, '20200722', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY8
                    , DECODE(WORK_DATE, '20200723', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY9
                    , DECODE(WORK_DATE, '20200724', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY10
                    , DECODE(WORK_DATE, '20200725', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY11
                    , DECODE(WORK_DATE, '20200726', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY12
                    , DECODE(WORK_DATE, '20200727', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY13
                    , DECODE(WORK_DATE, '20200728', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY14
                    , DECODE(WORK_DATE, '20200729', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY15
                    , DECODE(WORK_DATE, '20200730', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY16
                    , DECODE(WORK_DATE, '20200731', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY17
                    , DECODE(WORK_DATE, '20200801', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY18
                    , DECODE(WORK_DATE, '20200802', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY19
                    , DECODE(WORK_DATE, '20200803', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY20
                    , DECODE(WORK_DATE, '20200804', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY21
                    , DECODE(WORK_DATE, '20200805', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY22
                    , DECODE(WORK_DATE, '20200806', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY23
                    , DECODE(WORK_DATE, '20200807', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY24
                    , DECODE(WORK_DATE, '20200808', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY25
                    , DECODE(WORK_DATE, '20200809', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY26
                    , DECODE(WORK_DATE, '20200810', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY27
                    , DECODE(WORK_DATE, '20200811', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY28
                    , DECODE(WORK_DATE, '20200812', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY29
                    , DECODE(WORK_DATE, '20200813', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY30
                    , DECODE(WORK_DATE, '20200814', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY31
                    , (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END) TOTAL
                 FROM (
                      SELECT FACTORY, MAT_ID, OPER, LOT_TYPE, MAT_VER, WORK_DATE, CM_KEY_3
                           , SUM(END_LOT) AS END_LOT
                           , SUM(END_QTY_1) AS END_QTY_1
                           , SUM(END_QTY_2) AS END_QTY_2
                           , SUM(SHIP_QTY_1) AS SHIP_QTY_1
                           , SUM(SHIP_QTY_2) AS SHIP_QTY_2
                        FROM (
                             SELECT FACTORY, MAT_ID, OPER, LOT_TYPE, MAT_VER, WORK_DATE, CM_KEY_3
                           , DECODE(SUBSTR(OPER,2,4),'0000',SUM(S1_OPER_IN_LOT+S2_OPER_IN_LOT+S3_OPER_IN_LOT),SUM(S1_END_LOT+S2_END_LOT+S3_END_LOT)) END_LOT
                           , DECODE(SUBSTR(OPER,2,4),'0000',SUM(S1_OPER_IN_QTY_1+S2_OPER_IN_QTY_1+S3_OPER_IN_QTY_1),SUM(S1_END_QTY_1+S2_END_QTY_1+S3_END_QTY_1+S1_END_RWK_QTY_1 + S2_END_RWK_QTY_1 + S3_END_RWK_QTY_1)) END_QTY_1
                           , DECODE(SUBSTR(OPER,2,4),'0000',SUM(S1_OPER_IN_QTY_2+S2_OPER_IN_QTY_2+S3_OPER_IN_QTY_2),SUM(S1_END_QTY_2+S2_END_QTY_2+S3_END_QTY_2+S1_END_RWK_QTY_2 + S2_END_RWK_QTY_2 + S3_END_RWK_QTY_2)) END_QTY_2
                           , 0 SHIP_QTY_1
                           , 0 SHIP_QTY_2
                        FROM RSUMWIPMOV 
                       WHERE OPER NOT IN ('AZ010','TZ010','F0000','EZ010', 'SZ010', 'BZ010')
                    GROUP BY FACTORY, MAT_ID, OPER, LOT_TYPE, MAT_VER, WORK_DATE, CM_KEY_3
                   UNION ALL
                      SELECT CM_KEY_1 AS FACTORY, MAT_ID
                           , DECODE(CM_KEY_1,'HMVA2','AZ010','HMKT1','TZ010','FGS','F0000','HMKE1','EZ010','HMKS1','SZ010', 'BZ010') OPER
                           , LOT_TYPE, MAT_VER,  WORK_DATE,CM_KEY_3
                           , 0 END_LOT
                           , 0 END_QTY_1
                           , 0 END_QTY_2
                           , SUM(S1_FAC_OUT_QTY_1+S2_FAC_OUT_QTY_1+S3_FAC_OUT_QTY_1) SHIP_QTY_1
                           , SUM(S1_FAC_OUT_QTY_2+S2_FAC_OUT_QTY_2+S3_FAC_OUT_QTY_2) SHIP_QTY_2
                        FROM RSUMFACMOV 
                       WHERE FACTORY NOT IN ('RETURN')
                    GROUP BY CM_KEY_1, MAT_ID, OPER, LOT_TYPE, MAT_VER, WORK_DATE, CM_KEY_3
                             )
                    GROUP BY FACTORY, MAT_ID, OPER, LOT_TYPE, MAT_VER, WORK_DATE, CM_KEY_3
                    )A
                  , MWIPMATDEF B 
              WHERE 1=1 
                AND A.FACTORY  = 'HMVA2' 
                AND A.FACTORY = B.FACTORY 
                AND A.MAT_ID = B.MAT_ID                
                AND A.MAT_VER = 1 
                AND B.MAT_VER = 1 
                AND B.MAT_TYPE = 'FG' 
                AND A.OPER LIKE '%'
                AND A.MAT_ID LIKE '%'  
                AND A.OPER NOT IN ('00001','00002') 
                AND A.WORK_DATE BETWEEN '20200714' AND '20200814' 
         )   
   WHERE TOTAL > 0           
GROUP BY MAT_GRP_1,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT_CMF_10, MAT_ID, OPER,  ' ', BASE_MAT_ID,VENDOR_MAT_ID
ORDER BY MAT_GRP_1,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT_CMF_10, MAT_ID, DECODE(OPER,'AISSUE','A0001','TISSUE','T0001','EISSUE','E0001',OPER),  ' ', BASE_MAT_ID,VENDOR_MAT_ID

-------------------------------------------------------------
SELECT * FROM RWEBUSRDEF WHERE FACTORY = :FACTORY AND USER_ID= :USER_ID
-------------------------------------------------------------
SELECT A.FUNC_GRP_SEQ,A.SEC_GRP_ID,A.FUNC_GRP_ID,NVL(A.FUNC_NAME, ' ') FUNC_NAME, NVL(B.FUNC_DESC, ' ') FUNC_DESC, LANGUAGE_1, LANGUAGE_2, LANGUAGE_3
  FROM RWEBGRPFUN A, RWEBFUNDEF B
 WHERE A.FACTORY = :p_FACTORY
   AND A.SEC_GRP_ID = :p_SEC_GRP_ID
   AND A.FUNC_NAME=B.FUNC_NAME(+)
 ORDER BY A.FUNC_GRP_SEQ, A.FUNC_SEQ
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
SELECT MIN(SYS_DATE) AS START_DAY 
     , MAX(SYS_DATE) AS END_DAY 
     , PLAN_YEAR||DECODE(LENGTH(PLAN_WEEK), 1, '0'||PLAN_WEEK, PLAN_WEEK) AS WEEK
  FROM MWIPCALDEF 
 WHERE CALENDAR_ID = 'OTD'
   AND (PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) IN ( 
                                                SELECT WW
                                                  FROM (
                                                        SELECT WW
                                                             , ROW_NUMBER() OVER(ORDER BY WW) AS RNK
                                                          FROM (
                                                                SELECT DISTINCT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW
                                                                  FROM MWIPCALDEF
                                                                 WHERE CALENDAR_ID = 'OTD'
                                                                   AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') >= (
                                                                                                              SELECT MAX(PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) AS WW
                                                                                                                FROM MWIPCALDEF
                                                                                                               WHERE CALENDAR_ID = 'OTD'
                                                                                                                 AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') < (SELECT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW FROM MWIPCALDEF WHERE CALENDAR_ID = 'OTD' AND SYS_DATE = '20200721')
                                                                                                                 AND SYS_DATE >= TO_CHAR(TO_DATE('20200721', 'YYYYMMDD')-14, 'YYYYMMDD')
                                                                                                             )
                                                               ) 
                                                       )
                                                 WHERE RNK <= 7
                                               ) 
 GROUP BY PLAN_YEAR, PLAN_WEEK 
 ORDER BY PLAN_YEAR, PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT LANGUAGE_2 FROM RWEBFUNDEF WHERE FUNC_NAME = 'MAT070402'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE) AS START_DAY 
     , MAX(SYS_DATE) AS END_DAY 
     , PLAN_YEAR||DECODE(LENGTH(PLAN_WEEK), 1, '0'||PLAN_WEEK, PLAN_WEEK) AS WEEK
  FROM MWIPCALDEF 
 WHERE CALENDAR_ID = 'OTD'
   AND (PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) IN ( 
                                                SELECT WW
                                                  FROM (
                                                        SELECT WW
                                                             , ROW_NUMBER() OVER(ORDER BY WW) AS RNK
                                                          FROM (
                                                                SELECT DISTINCT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW
                                                                  FROM MWIPCALDEF
                                                                 WHERE CALENDAR_ID = 'OTD'
                                                                   AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') >= (
                                                                                                              SELECT MAX(PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) AS WW
                                                                                                                FROM MWIPCALDEF
                                                                                                               WHERE CALENDAR_ID = 'OTD'
                                                                                                                 AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') < (SELECT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW FROM MWIPCALDEF WHERE CALENDAR_ID = 'OTD' AND SYS_DATE = '20200721')
                                                                                                                 AND SYS_DATE >= TO_CHAR(TO_DATE('20200721', 'YYYYMMDD')-14, 'YYYYMMDD')
                                                                                                             )
                                                               ) 
                                                       )
                                                 WHERE RNK <= 7
                                               ) 
 GROUP BY PLAN_YEAR, PLAN_WEEK 
 ORDER BY PLAN_YEAR, PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MAT_ID,  ' ', MAT_TYPE, MATCODE, MAT_DESC, MAT_OPER, OPER, UNIT_QTY
       , REMAIN_W0, REMAIN_W1, REMAIN_W2, REMAIN_W3, REMAIN_W4, REMAIN_W5 
       , MAT_L, MAT_INV_QTY, SAFTY_WARNING, MAT_NEED, MAT_FORECAST_DAY, DELIVERY_WEEK, MAT_ORDER_QTY, ORDER_WARNING 
       , SHORTAGE_W0, SHORTAGE_W1, SHORTAGE_W2, SHORTAGE_W3, SHORTAGE_W4, SHORTAGE_W5 
  FROM (SELECT MAT_ID,  ' ', MAT_TYPE, MATCODE, MAT_DESC, MAT_OPER, OPER, UNIT_QTY
             , REMAIN_W0, REMAIN_W1, REMAIN_W2, REMAIN_W3, REMAIN_W4, REMAIN_W5 
             , MAT_L, MAT_INV_QTY 
             , CASE WHEN MAT_TYPE = 'PB' AND DECODE(DELIVERY_DATE, 0, 4, DELIVERY_DATE) * MAT_NEED * 0.5 > MAT_TTL THEN 'Y' 
                    WHEN MAT_TYPE = 'RC' AND DECODE(DELIVERY_DATE, 0, 4, DELIVERY_DATE) * MAT_NEED * 0.5 > MAT_TTL THEN 'Y' 
                    WHEN DECODE(DELIVERY_DATE, 0, 4, DELIVERY_DATE) * MAT_NEED * 0.5 > MAT_INV_QTY THEN 'Y' 
                    ELSE 'N' 
               END SAFTY_WARNING 
             , MAT_NEED, MAT_FORECAST_DAY 
             , CEIL(DELIVERY_DATE / 7) || 'W' AS DELIVERY_WEEK 
             , MAT_ORDER_QTY 
             , CASE WHEN CEIL(DELIVERY_DATE / 7) = 0 AND SHORTAGE_W4 < 0 AND ABS(SHORTAGE_W4) > MAT_ORDER_QTY THEN 'Y' 
                    WHEN CEIL(DELIVERY_DATE / 7) = 1 AND SHORTAGE_W1 < 0 AND ABS(SHORTAGE_W1) > MAT_ORDER_QTY THEN 'Y' 
                    WHEN CEIL(DELIVERY_DATE / 7) = 2 AND SHORTAGE_W2 < 0 AND ABS(SHORTAGE_W2) > MAT_ORDER_QTY THEN 'Y' 
                    WHEN CEIL(DELIVERY_DATE / 7) = 3 AND SHORTAGE_W3 < 0 AND ABS(SHORTAGE_W3) > MAT_ORDER_QTY THEN 'Y' 
                    WHEN CEIL(DELIVERY_DATE / 7) = 4 AND SHORTAGE_W4 < 0 AND ABS(SHORTAGE_W4) > MAT_ORDER_QTY THEN 'Y' 
                    WHEN CEIL(DELIVERY_DATE / 7) = 5 AND SHORTAGE_W5 < 0 AND ABS(SHORTAGE_W5) > MAT_ORDER_QTY THEN 'Y' 
                    WHEN CEIL(DELIVERY_DATE / 7) = 6 AND SHORTAGE_W6 < 0 AND ABS(SHORTAGE_W6) > MAT_ORDER_QTY THEN 'Y' 
                    WHEN CEIL(DELIVERY_DATE / 7) = 7 AND SHORTAGE_W7 < 0 AND ABS(SHORTAGE_W7) > MAT_ORDER_QTY THEN 'Y' 
                    WHEN CEIL(DELIVERY_DATE / 7) = 8 AND SHORTAGE_W8 < 0 AND ABS(SHORTAGE_W8) > MAT_ORDER_QTY THEN 'Y' 
                    WHEN CEIL(DELIVERY_DATE / 7) = 9 AND SHORTAGE_W9 < 0 AND ABS(SHORTAGE_W9) > MAT_ORDER_QTY THEN 'Y' 
                    WHEN CEIL(DELIVERY_DATE / 7) = 10 AND SHORTAGE_W10 < 0 AND ABS(SHORTAGE_W10) > MAT_ORDER_QTY THEN 'Y' 
                    WHEN CEIL(DELIVERY_DATE / 7) = 11 AND SHORTAGE_W11 < 0 AND ABS(SHORTAGE_W11) > MAT_ORDER_QTY THEN 'Y' 
                    ELSE 'N' 
               END ORDER_WARNING  
             , SHORTAGE_W0, SHORTAGE_W1, SHORTAGE_W2, SHORTAGE_W3, SHORTAGE_W4, SHORTAGE_W5 
         FROM (SELECT A.MAT_ID,  ' ', A.MAT_TYPE, A.MATCODE, A.MAT_DESC, A.MAT_OPER, A.OPER, MAX(UNIT_QTY) AS UNIT_QTY
                   , SUM(ROUND(REMAIN_W0,0)) AS REMAIN_W0 
                   , SUM(ROUND(REMAIN_W1,0)) AS REMAIN_W1 
                   , SUM(ROUND(REMAIN_W2,0)) AS REMAIN_W2 
                   , SUM(ROUND(REMAIN_W3,0)) AS REMAIN_W3 
                   , SUM(ROUND(REMAIN_W4,0)) AS REMAIN_W4 
                   , SUM(ROUND(REMAIN_W5,0)) AS REMAIN_W5 
                   , MAX(TRUNC(MAT_SMT_IN + MAT_L_IN + MAT_WIK_WIP + MAT_INV_L_QTY)) AS MAT_L
                   , MAX(TRUNC(MAT_INV_QTY)) AS MAT_INV_QTY
                   , MAX(TRUNC(MAT_TTL)) AS MAT_TTL
                   , SUM(TRUNC(MAT_NEED)) AS MAT_NEED
                   , TO_CHAR(CASE WHEN SUM(TRUNC(MAT_NEED)) = 0 THEN TO_DATE('20200721', 'YYYYMMDD')
                                  WHEN (MAX(TRUNC(MAT_TTL)) / SUM(TRUNC(MAT_NEED))) >= 60 THEN TO_DATE('20200721', 'YYYYMMDD') + 60
                                  ELSE (MAX(TRUNC(MAT_TTL)) / SUM(TRUNC(MAT_NEED))) + TO_DATE('20200721', 'YYYYMMDD')
                             END, 'YY/MM/DD') MAT_FORECAST_DAY
                   , MAX(TRUNC(MAT_ORDER_QTY)) AS MAT_ORDER_QTY
                   , MAX(TRUNC(MAT_TTL)) - SUM(ROUND(REMAIN_W0,0)) AS SHORTAGE_W0
                   , MAX(TRUNC(MAT_TTL)) - SUM(ROUND(REMAIN_W0 + REMAIN_W1,0)) AS SHORTAGE_W1
                   , MAX(TRUNC(MAT_TTL)) - SUM(ROUND(REMAIN_W0 + REMAIN_W1 + REMAIN_W2,0)) AS SHORTAGE_W2
                   , MAX(TRUNC(MAT_TTL)) - SUM(ROUND(REMAIN_W0 + REMAIN_W1 + REMAIN_W2 + REMAIN_W3,0)) AS SHORTAGE_W3
                   , MAX(TRUNC(MAT_TTL)) - SUM(ROUND(REMAIN_W0 + REMAIN_W1 + REMAIN_W2 + REMAIN_W3 + REMAIN_W4,0)) AS SHORTAGE_W4
                   , MAX(TRUNC(MAT_TTL)) - SUM(ROUND(REMAIN_W0 + REMAIN_W1 + REMAIN_W2 + REMAIN_W3 + REMAIN_W4 + REMAIN_W5,0)) AS SHORTAGE_W5
                   , MAX(TRUNC(MAT_TTL)) - SUM(ROUND(REMAIN_W0 + REMAIN_W1 + REMAIN_W2 + REMAIN_W3 + REMAIN_W4 + REMAIN_W5 + REMAIN_W6,0)) AS SHORTAGE_W6
                   , MAX(TRUNC(MAT_TTL)) - SUM(ROUND(REMAIN_W0 + REMAIN_W1 + REMAIN_W2 + REMAIN_W3 + REMAIN_W4 + REMAIN_W5 + REMAIN_W6 + REMAIN_W7,0)) AS SHORTAGE_W7
                   , MAX(TRUNC(MAT_TTL)) - SUM(ROUND(REMAIN_W0 + REMAIN_W1 + REMAIN_W2 + REMAIN_W3 + REMAIN_W4 + REMAIN_W5 + REMAIN_W6 + REMAIN_W7 + REMAIN_W8,0)) AS SHORTAGE_W8
                   , MAX(TRUNC(MAT_TTL)) - SUM(ROUND(REMAIN_W0 + REMAIN_W1 + REMAIN_W2 + REMAIN_W3 + REMAIN_W4 + REMAIN_W5 + REMAIN_W6 + REMAIN_W7 + REMAIN_W8 + REMAIN_W9,0)) AS SHORTAGE_W9
                   , MAX(TRUNC(MAT_TTL)) - SUM(ROUND(REMAIN_W0 + REMAIN_W1 + REMAIN_W2 + REMAIN_W3 + REMAIN_W4 + REMAIN_W5 + REMAIN_W6 + REMAIN_W7 + REMAIN_W8 + REMAIN_W9 + REMAIN_W10,0)) AS SHORTAGE_W10
                   , MAX(TRUNC(MAT_TTL)) - SUM(ROUND(REMAIN_W0 + REMAIN_W1 + REMAIN_W2 + REMAIN_W3 + REMAIN_W4 + REMAIN_W5 + REMAIN_W6 + REMAIN_W7 + REMAIN_W8 + REMAIN_W9 + REMAIN_W10 + REMAIN_W11,0)) AS SHORTAGE_W11
                   , MAX(NVL(A.DELIVERY_DATE, 0)) AS DELIVERY_DATE
                FROM RSUMMATMRP A 
                   , MWIPMATDEF B 
               WHERE 1=1 
                 AND A.FACTORY = B.FACTORY 
                 AND A.MAT_ID = B.MAT_ID 
                 AND A.WORK_DATE = '20200721'
            GROUP BY A.MAT_ID,  ' ', A.MAT_TYPE, A.MATCODE, A.MAT_DESC, A.MAT_OPER, A.OPER, 1
            ORDER BY A.MAT_ID,  ' ', A.MAT_TYPE, A.MATCODE, A.MAT_DESC, A.MAT_OPER, A.OPER, 1)) 
 WHERE 1 = 1

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
SELECT LANGUAGE_2 FROM RWEBFUNDEF WHERE FUNC_NAME = 'PRD010226'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT A.CUST_TYPE, A.MAT_GRP_9 AS MAJOR, (SELECT DATA_1 FROM MGCMTBLDAT@RPTTOMES WHERE FACTORY = 'HMVA2' AND TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = A.MAT_GRP_1) AS CUSTOMER,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ' 
     , ROUND(SUM(MON_PLN) / 1000, 0) AS MON_PLN
     , ROUND(SUM(SHP_TTL) / 1000, 0) AS SHP_TTL
     , CASE WHEN SUM(MON_PLN) = 0 THEN 0
            ELSE ROUND((SUM(SHP_TTL) / (SUM(MON_PLN) / 31)) - 21, 1)
       END AS SHP_JINDO
     , ROUND((SUM(SHP_TTL) + SUM(WIP_TTL)) / 1000, 0) AS RCV_TTL
     , CASE WHEN SUM(MON_PLN) = 0 THEN 0
            ELSE ROUND(( ((SUM(SHP_TTL) + SUM(WIP_TTL)) / SUM(MON_PLN)) - ((21 + 5) / 31) ) * 31, 1)
       END AS RCV_JINDO
     , ROUND(SUM(WIP_TTL) / 1000, 0) AS WIP_TTL
     , CASE WHEN SUM(MON_PLN) = 0 THEN 0
            ELSE ROUND(SUM(WIP_TTL) / (SUM(MON_PLN) / 31), 1)
       END AS WIP_DAY
     , ROUND((SUM(MON_PLN) - SUM(SHP_TTL)) / 10.2218256855162 / 1000, 0) AS TARGET_QTY
     , ROUND(SUM(RCV_TODAY) / 1000, 0) AS RCV_TODAY
     , ROUND(SUM(OUT_DP) / 1000, 0) AS OUT_DP
     , ROUND(SUM(OUT_DA) / 1000, 0) AS OUT_DA
     , ROUND(SUM(OUT_WB) / 1000, 0) AS OUT_WB
     , ROUND(SUM(OUT_CLOSE) / 1000, 0) AS OUT_CLOSE
     , ROUND(SUM(SHP_TODAY) / 1000, 0) AS SHP_TODAY
  FROM (
        SELECT NVL((SELECT DATA_10 FROM MGCMTBLDAT WHERE TABLE_NAME = 'H_CUSTOMER' AND FACTORY = 'HMVA2' AND  KEY_1 = MAT_GRP_1), '-') AS CUST_TYPE
             , MAT.CONV_MAT_ID, MAT_GRP_1, MAT_GRP_2, MAT_GRP_3, MAT_GRP_4, MAT_GRP_5
             , MAT_GRP_6, MAT_GRP_7, MAT_GRP_8, MAT_GRP_9, MAT_GRP_10, MAT_CMF_10, MAT_CMF_11
             , NVL(CASE WHEN MAT.MAT_GRP_3 IN ('COB') THEN ROUND(PLN.MON_PLN/MAT.NET_DIE,0) ELSE PLN.MON_PLN END, 0) * PRICE AS MON_PLN
             , NVL(CASE WHEN MAT.MAT_GRP_3 IN ('COB') THEN ROUND(SHP.SHP_TTL/MAT.NET_DIE,0) ELSE SHP.SHP_TTL END, 0) * PRICE AS SHP_TTL 
             , NVL(CASE WHEN MAT.MAT_CMF_11 = 'JZH' THEN NVL(RCV.RCV_TTL,0)/MAT.COMP_CNT/2
                        WHEN MAT.MAT_CMF_11 IN ('DHL', 'DQZ', 'DRA', 'DQA', 'DND', 'DWG', 'DUT', 'HAU', 'HF8', 'HDM', 'HDR', 'HEN', 'HQA', 'HQC') THEN DECODE(MAT.MAT_GRP_5, '3rd', NVL(RCV.RCV_TTL,0)/MAT.COMP_CNT, 0)
                        WHEN MAT.MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND (MAT_ID LIKE 'SEKS%' OR MAT_ID LIKE 'SEKY%')) THEN DECODE(MAT.MAT_GRP_5, '2nd', NVL(RCV.RCV_TTL,0)/MAT.COMP_CNT, 0)
                        WHEN MAT.MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT.MAT_GRP_5 <> '-' THEN CASE WHEN MAT.MAT_GRP_5 IN ('1st','Merge') OR MAT.MAT_GRP_5 LIKE 'Middle%' THEN NVL(RCV.RCV_TTL,0)/MAT.COMP_CNT ELSE 0 END
                        WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN ROUND(RCV.RCV_TTL/NET_DIE,0)
                        ELSE NVL(RCV.RCV_TTL,0)/MAT.COMP_CNT
                   END,0) * PRICE AS RCV_TTL
             , NVL(CASE WHEN MAT.MAT_CMF_11 = 'JZH' THEN NVL(RCV.RCV_TODAY,0)/MAT.COMP_CNT/2
                        WHEN MAT.MAT_CMF_11 IN ('DHL', 'DQZ', 'DRA', 'DQA', 'DND', 'DWG', 'DUT', 'HAU', 'HF8', 'HDM', 'HDR', 'HEN', 'HQA', 'HQC') THEN DECODE(MAT.MAT_GRP_5, '3rd', NVL(RCV.RCV_TODAY,0)/MAT.COMP_CNT, 0)
                        WHEN MAT.MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND (MAT_ID LIKE 'SEKS%' OR MAT_ID LIKE 'SEKY%')) THEN DECODE(MAT.MAT_GRP_5, '2nd', NVL(RCV.RCV_TODAY,0)/MAT.COMP_CNT, 0)
                        WHEN MAT.MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT.MAT_GRP_5 <> '-' THEN CASE WHEN MAT.MAT_GRP_5 IN ('1st','Merge') OR MAT.MAT_GRP_5 LIKE 'Middle%' THEN NVL(RCV.RCV_TODAY,0)/MAT.COMP_CNT ELSE 0 END
                        WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN ROUND(RCV.RCV_TODAY/NET_DIE,0)
                        ELSE NVL(RCV.RCV_TODAY,0)/MAT.COMP_CNT
                   END,0) * PRICE AS RCV_TODAY
             , NVL(WIP.WIP_TTL,0) * PRICE AS WIP_TTL
             , NVL(WIP.WIP_AZ010,0) * PRICE AS WIP_AZ010
             , NVL(OUT_DP,0) * PRICE AS OUT_DP
             , NVL(OUT_DA,0) * PRICE AS OUT_DA
             , NVL(OUT_WB,0) * PRICE AS OUT_WB
             , NVL(OUT_CLOSE,0) * PRICE AS OUT_CLOSE
             , NVL(CASE WHEN MAT.MAT_GRP_3 IN ('COB') THEN ROUND(SHP.SHP_TODAY/MAT.NET_DIE,0) ELSE SHP.SHP_TODAY END, 0) * PRICE AS SHP_TODAY 
          FROM (
                SELECT A.MAT_ID, MAT_GRP_1, MAT_GRP_2, MAT_GRP_3, MAT_GRP_4, MAT_GRP_5
                     , MAT_GRP_6, MAT_GRP_7, MAT_GRP_8, MAT_GRP_9, MAT_GRP_10, MAT_CMF_10, MAT_CMF_11
                     , NET_DIE, COMP_CNT, HX_COMP_MIN, HX_COMP_MAX 
                     , CASE WHEN MAT_GRP_1 = 'SE' AND MAT_GRP_9 = 'MEMORY' THEN 'SEK_________-___' || SUBSTR(A.MAT_ID, -3) 
                            WHEN MAT_GRP_1 = 'HX' THEN MAT_CMF_10 
                            ELSE A.MAT_ID 
                       END CONV_MAT_ID 
                     , 1 AS PRICE
                  FROM VWIPMATDEF A
                 WHERE 1=1
                   AND A.FACTORY = 'HMVA2'
                   AND A.DELETE_FLAG = ' '
                   AND A.MAT_TYPE = 'FG' 
                   AND A.MAT_GRP_2 NOT IN ('-', 'PW') 
               ) MAT
             , (                
                SELECT MAT_ID
                     , SUM(PLAN_QTY_ASSY) AS MON_PLN
                  FROM (
                        SELECT MAT_ID, SUM(PLAN_QTY_ASSY) AS PLAN_QTY_ASSY, SUM(TO_NUMBER(DECODE(RESV_FIELD1,' ',0,RESV_FIELD1))) AS RESV_FIELD1
                          FROM CWIPPLNMON 
                         WHERE 1=1 
                           AND FACTORY = 'HMVA2'
                           AND PLAN_MONTH = '202007'
                         GROUP BY MAT_ID 
                       ) 
                 GROUP BY MAT_ID
               ) PLN
             , (
                SELECT MAT_ID
                     , SUM(SHP_QTY_1) AS SHP_TTL 
                     , SUM(DECODE(WORK_DATE, '20200721', SHP_QTY_1, 0)) AS SHP_TODAY
                  FROM VSUMWIPOUT
                 WHERE 1=1
                   AND WORK_DATE BETWEEN '20200701' AND '20200721' 
                   AND FACTORY = 'HMVA2' 
                   AND LOT_TYPE = 'W' 
                   AND CM_KEY_2 = 'PROD' 
                   AND CM_KEY_3 LIKE 'P%'
                   AND MAT_ID NOT LIKE 'HX%'
                 GROUP BY MAT_ID
                 UNION ALL
                SELECT MAT_ID
                     , SUM(SHP_QTY_1) AS SHP_TTL 
                     , SUM(DECODE(WORK_DATE, '20200721', SHP_QTY_1, 0)) AS SHP_TODAY
                  FROM VSUMWIPOUT_06
                 WHERE 1=1
                   AND WORK_DATE BETWEEN '20200701' AND '20200721' 
                   AND FACTORY = 'HMVA2' 
                   AND LOT_TYPE = 'W' 
                   AND CM_KEY_2 = 'PROD' 
                   AND CM_KEY_3 LIKE 'P%'
                   AND MAT_ID LIKE 'HX%'
                 GROUP BY MAT_ID
               ) SHP
             , (
                SELECT MAT_ID
                     , SUM(RCV_QTY_1) AS RCV_TTL
                     , SUM(DECODE(WORK_DATE, '20200721', RCV_QTY_1, 0)) AS RCV_TODAY
                  FROM VSUMWIPRCV
                 WHERE FACTORY = 'HMVA2'
                   AND WORK_DATE BETWEEN '20200701' AND '20200721'
                   AND LOT_TYPE = 'W'
                   AND CM_KEY_3 LIKE 'P%' 
                   AND MAT_ID NOT LIKE 'HX%'
                 GROUP BY MAT_ID
                 UNION ALL
                SELECT MAT_ID
                     , SUM(RCV_QTY_1) AS RCV_TTL
                     , SUM(DECODE(WORK_DATE, '20200721', RCV_QTY_1, 0)) AS RCV_TODAY
                  FROM VSUMWIPRCV_HX
                 WHERE FACTORY = 'HMVA2'
                   AND WORK_DATE BETWEEN '20200701' AND '20200721'
                   AND LOT_TYPE = 'W'
                   AND CM_KEY_3 LIKE 'P%' 
                   AND MAT_ID LIKE 'HX%'
                 GROUP BY MAT_ID
               ) RCV
             , (
                SELECT MAT_ID
                     , SUM(QTY) AS WIP_TTL
                     , SUM(DECODE(OPER, 'AZ010', QTY, 0)) AS WIP_AZ010
                  FROM (
                        SELECT MAT_ID, OPER, OPER_GRP_1, MAT_GRP_1, MAT_GRP_4, MAT_GRP_5
                             , CASE WHEN HX_COMP_MIN IS NOT NULL
                                         THEN (CASE WHEN HX_COMP_MIN <> HX_COMP_MAX AND OPER > HX_COMP_MIN AND OPER <= HX_COMP_MAX THEN QTY_1 / NVL(COMP_CNT / 2,1)
                                                    WHEN OPER <= HX_COMP_MAX THEN QTY_1 / NVL(COMP_CNT,1)
                                                    ELSE QTY_1 END)
                                    WHEN OPER <= 'A0395' THEN QTY_1 / NVL(COMP_CNT,1) 
                                    ELSE QTY_1 
                               END QTY 
                          FROM (
                                SELECT A.MAT_ID, B.OPER, B.OPER_GRP_1, C.MAT_GRP_1, C.MAT_GRP_4, C.MAT_GRP_5
                                     , CASE WHEN MAT_CMF_11 IN ('DHL', 'DQZ', 'DRA', 'DQA', 'DND', 'DWG', 'DUT', 'HAU', 'HF8', 'HDM', 'HDR', 'HEN', 'HQA', 'HQC') THEN (CASE WHEN MAT_GRP_5 IN ('3rd','Merge') THEN QTY_1
                                                                               WHEN MAT_GRP_5 LIKE 'Middle%' AND MAT_GRP_5 <> 'Middle' THEN QTY_1
                                                                               ELSE 0 END)
                                            WHEN MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND (MAT_ID LIKE 'SEKS%' OR MAT_ID LIKE 'SEKY%')) THEN CASE WHEN MAT_GRP_5 IN ('2nd','Merge') OR MAT_GRP_5 LIKE 'Middle%' THEN QTY_1 ELSE 0 END
                                            WHEN MAT_GRP_1 = 'HX' AND MESMGR.F_GET_ATTR_VALUE@RPTTOMES(A.MAT_ID, 'MAT_ETC', 'HX_VERSION') = 'A-376' THEN CASE WHEN MAT_GRP_5 IN ('5th','Merge') THEN QTY_1 ELSE 0 END
                                            WHEN MAT_GRP_1 = 'HX' AND MESMGR.F_GET_ATTR_VALUE@RPTTOMES(A.MAT_ID, 'MAT_ETC', 'HX_VERSION') IN ('A-445', 'A-525') THEN CASE WHEN MAT_GRP_5 IN ('6th','Merge') THEN QTY_1 ELSE 0 END
                                            WHEN MAT_GRP_1 = 'HX' AND MESMGR.F_GET_ATTR_VALUE@RPTTOMES(A.MAT_ID, 'MAT_ETC', 'HX_VERSION') = 'A-524' THEN CASE WHEN MAT_GRP_5 IN ('7th','Merge') THEN QTY_1 ELSE 0 END
                                            WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN CASE WHEN MAT_GRP_5 IN ('1st','Merge') OR MAT_GRP_5 LIKE 'Middle%' THEN QTY_1 ELSE 0 END
                                            WHEN MAT_GRP_3 IN ('COB', 'BGN') THEN ROUND(QTY_1/C.NET_DIE,0)
                                            ELSE QTY_1
                                       END AS QTY_1
                                     , C.COMP_CNT, C.HX_COMP_MIN, C.HX_COMP_MAX 
                                     , A.HOLD_CODE 
                                     , CASE WHEN A.HOLD_CODE = 'H72' AND A.OPER = 'A0000' THEN 'Y' ELSE 'N' END AS CK_STOCK_H72 
                                  FROM RWIPLOTSTS A  
                                     , MWIPOPRDEF B  
                                     , VWIPMATDEF C
                                 WHERE 1 = 1 
                                   AND A.FACTORY = B.FACTORY
                                   AND A.FACTORY = C.FACTORY
                                   AND A.OPER = B.OPER
                                   AND A.MAT_ID = C.MAT_ID
                                   AND A.FACTORY = 'HMVA2'  
                                   AND A.LOT_TYPE = 'W' 
                                   AND A.LOT_CMF_5 LIKE 'P%' 
                                   AND A.LOT_DEL_FLAG = ' ' 
                                   AND C.MAT_GRP_2 <> '-'
                                   AND C.DELETE_FLAG = ' '
                                   AND A.HOLD_CODE NOT IN ('H71','H54') 
                               )
                         WHERE CK_STOCK_H72 = 'N'
                       )
                 GROUP BY MAT_ID
               ) WIP
             , (
                SELECT MAT_ID
                     , SUM(CASE WHEN OPER IN ('A0200', 'A0230') THEN QTY ELSE 0 END) AS OUT_DP
                     , SUM(CASE WHEN OPER LIKE 'A04%' THEN QTY
                                WHEN OPER = 'A0333' THEN QTY
                                ELSE 0
                           END) AS OUT_DA                     
                     , SUM(CASE WHEN OPER LIKE 'A06%' THEN QTY ELSE 0 END) AS OUT_WB
                     , SUM(CASE WHEN OPER = 'A2100' THEN QTY ELSE 0 END) AS OUT_CLOSE 
                  FROM (    
                        SELECT MAT_ID, OPER, MAT_GRP_1, MAT_GRP_4, MAT_GRP_5
                             , CASE WHEN HX_COMP_MIN IS NOT NULL
                                         THEN (CASE WHEN HX_COMP_MIN <> HX_COMP_MAX AND OPER > HX_COMP_MIN AND OPER <= HX_COMP_MAX THEN QTY_1 / NVL(COMP_CNT / 2,1)
                                                    WHEN OPER <= HX_COMP_MAX THEN QTY_1 / NVL(COMP_CNT,1)
                                                    ELSE QTY_1 END)
                                    WHEN OPER <= 'A0395' THEN QTY_1 / NVL(COMP_CNT,1) 
                                    ELSE QTY_1 
                               END QTY
                          FROM (
                                SELECT MAT_ID, OPER, MAT_GRP_1, MAT_GRP_4, MAT_GRP_5, MAT_GRP_9, MAT_CMF_11
                                     , CASE WHEN MAT_CMF_11 IN ('DHL', 'DQZ', 'DRA', 'DQA', 'DND', 'DWG', 'DUT', 'HAU', 'HF8', 'HDM', 'HDR', 'HEN', 'HQA', 'HQC') THEN (CASE WHEN MAT_GRP_5 IN ('3rd','Merge') THEN END_QTY ELSE 0 END)
                                            WHEN MAT_ID LIKE 'SEK%' AND MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND (MAT_ID LIKE 'SEKS%' OR MAT_ID LIKE 'SEKY%'))
                                                 THEN (CASE WHEN MAT_GRP_5 IN ('2nd','Merge') THEN END_QTY ELSE 0 END)
                                            WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-'
                                                 THEN (CASE WHEN MAT_GRP_5 IN ('1st','Merge') THEN END_QTY ELSE 0 END)
                                            WHEN MAT_GRP_3 IN ('COB', 'BGN') THEN ROUND(END_QTY/NET_DIE,0)
                                            ELSE END_QTY
                                       END QTY_1 
                                     , COMP_CNT, HX_COMP_MIN, HX_COMP_MAX 
                                  FROM ( 
                                        SELECT A.OPER
                                             , (S1_END_QTY_1+S2_END_QTY_1+S3_END_QTY_1) AS END_QTY
                                             , B.*
                                          FROM RSUMWIPMOV A
                                             , VWIPMATDEF B
                                         WHERE 1=1
                                           AND A.FACTORY = B.FACTORY
                                           AND A.MAT_ID = B.MAT_ID
                                           AND A.FACTORY = 'HMVA2'
                                           AND A.WORK_DATE = '20200721'
                                           AND A.LOT_TYPE = 'W'
                                           AND A.CM_KEY_3 LIKE 'P%' 
                                           AND B.MAT_GRP_5 NOT LIKE 'Middle%'
                                           AND REGEXP_LIKE(A.OPER, 'A0200|A0230|A0333|A040*|A060*|A2100')
                                           AND ((A.OPER >= 'A0400' AND B.MAT_GRP_5 IN ('-', 'Merge')) OR (A.OPER < 'A0400'))
                                           AND A.MAT_ID NOT LIKE 'HX%'
                                         UNION ALL
                                        SELECT A.OPER
                                             , (S1_END_QTY_1+S2_END_QTY_1+S3_END_QTY_1) AS END_QTY
                                             , B.*
                                          FROM RSUMWIPMOV A
                                             , VWIPMATDEF B
                                         WHERE 1=1
                                           AND A.FACTORY = B.FACTORY
                                           AND A.MAT_ID = B.MAT_ID
                                           AND A.FACTORY = 'HMVA2'
                                           AND A.WORK_DATE = '20200721'
                                           AND A.LOT_TYPE = 'W'
                                           AND A.CM_KEY_3 LIKE 'P%' 
                                           AND B.MAT_GRP_5 NOT LIKE 'Middle%'
                                           AND REGEXP_LIKE(A.OPER, 'A0200|A0230|A0333|A040*|A060*|A2100')
                                           AND ((A.OPER >= 'A0400' AND B.MAT_GRP_5 IN ('-', 'Merge')) OR (A.OPER < 'A0400'))
                                           AND A.MAT_ID LIKE 'HX%'
                                       ) 
                               )
                       )
                 GROUP BY MAT_ID
               ) MOV
         WHERE 1=1
           AND MAT.MAT_ID = PLN.MAT_ID(+)
           AND MAT.MAT_ID = SHP.MAT_ID(+)
           AND MAT.MAT_ID = RCV.MAT_ID(+)
           AND MAT.MAT_ID = WIP.MAT_ID(+)
           AND MAT.MAT_ID = MOV.MAT_ID(+)
       ) A
 GROUP BY A.CUST_TYPE, A.MAT_GRP_9, A.MAT_GRP_1,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' '
 HAVING SUM(MON_PLN) + SUM(SHP_TTL) + SUM(WIP_TTL) + SUM(RCV_TODAY) + SUM(OUT_DP) + SUM(OUT_DA) + SUM(OUT_WB) + SUM(OUT_CLOSE) + SUM(SHP_TODAY) <> 0
 ORDER BY DECODE(CUST_TYPE, 'SEC', 1, 'Hynix', 2, 'Fabless', 3, 4), A.MAT_GRP_9, DECODE(A.MAT_GRP_1, 'SE', 1, 'HX', 2, 3),CUSTOMER,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' '

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
        SELECT (SELECT DATA_1 FROM MGCMTBLDAT WHERE TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = MAT_GRP_1 AND ROWNUM=1) AS CUSTOMER,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT_CMF_10, MAT_ID, OPER,  ' ', CASE WHEN OPER <= 'A0200' THEN VENDOR_MAT_ID ELSE BASE_MAT_ID END SAP_CODE
             , SUM(TOTAL) AS TOTAL
             , SUM(ASSY_END_QTY0 ) VAL0
             , SUM(ASSY_END_QTY1 ) VAL1
             , SUM(ASSY_END_QTY2 ) VAL2
             , SUM(ASSY_END_QTY3 ) VAL3
             , SUM(ASSY_END_QTY4 ) VAL4
             , SUM(ASSY_END_QTY5 ) VAL5
             , SUM(ASSY_END_QTY6 ) VAL6
             , SUM(ASSY_END_QTY7 ) VAL7
             , SUM(ASSY_END_QTY8 ) VAL8
             , SUM(ASSY_END_QTY9 ) VAL9
             , SUM(ASSY_END_QTY10 ) VAL10
             , SUM(ASSY_END_QTY11 ) VAL11
             , SUM(ASSY_END_QTY12 ) VAL12
             , SUM(ASSY_END_QTY13 ) VAL13
             , SUM(ASSY_END_QTY14 ) VAL14
             , SUM(ASSY_END_QTY15 ) VAL15
             , SUM(ASSY_END_QTY16 ) VAL16
             , SUM(ASSY_END_QTY17 ) VAL17
             , SUM(ASSY_END_QTY18 ) VAL18
             , SUM(ASSY_END_QTY19 ) VAL19
             , ROUND(SUM(TOTAL)/20, 1) AVG
          FROM (
               SELECT B.MAT_GRP_1,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', B.MAT_CMF_10, B.MAT_ID, A.OPER,  ' ', BASE_MAT_ID,VENDOR_MAT_ID 
                    , DECODE(WORK_DATE, '20200701', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY0
                    , DECODE(WORK_DATE, '20200702', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY1
                    , DECODE(WORK_DATE, '20200703', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY2
                    , DECODE(WORK_DATE, '20200704', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY3
                    , DECODE(WORK_DATE, '20200705', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY4
                    , DECODE(WORK_DATE, '20200706', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY5
                    , DECODE(WORK_DATE, '20200707', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY6
                    , DECODE(WORK_DATE, '20200708', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY7
                    , DECODE(WORK_DATE, '20200709', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY8
                    , DECODE(WORK_DATE, '20200710', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY9
                    , DECODE(WORK_DATE, '20200711', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY10
                    , DECODE(WORK_DATE, '20200712', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY11
                    , DECODE(WORK_DATE, '20200713', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY12
                    , DECODE(WORK_DATE, '20200714', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY13
                    , DECODE(WORK_DATE, '20200715', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY14
                    , DECODE(WORK_DATE, '20200716', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY15
                    , DECODE(WORK_DATE, '20200717', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY16
                    , DECODE(WORK_DATE, '20200718', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY17
                    , DECODE(WORK_DATE, '20200719', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY18
                    , DECODE(WORK_DATE, '20200720', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY19
                    , (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END) TOTAL
                 FROM (
                      SELECT FACTORY, MAT_ID, OPER, LOT_TYPE, MAT_VER, WORK_DATE, CM_KEY_3
                           , SUM(END_LOT) AS END_LOT
                           , SUM(END_QTY_1) AS END_QTY_1
                           , SUM(END_QTY_2) AS END_QTY_2
                           , SUM(SHIP_QTY_1) AS SHIP_QTY_1
                           , SUM(SHIP_QTY_2) AS SHIP_QTY_2
                        FROM (
                             SELECT FACTORY, MAT_ID, OPER, LOT_TYPE, MAT_VER, WORK_DATE, CM_KEY_3
                           , DECODE(SUBSTR(OPER,2,4),'0000',SUM(S1_OPER_IN_LOT+S2_OPER_IN_LOT+S3_OPER_IN_LOT),SUM(S1_END_LOT+S2_END_LOT+S3_END_LOT)) END_LOT
                           , DECODE(SUBSTR(OPER,2,4),'0000',SUM(S1_OPER_IN_QTY_1+S2_OPER_IN_QTY_1+S3_OPER_IN_QTY_1),SUM(S1_END_QTY_1+S2_END_QTY_1+S3_END_QTY_1+S1_END_RWK_QTY_1 + S2_END_RWK_QTY_1 + S3_END_RWK_QTY_1)) END_QTY_1
                           , DECODE(SUBSTR(OPER,2,4),'0000',SUM(S1_OPER_IN_QTY_2+S2_OPER_IN_QTY_2+S3_OPER_IN_QTY_2),SUM(S1_END_QTY_2+S2_END_QTY_2+S3_END_QTY_2+S1_END_RWK_QTY_2 + S2_END_RWK_QTY_2 + S3_END_RWK_QTY_2)) END_QTY_2
                           , 0 SHIP_QTY_1
                           , 0 SHIP_QTY_2
                        FROM RSUMWIPMOV 
                       WHERE OPER NOT IN ('AZ010','TZ010','F0000','EZ010', 'SZ010', 'BZ010')
                    GROUP BY FACTORY, MAT_ID, OPER, LOT_TYPE, MAT_VER, WORK_DATE, CM_KEY_3
                   UNION ALL
                      SELECT CM_KEY_1 AS FACTORY, MAT_ID
                           , DECODE(CM_KEY_1,'HMVA2','AZ010','HMKT1','TZ010','FGS','F0000','HMKE1','EZ010','HMKS1','SZ010', 'BZ010') OPER
                           , LOT_TYPE, MAT_VER,  WORK_DATE,CM_KEY_3
                           , 0 END_LOT
                           , 0 END_QTY_1
                           , 0 END_QTY_2
                           , SUM(S1_FAC_OUT_QTY_1+S2_FAC_OUT_QTY_1+S3_FAC_OUT_QTY_1) SHIP_QTY_1
                           , SUM(S1_FAC_OUT_QTY_2+S2_FAC_OUT_QTY_2+S3_FAC_OUT_QTY_2) SHIP_QTY_2
                        FROM RSUMFACMOV 
                       WHERE FACTORY NOT IN ('RETURN')
                    GROUP BY CM_KEY_1, MAT_ID, OPER, LOT_TYPE, MAT_VER, WORK_DATE, CM_KEY_3
                             )
                    GROUP BY FACTORY, MAT_ID, OPER, LOT_TYPE, MAT_VER, WORK_DATE, CM_KEY_3
                    )A
                  , MWIPMATDEF B 
              WHERE 1=1 
                AND A.FACTORY  = 'HMVA2' 
                AND A.FACTORY = B.FACTORY 
                AND A.MAT_ID = B.MAT_ID                
                AND A.MAT_VER = 1 
                AND B.MAT_VER = 1 
                AND B.MAT_TYPE = 'FG' 
                AND A.OPER IN ('AZ010')
                AND A.MAT_ID LIKE '%'  
                AND A.CM_KEY_3 LIKE 'P%'
                AND A.OPER NOT IN ('00001','00002') 
                AND A.WORK_DATE BETWEEN '20200701' AND '20200720' 
         )   
   WHERE TOTAL > 0           
GROUP BY MAT_GRP_1,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT_CMF_10, MAT_ID, OPER,  ' ', BASE_MAT_ID,VENDOR_MAT_ID
ORDER BY MAT_GRP_1,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT_CMF_10, MAT_ID, DECODE(OPER,'AISSUE','A0001','TISSUE','T0001','EISSUE','E0001',OPER),  ' ', BASE_MAT_ID,VENDOR_MAT_ID

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT A.CUST_TYPE, A.MAT_GRP_9 AS MAJOR, (SELECT DATA_1 FROM MGCMTBLDAT@RPTTOMES WHERE FACTORY = 'HMVA2' AND TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = A.MAT_GRP_1) AS CUSTOMER,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ' 
     , ROUND(SUM(MON_PLN) / 1000, 0) AS MON_PLN
     , ROUND(SUM(SHP_TTL) / 1000, 0) AS SHP_TTL
     , CASE WHEN SUM(MON_PLN) = 0 THEN 0
            ELSE ROUND((SUM(SHP_TTL) / (SUM(MON_PLN) / 31)) - 21, 1)
       END AS SHP_JINDO
     , ROUND((SUM(SHP_TTL) + SUM(WIP_TTL)) / 1000, 0) AS RCV_TTL
     , CASE WHEN SUM(MON_PLN) = 0 THEN 0
            ELSE ROUND(( ((SUM(SHP_TTL) + SUM(WIP_TTL)) / SUM(MON_PLN)) - ((21 + 5) / 31) ) * 31, 1)
       END AS RCV_JINDO
     , ROUND(SUM(WIP_TTL) / 1000, 0) AS WIP_TTL
     , CASE WHEN SUM(MON_PLN) = 0 THEN 0
            ELSE ROUND(SUM(WIP_TTL) / (SUM(MON_PLN) / 31), 1)
       END AS WIP_DAY
     , ROUND((SUM(MON_PLN) - SUM(SHP_TTL)) / 10.2189776667407 / 1000, 0) AS TARGET_QTY
     , ROUND(SUM(RCV_TODAY) / 1000, 0) AS RCV_TODAY
     , ROUND(SUM(OUT_DP) / 1000, 0) AS OUT_DP
     , ROUND(SUM(OUT_DA) / 1000, 0) AS OUT_DA
     , ROUND(SUM(OUT_WB) / 1000, 0) AS OUT_WB
     , ROUND(SUM(OUT_CLOSE) / 1000, 0) AS OUT_CLOSE
     , ROUND(SUM(SHP_TODAY) / 1000, 0) AS SHP_TODAY
  FROM (
        SELECT NVL((SELECT DATA_10 FROM MGCMTBLDAT WHERE TABLE_NAME = 'H_CUSTOMER' AND FACTORY = 'HMVA2' AND  KEY_1 = MAT_GRP_1), '-') AS CUST_TYPE
             , MAT.CONV_MAT_ID, MAT_GRP_1, MAT_GRP_2, MAT_GRP_3, MAT_GRP_4, MAT_GRP_5
             , MAT_GRP_6, MAT_GRP_7, MAT_GRP_8, MAT_GRP_9, MAT_GRP_10, MAT_CMF_10, MAT_CMF_11
             , NVL(CASE WHEN MAT.MAT_GRP_3 IN ('COB') THEN ROUND(PLN.MON_PLN/MAT.NET_DIE,0) ELSE PLN.MON_PLN END, 0) * PRICE AS MON_PLN
             , NVL(CASE WHEN MAT.MAT_GRP_3 IN ('COB') THEN ROUND(SHP.SHP_TTL/MAT.NET_DIE,0) ELSE SHP.SHP_TTL END, 0) * PRICE AS SHP_TTL 
             , NVL(CASE WHEN MAT.MAT_CMF_11 = 'JZH' THEN NVL(RCV.RCV_TTL,0)/MAT.COMP_CNT/2
                        WHEN MAT.MAT_CMF_11 IN ('DHL', 'DQZ', 'DRA', 'DQA', 'DND', 'DWG', 'DUT', 'HAU', 'HF8', 'HDM', 'HDR', 'HEN', 'HQA', 'HQC') THEN DECODE(MAT.MAT_GRP_5, '3rd', NVL(RCV.RCV_TTL,0)/MAT.COMP_CNT, 0)
                        WHEN MAT.MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND (MAT_ID LIKE 'SEKS%' OR MAT_ID LIKE 'SEKY%')) THEN DECODE(MAT.MAT_GRP_5, '2nd', NVL(RCV.RCV_TTL,0)/MAT.COMP_CNT, 0)
                        WHEN MAT.MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT.MAT_GRP_5 <> '-' THEN CASE WHEN MAT.MAT_GRP_5 IN ('1st','Merge') OR MAT.MAT_GRP_5 LIKE 'Middle%' THEN NVL(RCV.RCV_TTL,0)/MAT.COMP_CNT ELSE 0 END
                        WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN ROUND(RCV.RCV_TTL/NET_DIE,0)
                        ELSE NVL(RCV.RCV_TTL,0)/MAT.COMP_CNT
                   END,0) * PRICE AS RCV_TTL
             , NVL(CASE WHEN MAT.MAT_CMF_11 = 'JZH' THEN NVL(RCV.RCV_TODAY,0)/MAT.COMP_CNT/2
                        WHEN MAT.MAT_CMF_11 IN ('DHL', 'DQZ', 'DRA', 'DQA', 'DND', 'DWG', 'DUT', 'HAU', 'HF8', 'HDM', 'HDR', 'HEN', 'HQA', 'HQC') THEN DECODE(MAT.MAT_GRP_5, '3rd', NVL(RCV.RCV_TODAY,0)/MAT.COMP_CNT, 0)
                        WHEN MAT.MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND (MAT_ID LIKE 'SEKS%' OR MAT_ID LIKE 'SEKY%')) THEN DECODE(MAT.MAT_GRP_5, '2nd', NVL(RCV.RCV_TODAY,0)/MAT.COMP_CNT, 0)
                        WHEN MAT.MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT.MAT_GRP_5 <> '-' THEN CASE WHEN MAT.MAT_GRP_5 IN ('1st','Merge') OR MAT.MAT_GRP_5 LIKE 'Middle%' THEN NVL(RCV.RCV_TODAY,0)/MAT.COMP_CNT ELSE 0 END
                        WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN ROUND(RCV.RCV_TODAY/NET_DIE,0)
                        ELSE NVL(RCV.RCV_TODAY,0)/MAT.COMP_CNT
                   END,0) * PRICE AS RCV_TODAY
             , NVL(WIP.WIP_TTL,0) * PRICE AS WIP_TTL
             , NVL(WIP.WIP_AZ010,0) * PRICE AS WIP_AZ010
             , NVL(OUT_DP,0) * PRICE AS OUT_DP
             , NVL(OUT_DA,0) * PRICE AS OUT_DA
             , NVL(OUT_WB,0) * PRICE AS OUT_WB
             , NVL(OUT_CLOSE,0) * PRICE AS OUT_CLOSE
             , NVL(CASE WHEN MAT.MAT_GRP_3 IN ('COB') THEN ROUND(SHP.SHP_TODAY/MAT.NET_DIE,0) ELSE SHP.SHP_TODAY END, 0) * PRICE AS SHP_TODAY 
          FROM (
                SELECT A.MAT_ID, MAT_GRP_1, MAT_GRP_2, MAT_GRP_3, MAT_GRP_4, MAT_GRP_5
                     , MAT_GRP_6, MAT_GRP_7, MAT_GRP_8, MAT_GRP_9, MAT_GRP_10, MAT_CMF_10, MAT_CMF_11
                     , NET_DIE, COMP_CNT, HX_COMP_MIN, HX_COMP_MAX 
                     , CASE WHEN MAT_GRP_1 = 'SE' AND MAT_GRP_9 = 'MEMORY' THEN 'SEK_________-___' || SUBSTR(A.MAT_ID, -3) 
                            WHEN MAT_GRP_1 = 'HX' THEN MAT_CMF_10 
                            ELSE A.MAT_ID 
                       END CONV_MAT_ID 
                     , 1 AS PRICE
                  FROM VWIPMATDEF A
                 WHERE 1=1
                   AND A.FACTORY = 'HMVA2'
                   AND A.DELETE_FLAG = ' '
                   AND A.MAT_TYPE = 'FG' 
                   AND A.MAT_GRP_2 NOT IN ('-', 'PW') 
               ) MAT
             , (                
                SELECT MAT_ID
                     , SUM(RESV_FIELD1) AS MON_PLN
                  FROM (
                        SELECT MAT_ID, SUM(PLAN_QTY_ASSY) AS PLAN_QTY_ASSY, SUM(TO_NUMBER(DECODE(RESV_FIELD1,' ',0,RESV_FIELD1))) AS RESV_FIELD1
                          FROM CWIPPLNMON 
                         WHERE 1=1 
                           AND FACTORY = 'HMVA2'
                           AND PLAN_MONTH = '202007'
                         GROUP BY MAT_ID 
                       ) 
                 GROUP BY MAT_ID
               ) PLN
             , (
                SELECT MAT_ID
                     , SUM(SHP_QTY_1) AS SHP_TTL 
                     , SUM(DECODE(WORK_DATE, '20200721', SHP_QTY_1, 0)) AS SHP_TODAY
                  FROM VSUMWIPOUT
                 WHERE 1=1
                   AND WORK_DATE BETWEEN '20200701' AND '20200721' 
                   AND FACTORY = 'HMVA2' 
                   AND LOT_TYPE = 'W' 
                   AND CM_KEY_2 = 'PROD' 
                   AND CM_KEY_3 LIKE 'P%'
                   AND MAT_ID NOT LIKE 'HX%'
                 GROUP BY MAT_ID
                 UNION ALL
                SELECT MAT_ID
                     , SUM(SHP_QTY_1) AS SHP_TTL 
                     , SUM(DECODE(WORK_DATE, '20200721', SHP_QTY_1, 0)) AS SHP_TODAY
                  FROM VSUMWIPOUT_06
                 WHERE 1=1
                   AND WORK_DATE BETWEEN '20200701' AND '20200721' 
                   AND FACTORY = 'HMVA2' 
                   AND LOT_TYPE = 'W' 
                   AND CM_KEY_2 = 'PROD' 
                   AND CM_KEY_3 LIKE 'P%'
                   AND MAT_ID LIKE 'HX%'
                 GROUP BY MAT_ID
               ) SHP
             , (
                SELECT MAT_ID
                     , SUM(RCV_QTY_1) AS RCV_TTL
                     , SUM(DECODE(WORK_DATE, '20200721', RCV_QTY_1, 0)) AS RCV_TODAY
                  FROM VSUMWIPRCV
                 WHERE FACTORY = 'HMVA2'
                   AND WORK_DATE BETWEEN '20200701' AND '20200721'
                   AND LOT_TYPE = 'W'
                   AND CM_KEY_3 LIKE 'P%' 
                   AND MAT_ID NOT LIKE 'HX%'
                 GROUP BY MAT_ID
                 UNION ALL
                SELECT MAT_ID
                     , SUM(RCV_QTY_1) AS RCV_TTL
                     , SUM(DECODE(WORK_DATE, '20200721', RCV_QTY_1, 0)) AS RCV_TODAY
                  FROM VSUMWIPRCV_HX
                 WHERE FACTORY = 'HMVA2'
                   AND WORK_DATE BETWEEN '20200701' AND '20200721'
                   AND LOT_TYPE = 'W'
                   AND CM_KEY_3 LIKE 'P%' 
                   AND MAT_ID LIKE 'HX%'
                 GROUP BY MAT_ID
               ) RCV
             , (
                SELECT MAT_ID
                     , SUM(QTY) AS WIP_TTL
                     , SUM(DECODE(OPER, 'AZ010', QTY, 0)) AS WIP_AZ010
                  FROM (
                        SELECT MAT_ID, OPER, OPER_GRP_1, MAT_GRP_1, MAT_GRP_4, MAT_GRP_5
                             , CASE WHEN HX_COMP_MIN IS NOT NULL
                                         THEN (CASE WHEN HX_COMP_MIN <> HX_COMP_MAX AND OPER > HX_COMP_MIN AND OPER <= HX_COMP_MAX THEN QTY_1 / NVL(COMP_CNT / 2,1)
                                                    WHEN OPER <= HX_COMP_MAX THEN QTY_1 / NVL(COMP_CNT,1)
                                                    ELSE QTY_1 END)
                                    WHEN OPER <= 'A0395' THEN QTY_1 / NVL(COMP_CNT,1) 
                                    ELSE QTY_1 
                               END QTY 
                          FROM (
                                SELECT A.MAT_ID, B.OPER, B.OPER_GRP_1, C.MAT_GRP_1, C.MAT_GRP_4, C.MAT_GRP_5
                                     , CASE WHEN MAT_CMF_11 IN ('DHL', 'DQZ', 'DRA', 'DQA', 'DND', 'DWG', 'DUT', 'HAU', 'HF8', 'HDM', 'HDR', 'HEN', 'HQA', 'HQC') THEN (CASE WHEN MAT_GRP_5 IN ('3rd','Merge') THEN QTY_1
                                                                               WHEN MAT_GRP_5 LIKE 'Middle%' AND MAT_GRP_5 <> 'Middle' THEN QTY_1
                                                                               ELSE 0 END)
                                            WHEN MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND (MAT_ID LIKE 'SEKS%' OR MAT_ID LIKE 'SEKY%')) THEN CASE WHEN MAT_GRP_5 IN ('2nd','Merge') OR MAT_GRP_5 LIKE 'Middle%' THEN QTY_1 ELSE 0 END
                                            WHEN MAT_GRP_1 = 'HX' AND MESMGR.F_GET_ATTR_VALUE@RPTTOMES(A.MAT_ID, 'MAT_ETC', 'HX_VERSION') = 'A-376' THEN CASE WHEN MAT_GRP_5 IN ('5th','Merge') THEN QTY_1 ELSE 0 END
                                            WHEN MAT_GRP_1 = 'HX' AND MESMGR.F_GET_ATTR_VALUE@RPTTOMES(A.MAT_ID, 'MAT_ETC', 'HX_VERSION') IN ('A-445', 'A-525') THEN CASE WHEN MAT_GRP_5 IN ('6th','Merge') THEN QTY_1 ELSE 0 END
                                            WHEN MAT_GRP_1 = 'HX' AND MESMGR.F_GET_ATTR_VALUE@RPTTOMES(A.MAT_ID, 'MAT_ETC', 'HX_VERSION') = 'A-524' THEN CASE WHEN MAT_GRP_5 IN ('7th','Merge') THEN QTY_1 ELSE 0 END
                                            WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN CASE WHEN MAT_GRP_5 IN ('1st','Merge') OR MAT_GRP_5 LIKE 'Middle%' THEN QTY_1 ELSE 0 END
                                            WHEN MAT_GRP_3 IN ('COB', 'BGN') THEN ROUND(QTY_1/C.NET_DIE,0)
                                            ELSE QTY_1
                                       END AS QTY_1
                                     , C.COMP_CNT, C.HX_COMP_MIN, C.HX_COMP_MAX 
                                     , A.HOLD_CODE 
                                     , CASE WHEN A.HOLD_CODE = 'H72' AND A.OPER = 'A0000' THEN 'Y' ELSE 'N' END AS CK_STOCK_H72 
                                  FROM RWIPLOTSTS A  
                                     , MWIPOPRDEF B  
                                     , VWIPMATDEF C
                                 WHERE 1 = 1 
                                   AND A.FACTORY = B.FACTORY
                                   AND A.FACTORY = C.FACTORY
                                   AND A.OPER = B.OPER
                                   AND A.MAT_ID = C.MAT_ID
                                   AND A.FACTORY = 'HMVA2'  
                                   AND A.LOT_TYPE = 'W' 
                                   AND A.LOT_CMF_5 LIKE 'P%' 
                                   AND A.LOT_DEL_FLAG = ' ' 
                                   AND C.MAT_GRP_2 <> '-'
                                   AND C.DELETE_FLAG = ' '
                                   AND A.HOLD_CODE NOT IN ('H71','H54') 
                               )
                         WHERE CK_STOCK_H72 = 'N'
                       )
                 GROUP BY MAT_ID
               ) WIP
             , (
                SELECT MAT_ID
                     , SUM(CASE WHEN OPER IN ('A0200', 'A0230') THEN QTY ELSE 0 END) AS OUT_DP
                     , SUM(CASE WHEN OPER LIKE 'A04%' THEN QTY
                                WHEN OPER = 'A0333' THEN QTY
                                ELSE 0
                           END) AS OUT_DA                     
                     , SUM(CASE WHEN OPER LIKE 'A06%' THEN QTY ELSE 0 END) AS OUT_WB
                     , SUM(CASE WHEN OPER = 'A2100' THEN QTY ELSE 0 END) AS OUT_CLOSE 
                  FROM (    
                        SELECT MAT_ID, OPER, MAT_GRP_1, MAT_GRP_4, MAT_GRP_5
                             , CASE WHEN HX_COMP_MIN IS NOT NULL
                                         THEN (CASE WHEN HX_COMP_MIN <> HX_COMP_MAX AND OPER > HX_COMP_MIN AND OPER <= HX_COMP_MAX THEN QTY_1 / NVL(COMP_CNT / 2,1)
                                                    WHEN OPER <= HX_COMP_MAX THEN QTY_1 / NVL(COMP_CNT,1)
                                                    ELSE QTY_1 END)
                                    WHEN OPER <= 'A0395' THEN QTY_1 / NVL(COMP_CNT,1) 
                                    ELSE QTY_1 
                               END QTY
                          FROM (
                                SELECT MAT_ID, OPER, MAT_GRP_1, MAT_GRP_4, MAT_GRP_5, MAT_GRP_9, MAT_CMF_11
                                     , CASE WHEN MAT_CMF_11 IN ('DHL', 'DQZ', 'DRA', 'DQA', 'DND', 'DWG', 'DUT', 'HAU', 'HF8', 'HDM', 'HDR', 'HEN', 'HQA', 'HQC') THEN (CASE WHEN MAT_GRP_5 IN ('3rd','Merge') THEN END_QTY ELSE 0 END)
                                            WHEN MAT_ID LIKE 'SEK%' AND MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND (MAT_ID LIKE 'SEKS%' OR MAT_ID LIKE 'SEKY%'))
                                                 THEN (CASE WHEN MAT_GRP_5 IN ('2nd','Merge') THEN END_QTY ELSE 0 END)
                                            WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-'
                                                 THEN (CASE WHEN MAT_GRP_5 IN ('1st','Merge') THEN END_QTY ELSE 0 END)
                                            WHEN MAT_GRP_3 IN ('COB', 'BGN') THEN ROUND(END_QTY/NET_DIE,0)
                                            ELSE END_QTY
                                       END QTY_1 
                                     , COMP_CNT, HX_COMP_MIN, HX_COMP_MAX 
                                  FROM ( 
                                        SELECT A.OPER
                                             , (S1_END_QTY_1+S2_END_QTY_1+S3_END_QTY_1) AS END_QTY
                                             , B.*
                                          FROM RSUMWIPMOV A
                                             , VWIPMATDEF B
                                         WHERE 1=1
                                           AND A.FACTORY = B.FACTORY
                                           AND A.MAT_ID = B.MAT_ID
                                           AND A.FACTORY = 'HMVA2'
                                           AND A.WORK_DATE = '20200721'
                                           AND A.LOT_TYPE = 'W'
                                           AND A.CM_KEY_3 LIKE 'P%' 
                                           AND B.MAT_GRP_5 NOT LIKE 'Middle%'
                                           AND REGEXP_LIKE(A.OPER, 'A0200|A0230|A0333|A040*|A060*|A2100')
                                           AND ((A.OPER >= 'A0400' AND B.MAT_GRP_5 IN ('-', 'Merge')) OR (A.OPER < 'A0400'))
                                           AND A.MAT_ID NOT LIKE 'HX%'
                                         UNION ALL
                                        SELECT A.OPER
                                             , (S1_END_QTY_1+S2_END_QTY_1+S3_END_QTY_1) AS END_QTY
                                             , B.*
                                          FROM RSUMWIPMOV A
                                             , VWIPMATDEF B
                                         WHERE 1=1
                                           AND A.FACTORY = B.FACTORY
                                           AND A.MAT_ID = B.MAT_ID
                                           AND A.FACTORY = 'HMVA2'
                                           AND A.WORK_DATE = '20200721'
                                           AND A.LOT_TYPE = 'W'
                                           AND A.CM_KEY_3 LIKE 'P%' 
                                           AND B.MAT_GRP_5 NOT LIKE 'Middle%'
                                           AND REGEXP_LIKE(A.OPER, 'A0200|A0230|A0333|A040*|A060*|A2100')
                                           AND ((A.OPER >= 'A0400' AND B.MAT_GRP_5 IN ('-', 'Merge')) OR (A.OPER < 'A0400'))
                                           AND A.MAT_ID LIKE 'HX%'
                                       ) 
                               )
                       )
                 GROUP BY MAT_ID
               ) MOV
         WHERE 1=1
           AND MAT.MAT_ID = PLN.MAT_ID(+)
           AND MAT.MAT_ID = SHP.MAT_ID(+)
           AND MAT.MAT_ID = RCV.MAT_ID(+)
           AND MAT.MAT_ID = WIP.MAT_ID(+)
           AND MAT.MAT_ID = MOV.MAT_ID(+)
       ) A
 GROUP BY A.CUST_TYPE, A.MAT_GRP_9, A.MAT_GRP_1,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' '
 HAVING SUM(MON_PLN) + SUM(SHP_TTL) + SUM(WIP_TTL) + SUM(RCV_TODAY) + SUM(OUT_DP) + SUM(OUT_DA) + SUM(OUT_WB) + SUM(OUT_CLOSE) + SUM(SHP_TODAY) <> 0
 ORDER BY DECODE(CUST_TYPE, 'SEC', 1, 'Hynix', 2, 'Fabless', 3, 4), A.MAT_GRP_9, DECODE(A.MAT_GRP_1, 'SE', 1, 'HX', 2, 3),CUSTOMER,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' '

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
        SELECT (SELECT DATA_1 FROM MGCMTBLDAT WHERE TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = MAT_GRP_1 AND ROWNUM=1) AS CUSTOMER,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT_CMF_10, MAT_ID, OPER,  ' ', CASE WHEN OPER <= 'A0200' THEN VENDOR_MAT_ID ELSE BASE_MAT_ID END SAP_CODE
             , SUM(TOTAL) AS TOTAL
             , SUM(ASSY_END_QTY0 ) VAL0
             , SUM(ASSY_END_QTY1 ) VAL1
             , SUM(ASSY_END_QTY2 ) VAL2
             , SUM(ASSY_END_QTY3 ) VAL3
             , SUM(ASSY_END_QTY4 ) VAL4
             , SUM(ASSY_END_QTY5 ) VAL5
             , SUM(ASSY_END_QTY6 ) VAL6
             , SUM(ASSY_END_QTY7 ) VAL7
             , SUM(ASSY_END_QTY8 ) VAL8
             , SUM(ASSY_END_QTY9 ) VAL9
             , SUM(ASSY_END_QTY10 ) VAL10
             , SUM(ASSY_END_QTY11 ) VAL11
             , SUM(ASSY_END_QTY12 ) VAL12
             , SUM(ASSY_END_QTY13 ) VAL13
             , SUM(ASSY_END_QTY14 ) VAL14
             , SUM(ASSY_END_QTY15 ) VAL15
             , SUM(ASSY_END_QTY16 ) VAL16
             , SUM(ASSY_END_QTY17 ) VAL17
             , SUM(ASSY_END_QTY18 ) VAL18
             , SUM(ASSY_END_QTY19 ) VAL19
             , SUM(ASSY_END_QTY20 ) VAL20
             , SUM(ASSY_END_QTY21 ) VAL21
             , SUM(ASSY_END_QTY22 ) VAL22
             , SUM(ASSY_END_QTY23 ) VAL23
             , SUM(ASSY_END_QTY24 ) VAL24
             , SUM(ASSY_END_QTY25 ) VAL25
             , SUM(ASSY_END_QTY26 ) VAL26
             , SUM(ASSY_END_QTY27 ) VAL27
             , SUM(ASSY_END_QTY28 ) VAL28
             , SUM(ASSY_END_QTY29 ) VAL29
             , SUM(ASSY_END_QTY30 ) VAL30
             , SUM(ASSY_END_QTY31 ) VAL31
             , ROUND(SUM(TOTAL)/32, 1) AVG
          FROM (
               SELECT B.MAT_GRP_1,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', B.MAT_CMF_10, B.MAT_ID, A.OPER,  ' ', BASE_MAT_ID,VENDOR_MAT_ID 
                    , DECODE(WORK_DATE, '20200714', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY0
                    , DECODE(WORK_DATE, '20200715', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY1
                    , DECODE(WORK_DATE, '20200716', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY2
                    , DECODE(WORK_DATE, '20200717', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY3
                    , DECODE(WORK_DATE, '20200718', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY4
                    , DECODE(WORK_DATE, '20200719', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY5
                    , DECODE(WORK_DATE, '20200720', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY6
                    , DECODE(WORK_DATE, '20200721', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY7
                    , DECODE(WORK_DATE, '20200722', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY8
                    , DECODE(WORK_DATE, '20200723', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY9
                    , DECODE(WORK_DATE, '20200724', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY10
                    , DECODE(WORK_DATE, '20200725', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY11
                    , DECODE(WORK_DATE, '20200726', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY12
                    , DECODE(WORK_DATE, '20200727', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY13
                    , DECODE(WORK_DATE, '20200728', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY14
                    , DECODE(WORK_DATE, '20200729', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY15
                    , DECODE(WORK_DATE, '20200730', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY16
                    , DECODE(WORK_DATE, '20200731', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY17
                    , DECODE(WORK_DATE, '20200801', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY18
                    , DECODE(WORK_DATE, '20200802', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY19
                    , DECODE(WORK_DATE, '20200803', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY20
                    , DECODE(WORK_DATE, '20200804', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY21
                    , DECODE(WORK_DATE, '20200805', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY22
                    , DECODE(WORK_DATE, '20200806', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY23
                    , DECODE(WORK_DATE, '20200807', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY24
                    , DECODE(WORK_DATE, '20200808', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY25
                    , DECODE(WORK_DATE, '20200809', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY26
                    , DECODE(WORK_DATE, '20200810', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY27
                    , DECODE(WORK_DATE, '20200811', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY28
                    , DECODE(WORK_DATE, '20200812', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY29
                    , DECODE(WORK_DATE, '20200813', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY30
                    , DECODE(WORK_DATE, '20200814', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY31
                    , (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END) TOTAL
                 FROM (
                      SELECT FACTORY, MAT_ID, OPER, LOT_TYPE, MAT_VER, WORK_DATE, CM_KEY_3
                           , SUM(END_LOT) AS END_LOT
                           , SUM(END_QTY_1) AS END_QTY_1
                           , SUM(END_QTY_2) AS END_QTY_2
                           , SUM(SHIP_QTY_1) AS SHIP_QTY_1
                           , SUM(SHIP_QTY_2) AS SHIP_QTY_2
                        FROM (
                             SELECT FACTORY, MAT_ID, OPER, LOT_TYPE, MAT_VER, WORK_DATE, CM_KEY_3
                           , DECODE(SUBSTR(OPER,2,4),'0000',SUM(S1_OPER_IN_LOT+S2_OPER_IN_LOT+S3_OPER_IN_LOT),SUM(S1_END_LOT+S2_END_LOT+S3_END_LOT)) END_LOT
                           , DECODE(SUBSTR(OPER,2,4),'0000',SUM(S1_OPER_IN_QTY_1+S2_OPER_IN_QTY_1+S3_OPER_IN_QTY_1),SUM(S1_END_QTY_1+S2_END_QTY_1+S3_END_QTY_1+S1_END_RWK_QTY_1 + S2_END_RWK_QTY_1 + S3_END_RWK_QTY_1)) END_QTY_1
                           , DECODE(SUBSTR(OPER,2,4),'0000',SUM(S1_OPER_IN_QTY_2+S2_OPER_IN_QTY_2+S3_OPER_IN_QTY_2),SUM(S1_END_QTY_2+S2_END_QTY_2+S3_END_QTY_2+S1_END_RWK_QTY_2 + S2_END_RWK_QTY_2 + S3_END_RWK_QTY_2)) END_QTY_2
                           , 0 SHIP_QTY_1
                           , 0 SHIP_QTY_2
                        FROM RSUMWIPMOV 
                       WHERE OPER NOT IN ('AZ010','TZ010','F0000','EZ010', 'SZ010', 'BZ010')
                    GROUP BY FACTORY, MAT_ID, OPER, LOT_TYPE, MAT_VER, WORK_DATE, CM_KEY_3
                   UNION ALL
                      SELECT CM_KEY_1 AS FACTORY, MAT_ID
                           , DECODE(CM_KEY_1,'HMVA2','AZ010','HMKT1','TZ010','FGS','F0000','HMKE1','EZ010','HMKS1','SZ010', 'BZ010') OPER
                           , LOT_TYPE, MAT_VER,  WORK_DATE,CM_KEY_3
                           , 0 END_LOT
                           , 0 END_QTY_1
                           , 0 END_QTY_2
                           , SUM(S1_FAC_OUT_QTY_1+S2_FAC_OUT_QTY_1+S3_FAC_OUT_QTY_1) SHIP_QTY_1
                           , SUM(S1_FAC_OUT_QTY_2+S2_FAC_OUT_QTY_2+S3_FAC_OUT_QTY_2) SHIP_QTY_2
                        FROM RSUMFACMOV 
                       WHERE FACTORY NOT IN ('RETURN')
                    GROUP BY CM_KEY_1, MAT_ID, OPER, LOT_TYPE, MAT_VER, WORK_DATE, CM_KEY_3
                             )
                    GROUP BY FACTORY, MAT_ID, OPER, LOT_TYPE, MAT_VER, WORK_DATE, CM_KEY_3
                    )A
                  , MWIPMATDEF B 
              WHERE 1=1 
                AND A.FACTORY  = 'HMVA2' 
                AND A.FACTORY = B.FACTORY 
                AND A.MAT_ID = B.MAT_ID                
                AND A.MAT_VER = 1 
                AND B.MAT_VER = 1 
                AND B.MAT_TYPE = 'FG' 
                AND A.OPER LIKE '%'
                AND A.MAT_ID LIKE '%'  
                AND A.OPER NOT IN ('00001','00002') 
                AND A.WORK_DATE BETWEEN '20200714' AND '20200814' 
         )   
   WHERE TOTAL > 0           
GROUP BY MAT_GRP_1,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT_CMF_10, MAT_ID, OPER,  ' ', BASE_MAT_ID,VENDOR_MAT_ID
ORDER BY MAT_GRP_1,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT_CMF_10, MAT_ID, DECODE(OPER,'AISSUE','A0001','TISSUE','T0001','EISSUE','E0001',OPER),  ' ', BASE_MAT_ID,VENDOR_MAT_ID

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT A.CUST_TYPE, A.MAT_GRP_9 AS MAJOR, (SELECT DATA_1 FROM MGCMTBLDAT@RPTTOMES WHERE FACTORY = 'HMVA2' AND TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = A.MAT_GRP_1) AS CUSTOMER,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ' 
     , ROUND(SUM(MON_PLN) / 1000, 0) AS MON_PLN
     , ROUND(SUM(SHP_TTL) / 1000, 0) AS SHP_TTL
     , CASE WHEN SUM(MON_PLN) = 0 THEN 0
            ELSE ROUND((SUM(SHP_TTL) / (SUM(MON_PLN) / 31)) - 21, 1)
       END AS SHP_JINDO
     , ROUND((SUM(SHP_TTL) + SUM(WIP_TTL)) / 1000, 0) AS RCV_TTL
     , CASE WHEN SUM(MON_PLN) = 0 THEN 0
            ELSE ROUND(( ((SUM(SHP_TTL) + SUM(WIP_TTL)) / SUM(MON_PLN)) - ((21 + 5) / 31) ) * 31, 1)
       END AS RCV_JINDO
     , ROUND(SUM(WIP_TTL) / 1000, 0) AS WIP_TTL
     , CASE WHEN SUM(MON_PLN) = 0 THEN 0
            ELSE ROUND(SUM(WIP_TTL) / (SUM(MON_PLN) / 31), 1)
       END AS WIP_DAY
     , ROUND((SUM(MON_PLN) - SUM(SHP_TTL)) / 10.2176145117593 / 1000, 0) AS TARGET_QTY
     , ROUND(SUM(RCV_TODAY) / 1000, 0) AS RCV_TODAY
     , ROUND(SUM(OUT_DP) / 1000, 0) AS OUT_DP
     , ROUND(SUM(OUT_DA) / 1000, 0) AS OUT_DA
     , ROUND(SUM(OUT_WB) / 1000, 0) AS OUT_WB
     , ROUND(SUM(OUT_CLOSE) / 1000, 0) AS OUT_CLOSE
     , ROUND(SUM(SHP_TODAY) / 1000, 0) AS SHP_TODAY
  FROM (
        SELECT NVL((SELECT DATA_10 FROM MGCMTBLDAT WHERE TABLE_NAME = 'H_CUSTOMER' AND FACTORY = 'HMVA2' AND  KEY_1 = MAT_GRP_1), '-') AS CUST_TYPE
             , MAT.CONV_MAT_ID, MAT_GRP_1, MAT_GRP_2, MAT_GRP_3, MAT_GRP_4, MAT_GRP_5
             , MAT_GRP_6, MAT_GRP_7, MAT_GRP_8, MAT_GRP_9, MAT_GRP_10, MAT_CMF_10, MAT_CMF_11
             , NVL(CASE WHEN MAT.MAT_GRP_3 IN ('COB') THEN ROUND(PLN.MON_PLN/MAT.NET_DIE,0) ELSE PLN.MON_PLN END, 0) * PRICE AS MON_PLN
             , NVL(CASE WHEN MAT.MAT_GRP_3 IN ('COB') THEN ROUND(SHP.SHP_TTL/MAT.NET_DIE,0) ELSE SHP.SHP_TTL END, 0) * PRICE AS SHP_TTL 
             , NVL(CASE WHEN MAT.MAT_CMF_11 = 'JZH' THEN NVL(RCV.RCV_TTL,0)/MAT.COMP_CNT/2
                        WHEN MAT.MAT_CMF_11 IN ('DHL', 'DQZ', 'DRA', 'DQA', 'DND', 'DWG', 'DUT', 'HAU', 'HF8', 'HDM', 'HDR', 'HEN', 'HQA', 'HQC') THEN DECODE(MAT.MAT_GRP_5, '3rd', NVL(RCV.RCV_TTL,0)/MAT.COMP_CNT, 0)
                        WHEN MAT.MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND (MAT_ID LIKE 'SEKS%' OR MAT_ID LIKE 'SEKY%')) THEN DECODE(MAT.MAT_GRP_5, '2nd', NVL(RCV.RCV_TTL,0)/MAT.COMP_CNT, 0)
                        WHEN MAT.MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT.MAT_GRP_5 <> '-' THEN CASE WHEN MAT.MAT_GRP_5 IN ('1st','Merge') OR MAT.MAT_GRP_5 LIKE 'Middle%' THEN NVL(RCV.RCV_TTL,0)/MAT.COMP_CNT ELSE 0 END
                        WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN ROUND(RCV.RCV_TTL/NET_DIE,0)
                        ELSE NVL(RCV.RCV_TTL,0)/MAT.COMP_CNT
                   END,0) * PRICE AS RCV_TTL
             , NVL(CASE WHEN MAT.MAT_CMF_11 = 'JZH' THEN NVL(RCV.RCV_TODAY,0)/MAT.COMP_CNT/2
                        WHEN MAT.MAT_CMF_11 IN ('DHL', 'DQZ', 'DRA', 'DQA', 'DND', 'DWG', 'DUT', 'HAU', 'HF8', 'HDM', 'HDR', 'HEN', 'HQA', 'HQC') THEN DECODE(MAT.MAT_GRP_5, '3rd', NVL(RCV.RCV_TODAY,0)/MAT.COMP_CNT, 0)
                        WHEN MAT.MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND (MAT_ID LIKE 'SEKS%' OR MAT_ID LIKE 'SEKY%')) THEN DECODE(MAT.MAT_GRP_5, '2nd', NVL(RCV.RCV_TODAY,0)/MAT.COMP_CNT, 0)
                        WHEN MAT.MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT.MAT_GRP_5 <> '-' THEN CASE WHEN MAT.MAT_GRP_5 IN ('1st','Merge') OR MAT.MAT_GRP_5 LIKE 'Middle%' THEN NVL(RCV.RCV_TODAY,0)/MAT.COMP_CNT ELSE 0 END
                        WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN ROUND(RCV.RCV_TODAY/NET_DIE,0)
                        ELSE NVL(RCV.RCV_TODAY,0)/MAT.COMP_CNT
                   END,0) * PRICE AS RCV_TODAY
             , NVL(WIP.WIP_TTL,0) * PRICE AS WIP_TTL
             , NVL(WIP.WIP_AZ010,0) * PRICE AS WIP_AZ010
             , NVL(OUT_DP,0) * PRICE AS OUT_DP
             , NVL(OUT_DA,0) * PRICE AS OUT_DA
             , NVL(OUT_WB,0) * PRICE AS OUT_WB
             , NVL(OUT_CLOSE,0) * PRICE AS OUT_CLOSE
             , NVL(CASE WHEN MAT.MAT_GRP_3 IN ('COB') THEN ROUND(SHP.SHP_TODAY/MAT.NET_DIE,0) ELSE SHP.SHP_TODAY END, 0) * PRICE AS SHP_TODAY 
          FROM (
                SELECT A.MAT_ID, MAT_GRP_1, MAT_GRP_2, MAT_GRP_3, MAT_GRP_4, MAT_GRP_5
                     , MAT_GRP_6, MAT_GRP_7, MAT_GRP_8, MAT_GRP_9, MAT_GRP_10, MAT_CMF_10, MAT_CMF_11
                     , NET_DIE, COMP_CNT, HX_COMP_MIN, HX_COMP_MAX 
                     , CASE WHEN MAT_GRP_1 = 'SE' AND MAT_GRP_9 = 'MEMORY' THEN 'SEK_________-___' || SUBSTR(A.MAT_ID, -3) 
                            WHEN MAT_GRP_1 = 'HX' THEN MAT_CMF_10 
                            ELSE A.MAT_ID 
                       END CONV_MAT_ID 
                     , 1 AS PRICE
                  FROM VWIPMATDEF A
                 WHERE 1=1
                   AND A.FACTORY = 'HMVA2'
                   AND A.DELETE_FLAG = ' '
                   AND A.MAT_TYPE = 'FG' 
                   AND A.MAT_GRP_2 NOT IN ('-', 'PW') 
               ) MAT
             , (                
                SELECT MAT_ID
                     , SUM(RESV_FIELD1) AS MON_PLN
                  FROM (
                        SELECT MAT_ID, SUM(PLAN_QTY_ASSY) AS PLAN_QTY_ASSY, SUM(TO_NUMBER(DECODE(RESV_FIELD1,' ',0,RESV_FIELD1))) AS RESV_FIELD1
                          FROM CWIPPLNMON 
                         WHERE 1=1 
                           AND FACTORY = 'HMVA2'
                           AND PLAN_MONTH = '202007'
                         GROUP BY MAT_ID 
                       ) 
                 GROUP BY MAT_ID
               ) PLN
             , (
                SELECT MAT_ID
                     , SUM(SHP_QTY_1) AS SHP_TTL 
                     , SUM(DECODE(WORK_DATE, '20200721', SHP_QTY_1, 0)) AS SHP_TODAY
                  FROM VSUMWIPOUT
                 WHERE 1=1
                   AND WORK_DATE BETWEEN '20200701' AND '20200721' 
                   AND FACTORY = 'HMVA2' 
                   AND LOT_TYPE = 'W' 
                   AND CM_KEY_2 = 'PROD' 
                   AND CM_KEY_3 LIKE 'P%'
                   AND MAT_ID NOT LIKE 'HX%'
                 GROUP BY MAT_ID
                 UNION ALL
                SELECT MAT_ID
                     , SUM(SHP_QTY_1) AS SHP_TTL 
                     , SUM(DECODE(WORK_DATE, '20200721', SHP_QTY_1, 0)) AS SHP_TODAY
                  FROM VSUMWIPOUT_06
                 WHERE 1=1
                   AND WORK_DATE BETWEEN '20200701' AND '20200721' 
                   AND FACTORY = 'HMVA2' 
                   AND LOT_TYPE = 'W' 
                   AND CM_KEY_2 = 'PROD' 
                   AND CM_KEY_3 LIKE 'P%'
                   AND MAT_ID LIKE 'HX%'
                 GROUP BY MAT_ID
               ) SHP
             , (
                SELECT MAT_ID
                     , SUM(RCV_QTY_1) AS RCV_TTL
                     , SUM(DECODE(WORK_DATE, '20200721', RCV_QTY_1, 0)) AS RCV_TODAY
                  FROM VSUMWIPRCV
                 WHERE FACTORY = 'HMVA2'
                   AND WORK_DATE BETWEEN '20200701' AND '20200721'
                   AND LOT_TYPE = 'W'
                   AND CM_KEY_3 LIKE 'P%' 
                   AND MAT_ID NOT LIKE 'HX%'
                 GROUP BY MAT_ID
                 UNION ALL
                SELECT MAT_ID
                     , SUM(RCV_QTY_1) AS RCV_TTL
                     , SUM(DECODE(WORK_DATE, '20200721', RCV_QTY_1, 0)) AS RCV_TODAY
                  FROM VSUMWIPRCV_HX
                 WHERE FACTORY = 'HMVA2'
                   AND WORK_DATE BETWEEN '20200701' AND '20200721'
                   AND LOT_TYPE = 'W'
                   AND CM_KEY_3 LIKE 'P%' 
                   AND MAT_ID LIKE 'HX%'
                 GROUP BY MAT_ID
               ) RCV
             , (
                SELECT MAT_ID
                     , SUM(QTY) AS WIP_TTL
                     , SUM(DECODE(OPER, 'AZ010', QTY, 0)) AS WIP_AZ010
                  FROM (
                        SELECT MAT_ID, OPER, OPER_GRP_1, MAT_GRP_1, MAT_GRP_4, MAT_GRP_5
                             , CASE WHEN HX_COMP_MIN IS NOT NULL
                                         THEN (CASE WHEN HX_COMP_MIN <> HX_COMP_MAX AND OPER > HX_COMP_MIN AND OPER <= HX_COMP_MAX THEN QTY_1 / NVL(COMP_CNT / 2,1)
                                                    WHEN OPER <= HX_COMP_MAX THEN QTY_1 / NVL(COMP_CNT,1)
                                                    ELSE QTY_1 END)
                                    WHEN OPER <= 'A0395' THEN QTY_1 / NVL(COMP_CNT,1) 
                                    ELSE QTY_1 
                               END QTY 
                          FROM (
                                SELECT A.MAT_ID, B.OPER, B.OPER_GRP_1, C.MAT_GRP_1, C.MAT_GRP_4, C.MAT_GRP_5
                                     , CASE WHEN MAT_CMF_11 IN ('DHL', 'DQZ', 'DRA', 'DQA', 'DND', 'DWG', 'DUT', 'HAU', 'HF8', 'HDM', 'HDR', 'HEN', 'HQA', 'HQC') THEN (CASE WHEN MAT_GRP_5 IN ('3rd','Merge') THEN QTY_1
                                                                               WHEN MAT_GRP_5 LIKE 'Middle%' AND MAT_GRP_5 <> 'Middle' THEN QTY_1
                                                                               ELSE 0 END)
                                            WHEN MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND (MAT_ID LIKE 'SEKS%' OR MAT_ID LIKE 'SEKY%')) THEN CASE WHEN MAT_GRP_5 IN ('2nd','Merge') OR MAT_GRP_5 LIKE 'Middle%' THEN QTY_1 ELSE 0 END
                                            WHEN MAT_GRP_1 = 'HX' AND MESMGR.F_GET_ATTR_VALUE@RPTTOMES(A.MAT_ID, 'MAT_ETC', 'HX_VERSION') = 'A-376' THEN CASE WHEN MAT_GRP_5 IN ('5th','Merge') THEN QTY_1 ELSE 0 END
                                            WHEN MAT_GRP_1 = 'HX' AND MESMGR.F_GET_ATTR_VALUE@RPTTOMES(A.MAT_ID, 'MAT_ETC', 'HX_VERSION') IN ('A-445', 'A-525') THEN CASE WHEN MAT_GRP_5 IN ('6th','Merge') THEN QTY_1 ELSE 0 END
                                            WHEN MAT_GRP_1 = 'HX' AND MESMGR.F_GET_ATTR_VALUE@RPTTOMES(A.MAT_ID, 'MAT_ETC', 'HX_VERSION') = 'A-524' THEN CASE WHEN MAT_GRP_5 IN ('7th','Merge') THEN QTY_1 ELSE 0 END
                                            WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN CASE WHEN MAT_GRP_5 IN ('1st','Merge') OR MAT_GRP_5 LIKE 'Middle%' THEN QTY_1 ELSE 0 END
                                            WHEN MAT_GRP_3 IN ('COB', 'BGN') THEN ROUND(QTY_1/C.NET_DIE,0)
                                            ELSE QTY_1
                                       END AS QTY_1
                                     , C.COMP_CNT, C.HX_COMP_MIN, C.HX_COMP_MAX 
                                     , A.HOLD_CODE 
                                     , CASE WHEN A.HOLD_CODE = 'H72' AND A.OPER = 'A0000' THEN 'Y' ELSE 'N' END AS CK_STOCK_H72 
                                  FROM RWIPLOTSTS A  
                                     , MWIPOPRDEF B  
                                     , VWIPMATDEF C
                                 WHERE 1 = 1 
                                   AND A.FACTORY = B.FACTORY
                                   AND A.FACTORY = C.FACTORY
                                   AND A.OPER = B.OPER
                                   AND A.MAT_ID = C.MAT_ID
                                   AND A.FACTORY = 'HMVA2'  
                                   AND A.LOT_TYPE = 'W' 
                                   AND A.LOT_CMF_5 LIKE 'P%' 
                                   AND A.LOT_DEL_FLAG = ' ' 
                                   AND C.MAT_GRP_2 <> '-'
                                   AND C.DELETE_FLAG = ' '
                                   AND A.HOLD_CODE NOT IN ('H71','H54') 
                               )
                         WHERE CK_STOCK_H72 = 'N'
                       )
                 GROUP BY MAT_ID
               ) WIP
             , (
                SELECT MAT_ID
                     , SUM(CASE WHEN OPER IN ('A0200', 'A0230') THEN QTY ELSE 0 END) AS OUT_DP
                     , SUM(CASE WHEN OPER LIKE 'A04%' THEN QTY
                                WHEN OPER = 'A0333' THEN QTY
                                ELSE 0
                           END) AS OUT_DA                     
                     , SUM(CASE WHEN OPER LIKE 'A06%' THEN QTY ELSE 0 END) AS OUT_WB
                     , SUM(CASE WHEN OPER = 'A2100' THEN QTY ELSE 0 END) AS OUT_CLOSE 
                  FROM (    
                        SELECT MAT_ID, OPER, MAT_GRP_1, MAT_GRP_4, MAT_GRP_5
                             , CASE WHEN HX_COMP_MIN IS NOT NULL
                                         THEN (CASE WHEN HX_COMP_MIN <> HX_COMP_MAX AND OPER > HX_COMP_MIN AND OPER <= HX_COMP_MAX THEN QTY_1 / NVL(COMP_CNT / 2,1)
                                                    WHEN OPER <= HX_COMP_MAX THEN QTY_1 / NVL(COMP_CNT,1)
                                                    ELSE QTY_1 END)
                                    WHEN OPER <= 'A0395' THEN QTY_1 / NVL(COMP_CNT,1) 
                                    ELSE QTY_1 
                               END QTY
                          FROM (
                                SELECT MAT_ID, OPER, MAT_GRP_1, MAT_GRP_4, MAT_GRP_5, MAT_GRP_9, MAT_CMF_11
                                     , CASE WHEN MAT_CMF_11 IN ('DHL', 'DQZ', 'DRA', 'DQA', 'DND', 'DWG', 'DUT', 'HAU', 'HF8', 'HDM', 'HDR', 'HEN', 'HQA', 'HQC') THEN (CASE WHEN MAT_GRP_5 IN ('3rd','Merge') THEN END_QTY ELSE 0 END)
                                            WHEN MAT_ID LIKE 'SEK%' AND MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND (MAT_ID LIKE 'SEKS%' OR MAT_ID LIKE 'SEKY%'))
                                                 THEN (CASE WHEN MAT_GRP_5 IN ('2nd','Merge') THEN END_QTY ELSE 0 END)
                                            WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-'
                                                 THEN (CASE WHEN MAT_GRP_5 IN ('1st','Merge') THEN END_QTY ELSE 0 END)
                                            WHEN MAT_GRP_3 IN ('COB', 'BGN') THEN ROUND(END_QTY/NET_DIE,0)
                                            ELSE END_QTY
                                       END QTY_1 
                                     , COMP_CNT, HX_COMP_MIN, HX_COMP_MAX 
                                  FROM ( 
                                        SELECT A.OPER
                                             , (S1_END_QTY_1+S2_END_QTY_1+S3_END_QTY_1) AS END_QTY
                                             , B.*
                                          FROM RSUMWIPMOV A
                                             , VWIPMATDEF B
                                         WHERE 1=1
                                           AND A.FACTORY = B.FACTORY
                                           AND A.MAT_ID = B.MAT_ID
                                           AND A.FACTORY = 'HMVA2'
                                           AND A.WORK_DATE = '20200721'
                                           AND A.LOT_TYPE = 'W'
                                           AND A.CM_KEY_3 LIKE 'P%' 
                                           AND B.MAT_GRP_5 NOT LIKE 'Middle%'
                                           AND REGEXP_LIKE(A.OPER, 'A0200|A0230|A0333|A040*|A060*|A2100')
                                           AND ((A.OPER >= 'A0400' AND B.MAT_GRP_5 IN ('-', 'Merge')) OR (A.OPER < 'A0400'))
                                           AND A.MAT_ID NOT LIKE 'HX%'
                                         UNION ALL
                                        SELECT A.OPER
                                             , (S1_END_QTY_1+S2_END_QTY_1+S3_END_QTY_1) AS END_QTY
                                             , B.*
                                          FROM RSUMWIPMOV A
                                             , VWIPMATDEF B
                                         WHERE 1=1
                                           AND A.FACTORY = B.FACTORY
                                           AND A.MAT_ID = B.MAT_ID
                                           AND A.FACTORY = 'HMVA2'
                                           AND A.WORK_DATE = '20200721'
                                           AND A.LOT_TYPE = 'W'
                                           AND A.CM_KEY_3 LIKE 'P%' 
                                           AND B.MAT_GRP_5 NOT LIKE 'Middle%'
                                           AND REGEXP_LIKE(A.OPER, 'A0200|A0230|A0333|A040*|A060*|A2100')
                                           AND ((A.OPER >= 'A0400' AND B.MAT_GRP_5 IN ('-', 'Merge')) OR (A.OPER < 'A0400'))
                                           AND A.MAT_ID LIKE 'HX%'
                                       ) 
                               )
                       )
                 GROUP BY MAT_ID
               ) MOV
         WHERE 1=1
           AND MAT.MAT_ID = PLN.MAT_ID(+)
           AND MAT.MAT_ID = SHP.MAT_ID(+)
           AND MAT.MAT_ID = RCV.MAT_ID(+)
           AND MAT.MAT_ID = WIP.MAT_ID(+)
           AND MAT.MAT_ID = MOV.MAT_ID(+)
       ) A
 GROUP BY A.CUST_TYPE, A.MAT_GRP_9, A.MAT_GRP_1,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' '
 HAVING SUM(MON_PLN) + SUM(SHP_TTL) + SUM(WIP_TTL) + SUM(RCV_TODAY) + SUM(OUT_DP) + SUM(OUT_DA) + SUM(OUT_WB) + SUM(OUT_CLOSE) + SUM(SHP_TODAY) <> 0
 ORDER BY DECODE(CUST_TYPE, 'SEC', 1, 'Hynix', 2, 'Fabless', 3, 4), A.MAT_GRP_9, DECODE(A.MAT_GRP_1, 'SE', 1, 'HX', 2, 3),CUSTOMER,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' '

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
SELECT SYS_DATE     , SUBSTR(SYS_DATE, 5, 2)||'월 '||SUBSTR(SYS_DATE, 7, 2)||'일' AS CONV     , TO_CHAR(TO_DATE('20200721', 'YYYYMMDD'), 'DY') AS DY     , TO_CHAR(TO_DATE(SYS_DATE, 'YYYYMMDD'), 'DY') AS DY2  FROM MWIPCALDEF WHERE CALENDAR_ID = 'OTD'   AND (PLAN_YEAR, PLAN_WEEK) = (SELECT PLAN_YEAR, PLAN_WEEK FROM MWIPCALDEF WHERE CALENDAR_ID = 'OTD' AND SYS_DATE = '20200721')  ORDER BY SYS_DATE
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE) AS START_DAY 
     , MAX(SYS_DATE) AS END_DAY 
     , PLAN_YEAR||DECODE(LENGTH(PLAN_WEEK), 1, '0'||PLAN_WEEK, PLAN_WEEK) AS WEEK
  FROM MWIPCALDEF 
 WHERE CALENDAR_ID = 'OTD'
   AND (PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) IN ( 
                                                SELECT WW
                                                  FROM (
                                                        SELECT WW
                                                             , ROW_NUMBER() OVER(ORDER BY WW) AS RNK
                                                          FROM (
                                                                SELECT DISTINCT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW
                                                                  FROM MWIPCALDEF
                                                                 WHERE CALENDAR_ID = 'OTD'
                                                                   AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') >= (
                                                                                                              SELECT MAX(PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) AS WW
                                                                                                                FROM MWIPCALDEF
                                                                                                               WHERE CALENDAR_ID = 'OTD'
                                                                                                                 AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') < (SELECT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW FROM MWIPCALDEF WHERE CALENDAR_ID = 'OTD' AND SYS_DATE = '20200721')
                                                                                                                 AND SYS_DATE >= TO_CHAR(TO_DATE('20200721', 'YYYYMMDD')-14, 'YYYYMMDD')
                                                                                                             )
                                                               ) 
                                                       )
                                                 WHERE RNK <= 7
                                               ) 
 GROUP BY PLAN_YEAR, PLAN_WEEK 
 ORDER BY PLAN_YEAR, PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT LANGUAGE_2 FROM RWEBFUNDEF WHERE FUNC_NAME = 'PRD011012'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT PLAN_WEEK V1    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_DATE = TO_CHAR(SYSDATE,'yyyymmdd')      AND ROWNUM = 1  
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT LANGUAGE_2 FROM RWEBFUNDEF WHERE FUNC_NAME = 'TAT050401'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT FACTORY Code, FAC_DESC Data
  FROM MWIPFACDEF
 WHERE FAC_GRP_5 = 'Y' 
 ORDER BY FAC_GRP_4 ASC
-------------------------------------------------------------
SELECT OPER, OPER_DESC  FROM MWIPOPRDEF
  WHERE FACTORY = 'HMVA2'  AND OPER NOT IN ('00001', '00002') AND OPER NOT LIKE 'V%' ORDER BY DECODE(OPER_CMF_2, ' ', 99999, TO_NUMBER(OPER_CMF_2)), OPER
-------------------------------------------------------------
SELECT OPER, OPER_DESC  FROM MWIPOPRDEF
  WHERE FACTORY = 'HMVA2'  AND OPER NOT IN ('00001', '00002') AND OPER NOT LIKE 'V%' ORDER BY DECODE(OPER_CMF_2, ' ', 99999, TO_NUMBER(OPER_CMF_2)), OPER
-------------------------------------------------------------
SELECT OPER, OPER_DESC  FROM MWIPOPRDEF
  WHERE FACTORY = 'HMVA2'  AND OPER NOT IN ('00001', '00002') AND OPER NOT LIKE 'V%' ORDER BY DECODE(OPER_CMF_2, ' ', 99999, TO_NUMBER(OPER_CMF_2)), OPER
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT OPER_GRP_1 
  FROM MWIPOPRDEF 
 WHERE 1=1 
   AND FACTORY='HMVA2'
   AND DECODE(OPER_CMF_2, ' ', 99999, TO_NUMBER(OPER_CMF_2)) BETWEEN (SELECT OPER_CMF_2 FROM MWIPOPRDEF WHERE OPER = 'A0005') AND (SELECT OPER_CMF_2 FROM MWIPOPRDEF WHERE OPER = 'A2350') 
   AND OPER_CMF_4 <> ' ' 
 GROUP BY OPER_GRP_1
 ORDER BY TO_NUMBER(MIN(OPER_CMF_4)) ASC

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT DAT.OPER 
     , DAT.TOT_TAT 
 FROM( 
       SELECT TAT.OPER 
            , ROUND(SUM(TAT.TOTAL_TAT_QTY)/SUM(SHIP.SHIP_QTY),2) AS TOT_TAT 
        FROM( 
              SELECT TAT.MAT_ID 
                   , TAT.SHIP_DATE 
                   , OPR.OPER_GRP_1 AS OPER 
                   , SUM(TOTAL_TAT_QTY_P) AS TOTAL_TAT_QTY 
                FROM CSUMTATMAT@RPTTOMES TAT 
                   , MWIPOPRDEF OPR 
                   , MWIPMATDEF MAT 
               WHERE TAT.FACTORY = 'HMVA2'
                 AND TAT.FACTORY = MAT.FACTORY
                 AND TAT.MAT_ID = MAT.MAT_ID
                 AND MAT.MAT_VER = 1
                 AND TAT.TOTAL_TIME <> 0
                 AND OPR.OPER_GRP_1 NOT IN (' ')
                 AND TAT.FACTORY = OPR.FACTORY
                 AND OPR.OPER = TAT.OPER
                 AND TAT.OPER BETWEEN 'A0005' AND 'A2350'  
                 AND TAT.SHIP_DATE BETWEEN '20200701' AND '20200720' 
               GROUP BY TAT.MAT_ID, TAT.SHIP_DATE, OPR.OPER_GRP_1 
            ) TAT
          , (
              SELECT TAT.FACTORY 
                   , TAT.MAT_ID 
                   , TAT.SHIP_DATE AS WORK_DATE 
                   , SHIP_QTY_P AS SHIP_QTY 
                FROM CSUMTATMAT@RPTTOMES TAT 
                   , MWIPMATDEF MAT 
               WHERE 1=1      
                 AND TAT.FACTORY='HMVA2'      
                 AND TAT.FACTORY = MAT.FACTORY      
                 AND TAT.MAT_ID = MAT.MAT_ID      
                 AND MAT.DELETE_FLAG = ' '      
                 AND OPER ='AZ010'      
                 AND TAT.SHIP_DATE BETWEEN '20200701' AND '20200720' 
            ) SHIP     
        WHERE 1=1 
          AND TAT.MAT_ID = SHIP.MAT_ID 
          AND TAT.SHIP_DATE = SHIP.WORK_DATE 
        GROUP BY TAT.OPER 
     ) DAT
   , (
       SELECT * 
        FROM(  
              SELECT OPER_GRP_1 
                   , TO_NUMBER(OPER_CMF_4) 
                   , ROW_NUMBER() OVER(PARTITION BY TO_NUMBER(OPER_CMF_4) ORDER BY TO_NUMBER(OPER_CMF_4)) AS RN 
                FROM MWIPOPRDEF 
               WHERE OPER_CMF_4 != ' ' 
                 AND FACTORY = 'HMVA2' 
            )  
        WHERE RN=1  
     ) SORT
 WHERE DAT.OPER = SORT.OPER_GRP_1 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT SHIP_DATE, MAT_GRP_1, MAT_CMF_10,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' '  
     , ROUND(SUM(CTOT),2) AS  CTOT 
     , ROUND(SUM(C0),2) AS C0
     , ROUND(SUM(CTAT_QTY0),2) AS CTAT_QTY0
     , ROUND(SUM(CSHIP_QTY0),2) AS CSHIP_QTY0
     , ROUND(SUM(C1),2) AS C1
     , ROUND(SUM(CTAT_QTY1),2) AS CTAT_QTY1
     , ROUND(SUM(CSHIP_QTY1),2) AS CSHIP_QTY1
     , ROUND(SUM(C2),2) AS C2
     , ROUND(SUM(CTAT_QTY2),2) AS CTAT_QTY2
     , ROUND(SUM(CSHIP_QTY2),2) AS CSHIP_QTY2
     , ROUND(SUM(C3),2) AS C3
     , ROUND(SUM(CTAT_QTY3),2) AS CTAT_QTY3
     , ROUND(SUM(CSHIP_QTY3),2) AS CSHIP_QTY3
     , ROUND(SUM(C4),2) AS C4
     , ROUND(SUM(CTAT_QTY4),2) AS CTAT_QTY4
     , ROUND(SUM(CSHIP_QTY4),2) AS CSHIP_QTY4
     , ROUND(SUM(C5),2) AS C5
     , ROUND(SUM(CTAT_QTY5),2) AS CTAT_QTY5
     , ROUND(SUM(CSHIP_QTY5),2) AS CSHIP_QTY5
     , ROUND(SUM(C6),2) AS C6
     , ROUND(SUM(CTAT_QTY6),2) AS CTAT_QTY6
     , ROUND(SUM(CSHIP_QTY6),2) AS CSHIP_QTY6
     , ROUND(SUM(C7),2) AS C7
     , ROUND(SUM(CTAT_QTY7),2) AS CTAT_QTY7
     , ROUND(SUM(CSHIP_QTY7),2) AS CSHIP_QTY7
     , ROUND(SUM(C8),2) AS C8
     , ROUND(SUM(CTAT_QTY8),2) AS CTAT_QTY8
     , ROUND(SUM(CSHIP_QTY8),2) AS CSHIP_QTY8
     , ROUND(SUM(C9),2) AS C9
     , ROUND(SUM(CTAT_QTY9),2) AS CTAT_QTY9
     , ROUND(SUM(CSHIP_QTY9),2) AS CSHIP_QTY9
     , ROUND(SUM(C10),2) AS C10
     , ROUND(SUM(CTAT_QTY10),2) AS CTAT_QTY10
     , ROUND(SUM(CSHIP_QTY10),2) AS CSHIP_QTY10
     , ROUND(SUM(C11),2) AS C11
     , ROUND(SUM(CTAT_QTY11),2) AS CTAT_QTY11
     , ROUND(SUM(CSHIP_QTY11),2) AS CSHIP_QTY11
     , ROUND(SUM(C12),2) AS C12
     , ROUND(SUM(CTAT_QTY12),2) AS CTAT_QTY12
     , ROUND(SUM(CSHIP_QTY12),2) AS CSHIP_QTY12
     , ROUND(SUM(C13),2) AS C13
     , ROUND(SUM(CTAT_QTY13),2) AS CTAT_QTY13
     , ROUND(SUM(CSHIP_QTY13),2) AS CSHIP_QTY13
     , ROUND(SUM(C14),2) AS C14
     , ROUND(SUM(CTAT_QTY14),2) AS CTAT_QTY14
     , ROUND(SUM(CSHIP_QTY14),2) AS CSHIP_QTY14
     , ROUND(SUM(C15),2) AS C15
     , ROUND(SUM(CTAT_QTY15),2) AS CTAT_QTY15
     , ROUND(SUM(CSHIP_QTY15),2) AS CSHIP_QTY15
     , ROUND(SUM(C16),2) AS C16
     , ROUND(SUM(CTAT_QTY16),2) AS CTAT_QTY16
     , ROUND(SUM(CSHIP_QTY16),2) AS CSHIP_QTY16
     , ROUND(SUM(C17),2) AS C17
     , ROUND(SUM(CTAT_QTY17),2) AS CTAT_QTY17
     , ROUND(SUM(CSHIP_QTY17),2) AS CSHIP_QTY17
  FROM ( 
        SELECT SHIP_DATE, MAT_GRP_1, MAT_CMF_10,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ' 
             , ROUND(SUM(DECODE(SHIP_QTY, 0, 0, TAT_QTY/SHIP_QTY)),2) AS  CTOT   
             , ROUND(SUM(DECODE(OPER_GRP_1, 'HMK2A', DECODE(SHIP_QTY, 0, 0, TAT_QTY/SHIP_QTY), 0)), 2) AS C0
             , ROUND(SUM(DECODE(OPER_GRP_1, 'HMK2A', TAT_QTY, 0)), 2) AS CTAT_QTY0
             , ROUND(SUM(DECODE(OPER_GRP_1, 'HMK2A', SHIP_QTY, 0)), 2) AS CSHIP_QTY0
             , ROUND(SUM(DECODE(OPER_GRP_1, 'B/G', DECODE(SHIP_QTY, 0, 0, TAT_QTY/SHIP_QTY), 0)), 2) AS C1
             , ROUND(SUM(DECODE(OPER_GRP_1, 'B/G', TAT_QTY, 0)), 2) AS CTAT_QTY1
             , ROUND(SUM(DECODE(OPER_GRP_1, 'B/G', SHIP_QTY, 0)), 2) AS CSHIP_QTY1
             , ROUND(SUM(DECODE(OPER_GRP_1, 'SAW', DECODE(SHIP_QTY, 0, 0, TAT_QTY/SHIP_QTY), 0)), 2) AS C2
             , ROUND(SUM(DECODE(OPER_GRP_1, 'SAW', TAT_QTY, 0)), 2) AS CTAT_QTY2
             , ROUND(SUM(DECODE(OPER_GRP_1, 'SAW', SHIP_QTY, 0)), 2) AS CSHIP_QTY2
             , ROUND(SUM(DECODE(OPER_GRP_1, 'D/A', DECODE(SHIP_QTY, 0, 0, TAT_QTY/SHIP_QTY), 0)), 2) AS C3
             , ROUND(SUM(DECODE(OPER_GRP_1, 'D/A', TAT_QTY, 0)), 2) AS CTAT_QTY3
             , ROUND(SUM(DECODE(OPER_GRP_1, 'D/A', SHIP_QTY, 0)), 2) AS CSHIP_QTY3
             , ROUND(SUM(DECODE(OPER_GRP_1, 'W/B', DECODE(SHIP_QTY, 0, 0, TAT_QTY/SHIP_QTY), 0)), 2) AS C4
             , ROUND(SUM(DECODE(OPER_GRP_1, 'W/B', TAT_QTY, 0)), 2) AS CTAT_QTY4
             , ROUND(SUM(DECODE(OPER_GRP_1, 'W/B', SHIP_QTY, 0)), 2) AS CSHIP_QTY4
             , ROUND(SUM(DECODE(OPER_GRP_1, 'GATE', DECODE(SHIP_QTY, 0, 0, TAT_QTY/SHIP_QTY), 0)), 2) AS C5
             , ROUND(SUM(DECODE(OPER_GRP_1, 'GATE', TAT_QTY, 0)), 2) AS CTAT_QTY5
             , ROUND(SUM(DECODE(OPER_GRP_1, 'GATE', SHIP_QTY, 0)), 2) AS CSHIP_QTY5
             , ROUND(SUM(DECODE(OPER_GRP_1, 'MOLD', DECODE(SHIP_QTY, 0, 0, TAT_QTY/SHIP_QTY), 0)), 2) AS C6
             , ROUND(SUM(DECODE(OPER_GRP_1, 'MOLD', TAT_QTY, 0)), 2) AS CTAT_QTY6
             , ROUND(SUM(DECODE(OPER_GRP_1, 'MOLD', SHIP_QTY, 0)), 2) AS CSHIP_QTY6
             , ROUND(SUM(DECODE(OPER_GRP_1, 'CURE', DECODE(SHIP_QTY, 0, 0, TAT_QTY/SHIP_QTY), 0)), 2) AS C7
             , ROUND(SUM(DECODE(OPER_GRP_1, 'CURE', TAT_QTY, 0)), 2) AS CTAT_QTY7
             , ROUND(SUM(DECODE(OPER_GRP_1, 'CURE', SHIP_QTY, 0)), 2) AS CSHIP_QTY7
             , ROUND(SUM(DECODE(OPER_GRP_1, 'M/K', DECODE(SHIP_QTY, 0, 0, TAT_QTY/SHIP_QTY), 0)), 2) AS C8
             , ROUND(SUM(DECODE(OPER_GRP_1, 'M/K', TAT_QTY, 0)), 2) AS CTAT_QTY8
             , ROUND(SUM(DECODE(OPER_GRP_1, 'M/K', SHIP_QTY, 0)), 2) AS CSHIP_QTY8
             , ROUND(SUM(DECODE(OPER_GRP_1, 'TRIM', DECODE(SHIP_QTY, 0, 0, TAT_QTY/SHIP_QTY), 0)), 2) AS C9
             , ROUND(SUM(DECODE(OPER_GRP_1, 'TRIM', TAT_QTY, 0)), 2) AS CTAT_QTY9
             , ROUND(SUM(DECODE(OPER_GRP_1, 'TRIM', SHIP_QTY, 0)), 2) AS CSHIP_QTY9
             , ROUND(SUM(DECODE(OPER_GRP_1, 'TIN', DECODE(SHIP_QTY, 0, 0, TAT_QTY/SHIP_QTY), 0)), 2) AS C10
             , ROUND(SUM(DECODE(OPER_GRP_1, 'TIN', TAT_QTY, 0)), 2) AS CTAT_QTY10
             , ROUND(SUM(DECODE(OPER_GRP_1, 'TIN', SHIP_QTY, 0)), 2) AS CSHIP_QTY10
             , ROUND(SUM(DECODE(OPER_GRP_1, '-', DECODE(SHIP_QTY, 0, 0, TAT_QTY/SHIP_QTY), 0)), 2) AS C11
             , ROUND(SUM(DECODE(OPER_GRP_1, '-', TAT_QTY, 0)), 2) AS CTAT_QTY11
             , ROUND(SUM(DECODE(OPER_GRP_1, '-', SHIP_QTY, 0)), 2) AS CSHIP_QTY11
             , ROUND(SUM(DECODE(OPER_GRP_1, 'S/B/A', DECODE(SHIP_QTY, 0, 0, TAT_QTY/SHIP_QTY), 0)), 2) AS C12
             , ROUND(SUM(DECODE(OPER_GRP_1, 'S/B/A', TAT_QTY, 0)), 2) AS CTAT_QTY12
             , ROUND(SUM(DECODE(OPER_GRP_1, 'S/B/A', SHIP_QTY, 0)), 2) AS CSHIP_QTY12
             , ROUND(SUM(DECODE(OPER_GRP_1, 'SIG', DECODE(SHIP_QTY, 0, 0, TAT_QTY/SHIP_QTY), 0)), 2) AS C13
             , ROUND(SUM(DECODE(OPER_GRP_1, 'SIG', TAT_QTY, 0)), 2) AS CTAT_QTY13
             , ROUND(SUM(DECODE(OPER_GRP_1, 'SIG', SHIP_QTY, 0)), 2) AS CSHIP_QTY13
             , ROUND(SUM(DECODE(OPER_GRP_1, 'AVI', DECODE(SHIP_QTY, 0, 0, TAT_QTY/SHIP_QTY), 0)), 2) AS C14
             , ROUND(SUM(DECODE(OPER_GRP_1, 'AVI', TAT_QTY, 0)), 2) AS CTAT_QTY14
             , ROUND(SUM(DECODE(OPER_GRP_1, 'AVI', SHIP_QTY, 0)), 2) AS CSHIP_QTY14
             , ROUND(SUM(DECODE(OPER_GRP_1, 'V/I', DECODE(SHIP_QTY, 0, 0, TAT_QTY/SHIP_QTY), 0)), 2) AS C15
             , ROUND(SUM(DECODE(OPER_GRP_1, 'V/I', TAT_QTY, 0)), 2) AS CTAT_QTY15
             , ROUND(SUM(DECODE(OPER_GRP_1, 'V/I', SHIP_QTY, 0)), 2) AS CSHIP_QTY15
             , ROUND(SUM(DECODE(OPER_GRP_1, 'BAKE', DECODE(SHIP_QTY, 0, 0, TAT_QTY/SHIP_QTY), 0)), 2) AS C16
             , ROUND(SUM(DECODE(OPER_GRP_1, 'BAKE', TAT_QTY, 0)), 2) AS CTAT_QTY16
             , ROUND(SUM(DECODE(OPER_GRP_1, 'BAKE', SHIP_QTY, 0)), 2) AS CSHIP_QTY16
             , ROUND(SUM(DECODE(OPER_GRP_1, 'QC GATE', DECODE(SHIP_QTY, 0, 0, TAT_QTY/SHIP_QTY), 0)), 2) AS C17
             , ROUND(SUM(DECODE(OPER_GRP_1, 'QC GATE', TAT_QTY, 0)), 2) AS CTAT_QTY17
             , ROUND(SUM(DECODE(OPER_GRP_1, 'QC GATE', SHIP_QTY, 0)), 2) AS CSHIP_QTY17
          FROM (
                SELECT SHIP_DATE, MAT_GRP_1, MAT_CMF_10,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ' 
                     , OPER_GRP_1 
                     , SUM(TAT_QTY) AS TAT_QTY 
                     , SUM(WAIT_TAT_QTY) AS WAIT_TAT_QTY 
                     , SUM(PROC_TAT_QTY) AS PROC_TAT_QTY 
                     , SUM(SHIP_QTY) AS SHIP_QTY 
                  FROM ( 
                        SELECT SHIP_DATE, (SELECT DATA_1 FROM MGCMTBLDAT WHERE TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = MAT_GRP_1 AND ROWNUM=1) AS MAT_GRP_1, MAT_CMF_10,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', OPER_GRP_1, TAT_QTY, WAIT_TAT_QTY, PROC_TAT_QTY, SHIP_QTY 
                          FROM ( 
                                SELECT SHIP_DATE, MAT_GRP_1, MAT_CMF_10,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' '
                                     , MAT.MAT_ID
                                     , OPR.OPER_GRP_1
                                     , SUM(TOTAL_TAT_QTY_P) AS TAT_QTY
                                     , SUM(WAIT_TAT_QTY_P) AS WAIT_TAT_QTY
                                     , SUM(PROC_TAT_QTY_P) AS PROC_TAT_QTY
                                  FROM CSUMTATMAT@RPTTOMES TAT 
                                     , MWIPMATDEF MAT 
                                     , MWIPOPRDEF OPR 
                                 WHERE 1=1 
                                   AND TAT.FACTORY = MAT.FACTORY    
                                   AND TAT.MAT_ID = MAT.MAT_ID      
                                   AND TAT.FACTORY = OPR.FACTORY     
                                   AND TAT.OPER = OPR.OPER     
                                   AND MAT.MAT_VER = 1     
                                   AND MAT.MAT_TYPE = 'FG' 
                                   AND MAT.DELETE_FLAG <> 'Y' 
                                   AND TAT.TOTAL_TIME <> 0     
                                   AND TAT.FACTORY = 'HMVA2'        
                                   AND OPR.OPER_GRP_1 NOT IN (' ')     
                                   AND TAT.OPER BETWEEN 'A0005' AND 'A2350' 
                                   AND TAT.SHIP_DATE BETWEEN '20200701' AND '20200720' 
                                 GROUP BY SHIP_DATE, MAT_GRP_1, MAT_CMF_10,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT.MAT_ID, OPER_GRP_1  
                               ) TAT    
                             , (      
                                SELECT TAT.FACTORY 
                                     , TAT.MAT_ID 
                                     , TAT.SHIP_DATE AS WORK_DATE 
                                     , SHIP_QTY_P AS SHIP_QTY 
                                  FROM CSUMTATMAT@RPTTOMES TAT     
                                 WHERE 1=1      
                                   AND TAT.FACTORY='HMVA2'      
                                   AND OPER ='AZ010'      
                                   AND TAT.SHIP_DATE BETWEEN '20200701' AND '20200720' 
                               ) B      
                         WHERE 1=1     
                           AND TAT.MAT_ID = B.MAT_ID     
                           AND TAT.SHIP_DATE = B.WORK_DATE     
                       ) 
                 GROUP BY SHIP_DATE, MAT_GRP_1, MAT_CMF_10,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', OPER_GRP_1 
               ) 
         GROUP BY SHIP_DATE, MAT_GRP_1, MAT_CMF_10,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' '
       ) 
 GROUP BY SHIP_DATE, MAT_GRP_1, MAT_CMF_10,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' '
 ORDER BY SHIP_DATE, MAT_GRP_1, MAT_CMF_10,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' '

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT PLAN_WEEK V1    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_DATE = TO_CHAR(SYSDATE,'yyyymmdd')      AND ROWNUM = 1  
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT LANGUAGE_2 FROM RWEBFUNDEF WHERE FUNC_NAME = 'PRD010423'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT A.OPER_GRP, (SELECT TO_NUMBER(DATA_1) FROM MGCMTBLDAT WHERE FACTORY = 'HMVA2' AND TABLE_NAME = 'H_OPER_GRP_TARGET' AND KEY_1 = A.OPER_GRP) AS TARGET,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ' 
     , B.GUBUN
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_0 ELSE WIP_0 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_0 ELSE END_0 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_0 ELSE EXP_0 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_0
                      WHEN B.GUBUN = 'RUN' THEN RUN_0
                 END), 0) AS D0
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_1 ELSE WIP_1 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_1 ELSE END_1 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_1 ELSE EXP_1 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_1
                      WHEN B.GUBUN = 'RUN' THEN RUN_1
                 END), 0) AS D1
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_2 ELSE WIP_2 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_2 ELSE END_2 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_2 ELSE EXP_2 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_2
                      WHEN B.GUBUN = 'RUN' THEN RUN_2
                 END), 0) AS D2
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_3 ELSE WIP_3 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_3 ELSE END_3 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_3 ELSE EXP_3 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_3
                      WHEN B.GUBUN = 'RUN' THEN RUN_3
                 END), 0) AS D3
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_4 ELSE WIP_4 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_4 ELSE END_4 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_4 ELSE EXP_4 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_4
                      WHEN B.GUBUN = 'RUN' THEN RUN_4
                 END), 0) AS D4
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_5 ELSE WIP_5 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_5 ELSE END_5 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_5 ELSE EXP_5 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_5
                      WHEN B.GUBUN = 'RUN' THEN RUN_5
                 END), 0) AS D5
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_6 ELSE WIP_6 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_6 ELSE END_6 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_6 ELSE EXP_6 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_6
                      WHEN B.GUBUN = 'RUN' THEN RUN_6
                 END), 0) AS D6
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_7 ELSE WIP_7 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_7 ELSE END_7 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_7 ELSE EXP_7 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_7
                      WHEN B.GUBUN = 'RUN' THEN RUN_7
                 END), 0) AS D7
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_8 ELSE WIP_8 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_8 ELSE END_8 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_8 ELSE EXP_8 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_8
                      WHEN B.GUBUN = 'RUN' THEN RUN_8
                 END), 0) AS D8
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_9 ELSE WIP_9 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_9 ELSE END_9 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_9 ELSE EXP_9 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_9
                      WHEN B.GUBUN = 'RUN' THEN RUN_9
                 END), 0) AS D9
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_10 ELSE WIP_10 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_10 ELSE END_10 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_10 ELSE EXP_10 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_10
                      WHEN B.GUBUN = 'RUN' THEN RUN_10
                 END), 0) AS D10
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_11 ELSE WIP_11 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_11 ELSE END_11 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_11 ELSE EXP_11 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_11
                      WHEN B.GUBUN = 'RUN' THEN RUN_11
                 END), 0) AS D11
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_12 ELSE WIP_12 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_12 ELSE END_12 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_12 ELSE EXP_12 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_12
                      WHEN B.GUBUN = 'RUN' THEN RUN_12
                 END), 0) AS D12
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_13 ELSE WIP_13 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_13 ELSE END_13 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_13 ELSE EXP_13 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_13
                      WHEN B.GUBUN = 'RUN' THEN RUN_13
                 END), 0) AS D13
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_14 ELSE WIP_14 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_14 ELSE END_14 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_14 ELSE EXP_14 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_14
                      WHEN B.GUBUN = 'RUN' THEN RUN_14
                 END), 0) AS D14
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_15 ELSE WIP_15 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_15 ELSE END_15 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_15 ELSE EXP_15 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_15
                      WHEN B.GUBUN = 'RUN' THEN RUN_15
                 END), 0) AS D15
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_16 ELSE WIP_16 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_16 ELSE END_16 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_16 ELSE EXP_16 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_16
                      WHEN B.GUBUN = 'RUN' THEN RUN_16
                 END), 0) AS D16
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_17 ELSE WIP_17 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_17 ELSE END_17 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_17 ELSE EXP_17 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_17
                      WHEN B.GUBUN = 'RUN' THEN RUN_17
                 END), 0) AS D17
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_18 ELSE WIP_18 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_18 ELSE END_18 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_18 ELSE EXP_18 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_18
                      WHEN B.GUBUN = 'RUN' THEN RUN_18
                 END), 0) AS D18
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_19 ELSE WIP_19 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_19 ELSE END_19 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_19 ELSE EXP_19 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_19
                      WHEN B.GUBUN = 'RUN' THEN RUN_19
                 END), 0) AS D19
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_20 ELSE WIP_20 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_20 ELSE END_20 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_20 ELSE EXP_20 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_20
                      WHEN B.GUBUN = 'RUN' THEN RUN_20
                 END), 0) AS D20
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_TTL ELSE WIP_TTL / 1000 END)
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_TTL ELSE END_TTL / 1000 END)
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_TTL ELSE EXP_TTL / 1000 END)
                      WHEN B.GUBUN = '설비대수' THEN RES_TTL
                      WHEN B.GUBUN = 'RUN' THEN RUN_TTL
                 END), 0) AS TTL
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_TTL ELSE WIP_TTL / 1000 END)
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_TTL ELSE END_TTL / 1000 END)
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_TTL ELSE EXP_TTL / 1000 END)
                      WHEN B.GUBUN = '설비대수' THEN RES_TTL
                      WHEN B.GUBUN = 'RUN' THEN RUN_TTL
                 END) / 21, 0) AS AVG
  FROM (
        SELECT *
          FROM (
                SELECT *
                  FROM (
                        SELECT A.*
                             , B.*
                             , NVL((SELECT DATA_10 FROM MGCMTBLDAT WHERE TABLE_NAME = 'H_CUSTOMER' AND FACTORY = 'HMVA2' AND  KEY_1 = B.MAT_GRP_1), '-') AS CUST_TYPE
                             , (SELECT KEY_3 FROM MGCMTBLDAT WHERE FACTORY = 'HMVA2' AND TABLE_NAME = 'H_PKG_2D_CMOLD' AND KEY_1 = 'C-MOLD' AND KEY_2 = B.MAT_GRP_1 AND KEY_3 = B.MAT_CMF_11 AND (KEY_4 = '%' OR KEY_4 = B.MAT_ID)) AS KEY_3
                          FROM (
                                SELECT DECODE(LEVEL, 1, 'STOCK', 2, 'LAMI', 3, 'Stealth Saw', 4, 'BG', 5, 'DDS', 6, 'SAW', 7, 'DA(Epoxy)', 8, 'DA(DFN)', 9, 'WB', 10, 'C-MOLD', 11, 'SST', 12, 'HMK3') AS OPER_GRP
                                  FROM DUAL CONNECT BY LEVEL <= 12 
                               ) A 
                             , MWIPMATDEF B 
                         WHERE B.FACTORY = 'HMVA2'
                           AND B.MAT_TYPE = 'FG'
                           AND B.DELETE_FLAG = ' '
                       )
                 WHERE (OPER_GRP <> 'C-MOLD' OR KEY_3 IS NOT NULL)
               ) MAT
             , (
                SELECT MAT_ID AS END_MAT_ID
                     , OPER_GRP AS END_OPER_GRP
                     , SUM(CONV_END_QTY) AS END_TTL
                     , SUM(DECODE(WORK_DATE, '20200721', 0, CONV_END_QTY)) + (SUM(DECODE(WORK_DATE, '20200721', CONV_END_QTY , 0)) / 18.8574985578333 * 24) AS EXP_TTL
                     , SUM(DECODE(WORK_DATE, '20200701', CONV_END_QTY, 0)) AS END_0
                     , SUM(DECODE(WORK_DATE, '20200702', CONV_END_QTY, 0)) AS END_1
                     , SUM(DECODE(WORK_DATE, '20200703', CONV_END_QTY, 0)) AS END_2
                     , SUM(DECODE(WORK_DATE, '20200704', CONV_END_QTY, 0)) AS END_3
                     , SUM(DECODE(WORK_DATE, '20200705', CONV_END_QTY, 0)) AS END_4
                     , SUM(DECODE(WORK_DATE, '20200706', CONV_END_QTY, 0)) AS END_5
                     , SUM(DECODE(WORK_DATE, '20200707', CONV_END_QTY, 0)) AS END_6
                     , SUM(DECODE(WORK_DATE, '20200708', CONV_END_QTY, 0)) AS END_7
                     , SUM(DECODE(WORK_DATE, '20200709', CONV_END_QTY, 0)) AS END_8
                     , SUM(DECODE(WORK_DATE, '20200710', CONV_END_QTY, 0)) AS END_9
                     , SUM(DECODE(WORK_DATE, '20200711', CONV_END_QTY, 0)) AS END_10
                     , SUM(DECODE(WORK_DATE, '20200712', CONV_END_QTY, 0)) AS END_11
                     , SUM(DECODE(WORK_DATE, '20200713', CONV_END_QTY, 0)) AS END_12
                     , SUM(DECODE(WORK_DATE, '20200714', CONV_END_QTY, 0)) AS END_13
                     , SUM(DECODE(WORK_DATE, '20200715', CONV_END_QTY, 0)) AS END_14
                     , SUM(DECODE(WORK_DATE, '20200716', CONV_END_QTY, 0)) AS END_15
                     , SUM(DECODE(WORK_DATE, '20200717', CONV_END_QTY, 0)) AS END_16
                     , SUM(DECODE(WORK_DATE, '20200718', CONV_END_QTY, 0)) AS END_17
                     , SUM(DECODE(WORK_DATE, '20200719', CONV_END_QTY, 0)) AS END_18
                     , SUM(DECODE(WORK_DATE, '20200720', CONV_END_QTY, 0)) AS END_19
                     , SUM(DECODE(WORK_DATE, '20200721', CONV_END_QTY, 0)) AS END_20
                     , SUM(DECODE(WORK_DATE, '20200701', CONV_END_QTY, 0)) AS EXP_0
                     , SUM(DECODE(WORK_DATE, '20200702', CONV_END_QTY, 0)) AS EXP_1
                     , SUM(DECODE(WORK_DATE, '20200703', CONV_END_QTY, 0)) AS EXP_2
                     , SUM(DECODE(WORK_DATE, '20200704', CONV_END_QTY, 0)) AS EXP_3
                     , SUM(DECODE(WORK_DATE, '20200705', CONV_END_QTY, 0)) AS EXP_4
                     , SUM(DECODE(WORK_DATE, '20200706', CONV_END_QTY, 0)) AS EXP_5
                     , SUM(DECODE(WORK_DATE, '20200707', CONV_END_QTY, 0)) AS EXP_6
                     , SUM(DECODE(WORK_DATE, '20200708', CONV_END_QTY, 0)) AS EXP_7
                     , SUM(DECODE(WORK_DATE, '20200709', CONV_END_QTY, 0)) AS EXP_8
                     , SUM(DECODE(WORK_DATE, '20200710', CONV_END_QTY, 0)) AS EXP_9
                     , SUM(DECODE(WORK_DATE, '20200711', CONV_END_QTY, 0)) AS EXP_10
                     , SUM(DECODE(WORK_DATE, '20200712', CONV_END_QTY, 0)) AS EXP_11
                     , SUM(DECODE(WORK_DATE, '20200713', CONV_END_QTY, 0)) AS EXP_12
                     , SUM(DECODE(WORK_DATE, '20200714', CONV_END_QTY, 0)) AS EXP_13
                     , SUM(DECODE(WORK_DATE, '20200715', CONV_END_QTY, 0)) AS EXP_14
                     , SUM(DECODE(WORK_DATE, '20200716', CONV_END_QTY, 0)) AS EXP_15
                     , SUM(DECODE(WORK_DATE, '20200717', CONV_END_QTY, 0)) AS EXP_16
                     , SUM(DECODE(WORK_DATE, '20200718', CONV_END_QTY, 0)) AS EXP_17
                     , SUM(DECODE(WORK_DATE, '20200719', CONV_END_QTY, 0)) AS EXP_18
                     , SUM(DECODE(WORK_DATE, '20200720', CONV_END_QTY, 0)) AS EXP_19
                     , SUM(DECODE(WORK_DATE, '20200721', CONV_END_QTY, 0)) / 18.8574985578333 * 24 AS EXP_20
                  FROM (
                        SELECT A.MAT_ID
                             , A.WORK_DATE
                             , CASE WHEN A.OPER = 'A0033' THEN 'Stealth Saw'
                                    WHEN A.OPER IN ('A0040', 'A0030') THEN 'BG'
                                    WHEN A.OPER = 'A0230' THEN 'DDS'
                                    WHEN A.OPER = 'A1000' THEN 'C-MOLD'
                                    WHEN A.OPER LIKE 'A060%' THEN 'WB'
                                    WHEN A.OPER IN ('A1750', 'A1825') THEN 'SST'
                                    WHEN A.OPER = 'A0200' THEN 'SAW'
                                    WHEN A.OPER LIKE 'A040%' AND B.MAT_GRP_2 = 'DFN' THEN 'DA(DFN)'
                                    WHEN A.OPER LIKE 'A040%' AND E.DA_TYPE = 'Epoxy' THEN 'DA(Epoxy)'
                                    WHEN A.OPER = 'A0000' THEN 'STOCK'
                                    WHEN A.OPER = 'A0020' THEN 'LAMI'
                                    WHEN A.OPER = 'AZ010' THEN 'HMK3'
                                    ELSE ''
                               END OPER_GRP
                             , CASE WHEN A.OPER = 'AZ010' THEN DECODE(B.MAT_GRP_3, 'COB', 0, 'BGN', 0, (S1_MOVE_QTY_1+S2_MOVE_QTY_1+S3_MOVE_QTY_1))
                                    WHEN A.OPER = 'A0000' THEN (S1_OPER_IN_QTY_1+S2_OPER_IN_QTY_1+S3_OPER_IN_QTY_1)
                                    ELSE (S1_END_QTY_1+S2_END_QTY_1+S3_END_QTY_1)
                               END AS END_QTY
                             , CASE WHEN A.OPER = 'A0000' THEN (S1_OPER_IN_QTY_2+S2_OPER_IN_QTY_2+S3_OPER_IN_QTY_2)
                                    WHEN A.OPER IN ('A0033', 'A0040', 'A0230', 'A0030', 'A0200', 'A0020') THEN (S1_END_QTY_2+S2_END_QTY_2+S3_END_QTY_2)
                                    WHEN A.OPER LIKE 'A040%' AND B.MAT_ID LIKE 'SEK%' THEN (S1_END_QTY_1+S2_END_QTY_1+S3_END_QTY_1) * NVL(C.DATA_1,1)
                                    WHEN A.OPER LIKE 'A040%' AND (B.MAT_GRP_5 IN ('1st', 'Merge') OR B.MAT_GRP_5 LIKE 'Middle%') THEN (S1_END_QTY_1+S2_END_QTY_1+S3_END_QTY_1) * NVL(C.DATA_1,1)
                                    WHEN A.OPER LIKE 'A060%' THEN (S1_END_QTY_1+S2_END_QTY_1+S3_END_QTY_1) * (CASE WHEN D.WIRE_CNT IS NOT NULL THEN D.WIRE_CNT
                                                                                           WHEN B.MAT_GRP_6 NOT IN ('-','0') THEN B.MAT_GRP_6
                                                                                           ELSE '1' END)
                                    WHEN A.OPER = 'AZ010' THEN DECODE(B.MAT_GRP_3, 'COB', 0, 'BGN', 0, (S1_MOVE_QTY_1+S2_MOVE_QTY_1+S3_MOVE_QTY_1))
                                    ELSE (S1_END_QTY_1+S2_END_QTY_1+S3_END_QTY_1)
                               END AS CONV_END_QTY
                          FROM RSUMWIPMOV A
                             , MWIPMATDEF B
                             , (
                                SELECT KEY_1 AS MAT_ID, DATA_1
                                  FROM MGCMTBLDAT 
                                 WHERE FACTORY = 'HMVA2'
                                   AND TABLE_NAME IN ('H_SEC_AUTO_LOSS','H_HX_AUTO_LOSS')
                               ) C
                             , (
                                SELECT MAT_ID, OPER, TCD_CMF_2 AS WIRE_CNT
                                  FROM CWIPTCDDEF@RPTTOMES 
                                 WHERE FACTORY = 'HMVA2'
                                   AND OPER LIKE 'A060%'
                                   AND SET_FLAG = 'Y'
                                   AND TCD_CMF_2 <> ' '
                               ) D
                             , (
                                SELECT KEY_1 AS MAT_GRP_2, DATA_2 AS DA_TYPE
                                  FROM MGCMTBLDAT 
                                 WHERE FACTORY = 'HMVA2'
                                   AND TABLE_NAME = 'H_FAMILY'
                               ) E
                         WHERE 1=1
                           AND A.FACTORY = B.FACTORY
                           AND A.MAT_ID = B.MAT_ID
                           AND A.MAT_ID = C.MAT_ID(+)
                           AND A.MAT_ID = D.MAT_ID(+)
                           AND A.OPER = D.OPER(+)
                           AND B.MAT_GRP_2 = E.MAT_GRP_2(+)
                           AND A.FACTORY = 'HMVA2'
                           AND A.WORK_DATE BETWEEN '20200701' AND '20200721'
                           AND A.LOT_TYPE = 'W'
                           AND B.DELETE_FLAG = ' '
                           AND B.MAT_TYPE = 'FG'
                           AND A.FACTORY NOT IN ('RETURN') 
                           AND A.CM_KEY_3 LIKE 'P%' 
                           AND REGEXP_LIKE(A.OPER, 'A040*|A0033|A0040|A0230|A1000|A060*|A1750|A0030|A0000|A0020|AZ010|A1825|A0200')
                       )
                 GROUP BY MAT_ID, OPER_GRP
               ) SHP
             , (
                SELECT MAT_ID AS WIP_MAT_ID
                     , OPER_GRP AS WIP_OPER_GRP
                     , SUM(CONV_WIP_QTY) AS WIP_TTL
                     , SUM(DECODE(WORK_DATE, '20200701', CONV_WIP_QTY, 0)) AS WIP_0
                     , SUM(DECODE(WORK_DATE, '20200702', CONV_WIP_QTY, 0)) AS WIP_1
                     , SUM(DECODE(WORK_DATE, '20200703', CONV_WIP_QTY, 0)) AS WIP_2
                     , SUM(DECODE(WORK_DATE, '20200704', CONV_WIP_QTY, 0)) AS WIP_3
                     , SUM(DECODE(WORK_DATE, '20200705', CONV_WIP_QTY, 0)) AS WIP_4
                     , SUM(DECODE(WORK_DATE, '20200706', CONV_WIP_QTY, 0)) AS WIP_5
                     , SUM(DECODE(WORK_DATE, '20200707', CONV_WIP_QTY, 0)) AS WIP_6
                     , SUM(DECODE(WORK_DATE, '20200708', CONV_WIP_QTY, 0)) AS WIP_7
                     , SUM(DECODE(WORK_DATE, '20200709', CONV_WIP_QTY, 0)) AS WIP_8
                     , SUM(DECODE(WORK_DATE, '20200710', CONV_WIP_QTY, 0)) AS WIP_9
                     , SUM(DECODE(WORK_DATE, '20200711', CONV_WIP_QTY, 0)) AS WIP_10
                     , SUM(DECODE(WORK_DATE, '20200712', CONV_WIP_QTY, 0)) AS WIP_11
                     , SUM(DECODE(WORK_DATE, '20200713', CONV_WIP_QTY, 0)) AS WIP_12
                     , SUM(DECODE(WORK_DATE, '20200714', CONV_WIP_QTY, 0)) AS WIP_13
                     , SUM(DECODE(WORK_DATE, '20200715', CONV_WIP_QTY, 0)) AS WIP_14
                     , SUM(DECODE(WORK_DATE, '20200716', CONV_WIP_QTY, 0)) AS WIP_15
                     , SUM(DECODE(WORK_DATE, '20200717', CONV_WIP_QTY, 0)) AS WIP_16
                     , SUM(DECODE(WORK_DATE, '20200718', CONV_WIP_QTY, 0)) AS WIP_17
                     , SUM(DECODE(WORK_DATE, '20200719', CONV_WIP_QTY, 0)) AS WIP_18
                     , SUM(DECODE(WORK_DATE, '20200720', CONV_WIP_QTY, 0)) AS WIP_19
                     , SUM(DECODE(WORK_DATE, '20200721', CONV_WIP_QTY, 0)) AS WIP_20
                  FROM (
                        SELECT A.MAT_ID, WORK_DATE
                             , CASE WHEN A.OPER = 'A0033' THEN 'Stealth Saw'
                                    WHEN A.OPER IN ('A0040', 'A0030') THEN 'BG'
                                    WHEN A.OPER = 'A0230' THEN 'DDS'
                                    WHEN A.OPER IN ('A1000', 'A0950') THEN 'C-MOLD'
                                    WHEN A.OPER LIKE 'A060%' OR A.OPER LIKE 'A055%' THEN 'WB'
                                    WHEN A.OPER IN ('A1750', 'A1825') THEN 'SST'
                                    WHEN A.OPER = 'A0200' THEN 'SAW'
                                    WHEN (A.OPER LIKE 'A040%' OR A.OPER = 'A0250') AND B.MAT_GRP_2 = 'DFN' THEN 'DA(DFN)'
                                    WHEN (A.OPER LIKE 'A040%' OR A.OPER = 'A0250') AND B.DA_TYPE = 'Epoxy' THEN 'DA(Epoxy)'
                                    WHEN A.OPER = 'A0000' THEN 'STOCK'
                                    WHEN A.OPER = 'A0020' THEN 'LAMI'
                                    WHEN A.OPER = 'AZ010' THEN 'HMK3'
                                    ELSE ''
                               END OPER_GRP
                             , CASE WHEN A.OPER IN ('A0033', 'A0040', 'A0030', 'A0230', 'A0200', 'A0000', 'A0020') THEN WIP_QTY
                                    WHEN B.GUBUN = 'O' THEN WIP_QTY
                                    ELSE 0
                               END WIP_QTY
                             , CASE WHEN A.OPER IN ('A0033', 'A0040', 'A0030', 'A0230', 'A0200', 'A0000', 'A0020') THEN WIP_QTY_2
                                    WHEN A.OPER LIKE 'A040%' AND B.GUBUN = 'O' THEN WIP_QTY * COMP_CNT
                                    WHEN A.OPER LIKE 'A060%' AND B.GUBUN = 'O' THEN WIP_QTY * (CASE WHEN C.WIRE_CNT IS NOT NULL THEN C.WIRE_CNT
                                                                                                    WHEN B.MAT_GRP_6 NOT IN ('-','0') THEN B.MAT_GRP_6
                                                                                                    ELSE '1' END)
                                    WHEN B.GUBUN = 'O' THEN WIP_QTY
                                    ELSE 0
                               END AS CONV_WIP_QTY
                          FROM (
                                SELECT MAT_ID
                                     , '20200721' AS WORK_DATE
                                     , OPER
                                     , QTY_1 AS WIP_QTY
                                     , QTY_2 AS WIP_QTY_2
                                  FROM RWIPLOTSTS
                                 WHERE FACTORY = 'HMVA2'
                                   AND LOT_TYPE = 'W'
                                   AND LOT_DEL_FLAG = ' '
                                   AND REGEXP_LIKE(OPER, 'A040*|A0033|A0040|A0230|A1000|A0950|A060*|A1750|A0030|A0200|A0000|A0020|AZ010|A0250|A050*|A053*|A055*|A1825') 
                                   AND LOT_CMF_5 LIKE 'P%' 
                                 UNION ALL
                                SELECT MAT_ID
                                     , WORK_DATE
                                     , OPER
                                     , EOH_QTY_1 AS WIP_QTY
                                     , EOH_QTY_2 AS WIP_QTY_2
                                  FROM RSUMWIPEOH
                                 WHERE FACTORY = 'HMVA2'
                                   AND LOT_TYPE = 'W'
                                   AND REGEXP_LIKE(OPER, 'A040*|A0033|A0040|A0230|A1000|A0950|A060*|A1750|A0030|A0200|A0000|A0020|AZ010|A0250|A050*|A053*|A055*|A1825')
                                   AND WORK_DATE BETWEEN '20200701' AND '20200720'
                                   AND SHIFT = '3'
                                   AND CM_KEY_3 LIKE 'P%' 
                               ) A
                             , (
                                SELECT *
                                  FROM (
                                        SELECT MAT_ID, MAT_GRP_2, MAT_GRP_4, MAT_GRP_5, MAT_GRP_6, MAT_CMF_11
                                             , CASE WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-'
                                                         THEN (CASE WHEN MAT_GRP_5 IN ('1st','Merge') OR MAT_GRP_5 LIKE 'Middle%' THEN 'O' ELSE '' END)
                                                    WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 = '-' THEN '' 
                                                    ELSE 'O'
                                               END GUBUN
                                             , (SELECT DATA_2 FROM MGCMTBLDAT WHERE FACTORY = 'HMVA2' AND TABLE_NAME = 'H_FAMILY' AND KEY_1 = MAT_GRP_2) AS DA_TYPE
                                             , COMP_CNT
                                          FROM VWIPMATDEF
                                         WHERE FACTORY = 'HMVA2'
                                           AND MAT_TYPE = 'FG'
                                           AND DELETE_FLAG = ' '
                                           AND MAT_GRP_2 <> '-'
                                       )
                               ) B
                             , (
                                SELECT MAT_ID, OPER, TCD_CMF_2 AS WIRE_CNT
                                  FROM CWIPTCDDEF@RPTTOMES
                                 WHERE FACTORY = 'HMVA2'
                                   AND OPER LIKE 'A060%'
                                   AND SET_FLAG = 'Y'
                                   AND TCD_CMF_2 <> ' '
                               ) C
                         WHERE A.MAT_ID = B.MAT_ID
                           AND A.MAT_ID = C.MAT_ID(+)
                           AND A.OPER = C.OPER(+)
                       )
                 GROUP BY MAT_ID, OPER_GRP
               ) WIP
             , (
                SELECT RES_STS_2 AS RES_MAT_ID
                     , OPER_GRP AS RES_OPER_GRP 
                     , SUM(RES_CNT) AS RES_TTL
                     , SUM(RUN_CNT) AS RUN_TTL
                     , SUM(DECODE(WORK_DATE, '20200701', RES_CNT, 0)) AS RES_0
                     , SUM(DECODE(WORK_DATE, '20200702', RES_CNT, 0)) AS RES_1
                     , SUM(DECODE(WORK_DATE, '20200703', RES_CNT, 0)) AS RES_2
                     , SUM(DECODE(WORK_DATE, '20200704', RES_CNT, 0)) AS RES_3
                     , SUM(DECODE(WORK_DATE, '20200705', RES_CNT, 0)) AS RES_4
                     , SUM(DECODE(WORK_DATE, '20200706', RES_CNT, 0)) AS RES_5
                     , SUM(DECODE(WORK_DATE, '20200707', RES_CNT, 0)) AS RES_6
                     , SUM(DECODE(WORK_DATE, '20200708', RES_CNT, 0)) AS RES_7
                     , SUM(DECODE(WORK_DATE, '20200709', RES_CNT, 0)) AS RES_8
                     , SUM(DECODE(WORK_DATE, '20200710', RES_CNT, 0)) AS RES_9
                     , SUM(DECODE(WORK_DATE, '20200711', RES_CNT, 0)) AS RES_10
                     , SUM(DECODE(WORK_DATE, '20200712', RES_CNT, 0)) AS RES_11
                     , SUM(DECODE(WORK_DATE, '20200713', RES_CNT, 0)) AS RES_12
                     , SUM(DECODE(WORK_DATE, '20200714', RES_CNT, 0)) AS RES_13
                     , SUM(DECODE(WORK_DATE, '20200715', RES_CNT, 0)) AS RES_14
                     , SUM(DECODE(WORK_DATE, '20200716', RES_CNT, 0)) AS RES_15
                     , SUM(DECODE(WORK_DATE, '20200717', RES_CNT, 0)) AS RES_16
                     , SUM(DECODE(WORK_DATE, '20200718', RES_CNT, 0)) AS RES_17
                     , SUM(DECODE(WORK_DATE, '20200719', RES_CNT, 0)) AS RES_18
                     , SUM(DECODE(WORK_DATE, '20200720', RES_CNT, 0)) AS RES_19
                     , SUM(DECODE(WORK_DATE, '20200721', RES_CNT, 0)) AS RES_20
                     , SUM(DECODE(WORK_DATE, '20200701', RUN_CNT, 0)) AS RUN_0
                     , SUM(DECODE(WORK_DATE, '20200702', RUN_CNT, 0)) AS RUN_1
                     , SUM(DECODE(WORK_DATE, '20200703', RUN_CNT, 0)) AS RUN_2
                     , SUM(DECODE(WORK_DATE, '20200704', RUN_CNT, 0)) AS RUN_3
                     , SUM(DECODE(WORK_DATE, '20200705', RUN_CNT, 0)) AS RUN_4
                     , SUM(DECODE(WORK_DATE, '20200706', RUN_CNT, 0)) AS RUN_5
                     , SUM(DECODE(WORK_DATE, '20200707', RUN_CNT, 0)) AS RUN_6
                     , SUM(DECODE(WORK_DATE, '20200708', RUN_CNT, 0)) AS RUN_7
                     , SUM(DECODE(WORK_DATE, '20200709', RUN_CNT, 0)) AS RUN_8
                     , SUM(DECODE(WORK_DATE, '20200710', RUN_CNT, 0)) AS RUN_9
                     , SUM(DECODE(WORK_DATE, '20200711', RUN_CNT, 0)) AS RUN_10
                     , SUM(DECODE(WORK_DATE, '20200712', RUN_CNT, 0)) AS RUN_11
                     , SUM(DECODE(WORK_DATE, '20200713', RUN_CNT, 0)) AS RUN_12
                     , SUM(DECODE(WORK_DATE, '20200714', RUN_CNT, 0)) AS RUN_13
                     , SUM(DECODE(WORK_DATE, '20200715', RUN_CNT, 0)) AS RUN_14
                     , SUM(DECODE(WORK_DATE, '20200716', RUN_CNT, 0)) AS RUN_15
                     , SUM(DECODE(WORK_DATE, '20200717', RUN_CNT, 0)) AS RUN_16
                     , SUM(DECODE(WORK_DATE, '20200718', RUN_CNT, 0)) AS RUN_17
                     , SUM(DECODE(WORK_DATE, '20200719', RUN_CNT, 0)) AS RUN_18
                     , SUM(DECODE(WORK_DATE, '20200720', RUN_CNT, 0)) AS RUN_19
                     , SUM(DECODE(WORK_DATE, '20200721', RUN_CNT, 0)) AS RUN_20
                  FROM (
                        SELECT RES_STS_2
                             , WORK_DATE
                             , CASE WHEN A.RES_GRP_3 = 'SDBG' THEN 'Stealth Saw'
                                    WHEN A.RES_GRP_3 = 'BACK LAP' THEN 'BG'
                                    WHEN A.RES_GRP_3 = 'WAFER EXPANDING' THEN 'DDS'
                                    WHEN A.RES_GRP_3 = 'MOLD' THEN 'C-MOLD'
                                    WHEN A.RES_GRP_3 = 'WIRE BOND' THEN 'WB'
                                    WHEN A.RES_GRP_3 = 'SAW SORTER' THEN 'SST'
                                    WHEN A.RES_GRP_3 = 'SAW' THEN 'SAW'
                                    WHEN A.RES_GRP_3 = 'DIE ATTACH' AND B.MAT_GRP_2 = 'DFN' THEN 'DA(DFN)'
                                    WHEN A.RES_GRP_3 = 'DIE ATTACH' AND REGEXP_LIKE(A.RES_GRP_6, 'ESEC2100SD|SDB-30UST|^DB*|^SPA*') THEN 'DA(Epoxy)'
                                    WHEN A.RES_GRP_3 = 'LAMINATION' THEN 'LAMI'
                                    ELSE 'DA'
                               END OPER_GRP
                             , RES_CNT
                             , RUN_CNT
                          FROM (
                                SELECT A.RES_STS_2
                                     , '20200721' AS WORK_DATE
                                     , A.RES_GRP_3
                                     , A.RES_GRP_6
                                     , COUNT(A.RES_ID) AS RES_CNT
                                     , NVL(SUM(DECODE(RES_UP_DOWN_FLAG, 'U', DECODE(NVL(B.START_RES_ID, '-'), '-', 0, 1))), 0) AS RUN_CNT
                                  FROM MRASRESDEF A
                                     , (
                                        SELECT DISTINCT START_RES_ID
                                          FROM MWIPLOTSTS
                                         WHERE FACTORY = 'HMVA2'
                                           AND LOT_TYPE = 'W'
                                           AND LOT_DEL_FLAG = ' '
                                           AND LOT_CMF_5 LIKE 'P%' 
                                           AND REGEXP_LIKE(OPER, 'A040*|A0033|A0040|A0230|A1000|A060*|A1750|A0030|A0200|A0020|A1825')
                                           AND LOT_STATUS = 'PROC'
                                       ) B
                                 WHERE 1=1
                                   AND A.RES_ID = B.START_RES_ID(+)
                                   AND A.FACTORY = 'HMVA2'
                                   AND A.RES_CMF_9 = 'Y'
                                   AND A.RES_CMF_7 = 'Y'
                                   AND (A.RES_STS_1 NOT IN ('C200', 'B199') OR A.RES_UP_DOWN_FLAG = 'U') 
                                   AND A.DELETE_FLAG  = ' '
                                   AND A.RES_TYPE  = 'EQUIPMENT'
                                   AND (A.RES_GRP_3 IN ('SDBG','BACK LAP','WAFER EXPANDING','DIE ATTACH', 'WIRE BOND', 'SAW SORTER', 'SAW', 'LAMINATION') OR A.RES_ID IN ('M-A57','M-A59','M-A60'))
                                 GROUP BY A.RES_STS_2, A.RES_GRP_3, A.RES_GRP_6
                                 UNION ALL
                                SELECT RES_STS_2
                                     , SUBSTR(CUTOFF_DT, 1, 8) AS WORK_DATE
                                     , RES_GRP_3
                                     , RES_GRP_6
                                     , COUNT(RES_ID) AS RES_CNT
                                     , SUM(DECODE(RES_UP_DOWN_FLAG, 'U', 1, 0)) AS RUN_CNT
                                  FROM MRASRESDEF_BOH
                                 WHERE FACTORY = 'HMVA2'
                                   AND CUTOFF_DT BETWEEN '2020070122' AND '2020072022'
                                   AND SUBSTR(CUTOFF_DT, -2) = '22'
                                   AND RES_CMF_9 = 'Y'
                                   AND RES_CMF_7 = 'Y'
                                   AND (RES_STS_1 NOT IN ('C200', 'B199') OR RES_UP_DOWN_FLAG = 'U') 
                                   AND DELETE_FLAG  = ' '
                                   AND RES_TYPE  = 'EQUIPMENT'
                                   AND (RES_GRP_3 IN ('SDBG','BACK LAP','WAFER EXPANDING','DIE ATTACH', 'WIRE BOND', 'SAW SORTER', 'SAW', 'LAMINATION') OR RES_ID IN ('M-A57','M-A59','M-A60'))
                                 GROUP BY RES_STS_2, SUBSTR(CUTOFF_DT, 1, 8), RES_GRP_3, RES_GRP_6
                               ) A
                             , (
                                SELECT MAT_ID, MAT_GRP_2
                                     , (SELECT DATA_2 FROM MGCMTBLDAT WHERE FACTORY = 'HMVA2' AND TABLE_NAME = 'H_FAMILY' AND KEY_1 = MAT_GRP_2) AS DA_TYPE
                                  FROM MWIPMATDEF
                                 WHERE FACTORY = 'HMVA2'
                                   AND MAT_TYPE = 'FG'
                               ) B
                 WHERE A.RES_STS_2 = B.MAT_ID(+)
                       )
                 GROUP BY RES_STS_2, OPER_GRP
               ) RES
         WHERE 1=1
           AND MAT.OPER_GRP = SHP.END_OPER_GRP(+)
           AND MAT.OPER_GRP = WIP.WIP_OPER_GRP(+)
           AND MAT.OPER_GRP = RES.RES_OPER_GRP(+)
           AND MAT.MAT_ID = SHP.END_MAT_ID(+)
           AND MAT.MAT_ID = WIP.WIP_MAT_ID(+)
           AND MAT.MAT_ID = RES.RES_MAT_ID(+)
           AND NVL(SHP.END_TTL,0) + NVL(WIP.WIP_TTL,0) + NVL(RES.RES_TTL,0) > 0
       ) A
     , (SELECT DECODE(LEVEL, 1, '재공', 2, '실적', 3, '예상실적', 4, '설비대수', 5, 'RUN') AS GUBUN FROM DUAL CONNECT BY LEVEL <= 5 ) B
 GROUP BY A.OPER_GRP, A.OPER_GRP,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', B.GUBUN 
 ORDER BY DECODE(A.OPER_GRP, 'STOCK', 1, 'LAMI', 2, 'Stealth Saw', 3, 'BG', 4, 'DDS', 5, 'SAW', 6, 'DA', 7, 'DA(Epoxy)', 8, 'DA(DFN)', 9, 'WB', 10, 'C-MOLD', 11, 'SST', 12, 13), A.OPER_GRP,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', DECODE(B.GUBUN, '재공', 1, '실적', 2, '예상실적', 3, '설비대수', 4, 5) 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
SELECT  KEY_1,DATA_3,DATA_4  
FROM    MGCMTBLDAT  
WHERE   1=1 
        AND FACTORY = '' 
        AND TABLE_NAME='LOSS_CODE' 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT PLAN_WEEK V1    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_DATE = TO_CHAR(SYSDATE,'yyyymmdd')      AND ROWNUM = 1  
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT LANGUAGE_2 FROM RWEBFUNDEF WHERE FUNC_NAME = 'YLD040601'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT FACTORY Code, FAC_DESC Data
  FROM MWIPFACDEF
 WHERE FAC_GRP_5 = 'Y' 
 ORDER BY FAC_GRP_4 ASC
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT  KEY_1,DATA_3,DATA_4  
FROM    MGCMTBLDAT  
WHERE   1=1 
        AND FACTORY = 'HMVA2' 
        AND TABLE_NAME='LOSS_CODE' 
        AND DATA_3='Y'  
ORDER BY TO_NUMBER(DATA_4) 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT  KEY_1,DATA_3,DATA_4  
FROM    MGCMTBLDAT  
WHERE   1=1 
        AND FACTORY = 'HMVA2' 
        AND TABLE_NAME='LOSS_CODE' 
        AND DATA_3='Y'  
ORDER BY TO_NUMBER(DATA_4) 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
WITH DT AS
(
 SELECT * 
   FROM CWIPLOTEND 
  WHERE 1=1 
    AND TRAN_TIME BETWEEN '20200630220000' AND '20200720215959' 
    AND TRAN_CODE = 'END' 
    AND LOT_TYPE = 'W' 
    AND FACTORY = 'HMVA2' 
    AND HIST_DEL_FLAG = ' ' 
    AND TRAN_CMF_1 = 'CLOSE' 
)
SELECT  ' ',  ' ', SUMMERY.MAT_GRP_6, SUMMERY.MAT_GRP_3,  ' ',  ' ',  ' ',  ' ', SUMMERY.MAT_ID
     , SUMMERY.LOT_ID,SUMMERY.IN_TIME,SUMMERY.SHIP_TIME 
     , SUMMERY.TAT AS TAT 
     , SUMMERY.BE_OUT + NVL(SUM(LOSS.BE_LOSS_QTY),0) + NVL(SUM(LOSS.IL_LOSS_QTY),0) AS IL_IN 
     , SUMMERY.BE_OUT + NVL(SUM(LOSS.BE_LOSS_QTY),0) AS IL_OUT 
     , ROUND(((SUMMERY.BE_OUT + NVL(SUM(LOSS.BE_LOSS_QTY),0))/(SUMMERY.BE_OUT + NVL(SUM(LOSS.BE_LOSS_QTY),0) + NVL(SUM(LOSS.IL_LOSS_QTY),0)))*100,3)||'%' AS IL_YIELD 
     , SUMMERY.BE_OUT + NVL(SUM(LOSS.BE_LOSS_QTY),0) AS BE_IN 
     , SUMMERY.BE_OUT 
     , ROUND((SUMMERY.BE_OUT/(SUMMERY.BE_OUT + NVL(SUM(LOSS.BE_LOSS_QTY),0)))*100,3)||'%' AS BE_YIELD 
     , SUMMERY.OUT_QTY + NVL(SUM(LOSS.LOSS_QTY),0) AS IN_QTY  
     , SUMMERY.OUT_QTY 
     , ROUND(SUMMERY.OUT_QTY/(SUMMERY.OUT_QTY + NVL(SUM(LOSS.LOSS_QTY),0))*100,3)||'%' AS YIELD 
     , '' AS BONUS 
     , NVL(SUM(LOSS.LOSS_QTY),0) AS LOSS_QTY 
     , SUM(DECODE(LOSS.LOSS_CODE,'80',LOSS.LOSS_QTY,0))  LOSS0
     , SUM(DECODE(LOSS.LOSS_CODE,'81',LOSS.LOSS_QTY,0))  LOSS1
     , SUM(DECODE(LOSS.LOSS_CODE,'82',LOSS.LOSS_QTY,0))  LOSS2
     , SUM(DECODE(LOSS.LOSS_CODE,'83',LOSS.LOSS_QTY,0))  LOSS3
     , SUM(DECODE(LOSS.LOSS_CODE,'84',LOSS.LOSS_QTY,0))  LOSS4
     , SUM(DECODE(LOSS.LOSS_CODE,'85',LOSS.LOSS_QTY,0))  LOSS5
     , SUM(DECODE(LOSS.LOSS_CODE,'86',LOSS.LOSS_QTY,0))  LOSS6
     , SUM(DECODE(LOSS.LOSS_CODE,'87',LOSS.LOSS_QTY,0))  LOSS7
     , SUM(DECODE(LOSS.LOSS_CODE,'88',LOSS.LOSS_QTY,0))  LOSS8
     , SUM(DECODE(LOSS.LOSS_CODE,'100',LOSS.LOSS_QTY,0))  LOSS9
     , SUM(DECODE(LOSS.LOSS_CODE,'102',LOSS.LOSS_QTY,0))  LOSS10
     , SUM(DECODE(LOSS.LOSS_CODE,'104',LOSS.LOSS_QTY,0))  LOSS11
     , SUM(DECODE(LOSS.LOSS_CODE,'105',LOSS.LOSS_QTY,0))  LOSS12
     , SUM(DECODE(LOSS.LOSS_CODE,'106',LOSS.LOSS_QTY,0))  LOSS13
     , SUM(DECODE(LOSS.LOSS_CODE,'107',LOSS.LOSS_QTY,0))  LOSS14
     , SUM(DECODE(LOSS.LOSS_CODE,'110',LOSS.LOSS_QTY,0))  LOSS15
     , SUM(DECODE(LOSS.LOSS_CODE,'111',LOSS.LOSS_QTY,0))  LOSS16
     , SUM(DECODE(LOSS.LOSS_CODE,'112',LOSS.LOSS_QTY,0))  LOSS17
     , SUM(DECODE(LOSS.LOSS_CODE,'114',LOSS.LOSS_QTY,0))  LOSS18
     , SUM(DECODE(LOSS.LOSS_CODE,'115',LOSS.LOSS_QTY,0))  LOSS19
     , SUM(DECODE(LOSS.LOSS_CODE,'116',LOSS.LOSS_QTY,0))  LOSS20
     , SUM(DECODE(LOSS.LOSS_CODE,'119',LOSS.LOSS_QTY,0))  LOSS21
     , SUM(DECODE(LOSS.LOSS_CODE,'120',LOSS.LOSS_QTY,0))  LOSS22
     , SUM(DECODE(LOSS.LOSS_CODE,'121',LOSS.LOSS_QTY,0))  LOSS23
     , SUM(DECODE(LOSS.LOSS_CODE,'122',LOSS.LOSS_QTY,0))  LOSS24
     , SUM(DECODE(LOSS.LOSS_CODE,'123',LOSS.LOSS_QTY,0))  LOSS25
     , SUM(DECODE(LOSS.LOSS_CODE,'124',LOSS.LOSS_QTY,0))  LOSS26
     , SUM(DECODE(LOSS.LOSS_CODE,'125',LOSS.LOSS_QTY,0))  LOSS27
     , SUM(DECODE(LOSS.LOSS_CODE,'127',LOSS.LOSS_QTY,0))  LOSS28
     , SUM(DECODE(LOSS.LOSS_CODE,'128',LOSS.LOSS_QTY,0))  LOSS29
     , SUM(DECODE(LOSS.LOSS_CODE,'200',LOSS.LOSS_QTY,0))  LOSS30
     , SUM(DECODE(LOSS.LOSS_CODE,'202',LOSS.LOSS_QTY,0))  LOSS31
     , SUM(DECODE(LOSS.LOSS_CODE,'203',LOSS.LOSS_QTY,0))  LOSS32
     , SUM(DECODE(LOSS.LOSS_CODE,'204',LOSS.LOSS_QTY,0))  LOSS33
     , SUM(DECODE(LOSS.LOSS_CODE,'205',LOSS.LOSS_QTY,0))  LOSS34
     , SUM(DECODE(LOSS.LOSS_CODE,'206',LOSS.LOSS_QTY,0))  LOSS35
     , SUM(DECODE(LOSS.LOSS_CODE,'207',LOSS.LOSS_QTY,0))  LOSS36
     , SUM(DECODE(LOSS.LOSS_CODE,'208',LOSS.LOSS_QTY,0))  LOSS37
     , SUM(DECODE(LOSS.LOSS_CODE,'209',LOSS.LOSS_QTY,0))  LOSS38
     , SUM(DECODE(LOSS.LOSS_CODE,'210',LOSS.LOSS_QTY,0))  LOSS39
     , SUM(DECODE(LOSS.LOSS_CODE,'211',LOSS.LOSS_QTY,0))  LOSS40
     , SUM(DECODE(LOSS.LOSS_CODE,'212',LOSS.LOSS_QTY,0))  LOSS41
     , SUM(DECODE(LOSS.LOSS_CODE,'213',LOSS.LOSS_QTY,0))  LOSS42
     , SUM(DECODE(LOSS.LOSS_CODE,'214',LOSS.LOSS_QTY,0))  LOSS43
     , SUM(DECODE(LOSS.LOSS_CODE,'215',LOSS.LOSS_QTY,0))  LOSS44
     , SUM(DECODE(LOSS.LOSS_CODE,'216',LOSS.LOSS_QTY,0))  LOSS45
     , SUM(DECODE(LOSS.LOSS_CODE,'217',LOSS.LOSS_QTY,0))  LOSS46
     , SUM(DECODE(LOSS.LOSS_CODE,'218',LOSS.LOSS_QTY,0))  LOSS47
     , SUM(DECODE(LOSS.LOSS_CODE,'219',LOSS.LOSS_QTY,0))  LOSS48
     , SUM(DECODE(LOSS.LOSS_CODE,'222',LOSS.LOSS_QTY,0))  LOSS49
     , SUM(DECODE(LOSS.LOSS_CODE,'224',LOSS.LOSS_QTY,0))  LOSS50
     , SUM(DECODE(LOSS.LOSS_CODE,'225',LOSS.LOSS_QTY,0))  LOSS51
     , SUM(DECODE(LOSS.LOSS_CODE,'250',LOSS.LOSS_QTY,0))  LOSS52
     , SUM(DECODE(LOSS.LOSS_CODE,'251',LOSS.LOSS_QTY,0))  LOSS53
     , SUM(DECODE(LOSS.LOSS_CODE,'265',LOSS.LOSS_QTY,0))  LOSS54
     , SUM(DECODE(LOSS.LOSS_CODE,'270',LOSS.LOSS_QTY,0))  LOSS55
     , SUM(DECODE(LOSS.LOSS_CODE,'291',LOSS.LOSS_QTY,0))  LOSS56
     , SUM(DECODE(LOSS.LOSS_CODE,'299',LOSS.LOSS_QTY,0))  LOSS57
     , SUM(DECODE(LOSS.LOSS_CODE,'302',LOSS.LOSS_QTY,0))  LOSS58
     , SUM(DECODE(LOSS.LOSS_CODE,'303',LOSS.LOSS_QTY,0))  LOSS59
     , SUM(DECODE(LOSS.LOSS_CODE,'304',LOSS.LOSS_QTY,0))  LOSS60
     , SUM(DECODE(LOSS.LOSS_CODE,'305',LOSS.LOSS_QTY,0))  LOSS61
     , SUM(DECODE(LOSS.LOSS_CODE,'306',LOSS.LOSS_QTY,0))  LOSS62
     , SUM(DECODE(LOSS.LOSS_CODE,'307',LOSS.LOSS_QTY,0))  LOSS63
     , SUM(DECODE(LOSS.LOSS_CODE,'308',LOSS.LOSS_QTY,0))  LOSS64
     , SUM(DECODE(LOSS.LOSS_CODE,'311',LOSS.LOSS_QTY,0))  LOSS65
     , SUM(DECODE(LOSS.LOSS_CODE,'312',LOSS.LOSS_QTY,0))  LOSS66
     , SUM(DECODE(LOSS.LOSS_CODE,'313',LOSS.LOSS_QTY,0))  LOSS67
     , SUM(DECODE(LOSS.LOSS_CODE,'314',LOSS.LOSS_QTY,0))  LOSS68
     , SUM(DECODE(LOSS.LOSS_CODE,'315',LOSS.LOSS_QTY,0))  LOSS69
     , SUM(DECODE(LOSS.LOSS_CODE,'316',LOSS.LOSS_QTY,0))  LOSS70
     , SUM(DECODE(LOSS.LOSS_CODE,'317',LOSS.LOSS_QTY,0))  LOSS71
     , SUM(DECODE(LOSS.LOSS_CODE,'318',LOSS.LOSS_QTY,0))  LOSS72
     , SUM(DECODE(LOSS.LOSS_CODE,'319',LOSS.LOSS_QTY,0))  LOSS73
     , SUM(DECODE(LOSS.LOSS_CODE,'320',LOSS.LOSS_QTY,0))  LOSS74
     , SUM(DECODE(LOSS.LOSS_CODE,'321',LOSS.LOSS_QTY,0))  LOSS75
     , SUM(DECODE(LOSS.LOSS_CODE,'322',LOSS.LOSS_QTY,0))  LOSS76
     , SUM(DECODE(LOSS.LOSS_CODE,'323',LOSS.LOSS_QTY,0))  LOSS77
     , SUM(DECODE(LOSS.LOSS_CODE,'324',LOSS.LOSS_QTY,0))  LOSS78
     , SUM(DECODE(LOSS.LOSS_CODE,'326',LOSS.LOSS_QTY,0))  LOSS79
     , SUM(DECODE(LOSS.LOSS_CODE,'330',LOSS.LOSS_QTY,0))  LOSS80
     , SUM(DECODE(LOSS.LOSS_CODE,'331',LOSS.LOSS_QTY,0))  LOSS81
     , SUM(DECODE(LOSS.LOSS_CODE,'332',LOSS.LOSS_QTY,0))  LOSS82
     , SUM(DECODE(LOSS.LOSS_CODE,'333',LOSS.LOSS_QTY,0))  LOSS83
     , SUM(DECODE(LOSS.LOSS_CODE,'368',LOSS.LOSS_QTY,0))  LOSS84
     , SUM(DECODE(LOSS.LOSS_CODE,'371',LOSS.LOSS_QTY,0))  LOSS85
     , SUM(DECODE(LOSS.LOSS_CODE,'373',LOSS.LOSS_QTY,0))  LOSS86
     , SUM(DECODE(LOSS.LOSS_CODE,'388',LOSS.LOSS_QTY,0))  LOSS87
     , SUM(DECODE(LOSS.LOSS_CODE,'392',LOSS.LOSS_QTY,0))  LOSS88
     , SUM(DECODE(LOSS.LOSS_CODE,'395',LOSS.LOSS_QTY,0))  LOSS89
     , SUM(DECODE(LOSS.LOSS_CODE,'402',LOSS.LOSS_QTY,0))  LOSS90
     , SUM(DECODE(LOSS.LOSS_CODE,'403',LOSS.LOSS_QTY,0))  LOSS91
     , SUM(DECODE(LOSS.LOSS_CODE,'404',LOSS.LOSS_QTY,0))  LOSS92
     , SUM(DECODE(LOSS.LOSS_CODE,'405',LOSS.LOSS_QTY,0))  LOSS93
     , SUM(DECODE(LOSS.LOSS_CODE,'406',LOSS.LOSS_QTY,0))  LOSS94
     , SUM(DECODE(LOSS.LOSS_CODE,'407',LOSS.LOSS_QTY,0))  LOSS95
     , SUM(DECODE(LOSS.LOSS_CODE,'408',LOSS.LOSS_QTY,0))  LOSS96
     , SUM(DECODE(LOSS.LOSS_CODE,'409',LOSS.LOSS_QTY,0))  LOSS97
     , SUM(DECODE(LOSS.LOSS_CODE,'410',LOSS.LOSS_QTY,0))  LOSS98
     , SUM(DECODE(LOSS.LOSS_CODE,'411',LOSS.LOSS_QTY,0))  LOSS99
     , SUM(DECODE(LOSS.LOSS_CODE,'412',LOSS.LOSS_QTY,0))  LOSS100
     , SUM(DECODE(LOSS.LOSS_CODE,'413',LOSS.LOSS_QTY,0))  LOSS101
     , SUM(DECODE(LOSS.LOSS_CODE,'414',LOSS.LOSS_QTY,0))  LOSS102
     , SUM(DECODE(LOSS.LOSS_CODE,'415',LOSS.LOSS_QTY,0))  LOSS103
     , SUM(DECODE(LOSS.LOSS_CODE,'417',LOSS.LOSS_QTY,0))  LOSS104
     , SUM(DECODE(LOSS.LOSS_CODE,'418',LOSS.LOSS_QTY,0))  LOSS105
     , SUM(DECODE(LOSS.LOSS_CODE,'419',LOSS.LOSS_QTY,0))  LOSS106
     , SUM(DECODE(LOSS.LOSS_CODE,'420',LOSS.LOSS_QTY,0))  LOSS107
     , SUM(DECODE(LOSS.LOSS_CODE,'421',LOSS.LOSS_QTY,0))  LOSS108
     , SUM(DECODE(LOSS.LOSS_CODE,'422',LOSS.LOSS_QTY,0))  LOSS109
     , SUM(DECODE(LOSS.LOSS_CODE,'423',LOSS.LOSS_QTY,0))  LOSS110
     , SUM(DECODE(LOSS.LOSS_CODE,'424',LOSS.LOSS_QTY,0))  LOSS111
     , SUM(DECODE(LOSS.LOSS_CODE,'425',LOSS.LOSS_QTY,0))  LOSS112
     , SUM(DECODE(LOSS.LOSS_CODE,'426',LOSS.LOSS_QTY,0))  LOSS113
     , SUM(DECODE(LOSS.LOSS_CODE,'427',LOSS.LOSS_QTY,0))  LOSS114
     , SUM(DECODE(LOSS.LOSS_CODE,'440',LOSS.LOSS_QTY,0))  LOSS115
     , SUM(DECODE(LOSS.LOSS_CODE,'472',LOSS.LOSS_QTY,0))  LOSS116
     , SUM(DECODE(LOSS.LOSS_CODE,'430',LOSS.LOSS_QTY,0))  LOSS117
     , SUM(DECODE(LOSS.LOSS_CODE,'473',LOSS.LOSS_QTY,0))  LOSS118
     , SUM(DECODE(LOSS.LOSS_CODE,'474',LOSS.LOSS_QTY,0))  LOSS119
     , SUM(DECODE(LOSS.LOSS_CODE,'475',LOSS.LOSS_QTY,0))  LOSS120
     , SUM(DECODE(LOSS.LOSS_CODE,'476',LOSS.LOSS_QTY,0))  LOSS121
     , SUM(DECODE(LOSS.LOSS_CODE,'477',LOSS.LOSS_QTY,0))  LOSS122
     , SUM(DECODE(LOSS.LOSS_CODE,'478',LOSS.LOSS_QTY,0))  LOSS123
     , SUM(DECODE(LOSS.LOSS_CODE,'479',LOSS.LOSS_QTY,0))  LOSS124
     , SUM(DECODE(LOSS.LOSS_CODE,'480',LOSS.LOSS_QTY,0))  LOSS125
     , SUM(DECODE(LOSS.LOSS_CODE,'481',LOSS.LOSS_QTY,0))  LOSS126
     , SUM(DECODE(LOSS.LOSS_CODE,'491',LOSS.LOSS_QTY,0))  LOSS127
     , SUM(DECODE(LOSS.LOSS_CODE,'492',LOSS.LOSS_QTY,0))  LOSS128
     , SUM(DECODE(LOSS.LOSS_CODE,'493',LOSS.LOSS_QTY,0))  LOSS129
     , SUM(DECODE(LOSS.LOSS_CODE,'494',LOSS.LOSS_QTY,0))  LOSS130
     , SUM(DECODE(LOSS.LOSS_CODE,'495',LOSS.LOSS_QTY,0))  LOSS131
     , SUM(DECODE(LOSS.LOSS_CODE,'503',LOSS.LOSS_QTY,0))  LOSS132
     , SUM(DECODE(LOSS.LOSS_CODE,'504',LOSS.LOSS_QTY,0))  LOSS133
     , SUM(DECODE(LOSS.LOSS_CODE,'508',LOSS.LOSS_QTY,0))  LOSS134
     , SUM(DECODE(LOSS.LOSS_CODE,'510',LOSS.LOSS_QTY,0))  LOSS135
     , SUM(DECODE(LOSS.LOSS_CODE,'512',LOSS.LOSS_QTY,0))  LOSS136
     , SUM(DECODE(LOSS.LOSS_CODE,'513',LOSS.LOSS_QTY,0))  LOSS137
     , SUM(DECODE(LOSS.LOSS_CODE,'514',LOSS.LOSS_QTY,0))  LOSS138
     , SUM(DECODE(LOSS.LOSS_CODE,'517',LOSS.LOSS_QTY,0))  LOSS139
     , SUM(DECODE(LOSS.LOSS_CODE,'520',LOSS.LOSS_QTY,0))  LOSS140
     , SUM(DECODE(LOSS.LOSS_CODE,'531',LOSS.LOSS_QTY,0))  LOSS141
     , SUM(DECODE(LOSS.LOSS_CODE,'538',LOSS.LOSS_QTY,0))  LOSS142
     , SUM(DECODE(LOSS.LOSS_CODE,'539',LOSS.LOSS_QTY,0))  LOSS143
     , SUM(DECODE(LOSS.LOSS_CODE,'563',LOSS.LOSS_QTY,0))  LOSS144
     , SUM(DECODE(LOSS.LOSS_CODE,'564',LOSS.LOSS_QTY,0))  LOSS145
     , SUM(DECODE(LOSS.LOSS_CODE,'565',LOSS.LOSS_QTY,0))  LOSS146
     , SUM(DECODE(LOSS.LOSS_CODE,'566',LOSS.LOSS_QTY,0))  LOSS147
     , SUM(DECODE(LOSS.LOSS_CODE,'567',LOSS.LOSS_QTY,0))  LOSS148
     , SUM(DECODE(LOSS.LOSS_CODE,'568',LOSS.LOSS_QTY,0))  LOSS149
     , SUM(DECODE(LOSS.LOSS_CODE,'571',LOSS.LOSS_QTY,0))  LOSS150
     , SUM(DECODE(LOSS.LOSS_CODE,'572',LOSS.LOSS_QTY,0))  LOSS151
     , SUM(DECODE(LOSS.LOSS_CODE,'573',LOSS.LOSS_QTY,0))  LOSS152
     , SUM(DECODE(LOSS.LOSS_CODE,'602',LOSS.LOSS_QTY,0))  LOSS153
     , SUM(DECODE(LOSS.LOSS_CODE,'603',LOSS.LOSS_QTY,0))  LOSS154
     , SUM(DECODE(LOSS.LOSS_CODE,'604',LOSS.LOSS_QTY,0))  LOSS155
     , SUM(DECODE(LOSS.LOSS_CODE,'605',LOSS.LOSS_QTY,0))  LOSS156
     , SUM(DECODE(LOSS.LOSS_CODE,'606',LOSS.LOSS_QTY,0))  LOSS157
     , SUM(DECODE(LOSS.LOSS_CODE,'607',LOSS.LOSS_QTY,0))  LOSS158
     , SUM(DECODE(LOSS.LOSS_CODE,'608',LOSS.LOSS_QTY,0))  LOSS159
     , SUM(DECODE(LOSS.LOSS_CODE,'609',LOSS.LOSS_QTY,0))  LOSS160
     , SUM(DECODE(LOSS.LOSS_CODE,'610',LOSS.LOSS_QTY,0))  LOSS161
     , SUM(DECODE(LOSS.LOSS_CODE,'611',LOSS.LOSS_QTY,0))  LOSS162
     , SUM(DECODE(LOSS.LOSS_CODE,'612',LOSS.LOSS_QTY,0))  LOSS163
     , SUM(DECODE(LOSS.LOSS_CODE,'613',LOSS.LOSS_QTY,0))  LOSS164
     , SUM(DECODE(LOSS.LOSS_CODE,'614',LOSS.LOSS_QTY,0))  LOSS165
     , SUM(DECODE(LOSS.LOSS_CODE,'615',LOSS.LOSS_QTY,0))  LOSS166
     , SUM(DECODE(LOSS.LOSS_CODE,'616',LOSS.LOSS_QTY,0))  LOSS167
     , SUM(DECODE(LOSS.LOSS_CODE,'619',LOSS.LOSS_QTY,0))  LOSS168
     , SUM(DECODE(LOSS.LOSS_CODE,'620',LOSS.LOSS_QTY,0))  LOSS169
     , SUM(DECODE(LOSS.LOSS_CODE,'621',LOSS.LOSS_QTY,0))  LOSS170
     , SUM(DECODE(LOSS.LOSS_CODE,'631',LOSS.LOSS_QTY,0))  LOSS171
     , SUM(DECODE(LOSS.LOSS_CODE,'633',LOSS.LOSS_QTY,0))  LOSS172
     , SUM(DECODE(LOSS.LOSS_CODE,'632',LOSS.LOSS_QTY,0))  LOSS173
     , SUM(DECODE(LOSS.LOSS_CODE,'702',LOSS.LOSS_QTY,0))  LOSS174
     , SUM(DECODE(LOSS.LOSS_CODE,'703',LOSS.LOSS_QTY,0))  LOSS175
     , SUM(DECODE(LOSS.LOSS_CODE,'704',LOSS.LOSS_QTY,0))  LOSS176
     , SUM(DECODE(LOSS.LOSS_CODE,'705',LOSS.LOSS_QTY,0))  LOSS177
     , SUM(DECODE(LOSS.LOSS_CODE,'706',LOSS.LOSS_QTY,0))  LOSS178
     , SUM(DECODE(LOSS.LOSS_CODE,'707',LOSS.LOSS_QTY,0))  LOSS179
     , SUM(DECODE(LOSS.LOSS_CODE,'708',LOSS.LOSS_QTY,0))  LOSS180
     , SUM(DECODE(LOSS.LOSS_CODE,'709',LOSS.LOSS_QTY,0))  LOSS181
     , SUM(DECODE(LOSS.LOSS_CODE,'710',LOSS.LOSS_QTY,0))  LOSS182
     , SUM(DECODE(LOSS.LOSS_CODE,'711',LOSS.LOSS_QTY,0))  LOSS183
     , SUM(DECODE(LOSS.LOSS_CODE,'712',LOSS.LOSS_QTY,0))  LOSS184
     , SUM(DECODE(LOSS.LOSS_CODE,'713',LOSS.LOSS_QTY,0))  LOSS185
     , SUM(DECODE(LOSS.LOSS_CODE,'714',LOSS.LOSS_QTY,0))  LOSS186
     , SUM(DECODE(LOSS.LOSS_CODE,'715',LOSS.LOSS_QTY,0))  LOSS187
     , SUM(DECODE(LOSS.LOSS_CODE,'716',LOSS.LOSS_QTY,0))  LOSS188
     , SUM(DECODE(LOSS.LOSS_CODE,'718',LOSS.LOSS_QTY,0))  LOSS189
     , SUM(DECODE(LOSS.LOSS_CODE,'719',LOSS.LOSS_QTY,0))  LOSS190
     , SUM(DECODE(LOSS.LOSS_CODE,'720',LOSS.LOSS_QTY,0))  LOSS191
     , SUM(DECODE(LOSS.LOSS_CODE,'721',LOSS.LOSS_QTY,0))  LOSS192
     , SUM(DECODE(LOSS.LOSS_CODE,'722',LOSS.LOSS_QTY,0))  LOSS193
     , SUM(DECODE(LOSS.LOSS_CODE,'760',LOSS.LOSS_QTY,0))  LOSS194
     , SUM(DECODE(LOSS.LOSS_CODE,'802',LOSS.LOSS_QTY,0))  LOSS195
     , SUM(DECODE(LOSS.LOSS_CODE,'803',LOSS.LOSS_QTY,0))  LOSS196
     , SUM(DECODE(LOSS.LOSS_CODE,'804',LOSS.LOSS_QTY,0))  LOSS197
     , SUM(DECODE(LOSS.LOSS_CODE,'805',LOSS.LOSS_QTY,0))  LOSS198
     , SUM(DECODE(LOSS.LOSS_CODE,'808',LOSS.LOSS_QTY,0))  LOSS199
     , SUM(DECODE(LOSS.LOSS_CODE,'809',LOSS.LOSS_QTY,0))  LOSS200
     , SUM(DECODE(LOSS.LOSS_CODE,'810',LOSS.LOSS_QTY,0))  LOSS201
     , SUM(DECODE(LOSS.LOSS_CODE,'811',LOSS.LOSS_QTY,0))  LOSS202
     , SUM(DECODE(LOSS.LOSS_CODE,'812',LOSS.LOSS_QTY,0))  LOSS203
     , SUM(DECODE(LOSS.LOSS_CODE,'813',LOSS.LOSS_QTY,0))  LOSS204
     , SUM(DECODE(LOSS.LOSS_CODE,'815',LOSS.LOSS_QTY,0))  LOSS205
     , SUM(DECODE(LOSS.LOSS_CODE,'816',LOSS.LOSS_QTY,0))  LOSS206
     , SUM(DECODE(LOSS.LOSS_CODE,'818',LOSS.LOSS_QTY,0))  LOSS207
     , SUM(DECODE(LOSS.LOSS_CODE,'819',LOSS.LOSS_QTY,0))  LOSS208
     , SUM(DECODE(LOSS.LOSS_CODE,'820',LOSS.LOSS_QTY,0))  LOSS209
     , SUM(DECODE(LOSS.LOSS_CODE,'821',LOSS.LOSS_QTY,0))  LOSS210
     , SUM(DECODE(LOSS.LOSS_CODE,'822',LOSS.LOSS_QTY,0))  LOSS211
     , SUM(DECODE(LOSS.LOSS_CODE,'823',LOSS.LOSS_QTY,0))  LOSS212
     , SUM(DECODE(LOSS.LOSS_CODE,'829',LOSS.LOSS_QTY,0))  LOSS213
     , SUM(DECODE(LOSS.LOSS_CODE,'830',LOSS.LOSS_QTY,0))  LOSS214
     , SUM(DECODE(LOSS.LOSS_CODE,'862',LOSS.LOSS_QTY,0))  LOSS215
     , SUM(DECODE(LOSS.LOSS_CODE,'866',LOSS.LOSS_QTY,0))  LOSS216
     , SUM(DECODE(LOSS.LOSS_CODE,'867',LOSS.LOSS_QTY,0))  LOSS217
     , SUM(DECODE(LOSS.LOSS_CODE,'889',LOSS.LOSS_QTY,0))  LOSS218
     , SUM(DECODE(LOSS.LOSS_CODE,'890',LOSS.LOSS_QTY,0))  LOSS219
     , SUM(DECODE(LOSS.LOSS_CODE,'891',LOSS.LOSS_QTY,0))  LOSS220
     , SUM(DECODE(LOSS.LOSS_CODE,'892',LOSS.LOSS_QTY,0))  LOSS221
     , SUM(DECODE(LOSS.LOSS_CODE,'893',LOSS.LOSS_QTY,0))  LOSS222
     , SUM(DECODE(LOSS.LOSS_CODE,'894',LOSS.LOSS_QTY,0))  LOSS223
     , SUM(DECODE(LOSS.LOSS_CODE,'903',LOSS.LOSS_QTY,0))  LOSS224
     , SUM(DECODE(LOSS.LOSS_CODE,'904',LOSS.LOSS_QTY,0))  LOSS225
     , SUM(DECODE(LOSS.LOSS_CODE,'905',LOSS.LOSS_QTY,0))  LOSS226
     , SUM(DECODE(LOSS.LOSS_CODE,'924',LOSS.LOSS_QTY,0))  LOSS227
     , SUM(DECODE(LOSS.LOSS_CODE,'925',LOSS.LOSS_QTY,0))  LOSS228
     , SUM(DECODE(LOSS.LOSS_CODE,'929',LOSS.LOSS_QTY,0))  LOSS229
     , SUM(DECODE(LOSS.LOSS_CODE,'930',LOSS.LOSS_QTY,0))  LOSS230
     , SUM(DECODE(LOSS.LOSS_CODE,'931',LOSS.LOSS_QTY,0))  LOSS231
     , SUM(DECODE(LOSS.LOSS_CODE,'932',LOSS.LOSS_QTY,0))  LOSS232
     , SUM(DECODE(LOSS.LOSS_CODE,'935',LOSS.LOSS_QTY,0))  LOSS233
     , SUM(DECODE(LOSS.LOSS_CODE,'936',LOSS.LOSS_QTY,0))  LOSS234
     , SUM(DECODE(LOSS.LOSS_CODE,'937',LOSS.LOSS_QTY,0))  LOSS235
     , SUM(DECODE(LOSS.LOSS_CODE,'940',LOSS.LOSS_QTY,0))  LOSS236
     , SUM(DECODE(LOSS.LOSS_CODE,'944',LOSS.LOSS_QTY,0))  LOSS237
     , SUM(DECODE(LOSS.LOSS_CODE,'945',LOSS.LOSS_QTY,0))  LOSS238
     , SUM(DECODE(LOSS.LOSS_CODE,'947',LOSS.LOSS_QTY,0))  LOSS239
     , SUM(DECODE(LOSS.LOSS_CODE,'948',LOSS.LOSS_QTY,0))  LOSS240
     , SUM(DECODE(LOSS.LOSS_CODE,'949',LOSS.LOSS_QTY,0))  LOSS241
     , SUM(DECODE(LOSS.LOSS_CODE,'950',LOSS.LOSS_QTY,0))  LOSS242
     , SUM(DECODE(LOSS.LOSS_CODE,'951',LOSS.LOSS_QTY,0))  LOSS243
     , SUM(DECODE(LOSS.LOSS_CODE,'953',LOSS.LOSS_QTY,0))  LOSS244
     , SUM(DECODE(LOSS.LOSS_CODE,'954',LOSS.LOSS_QTY,0))  LOSS245
     , SUM(DECODE(LOSS.LOSS_CODE,'955',LOSS.LOSS_QTY,0))  LOSS246
     , SUM(DECODE(LOSS.LOSS_CODE,'956',LOSS.LOSS_QTY,0))  LOSS247
     , SUM(DECODE(LOSS.LOSS_CODE,'957',LOSS.LOSS_QTY,0))  LOSS248
     , SUM(DECODE(LOSS.LOSS_CODE,'958',LOSS.LOSS_QTY,0))  LOSS249
     , SUM(DECODE(LOSS.LOSS_CODE,'962',LOSS.LOSS_QTY,0))  LOSS250
     , SUM(DECODE(LOSS.LOSS_CODE,'970',LOSS.LOSS_QTY,0))  LOSS251
     , SUM(DECODE(LOSS.LOSS_CODE,'971',LOSS.LOSS_QTY,0))  LOSS252
     , SUM(DECODE(LOSS.LOSS_CODE,'991',LOSS.LOSS_QTY,0))  LOSS253
     , SUM(DECODE(LOSS.LOSS_CODE,'992',LOSS.LOSS_QTY,0))  LOSS254
     , SUM(DECODE(LOSS.LOSS_CODE,'995',LOSS.LOSS_QTY,0))  LOSS255
     , SUM(DECODE(LOSS.LOSS_CODE,'996',LOSS.LOSS_QTY,0))  LOSS256
     , SUM(DECODE(LOSS.LOSS_CODE,'997',LOSS.LOSS_QTY,0))  LOSS257
     , SUM(DECODE(LOSS.LOSS_CODE,'129',LOSS.LOSS_QTY,0))  LOSS258
     , SUM(DECODE(LOSS.LOSS_CODE,'130',LOSS.LOSS_QTY,0))  LOSS259
     , SUM(DECODE(LOSS.LOSS_CODE,'131',LOSS.LOSS_QTY,0))  LOSS260
     , SUM(DECODE(LOSS.LOSS_CODE,'132',LOSS.LOSS_QTY,0))  LOSS261
     , SUM(DECODE(LOSS.LOSS_CODE,'133',LOSS.LOSS_QTY,0))  LOSS262
     , SUM(DECODE(LOSS.LOSS_CODE,'1001',LOSS.LOSS_QTY,0))  LOSS263
     , SUM(DECODE(LOSS.LOSS_CODE,'1002',LOSS.LOSS_QTY,0))  LOSS264
     , SUM(DECODE(LOSS.LOSS_CODE,'1003',LOSS.LOSS_QTY,0))  LOSS265
     , SUM(DECODE(LOSS.LOSS_CODE,'1004',LOSS.LOSS_QTY,0))  LOSS266
     , SUM(DECODE(LOSS.LOSS_CODE,'1005',LOSS.LOSS_QTY,0))  LOSS267
     , SUM(DECODE(LOSS.LOSS_CODE,'1006',LOSS.LOSS_QTY,0))  LOSS268
     , SUM(DECODE(LOSS.LOSS_CODE,'1007',LOSS.LOSS_QTY,0))  LOSS269
     , SUM(DECODE(LOSS.LOSS_CODE,'1008',LOSS.LOSS_QTY,0))  LOSS270
     , SUM(DECODE(LOSS.LOSS_CODE,'1009',LOSS.LOSS_QTY,0))  LOSS271
     , SUM(DECODE(LOSS.LOSS_CODE,'1010',LOSS.LOSS_QTY,0))  LOSS272
     , SUM(DECODE(LOSS.LOSS_CODE,'1011',LOSS.LOSS_QTY,0))  LOSS273
     , SUM(DECODE(LOSS.LOSS_CODE,'1012',LOSS.LOSS_QTY,0))  LOSS274
     , SUM(DECODE(LOSS.LOSS_CODE,'1021',LOSS.LOSS_QTY,0))  LOSS275
     , SUM(DECODE(LOSS.LOSS_CODE,'1022',LOSS.LOSS_QTY,0))  LOSS276
     , SUM(DECODE(LOSS.LOSS_CODE,'1023',LOSS.LOSS_QTY,0))  LOSS277
     , SUM(DECODE(LOSS.LOSS_CODE,'1024',LOSS.LOSS_QTY,0))  LOSS278
     , SUM(DECODE(LOSS.LOSS_CODE,'1025',LOSS.LOSS_QTY,0))  LOSS279
     , SUM(DECODE(LOSS.LOSS_CODE,'1026',LOSS.LOSS_QTY,0))  LOSS280
     , SUM(DECODE(LOSS.LOSS_CODE,'1027',LOSS.LOSS_QTY,0))  LOSS281
     , SUM(DECODE(LOSS.LOSS_CODE,'1028',LOSS.LOSS_QTY,0))  LOSS282
     , SUM(DECODE(LOSS.LOSS_CODE,'1029',LOSS.LOSS_QTY,0))  LOSS283
     , SUM(DECODE(LOSS.LOSS_CODE,'1031',LOSS.LOSS_QTY,0))  LOSS284
     , SUM(DECODE(LOSS.LOSS_CODE,'1032',LOSS.LOSS_QTY,0))  LOSS285
     , SUM(DECODE(LOSS.LOSS_CODE,'1033',LOSS.LOSS_QTY,0))  LOSS286
     , SUM(DECODE(LOSS.LOSS_CODE,'1034',LOSS.LOSS_QTY,0))  LOSS287
     , SUM(DECODE(LOSS.LOSS_CODE,'1035',LOSS.LOSS_QTY,0))  LOSS288
     , SUM(DECODE(LOSS.LOSS_CODE,'1099',LOSS.LOSS_QTY,0))  LOSS289
     , SUM(DECODE(LOSS.LOSS_CODE,'1101',LOSS.LOSS_QTY,0))  LOSS290
     , SUM(DECODE(LOSS.LOSS_CODE,'1102',LOSS.LOSS_QTY,0))  LOSS291
     , SUM(DECODE(LOSS.LOSS_CODE,'1103',LOSS.LOSS_QTY,0))  LOSS292
     , SUM(DECODE(LOSS.LOSS_CODE,'1111',LOSS.LOSS_QTY,0))  LOSS293
     , SUM(DECODE(LOSS.LOSS_CODE,'1112',LOSS.LOSS_QTY,0))  LOSS294
     , SUM(DECODE(LOSS.LOSS_CODE,'1113',LOSS.LOSS_QTY,0))  LOSS295
     , SUM(DECODE(LOSS.LOSS_CODE,'1114',LOSS.LOSS_QTY,0))  LOSS296
     , SUM(DECODE(LOSS.LOSS_CODE,'1115',LOSS.LOSS_QTY,0))  LOSS297
     , SUM(DECODE(LOSS.LOSS_CODE,'1116',LOSS.LOSS_QTY,0))  LOSS298
     , SUM(DECODE(LOSS.LOSS_CODE,'1117',LOSS.LOSS_QTY,0))  LOSS299
     , SUM(DECODE(LOSS.LOSS_CODE,'1118',LOSS.LOSS_QTY,0))  LOSS300
     , SUM(DECODE(LOSS.LOSS_CODE,'1119',LOSS.LOSS_QTY,0))  LOSS301
     , SUM(DECODE(LOSS.LOSS_CODE,'1131',LOSS.LOSS_QTY,0))  LOSS302
     , SUM(DECODE(LOSS.LOSS_CODE,'1132',LOSS.LOSS_QTY,0))  LOSS303
     , SUM(DECODE(LOSS.LOSS_CODE,'1133',LOSS.LOSS_QTY,0))  LOSS304
     , SUM(DECODE(LOSS.LOSS_CODE,'1134',LOSS.LOSS_QTY,0))  LOSS305
     , SUM(DECODE(LOSS.LOSS_CODE,'1135',LOSS.LOSS_QTY,0))  LOSS306
     , SUM(DECODE(LOSS.LOSS_CODE,'1201',LOSS.LOSS_QTY,0))  LOSS307
     , SUM(DECODE(LOSS.LOSS_CODE,'1202',LOSS.LOSS_QTY,0))  LOSS308
     , SUM(DECODE(LOSS.LOSS_CODE,'1203',LOSS.LOSS_QTY,0))  LOSS309
     , SUM(DECODE(LOSS.LOSS_CODE,'1204',LOSS.LOSS_QTY,0))  LOSS310
     , SUM(DECODE(LOSS.LOSS_CODE,'1205',LOSS.LOSS_QTY,0))  LOSS311
     , SUM(DECODE(LOSS.LOSS_CODE,'1206',LOSS.LOSS_QTY,0))  LOSS312
     , SUM(DECODE(LOSS.LOSS_CODE,'1207',LOSS.LOSS_QTY,0))  LOSS313
     , SUM(DECODE(LOSS.LOSS_CODE,'1208',LOSS.LOSS_QTY,0))  LOSS314
     , SUM(DECODE(LOSS.LOSS_CODE,'1209',LOSS.LOSS_QTY,0))  LOSS315
     , SUM(DECODE(LOSS.LOSS_CODE,'1210',LOSS.LOSS_QTY,0))  LOSS316
     , SUM(DECODE(LOSS.LOSS_CODE,'1211',LOSS.LOSS_QTY,0))  LOSS317
     , SUM(DECODE(LOSS.LOSS_CODE,'9500',LOSS.LOSS_QTY,0))  LOSS318
     , SUM(DECODE(LOSS.LOSS_CODE,'9100',LOSS.LOSS_QTY,0))  LOSS319
     , SUM(DECODE(LOSS.LOSS_CODE,'9000',LOSS.LOSS_QTY,0))  LOSS320
     , SUM(DECODE(LOSS.LOSS_CODE,'9501',LOSS.LOSS_QTY,0))  LOSS321
     , SUM(DECODE(LOSS.LOSS_CODE,'1076',LOSS.LOSS_QTY,0))  LOSS322
     , SUM(DECODE(LOSS.LOSS_CODE,'1077',LOSS.LOSS_QTY,0))  LOSS323
     , SUM(DECODE(LOSS.LOSS_CODE,'1078',LOSS.LOSS_QTY,0))  LOSS324
     , SUM(DECODE(LOSS.LOSS_CODE,'1079',LOSS.LOSS_QTY,0))  LOSS325
     , SUM(DECODE(LOSS.LOSS_CODE,'1080',LOSS.LOSS_QTY,0))  LOSS326
     , SUM(DECODE(LOSS.LOSS_CODE,'1081',LOSS.LOSS_QTY,0))  LOSS327
     , SUM(DECODE(LOSS.LOSS_CODE,'1082',LOSS.LOSS_QTY,0))  LOSS328
     , SUM(DECODE(LOSS.LOSS_CODE,'1083',LOSS.LOSS_QTY,0))  LOSS329
     , SUM(DECODE(LOSS.LOSS_CODE,'1084',LOSS.LOSS_QTY,0))  LOSS330
     , SUM(DECODE(LOSS.LOSS_CODE,'1085',LOSS.LOSS_QTY,0))  LOSS331
     , SUM(DECODE(LOSS.LOSS_CODE,'1086',LOSS.LOSS_QTY,0))  LOSS332
     , SUM(DECODE(LOSS.LOSS_CODE,'1087',LOSS.LOSS_QTY,0))  LOSS333
     , SUM(DECODE(LOSS.LOSS_CODE,'1088',LOSS.LOSS_QTY,0))  LOSS334
     , SUM(DECODE(LOSS.LOSS_CODE,'1089',LOSS.LOSS_QTY,0))  LOSS335
     , SUM(DECODE(LOSS.LOSS_CODE,'1801',LOSS.LOSS_QTY,0))  LOSS336
     , SUM(DECODE(LOSS.LOSS_CODE,'1802',LOSS.LOSS_QTY,0))  LOSS337
     , SUM(DECODE(LOSS.LOSS_CODE,'1803',LOSS.LOSS_QTY,0))  LOSS338
     , SUM(DECODE(LOSS.LOSS_CODE,'1804',LOSS.LOSS_QTY,0))  LOSS339
     , SUM(DECODE(LOSS.LOSS_CODE,'1805',LOSS.LOSS_QTY,0))  LOSS340
     , SUM(DECODE(LOSS.LOSS_CODE,'1806',LOSS.LOSS_QTY,0))  LOSS341
     , SUM(DECODE(LOSS.LOSS_CODE,'1807',LOSS.LOSS_QTY,0))  LOSS342
     , SUM(DECODE(LOSS.LOSS_CODE,'1075',LOSS.LOSS_QTY,0))  LOSS343
     , SUM(DECODE(LOSS.LOSS_CODE,'1074',LOSS.LOSS_QTY,0))  LOSS344
     , SUM(DECODE(LOSS.LOSS_CODE,'1073',LOSS.LOSS_QTY,0))  LOSS345
     , SUM(DECODE(LOSS.LOSS_CODE,'1071',LOSS.LOSS_QTY,0))  LOSS346
     , SUM(DECODE(LOSS.LOSS_CODE,'1072',LOSS.LOSS_QTY,0))  LOSS347
     , SUM(DECODE(LOSS.LOSS_CODE,'1090',LOSS.LOSS_QTY,0))  LOSS348

  FROM ( 
        SELECT  ' ',  ' ', MAT.MAT_GRP_6, MAT.MAT_GRP_3,  ' ',  ' ',  ' ',  ' ', A.MAT_ID
             , A.LOT_ID AS LOT_ID 
             , TO_CHAR(TO_DATE(C.CREATE_TIME,'yyyymmddhh24miss')) AS IN_TIME 
             , TO_CHAR(TO_DATE(A.TRAN_TIME,'yyyymmddhh24miss')) AS SHIP_TIME 
             , ROUND((TO_DATE(A.TRAN_TIME,'yyyymmddhh24miss') - TO_DATE(C.CREATE_TIME,'yyyymmddhh24miss')),2) AS TAT 
             , (  
                SELECT MIN(QTY_1)   
                  FROM RWIPLOTHIS  
                 WHERE FACTORY = 'HMVA2'  
                   AND OLD_OPER >= 'A1000'  
                   AND LOT_ID=A.LOT_ID  
                   AND TRAN_CODE IN ('END','SHIP')    
                   AND HIST_DEL_FLAG = ' '               
               ) AS BE_OUT 
             , A.QTY_1 AS OUT_QTY 
          FROM DT A
             , MWIPMATDEF MAT
             , RWIPLOTSTS C 
         WHERE 1=1
           AND A.MAT_ID=MAT.MAT_ID 
           AND A.LOT_ID=C.LOT_ID 
           AND MAT.FACTORY = 'HMVA2' 
       ) SUMMERY
     , (
        SELECT LOT_ID
             , LOSS_CODE
             , SUM(LOSS_QTY) AS LOSS_QTY 
             , SUM(CASE WHEN OPER < 'A1000' THEN LOSS_QTY 
                        ELSE 0 
                   END) IL_LOSS_QTY 
             , SUM(CASE WHEN OPER >= 'A1000' THEN LOSS_QTY 
                        ELSE 0 
                   END) BE_LOSS_QTY 
          FROM (
                SELECT LOT_ID, OPER, LOSS_CODE, LOSS_QTY
                  FROM RWIPLOTLSM
                 WHERE 1=1
                   AND FACTORY = 'HMVA2'  
                   AND HIST_DEL_FLAG = ' '
                   AND LOT_ID IN ( 
                                  SELECT LOT_ID 
                                    FROM DT 
                                 ) 
                UNION ALL 
                SELECT /*+ INDEX (LSM, RWIPLOTLSM_IDX02) */SPL.FROM_TO_LOT_ID AS LOT_ID, OPER, LOSS_CODE, LOSS_QTY
                  FROM RWIPLOTLSM LSM
                     , (
                        SELECT LOT_ID, FROM_TO_LOT_ID 
                          FROM RWIPLOTSTS 
                         WHERE 1=1
                           AND FACTORY = 'HMVA2'  
                           AND LOT_TYPE = 'W' 
                           AND ADD_ORDER_ID_2 = 'MULTIEQP' 
                           AND FROM_TO_LOT_ID IN ( 
                                                  SELECT LOT_ID 
                                                    FROM DT 
                                                 ) 
                       ) SPL
                 WHERE 1=1
                   AND LSM.LOT_ID = SPL.LOT_ID
                   AND LSM.FACTORY = 'HMVA2'  
                   AND HIST_DEL_FLAG = ' '
               )
         GROUP BY LOT_ID,LOSS_CODE,LOSS_QTY
       ) LOSS
 WHERE SUMMERY.LOT_ID=LOSS.LOT_ID(+)
 GROUP BY  ' ',  ' ', SUMMERY.MAT_GRP_6, SUMMERY.MAT_GRP_3,  ' ',  ' ',  ' ',  ' ', SUMMERY.MAT_ID
        , SUMMERY.LOT_ID,SUMMERY.IN_TIME,SUMMERY.SHIP_TIME, SUMMERY.TAT 
        , SUMMERY.BE_OUT, SUMMERY.OUT_QTY 
 ORDER BY   ' ',  ' ', SUMMERY.MAT_GRP_6, SUMMERY.MAT_GRP_3,  ' ',  ' ',  ' ',  ' ', SUMMERY.MAT_ID,SUMMERY.LOT_ID

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
SELECT  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', SUMMERY.OPER,  ' ',  ' '
     , SUMMERY.MAT_ID 
     , SUMMERY.LOT_ID 
     , SUMMERY.LOT_CMF_5 
     , SUMMERY.END_RES_ID 
     , SUMMERY.QTY_1 + SUMMERY.LOSS_QTY AS OPER_IN_QTY_1 
     , SUMMERY.QTY_1 
     , ROUND(SUMMERY.QTY_1/(SUMMERY.QTY_1 + SUMMERY.LOSS_QTY)*100,3) AS YIELD 
     , TO_CHAR(TO_DATE(SUMMERY.OPER_IN_TIME,'yyyymmddhh24miss')) AS OPER_IN_TIME 
     , TO_CHAR(TO_DATE(SUMMERY.TRAN_TIME,'yyyymmddhh24miss')) AS TRAN_TIME 
     , DECODE(SUMMERY.TRAN_CMF_18, ' ', ' ', SUMMERY.IN_USER_DESC || '(' || SUMMERY.TRAN_CMF_18 || ')') AS IN_USER_ID 
     , SUMMERY.END_USER_DESC || '(' || SUMMERY.TRAN_USER_ID || ')' AS END_USER_ID 
     , SUMMERY.LOT_CMF_10 
     , SUMMERY.TRAN_CMF_2 AS HD 
     , SUMMERY.TRAN_CMF_3 AS PGM 
     , SUMMERY.CRR_ID 
     , '' EPOXY 
     , '' LF 
     , '' GW 
     , '' MATAL_CARD 
     , '' EMC_LOT 
     , '' EMC_CAN 
     , '' EMC_TYPE 
     , SUMMERY.TRAN_COMMENT 
     , SUMMERY.QTY_2 
     , SUMMERY.TRAN_CMF_17 AS CV 
     , SUMMERY.LOT_CMF_7 AS ASSY_SITE 
     , SUMMERY.LOT_CMF_11 AS SHIP_SITE 
     , SUMMERY.TRAN_CMF_7 AS REWORK_BALL 
     , SUMMERY.TRAN_CMF_8 AS REWORK_CLEAN 
     , SUMMERY.TRAN_CMF_9 AS REWORK_PRINT 
     , LOT_CMF_3 
  FROM (  
        SELECT MAT_ID 
             , LOT_ID 
             , LOT_CMF_5 
             , LOT_CMF_10 
             , OLD_OPER AS OPER 
             , END_RES_ID 
             , TRAN_CMF_2 
             , TRAN_CMF_3 
             , NVL(( 
                    SELECT SUM(LOSS_QTY) AS LOSS_QTY 
                      FROM RWIPLOTLSM 
                     WHERE LOT_ID = A.LOT_ID 
                       AND OPER = A.OLD_OPER 
                     GROUP BY LOT_ID 
                  ), 0) AS LOSS_QTY 
             , CASE WHEN TRAN_CODE = 'SHIP' AND FACTORY = OLD_FACTORY THEN OLD_QTY_1 - QTY_1 
                    ELSE QTY_1 
               END QTY_1 
             , DECODE(START_TIME, ' ', OLD_OPER_IN_TIME, START_TIME) AS OPER_IN_TIME 
             , TRAN_TIME 
             , TRAN_USER_ID 
             , CRR_ID 
             , TRAN_COMMENT 
             , ( 
                SELECT USER_DESC FROM RWEBUSRDEF WHERE FACTORY = 'SYSTEM' AND USER_ID = A.TRAN_USER_ID 
               ) AS END_USER_DESC 
             , QTY_2 
             , CASE WHEN A.OLD_OPER LIKE 'A040%' AND A.RESV_FLAG_5 = 'Y' AND (SELECT CASE WHEN (TRAN_CMF_4 = 'RFID TAG WRITE : SUCCESS') 
                                                                                            OR (RESV_FLAG_5 = 'Y' AND TRAN_CMF_19 = 'RFID' AND TRAN_USER_ID = 'EIS') THEN 'RFID' 
                                                                                          ELSE ' ' 
                                                                                     END  
                                                                                FROM RWIPLOTHIS 
                                                                               WHERE FACTORY = A.OLD_FACTORY 
                                                                                 AND LOT_TYPE = A.OLD_LOT_TYPE 
                                                                                 AND LOT_ID = A.LOT_ID 
                                                                                 AND OPER = A.OLD_OPER 
                                                                                 AND TRAN_TIME < A.TRAN_TIME 
                                                                                 AND FACTORY = 'HMVA2' 
                                                                                 AND LOT_TYPE = 'W' 
                                                                                 AND RESV_FLAG_5 = 'Y' 
                                                                                 AND TRAN_CODE = 'START' 
                                                                                 AND HIST_DEL_FLAG = ' ') = 'RFID' THEN TRAN_CMF_18 || '[RFID]' 
                     WHEN A.OLD_OPER NOT LIKE 'A040%' AND A.RESV_FLAG_5 = 'Y' AND A.TRAN_CMF_19 = 'RFID' AND A.TRAN_USER_ID = 'EIS' THEN TRAN_CMF_18 || '[' || TRIM(TRAN_CMF_19) || ']' 
                     ELSE TRAN_CMF_18 
               END AS TRAN_CMF_18 
             , ( 
                SELECT USER_DESC FROM RWEBUSRDEF WHERE FACTORY = 'SYSTEM' AND USER_ID = A.TRAN_CMF_18 
               ) AS IN_USER_DESC 
             , LOT_CMF_7 
             , TRAN_CMF_17 
             , LOT_CMF_11 
             , TRAN_CMF_7 
             , TRAN_CMF_8 
             , TRAN_CMF_9 
             , LOT_CMF_3 
          FROM RWIPLOTHIS A 
         WHERE 1=1 
           AND TRAN_TIME BETWEEN '20200721070000' AND '20200721165959' 
           AND OLD_FACTORY = 'HMVA2' 
           AND TRAN_CODE IN ('END','SHIP') 
           AND LOT_TYPE = 'W' 
           AND HIST_DEL_FLAG = ' ' 
           AND OLD_OPER IN ('A0400')
           AND END_RES_ID LIKE '%'
           AND LOT_CMF_5 LIKE '%'
       ) SUMMERY 
     , MWIPMATDEF MAT 
 WHERE 1=1 
   AND SUMMERY.MAT_ID = MAT.MAT_ID 
   AND MAT.FACTORY = 'HMVA2' 
   AND MAT.MAT_TYPE = 'FG' 
 ORDER BY  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', SUMMERY.OPER,  ' ',  ' ',SUMMERY.END_RES_ID,LOT_ID,MAT_ID 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
        SELECT (SELECT DATA_1 FROM MGCMTBLDAT WHERE TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = MAT_GRP_1 AND ROWNUM=1) AS CUSTOMER,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT_CMF_10, MAT_ID, OPER,  ' ', CASE WHEN OPER <= 'A0200' THEN VENDOR_MAT_ID ELSE BASE_MAT_ID END SAP_CODE
             , SUM(TOTAL) AS TOTAL
             , SUM(ASSY_END_QTY0 ) VAL0
             , SUM(ASSY_END_QTY1 ) VAL1
             , SUM(ASSY_END_QTY2 ) VAL2
             , SUM(ASSY_END_QTY3 ) VAL3
             , SUM(ASSY_END_QTY4 ) VAL4
             , SUM(ASSY_END_QTY5 ) VAL5
             , SUM(ASSY_END_QTY6 ) VAL6
             , SUM(ASSY_END_QTY7 ) VAL7
             , SUM(ASSY_END_QTY8 ) VAL8
             , SUM(ASSY_END_QTY9 ) VAL9
             , SUM(ASSY_END_QTY10 ) VAL10
             , SUM(ASSY_END_QTY11 ) VAL11
             , SUM(ASSY_END_QTY12 ) VAL12
             , SUM(ASSY_END_QTY13 ) VAL13
             , SUM(ASSY_END_QTY14 ) VAL14
             , SUM(ASSY_END_QTY15 ) VAL15
             , SUM(ASSY_END_QTY16 ) VAL16
             , SUM(ASSY_END_QTY17 ) VAL17
             , SUM(ASSY_END_QTY18 ) VAL18
             , SUM(ASSY_END_QTY19 ) VAL19
             , SUM(ASSY_END_QTY20 ) VAL20
             , SUM(ASSY_END_QTY21 ) VAL21
             , SUM(ASSY_END_QTY22 ) VAL22
             , SUM(ASSY_END_QTY23 ) VAL23
             , SUM(ASSY_END_QTY24 ) VAL24
             , SUM(ASSY_END_QTY25 ) VAL25
             , SUM(ASSY_END_QTY26 ) VAL26
             , SUM(ASSY_END_QTY27 ) VAL27
             , SUM(ASSY_END_QTY28 ) VAL28
             , SUM(ASSY_END_QTY29 ) VAL29
             , SUM(ASSY_END_QTY30 ) VAL30
             , SUM(ASSY_END_QTY31 ) VAL31
             , ROUND(SUM(TOTAL)/32, 1) AVG
          FROM (
               SELECT B.MAT_GRP_1,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', B.MAT_CMF_10, B.MAT_ID, A.OPER,  ' ', BASE_MAT_ID,VENDOR_MAT_ID 
                    , DECODE(WORK_DATE, '20200714', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY0
                    , DECODE(WORK_DATE, '20200715', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY1
                    , DECODE(WORK_DATE, '20200716', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY2
                    , DECODE(WORK_DATE, '20200717', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY3
                    , DECODE(WORK_DATE, '20200718', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY4
                    , DECODE(WORK_DATE, '20200719', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY5
                    , DECODE(WORK_DATE, '20200720', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY6
                    , DECODE(WORK_DATE, '20200721', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY7
                    , DECODE(WORK_DATE, '20200722', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY8
                    , DECODE(WORK_DATE, '20200723', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY9
                    , DECODE(WORK_DATE, '20200724', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY10
                    , DECODE(WORK_DATE, '20200725', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY11
                    , DECODE(WORK_DATE, '20200726', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY12
                    , DECODE(WORK_DATE, '20200727', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY13
                    , DECODE(WORK_DATE, '20200728', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY14
                    , DECODE(WORK_DATE, '20200729', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY15
                    , DECODE(WORK_DATE, '20200730', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY16
                    , DECODE(WORK_DATE, '20200731', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY17
                    , DECODE(WORK_DATE, '20200801', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY18
                    , DECODE(WORK_DATE, '20200802', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY19
                    , DECODE(WORK_DATE, '20200803', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY20
                    , DECODE(WORK_DATE, '20200804', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY21
                    , DECODE(WORK_DATE, '20200805', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY22
                    , DECODE(WORK_DATE, '20200806', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY23
                    , DECODE(WORK_DATE, '20200807', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY24
                    , DECODE(WORK_DATE, '20200808', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY25
                    , DECODE(WORK_DATE, '20200809', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY26
                    , DECODE(WORK_DATE, '20200810', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY27
                    , DECODE(WORK_DATE, '20200811', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY28
                    , DECODE(WORK_DATE, '20200812', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY29
                    , DECODE(WORK_DATE, '20200813', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY30
                    , DECODE(WORK_DATE, '20200814', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY31
                    , (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END) TOTAL
                 FROM (
                      SELECT FACTORY, MAT_ID, OPER, LOT_TYPE, MAT_VER, WORK_DATE, CM_KEY_3
                           , SUM(END_LOT) AS END_LOT
                           , SUM(END_QTY_1) AS END_QTY_1
                           , SUM(END_QTY_2) AS END_QTY_2
                           , SUM(SHIP_QTY_1) AS SHIP_QTY_1
                           , SUM(SHIP_QTY_2) AS SHIP_QTY_2
                        FROM (
                             SELECT FACTORY, MAT_ID, OPER, LOT_TYPE, MAT_VER, WORK_DATE, CM_KEY_3
                           , DECODE(SUBSTR(OPER,2,4),'0000',SUM(S1_OPER_IN_LOT+S2_OPER_IN_LOT+S3_OPER_IN_LOT),SUM(S1_END_LOT+S2_END_LOT+S3_END_LOT)) END_LOT
                           , DECODE(SUBSTR(OPER,2,4),'0000',SUM(S1_OPER_IN_QTY_1+S2_OPER_IN_QTY_1+S3_OPER_IN_QTY_1),SUM(S1_END_QTY_1+S2_END_QTY_1+S3_END_QTY_1+S1_END_RWK_QTY_1 + S2_END_RWK_QTY_1 + S3_END_RWK_QTY_1)) END_QTY_1
                           , DECODE(SUBSTR(OPER,2,4),'0000',SUM(S1_OPER_IN_QTY_2+S2_OPER_IN_QTY_2+S3_OPER_IN_QTY_2),SUM(S1_END_QTY_2+S2_END_QTY_2+S3_END_QTY_2+S1_END_RWK_QTY_2 + S2_END_RWK_QTY_2 + S3_END_RWK_QTY_2)) END_QTY_2
                           , 0 SHIP_QTY_1
                           , 0 SHIP_QTY_2
                        FROM RSUMWIPMOV 
                       WHERE OPER NOT IN ('AZ010','TZ010','F0000','EZ010', 'SZ010', 'BZ010')
                    GROUP BY FACTORY, MAT_ID, OPER, LOT_TYPE, MAT_VER, WORK_DATE, CM_KEY_3
                   UNION ALL
                      SELECT CM_KEY_1 AS FACTORY, MAT_ID
                           , DECODE(CM_KEY_1,'HMVA2','AZ010','HMKT1','TZ010','FGS','F0000','HMKE1','EZ010','HMKS1','SZ010', 'BZ010') OPER
                           , LOT_TYPE, MAT_VER,  WORK_DATE,CM_KEY_3
                           , 0 END_LOT
                           , 0 END_QTY_1
                           , 0 END_QTY_2
                           , SUM(S1_FAC_OUT_QTY_1+S2_FAC_OUT_QTY_1+S3_FAC_OUT_QTY_1) SHIP_QTY_1
                           , SUM(S1_FAC_OUT_QTY_2+S2_FAC_OUT_QTY_2+S3_FAC_OUT_QTY_2) SHIP_QTY_2
                        FROM RSUMFACMOV 
                       WHERE FACTORY NOT IN ('RETURN')
                    GROUP BY CM_KEY_1, MAT_ID, OPER, LOT_TYPE, MAT_VER, WORK_DATE, CM_KEY_3
                             )
                    GROUP BY FACTORY, MAT_ID, OPER, LOT_TYPE, MAT_VER, WORK_DATE, CM_KEY_3
                    )A
                  , MWIPMATDEF B 
              WHERE 1=1 
                AND A.FACTORY  = 'HMVA2' 
                AND A.FACTORY = B.FACTORY 
                AND A.MAT_ID = B.MAT_ID                
                AND A.MAT_VER = 1 
                AND B.MAT_VER = 1 
                AND B.MAT_TYPE = 'FG' 
                AND A.OPER LIKE '%'
                AND A.MAT_ID LIKE '%'  
                AND A.OPER NOT IN ('00001','00002') 
                AND A.WORK_DATE BETWEEN '20200714' AND '20200814' 
         )   
   WHERE TOTAL > 0           
GROUP BY MAT_GRP_1,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT_CMF_10, MAT_ID, OPER,  ' ', BASE_MAT_ID,VENDOR_MAT_ID
ORDER BY MAT_GRP_1,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT_CMF_10, MAT_ID, DECODE(OPER,'AISSUE','A0001','TISSUE','T0001','EISSUE','E0001',OPER),  ' ', BASE_MAT_ID,VENDOR_MAT_ID

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
        SELECT (SELECT DATA_1 FROM MGCMTBLDAT WHERE TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = MAT_GRP_1 AND ROWNUM=1) AS CUSTOMER,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT_CMF_10, MAT_ID, OPER,  ' ', CASE WHEN OPER <= 'A0200' THEN VENDOR_MAT_ID ELSE BASE_MAT_ID END SAP_CODE
             , SUM(TOTAL) AS TOTAL
             , SUM(ASSY_END_QTY0 ) VAL0
             , SUM(ASSY_END_QTY1 ) VAL1
             , SUM(ASSY_END_QTY2 ) VAL2
             , SUM(ASSY_END_QTY3 ) VAL3
             , SUM(ASSY_END_QTY4 ) VAL4
             , SUM(ASSY_END_QTY5 ) VAL5
             , SUM(ASSY_END_QTY6 ) VAL6
             , SUM(ASSY_END_QTY7 ) VAL7
             , SUM(ASSY_END_QTY8 ) VAL8
             , SUM(ASSY_END_QTY9 ) VAL9
             , SUM(ASSY_END_QTY10 ) VAL10
             , SUM(ASSY_END_QTY11 ) VAL11
             , SUM(ASSY_END_QTY12 ) VAL12
             , SUM(ASSY_END_QTY13 ) VAL13
             , SUM(ASSY_END_QTY14 ) VAL14
             , SUM(ASSY_END_QTY15 ) VAL15
             , SUM(ASSY_END_QTY16 ) VAL16
             , SUM(ASSY_END_QTY17 ) VAL17
             , SUM(ASSY_END_QTY18 ) VAL18
             , SUM(ASSY_END_QTY19 ) VAL19
             , SUM(ASSY_END_QTY20 ) VAL20
             , SUM(ASSY_END_QTY21 ) VAL21
             , SUM(ASSY_END_QTY22 ) VAL22
             , SUM(ASSY_END_QTY23 ) VAL23
             , SUM(ASSY_END_QTY24 ) VAL24
             , SUM(ASSY_END_QTY25 ) VAL25
             , ROUND(SUM(TOTAL)/26, 1) AVG
          FROM (
               SELECT B.MAT_GRP_1,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', B.MAT_CMF_10, B.MAT_ID, A.OPER,  ' ', BASE_MAT_ID,VENDOR_MAT_ID 
                    , DECODE(WORK_DATE, '20200714', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY0
                    , DECODE(WORK_DATE, '20200715', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY1
                    , DECODE(WORK_DATE, '20200716', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY2
                    , DECODE(WORK_DATE, '20200717', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY3
                    , DECODE(WORK_DATE, '20200718', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY4
                    , DECODE(WORK_DATE, '20200719', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY5
                    , DECODE(WORK_DATE, '20200720', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY6
                    , DECODE(WORK_DATE, '20200721', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY7
                    , DECODE(WORK_DATE, '20200722', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY8
                    , DECODE(WORK_DATE, '20200723', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY9
                    , DECODE(WORK_DATE, '20200724', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY10
                    , DECODE(WORK_DATE, '20200725', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY11
                    , DECODE(WORK_DATE, '20200726', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY12
                    , DECODE(WORK_DATE, '20200727', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY13
                    , DECODE(WORK_DATE, '20200728', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY14
                    , DECODE(WORK_DATE, '20200729', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY15
                    , DECODE(WORK_DATE, '20200730', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY16
                    , DECODE(WORK_DATE, '20200731', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY17
                    , DECODE(WORK_DATE, '20200801', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY18
                    , DECODE(WORK_DATE, '20200802', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY19
                    , DECODE(WORK_DATE, '20200803', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY20
                    , DECODE(WORK_DATE, '20200804', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY21
                    , DECODE(WORK_DATE, '20200805', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY22
                    , DECODE(WORK_DATE, '20200806', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY23
                    , DECODE(WORK_DATE, '20200807', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY24
                    , DECODE(WORK_DATE, '20200808', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY25
                    , (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END) TOTAL
                 FROM (
                      SELECT FACTORY, MAT_ID, OPER, LOT_TYPE, MAT_VER, WORK_DATE, CM_KEY_3
                           , SUM(END_LOT) AS END_LOT
                           , SUM(END_QTY_1) AS END_QTY_1
                           , SUM(END_QTY_2) AS END_QTY_2
                           , SUM(SHIP_QTY_1) AS SHIP_QTY_1
                           , SUM(SHIP_QTY_2) AS SHIP_QTY_2
                        FROM (
                             SELECT FACTORY, MAT_ID, OPER, LOT_TYPE, MAT_VER, WORK_DATE, CM_KEY_3
                           , DECODE(SUBSTR(OPER,2,4),'0000',SUM(S1_OPER_IN_LOT+S2_OPER_IN_LOT+S3_OPER_IN_LOT),SUM(S1_END_LOT+S2_END_LOT+S3_END_LOT)) END_LOT
                           , DECODE(SUBSTR(OPER,2,4),'0000',SUM(S1_OPER_IN_QTY_1+S2_OPER_IN_QTY_1+S3_OPER_IN_QTY_1),SUM(S1_END_QTY_1+S2_END_QTY_1+S3_END_QTY_1+S1_END_RWK_QTY_1 + S2_END_RWK_QTY_1 + S3_END_RWK_QTY_1)) END_QTY_1
                           , DECODE(SUBSTR(OPER,2,4),'0000',SUM(S1_OPER_IN_QTY_2+S2_OPER_IN_QTY_2+S3_OPER_IN_QTY_2),SUM(S1_END_QTY_2+S2_END_QTY_2+S3_END_QTY_2+S1_END_RWK_QTY_2 + S2_END_RWK_QTY_2 + S3_END_RWK_QTY_2)) END_QTY_2
                           , 0 SHIP_QTY_1
                           , 0 SHIP_QTY_2
                        FROM RSUMWIPMOV 
                       WHERE OPER NOT IN ('AZ010','TZ010','F0000','EZ010', 'SZ010', 'BZ010')
                    GROUP BY FACTORY, MAT_ID, OPER, LOT_TYPE, MAT_VER, WORK_DATE, CM_KEY_3
                   UNION ALL
                      SELECT CM_KEY_1 AS FACTORY, MAT_ID
                           , DECODE(CM_KEY_1,'HMVA2','AZ010','HMKT1','TZ010','FGS','F0000','HMKE1','EZ010','HMKS1','SZ010', 'BZ010') OPER
                           , LOT_TYPE, MAT_VER,  WORK_DATE,CM_KEY_3
                           , 0 END_LOT
                           , 0 END_QTY_1
                           , 0 END_QTY_2
                           , SUM(S1_FAC_OUT_QTY_1+S2_FAC_OUT_QTY_1+S3_FAC_OUT_QTY_1) SHIP_QTY_1
                           , SUM(S1_FAC_OUT_QTY_2+S2_FAC_OUT_QTY_2+S3_FAC_OUT_QTY_2) SHIP_QTY_2
                        FROM RSUMFACMOV 
                       WHERE FACTORY NOT IN ('RETURN')
                    GROUP BY CM_KEY_1, MAT_ID, OPER, LOT_TYPE, MAT_VER, WORK_DATE, CM_KEY_3
                             )
                    GROUP BY FACTORY, MAT_ID, OPER, LOT_TYPE, MAT_VER, WORK_DATE, CM_KEY_3
                    )A
                  , MWIPMATDEF B 
              WHERE 1=1 
                AND A.FACTORY  = 'HMVA2' 
                AND A.FACTORY = B.FACTORY 
                AND A.MAT_ID = B.MAT_ID                
                AND A.MAT_VER = 1 
                AND B.MAT_VER = 1 
                AND B.MAT_TYPE = 'FG' 
                AND A.OPER LIKE '%'
                AND A.MAT_ID LIKE '%'  
                AND A.CM_KEY_3 LIKE 'P%'
                AND A.OPER NOT IN ('00001','00002') 
                AND A.WORK_DATE BETWEEN '20200714' AND '20200808' 
         )   
   WHERE TOTAL > 0           
GROUP BY MAT_GRP_1,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT_CMF_10, MAT_ID, OPER,  ' ', BASE_MAT_ID,VENDOR_MAT_ID
ORDER BY MAT_GRP_1,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT_CMF_10, MAT_ID, DECODE(OPER,'AISSUE','A0001','TISSUE','T0001','EISSUE','E0001',OPER),  ' ', BASE_MAT_ID,VENDOR_MAT_ID

-------------------------------------------------------------
SELECT * FROM RWEBUSRDEF WHERE FACTORY = :FACTORY AND USER_ID= :USER_ID
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
SELECT A.FUNC_GRP_SEQ,A.SEC_GRP_ID,A.FUNC_GRP_ID,NVL(A.FUNC_NAME, ' ') FUNC_NAME, NVL(B.FUNC_DESC, ' ') FUNC_DESC, LANGUAGE_1, LANGUAGE_2, LANGUAGE_3
  FROM RWEBGRPFUN A, RWEBFUNDEF B
 WHERE A.FACTORY = :p_FACTORY
   AND A.SEC_GRP_ID = :p_SEC_GRP_ID
   AND A.FUNC_NAME=B.FUNC_NAME(+)
 ORDER BY A.FUNC_GRP_SEQ, A.FUNC_SEQ
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
SELECT  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', SUMMERY.OPER,  ' ',  ' '
     , SUMMERY.MAT_ID 
     , SUMMERY.LOT_ID 
     , SUMMERY.LOT_CMF_5 
     , SUMMERY.END_RES_ID 
     , SUMMERY.QTY_1 + SUMMERY.LOSS_QTY AS OPER_IN_QTY_1 
     , SUMMERY.QTY_1 
     , ROUND(SUMMERY.QTY_1/(SUMMERY.QTY_1 + SUMMERY.LOSS_QTY)*100,3) AS YIELD 
     , TO_CHAR(TO_DATE(SUMMERY.OPER_IN_TIME,'yyyymmddhh24miss')) AS OPER_IN_TIME 
     , TO_CHAR(TO_DATE(SUMMERY.TRAN_TIME,'yyyymmddhh24miss')) AS TRAN_TIME 
     , DECODE(SUMMERY.TRAN_CMF_18, ' ', ' ', SUMMERY.IN_USER_DESC || '(' || SUMMERY.TRAN_CMF_18 || ')') AS IN_USER_ID 
     , SUMMERY.END_USER_DESC || '(' || SUMMERY.TRAN_USER_ID || ')' AS END_USER_ID 
     , SUMMERY.LOT_CMF_10 
     , SUMMERY.TRAN_CMF_2 AS HD 
     , SUMMERY.TRAN_CMF_3 AS PGM 
     , SUMMERY.CRR_ID 
     , '' EPOXY 
     , '' LF 
     , '' GW 
     , '' MATAL_CARD 
     , '' EMC_LOT 
     , '' EMC_CAN 
     , '' EMC_TYPE 
     , SUMMERY.TRAN_COMMENT 
     , SUMMERY.QTY_2 
     , SUMMERY.TRAN_CMF_17 AS CV 
     , SUMMERY.LOT_CMF_7 AS ASSY_SITE 
     , SUMMERY.LOT_CMF_11 AS SHIP_SITE 
     , SUMMERY.TRAN_CMF_7 AS REWORK_BALL 
     , SUMMERY.TRAN_CMF_8 AS REWORK_CLEAN 
     , SUMMERY.TRAN_CMF_9 AS REWORK_PRINT 
     , LOT_CMF_3 
  FROM (  
        SELECT MAT_ID 
             , LOT_ID 
             , LOT_CMF_5 
             , LOT_CMF_10 
             , OLD_OPER AS OPER 
             , END_RES_ID 
             , TRAN_CMF_2 
             , TRAN_CMF_3 
             , NVL(( 
                    SELECT SUM(LOSS_QTY) AS LOSS_QTY 
                      FROM RWIPLOTLSM 
                     WHERE LOT_ID = A.LOT_ID 
                       AND OPER = A.OLD_OPER 
                     GROUP BY LOT_ID 
                  ), 0) AS LOSS_QTY 
             , CASE WHEN TRAN_CODE = 'SHIP' AND FACTORY = OLD_FACTORY THEN OLD_QTY_1 - QTY_1 
                    ELSE QTY_1 
               END QTY_1 
             , DECODE(START_TIME, ' ', OLD_OPER_IN_TIME, START_TIME) AS OPER_IN_TIME 
             , TRAN_TIME 
             , TRAN_USER_ID 
             , CRR_ID 
             , TRAN_COMMENT 
             , ( 
                SELECT USER_DESC FROM RWEBUSRDEF WHERE FACTORY = 'SYSTEM' AND USER_ID = A.TRAN_USER_ID 
               ) AS END_USER_DESC 
             , QTY_2 
             , CASE WHEN A.OLD_OPER LIKE 'A040%' AND A.RESV_FLAG_5 = 'Y' AND (SELECT CASE WHEN (TRAN_CMF_4 = 'RFID TAG WRITE : SUCCESS') 
                                                                                            OR (RESV_FLAG_5 = 'Y' AND TRAN_CMF_19 = 'RFID' AND TRAN_USER_ID = 'EIS') THEN 'RFID' 
                                                                                          ELSE ' ' 
                                                                                     END  
                                                                                FROM RWIPLOTHIS 
                                                                               WHERE FACTORY = A.OLD_FACTORY 
                                                                                 AND LOT_TYPE = A.OLD_LOT_TYPE 
                                                                                 AND LOT_ID = A.LOT_ID 
                                                                                 AND OPER = A.OLD_OPER 
                                                                                 AND TRAN_TIME < A.TRAN_TIME 
                                                                                 AND FACTORY = 'HMVA2' 
                                                                                 AND LOT_TYPE = 'W' 
                                                                                 AND RESV_FLAG_5 = 'Y' 
                                                                                 AND TRAN_CODE = 'START' 
                                                                                 AND HIST_DEL_FLAG = ' ') = 'RFID' THEN TRAN_CMF_18 || '[RFID]' 
                     WHEN A.OLD_OPER NOT LIKE 'A040%' AND A.RESV_FLAG_5 = 'Y' AND A.TRAN_CMF_19 = 'RFID' AND A.TRAN_USER_ID = 'EIS' THEN TRAN_CMF_18 || '[' || TRIM(TRAN_CMF_19) || ']' 
                     ELSE TRAN_CMF_18 
               END AS TRAN_CMF_18 
             , ( 
                SELECT USER_DESC FROM RWEBUSRDEF WHERE FACTORY = 'SYSTEM' AND USER_ID = A.TRAN_CMF_18 
               ) AS IN_USER_DESC 
             , LOT_CMF_7 
             , TRAN_CMF_17 
             , LOT_CMF_11 
             , TRAN_CMF_7 
             , TRAN_CMF_8 
             , TRAN_CMF_9 
             , LOT_CMF_3 
          FROM RWIPLOTHIS A 
         WHERE 1=1 
           AND TRAN_TIME BETWEEN '20200721070000' AND '20200721165959' 
           AND OLD_FACTORY = 'HMVA2' 
           AND TRAN_CODE IN ('END','SHIP') 
           AND LOT_TYPE = 'W' 
           AND HIST_DEL_FLAG = ' ' 
           AND OLD_OPER IN ('A0400')
           AND END_RES_ID LIKE '%'
           AND LOT_CMF_5 LIKE '%'
       ) SUMMERY 
     , MWIPMATDEF MAT 
 WHERE 1=1 
   AND SUMMERY.MAT_ID = MAT.MAT_ID 
   AND MAT.FACTORY = 'HMVA2' 
   AND MAT.MAT_TYPE = 'FG' 
 ORDER BY  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', SUMMERY.OPER,  ' ',  ' ',SUMMERY.END_RES_ID,LOT_ID,MAT_ID 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT PLAN_WEEK V1    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_DATE = TO_CHAR(SYSDATE,'yyyymmdd')      AND ROWNUM = 1  
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT LANGUAGE_1 FROM RWEBFUNDEF WHERE FUNC_NAME = 'PRD010401'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT FACTORY Code, FAC_DESC Data
  FROM MWIPFACDEF
 WHERE FAC_GRP_5 = 'Y' 
 ORDER BY FAC_GRP_4 ASC
-------------------------------------------------------------
SELECT OPER, OPER_DESC  FROM MWIPOPRDEF
  WHERE FACTORY = 'HMVA2'  AND OPER NOT IN ('00001', '00002') AND OPER NOT LIKE 'V%' ORDER BY DECODE(OPER_CMF_2, ' ', 99999, TO_NUMBER(OPER_CMF_2)), OPER
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
        SELECT (SELECT DATA_1 FROM MGCMTBLDAT WHERE TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = MAT_GRP_1 AND ROWNUM=1) AS CUSTOMER,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT_CMF_10, MAT_ID, OPER,  ' ', CASE WHEN OPER <= 'A0200' THEN VENDOR_MAT_ID ELSE BASE_MAT_ID END SAP_CODE
             , SUM(TOTAL) AS TOTAL
             , SUM(ASSY_END_QTY0 ) VAL0
             , SUM(ASSY_END_QTY1 ) VAL1
             , SUM(ASSY_END_QTY2 ) VAL2
             , SUM(ASSY_END_QTY3 ) VAL3
             , SUM(ASSY_END_QTY4 ) VAL4
             , SUM(ASSY_END_QTY5 ) VAL5
             , SUM(ASSY_END_QTY6 ) VAL6
             , SUM(ASSY_END_QTY7 ) VAL7
             , ROUND(SUM(TOTAL)/8, 1) AVG
          FROM (
               SELECT B.MAT_GRP_1,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', B.MAT_CMF_10, B.MAT_ID, A.OPER,  ' ', BASE_MAT_ID,VENDOR_MAT_ID 
                    , DECODE(WORK_DATE, '20200714', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY0
                    , DECODE(WORK_DATE, '20200715', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY1
                    , DECODE(WORK_DATE, '20200716', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY2
                    , DECODE(WORK_DATE, '20200717', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY3
                    , DECODE(WORK_DATE, '20200718', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY4
                    , DECODE(WORK_DATE, '20200719', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY5
                    , DECODE(WORK_DATE, '20200720', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY6
                    , DECODE(WORK_DATE, '20200721', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY7
                    , (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END) TOTAL
                 FROM (
                      SELECT FACTORY, MAT_ID, OPER, LOT_TYPE, MAT_VER, WORK_DATE, CM_KEY_3
                           , SUM(END_LOT) AS END_LOT
                           , SUM(END_QTY_1) AS END_QTY_1
                           , SUM(END_QTY_2) AS END_QTY_2
                           , SUM(SHIP_QTY_1) AS SHIP_QTY_1
                           , SUM(SHIP_QTY_2) AS SHIP_QTY_2
                        FROM (
                             SELECT FACTORY, MAT_ID, OPER, LOT_TYPE, MAT_VER, WORK_DATE, CM_KEY_3
                           , DECODE(SUBSTR(OPER,2,4),'0000',SUM(S1_OPER_IN_LOT+S2_OPER_IN_LOT+S3_OPER_IN_LOT),SUM(S1_END_LOT+S2_END_LOT+S3_END_LOT)) END_LOT
                           , DECODE(SUBSTR(OPER,2,4),'0000',SUM(S1_OPER_IN_QTY_1+S2_OPER_IN_QTY_1+S3_OPER_IN_QTY_1),SUM(S1_END_QTY_1+S2_END_QTY_1+S3_END_QTY_1+S1_END_RWK_QTY_1 + S2_END_RWK_QTY_1 + S3_END_RWK_QTY_1)) END_QTY_1
                           , DECODE(SUBSTR(OPER,2,4),'0000',SUM(S1_OPER_IN_QTY_2+S2_OPER_IN_QTY_2+S3_OPER_IN_QTY_2),SUM(S1_END_QTY_2+S2_END_QTY_2+S3_END_QTY_2+S1_END_RWK_QTY_2 + S2_END_RWK_QTY_2 + S3_END_RWK_QTY_2)) END_QTY_2
                           , 0 SHIP_QTY_1
                           , 0 SHIP_QTY_2
                        FROM RSUMWIPMOV 
                       WHERE OPER NOT IN ('AZ010','TZ010','F0000','EZ010', 'SZ010', 'BZ010')
                    GROUP BY FACTORY, MAT_ID, OPER, LOT_TYPE, MAT_VER, WORK_DATE, CM_KEY_3
                   UNION ALL
                      SELECT CM_KEY_1 AS FACTORY, MAT_ID
                           , DECODE(CM_KEY_1,'HMVA2','AZ010','HMKT1','TZ010','FGS','F0000','HMKE1','EZ010','HMKS1','SZ010', 'BZ010') OPER
                           , LOT_TYPE, MAT_VER,  WORK_DATE,CM_KEY_3
                           , 0 END_LOT
                           , 0 END_QTY_1
                           , 0 END_QTY_2
                           , SUM(S1_FAC_OUT_QTY_1+S2_FAC_OUT_QTY_1+S3_FAC_OUT_QTY_1) SHIP_QTY_1
                           , SUM(S1_FAC_OUT_QTY_2+S2_FAC_OUT_QTY_2+S3_FAC_OUT_QTY_2) SHIP_QTY_2
                        FROM RSUMFACMOV 
                       WHERE FACTORY NOT IN ('RETURN')
                    GROUP BY CM_KEY_1, MAT_ID, OPER, LOT_TYPE, MAT_VER, WORK_DATE, CM_KEY_3
                             )
                    GROUP BY FACTORY, MAT_ID, OPER, LOT_TYPE, MAT_VER, WORK_DATE, CM_KEY_3
                    )A
                  , MWIPMATDEF B 
              WHERE 1=1 
                AND A.FACTORY  = 'HMVA2' 
                AND A.FACTORY = B.FACTORY 
                AND A.MAT_ID = B.MAT_ID                
                AND A.MAT_VER = 1 
                AND B.MAT_VER = 1 
                AND B.MAT_TYPE = 'FG' 
                AND A.OPER IN ('A0040', 'A0200', 'A0400', 'A0600', 'A1000', 'A1150', 'A2050')
                AND A.MAT_ID LIKE '%'  
                AND A.OPER NOT IN ('00001','00002') 
                AND A.WORK_DATE BETWEEN '20200714' AND '20200721' 
         )   
   WHERE TOTAL > 0           
GROUP BY MAT_GRP_1,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT_CMF_10, MAT_ID, OPER,  ' ', BASE_MAT_ID,VENDOR_MAT_ID
ORDER BY MAT_GRP_1,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT_CMF_10, MAT_ID, DECODE(OPER,'AISSUE','A0001','TISSUE','T0001','EISSUE','E0001',OPER),  ' ', BASE_MAT_ID,VENDOR_MAT_ID

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
        SELECT (SELECT DATA_1 FROM MGCMTBLDAT WHERE TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = MAT_GRP_1 AND ROWNUM=1) AS CUSTOMER,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT_CMF_10, MAT_ID, OPER,  ' ', CASE WHEN OPER <= 'A0200' THEN VENDOR_MAT_ID ELSE BASE_MAT_ID END SAP_CODE
             , SUM(TOTAL) AS TOTAL
             , SUM(ASSY_END_QTY0 ) VAL0
             , SUM(ASSY_END_QTY1 ) VAL1
             , SUM(ASSY_END_QTY2 ) VAL2
             , SUM(ASSY_END_QTY3 ) VAL3
             , SUM(ASSY_END_QTY4 ) VAL4
             , SUM(ASSY_END_QTY5 ) VAL5
             , SUM(ASSY_END_QTY6 ) VAL6
             , SUM(ASSY_END_QTY7 ) VAL7
             , SUM(ASSY_END_QTY8 ) VAL8
             , SUM(ASSY_END_QTY9 ) VAL9
             , SUM(ASSY_END_QTY10 ) VAL10
             , SUM(ASSY_END_QTY11 ) VAL11
             , SUM(ASSY_END_QTY12 ) VAL12
             , SUM(ASSY_END_QTY13 ) VAL13
             , SUM(ASSY_END_QTY14 ) VAL14
             , SUM(ASSY_END_QTY15 ) VAL15
             , SUM(ASSY_END_QTY16 ) VAL16
             , SUM(ASSY_END_QTY17 ) VAL17
             , ROUND(SUM(TOTAL)/18, 1) AVG
          FROM (
               SELECT B.MAT_GRP_1,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', B.MAT_CMF_10, B.MAT_ID, A.OPER,  ' ', BASE_MAT_ID,VENDOR_MAT_ID 
                    , DECODE(WORK_DATE, '20200714', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY0
                    , DECODE(WORK_DATE, '20200715', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY1
                    , DECODE(WORK_DATE, '20200716', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY2
                    , DECODE(WORK_DATE, '20200717', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY3
                    , DECODE(WORK_DATE, '20200718', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY4
                    , DECODE(WORK_DATE, '20200719', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY5
                    , DECODE(WORK_DATE, '20200720', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY6
                    , DECODE(WORK_DATE, '20200721', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY7
                    , DECODE(WORK_DATE, '20200722', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY8
                    , DECODE(WORK_DATE, '20200723', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY9
                    , DECODE(WORK_DATE, '20200724', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY10
                    , DECODE(WORK_DATE, '20200725', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY11
                    , DECODE(WORK_DATE, '20200726', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY12
                    , DECODE(WORK_DATE, '20200727', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY13
                    , DECODE(WORK_DATE, '20200728', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY14
                    , DECODE(WORK_DATE, '20200729', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY15
                    , DECODE(WORK_DATE, '20200730', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY16
                    , DECODE(WORK_DATE, '20200731', (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END),0) ASSY_END_QTY17
                    , (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010', 'BZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END) TOTAL
                 FROM (
                      SELECT FACTORY, MAT_ID, OPER, LOT_TYPE, MAT_VER, WORK_DATE, CM_KEY_3
                           , SUM(END_LOT) AS END_LOT
                           , SUM(END_QTY_1) AS END_QTY_1
                           , SUM(END_QTY_2) AS END_QTY_2
                           , SUM(SHIP_QTY_1) AS SHIP_QTY_1
                           , SUM(SHIP_QTY_2) AS SHIP_QTY_2
                        FROM (
                             SELECT FACTORY, MAT_ID, OPER, LOT_TYPE, MAT_VER, WORK_DATE, CM_KEY_3
                           , DECODE(SUBSTR(OPER,2,4),'0000',SUM(S1_OPER_IN_LOT+S2_OPER_IN_LOT+S3_OPER_IN_LOT),SUM(S1_END_LOT+S2_END_LOT+S3_END_LOT)) END_LOT
                           , DECODE(SUBSTR(OPER,2,4),'0000',SUM(S1_OPER_IN_QTY_1+S2_OPER_IN_QTY_1+S3_OPER_IN_QTY_1),SUM(S1_END_QTY_1+S2_END_QTY_1+S3_END_QTY_1+S1_END_RWK_QTY_1 + S2_END_RWK_QTY_1 + S3_END_RWK_QTY_1)) END_QTY_1
                           , DECODE(SUBSTR(OPER,2,4),'0000',SUM(S1_OPER_IN_QTY_2+S2_OPER_IN_QTY_2+S3_OPER_IN_QTY_2),SUM(S1_END_QTY_2+S2_END_QTY_2+S3_END_QTY_2+S1_END_RWK_QTY_2 + S2_END_RWK_QTY_2 + S3_END_RWK_QTY_2)) END_QTY_2
                           , 0 SHIP_QTY_1
                           , 0 SHIP_QTY_2
                        FROM RSUMWIPMOV 
                       WHERE OPER NOT IN ('AZ010','TZ010','F0000','EZ010', 'SZ010', 'BZ010')
                    GROUP BY FACTORY, MAT_ID, OPER, LOT_TYPE, MAT_VER, WORK_DATE, CM_KEY_3
                   UNION ALL
                      SELECT CM_KEY_1 AS FACTORY, MAT_ID
                           , DECODE(CM_KEY_1,'HMVA2','AZ010','HMKT1','TZ010','FGS','F0000','HMKE1','EZ010','HMKS1','SZ010', 'BZ010') OPER
                           , LOT_TYPE, MAT_VER,  WORK_DATE,CM_KEY_3
                           , 0 END_LOT
                           , 0 END_QTY_1
                           , 0 END_QTY_2
                           , SUM(S1_FAC_OUT_QTY_1+S2_FAC_OUT_QTY_1+S3_FAC_OUT_QTY_1) SHIP_QTY_1
                           , SUM(S1_FAC_OUT_QTY_2+S2_FAC_OUT_QTY_2+S3_FAC_OUT_QTY_2) SHIP_QTY_2
                        FROM RSUMFACMOV 
                       WHERE FACTORY NOT IN ('RETURN')
                    GROUP BY CM_KEY_1, MAT_ID, OPER, LOT_TYPE, MAT_VER, WORK_DATE, CM_KEY_3
                             )
                    GROUP BY FACTORY, MAT_ID, OPER, LOT_TYPE, MAT_VER, WORK_DATE, CM_KEY_3
                    )A
                  , MWIPMATDEF B 
              WHERE 1=1 
                AND A.FACTORY  = 'HMVA2' 
                AND A.FACTORY = B.FACTORY 
                AND A.MAT_ID = B.MAT_ID                
                AND A.MAT_VER = 1 
                AND B.MAT_VER = 1 
                AND B.MAT_TYPE = 'FG' 
                AND A.OPER IN ('A0040', 'A0200', 'A0400', 'A0600', 'A1000', 'A1150', 'A2050')
                AND A.MAT_ID LIKE '%'  
                AND A.OPER NOT IN ('00001','00002') 
                AND A.WORK_DATE BETWEEN '20200714' AND '20200731' 
         )   
   WHERE TOTAL > 0           
GROUP BY MAT_GRP_1,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT_CMF_10, MAT_ID, OPER,  ' ', BASE_MAT_ID,VENDOR_MAT_ID
ORDER BY MAT_GRP_1,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT_CMF_10, MAT_ID, DECODE(OPER,'AISSUE','A0001','TISSUE','T0001','EISSUE','E0001',OPER),  ' ', BASE_MAT_ID,VENDOR_MAT_ID

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
SELECT LANGUAGE_1 FROM RWEBFUNDEF WHERE FUNC_NAME = 'PRD010312'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT FACTORY Code, FAC_DESC Data
  FROM MWIPFACDEF
 WHERE FAC_GRP_5 = 'Y' 
 ORDER BY FAC_GRP_4 ASC
-------------------------------------------------------------
SELECT OPER, OPER_DESC  FROM MWIPOPRDEF
  WHERE FACTORY = 'HMVA2'  AND OPER NOT IN ('00001', '00002') AND OPER NOT LIKE 'V%' ORDER BY DECODE(OPER_CMF_2, ' ', 99999, TO_NUMBER(OPER_CMF_2)), OPER
-------------------------------------------------------------
SELECT OPER, OPER_DESC  FROM MWIPOPRDEF
  WHERE FACTORY = 'HMVA2'  AND OPER NOT IN ('00001', '00002') AND OPER NOT LIKE 'V%' ORDER BY DECODE(OPER_CMF_2, ' ', 99999, TO_NUMBER(OPER_CMF_2)), OPER
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE) AS This_Week_First_Day 
     , MAX(SYS_DATE) AS This_Week_Last_Day
  FROM MWIPCALDEF
 WHERE 1=1 
   AND CALENDAR_ID = 'SE'
   AND (PLAN_YEAR,PLAN_WEEK) IN (
                                 SELECT PLAN_YEAR,PLAN_WEEK 
                                   FROM MWIPCALDEF 
                                  WHERE 1=1
                                    AND CALENDAR_ID = 'SE'
                                    AND SYS_DATE = '20200721')

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT NVL((SELECT DATA_1 FROM MGCMTBLDAT WHERE TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = MAT.MAT_GRP_1 AND ROWNUM=1), '-') AS CUSTOMER,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT.MAT_CMF_10 AS PIN_TYPE,  ' ', MAT.MAT_ID AS PRODUCT,  ' ',  ' ' 
     , ROUND(SUM(TOTAL)/1,0) AS TOTAL 
     , ROUND(SUM(V0)/1,0) AS  Val0
     , ROUND(SUM(V1)/1,0) AS  Val1
     , ROUND(SUM(V2)/1,0) AS  Val2
     , ROUND(SUM(V3)/1,0) AS  Val3
     , ROUND(SUM(V4)/1,0) AS  Val4
     , ROUND(SUM(V5)/1,0) AS  Val5
     , ROUND(SUM(V6)/1,0) AS  Val6
     , ROUND(SUM(V7)/1,0) AS  Val7
     , ROUND(SUM(V8)/1,0) AS  Val8
     , ROUND(SUM(V9)/1,0) AS  Val9
     , ROUND(SUM(V10)/1,0) AS  Val10
     , ROUND(SUM(V11)/1,0) AS  Val11
     , ROUND(SUM(V12)/1,0) AS  Val12
     , ROUND(SUM(V13)/1,0) AS  Val13
     , ROUND(SUM(V14)/1,0) AS  Val14
     , ROUND(SUM(V15)/1,0) AS  Val15
     , ROUND(SUM(V16)/1,0) AS  Val16
     , ROUND(SUM(V17)/1,0) AS  Val17
     , ROUND(SUM(V18)/1,0) AS  Val18
     , ROUND(SUM(V19)/1,0) AS  Val19
     , ROUND(SUM(V20)/1,0) AS  Val20
     , ROUND(SUM(V21)/1,0) AS  Val21
     , ROUND(SUM(V22)/1,0) AS  Val22
     , ROUND(SUM(V23)/1,0) AS  Val23
     , ROUND(SUM(V24)/1,0) AS  Val24
     , ROUND(SUM(V25)/1,0) AS  Val25
     , ROUND(SUM(V26)/1,0) AS  Val26
     , ROUND(SUM(V27)/1,0) AS  Val27
     , ROUND(SUM(V28)/1,0) AS  Val28
     , ROUND(SUM(V29)/1,0) AS  Val29
     , ROUND(SUM(V30)/1,0) AS  Val30
     , ROUND(SUM(V31)/1,0) AS  Val31
     , ROUND(SUM(V32)/1,0) AS  Val32
     , ROUND(SUM(V33)/1,0) AS  Val33
     , ROUND(SUM(V34)/1,0) AS  Val34
     , ROUND(SUM(V35)/1,0) AS  Val35
     , ROUND(SUM(V36)/1,0) AS  Val36
     , ROUND(SUM(V37)/1,0) AS  Val37
     , ROUND(SUM(V38)/1,0) AS  Val38
     , ROUND(SUM(V39)/1,0) AS  Val39
     , ROUND(SUM(V40)/1,0) AS  Val40
     , ROUND(SUM(V41)/1,0) AS  Val41
     , ROUND(SUM(V42)/1,0) AS  Val42
     , ROUND(SUM(V43)/1,0) AS  Val43
     , ROUND(SUM(V44)/1,0) AS  Val44
     , ROUND(SUM(V45)/1,0) AS  Val45
     , ROUND(SUM(V46)/1,0) AS  Val46
     , ROUND(SUM(V47)/1,0) AS  Val47
     , ROUND(SUM(V48)/1,0) AS  Val48
     , ROUND(SUM(V49)/1,0) AS  Val49
     , ROUND(SUM(V50)/1,0) AS  Val50
     , ROUND(SUM(V51)/1,0) AS  Val51
     , ROUND(SUM(V52)/1,0) AS  Val52
     , ROUND(SUM(V53)/1,0) AS  Val53
     , ROUND(SUM(V54)/1,0) AS  Val54
     , ROUND(SUM(V55)/1,0) AS  Val55
     , ROUND(SUM(V56)/1,0) AS  Val56
     , ROUND(SUM(V57)/1,0) AS  Val57
     , ROUND(SUM(V58)/1,0) AS  Val58
     , ROUND(SUM(V59)/1,0) AS  Val59
     , ROUND(SUM(V60)/1,0) AS  Val60
     , ROUND(SUM(V61)/1,0) AS  Val61
     , ROUND(SUM(V62)/1,0) AS  Val62
     , ROUND(SUM(V63)/1,0) AS  Val63
     , ROUND(SUM(V64)/1,0) AS  Val64
     , ROUND(SUM(V65)/1,0) AS  Val65
     , ROUND(SUM(V66)/1,0) AS  Val66
     , ROUND(SUM(V67)/1,0) AS  Val67
     , ROUND(SUM(V68)/1,0) AS  Val68
     , ROUND(SUM(V69)/1,0) AS  Val69
     , ROUND(SUM(V70)/1,0) AS  Val70
     , ROUND(SUM(V71)/1,0) AS  Val71
     , ROUND(SUM(V72)/1,0) AS  Val72
     , ROUND(SUM(V73)/1,0) AS  Val73
     , ROUND(SUM(V74)/1,0) AS  Val74
     , ROUND(SUM(V75)/1,0) AS  Val75
     , ROUND(SUM(V76)/1,0) AS  Val76
     , ROUND(SUM(V77)/1,0) AS  Val77
     , ROUND(SUM(V78)/1,0) AS  Val78
     , ROUND(SUM(V79)/1,0) AS  Val79
     , ROUND(SUM(V80)/1,0) AS  Val80
     , ROUND(SUM(V81)/1,0) AS  Val81
     , ROUND(SUM(V82)/1,0) AS  Val82
     , ROUND(SUM(V83)/1,0) AS  Val83
     , ROUND(SUM(V84)/1,0) AS  Val84
     , ROUND(SUM(V85)/1,0) AS  Val85
     , ROUND(SUM(V86)/1,0) AS  Val86
     , ROUND(SUM(V87)/1,0) AS  Val87
     , ROUND(SUM(V88)/1,0) AS  Val88
     , ROUND(SUM(V89)/1,0) AS  Val89
     , ROUND(SUM(V90)/1,0) AS  Val90
     , ROUND(SUM(V91)/1,0) AS  Val91
     , ROUND(SUM(V92)/1,0) AS  Val92
     , ROUND(SUM(V93)/1,0) AS  Val93
     , ROUND(SUM(V94)/1,0) AS  Val94
     , ROUND(SUM(V95)/1,0) AS  Val95
     , ROUND(SUM(V96)/1,0) AS  Val96
     , ROUND(SUM(V97)/1,0) AS  Val97
     , ROUND(SUM(V98)/1,0) AS  Val98
     , ROUND(SUM(V99)/1,0) AS  Val99
     , ROUND(SUM(V100)/1,0) AS  Val100
     , ROUND(SUM(V101)/1,0) AS  Val101
     , ROUND(SUM(V102)/1,0) AS  Val102
     , ROUND(SUM(V103)/1,0) AS  Val103
     , ROUND(SUM(V104)/1,0) AS  Val104
     , ROUND(SUM(V105)/1,0) AS  Val105
     , ROUND(SUM(V106)/1,0) AS  Val106
     , ROUND(SUM(V107)/1,0) AS  Val107
     , ROUND(SUM(V108)/1,0) AS  Val108
     , ROUND(SUM(V109)/1,0) AS  Val109
     , ROUND(SUM(V110)/1,0) AS  Val110
     , ROUND(SUM(V111)/1,0) AS  Val111
     , ROUND(SUM(V112)/1,0) AS  Val112
     , ROUND(SUM(V113)/1,0) AS  Val113
     , ROUND(SUM(V114)/1,0) AS  Val114
     , ROUND(SUM(V115)/1,0) AS  Val115
     , ROUND(SUM(V116)/1,0) AS  Val116
     , ROUND(SUM(V117)/1,0) AS  Val117
     , ROUND(SUM(V118)/1,0) AS  Val118
     , ROUND(SUM(V119)/1,0) AS  Val119
     , ROUND(SUM(V120)/1,0) AS  Val120
     , ROUND(SUM(V121)/1,0) AS  Val121
     , ROUND(SUM(V122)/1,0) AS  Val122
     , ROUND(SUM(V123)/1,0) AS  Val123
     , ROUND(SUM(V124)/1,0) AS  Val124
     , ROUND(SUM(V125)/1,0) AS  Val125
     , ROUND(SUM(V126)/1,0) AS  Val126
     , ROUND(SUM(V127)/1,0) AS  Val127
     , ROUND(SUM(V128)/1,0) AS  Val128
     , ROUND(SUM(V129)/1,0) AS  Val129
     , ROUND(SUM(V130)/1,0) AS  Val130
     , ROUND(SUM(V131)/1,0) AS  Val131
     , ROUND(SUM(V132)/1,0) AS  Val132
     , ROUND(SUM(V133)/1,0) AS  Val133
     , ROUND(SUM(V134)/1,0) AS  Val134
     , ROUND(SUM(V135)/1,0) AS  Val135
     , ROUND(SUM(V136)/1,0) AS  Val136
     , ROUND(SUM(V137)/1,0) AS  Val137
     , ROUND(SUM(V138)/1,0) AS  Val138
     , ROUND(SUM(V139)/1,0) AS  Val139
     , ROUND(SUM(V140)/1,0) AS  Val140
     , ROUND(SUM(V141)/1,0) AS  Val141
     , ROUND(SUM(V142)/1,0) AS  Val142
     , ROUND(SUM(V143)/1,0) AS  Val143
     , ROUND(SUM(V144)/1,0) AS  Val144
     , ROUND(SUM(V145)/1,0) AS  Val145
     , ROUND(SUM(V146)/1,0) AS  Val146
     , ROUND(SUM(V147)/1,0) AS  Val147
     , ROUND(SUM(V148)/1,0) AS  Val148
     , ROUND(SUM(V149)/1,0) AS  Val149
     , ROUND(SUM(V150)/1,0) AS  Val150
     , ROUND(SUM(V151)/1,0) AS  Val151
     , ROUND(SUM(V152)/1,0) AS  Val152
     , ROUND(SUM(V153)/1,0) AS  Val153
     , ROUND(SUM(V154)/1,0) AS  Val154
     , ROUND(SUM(V155)/1,0) AS  Val155
     , ROUND(SUM(V156)/1,0) AS  Val156
     , ROUND(SUM(V157)/1,0) AS  Val157
     , ROUND(SUM(V158)/1,0) AS  Val158
     , ROUND(SUM(V159)/1,0) AS  Val159
     , ROUND(SUM(V160)/1,0) AS  Val160
     , ROUND(SUM(V161)/1,0) AS  Val161
     , ROUND(SUM(V162)/1,0) AS  Val162
     , ROUND(SUM(V163)/1,0) AS  Val163
     , ROUND(SUM(V164)/1,0) AS  Val164
     , ROUND(SUM(V165)/1,0) AS  Val165
     , ROUND(SUM(V166)/1,0) AS  Val166
     , ROUND(SUM(V167)/1,0) AS  Val167
     , ROUND(SUM(V168)/1,0) AS  Val168
     , ROUND(SUM(V169)/1,0) AS  Val169
     , ROUND(SUM(V170)/1,0) AS  Val170
     , ROUND(SUM(V171)/1,0) AS  Val171
     , ROUND(SUM(V172)/1,0) AS  Val172
     , ROUND(SUM(V173)/1,0) AS  Val173
     , ROUND(SUM(V174)/1,0) AS  Val174
     , ROUND(SUM(V175)/1,0) AS  Val175
     , ROUND(SUM(V176)/1,0) AS  Val176
     , ROUND(SUM(V177)/1,0) AS  Val177
     , ROUND(SUM(V178)/1,0) AS  Val178
     , ROUND(SUM(V179)/1,0) AS  Val179
     , ROUND(SUM(V180)/1,0) AS  Val180
     , ROUND(SUM(V181)/1,0) AS  Val181
     , ROUND(SUM(V182)/1,0) AS  Val182
     , ROUND(SUM(V183)/1,0) AS  Val183
     , ROUND(SUM(V184)/1,0) AS  Val184
     , ROUND(SUM(V185)/1,0) AS  Val185
     , ROUND(SUM(V186)/1,0) AS  Val186
     , ROUND(SUM(V187)/1,0) AS  Val187
     , ROUND(SUM(V188)/1,0) AS  Val188
     , ROUND(SUM(V189)/1,0) AS  Val189
     , ROUND(SUM(V190)/1,0) AS  Val190
     , ROUND(SUM(V191)/1,0) AS  Val191
     , ROUND(SUM(V192)/1,0) AS  Val192
     , ROUND(SUM(V193)/1,0) AS  Val193
     , ROUND(SUM(V194)/1,0) AS  Val194
     , ROUND(SUM(V195)/1,0) AS  Val195
     , ROUND(SUM(V196)/1,0) AS  Val196
     , ROUND(SUM(V197)/1,0) AS  Val197
     , ROUND(SUM(V198)/1,0) AS  Val198
     , ROUND(SUM(V199)/1,0) AS  Val199
     , ROUND(SUM(V200)/1,0) AS  Val200
     , ROUND(SUM(V201)/1,0) AS  Val201
     , ROUND(SUM(V202)/1,0) AS  Val202
     , ROUND(SUM(V203)/1,0) AS  Val203
     , ROUND(SUM(V204)/1,0) AS  Val204
     , ROUND(SUM(V205)/1,0) AS  Val205
     , ROUND(SUM(V206)/1,0) AS  Val206
     , ROUND(SUM(V207)/1,0) AS  Val207
     , ROUND(SUM(V208)/1,0) AS  Val208
     , ROUND(SUM(V209)/1,0) AS  Val209
     , ROUND(SUM(V210)/1,0) AS  Val210
     , ROUND(SUM(V211)/1,0) AS  Val211
     , ROUND(SUM(V212)/1,0) AS  Val212
     , ROUND(SUM(V213)/1,0) AS  Val213
     , ROUND(SUM(V214)/1,0) AS  Val214
     , ROUND(SUM(V215)/1,0) AS  Val215
     , ROUND(SUM(V216)/1,0) AS  Val216
     , ROUND(SUM(V217)/1,0) AS  Val217
     , ROUND(SUM(V218)/1,0) AS  Val218
     , ROUND(SUM(V219)/1,0) AS  Val219
     , ROUND(SUM(V220)/1,0) AS  Val220
     , ROUND(SUM(V221)/1,0) AS  Val221
     , ROUND(SUM(V222)/1,0) AS  Val222
     , ROUND(SUM(V223)/1,0) AS  Val223
     , ROUND(SUM(V224)/1,0) AS  Val224
     , ROUND(SUM(V225)/1,0) AS  Val225
     , ROUND(SUM(V226)/1,0) AS  Val226
     , ROUND(SUM(V227)/1,0) AS  Val227
     , ROUND(SUM(V228)/1,0) AS  Val228
     , ROUND(SUM(V229)/1,0) AS  Val229
     , ROUND(SUM(V230)/1,0) AS  Val230
     , ROUND(SUM(V231)/1,0) AS  Val231
     , ROUND(SUM(V232)/1,0) AS  Val232
     , ROUND(SUM(V233)/1,0) AS  Val233
     , ROUND(SUM(V234)/1,0) AS  Val234
     , ROUND(SUM(V235)/1,0) AS  Val235
     , ROUND(SUM(V236)/1,0) AS  Val236
     , ROUND(SUM(V237)/1,0) AS  Val237
     , ROUND(SUM(V238)/1,0) AS  Val238
     , ROUND(SUM(V239)/1,0) AS  Val239
     , ROUND(SUM(V240)/1,0) AS  Val240
     , ROUND(SUM(V241)/1,0) AS  Val241
     , ROUND(SUM(V242)/1,0) AS  Val242
     , ROUND(SUM(V243)/1,0) AS  Val243
     , ROUND(SUM(V244)/1,0) AS  Val244
     , ROUND(SUM(V245)/1,0) AS  Val245
     , ROUND(SUM(V246)/1,0) AS  Val246
     , ROUND(SUM(V247)/1,0) AS  Val247
     , ROUND(SUM(V248)/1,0) AS  Val248
     , ROUND(SUM(V249)/1,0) AS  Val249
     , ROUND(SUM(V250)/1,0) AS  Val250
     , ROUND(SUM(V251)/1,0) AS  Val251
     , ROUND(SUM(V252)/1,0) AS  Val252
     , ROUND(SUM(V253)/1,0) AS  Val253
     , ROUND(SUM(V254)/1,0) AS  Val254
     , ROUND(SUM(V255)/1,0) AS  Val255
     , ROUND(SUM(V256)/1,0) AS  Val256
     , ROUND(SUM(V257)/1,0) AS  Val257
     , ROUND(SUM(V258)/1,0) AS  Val258
     , ROUND(SUM(V259)/1,0) AS  Val259
     , ROUND(SUM(V260)/1,0) AS  Val260
     , ROUND(SUM(V261)/1,0) AS  Val261
     , ROUND(SUM(V262)/1,0) AS  Val262
     , ROUND(SUM(V263)/1,0) AS  Val263
     , ROUND(SUM(V264)/1,0) AS  Val264
     , ROUND(SUM(V265)/1,0) AS  Val265
     , ROUND(SUM(V266)/1,0) AS  Val266
     , ROUND(SUM(V267)/1,0) AS  Val267
     , ROUND(SUM(V268)/1,0) AS  Val268
     , TRUNC(SUM(SHP_QTY)/1,0) AS SHP_QTY 
     , ROUND(DECODE(TO_CHAR(TO_DATE('20200721','YYYYMMDD'),'D'), 2, SUM(NVL(PLN.PLAN_W1,0)), 3, SUM(NVL(PLN.PLAN_W1,0)), SUM(NVL(PLN.PLAN_W2,0)) + SUM(NVL(SHP1.ASSY_MONDAY,0)))/1,0) AS PLAN_W1
     , ROUND(SUM(NVL(SHP1.ASSY_WEEK,0))/1,0)
     , ROUND((DECODE(TO_CHAR(TO_DATE('20200721','YYYYMMDD'),'D'), 2, SUM(NVL(PLN.PLAN_W1,0)), 3, SUM(NVL(PLN.PLAN_W1,0)), SUM(NVL(PLN.PLAN_W2,0)) + SUM(NVL(SHP1.ASSY_MONDAY,0)))) - SUM(NVL(SHP1.ASSY_WEEK,0))/1,0) AS LACK_WEEK
  FROM MWIPMATDEF MAT 
     , ( 
        SELECT A.MAT_ID, MAX(B.EMC_1) AS EMC_1 
             , SUM(QTY_1) AS TOTAL 
             , MAX((SELECT ATTR_VALUE FROM MATRNAMSTS WHERE FACTORY = 'HMVA2' AND ATTR_TYPE = 'MAT_ETC' AND ATTR_NAME = DECODE(LOT_CMF_2, 'SE', 'SEC_VERSION', 'HX', 'HX_VERSION') AND ATTR_KEY = A.MAT_ID)) AS VERSION 
             , SUM(DECODE(A.OPER, 'A0000', QTY_1,0)) V0
             , SUM(DECODE(A.OPER, 'A0005', QTY_1,0)) V1
             , SUM(DECODE(A.OPER, 'A000N', QTY_1,0)) V2
             , SUM(DECODE(A.OPER, 'A0010', QTY_1,0)) V3
             , SUM(DECODE(A.OPER, 'A0012', QTY_1,0)) V4
             , SUM(DECODE(A.OPER, 'A0013', QTY_1,0)) V5
             , SUM(DECODE(A.OPER, 'A0015', QTY_1,0)) V6
             , SUM(DECODE(A.OPER, 'A0020', QTY_1,0)) V7
             , SUM(DECODE(A.OPER, 'A0055', QTY_1,0)) V8
             , SUM(DECODE(A.OPER, 'A0023', QTY_1,0)) V9
             , SUM(DECODE(A.OPER, 'A0025', QTY_1,0)) V10
             , SUM(DECODE(A.OPER, 'A0030', QTY_1,0)) V11
             , SUM(DECODE(A.OPER, 'A0190', QTY_1,0)) V12
             , SUM(DECODE(A.OPER, 'A0033', QTY_1,0)) V13
             , SUM(DECODE(A.OPER, 'A0040', QTY_1,0)) V14
             , SUM(DECODE(A.OPER, 'A0041', QTY_1,0)) V15
             , SUM(DECODE(A.OPER, 'A0042', QTY_1,0)) V16
             , SUM(DECODE(A.OPER, 'A0045', QTY_1,0)) V17
             , SUM(DECODE(A.OPER, 'A0050', QTY_1,0)) V18
             , SUM(DECODE(A.OPER, 'A0060', QTY_1,0)) V19
             , SUM(DECODE(A.OPER, 'A0070', QTY_1,0)) V20
             , SUM(DECODE(A.OPER, 'A0080', QTY_1,0)) V21
             , SUM(DECODE(A.OPER, 'A0090', QTY_1,0)) V22
             , SUM(DECODE(A.OPER, 'A0095', QTY_1,0)) V23
             , SUM(DECODE(A.OPER, 'A0110', QTY_1,0)) V24
             , SUM(DECODE(A.OPER, 'A0120', QTY_1,0)) V25
             , SUM(DECODE(A.OPER, 'A0130', QTY_1,0)) V26
             , SUM(DECODE(A.OPER, 'A0140', QTY_1,0)) V27
             , SUM(DECODE(A.OPER, 'A0160', QTY_1,0)) V28
             , SUM(DECODE(A.OPER, 'A0161', QTY_1,0)) V29
             , SUM(DECODE(A.OPER, 'A0165', QTY_1,0)) V30
             , SUM(DECODE(A.OPER, 'A0065', QTY_1,0)) V31
             , SUM(DECODE(A.OPER, 'A0100', QTY_1,0)) V32
             , SUM(DECODE(A.OPER, 'A0150', QTY_1,0)) V33
             , SUM(DECODE(A.OPER, 'A0175', QTY_1,0)) V34
             , SUM(DECODE(A.OPER, 'A0176', QTY_1,0)) V35
             , SUM(DECODE(A.OPER, 'A0170', QTY_1,0)) V36
             , SUM(DECODE(A.OPER, 'A0180', QTY_1,0)) V37
             , SUM(DECODE(A.OPER, 'A0200', QTY_1,0)) V38
             , SUM(DECODE(A.OPER, 'A0201', QTY_1,0)) V39
             , SUM(DECODE(A.OPER, 'A0202', QTY_1,0)) V40
             , SUM(DECODE(A.OPER, 'A0210', QTY_1,0)) V41
             , SUM(DECODE(A.OPER, 'A0215', QTY_1,0)) V42
             , SUM(DECODE(A.OPER, 'A0220', QTY_1,0)) V43
             , SUM(DECODE(A.OPER, 'A0230', QTY_1,0)) V44
             , SUM(DECODE(A.OPER, 'A0300', QTY_1,0)) V45
             , SUM(DECODE(A.OPER, 'A0250', QTY_1,0)) V46
             , SUM(DECODE(A.OPER, 'A0305', QTY_1,0)) V47
             , SUM(DECODE(A.OPER, 'A0240', QTY_1,0)) V48
             , SUM(DECODE(A.OPER, 'A0260', QTY_1,0)) V49
             , SUM(DECODE(A.OPER, 'A0270', QTY_1,0)) V50
             , SUM(DECODE(A.OPER, 'A0290', QTY_1,0)) V51
             , SUM(DECODE(A.OPER, 'A0295', QTY_1,0)) V52
             , SUM(DECODE(A.OPER, 'A0280', QTY_1,0)) V53
             , SUM(DECODE(A.OPER, 'A0306', QTY_1,0)) V54
             , SUM(DECODE(A.OPER, 'A0307', QTY_1,0)) V55
             , SUM(DECODE(A.OPER, 'A0308', QTY_1,0)) V56
             , SUM(DECODE(A.OPER, 'A0310', QTY_1,0)) V57
             , SUM(DECODE(A.OPER, 'A0320', QTY_1,0)) V58
             , SUM(DECODE(A.OPER, 'A0330', QTY_1,0)) V59
             , SUM(DECODE(A.OPER, 'A1280', QTY_1,0)) V60
             , SUM(DECODE(A.OPER, 'A0333', QTY_1,0)) V61
             , SUM(DECODE(A.OPER, 'A0335', QTY_1,0)) V62
             , SUM(DECODE(A.OPER, 'A0337', QTY_1,0)) V63
             , SUM(DECODE(A.OPER, 'A0372', QTY_1,0)) V64
             , SUM(DECODE(A.OPER, 'A0395', QTY_1,0)) V65
             , SUM(DECODE(A.OPER, 'A0397', QTY_1,0)) V66
             , SUM(DECODE(A.OPER, 'A0340', QTY_1,0)) V67
             , SUM(DECODE(A.OPER, 'A0345', QTY_1,0)) V68
             , SUM(DECODE(A.OPER, 'A0350', QTY_1,0)) V69
             , SUM(DECODE(A.OPER, 'A0360', QTY_1,0)) V70
             , SUM(DECODE(A.OPER, 'A0370', QTY_1,0)) V71
             , SUM(DECODE(A.OPER, 'A0375', QTY_1,0)) V72
             , SUM(DECODE(A.OPER, 'A0380', QTY_1,0)) V73
             , SUM(DECODE(A.OPER, 'A0381', QTY_1,0)) V74
             , SUM(DECODE(A.OPER, 'A0382', QTY_1,0)) V75
             , SUM(DECODE(A.OPER, 'A0383', QTY_1,0)) V76
             , SUM(DECODE(A.OPER, 'A0385', QTY_1,0)) V77
             , SUM(DECODE(A.OPER, 'A0391', QTY_1,0)) V78
             , SUM(DECODE(A.OPER, 'A0399', QTY_1,0)) V79
             , SUM(DECODE(A.OPER, 'A0390', QTY_1,0)) V80
             , SUM(DECODE(A.OPER, 'A0400', QTY_1,0)) V81
             , SUM(DECODE(A.OPER, 'A0401', QTY_1,0)) V82
             , SUM(DECODE(A.OPER, 'A0500', QTY_1,0)) V83
             , SUM(DECODE(A.OPER, 'A0530', QTY_1,0)) V84
             , SUM(DECODE(A.OPER, 'A0531', QTY_1,0)) V85
             , SUM(DECODE(A.OPER, 'A0501', QTY_1,0)) V86
             , SUM(DECODE(A.OPER, 'A0540', QTY_1,0)) V87
             , SUM(DECODE(A.OPER, 'A0550', QTY_1,0)) V88
             , SUM(DECODE(A.OPER, 'A0600', QTY_1,0)) V89
             , SUM(DECODE(A.OPER, 'A0620', QTY_1,0)) V90
             , SUM(DECODE(A.OPER, 'A0660', QTY_1,0)) V91
             , SUM(DECODE(A.OPER, 'A0630', QTY_1,0)) V92
             , SUM(DECODE(A.OPER, 'A0650', QTY_1,0)) V93
             , SUM(DECODE(A.OPER, 'A0670', QTY_1,0)) V94
             , SUM(DECODE(A.OPER, 'A0720', QTY_1,0)) V95
             , SUM(DECODE(A.OPER, 'A0700', QTY_1,0)) V96
             , SUM(DECODE(A.OPER, 'A0339', QTY_1,0)) V97
             , SUM(DECODE(A.OPER, 'A0541', QTY_1,0)) V98
             , SUM(DECODE(A.OPER, 'A0551', QTY_1,0)) V99
             , SUM(DECODE(A.OPER, 'A0561', QTY_1,0)) V100
             , SUM(DECODE(A.OPER, 'A0601', QTY_1,0)) V101
             , SUM(DECODE(A.OPER, 'A0710', QTY_1,0)) V102
             , SUM(DECODE(A.OPER, 'A0800', QTY_1,0)) V103
             , SUM(DECODE(A.OPER, 'A0402', QTY_1,0)) V104
             , SUM(DECODE(A.OPER, 'A0502', QTY_1,0)) V105
             , SUM(DECODE(A.OPER, 'A0532', QTY_1,0)) V106
             , SUM(DECODE(A.OPER, 'A0801', QTY_1,0)) V107
             , SUM(DECODE(A.OPER, 'A0542', QTY_1,0)) V108
             , SUM(DECODE(A.OPER, 'A0552', QTY_1,0)) V109
             , SUM(DECODE(A.OPER, 'A0562', QTY_1,0)) V110
             , SUM(DECODE(A.OPER, 'A0602', QTY_1,0)) V111
             , SUM(DECODE(A.OPER, 'A0711', QTY_1,0)) V112
             , SUM(DECODE(A.OPER, 'A0802', QTY_1,0)) V113
             , SUM(DECODE(A.OPER, 'A0403', QTY_1,0)) V114
             , SUM(DECODE(A.OPER, 'A0503', QTY_1,0)) V115
             , SUM(DECODE(A.OPER, 'A0533', QTY_1,0)) V116
             , SUM(DECODE(A.OPER, 'A0543', QTY_1,0)) V117
             , SUM(DECODE(A.OPER, 'A0553', QTY_1,0)) V118
             , SUM(DECODE(A.OPER, 'A0563', QTY_1,0)) V119
             , SUM(DECODE(A.OPER, 'A0603', QTY_1,0)) V120
             , SUM(DECODE(A.OPER, 'A0712', QTY_1,0)) V121
             , SUM(DECODE(A.OPER, 'A0713', QTY_1,0)) V122
             , SUM(DECODE(A.OPER, 'A0803', QTY_1,0)) V123
             , SUM(DECODE(A.OPER, 'A0404', QTY_1,0)) V124
             , SUM(DECODE(A.OPER, 'A0504', QTY_1,0)) V125
             , SUM(DECODE(A.OPER, 'A0534', QTY_1,0)) V126
             , SUM(DECODE(A.OPER, 'A0544', QTY_1,0)) V127
             , SUM(DECODE(A.OPER, 'A0554', QTY_1,0)) V128
             , SUM(DECODE(A.OPER, 'A0564', QTY_1,0)) V129
             , SUM(DECODE(A.OPER, 'A0604', QTY_1,0)) V130
             , SUM(DECODE(A.OPER, 'A0714', QTY_1,0)) V131
             , SUM(DECODE(A.OPER, 'A0804', QTY_1,0)) V132
             , SUM(DECODE(A.OPER, 'A0405', QTY_1,0)) V133
             , SUM(DECODE(A.OPER, 'A0505', QTY_1,0)) V134
             , SUM(DECODE(A.OPER, 'A0535', QTY_1,0)) V135
             , SUM(DECODE(A.OPER, 'A0545', QTY_1,0)) V136
             , SUM(DECODE(A.OPER, 'A0555', QTY_1,0)) V137
             , SUM(DECODE(A.OPER, 'A0565', QTY_1,0)) V138
             , SUM(DECODE(A.OPER, 'A0605', QTY_1,0)) V139
             , SUM(DECODE(A.OPER, 'A0715', QTY_1,0)) V140
             , SUM(DECODE(A.OPER, 'A0805', QTY_1,0)) V141
             , SUM(DECODE(A.OPER, 'A0406', QTY_1,0)) V142
             , SUM(DECODE(A.OPER, 'A0506', QTY_1,0)) V143
             , SUM(DECODE(A.OPER, 'A0536', QTY_1,0)) V144
             , SUM(DECODE(A.OPER, 'A0546', QTY_1,0)) V145
             , SUM(DECODE(A.OPER, 'A0556', QTY_1,0)) V146
             , SUM(DECODE(A.OPER, 'A0566', QTY_1,0)) V147
             , SUM(DECODE(A.OPER, 'A0606', QTY_1,0)) V148
             , SUM(DECODE(A.OPER, 'A0716', QTY_1,0)) V149
             , SUM(DECODE(A.OPER, 'A0806', QTY_1,0)) V150
             , SUM(DECODE(A.OPER, 'A0407', QTY_1,0)) V151
             , SUM(DECODE(A.OPER, 'A0507', QTY_1,0)) V152
             , SUM(DECODE(A.OPER, 'A0537', QTY_1,0)) V153
             , SUM(DECODE(A.OPER, 'A0547', QTY_1,0)) V154
             , SUM(DECODE(A.OPER, 'A0557', QTY_1,0)) V155
             , SUM(DECODE(A.OPER, 'A0567', QTY_1,0)) V156
             , SUM(DECODE(A.OPER, 'A0607', QTY_1,0)) V157
             , SUM(DECODE(A.OPER, 'A0717', QTY_1,0)) V158
             , SUM(DECODE(A.OPER, 'A0807', QTY_1,0)) V159
             , SUM(DECODE(A.OPER, 'A0408', QTY_1,0)) V160
             , SUM(DECODE(A.OPER, 'A0508', QTY_1,0)) V161
             , SUM(DECODE(A.OPER, 'A0538', QTY_1,0)) V162
             , SUM(DECODE(A.OPER, 'A0558', QTY_1,0)) V163
             , SUM(DECODE(A.OPER, 'A0568', QTY_1,0)) V164
             , SUM(DECODE(A.OPER, 'A0608', QTY_1,0)) V165
             , SUM(DECODE(A.OPER, 'A0808', QTY_1,0)) V166
             , SUM(DECODE(A.OPER, 'A0409', QTY_1,0)) V167
             , SUM(DECODE(A.OPER, 'A0509', QTY_1,0)) V168
             , SUM(DECODE(A.OPER, 'A0539', QTY_1,0)) V169
             , SUM(DECODE(A.OPER, 'A0559', QTY_1,0)) V170
             , SUM(DECODE(A.OPER, 'A0569', QTY_1,0)) V171
             , SUM(DECODE(A.OPER, 'A0609', QTY_1,0)) V172
             , SUM(DECODE(A.OPER, 'A0809', QTY_1,0)) V173
             , SUM(DECODE(A.OPER, 'A080A', QTY_1,0)) V174
             , SUM(DECODE(A.OPER, 'A0890', QTY_1,0)) V175
             , SUM(DECODE(A.OPER, 'A0900', QTY_1,0)) V176
             , SUM(DECODE(A.OPER, 'A0910', QTY_1,0)) V177
             , SUM(DECODE(A.OPER, 'A0920', QTY_1,0)) V178
             , SUM(DECODE(A.OPER, 'A0930', QTY_1,0)) V179
             , SUM(DECODE(A.OPER, 'A0935', QTY_1,0)) V180
             , SUM(DECODE(A.OPER, 'A040A', QTY_1,0)) V181
             , SUM(DECODE(A.OPER, 'A0950', QTY_1,0)) V182
             , SUM(DECODE(A.OPER, 'A053A', QTY_1,0)) V183
             , SUM(DECODE(A.OPER, 'A0970', QTY_1,0)) V184
             , SUM(DECODE(A.OPER, 'A0940', QTY_1,0)) V185
             , SUM(DECODE(A.OPER, 'A0980', QTY_1,0)) V186
             , SUM(DECODE(A.OPER, 'A1000', QTY_1,0)) V187
             , SUM(DECODE(A.OPER, 'A055A', QTY_1,0)) V188
             , SUM(DECODE(A.OPER, 'A060A', QTY_1,0)) V189
             , SUM(DECODE(A.OPER, 'A1040', QTY_1,0)) V190
             , SUM(DECODE(A.OPER, 'A1070', QTY_1,0)) V191
             , SUM(DECODE(A.OPER, 'A1020', QTY_1,0)) V192
             , SUM(DECODE(A.OPER, 'A1100', QTY_1,0)) V193
             , SUM(DECODE(A.OPER, 'A1110', QTY_1,0)) V194
             , SUM(DECODE(A.OPER, 'A1120', QTY_1,0)) V195
             , SUM(DECODE(A.OPER, 'A1130', QTY_1,0)) V196
             , SUM(DECODE(A.OPER, 'A1140', QTY_1,0)) V197
             , SUM(DECODE(A.OPER, 'A1150', QTY_1,0)) V198
             , SUM(DECODE(A.OPER, 'A1600', QTY_1,0)) V199
             , SUM(DECODE(A.OPER, 'A1650', QTY_1,0)) V200
             , SUM(DECODE(A.OPER, 'A1170', QTY_1,0)) V201
             , SUM(DECODE(A.OPER, 'A1180', QTY_1,0)) V202
             , SUM(DECODE(A.OPER, 'A1200', QTY_1,0)) V203
             , SUM(DECODE(A.OPER, 'A1230', QTY_1,0)) V204
             , SUM(DECODE(A.OPER, 'A1240', QTY_1,0)) V205
             , SUM(DECODE(A.OPER, 'A1250', QTY_1,0)) V206
             , SUM(DECODE(A.OPER, 'A1260', QTY_1,0)) V207
             , SUM(DECODE(A.OPER, 'A1270', QTY_1,0)) V208
             , SUM(DECODE(A.OPER, 'A1300', QTY_1,0)) V209
             , SUM(DECODE(A.OPER, 'A1350', QTY_1,0)) V210
             , SUM(DECODE(A.OPER, 'A1370', QTY_1,0)) V211
             , SUM(DECODE(A.OPER, 'A1380', QTY_1,0)) V212
             , SUM(DECODE(A.OPER, 'A1050', QTY_1,0)) V213
             , SUM(DECODE(A.OPER, 'A1420', QTY_1,0)) V214
             , SUM(DECODE(A.OPER, 'A1440', QTY_1,0)) V215
             , SUM(DECODE(A.OPER, 'A1450', QTY_1,0)) V216
             , SUM(DECODE(A.OPER, 'A1821', QTY_1,0)) V217
             , SUM(DECODE(A.OPER, 'A1460', QTY_1,0)) V218
             , SUM(DECODE(A.OPER, 'A1470', QTY_1,0)) V219
             , SUM(DECODE(A.OPER, 'A1500', QTY_1,0)) V220
             , SUM(DECODE(A.OPER, 'A1550', QTY_1,0)) V221
             , SUM(DECODE(A.OPER, 'A1610', QTY_1,0)) V222
             , SUM(DECODE(A.OPER, 'A1560', QTY_1,0)) V223
             , SUM(DECODE(A.OPER, 'A1720', QTY_1,0)) V224
             , SUM(DECODE(A.OPER, 'A1730', QTY_1,0)) V225
             , SUM(DECODE(A.OPER, 'A1740', QTY_1,0)) V226
             , SUM(DECODE(A.OPER, 'A1750', QTY_1,0)) V227
             , SUM(DECODE(A.OPER, 'A1755', QTY_1,0)) V228
             , SUM(DECODE(A.OPER, 'A1760', QTY_1,0)) V229
             , SUM(DECODE(A.OPER, 'A1765', QTY_1,0)) V230
             , SUM(DECODE(A.OPER, 'A1766', QTY_1,0)) V231
             , SUM(DECODE(A.OPER, 'A1763', QTY_1,0)) V232
             , SUM(DECODE(A.OPER, 'A1770', QTY_1,0)) V233
             , SUM(DECODE(A.OPER, 'A1780', QTY_1,0)) V234
             , SUM(DECODE(A.OPER, 'A1790', QTY_1,0)) V235
             , SUM(DECODE(A.OPER, 'A1795', QTY_1,0)) V236
             , SUM(DECODE(A.OPER, 'A1860', QTY_1,0)) V237
             , SUM(DECODE(A.OPER, 'A1850', QTY_1,0)) V238
             , SUM(DECODE(A.OPER, 'A1390', QTY_1,0)) V239
             , SUM(DECODE(A.OPER, 'A1800', QTY_1,0)) V240
             , SUM(DECODE(A.OPER, 'A1805', QTY_1,0)) V241
             , SUM(DECODE(A.OPER, 'A1810', QTY_1,0)) V242
             , SUM(DECODE(A.OPER, 'A1811', QTY_1,0)) V243
             , SUM(DECODE(A.OPER, 'A1812', QTY_1,0)) V244
             , SUM(DECODE(A.OPER, 'A1816', QTY_1,0)) V245
             , SUM(DECODE(A.OPER, 'A1820', QTY_1,0)) V246
             , SUM(DECODE(A.OPER, 'A1825', QTY_1,0)) V247
             , SUM(DECODE(A.OPER, 'A1826', QTY_1,0)) V248
             , SUM(DECODE(A.OPER, 'A1920', QTY_1,0)) V249
             , SUM(DECODE(A.OPER, 'A1960', QTY_1,0)) V250
             , SUM(DECODE(A.OPER, 'A1815', QTY_1,0)) V251
             , SUM(DECODE(A.OPER, 'A1830', QTY_1,0)) V252
             , SUM(DECODE(A.OPER, 'A1710', QTY_1,0)) V253
             , SUM(DECODE(A.OPER, 'A1840', QTY_1,0)) V254
             , SUM(DECODE(A.OPER, 'A1900', QTY_1,0)) V255
             , SUM(DECODE(A.OPER, 'A1910', QTY_1,0)) V256
             , SUM(DECODE(A.OPER, 'A1950', QTY_1,0)) V257
             , SUM(DECODE(A.OPER, 'A2000', QTY_1,0)) V258
             , SUM(DECODE(A.OPER, 'A2010', QTY_1,0)) V259
             , SUM(DECODE(A.OPER, 'A2020', QTY_1,0)) V260
             , SUM(DECODE(A.OPER, 'A2025', QTY_1,0)) V261
             , SUM(DECODE(A.OPER, 'A1819', QTY_1,0)) V262
             , SUM(DECODE(A.OPER, 'A2030', QTY_1,0)) V263
             , SUM(DECODE(A.OPER, 'A2040', QTY_1,0)) V264
             , SUM(DECODE(A.OPER, 'A2041', QTY_1,0)) V265
             , SUM(DECODE(A.OPER, 'A2042', QTY_1,0)) V266
             , SUM(DECODE(A.OPER, 'A2070', QTY_1,0)) V267
             , SUM(DECODE(A.OPER, 'A2050', QTY_1,0)) V268
          FROM RWIPLOTSTS A, CLOTCRDDAT@RPTTOMES B 
         WHERE 1=1 
           AND A.FACTORY = B.FACTORY(+) 
           AND A.MAT_ID = B.MAT_ID(+) 
           AND A.LOT_DEL_FLAG = ' ' 
           AND A.LOT_TYPE = 'W' 
           AND A.MAT_ID LIKE '%' 
           AND A.FACTORY = 'HMVA2' 
           AND A.OPER BETWEEN 'A0000' AND 'A2050' 
         GROUP BY A.MAT_ID 
       ) WIP 
     , ( 
        SELECT MAT_ID 
             , SUM(S1_FAC_OUT_QTY_1+S2_FAC_OUT_QTY_1+S3_FAC_OUT_QTY_1) AS SHP_QTY  
          FROM RSUMFACMOV
         WHERE CM_KEY_1 = 'HMVA2' 
           AND MAT_ID LIKE '%' 
           AND WORK_DATE = '20200721'
           AND FACTORY NOT IN ('RETURN')
           AND LOT_TYPE = 'W'
         GROUP BY MAT_ID 
       ) SHP 
     , ( 
        SELECT MAT_ID 
             , SUM(DECODE(WORK_DATE, '20200720', NVL(S1_FAC_OUT_QTY_1 + S2_FAC_OUT_QTY_1 + S3_FAC_OUT_QTY_1 + S4_FAC_OUT_QTY_1, 0), 0)) AS ASSY_MONDAY  
             , SUM(NVL(S1_FAC_OUT_QTY_1 + S2_FAC_OUT_QTY_1 + S3_FAC_OUT_QTY_1 + S4_FAC_OUT_QTY_1, 0)) AS ASSY_WEEK 
          FROM RSUMFACMOV 
         WHERE CM_KEY_1 = 'HMVA2' 
           AND LOT_TYPE = 'W'
           AND CM_KEY_2 = 'PROD' 
           AND CM_KEY_3 LIKE 'P%' 
           AND MAT_ID LIKE 'SES%' 
           AND WORK_DATE BETWEEN '20200720' AND '20200726'
         GROUP BY MAT_ID 
       ) SHP1 
     , ( 
        SELECT MAT_ID 
             , SUM(PLAN_QTY) PLAN_W1 
             , SUM(DECODE(PLAN_DAY, '20200720', 0, PLAN_QTY)) AS PLAN_W2 
          FROM ( 
                SELECT * 
                  FROM CWIPPLNDAY 
                 WHERE 1=1 
                   AND FACTORY = 'HMVA2' 
                   AND PLAN_DAY BETWEEN '20200720' AND '20200726'
                   AND IN_OUT_FLAG = 'OUT'
                   AND CLASS = 'ASSY'
               ) B
         GROUP BY MAT_ID 
       ) PLN 
 WHERE 1=1 
   AND MAT.MAT_ID = WIP.MAT_ID(+) 
   AND MAT.MAT_ID = SHP.MAT_ID(+) 
   AND MAT.MAT_ID = SHP1.MAT_ID(+) 
   AND MAT.MAT_ID = PLN.MAT_ID(+) 
   AND MAT.FACTORY = 'HMVA2' 
   AND MAT.MAT_ID LIKE '%' 
 GROUP BY MAT.MAT_GRP_1,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT.MAT_CMF_10,  ' ', MAT.MAT_ID,  ' ',  ' '
HAVING (NVL(SUM(TOTAL),0) + NVL(SUM(SHP_QTY),0)  + NVL(SUM(ASSY_WEEK),0) + NVL(SUM(PLAN_W1),0)) > 0     
 ORDER BY MAT.MAT_GRP_1,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT.MAT_CMF_10,  ' ', MAT.MAT_ID,  ' ',  ' ' 
-------------------------------------------------------------
