SELECT * FROM RWEBUSRDEF WHERE FACTORY = :FACTORY AND USER_ID= :USER_ID
-------------------------------------------------------------
SELECT A.FUNC_GRP_SEQ,A.SEC_GRP_ID,A.FUNC_GRP_ID,NVL(A.FUNC_NAME, ' ') FUNC_NAME, NVL(B.FUNC_DESC, ' ') FUNC_DESC, LANGUAGE_1, LANGUAGE_2, LANGUAGE_3
  FROM RWEBGRPFUN A, RWEBFUNDEF B
 WHERE A.FACTORY = :p_FACTORY
   AND A.SEC_GRP_ID = :p_SEC_GRP_ID
   AND A.FUNC_NAME=B.FUNC_NAME(+)
 ORDER BY A.FUNC_GRP_SEQ, A.FUNC_SEQ
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT '2019' || '1231220000' AS PREV_DATE 
     , ( 
        SELECT MAX(SYS_DATE) || '220000' 
          FROM MWIPCALDEF 
         WHERE 1=1 
           AND CALENDAR_ID = 'HM' 
           AND PLAN_YEAR = '2020' 
           AND PLAN_WEEK = '1' 
       ) AS POST_DATE 
  FROM DUAL 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT '2019' || '1231220000' AS PREV_DATE 
     , ( 
        SELECT MAX(SYS_DATE) || '220000' 
          FROM MWIPCALDEF 
         WHERE 1=1 
           AND CALENDAR_ID = 'HM' 
           AND PLAN_YEAR = '2020' 
           AND PLAN_WEEK = '1' 
       ) AS POST_DATE 
  FROM DUAL 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT '2019' || '1231220000' AS PREV_DATE 
     , ( 
        SELECT MAX(SYS_DATE) || '220000' 
          FROM MWIPCALDEF 
         WHERE 1=1 
           AND CALENDAR_ID = 'HM' 
           AND PLAN_YEAR = '2020' 
           AND PLAN_WEEK = '1' 
       ) AS POST_DATE 
  FROM DUAL 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT '2019' || '1231220000' AS PREV_DATE 
     , ( 
        SELECT MAX(SYS_DATE) || '220000' 
          FROM MWIPCALDEF 
         WHERE 1=1 
           AND CALENDAR_ID = 'HM' 
           AND PLAN_YEAR = '2020' 
           AND PLAN_WEEK = '1' 
       ) AS POST_DATE 
  FROM DUAL 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT PLAN_WEEK V1    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_DATE = TO_CHAR(SYSDATE,'yyyymmdd')      AND ROWNUM = 1  
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT '2019' || '1231220000' AS PREV_DATE 
     , ( 
        SELECT MAX(SYS_DATE) || '220000' 
          FROM MWIPCALDEF 
         WHERE 1=1 
           AND CALENDAR_ID = 'HM' 
           AND PLAN_YEAR = '2020' 
           AND PLAN_WEEK = '1' 
       ) AS POST_DATE 
  FROM DUAL 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT '2019' || '1231220000' AS PREV_DATE 
     , ( 
        SELECT MAX(SYS_DATE) || '220000' 
          FROM MWIPCALDEF 
         WHERE 1=1 
           AND CALENDAR_ID = 'HM' 
           AND PLAN_YEAR = '2020' 
           AND PLAN_WEEK = '16' 
       ) AS POST_DATE 
  FROM DUAL 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT '2019' || '1231220000' AS PREV_DATE 
     , ( 
        SELECT MAX(SYS_DATE) || '220000' 
          FROM MWIPCALDEF 
         WHERE 1=1 
           AND CALENDAR_ID = 'HM' 
           AND PLAN_YEAR = '2020' 
           AND PLAN_WEEK = '16' 
       ) AS POST_DATE 
  FROM DUAL 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT ( 
        SELECT MAX(SYS_DATE) || '220000'  
          FROM MWIPCALDEF 
         WHERE 1=1 
           AND CALENDAR_ID = 'HM' 
           AND PLAN_YEAR = '2020' 
           AND PLAN_WEEK = '15' 
       ) AS PREV_DATE 
     , ( 
        SELECT MAX(SYS_DATE) || '220000' 
          FROM MWIPCALDEF 
         WHERE 1=1 
           AND CALENDAR_ID = 'HM' 
           AND PLAN_YEAR = '2020' 
           AND PLAN_WEEK = '16' 
       ) AS POST_DATE 
  FROM DUAL 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT ( 
        SELECT MAX(SYS_DATE) || '220000'  
          FROM MWIPCALDEF 
         WHERE 1=1 
           AND CALENDAR_ID = 'HM' 
           AND PLAN_YEAR = '2020' 
           AND PLAN_WEEK = '15' 
       ) AS PREV_DATE 
     , ( 
        SELECT MAX(SYS_DATE) || '220000' 
          FROM MWIPCALDEF 
         WHERE 1=1 
           AND CALENDAR_ID = 'HM' 
           AND PLAN_YEAR = '2020' 
           AND PLAN_WEEK = '16' 
       ) AS POST_DATE 
  FROM DUAL 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT ( 
        SELECT MAX(SYS_DATE) || '220000'  
          FROM MWIPCALDEF 
         WHERE 1=1 
           AND CALENDAR_ID = 'HM' 
           AND PLAN_YEAR = '2020' 
           AND PLAN_WEEK = '15' 
       ) AS PREV_DATE 
     , ( 
        SELECT MAX(SYS_DATE) || '220000' 
          FROM MWIPCALDEF 
         WHERE 1=1 
           AND CALENDAR_ID = 'HM' 
           AND PLAN_YEAR = '2020' 
           AND PLAN_WEEK = '16' 
       ) AS POST_DATE 
  FROM DUAL 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT ( 
        SELECT MAX(SYS_DATE) || '220000'  
          FROM MWIPCALDEF 
         WHERE 1=1 
           AND CALENDAR_ID = 'HM' 
           AND PLAN_YEAR = '2020' 
           AND PLAN_WEEK = '15' 
       ) AS PREV_DATE 
     , ( 
        SELECT MAX(SYS_DATE) || '220000' 
          FROM MWIPCALDEF 
         WHERE 1=1 
           AND CALENDAR_ID = 'HM' 
           AND PLAN_YEAR = '2020' 
           AND PLAN_WEEK = '16' 
       ) AS POST_DATE 
  FROM DUAL 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE)  FROM MWIPCALDEF WHERE CALENDAR_ID = 'OTD'   AND SYS_YEAR||LPAD(PLAN_WEEK,2,'0') = '202016'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT LANGUAGE_2 FROM RWEBFUNDEF WHERE FUNC_NAME = 'PRD010227'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE)  FROM MWIPCALDEF WHERE CALENDAR_ID = 'OTD'   AND SYS_YEAR||LPAD(PLAN_WEEK,2,'0') = '202016'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT (SELECT DATA_1 FROM MGCMTBLDAT@RPTTOMES WHERE FACTORY = 'HMVA2' AND TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = A.CUSTOMER) AS CUSTOMER, PKG, SAP_CODE
     , RESV_FIELD_1 AS PIN_TYPE
     , OPER
     , ROUND(TTL_PLAN / 1000, 0) AS TTL_PLAN
     , ROUND(TTL_DEF / 1000, 0) AS TTL_DEF
     , DECODE(SEQ, 1, 'PLAN', 2, 'ACT', 3, 'BAL', 4, 'BOH') AS GUBUN
     , ROUND(DECODE(SEQ, 1, PLAN_D0, 2, SHP_D0, 3, BAL_D0, 4, WIP_D0) / 1000, 0) AS D0
     , ROUND(DECODE(SEQ, 1, PLAN_D1, 2, SHP_D1, 3, BAL_D1, 4, WIP_D1) / 1000, 0) AS D1
     , ROUND(DECODE(SEQ, 1, PLAN_D2, 2, SHP_D2, 3, BAL_D2, 4, WIP_D2) / 1000, 0) AS D2
     , ROUND(DECODE(SEQ, 1, PLAN_D3, 2, SHP_D3, 3, BAL_D3, 4, WIP_D3) / 1000, 0) AS D3
     , ROUND(DECODE(SEQ, 1, PLAN_D4, 2, SHP_D4, 3, BAL_D4, 4, WIP_D4) / 1000, 0) AS D4
     , ROUND(DECODE(SEQ, 1, PLAN_D5, 2, SHP_D5, 3, BAL_D5, 4, WIP_D5) / 1000, 0) AS D5
     , ROUND(DECODE(SEQ, 1, PLAN_D6, 2, SHP_D6, 3, BAL_D6, 4, WIP_D6) / 1000, 0) AS D6
     , ROUND(DECODE(SEQ, 1, PLAN_D7, 2, SHP_D7, 3, BAL_D7, 4, WIP_D7) / 1000, 0) AS D7
     , ROUND(DECODE(SEQ, 1, PLAN_D8, 2, SHP_D8, 3, BAL_D8, 4, WIP_D8) / 1000, 0) AS D8
     , ROUND(DECODE(SEQ, 1, PLAN_D9, 2, SHP_D9, 3, BAL_D9, 4, WIP_D9) / 1000, 0) AS D9
     , ROUND(DECODE(SEQ, 1, PLAN_D10, 2, SHP_D10, 3, BAL_D10, 4, WIP_D10) / 1000, 0) AS D10
     , ROUND(DECODE(SEQ, 1, PLAN_D11, 2, SHP_D11, 3, BAL_D11, 4, WIP_D11) / 1000, 0) AS D11
     , ROUND(DECODE(SEQ, 1, PLAN_D12, 2, SHP_D12, 3, BAL_D12, 4, WIP_D12) / 1000, 0) AS D12
     , ROUND(DECODE(SEQ, 1, PLAN_D13, 2, SHP_D13, 3, BAL_D13, 4, WIP_D13) / 1000, 0) AS D13
  FROM RSUMSCMDAT A
     , (
        SELECT DISTINCT MAT_GRP_10 AS PKG, VENDOR_ID
          FROM MWIPMATDEF
         WHERE FACTORY = 'HMVA2'
           AND DELETE_FLAG = ' '
           AND MAT_TYPE = 'FG'
       ) B
     , (SELECT LEVEL AS SEQ FROM DUAL CONNECT BY LEVEL <= 4) C
 WHERE 1=1   
   AND A.SAP_CODE = B.VENDOR_ID
   AND A.FACTORY = 'HMVA2'
   AND A.PLAN_WEEK = '202016'
 ORDER BY CUSTOMER, PKG, SAP_CODE, OPER_SEQ DESC, SEQ

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE)  FROM MWIPCALDEF WHERE CALENDAR_ID = 'OTD'   AND SYS_YEAR||LPAD(PLAN_WEEK,2,'0') = '202016'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT (SELECT DATA_1 FROM MGCMTBLDAT@RPTTOMES WHERE FACTORY = 'HMVA2' AND TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = A.CUSTOMER) AS CUSTOMER, PKG, SAP_CODE
     , RESV_FIELD_1 AS PIN_TYPE
     , OPER
     , ROUND(TTL_PLAN / 1, 0) AS TTL_PLAN
     , ROUND(TTL_DEF / 1, 0) AS TTL_DEF
     , DECODE(SEQ, 1, 'PLAN', 2, 'ACT', 3, 'BAL', 4, 'BOH') AS GUBUN
     , ROUND(DECODE(SEQ, 1, PLAN_D0, 2, SHP_D0, 3, BAL_D0, 4, WIP_D0) / 1, 0) AS D0
     , ROUND(DECODE(SEQ, 1, PLAN_D1, 2, SHP_D1, 3, BAL_D1, 4, WIP_D1) / 1, 0) AS D1
     , ROUND(DECODE(SEQ, 1, PLAN_D2, 2, SHP_D2, 3, BAL_D2, 4, WIP_D2) / 1, 0) AS D2
     , ROUND(DECODE(SEQ, 1, PLAN_D3, 2, SHP_D3, 3, BAL_D3, 4, WIP_D3) / 1, 0) AS D3
     , ROUND(DECODE(SEQ, 1, PLAN_D4, 2, SHP_D4, 3, BAL_D4, 4, WIP_D4) / 1, 0) AS D4
     , ROUND(DECODE(SEQ, 1, PLAN_D5, 2, SHP_D5, 3, BAL_D5, 4, WIP_D5) / 1, 0) AS D5
     , ROUND(DECODE(SEQ, 1, PLAN_D6, 2, SHP_D6, 3, BAL_D6, 4, WIP_D6) / 1, 0) AS D6
     , ROUND(DECODE(SEQ, 1, PLAN_D7, 2, SHP_D7, 3, BAL_D7, 4, WIP_D7) / 1, 0) AS D7
     , ROUND(DECODE(SEQ, 1, PLAN_D8, 2, SHP_D8, 3, BAL_D8, 4, WIP_D8) / 1, 0) AS D8
     , ROUND(DECODE(SEQ, 1, PLAN_D9, 2, SHP_D9, 3, BAL_D9, 4, WIP_D9) / 1, 0) AS D9
     , ROUND(DECODE(SEQ, 1, PLAN_D10, 2, SHP_D10, 3, BAL_D10, 4, WIP_D10) / 1, 0) AS D10
     , ROUND(DECODE(SEQ, 1, PLAN_D11, 2, SHP_D11, 3, BAL_D11, 4, WIP_D11) / 1, 0) AS D11
     , ROUND(DECODE(SEQ, 1, PLAN_D12, 2, SHP_D12, 3, BAL_D12, 4, WIP_D12) / 1, 0) AS D12
     , ROUND(DECODE(SEQ, 1, PLAN_D13, 2, SHP_D13, 3, BAL_D13, 4, WIP_D13) / 1, 0) AS D13
  FROM RSUMSCMDAT A
     , (
        SELECT DISTINCT MAT_GRP_10 AS PKG, VENDOR_ID
          FROM MWIPMATDEF
         WHERE FACTORY = 'HMVA2'
           AND DELETE_FLAG = ' '
           AND MAT_TYPE = 'FG'
       ) B
     , (SELECT LEVEL AS SEQ FROM DUAL CONNECT BY LEVEL <= 4) C
 WHERE 1=1   
   AND A.SAP_CODE = B.VENDOR_ID
   AND A.FACTORY = 'HMVA2'
   AND A.PLAN_WEEK = '202016'
 ORDER BY CUSTOMER, PKG, SAP_CODE, OPER_SEQ DESC, SEQ

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
SELECT MIN(SYS_DATE)  FROM MWIPCALDEF WHERE CALENDAR_ID = 'OTD'   AND SYS_YEAR||LPAD(PLAN_WEEK,2,'0') = '202016'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT (SELECT DATA_1 FROM MGCMTBLDAT@RPTTOMES WHERE FACTORY = 'HMVA2' AND TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = A.CUSTOMER) AS CUSTOMER, PKG, SAP_CODE
     , RESV_FIELD_1 AS PIN_TYPE
     , OPER
     , ROUND(TTL_PLAN / 1, 0) AS TTL_PLAN
     , ROUND(TTL_DEF / 1, 0) AS TTL_DEF
     , DECODE(SEQ, 1, 'PLAN', 2, 'ACT', 3, 'BAL', 4, 'BOH') AS GUBUN
     , ROUND(DECODE(SEQ, 1, PLAN_D0, 2, SHP_D0, 3, BAL_D0, 4, WIP_D0) / 1, 0) AS D0
     , ROUND(DECODE(SEQ, 1, PLAN_D1, 2, SHP_D1, 3, BAL_D1, 4, WIP_D1) / 1, 0) AS D1
     , ROUND(DECODE(SEQ, 1, PLAN_D2, 2, SHP_D2, 3, BAL_D2, 4, WIP_D2) / 1, 0) AS D2
     , ROUND(DECODE(SEQ, 1, PLAN_D3, 2, SHP_D3, 3, BAL_D3, 4, WIP_D3) / 1, 0) AS D3
     , ROUND(DECODE(SEQ, 1, PLAN_D4, 2, SHP_D4, 3, BAL_D4, 4, WIP_D4) / 1, 0) AS D4
     , ROUND(DECODE(SEQ, 1, PLAN_D5, 2, SHP_D5, 3, BAL_D5, 4, WIP_D5) / 1, 0) AS D5
     , ROUND(DECODE(SEQ, 1, PLAN_D6, 2, SHP_D6, 3, BAL_D6, 4, WIP_D6) / 1, 0) AS D6
     , ROUND(DECODE(SEQ, 1, PLAN_D7, 2, SHP_D7, 3, BAL_D7, 4, WIP_D7) / 1, 0) AS D7
     , ROUND(DECODE(SEQ, 1, PLAN_D8, 2, SHP_D8, 3, BAL_D8, 4, WIP_D8) / 1, 0) AS D8
     , ROUND(DECODE(SEQ, 1, PLAN_D9, 2, SHP_D9, 3, BAL_D9, 4, WIP_D9) / 1, 0) AS D9
     , ROUND(DECODE(SEQ, 1, PLAN_D10, 2, SHP_D10, 3, BAL_D10, 4, WIP_D10) / 1, 0) AS D10
     , ROUND(DECODE(SEQ, 1, PLAN_D11, 2, SHP_D11, 3, BAL_D11, 4, WIP_D11) / 1, 0) AS D11
     , ROUND(DECODE(SEQ, 1, PLAN_D12, 2, SHP_D12, 3, BAL_D12, 4, WIP_D12) / 1, 0) AS D12
     , ROUND(DECODE(SEQ, 1, PLAN_D13, 2, SHP_D13, 3, BAL_D13, 4, WIP_D13) / 1, 0) AS D13
  FROM RSUMSCMDAT A
     , (
        SELECT DISTINCT MAT_GRP_10 AS PKG, VENDOR_ID
          FROM MWIPMATDEF
         WHERE FACTORY = 'HMVA2'
           AND DELETE_FLAG = ' '
           AND MAT_TYPE = 'FG'
           AND MAT_ID LIKE 'FP100021318-4.3-RC-87CNKP7'
       ) B
     , (SELECT LEVEL AS SEQ FROM DUAL CONNECT BY LEVEL <= 4) C
 WHERE 1=1   
   AND A.SAP_CODE = B.VENDOR_ID
   AND A.FACTORY = 'HMVA2'
   AND A.PLAN_WEEK = '202016'
 ORDER BY CUSTOMER, PKG, SAP_CODE, OPER_SEQ DESC, SEQ

-------------------------------------------------------------
SELECT * FROM RWEBUSRDEF WHERE FACTORY = :FACTORY AND USER_ID= :USER_ID
-------------------------------------------------------------
SELECT A.FUNC_GRP_SEQ,A.SEC_GRP_ID,A.FUNC_GRP_ID,NVL(A.FUNC_NAME, ' ') FUNC_NAME, NVL(B.FUNC_DESC, ' ') FUNC_DESC, LANGUAGE_1, LANGUAGE_2, LANGUAGE_3
  FROM RWEBGRPFUN A, RWEBFUNDEF B
 WHERE A.FACTORY = :p_FACTORY
   AND A.SEC_GRP_ID = :p_SEC_GRP_ID
   AND A.FUNC_NAME=B.FUNC_NAME(+)
 ORDER BY A.FUNC_GRP_SEQ, A.FUNC_SEQ
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
SELECT LANGUAGE_2 FROM RWEBFUNDEF WHERE FUNC_NAME = 'PRD010312'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT FACTORY Code, FAC_DESC Data
  FROM MWIPFACDEF
 WHERE FAC_GRP_5 = 'Y' 
 ORDER BY FAC_GRP_4 ASC
-------------------------------------------------------------
SELECT OPER, OPER_DESC  FROM MWIPOPRDEF
  WHERE FACTORY = 'HMVA2'  AND OPER NOT IN ('00001', '00002') AND OPER NOT LIKE 'V%' ORDER BY DECODE(OPER_CMF_2, ' ', 99999, TO_NUMBER(OPER_CMF_2)), OPER
-------------------------------------------------------------
SELECT OPER, OPER_DESC  FROM MWIPOPRDEF
  WHERE FACTORY = 'HMVA2'  AND OPER NOT IN ('00001', '00002') AND OPER NOT LIKE 'V%' ORDER BY DECODE(OPER_CMF_2, ' ', 99999, TO_NUMBER(OPER_CMF_2)), OPER
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE) AS This_Week_First_Day 
     , MAX(SYS_DATE) AS This_Week_Last_Day
  FROM MWIPCALDEF
 WHERE 1=1 
   AND CALENDAR_ID = 'SE'
   AND (PLAN_YEAR,PLAN_WEEK) IN (
                                 SELECT PLAN_YEAR,PLAN_WEEK 
                                   FROM MWIPCALDEF 
                                  WHERE 1=1
                                    AND CALENDAR_ID = 'SE'
                                    AND SYS_DATE = '20200413')

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT NVL((SELECT DATA_1 FROM MGCMTBLDAT WHERE TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = MAT.MAT_GRP_1 AND ROWNUM=1), '-') AS CUSTOMER,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT.MAT_CMF_10 AS PIN_TYPE,  ' ', MAT.MAT_ID AS PRODUCT,  ' ',  ' ' 
     , ROUND(SUM(TOTAL)/1,0) AS TOTAL 
     , ROUND(SUM(V0)/1,0) AS  Val0
     , ROUND(SUM(V1)/1,0) AS  Val1
     , ROUND(SUM(V2)/1,0) AS  Val2
     , ROUND(SUM(V3)/1,0) AS  Val3
     , ROUND(SUM(V4)/1,0) AS  Val4
     , ROUND(SUM(V5)/1,0) AS  Val5
     , ROUND(SUM(V6)/1,0) AS  Val6
     , ROUND(SUM(V7)/1,0) AS  Val7
     , ROUND(SUM(V8)/1,0) AS  Val8
     , ROUND(SUM(V9)/1,0) AS  Val9
     , ROUND(SUM(V10)/1,0) AS  Val10
     , ROUND(SUM(V11)/1,0) AS  Val11
     , ROUND(SUM(V12)/1,0) AS  Val12
     , ROUND(SUM(V13)/1,0) AS  Val13
     , ROUND(SUM(V14)/1,0) AS  Val14
     , ROUND(SUM(V15)/1,0) AS  Val15
     , ROUND(SUM(V16)/1,0) AS  Val16
     , ROUND(SUM(V17)/1,0) AS  Val17
     , ROUND(SUM(V18)/1,0) AS  Val18
     , ROUND(SUM(V19)/1,0) AS  Val19
     , ROUND(SUM(V20)/1,0) AS  Val20
     , ROUND(SUM(V21)/1,0) AS  Val21
     , ROUND(SUM(V22)/1,0) AS  Val22
     , ROUND(SUM(V23)/1,0) AS  Val23
     , ROUND(SUM(V24)/1,0) AS  Val24
     , ROUND(SUM(V25)/1,0) AS  Val25
     , ROUND(SUM(V26)/1,0) AS  Val26
     , ROUND(SUM(V27)/1,0) AS  Val27
     , ROUND(SUM(V28)/1,0) AS  Val28
     , ROUND(SUM(V29)/1,0) AS  Val29
     , ROUND(SUM(V30)/1,0) AS  Val30
     , ROUND(SUM(V31)/1,0) AS  Val31
     , ROUND(SUM(V32)/1,0) AS  Val32
     , ROUND(SUM(V33)/1,0) AS  Val33
     , ROUND(SUM(V34)/1,0) AS  Val34
     , ROUND(SUM(V35)/1,0) AS  Val35
     , ROUND(SUM(V36)/1,0) AS  Val36
     , ROUND(SUM(V37)/1,0) AS  Val37
     , ROUND(SUM(V38)/1,0) AS  Val38
     , ROUND(SUM(V39)/1,0) AS  Val39
     , ROUND(SUM(V40)/1,0) AS  Val40
     , ROUND(SUM(V41)/1,0) AS  Val41
     , ROUND(SUM(V42)/1,0) AS  Val42
     , ROUND(SUM(V43)/1,0) AS  Val43
     , ROUND(SUM(V44)/1,0) AS  Val44
     , ROUND(SUM(V45)/1,0) AS  Val45
     , ROUND(SUM(V46)/1,0) AS  Val46
     , ROUND(SUM(V47)/1,0) AS  Val47
     , ROUND(SUM(V48)/1,0) AS  Val48
     , ROUND(SUM(V49)/1,0) AS  Val49
     , ROUND(SUM(V50)/1,0) AS  Val50
     , ROUND(SUM(V51)/1,0) AS  Val51
     , ROUND(SUM(V52)/1,0) AS  Val52
     , ROUND(SUM(V53)/1,0) AS  Val53
     , ROUND(SUM(V54)/1,0) AS  Val54
     , ROUND(SUM(V55)/1,0) AS  Val55
     , ROUND(SUM(V56)/1,0) AS  Val56
     , ROUND(SUM(V57)/1,0) AS  Val57
     , ROUND(SUM(V58)/1,0) AS  Val58
     , ROUND(SUM(V59)/1,0) AS  Val59
     , ROUND(SUM(V60)/1,0) AS  Val60
     , ROUND(SUM(V61)/1,0) AS  Val61
     , ROUND(SUM(V62)/1,0) AS  Val62
     , ROUND(SUM(V63)/1,0) AS  Val63
     , ROUND(SUM(V64)/1,0) AS  Val64
     , ROUND(SUM(V65)/1,0) AS  Val65
     , ROUND(SUM(V66)/1,0) AS  Val66
     , ROUND(SUM(V67)/1,0) AS  Val67
     , ROUND(SUM(V68)/1,0) AS  Val68
     , ROUND(SUM(V69)/1,0) AS  Val69
     , ROUND(SUM(V70)/1,0) AS  Val70
     , ROUND(SUM(V71)/1,0) AS  Val71
     , ROUND(SUM(V72)/1,0) AS  Val72
     , ROUND(SUM(V73)/1,0) AS  Val73
     , ROUND(SUM(V74)/1,0) AS  Val74
     , ROUND(SUM(V75)/1,0) AS  Val75
     , ROUND(SUM(V76)/1,0) AS  Val76
     , ROUND(SUM(V77)/1,0) AS  Val77
     , ROUND(SUM(V78)/1,0) AS  Val78
     , ROUND(SUM(V79)/1,0) AS  Val79
     , ROUND(SUM(V80)/1,0) AS  Val80
     , ROUND(SUM(V81)/1,0) AS  Val81
     , ROUND(SUM(V82)/1,0) AS  Val82
     , ROUND(SUM(V83)/1,0) AS  Val83
     , ROUND(SUM(V84)/1,0) AS  Val84
     , ROUND(SUM(V85)/1,0) AS  Val85
     , ROUND(SUM(V86)/1,0) AS  Val86
     , ROUND(SUM(V87)/1,0) AS  Val87
     , ROUND(SUM(V88)/1,0) AS  Val88
     , ROUND(SUM(V89)/1,0) AS  Val89
     , ROUND(SUM(V90)/1,0) AS  Val90
     , ROUND(SUM(V91)/1,0) AS  Val91
     , ROUND(SUM(V92)/1,0) AS  Val92
     , ROUND(SUM(V93)/1,0) AS  Val93
     , ROUND(SUM(V94)/1,0) AS  Val94
     , ROUND(SUM(V95)/1,0) AS  Val95
     , ROUND(SUM(V96)/1,0) AS  Val96
     , ROUND(SUM(V97)/1,0) AS  Val97
     , ROUND(SUM(V98)/1,0) AS  Val98
     , ROUND(SUM(V99)/1,0) AS  Val99
     , ROUND(SUM(V100)/1,0) AS  Val100
     , ROUND(SUM(V101)/1,0) AS  Val101
     , ROUND(SUM(V102)/1,0) AS  Val102
     , ROUND(SUM(V103)/1,0) AS  Val103
     , ROUND(SUM(V104)/1,0) AS  Val104
     , ROUND(SUM(V105)/1,0) AS  Val105
     , ROUND(SUM(V106)/1,0) AS  Val106
     , ROUND(SUM(V107)/1,0) AS  Val107
     , ROUND(SUM(V108)/1,0) AS  Val108
     , ROUND(SUM(V109)/1,0) AS  Val109
     , ROUND(SUM(V110)/1,0) AS  Val110
     , ROUND(SUM(V111)/1,0) AS  Val111
     , ROUND(SUM(V112)/1,0) AS  Val112
     , ROUND(SUM(V113)/1,0) AS  Val113
     , ROUND(SUM(V114)/1,0) AS  Val114
     , ROUND(SUM(V115)/1,0) AS  Val115
     , ROUND(SUM(V116)/1,0) AS  Val116
     , ROUND(SUM(V117)/1,0) AS  Val117
     , ROUND(SUM(V118)/1,0) AS  Val118
     , ROUND(SUM(V119)/1,0) AS  Val119
     , ROUND(SUM(V120)/1,0) AS  Val120
     , ROUND(SUM(V121)/1,0) AS  Val121
     , ROUND(SUM(V122)/1,0) AS  Val122
     , ROUND(SUM(V123)/1,0) AS  Val123
     , ROUND(SUM(V124)/1,0) AS  Val124
     , ROUND(SUM(V125)/1,0) AS  Val125
     , ROUND(SUM(V126)/1,0) AS  Val126
     , ROUND(SUM(V127)/1,0) AS  Val127
     , ROUND(SUM(V128)/1,0) AS  Val128
     , ROUND(SUM(V129)/1,0) AS  Val129
     , ROUND(SUM(V130)/1,0) AS  Val130
     , ROUND(SUM(V131)/1,0) AS  Val131
     , ROUND(SUM(V132)/1,0) AS  Val132
     , ROUND(SUM(V133)/1,0) AS  Val133
     , ROUND(SUM(V134)/1,0) AS  Val134
     , ROUND(SUM(V135)/1,0) AS  Val135
     , ROUND(SUM(V136)/1,0) AS  Val136
     , ROUND(SUM(V137)/1,0) AS  Val137
     , ROUND(SUM(V138)/1,0) AS  Val138
     , ROUND(SUM(V139)/1,0) AS  Val139
     , ROUND(SUM(V140)/1,0) AS  Val140
     , ROUND(SUM(V141)/1,0) AS  Val141
     , ROUND(SUM(V142)/1,0) AS  Val142
     , ROUND(SUM(V143)/1,0) AS  Val143
     , ROUND(SUM(V144)/1,0) AS  Val144
     , ROUND(SUM(V145)/1,0) AS  Val145
     , ROUND(SUM(V146)/1,0) AS  Val146
     , ROUND(SUM(V147)/1,0) AS  Val147
     , ROUND(SUM(V148)/1,0) AS  Val148
     , ROUND(SUM(V149)/1,0) AS  Val149
     , ROUND(SUM(V150)/1,0) AS  Val150
     , ROUND(SUM(V151)/1,0) AS  Val151
     , ROUND(SUM(V152)/1,0) AS  Val152
     , ROUND(SUM(V153)/1,0) AS  Val153
     , ROUND(SUM(V154)/1,0) AS  Val154
     , ROUND(SUM(V155)/1,0) AS  Val155
     , ROUND(SUM(V156)/1,0) AS  Val156
     , ROUND(SUM(V157)/1,0) AS  Val157
     , ROUND(SUM(V158)/1,0) AS  Val158
     , ROUND(SUM(V159)/1,0) AS  Val159
     , ROUND(SUM(V160)/1,0) AS  Val160
     , ROUND(SUM(V161)/1,0) AS  Val161
     , ROUND(SUM(V162)/1,0) AS  Val162
     , ROUND(SUM(V163)/1,0) AS  Val163
     , ROUND(SUM(V164)/1,0) AS  Val164
     , ROUND(SUM(V165)/1,0) AS  Val165
     , ROUND(SUM(V166)/1,0) AS  Val166
     , ROUND(SUM(V167)/1,0) AS  Val167
     , ROUND(SUM(V168)/1,0) AS  Val168
     , ROUND(SUM(V169)/1,0) AS  Val169
     , ROUND(SUM(V170)/1,0) AS  Val170
     , ROUND(SUM(V171)/1,0) AS  Val171
     , ROUND(SUM(V172)/1,0) AS  Val172
     , ROUND(SUM(V173)/1,0) AS  Val173
     , ROUND(SUM(V174)/1,0) AS  Val174
     , ROUND(SUM(V175)/1,0) AS  Val175
     , ROUND(SUM(V176)/1,0) AS  Val176
     , ROUND(SUM(V177)/1,0) AS  Val177
     , ROUND(SUM(V178)/1,0) AS  Val178
     , ROUND(SUM(V179)/1,0) AS  Val179
     , ROUND(SUM(V180)/1,0) AS  Val180
     , ROUND(SUM(V181)/1,0) AS  Val181
     , ROUND(SUM(V182)/1,0) AS  Val182
     , ROUND(SUM(V183)/1,0) AS  Val183
     , ROUND(SUM(V184)/1,0) AS  Val184
     , ROUND(SUM(V185)/1,0) AS  Val185
     , ROUND(SUM(V186)/1,0) AS  Val186
     , ROUND(SUM(V187)/1,0) AS  Val187
     , ROUND(SUM(V188)/1,0) AS  Val188
     , ROUND(SUM(V189)/1,0) AS  Val189
     , ROUND(SUM(V190)/1,0) AS  Val190
     , ROUND(SUM(V191)/1,0) AS  Val191
     , ROUND(SUM(V192)/1,0) AS  Val192
     , ROUND(SUM(V193)/1,0) AS  Val193
     , ROUND(SUM(V194)/1,0) AS  Val194
     , ROUND(SUM(V195)/1,0) AS  Val195
     , ROUND(SUM(V196)/1,0) AS  Val196
     , ROUND(SUM(V197)/1,0) AS  Val197
     , ROUND(SUM(V198)/1,0) AS  Val198
     , ROUND(SUM(V199)/1,0) AS  Val199
     , ROUND(SUM(V200)/1,0) AS  Val200
     , ROUND(SUM(V201)/1,0) AS  Val201
     , ROUND(SUM(V202)/1,0) AS  Val202
     , ROUND(SUM(V203)/1,0) AS  Val203
     , ROUND(SUM(V204)/1,0) AS  Val204
     , ROUND(SUM(V205)/1,0) AS  Val205
     , ROUND(SUM(V206)/1,0) AS  Val206
     , ROUND(SUM(V207)/1,0) AS  Val207
     , ROUND(SUM(V208)/1,0) AS  Val208
     , ROUND(SUM(V209)/1,0) AS  Val209
     , ROUND(SUM(V210)/1,0) AS  Val210
     , ROUND(SUM(V211)/1,0) AS  Val211
     , ROUND(SUM(V212)/1,0) AS  Val212
     , ROUND(SUM(V213)/1,0) AS  Val213
     , ROUND(SUM(V214)/1,0) AS  Val214
     , ROUND(SUM(V215)/1,0) AS  Val215
     , ROUND(SUM(V216)/1,0) AS  Val216
     , ROUND(SUM(V217)/1,0) AS  Val217
     , ROUND(SUM(V218)/1,0) AS  Val218
     , ROUND(SUM(V219)/1,0) AS  Val219
     , ROUND(SUM(V220)/1,0) AS  Val220
     , ROUND(SUM(V221)/1,0) AS  Val221
     , ROUND(SUM(V222)/1,0) AS  Val222
     , ROUND(SUM(V223)/1,0) AS  Val223
     , ROUND(SUM(V224)/1,0) AS  Val224
     , ROUND(SUM(V225)/1,0) AS  Val225
     , ROUND(SUM(V226)/1,0) AS  Val226
     , ROUND(SUM(V227)/1,0) AS  Val227
     , ROUND(SUM(V228)/1,0) AS  Val228
     , ROUND(SUM(V229)/1,0) AS  Val229
     , ROUND(SUM(V230)/1,0) AS  Val230
     , ROUND(SUM(V231)/1,0) AS  Val231
     , ROUND(SUM(V232)/1,0) AS  Val232
     , ROUND(SUM(V233)/1,0) AS  Val233
     , ROUND(SUM(V234)/1,0) AS  Val234
     , ROUND(SUM(V235)/1,0) AS  Val235
     , ROUND(SUM(V236)/1,0) AS  Val236
     , ROUND(SUM(V237)/1,0) AS  Val237
     , ROUND(SUM(V238)/1,0) AS  Val238
     , ROUND(SUM(V239)/1,0) AS  Val239
     , ROUND(SUM(V240)/1,0) AS  Val240
     , ROUND(SUM(V241)/1,0) AS  Val241
     , ROUND(SUM(V242)/1,0) AS  Val242
     , ROUND(SUM(V243)/1,0) AS  Val243
     , ROUND(SUM(V244)/1,0) AS  Val244
     , ROUND(SUM(V245)/1,0) AS  Val245
     , ROUND(SUM(V246)/1,0) AS  Val246
     , ROUND(SUM(V247)/1,0) AS  Val247
     , ROUND(SUM(V248)/1,0) AS  Val248
     , ROUND(SUM(V249)/1,0) AS  Val249
     , ROUND(SUM(V250)/1,0) AS  Val250
     , ROUND(SUM(V251)/1,0) AS  Val251
     , ROUND(SUM(V252)/1,0) AS  Val252
     , ROUND(SUM(V253)/1,0) AS  Val253
     , ROUND(SUM(V254)/1,0) AS  Val254
     , ROUND(SUM(V255)/1,0) AS  Val255
     , ROUND(SUM(V256)/1,0) AS  Val256
     , ROUND(SUM(V257)/1,0) AS  Val257
     , ROUND(SUM(V258)/1,0) AS  Val258
     , ROUND(SUM(V259)/1,0) AS  Val259
     , ROUND(SUM(V260)/1,0) AS  Val260
     , ROUND(SUM(V261)/1,0) AS  Val261
     , ROUND(SUM(V262)/1,0) AS  Val262
     , ROUND(SUM(V263)/1,0) AS  Val263
     , ROUND(SUM(V264)/1,0) AS  Val264
     , ROUND(SUM(V265)/1,0) AS  Val265
     , ROUND(SUM(V266)/1,0) AS  Val266
     , ROUND(SUM(V267)/1,0) AS  Val267
     , ROUND(SUM(V268)/1,0) AS  Val268
     , ROUND(SUM(V269)/1,0) AS  Val269
     , ROUND(SUM(V270)/1,0) AS  Val270
     , ROUND(SUM(V271)/1,0) AS  Val271
     , ROUND(SUM(V272)/1,0) AS  Val272
     , ROUND(SUM(V273)/1,0) AS  Val273
     , ROUND(SUM(V274)/1,0) AS  Val274
     , ROUND(SUM(V275)/1,0) AS  Val275
     , TRUNC(SUM(SHP_QTY)/1,0) AS SHP_QTY 
     , ROUND(DECODE(TO_CHAR(TO_DATE('20200413','YYYYMMDD'),'D'), 2, SUM(NVL(PLN.PLAN_W1,0)), 3, SUM(NVL(PLN.PLAN_W1,0)), SUM(NVL(PLN.PLAN_W2,0)) + SUM(NVL(SHP1.ASSY_MONDAY,0)))/1,0) AS PLAN_W1
     , ROUND(SUM(NVL(SHP1.ASSY_WEEK,0))/1,0)
     , ROUND((DECODE(TO_CHAR(TO_DATE('20200413','YYYYMMDD'),'D'), 2, SUM(NVL(PLN.PLAN_W1,0)), 3, SUM(NVL(PLN.PLAN_W1,0)), SUM(NVL(PLN.PLAN_W2,0)) + SUM(NVL(SHP1.ASSY_MONDAY,0)))) - SUM(NVL(SHP1.ASSY_WEEK,0))/1,0) AS LACK_WEEK
  FROM MWIPMATDEF MAT 
     , ( 
        SELECT A.MAT_ID, MAX(B.EMC_1) AS EMC_1 
             , SUM(QTY_1) AS TOTAL 
             , MAX((SELECT ATTR_VALUE FROM MATRNAMSTS WHERE FACTORY = 'HMVA2' AND ATTR_TYPE = 'MAT_ETC' AND ATTR_NAME = DECODE(LOT_CMF_2, 'SE', 'SEC_VERSION', 'HX', 'HX_VERSION') AND ATTR_KEY = A.MAT_ID)) AS VERSION 
             , SUM(DECODE(A.OPER, 'A0000', QTY_1,0)) V0
             , SUM(DECODE(A.OPER, 'A0005', QTY_1,0)) V1
             , SUM(DECODE(A.OPER, 'A000N', QTY_1,0)) V2
             , SUM(DECODE(A.OPER, 'A0010', QTY_1,0)) V3
             , SUM(DECODE(A.OPER, 'A0012', QTY_1,0)) V4
             , SUM(DECODE(A.OPER, 'A0013', QTY_1,0)) V5
             , SUM(DECODE(A.OPER, 'A0015', QTY_1,0)) V6
             , SUM(DECODE(A.OPER, 'A0020', QTY_1,0)) V7
             , SUM(DECODE(A.OPER, 'A0055', QTY_1,0)) V8
             , SUM(DECODE(A.OPER, 'A0023', QTY_1,0)) V9
             , SUM(DECODE(A.OPER, 'A0025', QTY_1,0)) V10
             , SUM(DECODE(A.OPER, 'A0030', QTY_1,0)) V11
             , SUM(DECODE(A.OPER, 'A0190', QTY_1,0)) V12
             , SUM(DECODE(A.OPER, 'A0033', QTY_1,0)) V13
             , SUM(DECODE(A.OPER, 'A0040', QTY_1,0)) V14
             , SUM(DECODE(A.OPER, 'A0041', QTY_1,0)) V15
             , SUM(DECODE(A.OPER, 'A0042', QTY_1,0)) V16
             , SUM(DECODE(A.OPER, 'A0045', QTY_1,0)) V17
             , SUM(DECODE(A.OPER, 'A0050', QTY_1,0)) V18
             , SUM(DECODE(A.OPER, 'A0060', QTY_1,0)) V19
             , SUM(DECODE(A.OPER, 'A0070', QTY_1,0)) V20
             , SUM(DECODE(A.OPER, 'A0080', QTY_1,0)) V21
             , SUM(DECODE(A.OPER, 'A0090', QTY_1,0)) V22
             , SUM(DECODE(A.OPER, 'A0095', QTY_1,0)) V23
             , SUM(DECODE(A.OPER, 'A0110', QTY_1,0)) V24
             , SUM(DECODE(A.OPER, 'A0120', QTY_1,0)) V25
             , SUM(DECODE(A.OPER, 'A0130', QTY_1,0)) V26
             , SUM(DECODE(A.OPER, 'A0140', QTY_1,0)) V27
             , SUM(DECODE(A.OPER, 'A0160', QTY_1,0)) V28
             , SUM(DECODE(A.OPER, 'A0161', QTY_1,0)) V29
             , SUM(DECODE(A.OPER, 'A0165', QTY_1,0)) V30
             , SUM(DECODE(A.OPER, 'A0065', QTY_1,0)) V31
             , SUM(DECODE(A.OPER, 'A0100', QTY_1,0)) V32
             , SUM(DECODE(A.OPER, 'A0150', QTY_1,0)) V33
             , SUM(DECODE(A.OPER, 'A0175', QTY_1,0)) V34
             , SUM(DECODE(A.OPER, 'A0176', QTY_1,0)) V35
             , SUM(DECODE(A.OPER, 'A0170', QTY_1,0)) V36
             , SUM(DECODE(A.OPER, 'A0180', QTY_1,0)) V37
             , SUM(DECODE(A.OPER, 'A0200', QTY_1,0)) V38
             , SUM(DECODE(A.OPER, 'A0201', QTY_1,0)) V39
             , SUM(DECODE(A.OPER, 'A0202', QTY_1,0)) V40
             , SUM(DECODE(A.OPER, 'A0210', QTY_1,0)) V41
             , SUM(DECODE(A.OPER, 'A0215', QTY_1,0)) V42
             , SUM(DECODE(A.OPER, 'A0220', QTY_1,0)) V43
             , SUM(DECODE(A.OPER, 'A0230', QTY_1,0)) V44
             , SUM(DECODE(A.OPER, 'A0300', QTY_1,0)) V45
             , SUM(DECODE(A.OPER, 'A0250', QTY_1,0)) V46
             , SUM(DECODE(A.OPER, 'A0305', QTY_1,0)) V47
             , SUM(DECODE(A.OPER, 'A0240', QTY_1,0)) V48
             , SUM(DECODE(A.OPER, 'A0260', QTY_1,0)) V49
             , SUM(DECODE(A.OPER, 'A0270', QTY_1,0)) V50
             , SUM(DECODE(A.OPER, 'A0290', QTY_1,0)) V51
             , SUM(DECODE(A.OPER, 'A0295', QTY_1,0)) V52
             , SUM(DECODE(A.OPER, 'A0280', QTY_1,0)) V53
             , SUM(DECODE(A.OPER, 'A0306', QTY_1,0)) V54
             , SUM(DECODE(A.OPER, 'A0307', QTY_1,0)) V55
             , SUM(DECODE(A.OPER, 'A0308', QTY_1,0)) V56
             , SUM(DECODE(A.OPER, 'A0310', QTY_1,0)) V57
             , SUM(DECODE(A.OPER, 'A0320', QTY_1,0)) V58
             , SUM(DECODE(A.OPER, 'A0330', QTY_1,0)) V59
             , SUM(DECODE(A.OPER, 'A1280', QTY_1,0)) V60
             , SUM(DECODE(A.OPER, 'A0333', QTY_1,0)) V61
             , SUM(DECODE(A.OPER, 'A0335', QTY_1,0)) V62
             , SUM(DECODE(A.OPER, 'A0337', QTY_1,0)) V63
             , SUM(DECODE(A.OPER, 'A0372', QTY_1,0)) V64
             , SUM(DECODE(A.OPER, 'A0395', QTY_1,0)) V65
             , SUM(DECODE(A.OPER, 'A0397', QTY_1,0)) V66
             , SUM(DECODE(A.OPER, 'A0340', QTY_1,0)) V67
             , SUM(DECODE(A.OPER, 'A0345', QTY_1,0)) V68
             , SUM(DECODE(A.OPER, 'A0350', QTY_1,0)) V69
             , SUM(DECODE(A.OPER, 'A0360', QTY_1,0)) V70
             , SUM(DECODE(A.OPER, 'A0370', QTY_1,0)) V71
             , SUM(DECODE(A.OPER, 'A0375', QTY_1,0)) V72
             , SUM(DECODE(A.OPER, 'A0380', QTY_1,0)) V73
             , SUM(DECODE(A.OPER, 'A0381', QTY_1,0)) V74
             , SUM(DECODE(A.OPER, 'A0382', QTY_1,0)) V75
             , SUM(DECODE(A.OPER, 'A0383', QTY_1,0)) V76
             , SUM(DECODE(A.OPER, 'A0385', QTY_1,0)) V77
             , SUM(DECODE(A.OPER, 'A0391', QTY_1,0)) V78
             , SUM(DECODE(A.OPER, 'A0399', QTY_1,0)) V79
             , SUM(DECODE(A.OPER, 'A0390', QTY_1,0)) V80
             , SUM(DECODE(A.OPER, 'A0400', QTY_1,0)) V81
             , SUM(DECODE(A.OPER, 'A0401', QTY_1,0)) V82
             , SUM(DECODE(A.OPER, 'A0500', QTY_1,0)) V83
             , SUM(DECODE(A.OPER, 'A0530', QTY_1,0)) V84
             , SUM(DECODE(A.OPER, 'A0531', QTY_1,0)) V85
             , SUM(DECODE(A.OPER, 'A0501', QTY_1,0)) V86
             , SUM(DECODE(A.OPER, 'A0540', QTY_1,0)) V87
             , SUM(DECODE(A.OPER, 'A0550', QTY_1,0)) V88
             , SUM(DECODE(A.OPER, 'A0600', QTY_1,0)) V89
             , SUM(DECODE(A.OPER, 'A0620', QTY_1,0)) V90
             , SUM(DECODE(A.OPER, 'A0660', QTY_1,0)) V91
             , SUM(DECODE(A.OPER, 'A0630', QTY_1,0)) V92
             , SUM(DECODE(A.OPER, 'A0650', QTY_1,0)) V93
             , SUM(DECODE(A.OPER, 'A0670', QTY_1,0)) V94
             , SUM(DECODE(A.OPER, 'A0720', QTY_1,0)) V95
             , SUM(DECODE(A.OPER, 'A0700', QTY_1,0)) V96
             , SUM(DECODE(A.OPER, 'A0339', QTY_1,0)) V97
             , SUM(DECODE(A.OPER, 'A0541', QTY_1,0)) V98
             , SUM(DECODE(A.OPER, 'A0551', QTY_1,0)) V99
             , SUM(DECODE(A.OPER, 'A0561', QTY_1,0)) V100
             , SUM(DECODE(A.OPER, 'A0601', QTY_1,0)) V101
             , SUM(DECODE(A.OPER, 'A0710', QTY_1,0)) V102
             , SUM(DECODE(A.OPER, 'A0800', QTY_1,0)) V103
             , SUM(DECODE(A.OPER, 'A0402', QTY_1,0)) V104
             , SUM(DECODE(A.OPER, 'A0502', QTY_1,0)) V105
             , SUM(DECODE(A.OPER, 'A0532', QTY_1,0)) V106
             , SUM(DECODE(A.OPER, 'A0801', QTY_1,0)) V107
             , SUM(DECODE(A.OPER, 'A0542', QTY_1,0)) V108
             , SUM(DECODE(A.OPER, 'A0552', QTY_1,0)) V109
             , SUM(DECODE(A.OPER, 'A0562', QTY_1,0)) V110
             , SUM(DECODE(A.OPER, 'A0602', QTY_1,0)) V111
             , SUM(DECODE(A.OPER, 'A0711', QTY_1,0)) V112
             , SUM(DECODE(A.OPER, 'A0802', QTY_1,0)) V113
             , SUM(DECODE(A.OPER, 'A0403', QTY_1,0)) V114
             , SUM(DECODE(A.OPER, 'A0503', QTY_1,0)) V115
             , SUM(DECODE(A.OPER, 'A0533', QTY_1,0)) V116
             , SUM(DECODE(A.OPER, 'A0543', QTY_1,0)) V117
             , SUM(DECODE(A.OPER, 'A0553', QTY_1,0)) V118
             , SUM(DECODE(A.OPER, 'A0563', QTY_1,0)) V119
             , SUM(DECODE(A.OPER, 'A0603', QTY_1,0)) V120
             , SUM(DECODE(A.OPER, 'A0712', QTY_1,0)) V121
             , SUM(DECODE(A.OPER, 'A0713', QTY_1,0)) V122
             , SUM(DECODE(A.OPER, 'A0803', QTY_1,0)) V123
             , SUM(DECODE(A.OPER, 'A0404', QTY_1,0)) V124
             , SUM(DECODE(A.OPER, 'A0504', QTY_1,0)) V125
             , SUM(DECODE(A.OPER, 'A0534', QTY_1,0)) V126
             , SUM(DECODE(A.OPER, 'A0544', QTY_1,0)) V127
             , SUM(DECODE(A.OPER, 'A0554', QTY_1,0)) V128
             , SUM(DECODE(A.OPER, 'A0564', QTY_1,0)) V129
             , SUM(DECODE(A.OPER, 'A0604', QTY_1,0)) V130
             , SUM(DECODE(A.OPER, 'A0714', QTY_1,0)) V131
             , SUM(DECODE(A.OPER, 'A0804', QTY_1,0)) V132
             , SUM(DECODE(A.OPER, 'A0405', QTY_1,0)) V133
             , SUM(DECODE(A.OPER, 'A0505', QTY_1,0)) V134
             , SUM(DECODE(A.OPER, 'A0535', QTY_1,0)) V135
             , SUM(DECODE(A.OPER, 'A0545', QTY_1,0)) V136
             , SUM(DECODE(A.OPER, 'A0555', QTY_1,0)) V137
             , SUM(DECODE(A.OPER, 'A0565', QTY_1,0)) V138
             , SUM(DECODE(A.OPER, 'A0605', QTY_1,0)) V139
             , SUM(DECODE(A.OPER, 'A0715', QTY_1,0)) V140
             , SUM(DECODE(A.OPER, 'A0805', QTY_1,0)) V141
             , SUM(DECODE(A.OPER, 'A0406', QTY_1,0)) V142
             , SUM(DECODE(A.OPER, 'A0506', QTY_1,0)) V143
             , SUM(DECODE(A.OPER, 'A0536', QTY_1,0)) V144
             , SUM(DECODE(A.OPER, 'A0546', QTY_1,0)) V145
             , SUM(DECODE(A.OPER, 'A0556', QTY_1,0)) V146
             , SUM(DECODE(A.OPER, 'A0566', QTY_1,0)) V147
             , SUM(DECODE(A.OPER, 'A0606', QTY_1,0)) V148
             , SUM(DECODE(A.OPER, 'A0716', QTY_1,0)) V149
             , SUM(DECODE(A.OPER, 'A0806', QTY_1,0)) V150
             , SUM(DECODE(A.OPER, 'A0407', QTY_1,0)) V151
             , SUM(DECODE(A.OPER, 'A0507', QTY_1,0)) V152
             , SUM(DECODE(A.OPER, 'A0537', QTY_1,0)) V153
             , SUM(DECODE(A.OPER, 'A0547', QTY_1,0)) V154
             , SUM(DECODE(A.OPER, 'A0557', QTY_1,0)) V155
             , SUM(DECODE(A.OPER, 'A0567', QTY_1,0)) V156
             , SUM(DECODE(A.OPER, 'A0607', QTY_1,0)) V157
             , SUM(DECODE(A.OPER, 'A0717', QTY_1,0)) V158
             , SUM(DECODE(A.OPER, 'A0807', QTY_1,0)) V159
             , SUM(DECODE(A.OPER, 'A0408', QTY_1,0)) V160
             , SUM(DECODE(A.OPER, 'A0508', QTY_1,0)) V161
             , SUM(DECODE(A.OPER, 'A0538', QTY_1,0)) V162
             , SUM(DECODE(A.OPER, 'A0558', QTY_1,0)) V163
             , SUM(DECODE(A.OPER, 'A0568', QTY_1,0)) V164
             , SUM(DECODE(A.OPER, 'A0608', QTY_1,0)) V165
             , SUM(DECODE(A.OPER, 'A0808', QTY_1,0)) V166
             , SUM(DECODE(A.OPER, 'A0409', QTY_1,0)) V167
             , SUM(DECODE(A.OPER, 'A0509', QTY_1,0)) V168
             , SUM(DECODE(A.OPER, 'A0539', QTY_1,0)) V169
             , SUM(DECODE(A.OPER, 'A0559', QTY_1,0)) V170
             , SUM(DECODE(A.OPER, 'A0569', QTY_1,0)) V171
             , SUM(DECODE(A.OPER, 'A0609', QTY_1,0)) V172
             , SUM(DECODE(A.OPER, 'A0809', QTY_1,0)) V173
             , SUM(DECODE(A.OPER, 'A080A', QTY_1,0)) V174
             , SUM(DECODE(A.OPER, 'A0890', QTY_1,0)) V175
             , SUM(DECODE(A.OPER, 'A0900', QTY_1,0)) V176
             , SUM(DECODE(A.OPER, 'A0910', QTY_1,0)) V177
             , SUM(DECODE(A.OPER, 'A0920', QTY_1,0)) V178
             , SUM(DECODE(A.OPER, 'A0930', QTY_1,0)) V179
             , SUM(DECODE(A.OPER, 'A0935', QTY_1,0)) V180
             , SUM(DECODE(A.OPER, 'A040A', QTY_1,0)) V181
             , SUM(DECODE(A.OPER, 'A0950', QTY_1,0)) V182
             , SUM(DECODE(A.OPER, 'A053A', QTY_1,0)) V183
             , SUM(DECODE(A.OPER, 'A0970', QTY_1,0)) V184
             , SUM(DECODE(A.OPER, 'A0940', QTY_1,0)) V185
             , SUM(DECODE(A.OPER, 'A0980', QTY_1,0)) V186
             , SUM(DECODE(A.OPER, 'A1000', QTY_1,0)) V187
             , SUM(DECODE(A.OPER, 'A055A', QTY_1,0)) V188
             , SUM(DECODE(A.OPER, 'A060A', QTY_1,0)) V189
             , SUM(DECODE(A.OPER, 'A1040', QTY_1,0)) V190
             , SUM(DECODE(A.OPER, 'A1070', QTY_1,0)) V191
             , SUM(DECODE(A.OPER, 'A1020', QTY_1,0)) V192
             , SUM(DECODE(A.OPER, 'A1100', QTY_1,0)) V193
             , SUM(DECODE(A.OPER, 'A1110', QTY_1,0)) V194
             , SUM(DECODE(A.OPER, 'A1120', QTY_1,0)) V195
             , SUM(DECODE(A.OPER, 'A1130', QTY_1,0)) V196
             , SUM(DECODE(A.OPER, 'A1140', QTY_1,0)) V197
             , SUM(DECODE(A.OPER, 'A1150', QTY_1,0)) V198
             , SUM(DECODE(A.OPER, 'A1600', QTY_1,0)) V199
             , SUM(DECODE(A.OPER, 'A1650', QTY_1,0)) V200
             , SUM(DECODE(A.OPER, 'A1170', QTY_1,0)) V201
             , SUM(DECODE(A.OPER, 'A1180', QTY_1,0)) V202
             , SUM(DECODE(A.OPER, 'A1200', QTY_1,0)) V203
             , SUM(DECODE(A.OPER, 'A1230', QTY_1,0)) V204
             , SUM(DECODE(A.OPER, 'A1240', QTY_1,0)) V205
             , SUM(DECODE(A.OPER, 'A1250', QTY_1,0)) V206
             , SUM(DECODE(A.OPER, 'A1260', QTY_1,0)) V207
             , SUM(DECODE(A.OPER, 'A1270', QTY_1,0)) V208
             , SUM(DECODE(A.OPER, 'A1300', QTY_1,0)) V209
             , SUM(DECODE(A.OPER, 'A1350', QTY_1,0)) V210
             , SUM(DECODE(A.OPER, 'A1370', QTY_1,0)) V211
             , SUM(DECODE(A.OPER, 'A1380', QTY_1,0)) V212
             , SUM(DECODE(A.OPER, 'A1050', QTY_1,0)) V213
             , SUM(DECODE(A.OPER, 'A1420', QTY_1,0)) V214
             , SUM(DECODE(A.OPER, 'A1440', QTY_1,0)) V215
             , SUM(DECODE(A.OPER, 'A1450', QTY_1,0)) V216
             , SUM(DECODE(A.OPER, 'A1821', QTY_1,0)) V217
             , SUM(DECODE(A.OPER, 'A1460', QTY_1,0)) V218
             , SUM(DECODE(A.OPER, 'A1470', QTY_1,0)) V219
             , SUM(DECODE(A.OPER, 'A1500', QTY_1,0)) V220
             , SUM(DECODE(A.OPER, 'A1550', QTY_1,0)) V221
             , SUM(DECODE(A.OPER, 'A1610', QTY_1,0)) V222
             , SUM(DECODE(A.OPER, 'A1560', QTY_1,0)) V223
             , SUM(DECODE(A.OPER, 'A1720', QTY_1,0)) V224
             , SUM(DECODE(A.OPER, 'A1730', QTY_1,0)) V225
             , SUM(DECODE(A.OPER, 'A1740', QTY_1,0)) V226
             , SUM(DECODE(A.OPER, 'A1750', QTY_1,0)) V227
             , SUM(DECODE(A.OPER, 'A1755', QTY_1,0)) V228
             , SUM(DECODE(A.OPER, 'A1760', QTY_1,0)) V229
             , SUM(DECODE(A.OPER, 'A1765', QTY_1,0)) V230
             , SUM(DECODE(A.OPER, 'A1766', QTY_1,0)) V231
             , SUM(DECODE(A.OPER, 'A1763', QTY_1,0)) V232
             , SUM(DECODE(A.OPER, 'A1770', QTY_1,0)) V233
             , SUM(DECODE(A.OPER, 'A1780', QTY_1,0)) V234
             , SUM(DECODE(A.OPER, 'A1790', QTY_1,0)) V235
             , SUM(DECODE(A.OPER, 'A1795', QTY_1,0)) V236
             , SUM(DECODE(A.OPER, 'A1860', QTY_1,0)) V237
             , SUM(DECODE(A.OPER, 'A1850', QTY_1,0)) V238
             , SUM(DECODE(A.OPER, 'A1390', QTY_1,0)) V239
             , SUM(DECODE(A.OPER, 'A1800', QTY_1,0)) V240
             , SUM(DECODE(A.OPER, 'A1805', QTY_1,0)) V241
             , SUM(DECODE(A.OPER, 'A1810', QTY_1,0)) V242
             , SUM(DECODE(A.OPER, 'A1811', QTY_1,0)) V243
             , SUM(DECODE(A.OPER, 'A1812', QTY_1,0)) V244
             , SUM(DECODE(A.OPER, 'A1816', QTY_1,0)) V245
             , SUM(DECODE(A.OPER, 'A1820', QTY_1,0)) V246
             , SUM(DECODE(A.OPER, 'A1825', QTY_1,0)) V247
             , SUM(DECODE(A.OPER, 'A1826', QTY_1,0)) V248
             , SUM(DECODE(A.OPER, 'A1920', QTY_1,0)) V249
             , SUM(DECODE(A.OPER, 'A1960', QTY_1,0)) V250
             , SUM(DECODE(A.OPER, 'A1815', QTY_1,0)) V251
             , SUM(DECODE(A.OPER, 'A1830', QTY_1,0)) V252
             , SUM(DECODE(A.OPER, 'A1710', QTY_1,0)) V253
             , SUM(DECODE(A.OPER, 'A1840', QTY_1,0)) V254
             , SUM(DECODE(A.OPER, 'A1900', QTY_1,0)) V255
             , SUM(DECODE(A.OPER, 'A1910', QTY_1,0)) V256
             , SUM(DECODE(A.OPER, 'A1950', QTY_1,0)) V257
             , SUM(DECODE(A.OPER, 'A2000', QTY_1,0)) V258
             , SUM(DECODE(A.OPER, 'A2010', QTY_1,0)) V259
             , SUM(DECODE(A.OPER, 'A2020', QTY_1,0)) V260
             , SUM(DECODE(A.OPER, 'A2025', QTY_1,0)) V261
             , SUM(DECODE(A.OPER, 'A1819', QTY_1,0)) V262
             , SUM(DECODE(A.OPER, 'A2030', QTY_1,0)) V263
             , SUM(DECODE(A.OPER, 'A2040', QTY_1,0)) V264
             , SUM(DECODE(A.OPER, 'A2041', QTY_1,0)) V265
             , SUM(DECODE(A.OPER, 'A2042', QTY_1,0)) V266
             , SUM(DECODE(A.OPER, 'A2070', QTY_1,0)) V267
             , SUM(DECODE(A.OPER, 'A2050', QTY_1,0)) V268
             , SUM(DECODE(A.OPER, 'A2150', QTY_1,0)) V269
             , SUM(DECODE(A.OPER, 'A2200', QTY_1,0)) V270
             , SUM(DECODE(A.OPER, 'A2100', QTY_1,0)) V271
             , SUM(DECODE(A.OPER, 'A2300', QTY_1,0)) V272
             , SUM(DECODE(A.OPER, 'A2350', QTY_1,0)) V273
             , SUM(DECODE(A.OPER, 'AZ009', QTY_1,0)) V274
             , SUM(DECODE(A.OPER, 'AZ010', QTY_1,0)) V275
          FROM RWIPLOTSTS A, CLOTCRDDAT@RPTTOMES B 
         WHERE 1=1 
           AND A.FACTORY = B.FACTORY(+) 
           AND A.MAT_ID = B.MAT_ID(+) 
           AND A.LOT_DEL_FLAG = ' ' 
           AND A.LOT_TYPE = 'W' 
           AND A.MAT_ID LIKE 'FP%' 
           AND A.FACTORY = 'HMVA2' 
           AND A.OPER BETWEEN 'A0000' AND 'AZ010' 
         GROUP BY A.MAT_ID 
       ) WIP 
     , ( 
        SELECT MAT_ID 
             , SUM(S1_FAC_OUT_QTY_1+S2_FAC_OUT_QTY_1+S3_FAC_OUT_QTY_1) AS SHP_QTY  
          FROM RSUMFACMOV
         WHERE CM_KEY_1 = 'HMVA2' 
           AND MAT_ID LIKE 'FP%' 
           AND WORK_DATE = '20200413'
           AND FACTORY NOT IN ('RETURN')
           AND LOT_TYPE = 'W'
         GROUP BY MAT_ID 
       ) SHP 
     , ( 
        SELECT MAT_ID 
             , SUM(DECODE(WORK_DATE, '20200413', NVL(S1_FAC_OUT_QTY_1 + S2_FAC_OUT_QTY_1 + S3_FAC_OUT_QTY_1 + S4_FAC_OUT_QTY_1, 0), 0)) AS ASSY_MONDAY  
             , SUM(NVL(S1_FAC_OUT_QTY_1 + S2_FAC_OUT_QTY_1 + S3_FAC_OUT_QTY_1 + S4_FAC_OUT_QTY_1, 0)) AS ASSY_WEEK 
          FROM RSUMFACMOV 
         WHERE CM_KEY_1 = 'HMVA2' 
           AND LOT_TYPE = 'W'
           AND CM_KEY_2 = 'PROD' 
           AND CM_KEY_3 LIKE 'P%' 
           AND MAT_ID LIKE 'SES%' 
           AND WORK_DATE BETWEEN '20200413' AND '20200419'
         GROUP BY MAT_ID 
       ) SHP1 
     , ( 
        SELECT MAT_ID 
             , SUM(PLAN_QTY) PLAN_W1 
             , SUM(DECODE(PLAN_DAY, '20200413', 0, PLAN_QTY)) AS PLAN_W2 
          FROM ( 
                SELECT * 
                  FROM CWIPPLNDAY 
                 WHERE 1=1 
                   AND FACTORY = 'HMVA2' 
                   AND PLAN_DAY BETWEEN '20200413' AND '20200419'
                   AND IN_OUT_FLAG = 'OUT'
                   AND CLASS = 'ASSY'
               ) B
         GROUP BY MAT_ID 
       ) PLN 
 WHERE 1=1 
   AND MAT.MAT_ID = WIP.MAT_ID(+) 
   AND MAT.MAT_ID = SHP.MAT_ID(+) 
   AND MAT.MAT_ID = SHP1.MAT_ID(+) 
   AND MAT.MAT_ID = PLN.MAT_ID(+) 
   AND MAT.FACTORY = 'HMVA2' 
   AND MAT.MAT_ID LIKE 'FP%' 
 GROUP BY MAT.MAT_GRP_1,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT.MAT_CMF_10,  ' ', MAT.MAT_ID,  ' ',  ' '
HAVING (NVL(SUM(TOTAL),0) + NVL(SUM(SHP_QTY),0)  + NVL(SUM(ASSY_WEEK),0) + NVL(SUM(PLAN_W1),0)) > 0     
 ORDER BY MAT.MAT_GRP_1,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT.MAT_CMF_10,  ' ', MAT.MAT_ID,  ' ',  ' ' 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE) AS This_Week_First_Day 
     , MAX(SYS_DATE) AS This_Week_Last_Day
  FROM MWIPCALDEF
 WHERE 1=1 
   AND CALENDAR_ID = 'SE'
   AND (PLAN_YEAR,PLAN_WEEK) IN (
                                 SELECT PLAN_YEAR,PLAN_WEEK 
                                   FROM MWIPCALDEF 
                                  WHERE 1=1
                                    AND CALENDAR_ID = 'SE'
                                    AND SYS_DATE = '20200411')

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT NVL((SELECT DATA_1 FROM MGCMTBLDAT WHERE TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = MAT.MAT_GRP_1 AND ROWNUM=1), '-') AS CUSTOMER,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT.MAT_CMF_10 AS PIN_TYPE,  ' ', MAT.MAT_ID AS PRODUCT,  ' ',  ' ' 
     , ROUND(SUM(TOTAL)/1,0) AS TOTAL 
     , ROUND(SUM(V0)/1,0) AS  Val0
     , ROUND(SUM(V1)/1,0) AS  Val1
     , ROUND(SUM(V2)/1,0) AS  Val2
     , ROUND(SUM(V3)/1,0) AS  Val3
     , ROUND(SUM(V4)/1,0) AS  Val4
     , ROUND(SUM(V5)/1,0) AS  Val5
     , ROUND(SUM(V6)/1,0) AS  Val6
     , ROUND(SUM(V7)/1,0) AS  Val7
     , ROUND(SUM(V8)/1,0) AS  Val8
     , ROUND(SUM(V9)/1,0) AS  Val9
     , ROUND(SUM(V10)/1,0) AS  Val10
     , ROUND(SUM(V11)/1,0) AS  Val11
     , ROUND(SUM(V12)/1,0) AS  Val12
     , ROUND(SUM(V13)/1,0) AS  Val13
     , ROUND(SUM(V14)/1,0) AS  Val14
     , ROUND(SUM(V15)/1,0) AS  Val15
     , ROUND(SUM(V16)/1,0) AS  Val16
     , ROUND(SUM(V17)/1,0) AS  Val17
     , ROUND(SUM(V18)/1,0) AS  Val18
     , ROUND(SUM(V19)/1,0) AS  Val19
     , ROUND(SUM(V20)/1,0) AS  Val20
     , ROUND(SUM(V21)/1,0) AS  Val21
     , ROUND(SUM(V22)/1,0) AS  Val22
     , ROUND(SUM(V23)/1,0) AS  Val23
     , ROUND(SUM(V24)/1,0) AS  Val24
     , ROUND(SUM(V25)/1,0) AS  Val25
     , ROUND(SUM(V26)/1,0) AS  Val26
     , ROUND(SUM(V27)/1,0) AS  Val27
     , ROUND(SUM(V28)/1,0) AS  Val28
     , ROUND(SUM(V29)/1,0) AS  Val29
     , ROUND(SUM(V30)/1,0) AS  Val30
     , ROUND(SUM(V31)/1,0) AS  Val31
     , ROUND(SUM(V32)/1,0) AS  Val32
     , ROUND(SUM(V33)/1,0) AS  Val33
     , ROUND(SUM(V34)/1,0) AS  Val34
     , ROUND(SUM(V35)/1,0) AS  Val35
     , ROUND(SUM(V36)/1,0) AS  Val36
     , ROUND(SUM(V37)/1,0) AS  Val37
     , ROUND(SUM(V38)/1,0) AS  Val38
     , ROUND(SUM(V39)/1,0) AS  Val39
     , ROUND(SUM(V40)/1,0) AS  Val40
     , ROUND(SUM(V41)/1,0) AS  Val41
     , ROUND(SUM(V42)/1,0) AS  Val42
     , ROUND(SUM(V43)/1,0) AS  Val43
     , ROUND(SUM(V44)/1,0) AS  Val44
     , ROUND(SUM(V45)/1,0) AS  Val45
     , ROUND(SUM(V46)/1,0) AS  Val46
     , ROUND(SUM(V47)/1,0) AS  Val47
     , ROUND(SUM(V48)/1,0) AS  Val48
     , ROUND(SUM(V49)/1,0) AS  Val49
     , ROUND(SUM(V50)/1,0) AS  Val50
     , ROUND(SUM(V51)/1,0) AS  Val51
     , ROUND(SUM(V52)/1,0) AS  Val52
     , ROUND(SUM(V53)/1,0) AS  Val53
     , ROUND(SUM(V54)/1,0) AS  Val54
     , ROUND(SUM(V55)/1,0) AS  Val55
     , ROUND(SUM(V56)/1,0) AS  Val56
     , ROUND(SUM(V57)/1,0) AS  Val57
     , ROUND(SUM(V58)/1,0) AS  Val58
     , ROUND(SUM(V59)/1,0) AS  Val59
     , ROUND(SUM(V60)/1,0) AS  Val60
     , ROUND(SUM(V61)/1,0) AS  Val61
     , ROUND(SUM(V62)/1,0) AS  Val62
     , ROUND(SUM(V63)/1,0) AS  Val63
     , ROUND(SUM(V64)/1,0) AS  Val64
     , ROUND(SUM(V65)/1,0) AS  Val65
     , ROUND(SUM(V66)/1,0) AS  Val66
     , ROUND(SUM(V67)/1,0) AS  Val67
     , ROUND(SUM(V68)/1,0) AS  Val68
     , ROUND(SUM(V69)/1,0) AS  Val69
     , ROUND(SUM(V70)/1,0) AS  Val70
     , ROUND(SUM(V71)/1,0) AS  Val71
     , ROUND(SUM(V72)/1,0) AS  Val72
     , ROUND(SUM(V73)/1,0) AS  Val73
     , ROUND(SUM(V74)/1,0) AS  Val74
     , ROUND(SUM(V75)/1,0) AS  Val75
     , ROUND(SUM(V76)/1,0) AS  Val76
     , ROUND(SUM(V77)/1,0) AS  Val77
     , ROUND(SUM(V78)/1,0) AS  Val78
     , ROUND(SUM(V79)/1,0) AS  Val79
     , ROUND(SUM(V80)/1,0) AS  Val80
     , ROUND(SUM(V81)/1,0) AS  Val81
     , ROUND(SUM(V82)/1,0) AS  Val82
     , ROUND(SUM(V83)/1,0) AS  Val83
     , ROUND(SUM(V84)/1,0) AS  Val84
     , ROUND(SUM(V85)/1,0) AS  Val85
     , ROUND(SUM(V86)/1,0) AS  Val86
     , ROUND(SUM(V87)/1,0) AS  Val87
     , ROUND(SUM(V88)/1,0) AS  Val88
     , ROUND(SUM(V89)/1,0) AS  Val89
     , ROUND(SUM(V90)/1,0) AS  Val90
     , ROUND(SUM(V91)/1,0) AS  Val91
     , ROUND(SUM(V92)/1,0) AS  Val92
     , ROUND(SUM(V93)/1,0) AS  Val93
     , ROUND(SUM(V94)/1,0) AS  Val94
     , ROUND(SUM(V95)/1,0) AS  Val95
     , ROUND(SUM(V96)/1,0) AS  Val96
     , ROUND(SUM(V97)/1,0) AS  Val97
     , ROUND(SUM(V98)/1,0) AS  Val98
     , ROUND(SUM(V99)/1,0) AS  Val99
     , ROUND(SUM(V100)/1,0) AS  Val100
     , ROUND(SUM(V101)/1,0) AS  Val101
     , ROUND(SUM(V102)/1,0) AS  Val102
     , ROUND(SUM(V103)/1,0) AS  Val103
     , ROUND(SUM(V104)/1,0) AS  Val104
     , ROUND(SUM(V105)/1,0) AS  Val105
     , ROUND(SUM(V106)/1,0) AS  Val106
     , ROUND(SUM(V107)/1,0) AS  Val107
     , ROUND(SUM(V108)/1,0) AS  Val108
     , ROUND(SUM(V109)/1,0) AS  Val109
     , ROUND(SUM(V110)/1,0) AS  Val110
     , ROUND(SUM(V111)/1,0) AS  Val111
     , ROUND(SUM(V112)/1,0) AS  Val112
     , ROUND(SUM(V113)/1,0) AS  Val113
     , ROUND(SUM(V114)/1,0) AS  Val114
     , ROUND(SUM(V115)/1,0) AS  Val115
     , ROUND(SUM(V116)/1,0) AS  Val116
     , ROUND(SUM(V117)/1,0) AS  Val117
     , ROUND(SUM(V118)/1,0) AS  Val118
     , ROUND(SUM(V119)/1,0) AS  Val119
     , ROUND(SUM(V120)/1,0) AS  Val120
     , ROUND(SUM(V121)/1,0) AS  Val121
     , ROUND(SUM(V122)/1,0) AS  Val122
     , ROUND(SUM(V123)/1,0) AS  Val123
     , ROUND(SUM(V124)/1,0) AS  Val124
     , ROUND(SUM(V125)/1,0) AS  Val125
     , ROUND(SUM(V126)/1,0) AS  Val126
     , ROUND(SUM(V127)/1,0) AS  Val127
     , ROUND(SUM(V128)/1,0) AS  Val128
     , ROUND(SUM(V129)/1,0) AS  Val129
     , ROUND(SUM(V130)/1,0) AS  Val130
     , ROUND(SUM(V131)/1,0) AS  Val131
     , ROUND(SUM(V132)/1,0) AS  Val132
     , ROUND(SUM(V133)/1,0) AS  Val133
     , ROUND(SUM(V134)/1,0) AS  Val134
     , ROUND(SUM(V135)/1,0) AS  Val135
     , ROUND(SUM(V136)/1,0) AS  Val136
     , ROUND(SUM(V137)/1,0) AS  Val137
     , ROUND(SUM(V138)/1,0) AS  Val138
     , ROUND(SUM(V139)/1,0) AS  Val139
     , ROUND(SUM(V140)/1,0) AS  Val140
     , ROUND(SUM(V141)/1,0) AS  Val141
     , ROUND(SUM(V142)/1,0) AS  Val142
     , ROUND(SUM(V143)/1,0) AS  Val143
     , ROUND(SUM(V144)/1,0) AS  Val144
     , ROUND(SUM(V145)/1,0) AS  Val145
     , ROUND(SUM(V146)/1,0) AS  Val146
     , ROUND(SUM(V147)/1,0) AS  Val147
     , ROUND(SUM(V148)/1,0) AS  Val148
     , ROUND(SUM(V149)/1,0) AS  Val149
     , ROUND(SUM(V150)/1,0) AS  Val150
     , ROUND(SUM(V151)/1,0) AS  Val151
     , ROUND(SUM(V152)/1,0) AS  Val152
     , ROUND(SUM(V153)/1,0) AS  Val153
     , ROUND(SUM(V154)/1,0) AS  Val154
     , ROUND(SUM(V155)/1,0) AS  Val155
     , ROUND(SUM(V156)/1,0) AS  Val156
     , ROUND(SUM(V157)/1,0) AS  Val157
     , ROUND(SUM(V158)/1,0) AS  Val158
     , ROUND(SUM(V159)/1,0) AS  Val159
     , ROUND(SUM(V160)/1,0) AS  Val160
     , ROUND(SUM(V161)/1,0) AS  Val161
     , ROUND(SUM(V162)/1,0) AS  Val162
     , ROUND(SUM(V163)/1,0) AS  Val163
     , ROUND(SUM(V164)/1,0) AS  Val164
     , ROUND(SUM(V165)/1,0) AS  Val165
     , ROUND(SUM(V166)/1,0) AS  Val166
     , ROUND(SUM(V167)/1,0) AS  Val167
     , ROUND(SUM(V168)/1,0) AS  Val168
     , ROUND(SUM(V169)/1,0) AS  Val169
     , ROUND(SUM(V170)/1,0) AS  Val170
     , ROUND(SUM(V171)/1,0) AS  Val171
     , ROUND(SUM(V172)/1,0) AS  Val172
     , ROUND(SUM(V173)/1,0) AS  Val173
     , ROUND(SUM(V174)/1,0) AS  Val174
     , ROUND(SUM(V175)/1,0) AS  Val175
     , ROUND(SUM(V176)/1,0) AS  Val176
     , ROUND(SUM(V177)/1,0) AS  Val177
     , ROUND(SUM(V178)/1,0) AS  Val178
     , ROUND(SUM(V179)/1,0) AS  Val179
     , ROUND(SUM(V180)/1,0) AS  Val180
     , ROUND(SUM(V181)/1,0) AS  Val181
     , ROUND(SUM(V182)/1,0) AS  Val182
     , ROUND(SUM(V183)/1,0) AS  Val183
     , ROUND(SUM(V184)/1,0) AS  Val184
     , ROUND(SUM(V185)/1,0) AS  Val185
     , ROUND(SUM(V186)/1,0) AS  Val186
     , ROUND(SUM(V187)/1,0) AS  Val187
     , ROUND(SUM(V188)/1,0) AS  Val188
     , ROUND(SUM(V189)/1,0) AS  Val189
     , ROUND(SUM(V190)/1,0) AS  Val190
     , ROUND(SUM(V191)/1,0) AS  Val191
     , ROUND(SUM(V192)/1,0) AS  Val192
     , ROUND(SUM(V193)/1,0) AS  Val193
     , ROUND(SUM(V194)/1,0) AS  Val194
     , ROUND(SUM(V195)/1,0) AS  Val195
     , ROUND(SUM(V196)/1,0) AS  Val196
     , ROUND(SUM(V197)/1,0) AS  Val197
     , ROUND(SUM(V198)/1,0) AS  Val198
     , ROUND(SUM(V199)/1,0) AS  Val199
     , ROUND(SUM(V200)/1,0) AS  Val200
     , ROUND(SUM(V201)/1,0) AS  Val201
     , ROUND(SUM(V202)/1,0) AS  Val202
     , ROUND(SUM(V203)/1,0) AS  Val203
     , ROUND(SUM(V204)/1,0) AS  Val204
     , ROUND(SUM(V205)/1,0) AS  Val205
     , ROUND(SUM(V206)/1,0) AS  Val206
     , ROUND(SUM(V207)/1,0) AS  Val207
     , ROUND(SUM(V208)/1,0) AS  Val208
     , ROUND(SUM(V209)/1,0) AS  Val209
     , ROUND(SUM(V210)/1,0) AS  Val210
     , ROUND(SUM(V211)/1,0) AS  Val211
     , ROUND(SUM(V212)/1,0) AS  Val212
     , ROUND(SUM(V213)/1,0) AS  Val213
     , ROUND(SUM(V214)/1,0) AS  Val214
     , ROUND(SUM(V215)/1,0) AS  Val215
     , ROUND(SUM(V216)/1,0) AS  Val216
     , ROUND(SUM(V217)/1,0) AS  Val217
     , ROUND(SUM(V218)/1,0) AS  Val218
     , ROUND(SUM(V219)/1,0) AS  Val219
     , ROUND(SUM(V220)/1,0) AS  Val220
     , ROUND(SUM(V221)/1,0) AS  Val221
     , ROUND(SUM(V222)/1,0) AS  Val222
     , ROUND(SUM(V223)/1,0) AS  Val223
     , ROUND(SUM(V224)/1,0) AS  Val224
     , ROUND(SUM(V225)/1,0) AS  Val225
     , ROUND(SUM(V226)/1,0) AS  Val226
     , ROUND(SUM(V227)/1,0) AS  Val227
     , ROUND(SUM(V228)/1,0) AS  Val228
     , ROUND(SUM(V229)/1,0) AS  Val229
     , ROUND(SUM(V230)/1,0) AS  Val230
     , ROUND(SUM(V231)/1,0) AS  Val231
     , ROUND(SUM(V232)/1,0) AS  Val232
     , ROUND(SUM(V233)/1,0) AS  Val233
     , ROUND(SUM(V234)/1,0) AS  Val234
     , ROUND(SUM(V235)/1,0) AS  Val235
     , ROUND(SUM(V236)/1,0) AS  Val236
     , ROUND(SUM(V237)/1,0) AS  Val237
     , ROUND(SUM(V238)/1,0) AS  Val238
     , ROUND(SUM(V239)/1,0) AS  Val239
     , ROUND(SUM(V240)/1,0) AS  Val240
     , ROUND(SUM(V241)/1,0) AS  Val241
     , ROUND(SUM(V242)/1,0) AS  Val242
     , ROUND(SUM(V243)/1,0) AS  Val243
     , ROUND(SUM(V244)/1,0) AS  Val244
     , ROUND(SUM(V245)/1,0) AS  Val245
     , ROUND(SUM(V246)/1,0) AS  Val246
     , ROUND(SUM(V247)/1,0) AS  Val247
     , ROUND(SUM(V248)/1,0) AS  Val248
     , ROUND(SUM(V249)/1,0) AS  Val249
     , ROUND(SUM(V250)/1,0) AS  Val250
     , ROUND(SUM(V251)/1,0) AS  Val251
     , ROUND(SUM(V252)/1,0) AS  Val252
     , ROUND(SUM(V253)/1,0) AS  Val253
     , ROUND(SUM(V254)/1,0) AS  Val254
     , ROUND(SUM(V255)/1,0) AS  Val255
     , ROUND(SUM(V256)/1,0) AS  Val256
     , ROUND(SUM(V257)/1,0) AS  Val257
     , ROUND(SUM(V258)/1,0) AS  Val258
     , ROUND(SUM(V259)/1,0) AS  Val259
     , ROUND(SUM(V260)/1,0) AS  Val260
     , ROUND(SUM(V261)/1,0) AS  Val261
     , ROUND(SUM(V262)/1,0) AS  Val262
     , ROUND(SUM(V263)/1,0) AS  Val263
     , ROUND(SUM(V264)/1,0) AS  Val264
     , ROUND(SUM(V265)/1,0) AS  Val265
     , ROUND(SUM(V266)/1,0) AS  Val266
     , ROUND(SUM(V267)/1,0) AS  Val267
     , ROUND(SUM(V268)/1,0) AS  Val268
     , ROUND(SUM(V269)/1,0) AS  Val269
     , ROUND(SUM(V270)/1,0) AS  Val270
     , ROUND(SUM(V271)/1,0) AS  Val271
     , ROUND(SUM(V272)/1,0) AS  Val272
     , ROUND(SUM(V273)/1,0) AS  Val273
     , ROUND(SUM(V274)/1,0) AS  Val274
     , ROUND(SUM(V275)/1,0) AS  Val275
     , TRUNC(SUM(SHP_QTY)/1,0) AS SHP_QTY 
     , ROUND(DECODE(TO_CHAR(TO_DATE('20200411','YYYYMMDD'),'D'), 2, SUM(NVL(PLN.PLAN_W1,0)), 3, SUM(NVL(PLN.PLAN_W1,0)), SUM(NVL(PLN.PLAN_W2,0)) + SUM(NVL(SHP1.ASSY_MONDAY,0)))/1,0) AS PLAN_W1
     , ROUND(SUM(NVL(SHP1.ASSY_WEEK,0))/1,0)
     , ROUND((DECODE(TO_CHAR(TO_DATE('20200411','YYYYMMDD'),'D'), 2, SUM(NVL(PLN.PLAN_W1,0)), 3, SUM(NVL(PLN.PLAN_W1,0)), SUM(NVL(PLN.PLAN_W2,0)) + SUM(NVL(SHP1.ASSY_MONDAY,0)))) - SUM(NVL(SHP1.ASSY_WEEK,0))/1,0) AS LACK_WEEK
  FROM MWIPMATDEF MAT 
     , ( 
        SELECT A.MAT_ID, MAX(B.EMC_1) AS EMC_1 
             , SUM(QTY_1) AS TOTAL 
             , MAX((SELECT ATTR_VALUE FROM MATRNAMSTS WHERE FACTORY = 'HMVA2' AND ATTR_TYPE = 'MAT_ETC' AND ATTR_NAME = DECODE(LOT_CMF_2, 'SE', 'SEC_VERSION', 'HX', 'HX_VERSION') AND ATTR_KEY = A.MAT_ID)) AS VERSION 
             , SUM(DECODE(A.OPER, 'A0000', QTY_1,0)) V0
             , SUM(DECODE(A.OPER, 'A0005', QTY_1,0)) V1
             , SUM(DECODE(A.OPER, 'A000N', QTY_1,0)) V2
             , SUM(DECODE(A.OPER, 'A0010', QTY_1,0)) V3
             , SUM(DECODE(A.OPER, 'A0012', QTY_1,0)) V4
             , SUM(DECODE(A.OPER, 'A0013', QTY_1,0)) V5
             , SUM(DECODE(A.OPER, 'A0015', QTY_1,0)) V6
             , SUM(DECODE(A.OPER, 'A0020', QTY_1,0)) V7
             , SUM(DECODE(A.OPER, 'A0055', QTY_1,0)) V8
             , SUM(DECODE(A.OPER, 'A0023', QTY_1,0)) V9
             , SUM(DECODE(A.OPER, 'A0025', QTY_1,0)) V10
             , SUM(DECODE(A.OPER, 'A0030', QTY_1,0)) V11
             , SUM(DECODE(A.OPER, 'A0190', QTY_1,0)) V12
             , SUM(DECODE(A.OPER, 'A0033', QTY_1,0)) V13
             , SUM(DECODE(A.OPER, 'A0040', QTY_1,0)) V14
             , SUM(DECODE(A.OPER, 'A0041', QTY_1,0)) V15
             , SUM(DECODE(A.OPER, 'A0042', QTY_1,0)) V16
             , SUM(DECODE(A.OPER, 'A0045', QTY_1,0)) V17
             , SUM(DECODE(A.OPER, 'A0050', QTY_1,0)) V18
             , SUM(DECODE(A.OPER, 'A0060', QTY_1,0)) V19
             , SUM(DECODE(A.OPER, 'A0070', QTY_1,0)) V20
             , SUM(DECODE(A.OPER, 'A0080', QTY_1,0)) V21
             , SUM(DECODE(A.OPER, 'A0090', QTY_1,0)) V22
             , SUM(DECODE(A.OPER, 'A0095', QTY_1,0)) V23
             , SUM(DECODE(A.OPER, 'A0110', QTY_1,0)) V24
             , SUM(DECODE(A.OPER, 'A0120', QTY_1,0)) V25
             , SUM(DECODE(A.OPER, 'A0130', QTY_1,0)) V26
             , SUM(DECODE(A.OPER, 'A0140', QTY_1,0)) V27
             , SUM(DECODE(A.OPER, 'A0160', QTY_1,0)) V28
             , SUM(DECODE(A.OPER, 'A0161', QTY_1,0)) V29
             , SUM(DECODE(A.OPER, 'A0165', QTY_1,0)) V30
             , SUM(DECODE(A.OPER, 'A0065', QTY_1,0)) V31
             , SUM(DECODE(A.OPER, 'A0100', QTY_1,0)) V32
             , SUM(DECODE(A.OPER, 'A0150', QTY_1,0)) V33
             , SUM(DECODE(A.OPER, 'A0175', QTY_1,0)) V34
             , SUM(DECODE(A.OPER, 'A0176', QTY_1,0)) V35
             , SUM(DECODE(A.OPER, 'A0170', QTY_1,0)) V36
             , SUM(DECODE(A.OPER, 'A0180', QTY_1,0)) V37
             , SUM(DECODE(A.OPER, 'A0200', QTY_1,0)) V38
             , SUM(DECODE(A.OPER, 'A0201', QTY_1,0)) V39
             , SUM(DECODE(A.OPER, 'A0202', QTY_1,0)) V40
             , SUM(DECODE(A.OPER, 'A0210', QTY_1,0)) V41
             , SUM(DECODE(A.OPER, 'A0215', QTY_1,0)) V42
             , SUM(DECODE(A.OPER, 'A0220', QTY_1,0)) V43
             , SUM(DECODE(A.OPER, 'A0230', QTY_1,0)) V44
             , SUM(DECODE(A.OPER, 'A0300', QTY_1,0)) V45
             , SUM(DECODE(A.OPER, 'A0250', QTY_1,0)) V46
             , SUM(DECODE(A.OPER, 'A0305', QTY_1,0)) V47
             , SUM(DECODE(A.OPER, 'A0240', QTY_1,0)) V48
             , SUM(DECODE(A.OPER, 'A0260', QTY_1,0)) V49
             , SUM(DECODE(A.OPER, 'A0270', QTY_1,0)) V50
             , SUM(DECODE(A.OPER, 'A0290', QTY_1,0)) V51
             , SUM(DECODE(A.OPER, 'A0295', QTY_1,0)) V52
             , SUM(DECODE(A.OPER, 'A0280', QTY_1,0)) V53
             , SUM(DECODE(A.OPER, 'A0306', QTY_1,0)) V54
             , SUM(DECODE(A.OPER, 'A0307', QTY_1,0)) V55
             , SUM(DECODE(A.OPER, 'A0308', QTY_1,0)) V56
             , SUM(DECODE(A.OPER, 'A0310', QTY_1,0)) V57
             , SUM(DECODE(A.OPER, 'A0320', QTY_1,0)) V58
             , SUM(DECODE(A.OPER, 'A0330', QTY_1,0)) V59
             , SUM(DECODE(A.OPER, 'A1280', QTY_1,0)) V60
             , SUM(DECODE(A.OPER, 'A0333', QTY_1,0)) V61
             , SUM(DECODE(A.OPER, 'A0335', QTY_1,0)) V62
             , SUM(DECODE(A.OPER, 'A0337', QTY_1,0)) V63
             , SUM(DECODE(A.OPER, 'A0372', QTY_1,0)) V64
             , SUM(DECODE(A.OPER, 'A0395', QTY_1,0)) V65
             , SUM(DECODE(A.OPER, 'A0397', QTY_1,0)) V66
             , SUM(DECODE(A.OPER, 'A0340', QTY_1,0)) V67
             , SUM(DECODE(A.OPER, 'A0345', QTY_1,0)) V68
             , SUM(DECODE(A.OPER, 'A0350', QTY_1,0)) V69
             , SUM(DECODE(A.OPER, 'A0360', QTY_1,0)) V70
             , SUM(DECODE(A.OPER, 'A0370', QTY_1,0)) V71
             , SUM(DECODE(A.OPER, 'A0375', QTY_1,0)) V72
             , SUM(DECODE(A.OPER, 'A0380', QTY_1,0)) V73
             , SUM(DECODE(A.OPER, 'A0381', QTY_1,0)) V74
             , SUM(DECODE(A.OPER, 'A0382', QTY_1,0)) V75
             , SUM(DECODE(A.OPER, 'A0383', QTY_1,0)) V76
             , SUM(DECODE(A.OPER, 'A0385', QTY_1,0)) V77
             , SUM(DECODE(A.OPER, 'A0391', QTY_1,0)) V78
             , SUM(DECODE(A.OPER, 'A0399', QTY_1,0)) V79
             , SUM(DECODE(A.OPER, 'A0390', QTY_1,0)) V80
             , SUM(DECODE(A.OPER, 'A0400', QTY_1,0)) V81
             , SUM(DECODE(A.OPER, 'A0401', QTY_1,0)) V82
             , SUM(DECODE(A.OPER, 'A0500', QTY_1,0)) V83
             , SUM(DECODE(A.OPER, 'A0530', QTY_1,0)) V84
             , SUM(DECODE(A.OPER, 'A0531', QTY_1,0)) V85
             , SUM(DECODE(A.OPER, 'A0501', QTY_1,0)) V86
             , SUM(DECODE(A.OPER, 'A0540', QTY_1,0)) V87
             , SUM(DECODE(A.OPER, 'A0550', QTY_1,0)) V88
             , SUM(DECODE(A.OPER, 'A0600', QTY_1,0)) V89
             , SUM(DECODE(A.OPER, 'A0620', QTY_1,0)) V90
             , SUM(DECODE(A.OPER, 'A0660', QTY_1,0)) V91
             , SUM(DECODE(A.OPER, 'A0630', QTY_1,0)) V92
             , SUM(DECODE(A.OPER, 'A0650', QTY_1,0)) V93
             , SUM(DECODE(A.OPER, 'A0670', QTY_1,0)) V94
             , SUM(DECODE(A.OPER, 'A0720', QTY_1,0)) V95
             , SUM(DECODE(A.OPER, 'A0700', QTY_1,0)) V96
             , SUM(DECODE(A.OPER, 'A0339', QTY_1,0)) V97
             , SUM(DECODE(A.OPER, 'A0541', QTY_1,0)) V98
             , SUM(DECODE(A.OPER, 'A0551', QTY_1,0)) V99
             , SUM(DECODE(A.OPER, 'A0561', QTY_1,0)) V100
             , SUM(DECODE(A.OPER, 'A0601', QTY_1,0)) V101
             , SUM(DECODE(A.OPER, 'A0710', QTY_1,0)) V102
             , SUM(DECODE(A.OPER, 'A0800', QTY_1,0)) V103
             , SUM(DECODE(A.OPER, 'A0402', QTY_1,0)) V104
             , SUM(DECODE(A.OPER, 'A0502', QTY_1,0)) V105
             , SUM(DECODE(A.OPER, 'A0532', QTY_1,0)) V106
             , SUM(DECODE(A.OPER, 'A0801', QTY_1,0)) V107
             , SUM(DECODE(A.OPER, 'A0542', QTY_1,0)) V108
             , SUM(DECODE(A.OPER, 'A0552', QTY_1,0)) V109
             , SUM(DECODE(A.OPER, 'A0562', QTY_1,0)) V110
             , SUM(DECODE(A.OPER, 'A0602', QTY_1,0)) V111
             , SUM(DECODE(A.OPER, 'A0711', QTY_1,0)) V112
             , SUM(DECODE(A.OPER, 'A0802', QTY_1,0)) V113
             , SUM(DECODE(A.OPER, 'A0403', QTY_1,0)) V114
             , SUM(DECODE(A.OPER, 'A0503', QTY_1,0)) V115
             , SUM(DECODE(A.OPER, 'A0533', QTY_1,0)) V116
             , SUM(DECODE(A.OPER, 'A0543', QTY_1,0)) V117
             , SUM(DECODE(A.OPER, 'A0553', QTY_1,0)) V118
             , SUM(DECODE(A.OPER, 'A0563', QTY_1,0)) V119
             , SUM(DECODE(A.OPER, 'A0603', QTY_1,0)) V120
             , SUM(DECODE(A.OPER, 'A0712', QTY_1,0)) V121
             , SUM(DECODE(A.OPER, 'A0713', QTY_1,0)) V122
             , SUM(DECODE(A.OPER, 'A0803', QTY_1,0)) V123
             , SUM(DECODE(A.OPER, 'A0404', QTY_1,0)) V124
             , SUM(DECODE(A.OPER, 'A0504', QTY_1,0)) V125
             , SUM(DECODE(A.OPER, 'A0534', QTY_1,0)) V126
             , SUM(DECODE(A.OPER, 'A0544', QTY_1,0)) V127
             , SUM(DECODE(A.OPER, 'A0554', QTY_1,0)) V128
             , SUM(DECODE(A.OPER, 'A0564', QTY_1,0)) V129
             , SUM(DECODE(A.OPER, 'A0604', QTY_1,0)) V130
             , SUM(DECODE(A.OPER, 'A0714', QTY_1,0)) V131
             , SUM(DECODE(A.OPER, 'A0804', QTY_1,0)) V132
             , SUM(DECODE(A.OPER, 'A0405', QTY_1,0)) V133
             , SUM(DECODE(A.OPER, 'A0505', QTY_1,0)) V134
             , SUM(DECODE(A.OPER, 'A0535', QTY_1,0)) V135
             , SUM(DECODE(A.OPER, 'A0545', QTY_1,0)) V136
             , SUM(DECODE(A.OPER, 'A0555', QTY_1,0)) V137
             , SUM(DECODE(A.OPER, 'A0565', QTY_1,0)) V138
             , SUM(DECODE(A.OPER, 'A0605', QTY_1,0)) V139
             , SUM(DECODE(A.OPER, 'A0715', QTY_1,0)) V140
             , SUM(DECODE(A.OPER, 'A0805', QTY_1,0)) V141
             , SUM(DECODE(A.OPER, 'A0406', QTY_1,0)) V142
             , SUM(DECODE(A.OPER, 'A0506', QTY_1,0)) V143
             , SUM(DECODE(A.OPER, 'A0536', QTY_1,0)) V144
             , SUM(DECODE(A.OPER, 'A0546', QTY_1,0)) V145
             , SUM(DECODE(A.OPER, 'A0556', QTY_1,0)) V146
             , SUM(DECODE(A.OPER, 'A0566', QTY_1,0)) V147
             , SUM(DECODE(A.OPER, 'A0606', QTY_1,0)) V148
             , SUM(DECODE(A.OPER, 'A0716', QTY_1,0)) V149
             , SUM(DECODE(A.OPER, 'A0806', QTY_1,0)) V150
             , SUM(DECODE(A.OPER, 'A0407', QTY_1,0)) V151
             , SUM(DECODE(A.OPER, 'A0507', QTY_1,0)) V152
             , SUM(DECODE(A.OPER, 'A0537', QTY_1,0)) V153
             , SUM(DECODE(A.OPER, 'A0547', QTY_1,0)) V154
             , SUM(DECODE(A.OPER, 'A0557', QTY_1,0)) V155
             , SUM(DECODE(A.OPER, 'A0567', QTY_1,0)) V156
             , SUM(DECODE(A.OPER, 'A0607', QTY_1,0)) V157
             , SUM(DECODE(A.OPER, 'A0717', QTY_1,0)) V158
             , SUM(DECODE(A.OPER, 'A0807', QTY_1,0)) V159
             , SUM(DECODE(A.OPER, 'A0408', QTY_1,0)) V160
             , SUM(DECODE(A.OPER, 'A0508', QTY_1,0)) V161
             , SUM(DECODE(A.OPER, 'A0538', QTY_1,0)) V162
             , SUM(DECODE(A.OPER, 'A0558', QTY_1,0)) V163
             , SUM(DECODE(A.OPER, 'A0568', QTY_1,0)) V164
             , SUM(DECODE(A.OPER, 'A0608', QTY_1,0)) V165
             , SUM(DECODE(A.OPER, 'A0808', QTY_1,0)) V166
             , SUM(DECODE(A.OPER, 'A0409', QTY_1,0)) V167
             , SUM(DECODE(A.OPER, 'A0509', QTY_1,0)) V168
             , SUM(DECODE(A.OPER, 'A0539', QTY_1,0)) V169
             , SUM(DECODE(A.OPER, 'A0559', QTY_1,0)) V170
             , SUM(DECODE(A.OPER, 'A0569', QTY_1,0)) V171
             , SUM(DECODE(A.OPER, 'A0609', QTY_1,0)) V172
             , SUM(DECODE(A.OPER, 'A0809', QTY_1,0)) V173
             , SUM(DECODE(A.OPER, 'A080A', QTY_1,0)) V174
             , SUM(DECODE(A.OPER, 'A0890', QTY_1,0)) V175
             , SUM(DECODE(A.OPER, 'A0900', QTY_1,0)) V176
             , SUM(DECODE(A.OPER, 'A0910', QTY_1,0)) V177
             , SUM(DECODE(A.OPER, 'A0920', QTY_1,0)) V178
             , SUM(DECODE(A.OPER, 'A0930', QTY_1,0)) V179
             , SUM(DECODE(A.OPER, 'A0935', QTY_1,0)) V180
             , SUM(DECODE(A.OPER, 'A040A', QTY_1,0)) V181
             , SUM(DECODE(A.OPER, 'A0950', QTY_1,0)) V182
             , SUM(DECODE(A.OPER, 'A053A', QTY_1,0)) V183
             , SUM(DECODE(A.OPER, 'A0970', QTY_1,0)) V184
             , SUM(DECODE(A.OPER, 'A0940', QTY_1,0)) V185
             , SUM(DECODE(A.OPER, 'A0980', QTY_1,0)) V186
             , SUM(DECODE(A.OPER, 'A1000', QTY_1,0)) V187
             , SUM(DECODE(A.OPER, 'A055A', QTY_1,0)) V188
             , SUM(DECODE(A.OPER, 'A060A', QTY_1,0)) V189
             , SUM(DECODE(A.OPER, 'A1040', QTY_1,0)) V190
             , SUM(DECODE(A.OPER, 'A1070', QTY_1,0)) V191
             , SUM(DECODE(A.OPER, 'A1020', QTY_1,0)) V192
             , SUM(DECODE(A.OPER, 'A1100', QTY_1,0)) V193
             , SUM(DECODE(A.OPER, 'A1110', QTY_1,0)) V194
             , SUM(DECODE(A.OPER, 'A1120', QTY_1,0)) V195
             , SUM(DECODE(A.OPER, 'A1130', QTY_1,0)) V196
             , SUM(DECODE(A.OPER, 'A1140', QTY_1,0)) V197
             , SUM(DECODE(A.OPER, 'A1150', QTY_1,0)) V198
             , SUM(DECODE(A.OPER, 'A1600', QTY_1,0)) V199
             , SUM(DECODE(A.OPER, 'A1650', QTY_1,0)) V200
             , SUM(DECODE(A.OPER, 'A1170', QTY_1,0)) V201
             , SUM(DECODE(A.OPER, 'A1180', QTY_1,0)) V202
             , SUM(DECODE(A.OPER, 'A1200', QTY_1,0)) V203
             , SUM(DECODE(A.OPER, 'A1230', QTY_1,0)) V204
             , SUM(DECODE(A.OPER, 'A1240', QTY_1,0)) V205
             , SUM(DECODE(A.OPER, 'A1250', QTY_1,0)) V206
             , SUM(DECODE(A.OPER, 'A1260', QTY_1,0)) V207
             , SUM(DECODE(A.OPER, 'A1270', QTY_1,0)) V208
             , SUM(DECODE(A.OPER, 'A1300', QTY_1,0)) V209
             , SUM(DECODE(A.OPER, 'A1350', QTY_1,0)) V210
             , SUM(DECODE(A.OPER, 'A1370', QTY_1,0)) V211
             , SUM(DECODE(A.OPER, 'A1380', QTY_1,0)) V212
             , SUM(DECODE(A.OPER, 'A1050', QTY_1,0)) V213
             , SUM(DECODE(A.OPER, 'A1420', QTY_1,0)) V214
             , SUM(DECODE(A.OPER, 'A1440', QTY_1,0)) V215
             , SUM(DECODE(A.OPER, 'A1450', QTY_1,0)) V216
             , SUM(DECODE(A.OPER, 'A1821', QTY_1,0)) V217
             , SUM(DECODE(A.OPER, 'A1460', QTY_1,0)) V218
             , SUM(DECODE(A.OPER, 'A1470', QTY_1,0)) V219
             , SUM(DECODE(A.OPER, 'A1500', QTY_1,0)) V220
             , SUM(DECODE(A.OPER, 'A1550', QTY_1,0)) V221
             , SUM(DECODE(A.OPER, 'A1610', QTY_1,0)) V222
             , SUM(DECODE(A.OPER, 'A1560', QTY_1,0)) V223
             , SUM(DECODE(A.OPER, 'A1720', QTY_1,0)) V224
             , SUM(DECODE(A.OPER, 'A1730', QTY_1,0)) V225
             , SUM(DECODE(A.OPER, 'A1740', QTY_1,0)) V226
             , SUM(DECODE(A.OPER, 'A1750', QTY_1,0)) V227
             , SUM(DECODE(A.OPER, 'A1755', QTY_1,0)) V228
             , SUM(DECODE(A.OPER, 'A1760', QTY_1,0)) V229
             , SUM(DECODE(A.OPER, 'A1765', QTY_1,0)) V230
             , SUM(DECODE(A.OPER, 'A1766', QTY_1,0)) V231
             , SUM(DECODE(A.OPER, 'A1763', QTY_1,0)) V232
             , SUM(DECODE(A.OPER, 'A1770', QTY_1,0)) V233
             , SUM(DECODE(A.OPER, 'A1780', QTY_1,0)) V234
             , SUM(DECODE(A.OPER, 'A1790', QTY_1,0)) V235
             , SUM(DECODE(A.OPER, 'A1795', QTY_1,0)) V236
             , SUM(DECODE(A.OPER, 'A1860', QTY_1,0)) V237
             , SUM(DECODE(A.OPER, 'A1850', QTY_1,0)) V238
             , SUM(DECODE(A.OPER, 'A1390', QTY_1,0)) V239
             , SUM(DECODE(A.OPER, 'A1800', QTY_1,0)) V240
             , SUM(DECODE(A.OPER, 'A1805', QTY_1,0)) V241
             , SUM(DECODE(A.OPER, 'A1810', QTY_1,0)) V242
             , SUM(DECODE(A.OPER, 'A1811', QTY_1,0)) V243
             , SUM(DECODE(A.OPER, 'A1812', QTY_1,0)) V244
             , SUM(DECODE(A.OPER, 'A1816', QTY_1,0)) V245
             , SUM(DECODE(A.OPER, 'A1820', QTY_1,0)) V246
             , SUM(DECODE(A.OPER, 'A1825', QTY_1,0)) V247
             , SUM(DECODE(A.OPER, 'A1826', QTY_1,0)) V248
             , SUM(DECODE(A.OPER, 'A1920', QTY_1,0)) V249
             , SUM(DECODE(A.OPER, 'A1960', QTY_1,0)) V250
             , SUM(DECODE(A.OPER, 'A1815', QTY_1,0)) V251
             , SUM(DECODE(A.OPER, 'A1830', QTY_1,0)) V252
             , SUM(DECODE(A.OPER, 'A1710', QTY_1,0)) V253
             , SUM(DECODE(A.OPER, 'A1840', QTY_1,0)) V254
             , SUM(DECODE(A.OPER, 'A1900', QTY_1,0)) V255
             , SUM(DECODE(A.OPER, 'A1910', QTY_1,0)) V256
             , SUM(DECODE(A.OPER, 'A1950', QTY_1,0)) V257
             , SUM(DECODE(A.OPER, 'A2000', QTY_1,0)) V258
             , SUM(DECODE(A.OPER, 'A2010', QTY_1,0)) V259
             , SUM(DECODE(A.OPER, 'A2020', QTY_1,0)) V260
             , SUM(DECODE(A.OPER, 'A2025', QTY_1,0)) V261
             , SUM(DECODE(A.OPER, 'A1819', QTY_1,0)) V262
             , SUM(DECODE(A.OPER, 'A2030', QTY_1,0)) V263
             , SUM(DECODE(A.OPER, 'A2040', QTY_1,0)) V264
             , SUM(DECODE(A.OPER, 'A2041', QTY_1,0)) V265
             , SUM(DECODE(A.OPER, 'A2042', QTY_1,0)) V266
             , SUM(DECODE(A.OPER, 'A2070', QTY_1,0)) V267
             , SUM(DECODE(A.OPER, 'A2050', QTY_1,0)) V268
             , SUM(DECODE(A.OPER, 'A2150', QTY_1,0)) V269
             , SUM(DECODE(A.OPER, 'A2200', QTY_1,0)) V270
             , SUM(DECODE(A.OPER, 'A2100', QTY_1,0)) V271
             , SUM(DECODE(A.OPER, 'A2300', QTY_1,0)) V272
             , SUM(DECODE(A.OPER, 'A2350', QTY_1,0)) V273
             , SUM(DECODE(A.OPER, 'AZ009', QTY_1,0)) V274
             , SUM(DECODE(A.OPER, 'AZ010', QTY_1,0)) V275
          FROM RWIPLOTSTS_BOH A, CLOTCRDDAT@RPTTOMES B 
         WHERE 1=1 
           AND A.CUTOFF_DT = '2020041122' 
           AND A.FACTORY = B.FACTORY(+) 
           AND A.MAT_ID = B.MAT_ID(+) 
           AND A.LOT_DEL_FLAG = ' ' 
           AND A.LOT_TYPE = 'W' 
           AND A.MAT_ID LIKE 'FP%' 
           AND A.FACTORY = 'HMVA2' 
           AND A.OPER BETWEEN 'A0000' AND 'AZ010' 
         GROUP BY A.MAT_ID 
       ) WIP 
     , ( 
        SELECT MAT_ID 
             , SUM(S1_FAC_OUT_QTY_1+S2_FAC_OUT_QTY_1+S3_FAC_OUT_QTY_1) AS SHP_QTY  
          FROM RSUMFACMOV
         WHERE CM_KEY_1 = 'HMVA2' 
           AND MAT_ID LIKE 'FP%' 
           AND WORK_DATE = '20200411'
           AND FACTORY NOT IN ('RETURN')
           AND LOT_TYPE = 'W'
         GROUP BY MAT_ID 
       ) SHP 
     , ( 
        SELECT MAT_ID 
             , SUM(DECODE(WORK_DATE, '20200406', NVL(S1_FAC_OUT_QTY_1 + S2_FAC_OUT_QTY_1 + S3_FAC_OUT_QTY_1 + S4_FAC_OUT_QTY_1, 0), 0)) AS ASSY_MONDAY  
             , SUM(NVL(S1_FAC_OUT_QTY_1 + S2_FAC_OUT_QTY_1 + S3_FAC_OUT_QTY_1 + S4_FAC_OUT_QTY_1, 0)) AS ASSY_WEEK 
          FROM RSUMFACMOV 
         WHERE CM_KEY_1 = 'HMVA2' 
           AND LOT_TYPE = 'W'
           AND CM_KEY_2 = 'PROD' 
           AND CM_KEY_3 LIKE 'P%' 
           AND MAT_ID LIKE 'SES%' 
           AND WORK_DATE BETWEEN '20200406' AND '20200412'
         GROUP BY MAT_ID 
       ) SHP1 
     , ( 
        SELECT MAT_ID 
             , SUM(PLAN_QTY) PLAN_W1 
             , SUM(DECODE(PLAN_DAY, '20200406', 0, PLAN_QTY)) AS PLAN_W2 
          FROM ( 
                SELECT * 
                  FROM CWIPPLNDAY 
                 WHERE 1=1 
                   AND FACTORY = 'HMVA2' 
                   AND PLAN_DAY BETWEEN '20200406' AND '20200412'
                   AND IN_OUT_FLAG = 'OUT'
                   AND CLASS = 'ASSY'
               ) B
         GROUP BY MAT_ID 
       ) PLN 
 WHERE 1=1 
   AND MAT.MAT_ID = WIP.MAT_ID(+) 
   AND MAT.MAT_ID = SHP.MAT_ID(+) 
   AND MAT.MAT_ID = SHP1.MAT_ID(+) 
   AND MAT.MAT_ID = PLN.MAT_ID(+) 
   AND MAT.FACTORY = 'HMVA2' 
   AND MAT.MAT_ID LIKE 'FP%' 
 GROUP BY MAT.MAT_GRP_1,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT.MAT_CMF_10,  ' ', MAT.MAT_ID,  ' ',  ' '
HAVING (NVL(SUM(TOTAL),0) + NVL(SUM(SHP_QTY),0)  + NVL(SUM(ASSY_WEEK),0) + NVL(SUM(PLAN_W1),0)) > 0     
 ORDER BY MAT.MAT_GRP_1,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT.MAT_CMF_10,  ' ', MAT.MAT_ID,  ' ',  ' ' 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE) AS This_Week_First_Day 
     , MAX(SYS_DATE) AS This_Week_Last_Day
  FROM MWIPCALDEF
 WHERE 1=1 
   AND CALENDAR_ID = 'SE'
   AND (PLAN_YEAR,PLAN_WEEK) IN (
                                 SELECT PLAN_YEAR,PLAN_WEEK 
                                   FROM MWIPCALDEF 
                                  WHERE 1=1
                                    AND CALENDAR_ID = 'SE'
                                    AND SYS_DATE = '20200412')

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT NVL((SELECT DATA_1 FROM MGCMTBLDAT WHERE TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = MAT.MAT_GRP_1 AND ROWNUM=1), '-') AS CUSTOMER,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT.MAT_CMF_10 AS PIN_TYPE,  ' ', MAT.MAT_ID AS PRODUCT,  ' ',  ' ' 
     , ROUND(SUM(TOTAL)/1,0) AS TOTAL 
     , ROUND(SUM(V0)/1,0) AS  Val0
     , ROUND(SUM(V1)/1,0) AS  Val1
     , ROUND(SUM(V2)/1,0) AS  Val2
     , ROUND(SUM(V3)/1,0) AS  Val3
     , ROUND(SUM(V4)/1,0) AS  Val4
     , ROUND(SUM(V5)/1,0) AS  Val5
     , ROUND(SUM(V6)/1,0) AS  Val6
     , ROUND(SUM(V7)/1,0) AS  Val7
     , ROUND(SUM(V8)/1,0) AS  Val8
     , ROUND(SUM(V9)/1,0) AS  Val9
     , ROUND(SUM(V10)/1,0) AS  Val10
     , ROUND(SUM(V11)/1,0) AS  Val11
     , ROUND(SUM(V12)/1,0) AS  Val12
     , ROUND(SUM(V13)/1,0) AS  Val13
     , ROUND(SUM(V14)/1,0) AS  Val14
     , ROUND(SUM(V15)/1,0) AS  Val15
     , ROUND(SUM(V16)/1,0) AS  Val16
     , ROUND(SUM(V17)/1,0) AS  Val17
     , ROUND(SUM(V18)/1,0) AS  Val18
     , ROUND(SUM(V19)/1,0) AS  Val19
     , ROUND(SUM(V20)/1,0) AS  Val20
     , ROUND(SUM(V21)/1,0) AS  Val21
     , ROUND(SUM(V22)/1,0) AS  Val22
     , ROUND(SUM(V23)/1,0) AS  Val23
     , ROUND(SUM(V24)/1,0) AS  Val24
     , ROUND(SUM(V25)/1,0) AS  Val25
     , ROUND(SUM(V26)/1,0) AS  Val26
     , ROUND(SUM(V27)/1,0) AS  Val27
     , ROUND(SUM(V28)/1,0) AS  Val28
     , ROUND(SUM(V29)/1,0) AS  Val29
     , ROUND(SUM(V30)/1,0) AS  Val30
     , ROUND(SUM(V31)/1,0) AS  Val31
     , ROUND(SUM(V32)/1,0) AS  Val32
     , ROUND(SUM(V33)/1,0) AS  Val33
     , ROUND(SUM(V34)/1,0) AS  Val34
     , ROUND(SUM(V35)/1,0) AS  Val35
     , ROUND(SUM(V36)/1,0) AS  Val36
     , ROUND(SUM(V37)/1,0) AS  Val37
     , ROUND(SUM(V38)/1,0) AS  Val38
     , ROUND(SUM(V39)/1,0) AS  Val39
     , ROUND(SUM(V40)/1,0) AS  Val40
     , ROUND(SUM(V41)/1,0) AS  Val41
     , ROUND(SUM(V42)/1,0) AS  Val42
     , ROUND(SUM(V43)/1,0) AS  Val43
     , ROUND(SUM(V44)/1,0) AS  Val44
     , ROUND(SUM(V45)/1,0) AS  Val45
     , ROUND(SUM(V46)/1,0) AS  Val46
     , ROUND(SUM(V47)/1,0) AS  Val47
     , ROUND(SUM(V48)/1,0) AS  Val48
     , ROUND(SUM(V49)/1,0) AS  Val49
     , ROUND(SUM(V50)/1,0) AS  Val50
     , ROUND(SUM(V51)/1,0) AS  Val51
     , ROUND(SUM(V52)/1,0) AS  Val52
     , ROUND(SUM(V53)/1,0) AS  Val53
     , ROUND(SUM(V54)/1,0) AS  Val54
     , ROUND(SUM(V55)/1,0) AS  Val55
     , ROUND(SUM(V56)/1,0) AS  Val56
     , ROUND(SUM(V57)/1,0) AS  Val57
     , ROUND(SUM(V58)/1,0) AS  Val58
     , ROUND(SUM(V59)/1,0) AS  Val59
     , ROUND(SUM(V60)/1,0) AS  Val60
     , ROUND(SUM(V61)/1,0) AS  Val61
     , ROUND(SUM(V62)/1,0) AS  Val62
     , ROUND(SUM(V63)/1,0) AS  Val63
     , ROUND(SUM(V64)/1,0) AS  Val64
     , ROUND(SUM(V65)/1,0) AS  Val65
     , ROUND(SUM(V66)/1,0) AS  Val66
     , ROUND(SUM(V67)/1,0) AS  Val67
     , ROUND(SUM(V68)/1,0) AS  Val68
     , ROUND(SUM(V69)/1,0) AS  Val69
     , ROUND(SUM(V70)/1,0) AS  Val70
     , ROUND(SUM(V71)/1,0) AS  Val71
     , ROUND(SUM(V72)/1,0) AS  Val72
     , ROUND(SUM(V73)/1,0) AS  Val73
     , ROUND(SUM(V74)/1,0) AS  Val74
     , ROUND(SUM(V75)/1,0) AS  Val75
     , ROUND(SUM(V76)/1,0) AS  Val76
     , ROUND(SUM(V77)/1,0) AS  Val77
     , ROUND(SUM(V78)/1,0) AS  Val78
     , ROUND(SUM(V79)/1,0) AS  Val79
     , ROUND(SUM(V80)/1,0) AS  Val80
     , ROUND(SUM(V81)/1,0) AS  Val81
     , ROUND(SUM(V82)/1,0) AS  Val82
     , ROUND(SUM(V83)/1,0) AS  Val83
     , ROUND(SUM(V84)/1,0) AS  Val84
     , ROUND(SUM(V85)/1,0) AS  Val85
     , ROUND(SUM(V86)/1,0) AS  Val86
     , ROUND(SUM(V87)/1,0) AS  Val87
     , ROUND(SUM(V88)/1,0) AS  Val88
     , ROUND(SUM(V89)/1,0) AS  Val89
     , ROUND(SUM(V90)/1,0) AS  Val90
     , ROUND(SUM(V91)/1,0) AS  Val91
     , ROUND(SUM(V92)/1,0) AS  Val92
     , ROUND(SUM(V93)/1,0) AS  Val93
     , ROUND(SUM(V94)/1,0) AS  Val94
     , ROUND(SUM(V95)/1,0) AS  Val95
     , ROUND(SUM(V96)/1,0) AS  Val96
     , ROUND(SUM(V97)/1,0) AS  Val97
     , ROUND(SUM(V98)/1,0) AS  Val98
     , ROUND(SUM(V99)/1,0) AS  Val99
     , ROUND(SUM(V100)/1,0) AS  Val100
     , ROUND(SUM(V101)/1,0) AS  Val101
     , ROUND(SUM(V102)/1,0) AS  Val102
     , ROUND(SUM(V103)/1,0) AS  Val103
     , ROUND(SUM(V104)/1,0) AS  Val104
     , ROUND(SUM(V105)/1,0) AS  Val105
     , ROUND(SUM(V106)/1,0) AS  Val106
     , ROUND(SUM(V107)/1,0) AS  Val107
     , ROUND(SUM(V108)/1,0) AS  Val108
     , ROUND(SUM(V109)/1,0) AS  Val109
     , ROUND(SUM(V110)/1,0) AS  Val110
     , ROUND(SUM(V111)/1,0) AS  Val111
     , ROUND(SUM(V112)/1,0) AS  Val112
     , ROUND(SUM(V113)/1,0) AS  Val113
     , ROUND(SUM(V114)/1,0) AS  Val114
     , ROUND(SUM(V115)/1,0) AS  Val115
     , ROUND(SUM(V116)/1,0) AS  Val116
     , ROUND(SUM(V117)/1,0) AS  Val117
     , ROUND(SUM(V118)/1,0) AS  Val118
     , ROUND(SUM(V119)/1,0) AS  Val119
     , ROUND(SUM(V120)/1,0) AS  Val120
     , ROUND(SUM(V121)/1,0) AS  Val121
     , ROUND(SUM(V122)/1,0) AS  Val122
     , ROUND(SUM(V123)/1,0) AS  Val123
     , ROUND(SUM(V124)/1,0) AS  Val124
     , ROUND(SUM(V125)/1,0) AS  Val125
     , ROUND(SUM(V126)/1,0) AS  Val126
     , ROUND(SUM(V127)/1,0) AS  Val127
     , ROUND(SUM(V128)/1,0) AS  Val128
     , ROUND(SUM(V129)/1,0) AS  Val129
     , ROUND(SUM(V130)/1,0) AS  Val130
     , ROUND(SUM(V131)/1,0) AS  Val131
     , ROUND(SUM(V132)/1,0) AS  Val132
     , ROUND(SUM(V133)/1,0) AS  Val133
     , ROUND(SUM(V134)/1,0) AS  Val134
     , ROUND(SUM(V135)/1,0) AS  Val135
     , ROUND(SUM(V136)/1,0) AS  Val136
     , ROUND(SUM(V137)/1,0) AS  Val137
     , ROUND(SUM(V138)/1,0) AS  Val138
     , ROUND(SUM(V139)/1,0) AS  Val139
     , ROUND(SUM(V140)/1,0) AS  Val140
     , ROUND(SUM(V141)/1,0) AS  Val141
     , ROUND(SUM(V142)/1,0) AS  Val142
     , ROUND(SUM(V143)/1,0) AS  Val143
     , ROUND(SUM(V144)/1,0) AS  Val144
     , ROUND(SUM(V145)/1,0) AS  Val145
     , ROUND(SUM(V146)/1,0) AS  Val146
     , ROUND(SUM(V147)/1,0) AS  Val147
     , ROUND(SUM(V148)/1,0) AS  Val148
     , ROUND(SUM(V149)/1,0) AS  Val149
     , ROUND(SUM(V150)/1,0) AS  Val150
     , ROUND(SUM(V151)/1,0) AS  Val151
     , ROUND(SUM(V152)/1,0) AS  Val152
     , ROUND(SUM(V153)/1,0) AS  Val153
     , ROUND(SUM(V154)/1,0) AS  Val154
     , ROUND(SUM(V155)/1,0) AS  Val155
     , ROUND(SUM(V156)/1,0) AS  Val156
     , ROUND(SUM(V157)/1,0) AS  Val157
     , ROUND(SUM(V158)/1,0) AS  Val158
     , ROUND(SUM(V159)/1,0) AS  Val159
     , ROUND(SUM(V160)/1,0) AS  Val160
     , ROUND(SUM(V161)/1,0) AS  Val161
     , ROUND(SUM(V162)/1,0) AS  Val162
     , ROUND(SUM(V163)/1,0) AS  Val163
     , ROUND(SUM(V164)/1,0) AS  Val164
     , ROUND(SUM(V165)/1,0) AS  Val165
     , ROUND(SUM(V166)/1,0) AS  Val166
     , ROUND(SUM(V167)/1,0) AS  Val167
     , ROUND(SUM(V168)/1,0) AS  Val168
     , ROUND(SUM(V169)/1,0) AS  Val169
     , ROUND(SUM(V170)/1,0) AS  Val170
     , ROUND(SUM(V171)/1,0) AS  Val171
     , ROUND(SUM(V172)/1,0) AS  Val172
     , ROUND(SUM(V173)/1,0) AS  Val173
     , ROUND(SUM(V174)/1,0) AS  Val174
     , ROUND(SUM(V175)/1,0) AS  Val175
     , ROUND(SUM(V176)/1,0) AS  Val176
     , ROUND(SUM(V177)/1,0) AS  Val177
     , ROUND(SUM(V178)/1,0) AS  Val178
     , ROUND(SUM(V179)/1,0) AS  Val179
     , ROUND(SUM(V180)/1,0) AS  Val180
     , ROUND(SUM(V181)/1,0) AS  Val181
     , ROUND(SUM(V182)/1,0) AS  Val182
     , ROUND(SUM(V183)/1,0) AS  Val183
     , ROUND(SUM(V184)/1,0) AS  Val184
     , ROUND(SUM(V185)/1,0) AS  Val185
     , ROUND(SUM(V186)/1,0) AS  Val186
     , ROUND(SUM(V187)/1,0) AS  Val187
     , ROUND(SUM(V188)/1,0) AS  Val188
     , ROUND(SUM(V189)/1,0) AS  Val189
     , ROUND(SUM(V190)/1,0) AS  Val190
     , ROUND(SUM(V191)/1,0) AS  Val191
     , ROUND(SUM(V192)/1,0) AS  Val192
     , ROUND(SUM(V193)/1,0) AS  Val193
     , ROUND(SUM(V194)/1,0) AS  Val194
     , ROUND(SUM(V195)/1,0) AS  Val195
     , ROUND(SUM(V196)/1,0) AS  Val196
     , ROUND(SUM(V197)/1,0) AS  Val197
     , ROUND(SUM(V198)/1,0) AS  Val198
     , ROUND(SUM(V199)/1,0) AS  Val199
     , ROUND(SUM(V200)/1,0) AS  Val200
     , ROUND(SUM(V201)/1,0) AS  Val201
     , ROUND(SUM(V202)/1,0) AS  Val202
     , ROUND(SUM(V203)/1,0) AS  Val203
     , ROUND(SUM(V204)/1,0) AS  Val204
     , ROUND(SUM(V205)/1,0) AS  Val205
     , ROUND(SUM(V206)/1,0) AS  Val206
     , ROUND(SUM(V207)/1,0) AS  Val207
     , ROUND(SUM(V208)/1,0) AS  Val208
     , ROUND(SUM(V209)/1,0) AS  Val209
     , ROUND(SUM(V210)/1,0) AS  Val210
     , ROUND(SUM(V211)/1,0) AS  Val211
     , ROUND(SUM(V212)/1,0) AS  Val212
     , ROUND(SUM(V213)/1,0) AS  Val213
     , ROUND(SUM(V214)/1,0) AS  Val214
     , ROUND(SUM(V215)/1,0) AS  Val215
     , ROUND(SUM(V216)/1,0) AS  Val216
     , ROUND(SUM(V217)/1,0) AS  Val217
     , ROUND(SUM(V218)/1,0) AS  Val218
     , ROUND(SUM(V219)/1,0) AS  Val219
     , ROUND(SUM(V220)/1,0) AS  Val220
     , ROUND(SUM(V221)/1,0) AS  Val221
     , ROUND(SUM(V222)/1,0) AS  Val222
     , ROUND(SUM(V223)/1,0) AS  Val223
     , ROUND(SUM(V224)/1,0) AS  Val224
     , ROUND(SUM(V225)/1,0) AS  Val225
     , ROUND(SUM(V226)/1,0) AS  Val226
     , ROUND(SUM(V227)/1,0) AS  Val227
     , ROUND(SUM(V228)/1,0) AS  Val228
     , ROUND(SUM(V229)/1,0) AS  Val229
     , ROUND(SUM(V230)/1,0) AS  Val230
     , ROUND(SUM(V231)/1,0) AS  Val231
     , ROUND(SUM(V232)/1,0) AS  Val232
     , ROUND(SUM(V233)/1,0) AS  Val233
     , ROUND(SUM(V234)/1,0) AS  Val234
     , ROUND(SUM(V235)/1,0) AS  Val235
     , ROUND(SUM(V236)/1,0) AS  Val236
     , ROUND(SUM(V237)/1,0) AS  Val237
     , ROUND(SUM(V238)/1,0) AS  Val238
     , ROUND(SUM(V239)/1,0) AS  Val239
     , ROUND(SUM(V240)/1,0) AS  Val240
     , ROUND(SUM(V241)/1,0) AS  Val241
     , ROUND(SUM(V242)/1,0) AS  Val242
     , ROUND(SUM(V243)/1,0) AS  Val243
     , ROUND(SUM(V244)/1,0) AS  Val244
     , ROUND(SUM(V245)/1,0) AS  Val245
     , ROUND(SUM(V246)/1,0) AS  Val246
     , ROUND(SUM(V247)/1,0) AS  Val247
     , ROUND(SUM(V248)/1,0) AS  Val248
     , ROUND(SUM(V249)/1,0) AS  Val249
     , ROUND(SUM(V250)/1,0) AS  Val250
     , ROUND(SUM(V251)/1,0) AS  Val251
     , ROUND(SUM(V252)/1,0) AS  Val252
     , ROUND(SUM(V253)/1,0) AS  Val253
     , ROUND(SUM(V254)/1,0) AS  Val254
     , ROUND(SUM(V255)/1,0) AS  Val255
     , ROUND(SUM(V256)/1,0) AS  Val256
     , ROUND(SUM(V257)/1,0) AS  Val257
     , ROUND(SUM(V258)/1,0) AS  Val258
     , ROUND(SUM(V259)/1,0) AS  Val259
     , ROUND(SUM(V260)/1,0) AS  Val260
     , ROUND(SUM(V261)/1,0) AS  Val261
     , ROUND(SUM(V262)/1,0) AS  Val262
     , ROUND(SUM(V263)/1,0) AS  Val263
     , ROUND(SUM(V264)/1,0) AS  Val264
     , ROUND(SUM(V265)/1,0) AS  Val265
     , ROUND(SUM(V266)/1,0) AS  Val266
     , ROUND(SUM(V267)/1,0) AS  Val267
     , ROUND(SUM(V268)/1,0) AS  Val268
     , ROUND(SUM(V269)/1,0) AS  Val269
     , ROUND(SUM(V270)/1,0) AS  Val270
     , ROUND(SUM(V271)/1,0) AS  Val271
     , ROUND(SUM(V272)/1,0) AS  Val272
     , ROUND(SUM(V273)/1,0) AS  Val273
     , ROUND(SUM(V274)/1,0) AS  Val274
     , ROUND(SUM(V275)/1,0) AS  Val275
     , TRUNC(SUM(SHP_QTY)/1,0) AS SHP_QTY 
     , ROUND(DECODE(TO_CHAR(TO_DATE('20200412','YYYYMMDD'),'D'), 2, SUM(NVL(PLN.PLAN_W1,0)), 3, SUM(NVL(PLN.PLAN_W1,0)), SUM(NVL(PLN.PLAN_W2,0)) + SUM(NVL(SHP1.ASSY_MONDAY,0)))/1,0) AS PLAN_W1
     , ROUND(SUM(NVL(SHP1.ASSY_WEEK,0))/1,0)
     , ROUND((DECODE(TO_CHAR(TO_DATE('20200412','YYYYMMDD'),'D'), 2, SUM(NVL(PLN.PLAN_W1,0)), 3, SUM(NVL(PLN.PLAN_W1,0)), SUM(NVL(PLN.PLAN_W2,0)) + SUM(NVL(SHP1.ASSY_MONDAY,0)))) - SUM(NVL(SHP1.ASSY_WEEK,0))/1,0) AS LACK_WEEK
  FROM MWIPMATDEF MAT 
     , ( 
        SELECT A.MAT_ID, MAX(B.EMC_1) AS EMC_1 
             , SUM(QTY_1) AS TOTAL 
             , MAX((SELECT ATTR_VALUE FROM MATRNAMSTS WHERE FACTORY = 'HMVA2' AND ATTR_TYPE = 'MAT_ETC' AND ATTR_NAME = DECODE(LOT_CMF_2, 'SE', 'SEC_VERSION', 'HX', 'HX_VERSION') AND ATTR_KEY = A.MAT_ID)) AS VERSION 
             , SUM(DECODE(A.OPER, 'A0000', QTY_1,0)) V0
             , SUM(DECODE(A.OPER, 'A0005', QTY_1,0)) V1
             , SUM(DECODE(A.OPER, 'A000N', QTY_1,0)) V2
             , SUM(DECODE(A.OPER, 'A0010', QTY_1,0)) V3
             , SUM(DECODE(A.OPER, 'A0012', QTY_1,0)) V4
             , SUM(DECODE(A.OPER, 'A0013', QTY_1,0)) V5
             , SUM(DECODE(A.OPER, 'A0015', QTY_1,0)) V6
             , SUM(DECODE(A.OPER, 'A0020', QTY_1,0)) V7
             , SUM(DECODE(A.OPER, 'A0055', QTY_1,0)) V8
             , SUM(DECODE(A.OPER, 'A0023', QTY_1,0)) V9
             , SUM(DECODE(A.OPER, 'A0025', QTY_1,0)) V10
             , SUM(DECODE(A.OPER, 'A0030', QTY_1,0)) V11
             , SUM(DECODE(A.OPER, 'A0190', QTY_1,0)) V12
             , SUM(DECODE(A.OPER, 'A0033', QTY_1,0)) V13
             , SUM(DECODE(A.OPER, 'A0040', QTY_1,0)) V14
             , SUM(DECODE(A.OPER, 'A0041', QTY_1,0)) V15
             , SUM(DECODE(A.OPER, 'A0042', QTY_1,0)) V16
             , SUM(DECODE(A.OPER, 'A0045', QTY_1,0)) V17
             , SUM(DECODE(A.OPER, 'A0050', QTY_1,0)) V18
             , SUM(DECODE(A.OPER, 'A0060', QTY_1,0)) V19
             , SUM(DECODE(A.OPER, 'A0070', QTY_1,0)) V20
             , SUM(DECODE(A.OPER, 'A0080', QTY_1,0)) V21
             , SUM(DECODE(A.OPER, 'A0090', QTY_1,0)) V22
             , SUM(DECODE(A.OPER, 'A0095', QTY_1,0)) V23
             , SUM(DECODE(A.OPER, 'A0110', QTY_1,0)) V24
             , SUM(DECODE(A.OPER, 'A0120', QTY_1,0)) V25
             , SUM(DECODE(A.OPER, 'A0130', QTY_1,0)) V26
             , SUM(DECODE(A.OPER, 'A0140', QTY_1,0)) V27
             , SUM(DECODE(A.OPER, 'A0160', QTY_1,0)) V28
             , SUM(DECODE(A.OPER, 'A0161', QTY_1,0)) V29
             , SUM(DECODE(A.OPER, 'A0165', QTY_1,0)) V30
             , SUM(DECODE(A.OPER, 'A0065', QTY_1,0)) V31
             , SUM(DECODE(A.OPER, 'A0100', QTY_1,0)) V32
             , SUM(DECODE(A.OPER, 'A0150', QTY_1,0)) V33
             , SUM(DECODE(A.OPER, 'A0175', QTY_1,0)) V34
             , SUM(DECODE(A.OPER, 'A0176', QTY_1,0)) V35
             , SUM(DECODE(A.OPER, 'A0170', QTY_1,0)) V36
             , SUM(DECODE(A.OPER, 'A0180', QTY_1,0)) V37
             , SUM(DECODE(A.OPER, 'A0200', QTY_1,0)) V38
             , SUM(DECODE(A.OPER, 'A0201', QTY_1,0)) V39
             , SUM(DECODE(A.OPER, 'A0202', QTY_1,0)) V40
             , SUM(DECODE(A.OPER, 'A0210', QTY_1,0)) V41
             , SUM(DECODE(A.OPER, 'A0215', QTY_1,0)) V42
             , SUM(DECODE(A.OPER, 'A0220', QTY_1,0)) V43
             , SUM(DECODE(A.OPER, 'A0230', QTY_1,0)) V44
             , SUM(DECODE(A.OPER, 'A0300', QTY_1,0)) V45
             , SUM(DECODE(A.OPER, 'A0250', QTY_1,0)) V46
             , SUM(DECODE(A.OPER, 'A0305', QTY_1,0)) V47
             , SUM(DECODE(A.OPER, 'A0240', QTY_1,0)) V48
             , SUM(DECODE(A.OPER, 'A0260', QTY_1,0)) V49
             , SUM(DECODE(A.OPER, 'A0270', QTY_1,0)) V50
             , SUM(DECODE(A.OPER, 'A0290', QTY_1,0)) V51
             , SUM(DECODE(A.OPER, 'A0295', QTY_1,0)) V52
             , SUM(DECODE(A.OPER, 'A0280', QTY_1,0)) V53
             , SUM(DECODE(A.OPER, 'A0306', QTY_1,0)) V54
             , SUM(DECODE(A.OPER, 'A0307', QTY_1,0)) V55
             , SUM(DECODE(A.OPER, 'A0308', QTY_1,0)) V56
             , SUM(DECODE(A.OPER, 'A0310', QTY_1,0)) V57
             , SUM(DECODE(A.OPER, 'A0320', QTY_1,0)) V58
             , SUM(DECODE(A.OPER, 'A0330', QTY_1,0)) V59
             , SUM(DECODE(A.OPER, 'A1280', QTY_1,0)) V60
             , SUM(DECODE(A.OPER, 'A0333', QTY_1,0)) V61
             , SUM(DECODE(A.OPER, 'A0335', QTY_1,0)) V62
             , SUM(DECODE(A.OPER, 'A0337', QTY_1,0)) V63
             , SUM(DECODE(A.OPER, 'A0372', QTY_1,0)) V64
             , SUM(DECODE(A.OPER, 'A0395', QTY_1,0)) V65
             , SUM(DECODE(A.OPER, 'A0397', QTY_1,0)) V66
             , SUM(DECODE(A.OPER, 'A0340', QTY_1,0)) V67
             , SUM(DECODE(A.OPER, 'A0345', QTY_1,0)) V68
             , SUM(DECODE(A.OPER, 'A0350', QTY_1,0)) V69
             , SUM(DECODE(A.OPER, 'A0360', QTY_1,0)) V70
             , SUM(DECODE(A.OPER, 'A0370', QTY_1,0)) V71
             , SUM(DECODE(A.OPER, 'A0375', QTY_1,0)) V72
             , SUM(DECODE(A.OPER, 'A0380', QTY_1,0)) V73
             , SUM(DECODE(A.OPER, 'A0381', QTY_1,0)) V74
             , SUM(DECODE(A.OPER, 'A0382', QTY_1,0)) V75
             , SUM(DECODE(A.OPER, 'A0383', QTY_1,0)) V76
             , SUM(DECODE(A.OPER, 'A0385', QTY_1,0)) V77
             , SUM(DECODE(A.OPER, 'A0391', QTY_1,0)) V78
             , SUM(DECODE(A.OPER, 'A0399', QTY_1,0)) V79
             , SUM(DECODE(A.OPER, 'A0390', QTY_1,0)) V80
             , SUM(DECODE(A.OPER, 'A0400', QTY_1,0)) V81
             , SUM(DECODE(A.OPER, 'A0401', QTY_1,0)) V82
             , SUM(DECODE(A.OPER, 'A0500', QTY_1,0)) V83
             , SUM(DECODE(A.OPER, 'A0530', QTY_1,0)) V84
             , SUM(DECODE(A.OPER, 'A0531', QTY_1,0)) V85
             , SUM(DECODE(A.OPER, 'A0501', QTY_1,0)) V86
             , SUM(DECODE(A.OPER, 'A0540', QTY_1,0)) V87
             , SUM(DECODE(A.OPER, 'A0550', QTY_1,0)) V88
             , SUM(DECODE(A.OPER, 'A0600', QTY_1,0)) V89
             , SUM(DECODE(A.OPER, 'A0620', QTY_1,0)) V90
             , SUM(DECODE(A.OPER, 'A0660', QTY_1,0)) V91
             , SUM(DECODE(A.OPER, 'A0630', QTY_1,0)) V92
             , SUM(DECODE(A.OPER, 'A0650', QTY_1,0)) V93
             , SUM(DECODE(A.OPER, 'A0670', QTY_1,0)) V94
             , SUM(DECODE(A.OPER, 'A0720', QTY_1,0)) V95
             , SUM(DECODE(A.OPER, 'A0700', QTY_1,0)) V96
             , SUM(DECODE(A.OPER, 'A0339', QTY_1,0)) V97
             , SUM(DECODE(A.OPER, 'A0541', QTY_1,0)) V98
             , SUM(DECODE(A.OPER, 'A0551', QTY_1,0)) V99
             , SUM(DECODE(A.OPER, 'A0561', QTY_1,0)) V100
             , SUM(DECODE(A.OPER, 'A0601', QTY_1,0)) V101
             , SUM(DECODE(A.OPER, 'A0710', QTY_1,0)) V102
             , SUM(DECODE(A.OPER, 'A0800', QTY_1,0)) V103
             , SUM(DECODE(A.OPER, 'A0402', QTY_1,0)) V104
             , SUM(DECODE(A.OPER, 'A0502', QTY_1,0)) V105
             , SUM(DECODE(A.OPER, 'A0532', QTY_1,0)) V106
             , SUM(DECODE(A.OPER, 'A0801', QTY_1,0)) V107
             , SUM(DECODE(A.OPER, 'A0542', QTY_1,0)) V108
             , SUM(DECODE(A.OPER, 'A0552', QTY_1,0)) V109
             , SUM(DECODE(A.OPER, 'A0562', QTY_1,0)) V110
             , SUM(DECODE(A.OPER, 'A0602', QTY_1,0)) V111
             , SUM(DECODE(A.OPER, 'A0711', QTY_1,0)) V112
             , SUM(DECODE(A.OPER, 'A0802', QTY_1,0)) V113
             , SUM(DECODE(A.OPER, 'A0403', QTY_1,0)) V114
             , SUM(DECODE(A.OPER, 'A0503', QTY_1,0)) V115
             , SUM(DECODE(A.OPER, 'A0533', QTY_1,0)) V116
             , SUM(DECODE(A.OPER, 'A0543', QTY_1,0)) V117
             , SUM(DECODE(A.OPER, 'A0553', QTY_1,0)) V118
             , SUM(DECODE(A.OPER, 'A0563', QTY_1,0)) V119
             , SUM(DECODE(A.OPER, 'A0603', QTY_1,0)) V120
             , SUM(DECODE(A.OPER, 'A0712', QTY_1,0)) V121
             , SUM(DECODE(A.OPER, 'A0713', QTY_1,0)) V122
             , SUM(DECODE(A.OPER, 'A0803', QTY_1,0)) V123
             , SUM(DECODE(A.OPER, 'A0404', QTY_1,0)) V124
             , SUM(DECODE(A.OPER, 'A0504', QTY_1,0)) V125
             , SUM(DECODE(A.OPER, 'A0534', QTY_1,0)) V126
             , SUM(DECODE(A.OPER, 'A0544', QTY_1,0)) V127
             , SUM(DECODE(A.OPER, 'A0554', QTY_1,0)) V128
             , SUM(DECODE(A.OPER, 'A0564', QTY_1,0)) V129
             , SUM(DECODE(A.OPER, 'A0604', QTY_1,0)) V130
             , SUM(DECODE(A.OPER, 'A0714', QTY_1,0)) V131
             , SUM(DECODE(A.OPER, 'A0804', QTY_1,0)) V132
             , SUM(DECODE(A.OPER, 'A0405', QTY_1,0)) V133
             , SUM(DECODE(A.OPER, 'A0505', QTY_1,0)) V134
             , SUM(DECODE(A.OPER, 'A0535', QTY_1,0)) V135
             , SUM(DECODE(A.OPER, 'A0545', QTY_1,0)) V136
             , SUM(DECODE(A.OPER, 'A0555', QTY_1,0)) V137
             , SUM(DECODE(A.OPER, 'A0565', QTY_1,0)) V138
             , SUM(DECODE(A.OPER, 'A0605', QTY_1,0)) V139
             , SUM(DECODE(A.OPER, 'A0715', QTY_1,0)) V140
             , SUM(DECODE(A.OPER, 'A0805', QTY_1,0)) V141
             , SUM(DECODE(A.OPER, 'A0406', QTY_1,0)) V142
             , SUM(DECODE(A.OPER, 'A0506', QTY_1,0)) V143
             , SUM(DECODE(A.OPER, 'A0536', QTY_1,0)) V144
             , SUM(DECODE(A.OPER, 'A0546', QTY_1,0)) V145
             , SUM(DECODE(A.OPER, 'A0556', QTY_1,0)) V146
             , SUM(DECODE(A.OPER, 'A0566', QTY_1,0)) V147
             , SUM(DECODE(A.OPER, 'A0606', QTY_1,0)) V148
             , SUM(DECODE(A.OPER, 'A0716', QTY_1,0)) V149
             , SUM(DECODE(A.OPER, 'A0806', QTY_1,0)) V150
             , SUM(DECODE(A.OPER, 'A0407', QTY_1,0)) V151
             , SUM(DECODE(A.OPER, 'A0507', QTY_1,0)) V152
             , SUM(DECODE(A.OPER, 'A0537', QTY_1,0)) V153
             , SUM(DECODE(A.OPER, 'A0547', QTY_1,0)) V154
             , SUM(DECODE(A.OPER, 'A0557', QTY_1,0)) V155
             , SUM(DECODE(A.OPER, 'A0567', QTY_1,0)) V156
             , SUM(DECODE(A.OPER, 'A0607', QTY_1,0)) V157
             , SUM(DECODE(A.OPER, 'A0717', QTY_1,0)) V158
             , SUM(DECODE(A.OPER, 'A0807', QTY_1,0)) V159
             , SUM(DECODE(A.OPER, 'A0408', QTY_1,0)) V160
             , SUM(DECODE(A.OPER, 'A0508', QTY_1,0)) V161
             , SUM(DECODE(A.OPER, 'A0538', QTY_1,0)) V162
             , SUM(DECODE(A.OPER, 'A0558', QTY_1,0)) V163
             , SUM(DECODE(A.OPER, 'A0568', QTY_1,0)) V164
             , SUM(DECODE(A.OPER, 'A0608', QTY_1,0)) V165
             , SUM(DECODE(A.OPER, 'A0808', QTY_1,0)) V166
             , SUM(DECODE(A.OPER, 'A0409', QTY_1,0)) V167
             , SUM(DECODE(A.OPER, 'A0509', QTY_1,0)) V168
             , SUM(DECODE(A.OPER, 'A0539', QTY_1,0)) V169
             , SUM(DECODE(A.OPER, 'A0559', QTY_1,0)) V170
             , SUM(DECODE(A.OPER, 'A0569', QTY_1,0)) V171
             , SUM(DECODE(A.OPER, 'A0609', QTY_1,0)) V172
             , SUM(DECODE(A.OPER, 'A0809', QTY_1,0)) V173
             , SUM(DECODE(A.OPER, 'A080A', QTY_1,0)) V174
             , SUM(DECODE(A.OPER, 'A0890', QTY_1,0)) V175
             , SUM(DECODE(A.OPER, 'A0900', QTY_1,0)) V176
             , SUM(DECODE(A.OPER, 'A0910', QTY_1,0)) V177
             , SUM(DECODE(A.OPER, 'A0920', QTY_1,0)) V178
             , SUM(DECODE(A.OPER, 'A0930', QTY_1,0)) V179
             , SUM(DECODE(A.OPER, 'A0935', QTY_1,0)) V180
             , SUM(DECODE(A.OPER, 'A040A', QTY_1,0)) V181
             , SUM(DECODE(A.OPER, 'A0950', QTY_1,0)) V182
             , SUM(DECODE(A.OPER, 'A053A', QTY_1,0)) V183
             , SUM(DECODE(A.OPER, 'A0970', QTY_1,0)) V184
             , SUM(DECODE(A.OPER, 'A0940', QTY_1,0)) V185
             , SUM(DECODE(A.OPER, 'A0980', QTY_1,0)) V186
             , SUM(DECODE(A.OPER, 'A1000', QTY_1,0)) V187
             , SUM(DECODE(A.OPER, 'A055A', QTY_1,0)) V188
             , SUM(DECODE(A.OPER, 'A060A', QTY_1,0)) V189
             , SUM(DECODE(A.OPER, 'A1040', QTY_1,0)) V190
             , SUM(DECODE(A.OPER, 'A1070', QTY_1,0)) V191
             , SUM(DECODE(A.OPER, 'A1020', QTY_1,0)) V192
             , SUM(DECODE(A.OPER, 'A1100', QTY_1,0)) V193
             , SUM(DECODE(A.OPER, 'A1110', QTY_1,0)) V194
             , SUM(DECODE(A.OPER, 'A1120', QTY_1,0)) V195
             , SUM(DECODE(A.OPER, 'A1130', QTY_1,0)) V196
             , SUM(DECODE(A.OPER, 'A1140', QTY_1,0)) V197
             , SUM(DECODE(A.OPER, 'A1150', QTY_1,0)) V198
             , SUM(DECODE(A.OPER, 'A1600', QTY_1,0)) V199
             , SUM(DECODE(A.OPER, 'A1650', QTY_1,0)) V200
             , SUM(DECODE(A.OPER, 'A1170', QTY_1,0)) V201
             , SUM(DECODE(A.OPER, 'A1180', QTY_1,0)) V202
             , SUM(DECODE(A.OPER, 'A1200', QTY_1,0)) V203
             , SUM(DECODE(A.OPER, 'A1230', QTY_1,0)) V204
             , SUM(DECODE(A.OPER, 'A1240', QTY_1,0)) V205
             , SUM(DECODE(A.OPER, 'A1250', QTY_1,0)) V206
             , SUM(DECODE(A.OPER, 'A1260', QTY_1,0)) V207
             , SUM(DECODE(A.OPER, 'A1270', QTY_1,0)) V208
             , SUM(DECODE(A.OPER, 'A1300', QTY_1,0)) V209
             , SUM(DECODE(A.OPER, 'A1350', QTY_1,0)) V210
             , SUM(DECODE(A.OPER, 'A1370', QTY_1,0)) V211
             , SUM(DECODE(A.OPER, 'A1380', QTY_1,0)) V212
             , SUM(DECODE(A.OPER, 'A1050', QTY_1,0)) V213
             , SUM(DECODE(A.OPER, 'A1420', QTY_1,0)) V214
             , SUM(DECODE(A.OPER, 'A1440', QTY_1,0)) V215
             , SUM(DECODE(A.OPER, 'A1450', QTY_1,0)) V216
             , SUM(DECODE(A.OPER, 'A1821', QTY_1,0)) V217
             , SUM(DECODE(A.OPER, 'A1460', QTY_1,0)) V218
             , SUM(DECODE(A.OPER, 'A1470', QTY_1,0)) V219
             , SUM(DECODE(A.OPER, 'A1500', QTY_1,0)) V220
             , SUM(DECODE(A.OPER, 'A1550', QTY_1,0)) V221
             , SUM(DECODE(A.OPER, 'A1610', QTY_1,0)) V222
             , SUM(DECODE(A.OPER, 'A1560', QTY_1,0)) V223
             , SUM(DECODE(A.OPER, 'A1720', QTY_1,0)) V224
             , SUM(DECODE(A.OPER, 'A1730', QTY_1,0)) V225
             , SUM(DECODE(A.OPER, 'A1740', QTY_1,0)) V226
             , SUM(DECODE(A.OPER, 'A1750', QTY_1,0)) V227
             , SUM(DECODE(A.OPER, 'A1755', QTY_1,0)) V228
             , SUM(DECODE(A.OPER, 'A1760', QTY_1,0)) V229
             , SUM(DECODE(A.OPER, 'A1765', QTY_1,0)) V230
             , SUM(DECODE(A.OPER, 'A1766', QTY_1,0)) V231
             , SUM(DECODE(A.OPER, 'A1763', QTY_1,0)) V232
             , SUM(DECODE(A.OPER, 'A1770', QTY_1,0)) V233
             , SUM(DECODE(A.OPER, 'A1780', QTY_1,0)) V234
             , SUM(DECODE(A.OPER, 'A1790', QTY_1,0)) V235
             , SUM(DECODE(A.OPER, 'A1795', QTY_1,0)) V236
             , SUM(DECODE(A.OPER, 'A1860', QTY_1,0)) V237
             , SUM(DECODE(A.OPER, 'A1850', QTY_1,0)) V238
             , SUM(DECODE(A.OPER, 'A1390', QTY_1,0)) V239
             , SUM(DECODE(A.OPER, 'A1800', QTY_1,0)) V240
             , SUM(DECODE(A.OPER, 'A1805', QTY_1,0)) V241
             , SUM(DECODE(A.OPER, 'A1810', QTY_1,0)) V242
             , SUM(DECODE(A.OPER, 'A1811', QTY_1,0)) V243
             , SUM(DECODE(A.OPER, 'A1812', QTY_1,0)) V244
             , SUM(DECODE(A.OPER, 'A1816', QTY_1,0)) V245
             , SUM(DECODE(A.OPER, 'A1820', QTY_1,0)) V246
             , SUM(DECODE(A.OPER, 'A1825', QTY_1,0)) V247
             , SUM(DECODE(A.OPER, 'A1826', QTY_1,0)) V248
             , SUM(DECODE(A.OPER, 'A1920', QTY_1,0)) V249
             , SUM(DECODE(A.OPER, 'A1960', QTY_1,0)) V250
             , SUM(DECODE(A.OPER, 'A1815', QTY_1,0)) V251
             , SUM(DECODE(A.OPER, 'A1830', QTY_1,0)) V252
             , SUM(DECODE(A.OPER, 'A1710', QTY_1,0)) V253
             , SUM(DECODE(A.OPER, 'A1840', QTY_1,0)) V254
             , SUM(DECODE(A.OPER, 'A1900', QTY_1,0)) V255
             , SUM(DECODE(A.OPER, 'A1910', QTY_1,0)) V256
             , SUM(DECODE(A.OPER, 'A1950', QTY_1,0)) V257
             , SUM(DECODE(A.OPER, 'A2000', QTY_1,0)) V258
             , SUM(DECODE(A.OPER, 'A2010', QTY_1,0)) V259
             , SUM(DECODE(A.OPER, 'A2020', QTY_1,0)) V260
             , SUM(DECODE(A.OPER, 'A2025', QTY_1,0)) V261
             , SUM(DECODE(A.OPER, 'A1819', QTY_1,0)) V262
             , SUM(DECODE(A.OPER, 'A2030', QTY_1,0)) V263
             , SUM(DECODE(A.OPER, 'A2040', QTY_1,0)) V264
             , SUM(DECODE(A.OPER, 'A2041', QTY_1,0)) V265
             , SUM(DECODE(A.OPER, 'A2042', QTY_1,0)) V266
             , SUM(DECODE(A.OPER, 'A2070', QTY_1,0)) V267
             , SUM(DECODE(A.OPER, 'A2050', QTY_1,0)) V268
             , SUM(DECODE(A.OPER, 'A2150', QTY_1,0)) V269
             , SUM(DECODE(A.OPER, 'A2200', QTY_1,0)) V270
             , SUM(DECODE(A.OPER, 'A2100', QTY_1,0)) V271
             , SUM(DECODE(A.OPER, 'A2300', QTY_1,0)) V272
             , SUM(DECODE(A.OPER, 'A2350', QTY_1,0)) V273
             , SUM(DECODE(A.OPER, 'AZ009', QTY_1,0)) V274
             , SUM(DECODE(A.OPER, 'AZ010', QTY_1,0)) V275
          FROM RWIPLOTSTS_BOH A, CLOTCRDDAT@RPTTOMES B 
         WHERE 1=1 
           AND A.CUTOFF_DT = '2020041222' 
           AND A.FACTORY = B.FACTORY(+) 
           AND A.MAT_ID = B.MAT_ID(+) 
           AND A.LOT_DEL_FLAG = ' ' 
           AND A.LOT_TYPE = 'W' 
           AND A.MAT_ID LIKE 'FP%' 
           AND A.FACTORY = 'HMVA2' 
           AND A.OPER BETWEEN 'A0000' AND 'AZ010' 
         GROUP BY A.MAT_ID 
       ) WIP 
     , ( 
        SELECT MAT_ID 
             , SUM(S1_FAC_OUT_QTY_1+S2_FAC_OUT_QTY_1+S3_FAC_OUT_QTY_1) AS SHP_QTY  
          FROM RSUMFACMOV
         WHERE CM_KEY_1 = 'HMVA2' 
           AND MAT_ID LIKE 'FP%' 
           AND WORK_DATE = '20200412'
           AND FACTORY NOT IN ('RETURN')
           AND LOT_TYPE = 'W'
         GROUP BY MAT_ID 
       ) SHP 
     , ( 
        SELECT MAT_ID 
             , SUM(DECODE(WORK_DATE, '20200406', NVL(S1_FAC_OUT_QTY_1 + S2_FAC_OUT_QTY_1 + S3_FAC_OUT_QTY_1 + S4_FAC_OUT_QTY_1, 0), 0)) AS ASSY_MONDAY  
             , SUM(NVL(S1_FAC_OUT_QTY_1 + S2_FAC_OUT_QTY_1 + S3_FAC_OUT_QTY_1 + S4_FAC_OUT_QTY_1, 0)) AS ASSY_WEEK 
          FROM RSUMFACMOV 
         WHERE CM_KEY_1 = 'HMVA2' 
           AND LOT_TYPE = 'W'
           AND CM_KEY_2 = 'PROD' 
           AND CM_KEY_3 LIKE 'P%' 
           AND MAT_ID LIKE 'SES%' 
           AND WORK_DATE BETWEEN '20200406' AND '20200412'
         GROUP BY MAT_ID 
       ) SHP1 
     , ( 
        SELECT MAT_ID 
             , SUM(PLAN_QTY) PLAN_W1 
             , SUM(DECODE(PLAN_DAY, '20200406', 0, PLAN_QTY)) AS PLAN_W2 
          FROM ( 
                SELECT * 
                  FROM CWIPPLNDAY 
                 WHERE 1=1 
                   AND FACTORY = 'HMVA2' 
                   AND PLAN_DAY BETWEEN '20200406' AND '20200412'
                   AND IN_OUT_FLAG = 'OUT'
                   AND CLASS = 'ASSY'
               ) B
         GROUP BY MAT_ID 
       ) PLN 
 WHERE 1=1 
   AND MAT.MAT_ID = WIP.MAT_ID(+) 
   AND MAT.MAT_ID = SHP.MAT_ID(+) 
   AND MAT.MAT_ID = SHP1.MAT_ID(+) 
   AND MAT.MAT_ID = PLN.MAT_ID(+) 
   AND MAT.FACTORY = 'HMVA2' 
   AND MAT.MAT_ID LIKE 'FP%' 
 GROUP BY MAT.MAT_GRP_1,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT.MAT_CMF_10,  ' ', MAT.MAT_ID,  ' ',  ' '
HAVING (NVL(SUM(TOTAL),0) + NVL(SUM(SHP_QTY),0)  + NVL(SUM(ASSY_WEEK),0) + NVL(SUM(PLAN_W1),0)) > 0     
 ORDER BY MAT.MAT_GRP_1,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT.MAT_CMF_10,  ' ', MAT.MAT_ID,  ' ',  ' ' 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE) AS This_Week_First_Day 
     , MAX(SYS_DATE) AS This_Week_Last_Day
  FROM MWIPCALDEF
 WHERE 1=1 
   AND CALENDAR_ID = 'SE'
   AND (PLAN_YEAR,PLAN_WEEK) IN (
                                 SELECT PLAN_YEAR,PLAN_WEEK 
                                   FROM MWIPCALDEF 
                                  WHERE 1=1
                                    AND CALENDAR_ID = 'SE'
                                    AND SYS_DATE = '20200411')

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT NVL((SELECT DATA_1 FROM MGCMTBLDAT WHERE TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = MAT.MAT_GRP_1 AND ROWNUM=1), '-') AS CUSTOMER,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT.MAT_CMF_10 AS PIN_TYPE,  ' ', MAT.MAT_ID AS PRODUCT,  ' ',  ' ' 
     , ROUND(SUM(TOTAL)/1,0) AS TOTAL 
     , ROUND(SUM(V0)/1,0) AS  Val0
     , ROUND(SUM(V1)/1,0) AS  Val1
     , ROUND(SUM(V2)/1,0) AS  Val2
     , ROUND(SUM(V3)/1,0) AS  Val3
     , ROUND(SUM(V4)/1,0) AS  Val4
     , ROUND(SUM(V5)/1,0) AS  Val5
     , ROUND(SUM(V6)/1,0) AS  Val6
     , ROUND(SUM(V7)/1,0) AS  Val7
     , ROUND(SUM(V8)/1,0) AS  Val8
     , ROUND(SUM(V9)/1,0) AS  Val9
     , ROUND(SUM(V10)/1,0) AS  Val10
     , ROUND(SUM(V11)/1,0) AS  Val11
     , ROUND(SUM(V12)/1,0) AS  Val12
     , ROUND(SUM(V13)/1,0) AS  Val13
     , ROUND(SUM(V14)/1,0) AS  Val14
     , ROUND(SUM(V15)/1,0) AS  Val15
     , ROUND(SUM(V16)/1,0) AS  Val16
     , ROUND(SUM(V17)/1,0) AS  Val17
     , ROUND(SUM(V18)/1,0) AS  Val18
     , ROUND(SUM(V19)/1,0) AS  Val19
     , ROUND(SUM(V20)/1,0) AS  Val20
     , ROUND(SUM(V21)/1,0) AS  Val21
     , ROUND(SUM(V22)/1,0) AS  Val22
     , ROUND(SUM(V23)/1,0) AS  Val23
     , ROUND(SUM(V24)/1,0) AS  Val24
     , ROUND(SUM(V25)/1,0) AS  Val25
     , ROUND(SUM(V26)/1,0) AS  Val26
     , ROUND(SUM(V27)/1,0) AS  Val27
     , ROUND(SUM(V28)/1,0) AS  Val28
     , ROUND(SUM(V29)/1,0) AS  Val29
     , ROUND(SUM(V30)/1,0) AS  Val30
     , ROUND(SUM(V31)/1,0) AS  Val31
     , ROUND(SUM(V32)/1,0) AS  Val32
     , ROUND(SUM(V33)/1,0) AS  Val33
     , ROUND(SUM(V34)/1,0) AS  Val34
     , ROUND(SUM(V35)/1,0) AS  Val35
     , ROUND(SUM(V36)/1,0) AS  Val36
     , ROUND(SUM(V37)/1,0) AS  Val37
     , ROUND(SUM(V38)/1,0) AS  Val38
     , ROUND(SUM(V39)/1,0) AS  Val39
     , ROUND(SUM(V40)/1,0) AS  Val40
     , ROUND(SUM(V41)/1,0) AS  Val41
     , ROUND(SUM(V42)/1,0) AS  Val42
     , ROUND(SUM(V43)/1,0) AS  Val43
     , ROUND(SUM(V44)/1,0) AS  Val44
     , ROUND(SUM(V45)/1,0) AS  Val45
     , ROUND(SUM(V46)/1,0) AS  Val46
     , ROUND(SUM(V47)/1,0) AS  Val47
     , ROUND(SUM(V48)/1,0) AS  Val48
     , ROUND(SUM(V49)/1,0) AS  Val49
     , ROUND(SUM(V50)/1,0) AS  Val50
     , ROUND(SUM(V51)/1,0) AS  Val51
     , ROUND(SUM(V52)/1,0) AS  Val52
     , ROUND(SUM(V53)/1,0) AS  Val53
     , ROUND(SUM(V54)/1,0) AS  Val54
     , ROUND(SUM(V55)/1,0) AS  Val55
     , ROUND(SUM(V56)/1,0) AS  Val56
     , ROUND(SUM(V57)/1,0) AS  Val57
     , ROUND(SUM(V58)/1,0) AS  Val58
     , ROUND(SUM(V59)/1,0) AS  Val59
     , ROUND(SUM(V60)/1,0) AS  Val60
     , ROUND(SUM(V61)/1,0) AS  Val61
     , ROUND(SUM(V62)/1,0) AS  Val62
     , ROUND(SUM(V63)/1,0) AS  Val63
     , ROUND(SUM(V64)/1,0) AS  Val64
     , ROUND(SUM(V65)/1,0) AS  Val65
     , ROUND(SUM(V66)/1,0) AS  Val66
     , ROUND(SUM(V67)/1,0) AS  Val67
     , ROUND(SUM(V68)/1,0) AS  Val68
     , ROUND(SUM(V69)/1,0) AS  Val69
     , ROUND(SUM(V70)/1,0) AS  Val70
     , ROUND(SUM(V71)/1,0) AS  Val71
     , ROUND(SUM(V72)/1,0) AS  Val72
     , ROUND(SUM(V73)/1,0) AS  Val73
     , ROUND(SUM(V74)/1,0) AS  Val74
     , ROUND(SUM(V75)/1,0) AS  Val75
     , ROUND(SUM(V76)/1,0) AS  Val76
     , ROUND(SUM(V77)/1,0) AS  Val77
     , ROUND(SUM(V78)/1,0) AS  Val78
     , ROUND(SUM(V79)/1,0) AS  Val79
     , ROUND(SUM(V80)/1,0) AS  Val80
     , ROUND(SUM(V81)/1,0) AS  Val81
     , ROUND(SUM(V82)/1,0) AS  Val82
     , ROUND(SUM(V83)/1,0) AS  Val83
     , ROUND(SUM(V84)/1,0) AS  Val84
     , ROUND(SUM(V85)/1,0) AS  Val85
     , ROUND(SUM(V86)/1,0) AS  Val86
     , ROUND(SUM(V87)/1,0) AS  Val87
     , ROUND(SUM(V88)/1,0) AS  Val88
     , ROUND(SUM(V89)/1,0) AS  Val89
     , ROUND(SUM(V90)/1,0) AS  Val90
     , ROUND(SUM(V91)/1,0) AS  Val91
     , ROUND(SUM(V92)/1,0) AS  Val92
     , ROUND(SUM(V93)/1,0) AS  Val93
     , ROUND(SUM(V94)/1,0) AS  Val94
     , ROUND(SUM(V95)/1,0) AS  Val95
     , ROUND(SUM(V96)/1,0) AS  Val96
     , ROUND(SUM(V97)/1,0) AS  Val97
     , ROUND(SUM(V98)/1,0) AS  Val98
     , ROUND(SUM(V99)/1,0) AS  Val99
     , ROUND(SUM(V100)/1,0) AS  Val100
     , ROUND(SUM(V101)/1,0) AS  Val101
     , ROUND(SUM(V102)/1,0) AS  Val102
     , ROUND(SUM(V103)/1,0) AS  Val103
     , ROUND(SUM(V104)/1,0) AS  Val104
     , ROUND(SUM(V105)/1,0) AS  Val105
     , ROUND(SUM(V106)/1,0) AS  Val106
     , ROUND(SUM(V107)/1,0) AS  Val107
     , ROUND(SUM(V108)/1,0) AS  Val108
     , ROUND(SUM(V109)/1,0) AS  Val109
     , ROUND(SUM(V110)/1,0) AS  Val110
     , ROUND(SUM(V111)/1,0) AS  Val111
     , ROUND(SUM(V112)/1,0) AS  Val112
     , ROUND(SUM(V113)/1,0) AS  Val113
     , ROUND(SUM(V114)/1,0) AS  Val114
     , ROUND(SUM(V115)/1,0) AS  Val115
     , ROUND(SUM(V116)/1,0) AS  Val116
     , ROUND(SUM(V117)/1,0) AS  Val117
     , ROUND(SUM(V118)/1,0) AS  Val118
     , ROUND(SUM(V119)/1,0) AS  Val119
     , ROUND(SUM(V120)/1,0) AS  Val120
     , ROUND(SUM(V121)/1,0) AS  Val121
     , ROUND(SUM(V122)/1,0) AS  Val122
     , ROUND(SUM(V123)/1,0) AS  Val123
     , ROUND(SUM(V124)/1,0) AS  Val124
     , ROUND(SUM(V125)/1,0) AS  Val125
     , ROUND(SUM(V126)/1,0) AS  Val126
     , ROUND(SUM(V127)/1,0) AS  Val127
     , ROUND(SUM(V128)/1,0) AS  Val128
     , ROUND(SUM(V129)/1,0) AS  Val129
     , ROUND(SUM(V130)/1,0) AS  Val130
     , ROUND(SUM(V131)/1,0) AS  Val131
     , ROUND(SUM(V132)/1,0) AS  Val132
     , ROUND(SUM(V133)/1,0) AS  Val133
     , ROUND(SUM(V134)/1,0) AS  Val134
     , ROUND(SUM(V135)/1,0) AS  Val135
     , ROUND(SUM(V136)/1,0) AS  Val136
     , ROUND(SUM(V137)/1,0) AS  Val137
     , ROUND(SUM(V138)/1,0) AS  Val138
     , ROUND(SUM(V139)/1,0) AS  Val139
     , ROUND(SUM(V140)/1,0) AS  Val140
     , ROUND(SUM(V141)/1,0) AS  Val141
     , ROUND(SUM(V142)/1,0) AS  Val142
     , ROUND(SUM(V143)/1,0) AS  Val143
     , ROUND(SUM(V144)/1,0) AS  Val144
     , ROUND(SUM(V145)/1,0) AS  Val145
     , ROUND(SUM(V146)/1,0) AS  Val146
     , ROUND(SUM(V147)/1,0) AS  Val147
     , ROUND(SUM(V148)/1,0) AS  Val148
     , ROUND(SUM(V149)/1,0) AS  Val149
     , ROUND(SUM(V150)/1,0) AS  Val150
     , ROUND(SUM(V151)/1,0) AS  Val151
     , ROUND(SUM(V152)/1,0) AS  Val152
     , ROUND(SUM(V153)/1,0) AS  Val153
     , ROUND(SUM(V154)/1,0) AS  Val154
     , ROUND(SUM(V155)/1,0) AS  Val155
     , ROUND(SUM(V156)/1,0) AS  Val156
     , ROUND(SUM(V157)/1,0) AS  Val157
     , ROUND(SUM(V158)/1,0) AS  Val158
     , ROUND(SUM(V159)/1,0) AS  Val159
     , ROUND(SUM(V160)/1,0) AS  Val160
     , ROUND(SUM(V161)/1,0) AS  Val161
     , ROUND(SUM(V162)/1,0) AS  Val162
     , ROUND(SUM(V163)/1,0) AS  Val163
     , ROUND(SUM(V164)/1,0) AS  Val164
     , ROUND(SUM(V165)/1,0) AS  Val165
     , ROUND(SUM(V166)/1,0) AS  Val166
     , ROUND(SUM(V167)/1,0) AS  Val167
     , ROUND(SUM(V168)/1,0) AS  Val168
     , ROUND(SUM(V169)/1,0) AS  Val169
     , ROUND(SUM(V170)/1,0) AS  Val170
     , ROUND(SUM(V171)/1,0) AS  Val171
     , ROUND(SUM(V172)/1,0) AS  Val172
     , ROUND(SUM(V173)/1,0) AS  Val173
     , ROUND(SUM(V174)/1,0) AS  Val174
     , ROUND(SUM(V175)/1,0) AS  Val175
     , ROUND(SUM(V176)/1,0) AS  Val176
     , ROUND(SUM(V177)/1,0) AS  Val177
     , ROUND(SUM(V178)/1,0) AS  Val178
     , ROUND(SUM(V179)/1,0) AS  Val179
     , ROUND(SUM(V180)/1,0) AS  Val180
     , ROUND(SUM(V181)/1,0) AS  Val181
     , ROUND(SUM(V182)/1,0) AS  Val182
     , ROUND(SUM(V183)/1,0) AS  Val183
     , ROUND(SUM(V184)/1,0) AS  Val184
     , ROUND(SUM(V185)/1,0) AS  Val185
     , ROUND(SUM(V186)/1,0) AS  Val186
     , ROUND(SUM(V187)/1,0) AS  Val187
     , ROUND(SUM(V188)/1,0) AS  Val188
     , ROUND(SUM(V189)/1,0) AS  Val189
     , ROUND(SUM(V190)/1,0) AS  Val190
     , ROUND(SUM(V191)/1,0) AS  Val191
     , ROUND(SUM(V192)/1,0) AS  Val192
     , ROUND(SUM(V193)/1,0) AS  Val193
     , ROUND(SUM(V194)/1,0) AS  Val194
     , ROUND(SUM(V195)/1,0) AS  Val195
     , ROUND(SUM(V196)/1,0) AS  Val196
     , ROUND(SUM(V197)/1,0) AS  Val197
     , ROUND(SUM(V198)/1,0) AS  Val198
     , ROUND(SUM(V199)/1,0) AS  Val199
     , ROUND(SUM(V200)/1,0) AS  Val200
     , ROUND(SUM(V201)/1,0) AS  Val201
     , ROUND(SUM(V202)/1,0) AS  Val202
     , ROUND(SUM(V203)/1,0) AS  Val203
     , ROUND(SUM(V204)/1,0) AS  Val204
     , ROUND(SUM(V205)/1,0) AS  Val205
     , ROUND(SUM(V206)/1,0) AS  Val206
     , ROUND(SUM(V207)/1,0) AS  Val207
     , ROUND(SUM(V208)/1,0) AS  Val208
     , ROUND(SUM(V209)/1,0) AS  Val209
     , ROUND(SUM(V210)/1,0) AS  Val210
     , ROUND(SUM(V211)/1,0) AS  Val211
     , ROUND(SUM(V212)/1,0) AS  Val212
     , ROUND(SUM(V213)/1,0) AS  Val213
     , ROUND(SUM(V214)/1,0) AS  Val214
     , ROUND(SUM(V215)/1,0) AS  Val215
     , ROUND(SUM(V216)/1,0) AS  Val216
     , ROUND(SUM(V217)/1,0) AS  Val217
     , ROUND(SUM(V218)/1,0) AS  Val218
     , ROUND(SUM(V219)/1,0) AS  Val219
     , ROUND(SUM(V220)/1,0) AS  Val220
     , ROUND(SUM(V221)/1,0) AS  Val221
     , ROUND(SUM(V222)/1,0) AS  Val222
     , ROUND(SUM(V223)/1,0) AS  Val223
     , ROUND(SUM(V224)/1,0) AS  Val224
     , ROUND(SUM(V225)/1,0) AS  Val225
     , ROUND(SUM(V226)/1,0) AS  Val226
     , ROUND(SUM(V227)/1,0) AS  Val227
     , ROUND(SUM(V228)/1,0) AS  Val228
     , ROUND(SUM(V229)/1,0) AS  Val229
     , ROUND(SUM(V230)/1,0) AS  Val230
     , ROUND(SUM(V231)/1,0) AS  Val231
     , ROUND(SUM(V232)/1,0) AS  Val232
     , ROUND(SUM(V233)/1,0) AS  Val233
     , ROUND(SUM(V234)/1,0) AS  Val234
     , ROUND(SUM(V235)/1,0) AS  Val235
     , ROUND(SUM(V236)/1,0) AS  Val236
     , ROUND(SUM(V237)/1,0) AS  Val237
     , ROUND(SUM(V238)/1,0) AS  Val238
     , ROUND(SUM(V239)/1,0) AS  Val239
     , ROUND(SUM(V240)/1,0) AS  Val240
     , ROUND(SUM(V241)/1,0) AS  Val241
     , ROUND(SUM(V242)/1,0) AS  Val242
     , ROUND(SUM(V243)/1,0) AS  Val243
     , ROUND(SUM(V244)/1,0) AS  Val244
     , ROUND(SUM(V245)/1,0) AS  Val245
     , ROUND(SUM(V246)/1,0) AS  Val246
     , ROUND(SUM(V247)/1,0) AS  Val247
     , ROUND(SUM(V248)/1,0) AS  Val248
     , ROUND(SUM(V249)/1,0) AS  Val249
     , ROUND(SUM(V250)/1,0) AS  Val250
     , ROUND(SUM(V251)/1,0) AS  Val251
     , ROUND(SUM(V252)/1,0) AS  Val252
     , ROUND(SUM(V253)/1,0) AS  Val253
     , ROUND(SUM(V254)/1,0) AS  Val254
     , ROUND(SUM(V255)/1,0) AS  Val255
     , ROUND(SUM(V256)/1,0) AS  Val256
     , ROUND(SUM(V257)/1,0) AS  Val257
     , ROUND(SUM(V258)/1,0) AS  Val258
     , ROUND(SUM(V259)/1,0) AS  Val259
     , ROUND(SUM(V260)/1,0) AS  Val260
     , ROUND(SUM(V261)/1,0) AS  Val261
     , ROUND(SUM(V262)/1,0) AS  Val262
     , ROUND(SUM(V263)/1,0) AS  Val263
     , ROUND(SUM(V264)/1,0) AS  Val264
     , ROUND(SUM(V265)/1,0) AS  Val265
     , ROUND(SUM(V266)/1,0) AS  Val266
     , ROUND(SUM(V267)/1,0) AS  Val267
     , ROUND(SUM(V268)/1,0) AS  Val268
     , ROUND(SUM(V269)/1,0) AS  Val269
     , ROUND(SUM(V270)/1,0) AS  Val270
     , ROUND(SUM(V271)/1,0) AS  Val271
     , ROUND(SUM(V272)/1,0) AS  Val272
     , ROUND(SUM(V273)/1,0) AS  Val273
     , ROUND(SUM(V274)/1,0) AS  Val274
     , ROUND(SUM(V275)/1,0) AS  Val275
     , TRUNC(SUM(SHP_QTY)/1,0) AS SHP_QTY 
     , ROUND(DECODE(TO_CHAR(TO_DATE('20200411','YYYYMMDD'),'D'), 2, SUM(NVL(PLN.PLAN_W1,0)), 3, SUM(NVL(PLN.PLAN_W1,0)), SUM(NVL(PLN.PLAN_W2,0)) + SUM(NVL(SHP1.ASSY_MONDAY,0)))/1,0) AS PLAN_W1
     , ROUND(SUM(NVL(SHP1.ASSY_WEEK,0))/1,0)
     , ROUND((DECODE(TO_CHAR(TO_DATE('20200411','YYYYMMDD'),'D'), 2, SUM(NVL(PLN.PLAN_W1,0)), 3, SUM(NVL(PLN.PLAN_W1,0)), SUM(NVL(PLN.PLAN_W2,0)) + SUM(NVL(SHP1.ASSY_MONDAY,0)))) - SUM(NVL(SHP1.ASSY_WEEK,0))/1,0) AS LACK_WEEK
  FROM MWIPMATDEF MAT 
     , ( 
        SELECT A.MAT_ID, MAX(B.EMC_1) AS EMC_1 
             , SUM(QTY_1) AS TOTAL 
             , MAX((SELECT ATTR_VALUE FROM MATRNAMSTS WHERE FACTORY = 'HMVA2' AND ATTR_TYPE = 'MAT_ETC' AND ATTR_NAME = DECODE(LOT_CMF_2, 'SE', 'SEC_VERSION', 'HX', 'HX_VERSION') AND ATTR_KEY = A.MAT_ID)) AS VERSION 
             , SUM(DECODE(A.OPER, 'A0000', QTY_1,0)) V0
             , SUM(DECODE(A.OPER, 'A0005', QTY_1,0)) V1
             , SUM(DECODE(A.OPER, 'A000N', QTY_1,0)) V2
             , SUM(DECODE(A.OPER, 'A0010', QTY_1,0)) V3
             , SUM(DECODE(A.OPER, 'A0012', QTY_1,0)) V4
             , SUM(DECODE(A.OPER, 'A0013', QTY_1,0)) V5
             , SUM(DECODE(A.OPER, 'A0015', QTY_1,0)) V6
             , SUM(DECODE(A.OPER, 'A0020', QTY_1,0)) V7
             , SUM(DECODE(A.OPER, 'A0055', QTY_1,0)) V8
             , SUM(DECODE(A.OPER, 'A0023', QTY_1,0)) V9
             , SUM(DECODE(A.OPER, 'A0025', QTY_1,0)) V10
             , SUM(DECODE(A.OPER, 'A0030', QTY_1,0)) V11
             , SUM(DECODE(A.OPER, 'A0190', QTY_1,0)) V12
             , SUM(DECODE(A.OPER, 'A0033', QTY_1,0)) V13
             , SUM(DECODE(A.OPER, 'A0040', QTY_1,0)) V14
             , SUM(DECODE(A.OPER, 'A0041', QTY_1,0)) V15
             , SUM(DECODE(A.OPER, 'A0042', QTY_1,0)) V16
             , SUM(DECODE(A.OPER, 'A0045', QTY_1,0)) V17
             , SUM(DECODE(A.OPER, 'A0050', QTY_1,0)) V18
             , SUM(DECODE(A.OPER, 'A0060', QTY_1,0)) V19
             , SUM(DECODE(A.OPER, 'A0070', QTY_1,0)) V20
             , SUM(DECODE(A.OPER, 'A0080', QTY_1,0)) V21
             , SUM(DECODE(A.OPER, 'A0090', QTY_1,0)) V22
             , SUM(DECODE(A.OPER, 'A0095', QTY_1,0)) V23
             , SUM(DECODE(A.OPER, 'A0110', QTY_1,0)) V24
             , SUM(DECODE(A.OPER, 'A0120', QTY_1,0)) V25
             , SUM(DECODE(A.OPER, 'A0130', QTY_1,0)) V26
             , SUM(DECODE(A.OPER, 'A0140', QTY_1,0)) V27
             , SUM(DECODE(A.OPER, 'A0160', QTY_1,0)) V28
             , SUM(DECODE(A.OPER, 'A0161', QTY_1,0)) V29
             , SUM(DECODE(A.OPER, 'A0165', QTY_1,0)) V30
             , SUM(DECODE(A.OPER, 'A0065', QTY_1,0)) V31
             , SUM(DECODE(A.OPER, 'A0100', QTY_1,0)) V32
             , SUM(DECODE(A.OPER, 'A0150', QTY_1,0)) V33
             , SUM(DECODE(A.OPER, 'A0175', QTY_1,0)) V34
             , SUM(DECODE(A.OPER, 'A0176', QTY_1,0)) V35
             , SUM(DECODE(A.OPER, 'A0170', QTY_1,0)) V36
             , SUM(DECODE(A.OPER, 'A0180', QTY_1,0)) V37
             , SUM(DECODE(A.OPER, 'A0200', QTY_1,0)) V38
             , SUM(DECODE(A.OPER, 'A0201', QTY_1,0)) V39
             , SUM(DECODE(A.OPER, 'A0202', QTY_1,0)) V40
             , SUM(DECODE(A.OPER, 'A0210', QTY_1,0)) V41
             , SUM(DECODE(A.OPER, 'A0215', QTY_1,0)) V42
             , SUM(DECODE(A.OPER, 'A0220', QTY_1,0)) V43
             , SUM(DECODE(A.OPER, 'A0230', QTY_1,0)) V44
             , SUM(DECODE(A.OPER, 'A0300', QTY_1,0)) V45
             , SUM(DECODE(A.OPER, 'A0250', QTY_1,0)) V46
             , SUM(DECODE(A.OPER, 'A0305', QTY_1,0)) V47
             , SUM(DECODE(A.OPER, 'A0240', QTY_1,0)) V48
             , SUM(DECODE(A.OPER, 'A0260', QTY_1,0)) V49
             , SUM(DECODE(A.OPER, 'A0270', QTY_1,0)) V50
             , SUM(DECODE(A.OPER, 'A0290', QTY_1,0)) V51
             , SUM(DECODE(A.OPER, 'A0295', QTY_1,0)) V52
             , SUM(DECODE(A.OPER, 'A0280', QTY_1,0)) V53
             , SUM(DECODE(A.OPER, 'A0306', QTY_1,0)) V54
             , SUM(DECODE(A.OPER, 'A0307', QTY_1,0)) V55
             , SUM(DECODE(A.OPER, 'A0308', QTY_1,0)) V56
             , SUM(DECODE(A.OPER, 'A0310', QTY_1,0)) V57
             , SUM(DECODE(A.OPER, 'A0320', QTY_1,0)) V58
             , SUM(DECODE(A.OPER, 'A0330', QTY_1,0)) V59
             , SUM(DECODE(A.OPER, 'A1280', QTY_1,0)) V60
             , SUM(DECODE(A.OPER, 'A0333', QTY_1,0)) V61
             , SUM(DECODE(A.OPER, 'A0335', QTY_1,0)) V62
             , SUM(DECODE(A.OPER, 'A0337', QTY_1,0)) V63
             , SUM(DECODE(A.OPER, 'A0372', QTY_1,0)) V64
             , SUM(DECODE(A.OPER, 'A0395', QTY_1,0)) V65
             , SUM(DECODE(A.OPER, 'A0397', QTY_1,0)) V66
             , SUM(DECODE(A.OPER, 'A0340', QTY_1,0)) V67
             , SUM(DECODE(A.OPER, 'A0345', QTY_1,0)) V68
             , SUM(DECODE(A.OPER, 'A0350', QTY_1,0)) V69
             , SUM(DECODE(A.OPER, 'A0360', QTY_1,0)) V70
             , SUM(DECODE(A.OPER, 'A0370', QTY_1,0)) V71
             , SUM(DECODE(A.OPER, 'A0375', QTY_1,0)) V72
             , SUM(DECODE(A.OPER, 'A0380', QTY_1,0)) V73
             , SUM(DECODE(A.OPER, 'A0381', QTY_1,0)) V74
             , SUM(DECODE(A.OPER, 'A0382', QTY_1,0)) V75
             , SUM(DECODE(A.OPER, 'A0383', QTY_1,0)) V76
             , SUM(DECODE(A.OPER, 'A0385', QTY_1,0)) V77
             , SUM(DECODE(A.OPER, 'A0391', QTY_1,0)) V78
             , SUM(DECODE(A.OPER, 'A0399', QTY_1,0)) V79
             , SUM(DECODE(A.OPER, 'A0390', QTY_1,0)) V80
             , SUM(DECODE(A.OPER, 'A0400', QTY_1,0)) V81
             , SUM(DECODE(A.OPER, 'A0401', QTY_1,0)) V82
             , SUM(DECODE(A.OPER, 'A0500', QTY_1,0)) V83
             , SUM(DECODE(A.OPER, 'A0530', QTY_1,0)) V84
             , SUM(DECODE(A.OPER, 'A0531', QTY_1,0)) V85
             , SUM(DECODE(A.OPER, 'A0501', QTY_1,0)) V86
             , SUM(DECODE(A.OPER, 'A0540', QTY_1,0)) V87
             , SUM(DECODE(A.OPER, 'A0550', QTY_1,0)) V88
             , SUM(DECODE(A.OPER, 'A0600', QTY_1,0)) V89
             , SUM(DECODE(A.OPER, 'A0620', QTY_1,0)) V90
             , SUM(DECODE(A.OPER, 'A0660', QTY_1,0)) V91
             , SUM(DECODE(A.OPER, 'A0630', QTY_1,0)) V92
             , SUM(DECODE(A.OPER, 'A0650', QTY_1,0)) V93
             , SUM(DECODE(A.OPER, 'A0670', QTY_1,0)) V94
             , SUM(DECODE(A.OPER, 'A0720', QTY_1,0)) V95
             , SUM(DECODE(A.OPER, 'A0700', QTY_1,0)) V96
             , SUM(DECODE(A.OPER, 'A0339', QTY_1,0)) V97
             , SUM(DECODE(A.OPER, 'A0541', QTY_1,0)) V98
             , SUM(DECODE(A.OPER, 'A0551', QTY_1,0)) V99
             , SUM(DECODE(A.OPER, 'A0561', QTY_1,0)) V100
             , SUM(DECODE(A.OPER, 'A0601', QTY_1,0)) V101
             , SUM(DECODE(A.OPER, 'A0710', QTY_1,0)) V102
             , SUM(DECODE(A.OPER, 'A0800', QTY_1,0)) V103
             , SUM(DECODE(A.OPER, 'A0402', QTY_1,0)) V104
             , SUM(DECODE(A.OPER, 'A0502', QTY_1,0)) V105
             , SUM(DECODE(A.OPER, 'A0532', QTY_1,0)) V106
             , SUM(DECODE(A.OPER, 'A0801', QTY_1,0)) V107
             , SUM(DECODE(A.OPER, 'A0542', QTY_1,0)) V108
             , SUM(DECODE(A.OPER, 'A0552', QTY_1,0)) V109
             , SUM(DECODE(A.OPER, 'A0562', QTY_1,0)) V110
             , SUM(DECODE(A.OPER, 'A0602', QTY_1,0)) V111
             , SUM(DECODE(A.OPER, 'A0711', QTY_1,0)) V112
             , SUM(DECODE(A.OPER, 'A0802', QTY_1,0)) V113
             , SUM(DECODE(A.OPER, 'A0403', QTY_1,0)) V114
             , SUM(DECODE(A.OPER, 'A0503', QTY_1,0)) V115
             , SUM(DECODE(A.OPER, 'A0533', QTY_1,0)) V116
             , SUM(DECODE(A.OPER, 'A0543', QTY_1,0)) V117
             , SUM(DECODE(A.OPER, 'A0553', QTY_1,0)) V118
             , SUM(DECODE(A.OPER, 'A0563', QTY_1,0)) V119
             , SUM(DECODE(A.OPER, 'A0603', QTY_1,0)) V120
             , SUM(DECODE(A.OPER, 'A0712', QTY_1,0)) V121
             , SUM(DECODE(A.OPER, 'A0713', QTY_1,0)) V122
             , SUM(DECODE(A.OPER, 'A0803', QTY_1,0)) V123
             , SUM(DECODE(A.OPER, 'A0404', QTY_1,0)) V124
             , SUM(DECODE(A.OPER, 'A0504', QTY_1,0)) V125
             , SUM(DECODE(A.OPER, 'A0534', QTY_1,0)) V126
             , SUM(DECODE(A.OPER, 'A0544', QTY_1,0)) V127
             , SUM(DECODE(A.OPER, 'A0554', QTY_1,0)) V128
             , SUM(DECODE(A.OPER, 'A0564', QTY_1,0)) V129
             , SUM(DECODE(A.OPER, 'A0604', QTY_1,0)) V130
             , SUM(DECODE(A.OPER, 'A0714', QTY_1,0)) V131
             , SUM(DECODE(A.OPER, 'A0804', QTY_1,0)) V132
             , SUM(DECODE(A.OPER, 'A0405', QTY_1,0)) V133
             , SUM(DECODE(A.OPER, 'A0505', QTY_1,0)) V134
             , SUM(DECODE(A.OPER, 'A0535', QTY_1,0)) V135
             , SUM(DECODE(A.OPER, 'A0545', QTY_1,0)) V136
             , SUM(DECODE(A.OPER, 'A0555', QTY_1,0)) V137
             , SUM(DECODE(A.OPER, 'A0565', QTY_1,0)) V138
             , SUM(DECODE(A.OPER, 'A0605', QTY_1,0)) V139
             , SUM(DECODE(A.OPER, 'A0715', QTY_1,0)) V140
             , SUM(DECODE(A.OPER, 'A0805', QTY_1,0)) V141
             , SUM(DECODE(A.OPER, 'A0406', QTY_1,0)) V142
             , SUM(DECODE(A.OPER, 'A0506', QTY_1,0)) V143
             , SUM(DECODE(A.OPER, 'A0536', QTY_1,0)) V144
             , SUM(DECODE(A.OPER, 'A0546', QTY_1,0)) V145
             , SUM(DECODE(A.OPER, 'A0556', QTY_1,0)) V146
             , SUM(DECODE(A.OPER, 'A0566', QTY_1,0)) V147
             , SUM(DECODE(A.OPER, 'A0606', QTY_1,0)) V148
             , SUM(DECODE(A.OPER, 'A0716', QTY_1,0)) V149
             , SUM(DECODE(A.OPER, 'A0806', QTY_1,0)) V150
             , SUM(DECODE(A.OPER, 'A0407', QTY_1,0)) V151
             , SUM(DECODE(A.OPER, 'A0507', QTY_1,0)) V152
             , SUM(DECODE(A.OPER, 'A0537', QTY_1,0)) V153
             , SUM(DECODE(A.OPER, 'A0547', QTY_1,0)) V154
             , SUM(DECODE(A.OPER, 'A0557', QTY_1,0)) V155
             , SUM(DECODE(A.OPER, 'A0567', QTY_1,0)) V156
             , SUM(DECODE(A.OPER, 'A0607', QTY_1,0)) V157
             , SUM(DECODE(A.OPER, 'A0717', QTY_1,0)) V158
             , SUM(DECODE(A.OPER, 'A0807', QTY_1,0)) V159
             , SUM(DECODE(A.OPER, 'A0408', QTY_1,0)) V160
             , SUM(DECODE(A.OPER, 'A0508', QTY_1,0)) V161
             , SUM(DECODE(A.OPER, 'A0538', QTY_1,0)) V162
             , SUM(DECODE(A.OPER, 'A0558', QTY_1,0)) V163
             , SUM(DECODE(A.OPER, 'A0568', QTY_1,0)) V164
             , SUM(DECODE(A.OPER, 'A0608', QTY_1,0)) V165
             , SUM(DECODE(A.OPER, 'A0808', QTY_1,0)) V166
             , SUM(DECODE(A.OPER, 'A0409', QTY_1,0)) V167
             , SUM(DECODE(A.OPER, 'A0509', QTY_1,0)) V168
             , SUM(DECODE(A.OPER, 'A0539', QTY_1,0)) V169
             , SUM(DECODE(A.OPER, 'A0559', QTY_1,0)) V170
             , SUM(DECODE(A.OPER, 'A0569', QTY_1,0)) V171
             , SUM(DECODE(A.OPER, 'A0609', QTY_1,0)) V172
             , SUM(DECODE(A.OPER, 'A0809', QTY_1,0)) V173
             , SUM(DECODE(A.OPER, 'A080A', QTY_1,0)) V174
             , SUM(DECODE(A.OPER, 'A0890', QTY_1,0)) V175
             , SUM(DECODE(A.OPER, 'A0900', QTY_1,0)) V176
             , SUM(DECODE(A.OPER, 'A0910', QTY_1,0)) V177
             , SUM(DECODE(A.OPER, 'A0920', QTY_1,0)) V178
             , SUM(DECODE(A.OPER, 'A0930', QTY_1,0)) V179
             , SUM(DECODE(A.OPER, 'A0935', QTY_1,0)) V180
             , SUM(DECODE(A.OPER, 'A040A', QTY_1,0)) V181
             , SUM(DECODE(A.OPER, 'A0950', QTY_1,0)) V182
             , SUM(DECODE(A.OPER, 'A053A', QTY_1,0)) V183
             , SUM(DECODE(A.OPER, 'A0970', QTY_1,0)) V184
             , SUM(DECODE(A.OPER, 'A0940', QTY_1,0)) V185
             , SUM(DECODE(A.OPER, 'A0980', QTY_1,0)) V186
             , SUM(DECODE(A.OPER, 'A1000', QTY_1,0)) V187
             , SUM(DECODE(A.OPER, 'A055A', QTY_1,0)) V188
             , SUM(DECODE(A.OPER, 'A060A', QTY_1,0)) V189
             , SUM(DECODE(A.OPER, 'A1040', QTY_1,0)) V190
             , SUM(DECODE(A.OPER, 'A1070', QTY_1,0)) V191
             , SUM(DECODE(A.OPER, 'A1020', QTY_1,0)) V192
             , SUM(DECODE(A.OPER, 'A1100', QTY_1,0)) V193
             , SUM(DECODE(A.OPER, 'A1110', QTY_1,0)) V194
             , SUM(DECODE(A.OPER, 'A1120', QTY_1,0)) V195
             , SUM(DECODE(A.OPER, 'A1130', QTY_1,0)) V196
             , SUM(DECODE(A.OPER, 'A1140', QTY_1,0)) V197
             , SUM(DECODE(A.OPER, 'A1150', QTY_1,0)) V198
             , SUM(DECODE(A.OPER, 'A1600', QTY_1,0)) V199
             , SUM(DECODE(A.OPER, 'A1650', QTY_1,0)) V200
             , SUM(DECODE(A.OPER, 'A1170', QTY_1,0)) V201
             , SUM(DECODE(A.OPER, 'A1180', QTY_1,0)) V202
             , SUM(DECODE(A.OPER, 'A1200', QTY_1,0)) V203
             , SUM(DECODE(A.OPER, 'A1230', QTY_1,0)) V204
             , SUM(DECODE(A.OPER, 'A1240', QTY_1,0)) V205
             , SUM(DECODE(A.OPER, 'A1250', QTY_1,0)) V206
             , SUM(DECODE(A.OPER, 'A1260', QTY_1,0)) V207
             , SUM(DECODE(A.OPER, 'A1270', QTY_1,0)) V208
             , SUM(DECODE(A.OPER, 'A1300', QTY_1,0)) V209
             , SUM(DECODE(A.OPER, 'A1350', QTY_1,0)) V210
             , SUM(DECODE(A.OPER, 'A1370', QTY_1,0)) V211
             , SUM(DECODE(A.OPER, 'A1380', QTY_1,0)) V212
             , SUM(DECODE(A.OPER, 'A1050', QTY_1,0)) V213
             , SUM(DECODE(A.OPER, 'A1420', QTY_1,0)) V214
             , SUM(DECODE(A.OPER, 'A1440', QTY_1,0)) V215
             , SUM(DECODE(A.OPER, 'A1450', QTY_1,0)) V216
             , SUM(DECODE(A.OPER, 'A1821', QTY_1,0)) V217
             , SUM(DECODE(A.OPER, 'A1460', QTY_1,0)) V218
             , SUM(DECODE(A.OPER, 'A1470', QTY_1,0)) V219
             , SUM(DECODE(A.OPER, 'A1500', QTY_1,0)) V220
             , SUM(DECODE(A.OPER, 'A1550', QTY_1,0)) V221
             , SUM(DECODE(A.OPER, 'A1610', QTY_1,0)) V222
             , SUM(DECODE(A.OPER, 'A1560', QTY_1,0)) V223
             , SUM(DECODE(A.OPER, 'A1720', QTY_1,0)) V224
             , SUM(DECODE(A.OPER, 'A1730', QTY_1,0)) V225
             , SUM(DECODE(A.OPER, 'A1740', QTY_1,0)) V226
             , SUM(DECODE(A.OPER, 'A1750', QTY_1,0)) V227
             , SUM(DECODE(A.OPER, 'A1755', QTY_1,0)) V228
             , SUM(DECODE(A.OPER, 'A1760', QTY_1,0)) V229
             , SUM(DECODE(A.OPER, 'A1765', QTY_1,0)) V230
             , SUM(DECODE(A.OPER, 'A1766', QTY_1,0)) V231
             , SUM(DECODE(A.OPER, 'A1763', QTY_1,0)) V232
             , SUM(DECODE(A.OPER, 'A1770', QTY_1,0)) V233
             , SUM(DECODE(A.OPER, 'A1780', QTY_1,0)) V234
             , SUM(DECODE(A.OPER, 'A1790', QTY_1,0)) V235
             , SUM(DECODE(A.OPER, 'A1795', QTY_1,0)) V236
             , SUM(DECODE(A.OPER, 'A1860', QTY_1,0)) V237
             , SUM(DECODE(A.OPER, 'A1850', QTY_1,0)) V238
             , SUM(DECODE(A.OPER, 'A1390', QTY_1,0)) V239
             , SUM(DECODE(A.OPER, 'A1800', QTY_1,0)) V240
             , SUM(DECODE(A.OPER, 'A1805', QTY_1,0)) V241
             , SUM(DECODE(A.OPER, 'A1810', QTY_1,0)) V242
             , SUM(DECODE(A.OPER, 'A1811', QTY_1,0)) V243
             , SUM(DECODE(A.OPER, 'A1812', QTY_1,0)) V244
             , SUM(DECODE(A.OPER, 'A1816', QTY_1,0)) V245
             , SUM(DECODE(A.OPER, 'A1820', QTY_1,0)) V246
             , SUM(DECODE(A.OPER, 'A1825', QTY_1,0)) V247
             , SUM(DECODE(A.OPER, 'A1826', QTY_1,0)) V248
             , SUM(DECODE(A.OPER, 'A1920', QTY_1,0)) V249
             , SUM(DECODE(A.OPER, 'A1960', QTY_1,0)) V250
             , SUM(DECODE(A.OPER, 'A1815', QTY_1,0)) V251
             , SUM(DECODE(A.OPER, 'A1830', QTY_1,0)) V252
             , SUM(DECODE(A.OPER, 'A1710', QTY_1,0)) V253
             , SUM(DECODE(A.OPER, 'A1840', QTY_1,0)) V254
             , SUM(DECODE(A.OPER, 'A1900', QTY_1,0)) V255
             , SUM(DECODE(A.OPER, 'A1910', QTY_1,0)) V256
             , SUM(DECODE(A.OPER, 'A1950', QTY_1,0)) V257
             , SUM(DECODE(A.OPER, 'A2000', QTY_1,0)) V258
             , SUM(DECODE(A.OPER, 'A2010', QTY_1,0)) V259
             , SUM(DECODE(A.OPER, 'A2020', QTY_1,0)) V260
             , SUM(DECODE(A.OPER, 'A2025', QTY_1,0)) V261
             , SUM(DECODE(A.OPER, 'A1819', QTY_1,0)) V262
             , SUM(DECODE(A.OPER, 'A2030', QTY_1,0)) V263
             , SUM(DECODE(A.OPER, 'A2040', QTY_1,0)) V264
             , SUM(DECODE(A.OPER, 'A2041', QTY_1,0)) V265
             , SUM(DECODE(A.OPER, 'A2042', QTY_1,0)) V266
             , SUM(DECODE(A.OPER, 'A2070', QTY_1,0)) V267
             , SUM(DECODE(A.OPER, 'A2050', QTY_1,0)) V268
             , SUM(DECODE(A.OPER, 'A2150', QTY_1,0)) V269
             , SUM(DECODE(A.OPER, 'A2200', QTY_1,0)) V270
             , SUM(DECODE(A.OPER, 'A2100', QTY_1,0)) V271
             , SUM(DECODE(A.OPER, 'A2300', QTY_1,0)) V272
             , SUM(DECODE(A.OPER, 'A2350', QTY_1,0)) V273
             , SUM(DECODE(A.OPER, 'AZ009', QTY_1,0)) V274
             , SUM(DECODE(A.OPER, 'AZ010', QTY_1,0)) V275
          FROM RWIPLOTSTS_BOH A, CLOTCRDDAT@RPTTOMES B 
         WHERE 1=1 
           AND A.CUTOFF_DT = '2020041122' 
           AND A.FACTORY = B.FACTORY(+) 
           AND A.MAT_ID = B.MAT_ID(+) 
           AND A.LOT_DEL_FLAG = ' ' 
           AND A.LOT_TYPE = 'W' 
           AND A.MAT_ID LIKE 'FP%' 
           AND A.FACTORY = 'HMVA2' 
           AND A.OPER BETWEEN 'A0000' AND 'AZ010' 
         GROUP BY A.MAT_ID 
       ) WIP 
     , ( 
        SELECT MAT_ID 
             , SUM(S1_FAC_OUT_QTY_1+S2_FAC_OUT_QTY_1+S3_FAC_OUT_QTY_1) AS SHP_QTY  
          FROM RSUMFACMOV
         WHERE CM_KEY_1 = 'HMVA2' 
           AND MAT_ID LIKE 'FP%' 
           AND WORK_DATE = '20200411'
           AND FACTORY NOT IN ('RETURN')
           AND LOT_TYPE = 'W'
         GROUP BY MAT_ID 
       ) SHP 
     , ( 
        SELECT MAT_ID 
             , SUM(DECODE(WORK_DATE, '20200406', NVL(S1_FAC_OUT_QTY_1 + S2_FAC_OUT_QTY_1 + S3_FAC_OUT_QTY_1 + S4_FAC_OUT_QTY_1, 0), 0)) AS ASSY_MONDAY  
             , SUM(NVL(S1_FAC_OUT_QTY_1 + S2_FAC_OUT_QTY_1 + S3_FAC_OUT_QTY_1 + S4_FAC_OUT_QTY_1, 0)) AS ASSY_WEEK 
          FROM RSUMFACMOV 
         WHERE CM_KEY_1 = 'HMVA2' 
           AND LOT_TYPE = 'W'
           AND CM_KEY_2 = 'PROD' 
           AND CM_KEY_3 LIKE 'P%' 
           AND MAT_ID LIKE 'SES%' 
           AND WORK_DATE BETWEEN '20200406' AND '20200412'
         GROUP BY MAT_ID 
       ) SHP1 
     , ( 
        SELECT MAT_ID 
             , SUM(PLAN_QTY) PLAN_W1 
             , SUM(DECODE(PLAN_DAY, '20200406', 0, PLAN_QTY)) AS PLAN_W2 
          FROM ( 
                SELECT * 
                  FROM CWIPPLNDAY 
                 WHERE 1=1 
                   AND FACTORY = 'HMVA2' 
                   AND PLAN_DAY BETWEEN '20200406' AND '20200412'
                   AND IN_OUT_FLAG = 'OUT'
                   AND CLASS = 'ASSY'
               ) B
         GROUP BY MAT_ID 
       ) PLN 
 WHERE 1=1 
   AND MAT.MAT_ID = WIP.MAT_ID(+) 
   AND MAT.MAT_ID = SHP.MAT_ID(+) 
   AND MAT.MAT_ID = SHP1.MAT_ID(+) 
   AND MAT.MAT_ID = PLN.MAT_ID(+) 
   AND MAT.FACTORY = 'HMVA2' 
   AND MAT.MAT_ID LIKE 'FP%' 
 GROUP BY MAT.MAT_GRP_1,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT.MAT_CMF_10,  ' ', MAT.MAT_ID,  ' ',  ' '
HAVING (NVL(SUM(TOTAL),0) + NVL(SUM(SHP_QTY),0)  + NVL(SUM(ASSY_WEEK),0) + NVL(SUM(PLAN_W1),0)) > 0     
 ORDER BY MAT.MAT_GRP_1,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT.MAT_CMF_10,  ' ', MAT.MAT_ID,  ' ',  ' ' 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT '2019' || '1231220000' AS PREV_DATE 
     , ( 
        SELECT MAX(SYS_DATE) || '220000' 
          FROM MWIPCALDEF 
         WHERE 1=1 
           AND CALENDAR_ID = 'HM' 
           AND PLAN_YEAR = '2020' 
           AND PLAN_WEEK = '1' 
       ) AS POST_DATE 
  FROM DUAL 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT '2019' || '1231220000' AS PREV_DATE 
     , ( 
        SELECT MAX(SYS_DATE) || '220000' 
          FROM MWIPCALDEF 
         WHERE 1=1 
           AND CALENDAR_ID = 'HM' 
           AND PLAN_YEAR = '2020' 
           AND PLAN_WEEK = '1' 
       ) AS POST_DATE 
  FROM DUAL 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT '2019' || '1231220000' AS PREV_DATE 
     , ( 
        SELECT MAX(SYS_DATE) || '220000' 
          FROM MWIPCALDEF 
         WHERE 1=1 
           AND CALENDAR_ID = 'HM' 
           AND PLAN_YEAR = '2020' 
           AND PLAN_WEEK = '1' 
       ) AS POST_DATE 
  FROM DUAL 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT '2019' || '1231220000' AS PREV_DATE 
     , ( 
        SELECT MAX(SYS_DATE) || '220000' 
          FROM MWIPCALDEF 
         WHERE 1=1 
           AND CALENDAR_ID = 'HM' 
           AND PLAN_YEAR = '2020' 
           AND PLAN_WEEK = '1' 
       ) AS POST_DATE 
  FROM DUAL 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT PLAN_WEEK V1    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_DATE = TO_CHAR(SYSDATE,'yyyymmdd')      AND ROWNUM = 1  
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT '2019' || '1231220000' AS PREV_DATE 
     , ( 
        SELECT MAX(SYS_DATE) || '220000' 
          FROM MWIPCALDEF 
         WHERE 1=1 
           AND CALENDAR_ID = 'HM' 
           AND PLAN_YEAR = '2020' 
           AND PLAN_WEEK = '1' 
       ) AS POST_DATE 
  FROM DUAL 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT '2019' || '1231220000' AS PREV_DATE 
     , ( 
        SELECT MAX(SYS_DATE) || '220000' 
          FROM MWIPCALDEF 
         WHERE 1=1 
           AND CALENDAR_ID = 'HM' 
           AND PLAN_YEAR = '2020' 
           AND PLAN_WEEK = '16' 
       ) AS POST_DATE 
  FROM DUAL 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT '2019' || '1231220000' AS PREV_DATE 
     , ( 
        SELECT MAX(SYS_DATE) || '220000' 
          FROM MWIPCALDEF 
         WHERE 1=1 
           AND CALENDAR_ID = 'HM' 
           AND PLAN_YEAR = '2020' 
           AND PLAN_WEEK = '16' 
       ) AS POST_DATE 
  FROM DUAL 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT ( 
        SELECT MAX(SYS_DATE) || '220000'  
          FROM MWIPCALDEF 
         WHERE 1=1 
           AND CALENDAR_ID = 'HM' 
           AND PLAN_YEAR = '2020' 
           AND PLAN_WEEK = '15' 
       ) AS PREV_DATE 
     , ( 
        SELECT MAX(SYS_DATE) || '220000' 
          FROM MWIPCALDEF 
         WHERE 1=1 
           AND CALENDAR_ID = 'HM' 
           AND PLAN_YEAR = '2020' 
           AND PLAN_WEEK = '16' 
       ) AS POST_DATE 
  FROM DUAL 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT ( 
        SELECT MAX(SYS_DATE) || '220000'  
          FROM MWIPCALDEF 
         WHERE 1=1 
           AND CALENDAR_ID = 'HM' 
           AND PLAN_YEAR = '2020' 
           AND PLAN_WEEK = '15' 
       ) AS PREV_DATE 
     , ( 
        SELECT MAX(SYS_DATE) || '220000' 
          FROM MWIPCALDEF 
         WHERE 1=1 
           AND CALENDAR_ID = 'HM' 
           AND PLAN_YEAR = '2020' 
           AND PLAN_WEEK = '16' 
       ) AS POST_DATE 
  FROM DUAL 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT ( 
        SELECT MAX(SYS_DATE) || '220000'  
          FROM MWIPCALDEF 
         WHERE 1=1 
           AND CALENDAR_ID = 'HM' 
           AND PLAN_YEAR = '2020' 
           AND PLAN_WEEK = '15' 
       ) AS PREV_DATE 
     , ( 
        SELECT MAX(SYS_DATE) || '220000' 
          FROM MWIPCALDEF 
         WHERE 1=1 
           AND CALENDAR_ID = 'HM' 
           AND PLAN_YEAR = '2020' 
           AND PLAN_WEEK = '16' 
       ) AS POST_DATE 
  FROM DUAL 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT ( 
        SELECT MAX(SYS_DATE) || '220000'  
          FROM MWIPCALDEF 
         WHERE 1=1 
           AND CALENDAR_ID = 'HM' 
           AND PLAN_YEAR = '2020' 
           AND PLAN_WEEK = '15' 
       ) AS PREV_DATE 
     , ( 
        SELECT MAX(SYS_DATE) || '220000' 
          FROM MWIPCALDEF 
         WHERE 1=1 
           AND CALENDAR_ID = 'HM' 
           AND PLAN_YEAR = '2020' 
           AND PLAN_WEEK = '16' 
       ) AS POST_DATE 
  FROM DUAL 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE)  FROM MWIPCALDEF WHERE CALENDAR_ID = 'OTD'   AND SYS_YEAR||LPAD(PLAN_WEEK,2,'0') = '202016'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT LANGUAGE_2 FROM RWEBFUNDEF WHERE FUNC_NAME = 'PRD010227'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE)  FROM MWIPCALDEF WHERE CALENDAR_ID = 'OTD'   AND SYS_YEAR||LPAD(PLAN_WEEK,2,'0') = '202016'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT (SELECT DATA_1 FROM MGCMTBLDAT@RPTTOMES WHERE FACTORY = 'HMVA2' AND TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = A.CUSTOMER) AS CUSTOMER, PKG, SAP_CODE
     , RESV_FIELD_1 AS PIN_TYPE
     , OPER
     , ROUND(TTL_PLAN / 1000, 0) AS TTL_PLAN
     , ROUND(TTL_DEF / 1000, 0) AS TTL_DEF
     , DECODE(SEQ, 1, 'PLAN', 2, 'ACT', 3, 'BAL', 4, 'BOH') AS GUBUN
     , ROUND(DECODE(SEQ, 1, PLAN_D0, 2, SHP_D0, 3, BAL_D0, 4, WIP_D0) / 1000, 0) AS D0
     , ROUND(DECODE(SEQ, 1, PLAN_D1, 2, SHP_D1, 3, BAL_D1, 4, WIP_D1) / 1000, 0) AS D1
     , ROUND(DECODE(SEQ, 1, PLAN_D2, 2, SHP_D2, 3, BAL_D2, 4, WIP_D2) / 1000, 0) AS D2
     , ROUND(DECODE(SEQ, 1, PLAN_D3, 2, SHP_D3, 3, BAL_D3, 4, WIP_D3) / 1000, 0) AS D3
     , ROUND(DECODE(SEQ, 1, PLAN_D4, 2, SHP_D4, 3, BAL_D4, 4, WIP_D4) / 1000, 0) AS D4
     , ROUND(DECODE(SEQ, 1, PLAN_D5, 2, SHP_D5, 3, BAL_D5, 4, WIP_D5) / 1000, 0) AS D5
     , ROUND(DECODE(SEQ, 1, PLAN_D6, 2, SHP_D6, 3, BAL_D6, 4, WIP_D6) / 1000, 0) AS D6
     , ROUND(DECODE(SEQ, 1, PLAN_D7, 2, SHP_D7, 3, BAL_D7, 4, WIP_D7) / 1000, 0) AS D7
     , ROUND(DECODE(SEQ, 1, PLAN_D8, 2, SHP_D8, 3, BAL_D8, 4, WIP_D8) / 1000, 0) AS D8
     , ROUND(DECODE(SEQ, 1, PLAN_D9, 2, SHP_D9, 3, BAL_D9, 4, WIP_D9) / 1000, 0) AS D9
     , ROUND(DECODE(SEQ, 1, PLAN_D10, 2, SHP_D10, 3, BAL_D10, 4, WIP_D10) / 1000, 0) AS D10
     , ROUND(DECODE(SEQ, 1, PLAN_D11, 2, SHP_D11, 3, BAL_D11, 4, WIP_D11) / 1000, 0) AS D11
     , ROUND(DECODE(SEQ, 1, PLAN_D12, 2, SHP_D12, 3, BAL_D12, 4, WIP_D12) / 1000, 0) AS D12
     , ROUND(DECODE(SEQ, 1, PLAN_D13, 2, SHP_D13, 3, BAL_D13, 4, WIP_D13) / 1000, 0) AS D13
  FROM RSUMSCMDAT A
     , (
        SELECT DISTINCT MAT_GRP_10 AS PKG, VENDOR_ID
          FROM MWIPMATDEF
         WHERE FACTORY = 'HMVA2'
           AND DELETE_FLAG = ' '
           AND MAT_TYPE = 'FG'
       ) B
     , (SELECT LEVEL AS SEQ FROM DUAL CONNECT BY LEVEL <= 4) C
 WHERE 1=1   
   AND A.SAP_CODE = B.VENDOR_ID
   AND A.FACTORY = 'HMVA2'
   AND A.PLAN_WEEK = '202016'
 ORDER BY CUSTOMER, PKG, SAP_CODE, OPER_SEQ DESC, SEQ

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE)  FROM MWIPCALDEF WHERE CALENDAR_ID = 'OTD'   AND SYS_YEAR||LPAD(PLAN_WEEK,2,'0') = '202016'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT (SELECT DATA_1 FROM MGCMTBLDAT@RPTTOMES WHERE FACTORY = 'HMVA2' AND TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = A.CUSTOMER) AS CUSTOMER, PKG, SAP_CODE
     , RESV_FIELD_1 AS PIN_TYPE
     , OPER
     , ROUND(TTL_PLAN / 1000, 0) AS TTL_PLAN
     , ROUND(TTL_DEF / 1000, 0) AS TTL_DEF
     , DECODE(SEQ, 1, 'PLAN', 2, 'ACT', 3, 'BAL', 4, 'BOH') AS GUBUN
     , ROUND(DECODE(SEQ, 1, PLAN_D0, 2, SHP_D0, 3, BAL_D0, 4, WIP_D0) / 1000, 0) AS D0
     , ROUND(DECODE(SEQ, 1, PLAN_D1, 2, SHP_D1, 3, BAL_D1, 4, WIP_D1) / 1000, 0) AS D1
     , ROUND(DECODE(SEQ, 1, PLAN_D2, 2, SHP_D2, 3, BAL_D2, 4, WIP_D2) / 1000, 0) AS D2
     , ROUND(DECODE(SEQ, 1, PLAN_D3, 2, SHP_D3, 3, BAL_D3, 4, WIP_D3) / 1000, 0) AS D3
     , ROUND(DECODE(SEQ, 1, PLAN_D4, 2, SHP_D4, 3, BAL_D4, 4, WIP_D4) / 1000, 0) AS D4
     , ROUND(DECODE(SEQ, 1, PLAN_D5, 2, SHP_D5, 3, BAL_D5, 4, WIP_D5) / 1000, 0) AS D5
     , ROUND(DECODE(SEQ, 1, PLAN_D6, 2, SHP_D6, 3, BAL_D6, 4, WIP_D6) / 1000, 0) AS D6
     , ROUND(DECODE(SEQ, 1, PLAN_D7, 2, SHP_D7, 3, BAL_D7, 4, WIP_D7) / 1000, 0) AS D7
     , ROUND(DECODE(SEQ, 1, PLAN_D8, 2, SHP_D8, 3, BAL_D8, 4, WIP_D8) / 1000, 0) AS D8
     , ROUND(DECODE(SEQ, 1, PLAN_D9, 2, SHP_D9, 3, BAL_D9, 4, WIP_D9) / 1000, 0) AS D9
     , ROUND(DECODE(SEQ, 1, PLAN_D10, 2, SHP_D10, 3, BAL_D10, 4, WIP_D10) / 1000, 0) AS D10
     , ROUND(DECODE(SEQ, 1, PLAN_D11, 2, SHP_D11, 3, BAL_D11, 4, WIP_D11) / 1000, 0) AS D11
     , ROUND(DECODE(SEQ, 1, PLAN_D12, 2, SHP_D12, 3, BAL_D12, 4, WIP_D12) / 1000, 0) AS D12
     , ROUND(DECODE(SEQ, 1, PLAN_D13, 2, SHP_D13, 3, BAL_D13, 4, WIP_D13) / 1000, 0) AS D13
  FROM RSUMSCMDAT A
     , (
        SELECT DISTINCT MAT_GRP_10 AS PKG, VENDOR_ID
          FROM MWIPMATDEF
         WHERE FACTORY = 'HMVA2'
           AND DELETE_FLAG = ' '
           AND MAT_TYPE = 'FG'
           AND MAT_ID LIKE 'FP%'
       ) B
     , (SELECT LEVEL AS SEQ FROM DUAL CONNECT BY LEVEL <= 4) C
 WHERE 1=1   
   AND A.SAP_CODE = B.VENDOR_ID
   AND A.FACTORY = 'HMVA2'
   AND A.PLAN_WEEK = '202016'
 ORDER BY CUSTOMER, PKG, SAP_CODE, OPER_SEQ DESC, SEQ

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE)  FROM MWIPCALDEF WHERE CALENDAR_ID = 'OTD'   AND SYS_YEAR||LPAD(PLAN_WEEK,2,'0') = '202016'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT (SELECT DATA_1 FROM MGCMTBLDAT@RPTTOMES WHERE FACTORY = 'HMVA2' AND TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = A.CUSTOMER) AS CUSTOMER, PKG, SAP_CODE
     , RESV_FIELD_1 AS PIN_TYPE
     , OPER
     , ROUND(TTL_PLAN / 1, 0) AS TTL_PLAN
     , ROUND(TTL_DEF / 1, 0) AS TTL_DEF
     , DECODE(SEQ, 1, 'PLAN', 2, 'ACT', 3, 'BAL', 4, 'BOH') AS GUBUN
     , ROUND(DECODE(SEQ, 1, PLAN_D0, 2, SHP_D0, 3, BAL_D0, 4, WIP_D0) / 1, 0) AS D0
     , ROUND(DECODE(SEQ, 1, PLAN_D1, 2, SHP_D1, 3, BAL_D1, 4, WIP_D1) / 1, 0) AS D1
     , ROUND(DECODE(SEQ, 1, PLAN_D2, 2, SHP_D2, 3, BAL_D2, 4, WIP_D2) / 1, 0) AS D2
     , ROUND(DECODE(SEQ, 1, PLAN_D3, 2, SHP_D3, 3, BAL_D3, 4, WIP_D3) / 1, 0) AS D3
     , ROUND(DECODE(SEQ, 1, PLAN_D4, 2, SHP_D4, 3, BAL_D4, 4, WIP_D4) / 1, 0) AS D4
     , ROUND(DECODE(SEQ, 1, PLAN_D5, 2, SHP_D5, 3, BAL_D5, 4, WIP_D5) / 1, 0) AS D5
     , ROUND(DECODE(SEQ, 1, PLAN_D6, 2, SHP_D6, 3, BAL_D6, 4, WIP_D6) / 1, 0) AS D6
     , ROUND(DECODE(SEQ, 1, PLAN_D7, 2, SHP_D7, 3, BAL_D7, 4, WIP_D7) / 1, 0) AS D7
     , ROUND(DECODE(SEQ, 1, PLAN_D8, 2, SHP_D8, 3, BAL_D8, 4, WIP_D8) / 1, 0) AS D8
     , ROUND(DECODE(SEQ, 1, PLAN_D9, 2, SHP_D9, 3, BAL_D9, 4, WIP_D9) / 1, 0) AS D9
     , ROUND(DECODE(SEQ, 1, PLAN_D10, 2, SHP_D10, 3, BAL_D10, 4, WIP_D10) / 1, 0) AS D10
     , ROUND(DECODE(SEQ, 1, PLAN_D11, 2, SHP_D11, 3, BAL_D11, 4, WIP_D11) / 1, 0) AS D11
     , ROUND(DECODE(SEQ, 1, PLAN_D12, 2, SHP_D12, 3, BAL_D12, 4, WIP_D12) / 1, 0) AS D12
     , ROUND(DECODE(SEQ, 1, PLAN_D13, 2, SHP_D13, 3, BAL_D13, 4, WIP_D13) / 1, 0) AS D13
  FROM RSUMSCMDAT A
     , (
        SELECT DISTINCT MAT_GRP_10 AS PKG, VENDOR_ID
          FROM MWIPMATDEF
         WHERE FACTORY = 'HMVA2'
           AND DELETE_FLAG = ' '
           AND MAT_TYPE = 'FG'
           AND MAT_ID LIKE 'FP%'
       ) B
     , (SELECT LEVEL AS SEQ FROM DUAL CONNECT BY LEVEL <= 4) C
 WHERE 1=1   
   AND A.SAP_CODE = B.VENDOR_ID
   AND A.FACTORY = 'HMVA2'
   AND A.PLAN_WEEK = '202016'
 ORDER BY CUSTOMER, PKG, SAP_CODE, OPER_SEQ DESC, SEQ

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
SELECT MIN(SYS_DATE)  FROM MWIPCALDEF WHERE CALENDAR_ID = 'OTD'   AND SYS_YEAR||LPAD(PLAN_WEEK,2,'0') = '202016'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT (SELECT DATA_1 FROM MGCMTBLDAT@RPTTOMES WHERE FACTORY = 'HMVA2' AND TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = A.CUSTOMER) AS CUSTOMER, PKG, SAP_CODE
     , RESV_FIELD_1 AS PIN_TYPE
     , OPER
     , ROUND(TTL_PLAN / 1, 0) AS TTL_PLAN
     , ROUND(TTL_DEF / 1, 0) AS TTL_DEF
     , DECODE(SEQ, 1, 'PLAN', 2, 'ACT', 3, 'BAL', 4, 'BOH') AS GUBUN
     , ROUND(DECODE(SEQ, 1, PLAN_D0, 2, SHP_D0, 3, BAL_D0, 4, WIP_D0) / 1, 0) AS D0
     , ROUND(DECODE(SEQ, 1, PLAN_D1, 2, SHP_D1, 3, BAL_D1, 4, WIP_D1) / 1, 0) AS D1
     , ROUND(DECODE(SEQ, 1, PLAN_D2, 2, SHP_D2, 3, BAL_D2, 4, WIP_D2) / 1, 0) AS D2
     , ROUND(DECODE(SEQ, 1, PLAN_D3, 2, SHP_D3, 3, BAL_D3, 4, WIP_D3) / 1, 0) AS D3
     , ROUND(DECODE(SEQ, 1, PLAN_D4, 2, SHP_D4, 3, BAL_D4, 4, WIP_D4) / 1, 0) AS D4
     , ROUND(DECODE(SEQ, 1, PLAN_D5, 2, SHP_D5, 3, BAL_D5, 4, WIP_D5) / 1, 0) AS D5
     , ROUND(DECODE(SEQ, 1, PLAN_D6, 2, SHP_D6, 3, BAL_D6, 4, WIP_D6) / 1, 0) AS D6
     , ROUND(DECODE(SEQ, 1, PLAN_D7, 2, SHP_D7, 3, BAL_D7, 4, WIP_D7) / 1, 0) AS D7
     , ROUND(DECODE(SEQ, 1, PLAN_D8, 2, SHP_D8, 3, BAL_D8, 4, WIP_D8) / 1, 0) AS D8
     , ROUND(DECODE(SEQ, 1, PLAN_D9, 2, SHP_D9, 3, BAL_D9, 4, WIP_D9) / 1, 0) AS D9
     , ROUND(DECODE(SEQ, 1, PLAN_D10, 2, SHP_D10, 3, BAL_D10, 4, WIP_D10) / 1, 0) AS D10
     , ROUND(DECODE(SEQ, 1, PLAN_D11, 2, SHP_D11, 3, BAL_D11, 4, WIP_D11) / 1, 0) AS D11
     , ROUND(DECODE(SEQ, 1, PLAN_D12, 2, SHP_D12, 3, BAL_D12, 4, WIP_D12) / 1, 0) AS D12
     , ROUND(DECODE(SEQ, 1, PLAN_D13, 2, SHP_D13, 3, BAL_D13, 4, WIP_D13) / 1, 0) AS D13
  FROM RSUMSCMDAT A
     , (
        SELECT DISTINCT MAT_GRP_10 AS PKG, VENDOR_ID
          FROM MWIPMATDEF
         WHERE FACTORY = 'HMVA2'
           AND DELETE_FLAG = ' '
           AND MAT_TYPE = 'FG'
           AND MAT_ID LIKE 'FP100021318-4.3-RC-87CNKP7'
       ) B
     , (SELECT LEVEL AS SEQ FROM DUAL CONNECT BY LEVEL <= 4) C
 WHERE 1=1   
   AND A.SAP_CODE = B.VENDOR_ID
   AND A.FACTORY = 'HMVA2'
   AND A.PLAN_WEEK = '202016'
 ORDER BY CUSTOMER, PKG, SAP_CODE, OPER_SEQ DESC, SEQ

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE)  FROM MWIPCALDEF WHERE CALENDAR_ID = 'OTD'   AND SYS_YEAR||LPAD(PLAN_WEEK,2,'0') = '202016'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT (SELECT DATA_1 FROM MGCMTBLDAT@RPTTOMES WHERE FACTORY = 'HMVA2' AND TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = A.CUSTOMER) AS CUSTOMER, PKG, SAP_CODE
     , RESV_FIELD_1 AS PIN_TYPE
     , OPER
     , ROUND(TTL_PLAN / 1, 0) AS TTL_PLAN
     , ROUND(TTL_DEF / 1, 0) AS TTL_DEF
     , DECODE(SEQ, 1, 'PLAN', 2, 'ACT', 3, 'BAL', 4, 'BOH') AS GUBUN
     , ROUND(DECODE(SEQ, 1, PLAN_D0, 2, SHP_D0, 3, BAL_D0, 4, WIP_D0) / 1, 0) AS D0
     , ROUND(DECODE(SEQ, 1, PLAN_D1, 2, SHP_D1, 3, BAL_D1, 4, WIP_D1) / 1, 0) AS D1
     , ROUND(DECODE(SEQ, 1, PLAN_D2, 2, SHP_D2, 3, BAL_D2, 4, WIP_D2) / 1, 0) AS D2
     , ROUND(DECODE(SEQ, 1, PLAN_D3, 2, SHP_D3, 3, BAL_D3, 4, WIP_D3) / 1, 0) AS D3
     , ROUND(DECODE(SEQ, 1, PLAN_D4, 2, SHP_D4, 3, BAL_D4, 4, WIP_D4) / 1, 0) AS D4
     , ROUND(DECODE(SEQ, 1, PLAN_D5, 2, SHP_D5, 3, BAL_D5, 4, WIP_D5) / 1, 0) AS D5
     , ROUND(DECODE(SEQ, 1, PLAN_D6, 2, SHP_D6, 3, BAL_D6, 4, WIP_D6) / 1, 0) AS D6
     , ROUND(DECODE(SEQ, 1, PLAN_D7, 2, SHP_D7, 3, BAL_D7, 4, WIP_D7) / 1, 0) AS D7
     , ROUND(DECODE(SEQ, 1, PLAN_D8, 2, SHP_D8, 3, BAL_D8, 4, WIP_D8) / 1, 0) AS D8
     , ROUND(DECODE(SEQ, 1, PLAN_D9, 2, SHP_D9, 3, BAL_D9, 4, WIP_D9) / 1, 0) AS D9
     , ROUND(DECODE(SEQ, 1, PLAN_D10, 2, SHP_D10, 3, BAL_D10, 4, WIP_D10) / 1, 0) AS D10
     , ROUND(DECODE(SEQ, 1, PLAN_D11, 2, SHP_D11, 3, BAL_D11, 4, WIP_D11) / 1, 0) AS D11
     , ROUND(DECODE(SEQ, 1, PLAN_D12, 2, SHP_D12, 3, BAL_D12, 4, WIP_D12) / 1, 0) AS D12
     , ROUND(DECODE(SEQ, 1, PLAN_D13, 2, SHP_D13, 3, BAL_D13, 4, WIP_D13) / 1, 0) AS D13
  FROM RSUMSCMDAT A
     , (
        SELECT DISTINCT MAT_GRP_10 AS PKG, VENDOR_ID
          FROM MWIPMATDEF
         WHERE FACTORY = 'HMVA2'
           AND DELETE_FLAG = ' '
           AND MAT_TYPE = 'FG'
           AND MAT_ID LIKE 'FP100021318-4.3-RC-87CNKP7'
       ) B
     , (SELECT LEVEL AS SEQ FROM DUAL CONNECT BY LEVEL <= 4) C
 WHERE 1=1   
   AND A.SAP_CODE = B.VENDOR_ID
   AND A.FACTORY = 'HMVA2'
   AND A.PLAN_WEEK = '202016'
 ORDER BY CUSTOMER, PKG, SAP_CODE, OPER_SEQ DESC, SEQ

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
SELECT MIN(SYS_DATE) AS This_Week_First_Day 
     , MAX(SYS_DATE) AS This_Week_Last_Day
  FROM MWIPCALDEF
 WHERE 1=1 
   AND CALENDAR_ID = 'SE'
   AND (PLAN_YEAR,PLAN_WEEK) IN (
                                 SELECT PLAN_YEAR,PLAN_WEEK 
                                   FROM MWIPCALDEF 
                                  WHERE 1=1
                                    AND CALENDAR_ID = 'SE'
                                    AND SYS_DATE = '20200410')

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT NVL((SELECT DATA_1 FROM MGCMTBLDAT WHERE TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = MAT.MAT_GRP_1 AND ROWNUM=1), '-') AS CUSTOMER,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT.MAT_CMF_10 AS PIN_TYPE,  ' ', MAT.MAT_ID AS PRODUCT,  ' ',  ' ' 
     , ROUND(SUM(TOTAL)/1,0) AS TOTAL 
     , ROUND(SUM(V0)/1,0) AS  Val0
     , ROUND(SUM(V1)/1,0) AS  Val1
     , ROUND(SUM(V2)/1,0) AS  Val2
     , ROUND(SUM(V3)/1,0) AS  Val3
     , ROUND(SUM(V4)/1,0) AS  Val4
     , ROUND(SUM(V5)/1,0) AS  Val5
     , ROUND(SUM(V6)/1,0) AS  Val6
     , ROUND(SUM(V7)/1,0) AS  Val7
     , ROUND(SUM(V8)/1,0) AS  Val8
     , ROUND(SUM(V9)/1,0) AS  Val9
     , ROUND(SUM(V10)/1,0) AS  Val10
     , ROUND(SUM(V11)/1,0) AS  Val11
     , ROUND(SUM(V12)/1,0) AS  Val12
     , ROUND(SUM(V13)/1,0) AS  Val13
     , ROUND(SUM(V14)/1,0) AS  Val14
     , ROUND(SUM(V15)/1,0) AS  Val15
     , ROUND(SUM(V16)/1,0) AS  Val16
     , ROUND(SUM(V17)/1,0) AS  Val17
     , ROUND(SUM(V18)/1,0) AS  Val18
     , ROUND(SUM(V19)/1,0) AS  Val19
     , ROUND(SUM(V20)/1,0) AS  Val20
     , ROUND(SUM(V21)/1,0) AS  Val21
     , ROUND(SUM(V22)/1,0) AS  Val22
     , ROUND(SUM(V23)/1,0) AS  Val23
     , ROUND(SUM(V24)/1,0) AS  Val24
     , ROUND(SUM(V25)/1,0) AS  Val25
     , ROUND(SUM(V26)/1,0) AS  Val26
     , ROUND(SUM(V27)/1,0) AS  Val27
     , ROUND(SUM(V28)/1,0) AS  Val28
     , ROUND(SUM(V29)/1,0) AS  Val29
     , ROUND(SUM(V30)/1,0) AS  Val30
     , ROUND(SUM(V31)/1,0) AS  Val31
     , ROUND(SUM(V32)/1,0) AS  Val32
     , ROUND(SUM(V33)/1,0) AS  Val33
     , ROUND(SUM(V34)/1,0) AS  Val34
     , ROUND(SUM(V35)/1,0) AS  Val35
     , ROUND(SUM(V36)/1,0) AS  Val36
     , ROUND(SUM(V37)/1,0) AS  Val37
     , ROUND(SUM(V38)/1,0) AS  Val38
     , ROUND(SUM(V39)/1,0) AS  Val39
     , ROUND(SUM(V40)/1,0) AS  Val40
     , ROUND(SUM(V41)/1,0) AS  Val41
     , ROUND(SUM(V42)/1,0) AS  Val42
     , ROUND(SUM(V43)/1,0) AS  Val43
     , ROUND(SUM(V44)/1,0) AS  Val44
     , ROUND(SUM(V45)/1,0) AS  Val45
     , ROUND(SUM(V46)/1,0) AS  Val46
     , ROUND(SUM(V47)/1,0) AS  Val47
     , ROUND(SUM(V48)/1,0) AS  Val48
     , ROUND(SUM(V49)/1,0) AS  Val49
     , ROUND(SUM(V50)/1,0) AS  Val50
     , ROUND(SUM(V51)/1,0) AS  Val51
     , ROUND(SUM(V52)/1,0) AS  Val52
     , ROUND(SUM(V53)/1,0) AS  Val53
     , ROUND(SUM(V54)/1,0) AS  Val54
     , ROUND(SUM(V55)/1,0) AS  Val55
     , ROUND(SUM(V56)/1,0) AS  Val56
     , ROUND(SUM(V57)/1,0) AS  Val57
     , ROUND(SUM(V58)/1,0) AS  Val58
     , ROUND(SUM(V59)/1,0) AS  Val59
     , ROUND(SUM(V60)/1,0) AS  Val60
     , ROUND(SUM(V61)/1,0) AS  Val61
     , ROUND(SUM(V62)/1,0) AS  Val62
     , ROUND(SUM(V63)/1,0) AS  Val63
     , ROUND(SUM(V64)/1,0) AS  Val64
     , ROUND(SUM(V65)/1,0) AS  Val65
     , ROUND(SUM(V66)/1,0) AS  Val66
     , ROUND(SUM(V67)/1,0) AS  Val67
     , ROUND(SUM(V68)/1,0) AS  Val68
     , ROUND(SUM(V69)/1,0) AS  Val69
     , ROUND(SUM(V70)/1,0) AS  Val70
     , ROUND(SUM(V71)/1,0) AS  Val71
     , ROUND(SUM(V72)/1,0) AS  Val72
     , ROUND(SUM(V73)/1,0) AS  Val73
     , ROUND(SUM(V74)/1,0) AS  Val74
     , ROUND(SUM(V75)/1,0) AS  Val75
     , ROUND(SUM(V76)/1,0) AS  Val76
     , ROUND(SUM(V77)/1,0) AS  Val77
     , ROUND(SUM(V78)/1,0) AS  Val78
     , ROUND(SUM(V79)/1,0) AS  Val79
     , ROUND(SUM(V80)/1,0) AS  Val80
     , ROUND(SUM(V81)/1,0) AS  Val81
     , ROUND(SUM(V82)/1,0) AS  Val82
     , ROUND(SUM(V83)/1,0) AS  Val83
     , ROUND(SUM(V84)/1,0) AS  Val84
     , ROUND(SUM(V85)/1,0) AS  Val85
     , ROUND(SUM(V86)/1,0) AS  Val86
     , ROUND(SUM(V87)/1,0) AS  Val87
     , ROUND(SUM(V88)/1,0) AS  Val88
     , ROUND(SUM(V89)/1,0) AS  Val89
     , ROUND(SUM(V90)/1,0) AS  Val90
     , ROUND(SUM(V91)/1,0) AS  Val91
     , ROUND(SUM(V92)/1,0) AS  Val92
     , ROUND(SUM(V93)/1,0) AS  Val93
     , ROUND(SUM(V94)/1,0) AS  Val94
     , ROUND(SUM(V95)/1,0) AS  Val95
     , ROUND(SUM(V96)/1,0) AS  Val96
     , ROUND(SUM(V97)/1,0) AS  Val97
     , ROUND(SUM(V98)/1,0) AS  Val98
     , ROUND(SUM(V99)/1,0) AS  Val99
     , ROUND(SUM(V100)/1,0) AS  Val100
     , ROUND(SUM(V101)/1,0) AS  Val101
     , ROUND(SUM(V102)/1,0) AS  Val102
     , ROUND(SUM(V103)/1,0) AS  Val103
     , ROUND(SUM(V104)/1,0) AS  Val104
     , ROUND(SUM(V105)/1,0) AS  Val105
     , ROUND(SUM(V106)/1,0) AS  Val106
     , ROUND(SUM(V107)/1,0) AS  Val107
     , ROUND(SUM(V108)/1,0) AS  Val108
     , ROUND(SUM(V109)/1,0) AS  Val109
     , ROUND(SUM(V110)/1,0) AS  Val110
     , ROUND(SUM(V111)/1,0) AS  Val111
     , ROUND(SUM(V112)/1,0) AS  Val112
     , ROUND(SUM(V113)/1,0) AS  Val113
     , ROUND(SUM(V114)/1,0) AS  Val114
     , ROUND(SUM(V115)/1,0) AS  Val115
     , ROUND(SUM(V116)/1,0) AS  Val116
     , ROUND(SUM(V117)/1,0) AS  Val117
     , ROUND(SUM(V118)/1,0) AS  Val118
     , ROUND(SUM(V119)/1,0) AS  Val119
     , ROUND(SUM(V120)/1,0) AS  Val120
     , ROUND(SUM(V121)/1,0) AS  Val121
     , ROUND(SUM(V122)/1,0) AS  Val122
     , ROUND(SUM(V123)/1,0) AS  Val123
     , ROUND(SUM(V124)/1,0) AS  Val124
     , ROUND(SUM(V125)/1,0) AS  Val125
     , ROUND(SUM(V126)/1,0) AS  Val126
     , ROUND(SUM(V127)/1,0) AS  Val127
     , ROUND(SUM(V128)/1,0) AS  Val128
     , ROUND(SUM(V129)/1,0) AS  Val129
     , ROUND(SUM(V130)/1,0) AS  Val130
     , ROUND(SUM(V131)/1,0) AS  Val131
     , ROUND(SUM(V132)/1,0) AS  Val132
     , ROUND(SUM(V133)/1,0) AS  Val133
     , ROUND(SUM(V134)/1,0) AS  Val134
     , ROUND(SUM(V135)/1,0) AS  Val135
     , ROUND(SUM(V136)/1,0) AS  Val136
     , ROUND(SUM(V137)/1,0) AS  Val137
     , ROUND(SUM(V138)/1,0) AS  Val138
     , ROUND(SUM(V139)/1,0) AS  Val139
     , ROUND(SUM(V140)/1,0) AS  Val140
     , ROUND(SUM(V141)/1,0) AS  Val141
     , ROUND(SUM(V142)/1,0) AS  Val142
     , ROUND(SUM(V143)/1,0) AS  Val143
     , ROUND(SUM(V144)/1,0) AS  Val144
     , ROUND(SUM(V145)/1,0) AS  Val145
     , ROUND(SUM(V146)/1,0) AS  Val146
     , ROUND(SUM(V147)/1,0) AS  Val147
     , ROUND(SUM(V148)/1,0) AS  Val148
     , ROUND(SUM(V149)/1,0) AS  Val149
     , ROUND(SUM(V150)/1,0) AS  Val150
     , ROUND(SUM(V151)/1,0) AS  Val151
     , ROUND(SUM(V152)/1,0) AS  Val152
     , ROUND(SUM(V153)/1,0) AS  Val153
     , ROUND(SUM(V154)/1,0) AS  Val154
     , ROUND(SUM(V155)/1,0) AS  Val155
     , ROUND(SUM(V156)/1,0) AS  Val156
     , ROUND(SUM(V157)/1,0) AS  Val157
     , ROUND(SUM(V158)/1,0) AS  Val158
     , ROUND(SUM(V159)/1,0) AS  Val159
     , ROUND(SUM(V160)/1,0) AS  Val160
     , ROUND(SUM(V161)/1,0) AS  Val161
     , ROUND(SUM(V162)/1,0) AS  Val162
     , ROUND(SUM(V163)/1,0) AS  Val163
     , ROUND(SUM(V164)/1,0) AS  Val164
     , ROUND(SUM(V165)/1,0) AS  Val165
     , ROUND(SUM(V166)/1,0) AS  Val166
     , ROUND(SUM(V167)/1,0) AS  Val167
     , ROUND(SUM(V168)/1,0) AS  Val168
     , ROUND(SUM(V169)/1,0) AS  Val169
     , ROUND(SUM(V170)/1,0) AS  Val170
     , ROUND(SUM(V171)/1,0) AS  Val171
     , ROUND(SUM(V172)/1,0) AS  Val172
     , ROUND(SUM(V173)/1,0) AS  Val173
     , ROUND(SUM(V174)/1,0) AS  Val174
     , ROUND(SUM(V175)/1,0) AS  Val175
     , ROUND(SUM(V176)/1,0) AS  Val176
     , ROUND(SUM(V177)/1,0) AS  Val177
     , ROUND(SUM(V178)/1,0) AS  Val178
     , ROUND(SUM(V179)/1,0) AS  Val179
     , ROUND(SUM(V180)/1,0) AS  Val180
     , ROUND(SUM(V181)/1,0) AS  Val181
     , ROUND(SUM(V182)/1,0) AS  Val182
     , ROUND(SUM(V183)/1,0) AS  Val183
     , ROUND(SUM(V184)/1,0) AS  Val184
     , ROUND(SUM(V185)/1,0) AS  Val185
     , ROUND(SUM(V186)/1,0) AS  Val186
     , ROUND(SUM(V187)/1,0) AS  Val187
     , ROUND(SUM(V188)/1,0) AS  Val188
     , ROUND(SUM(V189)/1,0) AS  Val189
     , ROUND(SUM(V190)/1,0) AS  Val190
     , ROUND(SUM(V191)/1,0) AS  Val191
     , ROUND(SUM(V192)/1,0) AS  Val192
     , ROUND(SUM(V193)/1,0) AS  Val193
     , ROUND(SUM(V194)/1,0) AS  Val194
     , ROUND(SUM(V195)/1,0) AS  Val195
     , ROUND(SUM(V196)/1,0) AS  Val196
     , ROUND(SUM(V197)/1,0) AS  Val197
     , ROUND(SUM(V198)/1,0) AS  Val198
     , ROUND(SUM(V199)/1,0) AS  Val199
     , ROUND(SUM(V200)/1,0) AS  Val200
     , ROUND(SUM(V201)/1,0) AS  Val201
     , ROUND(SUM(V202)/1,0) AS  Val202
     , ROUND(SUM(V203)/1,0) AS  Val203
     , ROUND(SUM(V204)/1,0) AS  Val204
     , ROUND(SUM(V205)/1,0) AS  Val205
     , ROUND(SUM(V206)/1,0) AS  Val206
     , ROUND(SUM(V207)/1,0) AS  Val207
     , ROUND(SUM(V208)/1,0) AS  Val208
     , ROUND(SUM(V209)/1,0) AS  Val209
     , ROUND(SUM(V210)/1,0) AS  Val210
     , ROUND(SUM(V211)/1,0) AS  Val211
     , ROUND(SUM(V212)/1,0) AS  Val212
     , ROUND(SUM(V213)/1,0) AS  Val213
     , ROUND(SUM(V214)/1,0) AS  Val214
     , ROUND(SUM(V215)/1,0) AS  Val215
     , ROUND(SUM(V216)/1,0) AS  Val216
     , ROUND(SUM(V217)/1,0) AS  Val217
     , ROUND(SUM(V218)/1,0) AS  Val218
     , ROUND(SUM(V219)/1,0) AS  Val219
     , ROUND(SUM(V220)/1,0) AS  Val220
     , ROUND(SUM(V221)/1,0) AS  Val221
     , ROUND(SUM(V222)/1,0) AS  Val222
     , ROUND(SUM(V223)/1,0) AS  Val223
     , ROUND(SUM(V224)/1,0) AS  Val224
     , ROUND(SUM(V225)/1,0) AS  Val225
     , ROUND(SUM(V226)/1,0) AS  Val226
     , ROUND(SUM(V227)/1,0) AS  Val227
     , ROUND(SUM(V228)/1,0) AS  Val228
     , ROUND(SUM(V229)/1,0) AS  Val229
     , ROUND(SUM(V230)/1,0) AS  Val230
     , ROUND(SUM(V231)/1,0) AS  Val231
     , ROUND(SUM(V232)/1,0) AS  Val232
     , ROUND(SUM(V233)/1,0) AS  Val233
     , ROUND(SUM(V234)/1,0) AS  Val234
     , ROUND(SUM(V235)/1,0) AS  Val235
     , ROUND(SUM(V236)/1,0) AS  Val236
     , ROUND(SUM(V237)/1,0) AS  Val237
     , ROUND(SUM(V238)/1,0) AS  Val238
     , ROUND(SUM(V239)/1,0) AS  Val239
     , ROUND(SUM(V240)/1,0) AS  Val240
     , ROUND(SUM(V241)/1,0) AS  Val241
     , ROUND(SUM(V242)/1,0) AS  Val242
     , ROUND(SUM(V243)/1,0) AS  Val243
     , ROUND(SUM(V244)/1,0) AS  Val244
     , ROUND(SUM(V245)/1,0) AS  Val245
     , ROUND(SUM(V246)/1,0) AS  Val246
     , ROUND(SUM(V247)/1,0) AS  Val247
     , ROUND(SUM(V248)/1,0) AS  Val248
     , ROUND(SUM(V249)/1,0) AS  Val249
     , ROUND(SUM(V250)/1,0) AS  Val250
     , ROUND(SUM(V251)/1,0) AS  Val251
     , ROUND(SUM(V252)/1,0) AS  Val252
     , ROUND(SUM(V253)/1,0) AS  Val253
     , ROUND(SUM(V254)/1,0) AS  Val254
     , ROUND(SUM(V255)/1,0) AS  Val255
     , ROUND(SUM(V256)/1,0) AS  Val256
     , ROUND(SUM(V257)/1,0) AS  Val257
     , ROUND(SUM(V258)/1,0) AS  Val258
     , ROUND(SUM(V259)/1,0) AS  Val259
     , ROUND(SUM(V260)/1,0) AS  Val260
     , ROUND(SUM(V261)/1,0) AS  Val261
     , ROUND(SUM(V262)/1,0) AS  Val262
     , ROUND(SUM(V263)/1,0) AS  Val263
     , ROUND(SUM(V264)/1,0) AS  Val264
     , ROUND(SUM(V265)/1,0) AS  Val265
     , ROUND(SUM(V266)/1,0) AS  Val266
     , ROUND(SUM(V267)/1,0) AS  Val267
     , ROUND(SUM(V268)/1,0) AS  Val268
     , ROUND(SUM(V269)/1,0) AS  Val269
     , ROUND(SUM(V270)/1,0) AS  Val270
     , ROUND(SUM(V271)/1,0) AS  Val271
     , ROUND(SUM(V272)/1,0) AS  Val272
     , ROUND(SUM(V273)/1,0) AS  Val273
     , ROUND(SUM(V274)/1,0) AS  Val274
     , ROUND(SUM(V275)/1,0) AS  Val275
     , TRUNC(SUM(SHP_QTY)/1,0) AS SHP_QTY 
     , ROUND(DECODE(TO_CHAR(TO_DATE('20200410','YYYYMMDD'),'D'), 2, SUM(NVL(PLN.PLAN_W1,0)), 3, SUM(NVL(PLN.PLAN_W1,0)), SUM(NVL(PLN.PLAN_W2,0)) + SUM(NVL(SHP1.ASSY_MONDAY,0)))/1,0) AS PLAN_W1
     , ROUND(SUM(NVL(SHP1.ASSY_WEEK,0))/1,0)
     , ROUND((DECODE(TO_CHAR(TO_DATE('20200410','YYYYMMDD'),'D'), 2, SUM(NVL(PLN.PLAN_W1,0)), 3, SUM(NVL(PLN.PLAN_W1,0)), SUM(NVL(PLN.PLAN_W2,0)) + SUM(NVL(SHP1.ASSY_MONDAY,0)))) - SUM(NVL(SHP1.ASSY_WEEK,0))/1,0) AS LACK_WEEK
  FROM MWIPMATDEF MAT 
     , ( 
        SELECT A.MAT_ID, MAX(B.EMC_1) AS EMC_1 
             , SUM(QTY_1) AS TOTAL 
             , MAX((SELECT ATTR_VALUE FROM MATRNAMSTS WHERE FACTORY = 'HMVA2' AND ATTR_TYPE = 'MAT_ETC' AND ATTR_NAME = DECODE(LOT_CMF_2, 'SE', 'SEC_VERSION', 'HX', 'HX_VERSION') AND ATTR_KEY = A.MAT_ID)) AS VERSION 
             , SUM(DECODE(A.OPER, 'A0000', QTY_1,0)) V0
             , SUM(DECODE(A.OPER, 'A0005', QTY_1,0)) V1
             , SUM(DECODE(A.OPER, 'A000N', QTY_1,0)) V2
             , SUM(DECODE(A.OPER, 'A0010', QTY_1,0)) V3
             , SUM(DECODE(A.OPER, 'A0012', QTY_1,0)) V4
             , SUM(DECODE(A.OPER, 'A0013', QTY_1,0)) V5
             , SUM(DECODE(A.OPER, 'A0015', QTY_1,0)) V6
             , SUM(DECODE(A.OPER, 'A0020', QTY_1,0)) V7
             , SUM(DECODE(A.OPER, 'A0055', QTY_1,0)) V8
             , SUM(DECODE(A.OPER, 'A0023', QTY_1,0)) V9
             , SUM(DECODE(A.OPER, 'A0025', QTY_1,0)) V10
             , SUM(DECODE(A.OPER, 'A0030', QTY_1,0)) V11
             , SUM(DECODE(A.OPER, 'A0190', QTY_1,0)) V12
             , SUM(DECODE(A.OPER, 'A0033', QTY_1,0)) V13
             , SUM(DECODE(A.OPER, 'A0040', QTY_1,0)) V14
             , SUM(DECODE(A.OPER, 'A0041', QTY_1,0)) V15
             , SUM(DECODE(A.OPER, 'A0042', QTY_1,0)) V16
             , SUM(DECODE(A.OPER, 'A0045', QTY_1,0)) V17
             , SUM(DECODE(A.OPER, 'A0050', QTY_1,0)) V18
             , SUM(DECODE(A.OPER, 'A0060', QTY_1,0)) V19
             , SUM(DECODE(A.OPER, 'A0070', QTY_1,0)) V20
             , SUM(DECODE(A.OPER, 'A0080', QTY_1,0)) V21
             , SUM(DECODE(A.OPER, 'A0090', QTY_1,0)) V22
             , SUM(DECODE(A.OPER, 'A0095', QTY_1,0)) V23
             , SUM(DECODE(A.OPER, 'A0110', QTY_1,0)) V24
             , SUM(DECODE(A.OPER, 'A0120', QTY_1,0)) V25
             , SUM(DECODE(A.OPER, 'A0130', QTY_1,0)) V26
             , SUM(DECODE(A.OPER, 'A0140', QTY_1,0)) V27
             , SUM(DECODE(A.OPER, 'A0160', QTY_1,0)) V28
             , SUM(DECODE(A.OPER, 'A0161', QTY_1,0)) V29
             , SUM(DECODE(A.OPER, 'A0165', QTY_1,0)) V30
             , SUM(DECODE(A.OPER, 'A0065', QTY_1,0)) V31
             , SUM(DECODE(A.OPER, 'A0100', QTY_1,0)) V32
             , SUM(DECODE(A.OPER, 'A0150', QTY_1,0)) V33
             , SUM(DECODE(A.OPER, 'A0175', QTY_1,0)) V34
             , SUM(DECODE(A.OPER, 'A0176', QTY_1,0)) V35
             , SUM(DECODE(A.OPER, 'A0170', QTY_1,0)) V36
             , SUM(DECODE(A.OPER, 'A0180', QTY_1,0)) V37
             , SUM(DECODE(A.OPER, 'A0200', QTY_1,0)) V38
             , SUM(DECODE(A.OPER, 'A0201', QTY_1,0)) V39
             , SUM(DECODE(A.OPER, 'A0202', QTY_1,0)) V40
             , SUM(DECODE(A.OPER, 'A0210', QTY_1,0)) V41
             , SUM(DECODE(A.OPER, 'A0215', QTY_1,0)) V42
             , SUM(DECODE(A.OPER, 'A0220', QTY_1,0)) V43
             , SUM(DECODE(A.OPER, 'A0230', QTY_1,0)) V44
             , SUM(DECODE(A.OPER, 'A0300', QTY_1,0)) V45
             , SUM(DECODE(A.OPER, 'A0250', QTY_1,0)) V46
             , SUM(DECODE(A.OPER, 'A0305', QTY_1,0)) V47
             , SUM(DECODE(A.OPER, 'A0240', QTY_1,0)) V48
             , SUM(DECODE(A.OPER, 'A0260', QTY_1,0)) V49
             , SUM(DECODE(A.OPER, 'A0270', QTY_1,0)) V50
             , SUM(DECODE(A.OPER, 'A0290', QTY_1,0)) V51
             , SUM(DECODE(A.OPER, 'A0295', QTY_1,0)) V52
             , SUM(DECODE(A.OPER, 'A0280', QTY_1,0)) V53
             , SUM(DECODE(A.OPER, 'A0306', QTY_1,0)) V54
             , SUM(DECODE(A.OPER, 'A0307', QTY_1,0)) V55
             , SUM(DECODE(A.OPER, 'A0308', QTY_1,0)) V56
             , SUM(DECODE(A.OPER, 'A0310', QTY_1,0)) V57
             , SUM(DECODE(A.OPER, 'A0320', QTY_1,0)) V58
             , SUM(DECODE(A.OPER, 'A0330', QTY_1,0)) V59
             , SUM(DECODE(A.OPER, 'A1280', QTY_1,0)) V60
             , SUM(DECODE(A.OPER, 'A0333', QTY_1,0)) V61
             , SUM(DECODE(A.OPER, 'A0335', QTY_1,0)) V62
             , SUM(DECODE(A.OPER, 'A0337', QTY_1,0)) V63
             , SUM(DECODE(A.OPER, 'A0372', QTY_1,0)) V64
             , SUM(DECODE(A.OPER, 'A0395', QTY_1,0)) V65
             , SUM(DECODE(A.OPER, 'A0397', QTY_1,0)) V66
             , SUM(DECODE(A.OPER, 'A0340', QTY_1,0)) V67
             , SUM(DECODE(A.OPER, 'A0345', QTY_1,0)) V68
             , SUM(DECODE(A.OPER, 'A0350', QTY_1,0)) V69
             , SUM(DECODE(A.OPER, 'A0360', QTY_1,0)) V70
             , SUM(DECODE(A.OPER, 'A0370', QTY_1,0)) V71
             , SUM(DECODE(A.OPER, 'A0375', QTY_1,0)) V72
             , SUM(DECODE(A.OPER, 'A0380', QTY_1,0)) V73
             , SUM(DECODE(A.OPER, 'A0381', QTY_1,0)) V74
             , SUM(DECODE(A.OPER, 'A0382', QTY_1,0)) V75
             , SUM(DECODE(A.OPER, 'A0383', QTY_1,0)) V76
             , SUM(DECODE(A.OPER, 'A0385', QTY_1,0)) V77
             , SUM(DECODE(A.OPER, 'A0391', QTY_1,0)) V78
             , SUM(DECODE(A.OPER, 'A0399', QTY_1,0)) V79
             , SUM(DECODE(A.OPER, 'A0390', QTY_1,0)) V80
             , SUM(DECODE(A.OPER, 'A0400', QTY_1,0)) V81
             , SUM(DECODE(A.OPER, 'A0401', QTY_1,0)) V82
             , SUM(DECODE(A.OPER, 'A0500', QTY_1,0)) V83
             , SUM(DECODE(A.OPER, 'A0530', QTY_1,0)) V84
             , SUM(DECODE(A.OPER, 'A0531', QTY_1,0)) V85
             , SUM(DECODE(A.OPER, 'A0501', QTY_1,0)) V86
             , SUM(DECODE(A.OPER, 'A0540', QTY_1,0)) V87
             , SUM(DECODE(A.OPER, 'A0550', QTY_1,0)) V88
             , SUM(DECODE(A.OPER, 'A0600', QTY_1,0)) V89
             , SUM(DECODE(A.OPER, 'A0620', QTY_1,0)) V90
             , SUM(DECODE(A.OPER, 'A0660', QTY_1,0)) V91
             , SUM(DECODE(A.OPER, 'A0630', QTY_1,0)) V92
             , SUM(DECODE(A.OPER, 'A0650', QTY_1,0)) V93
             , SUM(DECODE(A.OPER, 'A0670', QTY_1,0)) V94
             , SUM(DECODE(A.OPER, 'A0720', QTY_1,0)) V95
             , SUM(DECODE(A.OPER, 'A0700', QTY_1,0)) V96
             , SUM(DECODE(A.OPER, 'A0339', QTY_1,0)) V97
             , SUM(DECODE(A.OPER, 'A0541', QTY_1,0)) V98
             , SUM(DECODE(A.OPER, 'A0551', QTY_1,0)) V99
             , SUM(DECODE(A.OPER, 'A0561', QTY_1,0)) V100
             , SUM(DECODE(A.OPER, 'A0601', QTY_1,0)) V101
             , SUM(DECODE(A.OPER, 'A0710', QTY_1,0)) V102
             , SUM(DECODE(A.OPER, 'A0800', QTY_1,0)) V103
             , SUM(DECODE(A.OPER, 'A0402', QTY_1,0)) V104
             , SUM(DECODE(A.OPER, 'A0502', QTY_1,0)) V105
             , SUM(DECODE(A.OPER, 'A0532', QTY_1,0)) V106
             , SUM(DECODE(A.OPER, 'A0801', QTY_1,0)) V107
             , SUM(DECODE(A.OPER, 'A0542', QTY_1,0)) V108
             , SUM(DECODE(A.OPER, 'A0552', QTY_1,0)) V109
             , SUM(DECODE(A.OPER, 'A0562', QTY_1,0)) V110
             , SUM(DECODE(A.OPER, 'A0602', QTY_1,0)) V111
             , SUM(DECODE(A.OPER, 'A0711', QTY_1,0)) V112
             , SUM(DECODE(A.OPER, 'A0802', QTY_1,0)) V113
             , SUM(DECODE(A.OPER, 'A0403', QTY_1,0)) V114
             , SUM(DECODE(A.OPER, 'A0503', QTY_1,0)) V115
             , SUM(DECODE(A.OPER, 'A0533', QTY_1,0)) V116
             , SUM(DECODE(A.OPER, 'A0543', QTY_1,0)) V117
             , SUM(DECODE(A.OPER, 'A0553', QTY_1,0)) V118
             , SUM(DECODE(A.OPER, 'A0563', QTY_1,0)) V119
             , SUM(DECODE(A.OPER, 'A0603', QTY_1,0)) V120
             , SUM(DECODE(A.OPER, 'A0712', QTY_1,0)) V121
             , SUM(DECODE(A.OPER, 'A0713', QTY_1,0)) V122
             , SUM(DECODE(A.OPER, 'A0803', QTY_1,0)) V123
             , SUM(DECODE(A.OPER, 'A0404', QTY_1,0)) V124
             , SUM(DECODE(A.OPER, 'A0504', QTY_1,0)) V125
             , SUM(DECODE(A.OPER, 'A0534', QTY_1,0)) V126
             , SUM(DECODE(A.OPER, 'A0544', QTY_1,0)) V127
             , SUM(DECODE(A.OPER, 'A0554', QTY_1,0)) V128
             , SUM(DECODE(A.OPER, 'A0564', QTY_1,0)) V129
             , SUM(DECODE(A.OPER, 'A0604', QTY_1,0)) V130
             , SUM(DECODE(A.OPER, 'A0714', QTY_1,0)) V131
             , SUM(DECODE(A.OPER, 'A0804', QTY_1,0)) V132
             , SUM(DECODE(A.OPER, 'A0405', QTY_1,0)) V133
             , SUM(DECODE(A.OPER, 'A0505', QTY_1,0)) V134
             , SUM(DECODE(A.OPER, 'A0535', QTY_1,0)) V135
             , SUM(DECODE(A.OPER, 'A0545', QTY_1,0)) V136
             , SUM(DECODE(A.OPER, 'A0555', QTY_1,0)) V137
             , SUM(DECODE(A.OPER, 'A0565', QTY_1,0)) V138
             , SUM(DECODE(A.OPER, 'A0605', QTY_1,0)) V139
             , SUM(DECODE(A.OPER, 'A0715', QTY_1,0)) V140
             , SUM(DECODE(A.OPER, 'A0805', QTY_1,0)) V141
             , SUM(DECODE(A.OPER, 'A0406', QTY_1,0)) V142
             , SUM(DECODE(A.OPER, 'A0506', QTY_1,0)) V143
             , SUM(DECODE(A.OPER, 'A0536', QTY_1,0)) V144
             , SUM(DECODE(A.OPER, 'A0546', QTY_1,0)) V145
             , SUM(DECODE(A.OPER, 'A0556', QTY_1,0)) V146
             , SUM(DECODE(A.OPER, 'A0566', QTY_1,0)) V147
             , SUM(DECODE(A.OPER, 'A0606', QTY_1,0)) V148
             , SUM(DECODE(A.OPER, 'A0716', QTY_1,0)) V149
             , SUM(DECODE(A.OPER, 'A0806', QTY_1,0)) V150
             , SUM(DECODE(A.OPER, 'A0407', QTY_1,0)) V151
             , SUM(DECODE(A.OPER, 'A0507', QTY_1,0)) V152
             , SUM(DECODE(A.OPER, 'A0537', QTY_1,0)) V153
             , SUM(DECODE(A.OPER, 'A0547', QTY_1,0)) V154
             , SUM(DECODE(A.OPER, 'A0557', QTY_1,0)) V155
             , SUM(DECODE(A.OPER, 'A0567', QTY_1,0)) V156
             , SUM(DECODE(A.OPER, 'A0607', QTY_1,0)) V157
             , SUM(DECODE(A.OPER, 'A0717', QTY_1,0)) V158
             , SUM(DECODE(A.OPER, 'A0807', QTY_1,0)) V159
             , SUM(DECODE(A.OPER, 'A0408', QTY_1,0)) V160
             , SUM(DECODE(A.OPER, 'A0508', QTY_1,0)) V161
             , SUM(DECODE(A.OPER, 'A0538', QTY_1,0)) V162
             , SUM(DECODE(A.OPER, 'A0558', QTY_1,0)) V163
             , SUM(DECODE(A.OPER, 'A0568', QTY_1,0)) V164
             , SUM(DECODE(A.OPER, 'A0608', QTY_1,0)) V165
             , SUM(DECODE(A.OPER, 'A0808', QTY_1,0)) V166
             , SUM(DECODE(A.OPER, 'A0409', QTY_1,0)) V167
             , SUM(DECODE(A.OPER, 'A0509', QTY_1,0)) V168
             , SUM(DECODE(A.OPER, 'A0539', QTY_1,0)) V169
             , SUM(DECODE(A.OPER, 'A0559', QTY_1,0)) V170
             , SUM(DECODE(A.OPER, 'A0569', QTY_1,0)) V171
             , SUM(DECODE(A.OPER, 'A0609', QTY_1,0)) V172
             , SUM(DECODE(A.OPER, 'A0809', QTY_1,0)) V173
             , SUM(DECODE(A.OPER, 'A080A', QTY_1,0)) V174
             , SUM(DECODE(A.OPER, 'A0890', QTY_1,0)) V175
             , SUM(DECODE(A.OPER, 'A0900', QTY_1,0)) V176
             , SUM(DECODE(A.OPER, 'A0910', QTY_1,0)) V177
             , SUM(DECODE(A.OPER, 'A0920', QTY_1,0)) V178
             , SUM(DECODE(A.OPER, 'A0930', QTY_1,0)) V179
             , SUM(DECODE(A.OPER, 'A0935', QTY_1,0)) V180
             , SUM(DECODE(A.OPER, 'A040A', QTY_1,0)) V181
             , SUM(DECODE(A.OPER, 'A0950', QTY_1,0)) V182
             , SUM(DECODE(A.OPER, 'A053A', QTY_1,0)) V183
             , SUM(DECODE(A.OPER, 'A0970', QTY_1,0)) V184
             , SUM(DECODE(A.OPER, 'A0940', QTY_1,0)) V185
             , SUM(DECODE(A.OPER, 'A0980', QTY_1,0)) V186
             , SUM(DECODE(A.OPER, 'A1000', QTY_1,0)) V187
             , SUM(DECODE(A.OPER, 'A055A', QTY_1,0)) V188
             , SUM(DECODE(A.OPER, 'A060A', QTY_1,0)) V189
             , SUM(DECODE(A.OPER, 'A1040', QTY_1,0)) V190
             , SUM(DECODE(A.OPER, 'A1070', QTY_1,0)) V191
             , SUM(DECODE(A.OPER, 'A1020', QTY_1,0)) V192
             , SUM(DECODE(A.OPER, 'A1100', QTY_1,0)) V193
             , SUM(DECODE(A.OPER, 'A1110', QTY_1,0)) V194
             , SUM(DECODE(A.OPER, 'A1120', QTY_1,0)) V195
             , SUM(DECODE(A.OPER, 'A1130', QTY_1,0)) V196
             , SUM(DECODE(A.OPER, 'A1140', QTY_1,0)) V197
             , SUM(DECODE(A.OPER, 'A1150', QTY_1,0)) V198
             , SUM(DECODE(A.OPER, 'A1600', QTY_1,0)) V199
             , SUM(DECODE(A.OPER, 'A1650', QTY_1,0)) V200
             , SUM(DECODE(A.OPER, 'A1170', QTY_1,0)) V201
             , SUM(DECODE(A.OPER, 'A1180', QTY_1,0)) V202
             , SUM(DECODE(A.OPER, 'A1200', QTY_1,0)) V203
             , SUM(DECODE(A.OPER, 'A1230', QTY_1,0)) V204
             , SUM(DECODE(A.OPER, 'A1240', QTY_1,0)) V205
             , SUM(DECODE(A.OPER, 'A1250', QTY_1,0)) V206
             , SUM(DECODE(A.OPER, 'A1260', QTY_1,0)) V207
             , SUM(DECODE(A.OPER, 'A1270', QTY_1,0)) V208
             , SUM(DECODE(A.OPER, 'A1300', QTY_1,0)) V209
             , SUM(DECODE(A.OPER, 'A1350', QTY_1,0)) V210
             , SUM(DECODE(A.OPER, 'A1370', QTY_1,0)) V211
             , SUM(DECODE(A.OPER, 'A1380', QTY_1,0)) V212
             , SUM(DECODE(A.OPER, 'A1050', QTY_1,0)) V213
             , SUM(DECODE(A.OPER, 'A1420', QTY_1,0)) V214
             , SUM(DECODE(A.OPER, 'A1440', QTY_1,0)) V215
             , SUM(DECODE(A.OPER, 'A1450', QTY_1,0)) V216
             , SUM(DECODE(A.OPER, 'A1821', QTY_1,0)) V217
             , SUM(DECODE(A.OPER, 'A1460', QTY_1,0)) V218
             , SUM(DECODE(A.OPER, 'A1470', QTY_1,0)) V219
             , SUM(DECODE(A.OPER, 'A1500', QTY_1,0)) V220
             , SUM(DECODE(A.OPER, 'A1550', QTY_1,0)) V221
             , SUM(DECODE(A.OPER, 'A1610', QTY_1,0)) V222
             , SUM(DECODE(A.OPER, 'A1560', QTY_1,0)) V223
             , SUM(DECODE(A.OPER, 'A1720', QTY_1,0)) V224
             , SUM(DECODE(A.OPER, 'A1730', QTY_1,0)) V225
             , SUM(DECODE(A.OPER, 'A1740', QTY_1,0)) V226
             , SUM(DECODE(A.OPER, 'A1750', QTY_1,0)) V227
             , SUM(DECODE(A.OPER, 'A1755', QTY_1,0)) V228
             , SUM(DECODE(A.OPER, 'A1760', QTY_1,0)) V229
             , SUM(DECODE(A.OPER, 'A1765', QTY_1,0)) V230
             , SUM(DECODE(A.OPER, 'A1766', QTY_1,0)) V231
             , SUM(DECODE(A.OPER, 'A1763', QTY_1,0)) V232
             , SUM(DECODE(A.OPER, 'A1770', QTY_1,0)) V233
             , SUM(DECODE(A.OPER, 'A1780', QTY_1,0)) V234
             , SUM(DECODE(A.OPER, 'A1790', QTY_1,0)) V235
             , SUM(DECODE(A.OPER, 'A1795', QTY_1,0)) V236
             , SUM(DECODE(A.OPER, 'A1860', QTY_1,0)) V237
             , SUM(DECODE(A.OPER, 'A1850', QTY_1,0)) V238
             , SUM(DECODE(A.OPER, 'A1390', QTY_1,0)) V239
             , SUM(DECODE(A.OPER, 'A1800', QTY_1,0)) V240
             , SUM(DECODE(A.OPER, 'A1805', QTY_1,0)) V241
             , SUM(DECODE(A.OPER, 'A1810', QTY_1,0)) V242
             , SUM(DECODE(A.OPER, 'A1811', QTY_1,0)) V243
             , SUM(DECODE(A.OPER, 'A1812', QTY_1,0)) V244
             , SUM(DECODE(A.OPER, 'A1816', QTY_1,0)) V245
             , SUM(DECODE(A.OPER, 'A1820', QTY_1,0)) V246
             , SUM(DECODE(A.OPER, 'A1825', QTY_1,0)) V247
             , SUM(DECODE(A.OPER, 'A1826', QTY_1,0)) V248
             , SUM(DECODE(A.OPER, 'A1920', QTY_1,0)) V249
             , SUM(DECODE(A.OPER, 'A1960', QTY_1,0)) V250
             , SUM(DECODE(A.OPER, 'A1815', QTY_1,0)) V251
             , SUM(DECODE(A.OPER, 'A1830', QTY_1,0)) V252
             , SUM(DECODE(A.OPER, 'A1710', QTY_1,0)) V253
             , SUM(DECODE(A.OPER, 'A1840', QTY_1,0)) V254
             , SUM(DECODE(A.OPER, 'A1900', QTY_1,0)) V255
             , SUM(DECODE(A.OPER, 'A1910', QTY_1,0)) V256
             , SUM(DECODE(A.OPER, 'A1950', QTY_1,0)) V257
             , SUM(DECODE(A.OPER, 'A2000', QTY_1,0)) V258
             , SUM(DECODE(A.OPER, 'A2010', QTY_1,0)) V259
             , SUM(DECODE(A.OPER, 'A2020', QTY_1,0)) V260
             , SUM(DECODE(A.OPER, 'A2025', QTY_1,0)) V261
             , SUM(DECODE(A.OPER, 'A1819', QTY_1,0)) V262
             , SUM(DECODE(A.OPER, 'A2030', QTY_1,0)) V263
             , SUM(DECODE(A.OPER, 'A2040', QTY_1,0)) V264
             , SUM(DECODE(A.OPER, 'A2041', QTY_1,0)) V265
             , SUM(DECODE(A.OPER, 'A2042', QTY_1,0)) V266
             , SUM(DECODE(A.OPER, 'A2070', QTY_1,0)) V267
             , SUM(DECODE(A.OPER, 'A2050', QTY_1,0)) V268
             , SUM(DECODE(A.OPER, 'A2150', QTY_1,0)) V269
             , SUM(DECODE(A.OPER, 'A2200', QTY_1,0)) V270
             , SUM(DECODE(A.OPER, 'A2100', QTY_1,0)) V271
             , SUM(DECODE(A.OPER, 'A2300', QTY_1,0)) V272
             , SUM(DECODE(A.OPER, 'A2350', QTY_1,0)) V273
             , SUM(DECODE(A.OPER, 'AZ009', QTY_1,0)) V274
             , SUM(DECODE(A.OPER, 'AZ010', QTY_1,0)) V275
          FROM RWIPLOTSTS_BOH A, CLOTCRDDAT@RPTTOMES B 
         WHERE 1=1 
           AND A.CUTOFF_DT = '2020041022' 
           AND A.FACTORY = B.FACTORY(+) 
           AND A.MAT_ID = B.MAT_ID(+) 
           AND A.LOT_DEL_FLAG = ' ' 
           AND A.LOT_TYPE = 'W' 
           AND A.MAT_ID LIKE 'FP%' 
           AND A.FACTORY = 'HMVA2' 
           AND A.OPER BETWEEN 'A0000' AND 'AZ010' 
         GROUP BY A.MAT_ID 
       ) WIP 
     , ( 
        SELECT MAT_ID 
             , SUM(S1_FAC_OUT_QTY_1+S2_FAC_OUT_QTY_1+S3_FAC_OUT_QTY_1) AS SHP_QTY  
          FROM RSUMFACMOV
         WHERE CM_KEY_1 = 'HMVA2' 
           AND MAT_ID LIKE 'FP%' 
           AND WORK_DATE = '20200410'
           AND FACTORY NOT IN ('RETURN')
           AND LOT_TYPE = 'W'
         GROUP BY MAT_ID 
       ) SHP 
     , ( 
        SELECT MAT_ID 
             , SUM(DECODE(WORK_DATE, '20200406', NVL(S1_FAC_OUT_QTY_1 + S2_FAC_OUT_QTY_1 + S3_FAC_OUT_QTY_1 + S4_FAC_OUT_QTY_1, 0), 0)) AS ASSY_MONDAY  
             , SUM(NVL(S1_FAC_OUT_QTY_1 + S2_FAC_OUT_QTY_1 + S3_FAC_OUT_QTY_1 + S4_FAC_OUT_QTY_1, 0)) AS ASSY_WEEK 
          FROM RSUMFACMOV 
         WHERE CM_KEY_1 = 'HMVA2' 
           AND LOT_TYPE = 'W'
           AND CM_KEY_2 = 'PROD' 
           AND CM_KEY_3 LIKE 'P%' 
           AND MAT_ID LIKE 'SES%' 
           AND WORK_DATE BETWEEN '20200406' AND '20200412'
         GROUP BY MAT_ID 
       ) SHP1 
     , ( 
        SELECT MAT_ID 
             , SUM(PLAN_QTY) PLAN_W1 
             , SUM(DECODE(PLAN_DAY, '20200406', 0, PLAN_QTY)) AS PLAN_W2 
          FROM ( 
                SELECT * 
                  FROM CWIPPLNDAY 
                 WHERE 1=1 
                   AND FACTORY = 'HMVA2' 
                   AND PLAN_DAY BETWEEN '20200406' AND '20200412'
                   AND IN_OUT_FLAG = 'OUT'
                   AND CLASS = 'ASSY'
               ) B
         GROUP BY MAT_ID 
       ) PLN 
 WHERE 1=1 
   AND MAT.MAT_ID = WIP.MAT_ID(+) 
   AND MAT.MAT_ID = SHP.MAT_ID(+) 
   AND MAT.MAT_ID = SHP1.MAT_ID(+) 
   AND MAT.MAT_ID = PLN.MAT_ID(+) 
   AND MAT.FACTORY = 'HMVA2' 
   AND MAT.MAT_ID LIKE 'FP%' 
 GROUP BY MAT.MAT_GRP_1,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT.MAT_CMF_10,  ' ', MAT.MAT_ID,  ' ',  ' '
HAVING (NVL(SUM(TOTAL),0) + NVL(SUM(SHP_QTY),0)  + NVL(SUM(ASSY_WEEK),0) + NVL(SUM(PLAN_W1),0)) > 0     
 ORDER BY MAT.MAT_GRP_1,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT.MAT_CMF_10,  ' ', MAT.MAT_ID,  ' ',  ' ' 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE) AS This_Week_First_Day 
     , MAX(SYS_DATE) AS This_Week_Last_Day
  FROM MWIPCALDEF
 WHERE 1=1 
   AND CALENDAR_ID = 'SE'
   AND (PLAN_YEAR,PLAN_WEEK) IN (
                                 SELECT PLAN_YEAR,PLAN_WEEK 
                                   FROM MWIPCALDEF 
                                  WHERE 1=1
                                    AND CALENDAR_ID = 'SE'
                                    AND SYS_DATE = '20200410')

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT NVL((SELECT DATA_1 FROM MGCMTBLDAT WHERE TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = MAT.MAT_GRP_1 AND ROWNUM=1), '-') AS CUSTOMER,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT.MAT_CMF_10 AS PIN_TYPE,  ' ', MAT.MAT_ID AS PRODUCT,  ' ',  ' ' 
     , ROUND(SUM(TOTAL)/1,0) AS TOTAL 
     , ROUND(SUM(V0)/1,0) AS  Val0
     , ROUND(SUM(V1)/1,0) AS  Val1
     , ROUND(SUM(V2)/1,0) AS  Val2
     , ROUND(SUM(V3)/1,0) AS  Val3
     , ROUND(SUM(V4)/1,0) AS  Val4
     , ROUND(SUM(V5)/1,0) AS  Val5
     , ROUND(SUM(V6)/1,0) AS  Val6
     , ROUND(SUM(V7)/1,0) AS  Val7
     , ROUND(SUM(V8)/1,0) AS  Val8
     , ROUND(SUM(V9)/1,0) AS  Val9
     , ROUND(SUM(V10)/1,0) AS  Val10
     , ROUND(SUM(V11)/1,0) AS  Val11
     , ROUND(SUM(V12)/1,0) AS  Val12
     , ROUND(SUM(V13)/1,0) AS  Val13
     , ROUND(SUM(V14)/1,0) AS  Val14
     , ROUND(SUM(V15)/1,0) AS  Val15
     , ROUND(SUM(V16)/1,0) AS  Val16
     , ROUND(SUM(V17)/1,0) AS  Val17
     , ROUND(SUM(V18)/1,0) AS  Val18
     , ROUND(SUM(V19)/1,0) AS  Val19
     , ROUND(SUM(V20)/1,0) AS  Val20
     , ROUND(SUM(V21)/1,0) AS  Val21
     , ROUND(SUM(V22)/1,0) AS  Val22
     , ROUND(SUM(V23)/1,0) AS  Val23
     , ROUND(SUM(V24)/1,0) AS  Val24
     , ROUND(SUM(V25)/1,0) AS  Val25
     , ROUND(SUM(V26)/1,0) AS  Val26
     , ROUND(SUM(V27)/1,0) AS  Val27
     , ROUND(SUM(V28)/1,0) AS  Val28
     , ROUND(SUM(V29)/1,0) AS  Val29
     , ROUND(SUM(V30)/1,0) AS  Val30
     , ROUND(SUM(V31)/1,0) AS  Val31
     , ROUND(SUM(V32)/1,0) AS  Val32
     , ROUND(SUM(V33)/1,0) AS  Val33
     , ROUND(SUM(V34)/1,0) AS  Val34
     , ROUND(SUM(V35)/1,0) AS  Val35
     , ROUND(SUM(V36)/1,0) AS  Val36
     , ROUND(SUM(V37)/1,0) AS  Val37
     , ROUND(SUM(V38)/1,0) AS  Val38
     , ROUND(SUM(V39)/1,0) AS  Val39
     , ROUND(SUM(V40)/1,0) AS  Val40
     , ROUND(SUM(V41)/1,0) AS  Val41
     , ROUND(SUM(V42)/1,0) AS  Val42
     , ROUND(SUM(V43)/1,0) AS  Val43
     , ROUND(SUM(V44)/1,0) AS  Val44
     , ROUND(SUM(V45)/1,0) AS  Val45
     , ROUND(SUM(V46)/1,0) AS  Val46
     , ROUND(SUM(V47)/1,0) AS  Val47
     , ROUND(SUM(V48)/1,0) AS  Val48
     , ROUND(SUM(V49)/1,0) AS  Val49
     , ROUND(SUM(V50)/1,0) AS  Val50
     , ROUND(SUM(V51)/1,0) AS  Val51
     , ROUND(SUM(V52)/1,0) AS  Val52
     , ROUND(SUM(V53)/1,0) AS  Val53
     , ROUND(SUM(V54)/1,0) AS  Val54
     , ROUND(SUM(V55)/1,0) AS  Val55
     , ROUND(SUM(V56)/1,0) AS  Val56
     , ROUND(SUM(V57)/1,0) AS  Val57
     , ROUND(SUM(V58)/1,0) AS  Val58
     , ROUND(SUM(V59)/1,0) AS  Val59
     , ROUND(SUM(V60)/1,0) AS  Val60
     , ROUND(SUM(V61)/1,0) AS  Val61
     , ROUND(SUM(V62)/1,0) AS  Val62
     , ROUND(SUM(V63)/1,0) AS  Val63
     , ROUND(SUM(V64)/1,0) AS  Val64
     , ROUND(SUM(V65)/1,0) AS  Val65
     , ROUND(SUM(V66)/1,0) AS  Val66
     , ROUND(SUM(V67)/1,0) AS  Val67
     , ROUND(SUM(V68)/1,0) AS  Val68
     , ROUND(SUM(V69)/1,0) AS  Val69
     , ROUND(SUM(V70)/1,0) AS  Val70
     , ROUND(SUM(V71)/1,0) AS  Val71
     , ROUND(SUM(V72)/1,0) AS  Val72
     , ROUND(SUM(V73)/1,0) AS  Val73
     , ROUND(SUM(V74)/1,0) AS  Val74
     , ROUND(SUM(V75)/1,0) AS  Val75
     , ROUND(SUM(V76)/1,0) AS  Val76
     , ROUND(SUM(V77)/1,0) AS  Val77
     , ROUND(SUM(V78)/1,0) AS  Val78
     , ROUND(SUM(V79)/1,0) AS  Val79
     , ROUND(SUM(V80)/1,0) AS  Val80
     , ROUND(SUM(V81)/1,0) AS  Val81
     , ROUND(SUM(V82)/1,0) AS  Val82
     , ROUND(SUM(V83)/1,0) AS  Val83
     , ROUND(SUM(V84)/1,0) AS  Val84
     , ROUND(SUM(V85)/1,0) AS  Val85
     , ROUND(SUM(V86)/1,0) AS  Val86
     , ROUND(SUM(V87)/1,0) AS  Val87
     , ROUND(SUM(V88)/1,0) AS  Val88
     , ROUND(SUM(V89)/1,0) AS  Val89
     , ROUND(SUM(V90)/1,0) AS  Val90
     , ROUND(SUM(V91)/1,0) AS  Val91
     , ROUND(SUM(V92)/1,0) AS  Val92
     , ROUND(SUM(V93)/1,0) AS  Val93
     , ROUND(SUM(V94)/1,0) AS  Val94
     , ROUND(SUM(V95)/1,0) AS  Val95
     , ROUND(SUM(V96)/1,0) AS  Val96
     , ROUND(SUM(V97)/1,0) AS  Val97
     , ROUND(SUM(V98)/1,0) AS  Val98
     , ROUND(SUM(V99)/1,0) AS  Val99
     , ROUND(SUM(V100)/1,0) AS  Val100
     , ROUND(SUM(V101)/1,0) AS  Val101
     , ROUND(SUM(V102)/1,0) AS  Val102
     , ROUND(SUM(V103)/1,0) AS  Val103
     , ROUND(SUM(V104)/1,0) AS  Val104
     , ROUND(SUM(V105)/1,0) AS  Val105
     , ROUND(SUM(V106)/1,0) AS  Val106
     , ROUND(SUM(V107)/1,0) AS  Val107
     , ROUND(SUM(V108)/1,0) AS  Val108
     , ROUND(SUM(V109)/1,0) AS  Val109
     , ROUND(SUM(V110)/1,0) AS  Val110
     , ROUND(SUM(V111)/1,0) AS  Val111
     , ROUND(SUM(V112)/1,0) AS  Val112
     , ROUND(SUM(V113)/1,0) AS  Val113
     , ROUND(SUM(V114)/1,0) AS  Val114
     , ROUND(SUM(V115)/1,0) AS  Val115
     , ROUND(SUM(V116)/1,0) AS  Val116
     , ROUND(SUM(V117)/1,0) AS  Val117
     , ROUND(SUM(V118)/1,0) AS  Val118
     , ROUND(SUM(V119)/1,0) AS  Val119
     , ROUND(SUM(V120)/1,0) AS  Val120
     , ROUND(SUM(V121)/1,0) AS  Val121
     , ROUND(SUM(V122)/1,0) AS  Val122
     , ROUND(SUM(V123)/1,0) AS  Val123
     , ROUND(SUM(V124)/1,0) AS  Val124
     , ROUND(SUM(V125)/1,0) AS  Val125
     , ROUND(SUM(V126)/1,0) AS  Val126
     , ROUND(SUM(V127)/1,0) AS  Val127
     , ROUND(SUM(V128)/1,0) AS  Val128
     , ROUND(SUM(V129)/1,0) AS  Val129
     , ROUND(SUM(V130)/1,0) AS  Val130
     , ROUND(SUM(V131)/1,0) AS  Val131
     , ROUND(SUM(V132)/1,0) AS  Val132
     , ROUND(SUM(V133)/1,0) AS  Val133
     , ROUND(SUM(V134)/1,0) AS  Val134
     , ROUND(SUM(V135)/1,0) AS  Val135
     , ROUND(SUM(V136)/1,0) AS  Val136
     , ROUND(SUM(V137)/1,0) AS  Val137
     , ROUND(SUM(V138)/1,0) AS  Val138
     , ROUND(SUM(V139)/1,0) AS  Val139
     , ROUND(SUM(V140)/1,0) AS  Val140
     , ROUND(SUM(V141)/1,0) AS  Val141
     , ROUND(SUM(V142)/1,0) AS  Val142
     , ROUND(SUM(V143)/1,0) AS  Val143
     , ROUND(SUM(V144)/1,0) AS  Val144
     , ROUND(SUM(V145)/1,0) AS  Val145
     , ROUND(SUM(V146)/1,0) AS  Val146
     , ROUND(SUM(V147)/1,0) AS  Val147
     , ROUND(SUM(V148)/1,0) AS  Val148
     , ROUND(SUM(V149)/1,0) AS  Val149
     , ROUND(SUM(V150)/1,0) AS  Val150
     , ROUND(SUM(V151)/1,0) AS  Val151
     , ROUND(SUM(V152)/1,0) AS  Val152
     , ROUND(SUM(V153)/1,0) AS  Val153
     , ROUND(SUM(V154)/1,0) AS  Val154
     , ROUND(SUM(V155)/1,0) AS  Val155
     , ROUND(SUM(V156)/1,0) AS  Val156
     , ROUND(SUM(V157)/1,0) AS  Val157
     , ROUND(SUM(V158)/1,0) AS  Val158
     , ROUND(SUM(V159)/1,0) AS  Val159
     , ROUND(SUM(V160)/1,0) AS  Val160
     , ROUND(SUM(V161)/1,0) AS  Val161
     , ROUND(SUM(V162)/1,0) AS  Val162
     , ROUND(SUM(V163)/1,0) AS  Val163
     , ROUND(SUM(V164)/1,0) AS  Val164
     , ROUND(SUM(V165)/1,0) AS  Val165
     , ROUND(SUM(V166)/1,0) AS  Val166
     , ROUND(SUM(V167)/1,0) AS  Val167
     , ROUND(SUM(V168)/1,0) AS  Val168
     , ROUND(SUM(V169)/1,0) AS  Val169
     , ROUND(SUM(V170)/1,0) AS  Val170
     , ROUND(SUM(V171)/1,0) AS  Val171
     , ROUND(SUM(V172)/1,0) AS  Val172
     , ROUND(SUM(V173)/1,0) AS  Val173
     , ROUND(SUM(V174)/1,0) AS  Val174
     , ROUND(SUM(V175)/1,0) AS  Val175
     , ROUND(SUM(V176)/1,0) AS  Val176
     , ROUND(SUM(V177)/1,0) AS  Val177
     , ROUND(SUM(V178)/1,0) AS  Val178
     , ROUND(SUM(V179)/1,0) AS  Val179
     , ROUND(SUM(V180)/1,0) AS  Val180
     , ROUND(SUM(V181)/1,0) AS  Val181
     , ROUND(SUM(V182)/1,0) AS  Val182
     , ROUND(SUM(V183)/1,0) AS  Val183
     , ROUND(SUM(V184)/1,0) AS  Val184
     , ROUND(SUM(V185)/1,0) AS  Val185
     , ROUND(SUM(V186)/1,0) AS  Val186
     , ROUND(SUM(V187)/1,0) AS  Val187
     , ROUND(SUM(V188)/1,0) AS  Val188
     , ROUND(SUM(V189)/1,0) AS  Val189
     , ROUND(SUM(V190)/1,0) AS  Val190
     , ROUND(SUM(V191)/1,0) AS  Val191
     , ROUND(SUM(V192)/1,0) AS  Val192
     , ROUND(SUM(V193)/1,0) AS  Val193
     , ROUND(SUM(V194)/1,0) AS  Val194
     , ROUND(SUM(V195)/1,0) AS  Val195
     , ROUND(SUM(V196)/1,0) AS  Val196
     , ROUND(SUM(V197)/1,0) AS  Val197
     , ROUND(SUM(V198)/1,0) AS  Val198
     , ROUND(SUM(V199)/1,0) AS  Val199
     , ROUND(SUM(V200)/1,0) AS  Val200
     , ROUND(SUM(V201)/1,0) AS  Val201
     , ROUND(SUM(V202)/1,0) AS  Val202
     , ROUND(SUM(V203)/1,0) AS  Val203
     , ROUND(SUM(V204)/1,0) AS  Val204
     , ROUND(SUM(V205)/1,0) AS  Val205
     , ROUND(SUM(V206)/1,0) AS  Val206
     , ROUND(SUM(V207)/1,0) AS  Val207
     , ROUND(SUM(V208)/1,0) AS  Val208
     , ROUND(SUM(V209)/1,0) AS  Val209
     , ROUND(SUM(V210)/1,0) AS  Val210
     , ROUND(SUM(V211)/1,0) AS  Val211
     , ROUND(SUM(V212)/1,0) AS  Val212
     , ROUND(SUM(V213)/1,0) AS  Val213
     , ROUND(SUM(V214)/1,0) AS  Val214
     , ROUND(SUM(V215)/1,0) AS  Val215
     , ROUND(SUM(V216)/1,0) AS  Val216
     , ROUND(SUM(V217)/1,0) AS  Val217
     , ROUND(SUM(V218)/1,0) AS  Val218
     , ROUND(SUM(V219)/1,0) AS  Val219
     , ROUND(SUM(V220)/1,0) AS  Val220
     , ROUND(SUM(V221)/1,0) AS  Val221
     , ROUND(SUM(V222)/1,0) AS  Val222
     , ROUND(SUM(V223)/1,0) AS  Val223
     , ROUND(SUM(V224)/1,0) AS  Val224
     , ROUND(SUM(V225)/1,0) AS  Val225
     , ROUND(SUM(V226)/1,0) AS  Val226
     , ROUND(SUM(V227)/1,0) AS  Val227
     , ROUND(SUM(V228)/1,0) AS  Val228
     , ROUND(SUM(V229)/1,0) AS  Val229
     , ROUND(SUM(V230)/1,0) AS  Val230
     , ROUND(SUM(V231)/1,0) AS  Val231
     , ROUND(SUM(V232)/1,0) AS  Val232
     , ROUND(SUM(V233)/1,0) AS  Val233
     , ROUND(SUM(V234)/1,0) AS  Val234
     , ROUND(SUM(V235)/1,0) AS  Val235
     , ROUND(SUM(V236)/1,0) AS  Val236
     , ROUND(SUM(V237)/1,0) AS  Val237
     , ROUND(SUM(V238)/1,0) AS  Val238
     , ROUND(SUM(V239)/1,0) AS  Val239
     , ROUND(SUM(V240)/1,0) AS  Val240
     , ROUND(SUM(V241)/1,0) AS  Val241
     , ROUND(SUM(V242)/1,0) AS  Val242
     , ROUND(SUM(V243)/1,0) AS  Val243
     , ROUND(SUM(V244)/1,0) AS  Val244
     , ROUND(SUM(V245)/1,0) AS  Val245
     , ROUND(SUM(V246)/1,0) AS  Val246
     , ROUND(SUM(V247)/1,0) AS  Val247
     , ROUND(SUM(V248)/1,0) AS  Val248
     , ROUND(SUM(V249)/1,0) AS  Val249
     , ROUND(SUM(V250)/1,0) AS  Val250
     , ROUND(SUM(V251)/1,0) AS  Val251
     , ROUND(SUM(V252)/1,0) AS  Val252
     , ROUND(SUM(V253)/1,0) AS  Val253
     , ROUND(SUM(V254)/1,0) AS  Val254
     , ROUND(SUM(V255)/1,0) AS  Val255
     , ROUND(SUM(V256)/1,0) AS  Val256
     , ROUND(SUM(V257)/1,0) AS  Val257
     , ROUND(SUM(V258)/1,0) AS  Val258
     , ROUND(SUM(V259)/1,0) AS  Val259
     , ROUND(SUM(V260)/1,0) AS  Val260
     , ROUND(SUM(V261)/1,0) AS  Val261
     , ROUND(SUM(V262)/1,0) AS  Val262
     , ROUND(SUM(V263)/1,0) AS  Val263
     , ROUND(SUM(V264)/1,0) AS  Val264
     , ROUND(SUM(V265)/1,0) AS  Val265
     , ROUND(SUM(V266)/1,0) AS  Val266
     , ROUND(SUM(V267)/1,0) AS  Val267
     , ROUND(SUM(V268)/1,0) AS  Val268
     , ROUND(SUM(V269)/1,0) AS  Val269
     , ROUND(SUM(V270)/1,0) AS  Val270
     , ROUND(SUM(V271)/1,0) AS  Val271
     , ROUND(SUM(V272)/1,0) AS  Val272
     , ROUND(SUM(V273)/1,0) AS  Val273
     , ROUND(SUM(V274)/1,0) AS  Val274
     , ROUND(SUM(V275)/1,0) AS  Val275
     , TRUNC(SUM(SHP_QTY)/1,0) AS SHP_QTY 
     , ROUND(DECODE(TO_CHAR(TO_DATE('20200410','YYYYMMDD'),'D'), 2, SUM(NVL(PLN.PLAN_W1,0)), 3, SUM(NVL(PLN.PLAN_W1,0)), SUM(NVL(PLN.PLAN_W2,0)) + SUM(NVL(SHP1.ASSY_MONDAY,0)))/1,0) AS PLAN_W1
     , ROUND(SUM(NVL(SHP1.ASSY_WEEK,0))/1,0)
     , ROUND((DECODE(TO_CHAR(TO_DATE('20200410','YYYYMMDD'),'D'), 2, SUM(NVL(PLN.PLAN_W1,0)), 3, SUM(NVL(PLN.PLAN_W1,0)), SUM(NVL(PLN.PLAN_W2,0)) + SUM(NVL(SHP1.ASSY_MONDAY,0)))) - SUM(NVL(SHP1.ASSY_WEEK,0))/1,0) AS LACK_WEEK
  FROM MWIPMATDEF MAT 
     , ( 
        SELECT A.MAT_ID, MAX(B.EMC_1) AS EMC_1 
             , SUM(QTY_1) AS TOTAL 
             , MAX((SELECT ATTR_VALUE FROM MATRNAMSTS WHERE FACTORY = 'HMVA2' AND ATTR_TYPE = 'MAT_ETC' AND ATTR_NAME = DECODE(LOT_CMF_2, 'SE', 'SEC_VERSION', 'HX', 'HX_VERSION') AND ATTR_KEY = A.MAT_ID)) AS VERSION 
             , SUM(DECODE(A.OPER, 'A0000', QTY_1,0)) V0
             , SUM(DECODE(A.OPER, 'A0005', QTY_1,0)) V1
             , SUM(DECODE(A.OPER, 'A000N', QTY_1,0)) V2
             , SUM(DECODE(A.OPER, 'A0010', QTY_1,0)) V3
             , SUM(DECODE(A.OPER, 'A0012', QTY_1,0)) V4
             , SUM(DECODE(A.OPER, 'A0013', QTY_1,0)) V5
             , SUM(DECODE(A.OPER, 'A0015', QTY_1,0)) V6
             , SUM(DECODE(A.OPER, 'A0020', QTY_1,0)) V7
             , SUM(DECODE(A.OPER, 'A0055', QTY_1,0)) V8
             , SUM(DECODE(A.OPER, 'A0023', QTY_1,0)) V9
             , SUM(DECODE(A.OPER, 'A0025', QTY_1,0)) V10
             , SUM(DECODE(A.OPER, 'A0030', QTY_1,0)) V11
             , SUM(DECODE(A.OPER, 'A0190', QTY_1,0)) V12
             , SUM(DECODE(A.OPER, 'A0033', QTY_1,0)) V13
             , SUM(DECODE(A.OPER, 'A0040', QTY_1,0)) V14
             , SUM(DECODE(A.OPER, 'A0041', QTY_1,0)) V15
             , SUM(DECODE(A.OPER, 'A0042', QTY_1,0)) V16
             , SUM(DECODE(A.OPER, 'A0045', QTY_1,0)) V17
             , SUM(DECODE(A.OPER, 'A0050', QTY_1,0)) V18
             , SUM(DECODE(A.OPER, 'A0060', QTY_1,0)) V19
             , SUM(DECODE(A.OPER, 'A0070', QTY_1,0)) V20
             , SUM(DECODE(A.OPER, 'A0080', QTY_1,0)) V21
             , SUM(DECODE(A.OPER, 'A0090', QTY_1,0)) V22
             , SUM(DECODE(A.OPER, 'A0095', QTY_1,0)) V23
             , SUM(DECODE(A.OPER, 'A0110', QTY_1,0)) V24
             , SUM(DECODE(A.OPER, 'A0120', QTY_1,0)) V25
             , SUM(DECODE(A.OPER, 'A0130', QTY_1,0)) V26
             , SUM(DECODE(A.OPER, 'A0140', QTY_1,0)) V27
             , SUM(DECODE(A.OPER, 'A0160', QTY_1,0)) V28
             , SUM(DECODE(A.OPER, 'A0161', QTY_1,0)) V29
             , SUM(DECODE(A.OPER, 'A0165', QTY_1,0)) V30
             , SUM(DECODE(A.OPER, 'A0065', QTY_1,0)) V31
             , SUM(DECODE(A.OPER, 'A0100', QTY_1,0)) V32
             , SUM(DECODE(A.OPER, 'A0150', QTY_1,0)) V33
             , SUM(DECODE(A.OPER, 'A0175', QTY_1,0)) V34
             , SUM(DECODE(A.OPER, 'A0176', QTY_1,0)) V35
             , SUM(DECODE(A.OPER, 'A0170', QTY_1,0)) V36
             , SUM(DECODE(A.OPER, 'A0180', QTY_1,0)) V37
             , SUM(DECODE(A.OPER, 'A0200', QTY_1,0)) V38
             , SUM(DECODE(A.OPER, 'A0201', QTY_1,0)) V39
             , SUM(DECODE(A.OPER, 'A0202', QTY_1,0)) V40
             , SUM(DECODE(A.OPER, 'A0210', QTY_1,0)) V41
             , SUM(DECODE(A.OPER, 'A0215', QTY_1,0)) V42
             , SUM(DECODE(A.OPER, 'A0220', QTY_1,0)) V43
             , SUM(DECODE(A.OPER, 'A0230', QTY_1,0)) V44
             , SUM(DECODE(A.OPER, 'A0300', QTY_1,0)) V45
             , SUM(DECODE(A.OPER, 'A0250', QTY_1,0)) V46
             , SUM(DECODE(A.OPER, 'A0305', QTY_1,0)) V47
             , SUM(DECODE(A.OPER, 'A0240', QTY_1,0)) V48
             , SUM(DECODE(A.OPER, 'A0260', QTY_1,0)) V49
             , SUM(DECODE(A.OPER, 'A0270', QTY_1,0)) V50
             , SUM(DECODE(A.OPER, 'A0290', QTY_1,0)) V51
             , SUM(DECODE(A.OPER, 'A0295', QTY_1,0)) V52
             , SUM(DECODE(A.OPER, 'A0280', QTY_1,0)) V53
             , SUM(DECODE(A.OPER, 'A0306', QTY_1,0)) V54
             , SUM(DECODE(A.OPER, 'A0307', QTY_1,0)) V55
             , SUM(DECODE(A.OPER, 'A0308', QTY_1,0)) V56
             , SUM(DECODE(A.OPER, 'A0310', QTY_1,0)) V57
             , SUM(DECODE(A.OPER, 'A0320', QTY_1,0)) V58
             , SUM(DECODE(A.OPER, 'A0330', QTY_1,0)) V59
             , SUM(DECODE(A.OPER, 'A1280', QTY_1,0)) V60
             , SUM(DECODE(A.OPER, 'A0333', QTY_1,0)) V61
             , SUM(DECODE(A.OPER, 'A0335', QTY_1,0)) V62
             , SUM(DECODE(A.OPER, 'A0337', QTY_1,0)) V63
             , SUM(DECODE(A.OPER, 'A0372', QTY_1,0)) V64
             , SUM(DECODE(A.OPER, 'A0395', QTY_1,0)) V65
             , SUM(DECODE(A.OPER, 'A0397', QTY_1,0)) V66
             , SUM(DECODE(A.OPER, 'A0340', QTY_1,0)) V67
             , SUM(DECODE(A.OPER, 'A0345', QTY_1,0)) V68
             , SUM(DECODE(A.OPER, 'A0350', QTY_1,0)) V69
             , SUM(DECODE(A.OPER, 'A0360', QTY_1,0)) V70
             , SUM(DECODE(A.OPER, 'A0370', QTY_1,0)) V71
             , SUM(DECODE(A.OPER, 'A0375', QTY_1,0)) V72
             , SUM(DECODE(A.OPER, 'A0380', QTY_1,0)) V73
             , SUM(DECODE(A.OPER, 'A0381', QTY_1,0)) V74
             , SUM(DECODE(A.OPER, 'A0382', QTY_1,0)) V75
             , SUM(DECODE(A.OPER, 'A0383', QTY_1,0)) V76
             , SUM(DECODE(A.OPER, 'A0385', QTY_1,0)) V77
             , SUM(DECODE(A.OPER, 'A0391', QTY_1,0)) V78
             , SUM(DECODE(A.OPER, 'A0399', QTY_1,0)) V79
             , SUM(DECODE(A.OPER, 'A0390', QTY_1,0)) V80
             , SUM(DECODE(A.OPER, 'A0400', QTY_1,0)) V81
             , SUM(DECODE(A.OPER, 'A0401', QTY_1,0)) V82
             , SUM(DECODE(A.OPER, 'A0500', QTY_1,0)) V83
             , SUM(DECODE(A.OPER, 'A0530', QTY_1,0)) V84
             , SUM(DECODE(A.OPER, 'A0531', QTY_1,0)) V85
             , SUM(DECODE(A.OPER, 'A0501', QTY_1,0)) V86
             , SUM(DECODE(A.OPER, 'A0540', QTY_1,0)) V87
             , SUM(DECODE(A.OPER, 'A0550', QTY_1,0)) V88
             , SUM(DECODE(A.OPER, 'A0600', QTY_1,0)) V89
             , SUM(DECODE(A.OPER, 'A0620', QTY_1,0)) V90
             , SUM(DECODE(A.OPER, 'A0660', QTY_1,0)) V91
             , SUM(DECODE(A.OPER, 'A0630', QTY_1,0)) V92
             , SUM(DECODE(A.OPER, 'A0650', QTY_1,0)) V93
             , SUM(DECODE(A.OPER, 'A0670', QTY_1,0)) V94
             , SUM(DECODE(A.OPER, 'A0720', QTY_1,0)) V95
             , SUM(DECODE(A.OPER, 'A0700', QTY_1,0)) V96
             , SUM(DECODE(A.OPER, 'A0339', QTY_1,0)) V97
             , SUM(DECODE(A.OPER, 'A0541', QTY_1,0)) V98
             , SUM(DECODE(A.OPER, 'A0551', QTY_1,0)) V99
             , SUM(DECODE(A.OPER, 'A0561', QTY_1,0)) V100
             , SUM(DECODE(A.OPER, 'A0601', QTY_1,0)) V101
             , SUM(DECODE(A.OPER, 'A0710', QTY_1,0)) V102
             , SUM(DECODE(A.OPER, 'A0800', QTY_1,0)) V103
             , SUM(DECODE(A.OPER, 'A0402', QTY_1,0)) V104
             , SUM(DECODE(A.OPER, 'A0502', QTY_1,0)) V105
             , SUM(DECODE(A.OPER, 'A0532', QTY_1,0)) V106
             , SUM(DECODE(A.OPER, 'A0801', QTY_1,0)) V107
             , SUM(DECODE(A.OPER, 'A0542', QTY_1,0)) V108
             , SUM(DECODE(A.OPER, 'A0552', QTY_1,0)) V109
             , SUM(DECODE(A.OPER, 'A0562', QTY_1,0)) V110
             , SUM(DECODE(A.OPER, 'A0602', QTY_1,0)) V111
             , SUM(DECODE(A.OPER, 'A0711', QTY_1,0)) V112
             , SUM(DECODE(A.OPER, 'A0802', QTY_1,0)) V113
             , SUM(DECODE(A.OPER, 'A0403', QTY_1,0)) V114
             , SUM(DECODE(A.OPER, 'A0503', QTY_1,0)) V115
             , SUM(DECODE(A.OPER, 'A0533', QTY_1,0)) V116
             , SUM(DECODE(A.OPER, 'A0543', QTY_1,0)) V117
             , SUM(DECODE(A.OPER, 'A0553', QTY_1,0)) V118
             , SUM(DECODE(A.OPER, 'A0563', QTY_1,0)) V119
             , SUM(DECODE(A.OPER, 'A0603', QTY_1,0)) V120
             , SUM(DECODE(A.OPER, 'A0712', QTY_1,0)) V121
             , SUM(DECODE(A.OPER, 'A0713', QTY_1,0)) V122
             , SUM(DECODE(A.OPER, 'A0803', QTY_1,0)) V123
             , SUM(DECODE(A.OPER, 'A0404', QTY_1,0)) V124
             , SUM(DECODE(A.OPER, 'A0504', QTY_1,0)) V125
             , SUM(DECODE(A.OPER, 'A0534', QTY_1,0)) V126
             , SUM(DECODE(A.OPER, 'A0544', QTY_1,0)) V127
             , SUM(DECODE(A.OPER, 'A0554', QTY_1,0)) V128
             , SUM(DECODE(A.OPER, 'A0564', QTY_1,0)) V129
             , SUM(DECODE(A.OPER, 'A0604', QTY_1,0)) V130
             , SUM(DECODE(A.OPER, 'A0714', QTY_1,0)) V131
             , SUM(DECODE(A.OPER, 'A0804', QTY_1,0)) V132
             , SUM(DECODE(A.OPER, 'A0405', QTY_1,0)) V133
             , SUM(DECODE(A.OPER, 'A0505', QTY_1,0)) V134
             , SUM(DECODE(A.OPER, 'A0535', QTY_1,0)) V135
             , SUM(DECODE(A.OPER, 'A0545', QTY_1,0)) V136
             , SUM(DECODE(A.OPER, 'A0555', QTY_1,0)) V137
             , SUM(DECODE(A.OPER, 'A0565', QTY_1,0)) V138
             , SUM(DECODE(A.OPER, 'A0605', QTY_1,0)) V139
             , SUM(DECODE(A.OPER, 'A0715', QTY_1,0)) V140
             , SUM(DECODE(A.OPER, 'A0805', QTY_1,0)) V141
             , SUM(DECODE(A.OPER, 'A0406', QTY_1,0)) V142
             , SUM(DECODE(A.OPER, 'A0506', QTY_1,0)) V143
             , SUM(DECODE(A.OPER, 'A0536', QTY_1,0)) V144
             , SUM(DECODE(A.OPER, 'A0546', QTY_1,0)) V145
             , SUM(DECODE(A.OPER, 'A0556', QTY_1,0)) V146
             , SUM(DECODE(A.OPER, 'A0566', QTY_1,0)) V147
             , SUM(DECODE(A.OPER, 'A0606', QTY_1,0)) V148
             , SUM(DECODE(A.OPER, 'A0716', QTY_1,0)) V149
             , SUM(DECODE(A.OPER, 'A0806', QTY_1,0)) V150
             , SUM(DECODE(A.OPER, 'A0407', QTY_1,0)) V151
             , SUM(DECODE(A.OPER, 'A0507', QTY_1,0)) V152
             , SUM(DECODE(A.OPER, 'A0537', QTY_1,0)) V153
             , SUM(DECODE(A.OPER, 'A0547', QTY_1,0)) V154
             , SUM(DECODE(A.OPER, 'A0557', QTY_1,0)) V155
             , SUM(DECODE(A.OPER, 'A0567', QTY_1,0)) V156
             , SUM(DECODE(A.OPER, 'A0607', QTY_1,0)) V157
             , SUM(DECODE(A.OPER, 'A0717', QTY_1,0)) V158
             , SUM(DECODE(A.OPER, 'A0807', QTY_1,0)) V159
             , SUM(DECODE(A.OPER, 'A0408', QTY_1,0)) V160
             , SUM(DECODE(A.OPER, 'A0508', QTY_1,0)) V161
             , SUM(DECODE(A.OPER, 'A0538', QTY_1,0)) V162
             , SUM(DECODE(A.OPER, 'A0558', QTY_1,0)) V163
             , SUM(DECODE(A.OPER, 'A0568', QTY_1,0)) V164
             , SUM(DECODE(A.OPER, 'A0608', QTY_1,0)) V165
             , SUM(DECODE(A.OPER, 'A0808', QTY_1,0)) V166
             , SUM(DECODE(A.OPER, 'A0409', QTY_1,0)) V167
             , SUM(DECODE(A.OPER, 'A0509', QTY_1,0)) V168
             , SUM(DECODE(A.OPER, 'A0539', QTY_1,0)) V169
             , SUM(DECODE(A.OPER, 'A0559', QTY_1,0)) V170
             , SUM(DECODE(A.OPER, 'A0569', QTY_1,0)) V171
             , SUM(DECODE(A.OPER, 'A0609', QTY_1,0)) V172
             , SUM(DECODE(A.OPER, 'A0809', QTY_1,0)) V173
             , SUM(DECODE(A.OPER, 'A080A', QTY_1,0)) V174
             , SUM(DECODE(A.OPER, 'A0890', QTY_1,0)) V175
             , SUM(DECODE(A.OPER, 'A0900', QTY_1,0)) V176
             , SUM(DECODE(A.OPER, 'A0910', QTY_1,0)) V177
             , SUM(DECODE(A.OPER, 'A0920', QTY_1,0)) V178
             , SUM(DECODE(A.OPER, 'A0930', QTY_1,0)) V179
             , SUM(DECODE(A.OPER, 'A0935', QTY_1,0)) V180
             , SUM(DECODE(A.OPER, 'A040A', QTY_1,0)) V181
             , SUM(DECODE(A.OPER, 'A0950', QTY_1,0)) V182
             , SUM(DECODE(A.OPER, 'A053A', QTY_1,0)) V183
             , SUM(DECODE(A.OPER, 'A0970', QTY_1,0)) V184
             , SUM(DECODE(A.OPER, 'A0940', QTY_1,0)) V185
             , SUM(DECODE(A.OPER, 'A0980', QTY_1,0)) V186
             , SUM(DECODE(A.OPER, 'A1000', QTY_1,0)) V187
             , SUM(DECODE(A.OPER, 'A055A', QTY_1,0)) V188
             , SUM(DECODE(A.OPER, 'A060A', QTY_1,0)) V189
             , SUM(DECODE(A.OPER, 'A1040', QTY_1,0)) V190
             , SUM(DECODE(A.OPER, 'A1070', QTY_1,0)) V191
             , SUM(DECODE(A.OPER, 'A1020', QTY_1,0)) V192
             , SUM(DECODE(A.OPER, 'A1100', QTY_1,0)) V193
             , SUM(DECODE(A.OPER, 'A1110', QTY_1,0)) V194
             , SUM(DECODE(A.OPER, 'A1120', QTY_1,0)) V195
             , SUM(DECODE(A.OPER, 'A1130', QTY_1,0)) V196
             , SUM(DECODE(A.OPER, 'A1140', QTY_1,0)) V197
             , SUM(DECODE(A.OPER, 'A1150', QTY_1,0)) V198
             , SUM(DECODE(A.OPER, 'A1600', QTY_1,0)) V199
             , SUM(DECODE(A.OPER, 'A1650', QTY_1,0)) V200
             , SUM(DECODE(A.OPER, 'A1170', QTY_1,0)) V201
             , SUM(DECODE(A.OPER, 'A1180', QTY_1,0)) V202
             , SUM(DECODE(A.OPER, 'A1200', QTY_1,0)) V203
             , SUM(DECODE(A.OPER, 'A1230', QTY_1,0)) V204
             , SUM(DECODE(A.OPER, 'A1240', QTY_1,0)) V205
             , SUM(DECODE(A.OPER, 'A1250', QTY_1,0)) V206
             , SUM(DECODE(A.OPER, 'A1260', QTY_1,0)) V207
             , SUM(DECODE(A.OPER, 'A1270', QTY_1,0)) V208
             , SUM(DECODE(A.OPER, 'A1300', QTY_1,0)) V209
             , SUM(DECODE(A.OPER, 'A1350', QTY_1,0)) V210
             , SUM(DECODE(A.OPER, 'A1370', QTY_1,0)) V211
             , SUM(DECODE(A.OPER, 'A1380', QTY_1,0)) V212
             , SUM(DECODE(A.OPER, 'A1050', QTY_1,0)) V213
             , SUM(DECODE(A.OPER, 'A1420', QTY_1,0)) V214
             , SUM(DECODE(A.OPER, 'A1440', QTY_1,0)) V215
             , SUM(DECODE(A.OPER, 'A1450', QTY_1,0)) V216
             , SUM(DECODE(A.OPER, 'A1821', QTY_1,0)) V217
             , SUM(DECODE(A.OPER, 'A1460', QTY_1,0)) V218
             , SUM(DECODE(A.OPER, 'A1470', QTY_1,0)) V219
             , SUM(DECODE(A.OPER, 'A1500', QTY_1,0)) V220
             , SUM(DECODE(A.OPER, 'A1550', QTY_1,0)) V221
             , SUM(DECODE(A.OPER, 'A1610', QTY_1,0)) V222
             , SUM(DECODE(A.OPER, 'A1560', QTY_1,0)) V223
             , SUM(DECODE(A.OPER, 'A1720', QTY_1,0)) V224
             , SUM(DECODE(A.OPER, 'A1730', QTY_1,0)) V225
             , SUM(DECODE(A.OPER, 'A1740', QTY_1,0)) V226
             , SUM(DECODE(A.OPER, 'A1750', QTY_1,0)) V227
             , SUM(DECODE(A.OPER, 'A1755', QTY_1,0)) V228
             , SUM(DECODE(A.OPER, 'A1760', QTY_1,0)) V229
             , SUM(DECODE(A.OPER, 'A1765', QTY_1,0)) V230
             , SUM(DECODE(A.OPER, 'A1766', QTY_1,0)) V231
             , SUM(DECODE(A.OPER, 'A1763', QTY_1,0)) V232
             , SUM(DECODE(A.OPER, 'A1770', QTY_1,0)) V233
             , SUM(DECODE(A.OPER, 'A1780', QTY_1,0)) V234
             , SUM(DECODE(A.OPER, 'A1790', QTY_1,0)) V235
             , SUM(DECODE(A.OPER, 'A1795', QTY_1,0)) V236
             , SUM(DECODE(A.OPER, 'A1860', QTY_1,0)) V237
             , SUM(DECODE(A.OPER, 'A1850', QTY_1,0)) V238
             , SUM(DECODE(A.OPER, 'A1390', QTY_1,0)) V239
             , SUM(DECODE(A.OPER, 'A1800', QTY_1,0)) V240
             , SUM(DECODE(A.OPER, 'A1805', QTY_1,0)) V241
             , SUM(DECODE(A.OPER, 'A1810', QTY_1,0)) V242
             , SUM(DECODE(A.OPER, 'A1811', QTY_1,0)) V243
             , SUM(DECODE(A.OPER, 'A1812', QTY_1,0)) V244
             , SUM(DECODE(A.OPER, 'A1816', QTY_1,0)) V245
             , SUM(DECODE(A.OPER, 'A1820', QTY_1,0)) V246
             , SUM(DECODE(A.OPER, 'A1825', QTY_1,0)) V247
             , SUM(DECODE(A.OPER, 'A1826', QTY_1,0)) V248
             , SUM(DECODE(A.OPER, 'A1920', QTY_1,0)) V249
             , SUM(DECODE(A.OPER, 'A1960', QTY_1,0)) V250
             , SUM(DECODE(A.OPER, 'A1815', QTY_1,0)) V251
             , SUM(DECODE(A.OPER, 'A1830', QTY_1,0)) V252
             , SUM(DECODE(A.OPER, 'A1710', QTY_1,0)) V253
             , SUM(DECODE(A.OPER, 'A1840', QTY_1,0)) V254
             , SUM(DECODE(A.OPER, 'A1900', QTY_1,0)) V255
             , SUM(DECODE(A.OPER, 'A1910', QTY_1,0)) V256
             , SUM(DECODE(A.OPER, 'A1950', QTY_1,0)) V257
             , SUM(DECODE(A.OPER, 'A2000', QTY_1,0)) V258
             , SUM(DECODE(A.OPER, 'A2010', QTY_1,0)) V259
             , SUM(DECODE(A.OPER, 'A2020', QTY_1,0)) V260
             , SUM(DECODE(A.OPER, 'A2025', QTY_1,0)) V261
             , SUM(DECODE(A.OPER, 'A1819', QTY_1,0)) V262
             , SUM(DECODE(A.OPER, 'A2030', QTY_1,0)) V263
             , SUM(DECODE(A.OPER, 'A2040', QTY_1,0)) V264
             , SUM(DECODE(A.OPER, 'A2041', QTY_1,0)) V265
             , SUM(DECODE(A.OPER, 'A2042', QTY_1,0)) V266
             , SUM(DECODE(A.OPER, 'A2070', QTY_1,0)) V267
             , SUM(DECODE(A.OPER, 'A2050', QTY_1,0)) V268
             , SUM(DECODE(A.OPER, 'A2150', QTY_1,0)) V269
             , SUM(DECODE(A.OPER, 'A2200', QTY_1,0)) V270
             , SUM(DECODE(A.OPER, 'A2100', QTY_1,0)) V271
             , SUM(DECODE(A.OPER, 'A2300', QTY_1,0)) V272
             , SUM(DECODE(A.OPER, 'A2350', QTY_1,0)) V273
             , SUM(DECODE(A.OPER, 'AZ009', QTY_1,0)) V274
             , SUM(DECODE(A.OPER, 'AZ010', QTY_1,0)) V275
          FROM RWIPLOTSTS_BOH A, CLOTCRDDAT@RPTTOMES B 
         WHERE 1=1 
           AND A.CUTOFF_DT = '2020041022' 
           AND A.FACTORY = B.FACTORY(+) 
           AND A.MAT_ID = B.MAT_ID(+) 
           AND A.LOT_DEL_FLAG = ' ' 
           AND A.LOT_TYPE = 'W' 
           AND A.MAT_ID LIKE 'FP100021318-4.3-RC-87CNKP7%' 
           AND A.FACTORY = 'HMVA2' 
           AND A.OPER BETWEEN 'A0000' AND 'AZ010' 
         GROUP BY A.MAT_ID 
       ) WIP 
     , ( 
        SELECT MAT_ID 
             , SUM(S1_FAC_OUT_QTY_1+S2_FAC_OUT_QTY_1+S3_FAC_OUT_QTY_1) AS SHP_QTY  
          FROM RSUMFACMOV
         WHERE CM_KEY_1 = 'HMVA2' 
           AND MAT_ID LIKE 'FP100021318-4.3-RC-87CNKP7%' 
           AND WORK_DATE = '20200410'
           AND FACTORY NOT IN ('RETURN')
           AND LOT_TYPE = 'W'
         GROUP BY MAT_ID 
       ) SHP 
     , ( 
        SELECT MAT_ID 
             , SUM(DECODE(WORK_DATE, '20200406', NVL(S1_FAC_OUT_QTY_1 + S2_FAC_OUT_QTY_1 + S3_FAC_OUT_QTY_1 + S4_FAC_OUT_QTY_1, 0), 0)) AS ASSY_MONDAY  
             , SUM(NVL(S1_FAC_OUT_QTY_1 + S2_FAC_OUT_QTY_1 + S3_FAC_OUT_QTY_1 + S4_FAC_OUT_QTY_1, 0)) AS ASSY_WEEK 
          FROM RSUMFACMOV 
         WHERE CM_KEY_1 = 'HMVA2' 
           AND LOT_TYPE = 'W'
           AND CM_KEY_2 = 'PROD' 
           AND CM_KEY_3 LIKE 'P%' 
           AND MAT_ID LIKE 'SES%' 
           AND WORK_DATE BETWEEN '20200406' AND '20200412'
         GROUP BY MAT_ID 
       ) SHP1 
     , ( 
        SELECT MAT_ID 
             , SUM(PLAN_QTY) PLAN_W1 
             , SUM(DECODE(PLAN_DAY, '20200406', 0, PLAN_QTY)) AS PLAN_W2 
          FROM ( 
                SELECT * 
                  FROM CWIPPLNDAY 
                 WHERE 1=1 
                   AND FACTORY = 'HMVA2' 
                   AND PLAN_DAY BETWEEN '20200406' AND '20200412'
                   AND IN_OUT_FLAG = 'OUT'
                   AND CLASS = 'ASSY'
               ) B
         GROUP BY MAT_ID 
       ) PLN 
 WHERE 1=1 
   AND MAT.MAT_ID = WIP.MAT_ID(+) 
   AND MAT.MAT_ID = SHP.MAT_ID(+) 
   AND MAT.MAT_ID = SHP1.MAT_ID(+) 
   AND MAT.MAT_ID = PLN.MAT_ID(+) 
   AND MAT.FACTORY = 'HMVA2' 
   AND MAT.MAT_ID LIKE 'FP100021318-4.3-RC-87CNKP7%' 
 GROUP BY MAT.MAT_GRP_1,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT.MAT_CMF_10,  ' ', MAT.MAT_ID,  ' ',  ' '
HAVING (NVL(SUM(TOTAL),0) + NVL(SUM(SHP_QTY),0)  + NVL(SUM(ASSY_WEEK),0) + NVL(SUM(PLAN_W1),0)) > 0     
 ORDER BY MAT.MAT_GRP_1,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT.MAT_CMF_10,  ' ', MAT.MAT_ID,  ' ',  ' ' 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
SELECT MIN(SYS_DATE)  FROM MWIPCALDEF WHERE CALENDAR_ID = 'OTD'   AND SYS_YEAR||LPAD(PLAN_WEEK,2,'0') = '202016'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT (SELECT DATA_1 FROM MGCMTBLDAT@RPTTOMES WHERE FACTORY = 'HMVA2' AND TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = A.CUSTOMER) AS CUSTOMER, PKG, SAP_CODE
     , RESV_FIELD_1 AS PIN_TYPE
     , OPER
     , ROUND(TTL_PLAN / 1, 0) AS TTL_PLAN
     , ROUND(TTL_DEF / 1, 0) AS TTL_DEF
     , DECODE(SEQ, 1, 'PLAN', 2, 'ACT', 3, 'BAL', 4, 'BOH') AS GUBUN
     , ROUND(DECODE(SEQ, 1, PLAN_D0, 2, SHP_D0, 3, BAL_D0, 4, WIP_D0) / 1, 0) AS D0
     , ROUND(DECODE(SEQ, 1, PLAN_D1, 2, SHP_D1, 3, BAL_D1, 4, WIP_D1) / 1, 0) AS D1
     , ROUND(DECODE(SEQ, 1, PLAN_D2, 2, SHP_D2, 3, BAL_D2, 4, WIP_D2) / 1, 0) AS D2
     , ROUND(DECODE(SEQ, 1, PLAN_D3, 2, SHP_D3, 3, BAL_D3, 4, WIP_D3) / 1, 0) AS D3
     , ROUND(DECODE(SEQ, 1, PLAN_D4, 2, SHP_D4, 3, BAL_D4, 4, WIP_D4) / 1, 0) AS D4
     , ROUND(DECODE(SEQ, 1, PLAN_D5, 2, SHP_D5, 3, BAL_D5, 4, WIP_D5) / 1, 0) AS D5
     , ROUND(DECODE(SEQ, 1, PLAN_D6, 2, SHP_D6, 3, BAL_D6, 4, WIP_D6) / 1, 0) AS D6
     , ROUND(DECODE(SEQ, 1, PLAN_D7, 2, SHP_D7, 3, BAL_D7, 4, WIP_D7) / 1, 0) AS D7
     , ROUND(DECODE(SEQ, 1, PLAN_D8, 2, SHP_D8, 3, BAL_D8, 4, WIP_D8) / 1, 0) AS D8
     , ROUND(DECODE(SEQ, 1, PLAN_D9, 2, SHP_D9, 3, BAL_D9, 4, WIP_D9) / 1, 0) AS D9
     , ROUND(DECODE(SEQ, 1, PLAN_D10, 2, SHP_D10, 3, BAL_D10, 4, WIP_D10) / 1, 0) AS D10
     , ROUND(DECODE(SEQ, 1, PLAN_D11, 2, SHP_D11, 3, BAL_D11, 4, WIP_D11) / 1, 0) AS D11
     , ROUND(DECODE(SEQ, 1, PLAN_D12, 2, SHP_D12, 3, BAL_D12, 4, WIP_D12) / 1, 0) AS D12
     , ROUND(DECODE(SEQ, 1, PLAN_D13, 2, SHP_D13, 3, BAL_D13, 4, WIP_D13) / 1, 0) AS D13
  FROM RSUMSCMDAT A
     , (
        SELECT DISTINCT MAT_GRP_10 AS PKG, VENDOR_ID
          FROM MWIPMATDEF
         WHERE FACTORY = 'HMVA2'
           AND DELETE_FLAG = ' '
           AND MAT_TYPE = 'FG'
       ) B
     , (SELECT LEVEL AS SEQ FROM DUAL CONNECT BY LEVEL <= 4) C
 WHERE 1=1   
   AND A.SAP_CODE = B.VENDOR_ID
   AND A.FACTORY = 'HMVA2'
   AND A.PLAN_WEEK = '202016'
 ORDER BY CUSTOMER, PKG, SAP_CODE, OPER_SEQ DESC, SEQ

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
SELECT DISTINCT LPAD(PLAN_WEEK,2,'0') AS PLAN_WEEK 
  FROM MWIPCALDEF 
 WHERE 1=1 
   AND CALENDAR_ID = 'OTD' 
   AND SYS_YEAR = '2020' 
   AND SYS_MONTH = '04' 
   AND SYS_DAY = '13' 
 ORDER BY PLAN_WEEK 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE) 
  FROM MWIPCALDEF 
 WHERE 1=1 
   AND CALENDAR_ID='OTD' 
   AND PLAN_YEAR='2020' 
   AND PLAN_WEEK='16' 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT DISTINCT PLAN_YEAR|| LPAD(PLAN_WEEK,2,'0') 
  FROM MWIPCALDEF 
 WHERE CALENDAR_ID = 'OTD' 
   AND SYS_YEAR || LPAD(SYS_MONTH,2,'0') IN ('202004', '202005' ,'202006') 
   AND SYS_DATE >= '20200413' 
 ORDER BY 1 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE) AS START_DAY 
     , MAX(SYS_DATE) AS END_DAY 
     , PLAN_YEAR||DECODE(LENGTH(PLAN_WEEK), 1, '0'||PLAN_WEEK, PLAN_WEEK) AS WEEK
  FROM MWIPCALDEF 
 WHERE CALENDAR_ID = 'OTD'
   AND (PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) IN ( 
                                                SELECT WW
                                                  FROM (
                                                        SELECT WW
                                                             , ROW_NUMBER() OVER(ORDER BY WW) AS RNK
                                                          FROM (
                                                                SELECT DISTINCT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW
                                                                  FROM MWIPCALDEF
                                                                 WHERE CALENDAR_ID = 'OTD'
                                                                   AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') >= (
                                                                                                              SELECT MAX(PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) AS WW
                                                                                                                FROM MWIPCALDEF
                                                                                                               WHERE CALENDAR_ID = 'OTD'
                                                                                                                 AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') < (SELECT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW FROM MWIPCALDEF WHERE CALENDAR_ID = 'OTD' AND SYS_DATE = '20200413')
                                                                                                                 AND SYS_DATE >= TO_CHAR(TO_DATE('20200413', 'YYYYMMDD')-14, 'YYYYMMDD')
                                                                                                             )
                                                               ) 
                                                       )
                                                 WHERE RNK <= 7
                                               ) 
 GROUP BY PLAN_YEAR, PLAN_WEEK 
 ORDER BY PLAN_YEAR, PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT LANGUAGE_2 FROM RWEBFUNDEF WHERE FUNC_NAME = 'MAT070503'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT DISTINCT TO_DATE(UPDATE_TIME,'YYYY-MM-DD HH24MISS') FROM RSUMWIPMAT
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT DISTINCT LPAD(PLAN_WEEK,2,'0') AS PLAN_WEEK 
  FROM MWIPCALDEF 
 WHERE 1=1 
   AND CALENDAR_ID = 'OTD' 
   AND SYS_YEAR = '2020' 
   AND SYS_MONTH = '04' 
   AND SYS_DAY = '13' 
 ORDER BY PLAN_WEEK 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE) 
  FROM MWIPCALDEF 
 WHERE 1=1 
   AND CALENDAR_ID='OTD' 
   AND PLAN_YEAR='2020' 
   AND PLAN_WEEK='16' 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT DISTINCT PLAN_YEAR|| LPAD(PLAN_WEEK,2,'0') 
  FROM MWIPCALDEF 
 WHERE CALENDAR_ID = 'OTD' 
   AND SYS_YEAR || LPAD(SYS_MONTH,2,'0') IN ('202004', '202005' ,'202006') 
   AND SYS_DATE >= '20200413' 
 ORDER BY 1 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE) AS START_DAY 
     , MAX(SYS_DATE) AS END_DAY 
     , PLAN_YEAR||DECODE(LENGTH(PLAN_WEEK), 1, '0'||PLAN_WEEK, PLAN_WEEK) AS WEEK
  FROM MWIPCALDEF 
 WHERE CALENDAR_ID = 'OTD'
   AND (PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) IN ( 
                                                SELECT WW
                                                  FROM (
                                                        SELECT WW
                                                             , ROW_NUMBER() OVER(ORDER BY WW) AS RNK
                                                          FROM (
                                                                SELECT DISTINCT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW
                                                                  FROM MWIPCALDEF
                                                                 WHERE CALENDAR_ID = 'OTD'
                                                                   AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') >= (
                                                                                                              SELECT MAX(PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) AS WW
                                                                                                                FROM MWIPCALDEF
                                                                                                               WHERE CALENDAR_ID = 'OTD'
                                                                                                                 AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') < (SELECT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW FROM MWIPCALDEF WHERE CALENDAR_ID = 'OTD' AND SYS_DATE = '20200413')
                                                                                                                 AND SYS_DATE >= TO_CHAR(TO_DATE('20200413', 'YYYYMMDD')-14, 'YYYYMMDD')
                                                                                                             )
                                                               ) 
                                                       )
                                                 WHERE RNK <= 7
                                               ) 
 GROUP BY PLAN_YEAR, PLAN_WEEK 
 ORDER BY PLAN_YEAR, PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
(SELECT TO_CHAR(LAST_DAY(TO_DATE('202003', 'YYYYMM')),'YYYYMMDD') FROM DUAL)
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE-1) 
  FROM MWIPCALDEF 
 WHERE 1=1
   AND CALENDAR_ID='SE'
   AND PLAN_YEAR='2020'
   AND PLAN_WEEK=(
                  SELECT PLAN_WEEK 
                    FROM MWIPCALDEF 
                   WHERE 1=1 
                     AND CALENDAR_ID='SE' 
                     AND SYS_DATE=TO_CHAR(TO_DATE('20200413','YYYYMMDD'),'YYYYMMDD')
                 )

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT  ' ', (SELECT DATA_1 FROM MGCMTBLDAT@RPTTOMES WHERE FACTORY = 'HMVA2' AND TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = CUSTOMER) AS CUSTOMER, FAMILY, PACKAGE,  ' ',  ' ', LD_COUNT, PKG_CODE,  ' ', MATCODE,  ' ',  ' ',  ' ', OPER 
     , RTRIM(TO_CHAR(USAGE, 'FM9990D9999'), '.') AS USAGE 
     , ROUND(WIP_STOCK/1,0) AS WIP_STOCK 
     , ROUND(((MAT_TTL/USAGE*1000)-REV_QTY)/1,0) AS CMM 
     , ROUND((((MAT_TTL/USAGE*1000)-REV_QTY)-WIP_STOCK)/1,0) AS "재공대비과부족" 
     , CASE WHEN ((MAT_TTL/USAGE*1000)-REV_QTY)-WIP_STOCK<0 THEN ROUND((ABS(((MAT_TTL/USAGE*1000)-REV_QTY)-WIP_STOCK)*USAGE/1000)/1,1) ELSE 0 END "원부자재입고필요" 
     , ROUND(SOP_PLN_WEEK/1,0) AS SOP_PLN
     , ROUND(ASSY_WEEK/1,0) AS ASSY_WEEK 
     , ROUND((SOP_PLN_WEEK-ASSY_WEEK)/1,1) AS "공정기준잔량" 
     , ROUND(((SOP_PLN_WEEK-ASSY_WEEK)*USAGE/1000)/1,1) AS "원부자재필요" 
     , ROUND((MAT_TTL-((SOP_PLN_WEEK-ASSY_WEEK)*USAGE/1000))/1,0) AS "계획대비과부족" 
     , ROUND(MAT_TTL/1,0) AS MAT_TTL 
     , ROUND(MAT_SMT_IN/1,0) AS MAT_SMT_IN 
     , ROUND(MAT_L_IN/1,0) AS MAT_L_IN 
     , ROUND(WIK_WIP/1,0) AS WIK_WIP 
     , ROUND(MAT_INV_L_QTY/1,0) AS MAT_INV_L_QTY 
     , ROUND(MAT_INV_QTY/1,0) AS MAT_INV_QTY 
     , ROUND(ORDER_QTY/1,0) AS ORDER_QTY 
     , ROUND((SOP_PLN_WEEK-ASSY_WEEK)/1,0) AS W0 
     , ROUND(W1/1,0) AS W1 
     , ROUND(W2/1,0) AS W2 
     , ROUND(W3/1,0) AS W3 
     , ROUND(W4/1,0) AS W4 
     , ROUND(W5/1,0) AS W5 
     , ROUND(W6/1,0) AS W6 
     , ROUND(W7/1,0) AS W7 
     , ROUND((MAT_TTL-((SOP_PLN_WEEK-ASSY_WEEK)*USAGE/1000))/1,0) AS MW0 
     , ROUND((MAT_TTL-((SOP_PLN_WEEK-ASSY_WEEK)*USAGE/1000) - (W1*USAGE/1000))/1,0) AS MW1 
     , ROUND((MAT_TTL-((SOP_PLN_WEEK-ASSY_WEEK)*USAGE/1000) - (W1*USAGE/1000) - (W2*USAGE/1000))/1,0) AS MW2 
     , ROUND((MAT_TTL-((SOP_PLN_WEEK-ASSY_WEEK)*USAGE/1000) - (W1*USAGE/1000) - (W2*USAGE/1000) - (W3*USAGE/1000))/1,0) AS MW3 
     , ROUND((MAT_TTL-((SOP_PLN_WEEK-ASSY_WEEK)*USAGE/1000) - (W1*USAGE/1000) - (W2*USAGE/1000) - (W3*USAGE/1000) - (W4*USAGE/1000))/1,0) AS MW4 
     , ROUND((MAT_TTL-((SOP_PLN_WEEK-ASSY_WEEK)*USAGE/1000) - (W1*USAGE/1000) - (W2*USAGE/1000) - (W3*USAGE/1000) - (W4*USAGE/1000) - (W5*USAGE/1000))/1,0) AS MW5 
     , ROUND((MAT_TTL-((SOP_PLN_WEEK-ASSY_WEEK)*USAGE/1000) - (W1*USAGE/1000) - (W2*USAGE/1000) - (W3*USAGE/1000) - (W4*USAGE/1000) - (W5*USAGE/1000) - (W6*USAGE/1000))/1,0) AS MW6 
     , ROUND((MAT_TTL-((SOP_PLN_WEEK-ASSY_WEEK)*USAGE/1000) - (W1*USAGE/1000) - (W2*USAGE/1000) - (W3*USAGE/1000) - (W4*USAGE/1000) - (W5*USAGE/1000) - (W6*USAGE/1000) - (W7*USAGE/1000))/1,0) AS MW7 
  FROM ( 
        SELECT  ' ', MAT.MAT_GRP_1 AS CUSTOMER, MAT.MAT_GRP_2 AS FAMILY, MAT_GRP_10 AS PACKAGE,  ' ',  ' ', MAT.MAT_GRP_6 AS LD_COUNT, MAT.MAT_CMF_11 AS PKG_CODE,  ' ', REPLACE(A.MATCODE, '-O','') AS MATCODE,  ' ',  ' ',  ' ', A.OPER
             , SUM(A.SOP_PLN_MON) AS SOP_PLN_MON 
             , SUM(A.SOP_PLN_WEEK) AS SOP_PLN_WEEK 
             , SUM(A.WEEK_AO+A.WIP_STOCK_NEXT) AS ASSY_WEEK 
             , SUM(A.ASSY_MON+A.WIP_STOCK_NEXT) AS ASSY_MON 
             , SUM(A.WIP_STOCK) AS WIP_STOCK 
             , SUM(A.REV_QTY) AS REV_QTY 
             , MAX(A.USAGE) AS USAGE 
             , MAX(A.TTL) AS MAT_TTL 
             , MAX(A.SMT_IN) AS MAT_SMT_IN 
             , MAX(A.L_IN) AS MAT_L_IN 
             , MAX(A.WIK_WIP) AS WIK_WIP 
             , MAX(A.INV_L_QTY) AS MAT_INV_L_QTY 
             , MAX(A.INV_QTY) AS MAT_INV_QTY 
             , MAX(A.ORDER_QTY) AS ORDER_QTY 
             , MAX(A.WIP_STOCK-A.IN_QTY) AS  IN_QTY 
             , SUM(A.W0) AS W0 
             , SUM(A.W1) AS W1 
             , SUM(A.W2) AS W2 
             , SUM(A.W3) AS W3 
             , SUM(A.W4) AS W4 
             , SUM(A.W5) AS W5 
             , SUM(A.W6) AS W6 
             , SUM(A.W7) AS W7 
        FROM MWIPMATDEF MAT 
           ,  ( 
              SELECT MAT.MAT_ID 
                   , C.MATTYPE 
                   , C.MATCODE 
                   , C.DESCRIPT 
                   , C.OPER 
                   , C.UNIT 
                   , MAX(A.SOP_PLN_MON) AS  SOP_PLN_MON 
                   , MAX(A.SOP_PLN_WEEK) AS  SOP_PLN_WEEK 
                   , MAX(USAGE) AS USAGE 
                   , MAX(A.WEEK_AO) AS WEEK_AO 
                   , MAX(A.ASSY_MON) AS ASSY_MON 
                   , SUM(NVL((CASE WHEN MAT.MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT.MAT_GRP_5 <> '-' THEN CASE WHEN MAT.MAT_GRP_5 IN ('1st','Merge') OR MAT.MAT_GRP_5 LIKE 'Middle%' THEN CASE WHEN B.OPER = 'A0000' THEN NVL(B.VO,0) ELSE 0 END ELSE 0 END  
                               ELSE CASE WHEN B.OPER = 'A0000' THEN NVL(B.VO,0) ELSE 0 END 
                           END),0)) AS WIP_STOCK 
                   , SUM(NVL((CASE WHEN MAT.MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT.MAT_GRP_5 <> '-' THEN CASE WHEN MAT.MAT_GRP_5 IN ('1st','Merge') OR MAT.MAT_GRP_5 LIKE 'Middle%' THEN CASE WHEN (B.OPER BETWEEN C.OPER AND 'AZ010') AND B.OPER <> C.OPER THEN NVL(B.VO,0) ELSE 0 END ELSE 0 END  
                               ELSE CASE WHEN (B.OPER BETWEEN C.OPER AND 'AZ010') AND B.OPER <> C.OPER THEN NVL(B.VO,0) ELSE 0 END  
                           END),0)) AS WIP_STOCK_NEXT 
                   , SUM(NVL((CASE WHEN MAT.MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT.MAT_GRP_5 <> '-' THEN CASE WHEN MAT.MAT_GRP_5 IN ('1st','Merge') OR MAT.MAT_GRP_5 LIKE 'Middle%' THEN CASE WHEN (B.OPER BETWEEN 'A0000' AND C.OPER) AND B.OPER <> 'A0000' THEN NVL(B.VO,0) ELSE 0 END ELSE 0 END  
                               ELSE CASE WHEN (B.OPER BETWEEN 'A0000' AND C.OPER) AND B.OPER <> 'A0000' THEN NVL(B.VO,0) ELSE 0 END  
                           END),0)) AS REV_QTY 
                   , MAX(C.TTL) AS TTL 
                   , MAX(C.SMT_IN) AS SMT_IN 
                   , MAX(C.L_IN) AS L_IN 
                   , MAX(C.WIK_WIP) AS WIK_WIP 
                   , MAX(C.INV_L_QTY) AS INV_L_QTY 
                   , MAX(C.INV_QTY) AS INV_QTY 
                   , MAX(C.ORDER_QTY) AS ORDER_QTY 
                   , MAX(C.IN_QTY) AS IN_QTY 
                   , MAX(A.W0) AS W0 
                   , MAX(A.W1) AS W1 
                   , MAX(A.W2) AS W2 
                   , MAX(A.W3) AS W3 
                   , MAX(A.W4) AS W4 
                   , MAX(A.W5) AS W5 
                   , MAX(A.W6) AS W6 
                   , MAX(A.W7) AS W7 
                FROM MWIPMATDEF MAT 
                   , ( 
                      SELECT MAT.MAT_ID   
                           , MAX(CASE WHEN MAT.MAT_GRP_3 IN ('COB') THEN ROUND(NVL(PLAN.RESV_FIELD1,0)/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0) ELSE NVL(PLAN.RESV_FIELD1,0) END) AS SOP_PLN_MON 
                           , MAX(CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN NVL(W_PLN.W0,0) / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE NVL(W_PLN.W0,0) END) AS SOP_PLN_WEEK  
                           , MAX(CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN ROUND(NVL(WEEK_AO.WEEK_AO,0)/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0) ELSE NVL(WEEK_AO.WEEK_AO,0) END) WEEK_AO 
                           , MAX(CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN ROUND(NVL(MON_AO.ASSY_MON,0)/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0) ELSE NVL(MON_AO.ASSY_MON,0) END) ASSY_MON 
                           , MAX(CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN NVL(W0,0) / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE NVL(W0,0) END) AS W0 
                           , MAX(CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN NVL(W1,0) / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE NVL(W1,0) END) AS W1 
                           , MAX(CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN NVL(W2,0) / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE NVL(W2,0) END) AS W2 
                           , MAX(CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN NVL(W3,0) / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE NVL(W3,0) END) AS W3 
                           , MAX(CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN NVL(W4,0) / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE NVL(W4,0) END) AS W4 
                           , MAX(CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN NVL(W5,0) / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE NVL(W5,0) END) AS W5 
                           , MAX(CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN NVL(W6,0) / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE NVL(W6,0) END) AS W6 
                           , MAX(CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN NVL(W7,0) / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE NVL(W7,0) END) AS W7 
                           , MAX(W_PLN.W_LAST) AS W_LAST 
                        FROM MWIPMATDEF MAT  
                           , (    
                              SELECT MAT_ID, SUM(S1_FAC_OUT_QTY_1+S2_FAC_OUT_QTY_1+S3_FAC_OUT_QTY_1) AS SHP_QTY  
                                FROM RSUMFACMOV   
                               WHERE 1=1   
                                 AND WORK_DATE BETWEEN '20200411' AND '20200413' 
                                 AND LOT_TYPE = 'W'   
                                 AND CM_KEY_1 = 'HMVA2'   
                                 AND CM_KEY_2 = 'PROD'   
                                 AND CM_KEY_3 LIKE 'P%' 
                                 AND FACTORY NOT IN ('RETURN')  
                               GROUP BY MAT_ID     
                             ) SHP   
                          , ( 
                             SELECT MAT_ID 
                                  , SUM(DECODE(WORK_DATE,'20200331', 0, NVL(S1_FAC_OUT_QTY_1 + S2_FAC_OUT_QTY_1 + S3_FAC_OUT_QTY_1 + S4_FAC_OUT_QTY_1, 0))) AS ASSY_MON 
                               FROM RSUMFACMOV 
                               WHERE 1=1 
                                 AND WORK_DATE BETWEEN '20200331' AND '20200413'
                                 AND LOT_TYPE = 'W' 
                                 AND CM_KEY_1 = 'HMVA2' 
                                 AND CM_KEY_2 = 'PROD' 
                                 AND CM_KEY_3 LIKE 'P%' 
                                 AND FACTORY NOT IN ('RETURN') 
                               GROUP BY MAT_ID 
                             ) MON_AO 
                           , ( 
                              SELECT MAT_ID 
                                   , SUM(NVL(S1_FAC_OUT_QTY_1 + S2_FAC_OUT_QTY_1 + S3_FAC_OUT_QTY_1 + S4_FAC_OUT_QTY_1, 0)) AS WEEK_AO  
                                FROM RSUMFACMOV 
                               WHERE 1=1 
                                 AND WORK_DATE BETWEEN '20200411' AND '20200417'
                                 AND LOT_TYPE = 'W' 
                                 AND CM_KEY_1 = 'HMVA2' 
                                 AND CM_KEY_2 = 'PROD' 
                                 AND CM_KEY_3 LIKE 'P%' 
                                 AND FACTORY NOT IN ('RETURN') 
                               GROUP BY MAT_ID 
                             ) WEEK_AO 
                           , (  
                              SELECT FACTORY,MAT_ID,PLAN_QTY_ASSY,PLAN_MONTH, RESV_FIELD1  
                                FROM (  
                                      SELECT FACTORY, MAT_ID, SUM(PLAN_QTY_ASSY) AS PLAN_QTY_ASSY, PLAN_MONTH, SUM(RESV_FIELD1) AS RESV_FIELD1   
                                        FROM (  
                                              SELECT FACTORY, MAT_ID, SUM(PLAN_QTY_ASSY) AS PLAN_QTY_ASSY, PLAN_MONTH, SUM(TO_NUMBER(DECODE(RESV_FIELD1,' ',0,RESV_FIELD1))) AS RESV_FIELD1  
                                                FROM CWIPPLNMON  
                                               WHERE 1=1  
                                                 AND FACTORY = 'HMVA2'  
                                               GROUP BY FACTORY, MAT_ID, PLAN_MONTH  
                                             )  
                                       GROUP BY FACTORY, MAT_ID,PLAN_MONTH  
                                     )  
                                WHERE PLAN_MONTH = '202004' 
                             ) PLAN 
                           , (   
                              SELECT MAT_ID   
                                   , SUM(DECODE(PLAN_WEEK, '202016', WW_QTY, 0)) AS W0  
                                   , SUM(DECODE(PLAN_WEEK, '202017', WW_QTY, 0)) AS W1  
                                   , SUM(DECODE(PLAN_WEEK, '202018', WW_QTY, 0)) AS W2  
                                   , SUM(DECODE(PLAN_WEEK, '202019', WW_QTY, 0)) AS W3  
                                   , SUM(DECODE(PLAN_WEEK, '202020', WW_QTY, 0)) AS W4  
                                   , SUM(DECODE(PLAN_WEEK, '202021', WW_QTY, 0)) AS W5  
                                   , SUM(DECODE(PLAN_WEEK, '202022', WW_QTY, 0)) AS W6  
                                   , SUM(DECODE(PLAN_WEEK, '202023', WW_QTY, 0)) AS W7  
                                   , SUM(CASE WHEN PLAN_WEEK >= CKD_S_WEEK AND PLAN_WEEK <= CKD_L_WEEK THEN REV_QTY ELSE 0 END) AS W_LAST   
                                FROM (   
                                      SELECT A.PLAN_WEEK, B.CKD_S_WEEK, B.CKD_L_WEEK, A.MAT_ID, A.WW_QTY, B.CNT   
                                           , ROUND((A.WW_QTY / 7) * B.CNT, 0) AS REV_QTY   
                                        FROM RWIPPLNWEK A   
                                           , (   
                                              SELECT MAX(TRIM(TO_CHAR(PLAN_YEAR))||LPAD(PLAN_WEEK,2,'0')) PLAN_WEEK, COUNT(*) AS CNT  
                                                   , (SELECT MAX(TRIM(TO_CHAR(PLAN_YEAR))||LPAD(PLAN_WEEK,2,'0')) PLAN_WEEK FROM MWIPCALDEF WHERE CALENDAR_ID = 'OTD' AND SYS_DATE = '20200411') AS CKD_S_WEEK 
                                                   , (SELECT MAX(TRIM(TO_CHAR(PLAN_YEAR))||LPAD(PLAN_WEEK,2,'0')) PLAN_WEEK FROM MWIPCALDEF WHERE CALENDAR_ID = 'OTD' AND SYS_DATE = '20200413') AS CKD_L_WEEK 
                                                FROM MWIPCALDEF  
                                               WHERE 1=1  
                                                 AND CALENDAR_ID = 'OTD'  
                                                 AND PLAN_YEAR||LPAD(PLAN_MONTH,2,'0') IN('202004','202005','202006') 
                                               GROUP BY PLAN_WEEK  
                                             ) B   
                                       WHERE 1=1   
                                         AND A.PLAN_WEEK = B.PLAN_WEEK   
                                         AND A.FACTORY = 'HMVA2'     
                                         AND A.GUBUN = '3'    
                                     )   
                               GROUP BY MAT_ID   
                             ) W_PLN   
                       WHERE 1=1  
                         AND MAT.MAT_ID = PLAN.MAT_ID(+) 
                         AND MAT.MAT_ID = SHP.MAT_ID(+)  
                         AND MAT.MAT_ID = W_PLN.MAT_ID(+)  
                         AND MAT.MAT_ID = MON_AO.MAT_ID(+)  
                         AND MAT.MAT_ID = WEEK_AO.MAT_ID(+)  
                         AND MAT.FACTORY = 'HMVA2'  
                         AND MAT.DELETE_FLAG = ' '  
                         AND MAT.MAT_TYPE = 'FG'  
                         AND MAT.MAT_ID LIKE '%'  
                       GROUP BY MAT.MAT_ID 
                     ) A 
                   , ( 
                      SELECT LOT.MAT_ID, MAT.MAT_GRP_3, LOT.OPER_GRP_1, LOT.OPER 
                           , DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY) AS VO 
                        FROM ( 
                              SELECT FACTORY, MAT_ID, OPER_GRP_1, OPER 
                                   , SUM(CASE WHEN OPER <= 'A0395' THEN QTY_1 / NVL(COMP_CNT,1) 
                                              ELSE QTY_1 
                                         END) QTY 
                                FROM ( 
                                      SELECT A.FACTORY, A.MAT_ID, B.OPER_GRP_1, B.OPER, A.QTY_1 
                                           , (SELECT DATA_1 FROM MGCMTBLDAT WHERE FACTORY = 'HMVA2' AND TABLE_NAME IN ('H_SEC_AUTO_LOSS','H_HX_AUTO_LOSS') AND KEY_1 = A.MAT_ID) AS COMP_CNT 
                                        FROM RWIPLOTSTS A 
                                           , MWIPOPRDEF B 
                                       WHERE 1 = 1 
                                         AND A.FACTORY = B.FACTORY(+) 
                                         AND A.OPER = B.OPER(+) 
                                         AND A.FACTORY = 'HMVA2' 
                                         AND A.LOT_TYPE = 'W' 
                                         AND A.LOT_DEL_FLAG = ' ' 
                                         AND B.OPER_GRP_1 NOT IN (' ', '-') 
                                         AND B.OPER BETWEEN 'A0000' AND 'AZ010' 
                                         AND A.LOT_CMF_5 LIKE 'P%' 
                                     ) 
                               GROUP BY FACTORY, MAT_ID, OPER_GRP_1, OPER 
                               ORDER BY MAT_ID, OPER, OPER_GRP_1 
                             ) LOT 
                           , MWIPMATDEF MAT 
                       WHERE 1 = 1 
                         AND LOT.FACTORY = MAT.FACTORY 
                         AND LOT.MAT_ID = MAT.MAT_ID 
                         AND MAT.DELETE_FLAG <> 'Y' 
                         AND MAT.MAT_GRP_2 <> '-' 
                       ORDER BY LOT.OPER, LOT.OPER_GRP_1 
                     ) B 
                   , ( 
                      SELECT MAT.MAT_ID    
                           , SMM.MAT_TYPE AS MATTYPE   
                           , MAX(NVL(SMM.UNIT_QTY,0)) AS USAGE   
                           , SMM.MATCODE AS MATCODE 
                           , SMM.DESCRIPT AS DESCRIPT 
                           , SMM.OPER AS OPER  
                           , SMM.UNIT_1 AS UNIT  
                           , MAX(WIP_MAT.TTL) AS TTL 
                           , MAX(WIP_MAT.SMT_IN) AS SMT_IN 
                           , MAX(WIP_MAT.L_IN) AS L_IN 
                           , MAX(WIP_MAT.WIK_WIP) AS WIK_WIP 
                           , MAX(WIP_MAT.INV_L_QTY) AS INV_L_QTY 
                           , MAX(WIP_MAT.INV_QTY) AS INV_QTY 
                           , MAX(WIP_MAT.ORDER_QTY) AS ORDER_QTY 
                           , MAX(WIP_MAT.IN_QTY) AS IN_QTY 
                        FROM MWIPMATDEF MAT  
                           , (   
                              SELECT DISTINCT NVL(P.MAT_ID,B.PARTNUMBER) PARTNUMBER, B.MATCODE, B.DESCRIPT, B.RESV_FIELD_2 AS MAT_TYPE, B.UNIT AS UNIT_1, B.UNIT_QTY, B.STEPID AS OPER 
                                FROM CWIPMATDEF@RPTTOMES A  
                                   , CWIPBOMDEF B  
                                   , RWIPMCPBOM P    
                               WHERE 1=1  
                                 AND A.MAT_ID = B.MATCODE  
                                 AND A.FACTORY = 'HMVA2'  
                                 AND B.RESV_FIELD_2 IN ('CW','GW','MC','SB','SW','TE', 'LF', 'PB', 'RC')  
                                 AND B.RESV_FIELD_2 <> ' '  
                                 AND B.RESV_FLAG_1 = 'Y'  
                                 AND B.STEPID <> 'A0300'  
                                 AND B.MATCODE NOT LIKE '%-O'  
                                 AND B.PARTNUMBER = P.MCP_TO_PART(+) 
                               ORDER BY MATCODE 
                             ) SMM 
                           , (  
                              SELECT REPLACE(A.MAT_ID, '-O', '') AS MAT_ID 
                                   , SUM(NVL(B.INV_QTY,0)) + SUM(NVL(B.INV_L_QTY,0))+SUM(NVL(C.QTY_SMT,0))+SUM(NVL(C.QTY_TTL,0))+SUM(NVL(E.WIK_WIP,0)) AS TTL 
                                   , SUM(NVL(C.QTY_SMT,0)) AS SMT_IN  
                                   , SUM(NVL(C.QTY_TTL,0)) AS L_IN  
                                   , SUM(NVL(E.WIK_WIP,0)) AS WIK_WIP  
                                   , SUM(NVL(B.INV_L_QTY,0)) AS INV_L_QTY  
                                   , SUM(NVL(B.INV_QTY,0)) AS INV_QTY  
                                   , SUM(NVL(D.ORDER_QTY,0)) AS ORDER_QTY  
                                   , SUM(NVL(C.IN_QTY,0)) AS IN_QTY  
                                FROM MWIPMATDEF A     
                                   , (     
                                      SELECT MAT_ID 
                                           , SUM(INV_QTY) AS INV_QTY 
                                           , SUM(INV_L_QTY) AS INV_L_QTY 
                                        FROM ( 
                                              SELECT MAT_ID  
                                                   , SUM(DECODE(STORAGE_LOCATION, '1000', QUANTITY, '1003', QUANTITY, 0)) AS INV_QTY  
                                                   , SUM(DECODE(STORAGE_LOCATION, '1001', QUANTITY, 0)) AS INV_L_QTY    
                                                FROM CWMSLOTSTS@RPTTOMES 
                                               WHERE 1=1 
                                                 AND QUANTITY> 0 
                                                 AND STORAGE_LOCATION IN ('1000', '1001', '1003') 
                                               GROUP BY MAT_ID  
                                               UNION ALL 
                                              SELECT MAT_ID, 0 AS INV_QTY, SUM(QTY_1) AS INV_L_QTY 
                                                FROM CWIPMATSLP@RPTTOMES 
                                               WHERE 1=1 
                                                 AND RECV_FLAG = ' ' 
                                                 AND IN_TIME BETWEEN '20200411000000' AND '20200413235959' 
                                               GROUP BY MAT_ID 
                                             ) 
                                       GROUP BY MAT_ID 
                                     ) B     
                                   , (     
                                      SELECT MAT_ID  
                                           , SUM(CASE WHEN B.LOT_ID IS NOT NULL THEN 1   
                                                      ELSE 0   
                                                 END) AS IN_QTY   
                                           , COUNT(*) AS LOT_TTL   
                                           , SUM(CASE WHEN OPER LIKE 'M%' AND OPER <= 'M0330' THEN QTY_1 ELSE 0 END) AS QTY_SMT  
                                           , SUM(CASE WHEN OPER LIKE 'A%' OR OPER > 'M0330' THEN QTY_1 ELSE 0 END) AS QTY_TTL  
                                        FROM RWIPLOTSTS A   
                                           , CRASRESMAT B   
                                       WHERE 1=1    
                                         AND A.FACTORY = B.FACTORY(+)   
                                         AND A.LOT_ID = B.LOT_ID(+)   
                                         AND A.FACTORY = 'HMVA2'  
                                         AND A.LOT_TYPE != 'W'  
                                         AND A.LOT_DEL_FLAG = ' '  
                                         AND A.LOT_CMF_2 = '-'   
                                         AND A.LOT_CMF_9 != ' '   
                                         AND A.QTY_1 > 0   
                                         AND A.OPER NOT IN  ('00001', '00002', 'V0000')   
                                       GROUP BY A.MAT_ID    
                                     ) C     
                                   , (     
                                      SELECT MAT_ID, SUM(ORDER_QUAN) AS ORDER_QTY     
                                        FROM RSAPORDQNT     
                                       WHERE 1=1     
                                         AND CREATE_TIME = TO_CHAR(SYSDATE, 'YYYYMMDD')     
                                       GROUP BY MAT_ID     
                                     ) D 
                                   , ( 
                                      SELECT MAT_ID, SUM(LOT_QTY) AS WIK_WIP 
                                        FROM ISTMWIKWIP@RPTTOMES 
                                       WHERE 1=1 
                                         AND CUTOFF_DT = '20200413' || TO_CHAR(SYSDATE, 'HH24')
                                       GROUP BY MAT_ID 
                                     ) E 
                               WHERE 1=1 
                                 AND A.MAT_ID = B.MAT_ID(+) 
                                 AND A.MAT_ID = C.MAT_ID(+) 
                                 AND A.MAT_ID = D.MAT_ID(+) 
                                 AND A.MAT_ID = E.MAT_ID(+) 
                                 AND A.FACTORY = 'HMVA2' 
                               GROUP BY REPLACE(A.MAT_ID, '-O', '') 
                               HAVING SUM(NVL(B.INV_QTY,0)) + SUM(NVL(C.QTY_SMT,0)) + SUM(NVL(C.QTY_TTL,0)) + SUM(NVL(B.INV_L_QTY,0)) + SUM(NVL(D.ORDER_QTY,0)) + SUM(NVL(E.WIK_WIP,0)) + SUM(NVL(C.IN_QTY,0)) > 0 
                             ) WIP_MAT 
                       WHERE 1=1 
                         AND MAT.MAT_ID = SMM.PARTNUMBER(+) 
                         AND SMM.MATCODE = WIP_MAT.MAT_ID(+) 
                         AND MAT.FACTORY = 'HMVA2' 
                         AND MAT.DELETE_FLAG = ' ' 
                         AND MAT.MAT_TYPE = 'FG' 
                         AND MAT.MAT_ID LIKE '%' 
                         AND SMM.UNIT_QTY > 0 
                       GROUP BY MAT.MAT_ID, SMM.MAT_TYPE, SMM.DESCRIPT, SMM.MATCODE, SMM.DESCRIPT, SMM.OPER, SMM.UNIT_1 
                     ) C 
               WHERE 1=1 
                 AND MAT.MAT_ID = A.MAT_ID(+) 
                 AND MAT.MAT_ID = B.MAT_ID(+) 
                 AND MAT.MAT_ID = C.MAT_ID(+) 
                 AND MAT.FACTORY = 'HMVA2' 
                 AND MAT.DELETE_FLAG = ' ' 
                 AND MAT.VENDOR_ID <> ' ' 
               GROUP BY MAT.MAT_ID, C.MATTYPE, C.MATCODE, C.DESCRIPT, C.OPER, C.UNIT 
             ) A 
        WHERE 1=1  
          AND MAT.MAT_ID = A.MAT_ID(+) 
          AND MAT.FACTORY = 'HMVA2' 
          AND MAT.DELETE_FLAG = ' ' 
          AND A.MATCODE <> ' ' 
        GROUP BY  ' ', MAT.MAT_GRP_1, MAT.MAT_GRP_2, MAT.MAT_GRP_10,  ' ',  ' ', MAT.MAT_GRP_6, MAT.MAT_CMF_11,  ' ', REPLACE(A.MATCODE, '-O',''),  ' ',  ' ',  ' ', A.OPER
        HAVING ( 
                SUM(NVL(SOP_PLN_MON,0))+SUM(NVL(SOP_PLN_WEEK,0))+SUM(NVL(WEEK_AO,0))+SUM(NVL(WIP_STOCK,0))+SUM(NVL(REV_QTY,0))+MAX(NVL(TTL,0)) 
               +SUM(NVL(W0,0))+SUM(NVL(W1,0))+SUM(NVL(W2,0))+SUM(NVL(W3,0))+SUM(NVL(W4,0))+SUM(NVL(W5,0))+SUM(NVL(W6,0))+SUM(NVL(W7,0)) 
               ) > 0 
       ) A 
 WHERE 1=1  
   AND NVL(WIP_STOCK,0)+NVL(SOP_PLN_MON,0)+NVL(SOP_PLN_WEEK,0)+NVL(ASSY_WEEK,0)+NVL(REV_QTY,0)+NVL(MAT_TTL,0)+NVL(MAT_L_IN,0)+NVL(WIK_WIP,0)+NVL(MAT_INV_L_QTY,0)+NVL(MAT_INV_QTY,0)+NVL(ORDER_QTY,0)+NVL(W1,0)+NVL(W2,0)+NVL(W3,0)+NVL(W4,0)+NVL(W5,0)+NVL(W6,0)+NVL(W7,0) > 0 
 ORDER BY  ' ', DECODE(A.CUSTOMER, 'SE', 1, 'HX', 2, 'IM', 3, 'FC', 4, 'IG', 5, 6),CUSTOMER, FAMILY, PACKAGE,  ' ',  ' ', LD_COUNT, PKG_CODE,  ' ', MATCODE,  ' ',  ' ',  ' ', OPER

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT DISTINCT MAT_ID FROM CMATPLNINP@RPTTOMES WHERE PLAN_DATE <> ' '
-------------------------------------------------------------
SELECT * FROM RWEBUSRDEF WHERE FACTORY = :FACTORY AND USER_ID= :USER_ID
-------------------------------------------------------------
SELECT A.FUNC_GRP_SEQ,A.SEC_GRP_ID,A.FUNC_GRP_ID,NVL(A.FUNC_NAME, ' ') FUNC_NAME, NVL(B.FUNC_DESC, ' ') FUNC_DESC, LANGUAGE_1, LANGUAGE_2, LANGUAGE_3
  FROM RWEBGRPFUN A, RWEBFUNDEF B
 WHERE A.FACTORY = :p_FACTORY
   AND A.SEC_GRP_ID = :p_SEC_GRP_ID
   AND A.FUNC_NAME=B.FUNC_NAME(+)
 ORDER BY A.FUNC_GRP_SEQ, A.FUNC_SEQ
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT PLAN_WEEK V1    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_DATE = TO_CHAR(SYSDATE,'yyyymmdd')      AND ROWNUM = 1  
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT DISTINCT PLAN_YEAR||LPAD(PLAN_WEEK,2,'0') AS PLAN_WEEK 
  FROM MWIPCALDEF
 WHERE 1=1 
   AND CALENDAR_ID = 'OTD' 
   AND SYS_YEAR||LPAD(SYS_MONTH,2,'0') = '202004' 
 ORDER BY PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT DISTINCT PLAN_YEAR||LPAD(PLAN_WEEK,2,'0') AS PLAN_WEEK 
  FROM MWIPCALDEF
 WHERE 1=1 
   AND CALENDAR_ID = 'OTD' 
   AND SYS_YEAR||LPAD(SYS_MONTH,2,'0') = '202004' 
   AND SYS_DATE <= '20200413' 
 ORDER BY PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT LANGUAGE_2 FROM RWEBFUNDEF WHERE FUNC_NAME = 'PRD010907'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
SELECT MIN(SYS_DATE) AS START_DAY 
     , MAX(SYS_DATE) AS END_DAY 
     , PLAN_YEAR||DECODE(LENGTH(PLAN_WEEK), 1, '0'||PLAN_WEEK, PLAN_WEEK) AS WEEK
  FROM MWIPCALDEF 
 WHERE CALENDAR_ID = 'OTD'
   AND (PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) IN ( 
                                                SELECT WW
                                                  FROM (
                                                        SELECT WW
                                                             , ROW_NUMBER() OVER(ORDER BY WW) AS RNK
                                                          FROM (
                                                                SELECT DISTINCT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW
                                                                  FROM MWIPCALDEF
                                                                 WHERE CALENDAR_ID = 'OTD'
                                                                   AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') >= (
                                                                                                              SELECT MAX(PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) AS WW
                                                                                                                FROM MWIPCALDEF
                                                                                                               WHERE CALENDAR_ID = 'OTD'
                                                                                                                 AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') < (SELECT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW FROM MWIPCALDEF WHERE CALENDAR_ID = 'OTD' AND SYS_DATE = '20200413')
                                                                                                                 AND SYS_DATE >= TO_CHAR(TO_DATE('20200413', 'YYYYMMDD')-14, 'YYYYMMDD')
                                                                                                             )
                                                               ) 
                                                       )
                                                 WHERE RNK <= 7
                                               ) 
 GROUP BY PLAN_YEAR, PLAN_WEEK 
 ORDER BY PLAN_YEAR, PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT LANGUAGE_2 FROM RWEBFUNDEF WHERE FUNC_NAME = 'PRD010204'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT UNIQUE A.MAT_GRP_1 Code, NVL(B.DATA_1, ' ') Data
  FROM MWIPMATDEF A, MGCMTBLDAT B
 WHERE A.FACTORY = B.FACTORY(+)
   AND A.MAT_GRP_1 = B.KEY_1(+)
   AND B.TABLE_NAME(+) = 'H_CUSTOMER'
   AND A.MAT_TYPE = 'FG'
   AND A.FACTORY = 'HMVA2' 
 ORDER BY 1,2
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE) AS START_DAY 
     , MAX(SYS_DATE) AS END_DAY 
     , PLAN_YEAR||DECODE(LENGTH(PLAN_WEEK), 1, '0'||PLAN_WEEK, PLAN_WEEK) AS WEEK
  FROM MWIPCALDEF 
 WHERE CALENDAR_ID = 'OTD'
   AND (PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) IN ( 
                                                SELECT WW
                                                  FROM (
                                                        SELECT WW
                                                             , ROW_NUMBER() OVER(ORDER BY WW) AS RNK
                                                          FROM (
                                                                SELECT DISTINCT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW
                                                                  FROM MWIPCALDEF
                                                                 WHERE CALENDAR_ID = 'OTD'
                                                                   AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') >= (
                                                                                                              SELECT MAX(PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) AS WW
                                                                                                                FROM MWIPCALDEF
                                                                                                               WHERE CALENDAR_ID = 'OTD'
                                                                                                                 AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') < (SELECT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW FROM MWIPCALDEF WHERE CALENDAR_ID = 'OTD' AND SYS_DATE = '20200413')
                                                                                                                 AND SYS_DATE >= TO_CHAR(TO_DATE('20200413', 'YYYYMMDD')-14, 'YYYYMMDD')
                                                                                                             )
                                                               ) 
                                                       )
                                                 WHERE RNK <= 7
                                               ) 
 GROUP BY PLAN_YEAR, PLAN_WEEK 
 ORDER BY PLAN_YEAR, PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
(SELECT TO_CHAR(LAST_DAY(TO_DATE('202003', 'YYYYMM')),'YYYYMMDD') FROM DUAL)
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
(SELECT TO_CHAR(LAST_DAY(TO_DATE('202004', 'YYYYMM')),'YYYYMMDD') FROM DUAL)
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE-1) 
  FROM MWIPCALDEF 
 WHERE 1=1
   AND CALENDAR_ID='SE'
   AND PLAN_YEAR='2020'
   AND PLAN_WEEK=(
                  SELECT PLAN_WEEK 
                    FROM MWIPCALDEF 
                   WHERE 1=1 
                     AND CALENDAR_ID='SE' 
                     AND SYS_DATE=TO_CHAR(TO_DATE('20200413','YYYYMMDD'),'YYYYMMDD')
                 )

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT (SELECT DATA_1 FROM MGCMTBLDAT@RPTTOMES WHERE FACTORY = 'HMVA2' AND TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = A.CUSTOMER) AS CUSTOMER, A.MAJOR, A.PKG,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' '
     , A.ORI_PLAN AS "월계획"
     , A.MON_PLAN AS "월계획Rev"
     , A.MON_PLAN -A.ORI_PLAN AS "월계획 차이"
     , A.TARGET_MON, A.ASSY_MON
     , DECODE(A.MON_PLAN, 0, 0, ROUND((A.ASSY_MON/A.MON_PLAN)*100, 1)) JINDO, A.DEF, WEEK_PLAN, ASSY_WEEK, WEEK_PLAN-ASSY_WEEK AS "주계획 차이"
     , A.HMK3A, A.FINISH, A.MOLD, A.WB, A.DA, A.SAW, A.STOCK, A.HMK3A+A.FINISH+A.MOLD+A.WB+A.DA+A.SAW+A.STOCK AS TTL, A.TARGET_DAY AS "일목표", A.AO0, A.AO1, A.AO2 
     , A.RCV0, A.RCV1, A.RCV2, A.SW0, A.SW1, A.SW2, A.DA0, A.DA1, A.DA2, A.WB0, A.WB1, A.WB2, A.MD0, A.MD1, A.MD2, A.TF0, A.TF1, A.TF2 
     , ROUND(B.TAT1*24,2)
     , CASE WHEN HIST_AO > 0 THEN '●' END AS HIST_AO
  FROM ( 
        SELECT A.MAT_GRP_1 AS CUSTOMER, A.MAT_GRP_9 AS MAJOR, A.MAT_GRP_10 AS PKG,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' '
             , SUM(NVL(A.MON_PLAN,0)) AS MON_PLAN 
             , SUM(NVL(A.ORI_PLAN,0)) AS ORI_PLAN 
             , SUM(NVL(A.WEEK_PLAN,0)) AS WEEK_PLAN 
             , SUM(NVL(A.ASSY_WEEK,0)) AS ASSY_WEEK 
             , ROUND(((SUM(NVL(A.MON_PLAN,0)) * 43.3) / 100),0) AS TARGET_MON 
             , SUM(NVL(A.ASSY_MON,0)) AS ASSY_MON 
             , SUM(NVL(A.ASSY_MON,0)) - ROUND(((SUM(NVL(A.MON_PLAN,0)) * 43.3) / 100),1) AS DEF   
             , SUM(NVL(A.AO0,0)) AS AO0 
             , SUM(NVL(A.AO1,0)) AS AO1 
             , SUM(NVL(A.AO2,0)) AS AO2 
             , ROUND(((SUM(NVL(A.MON_PLAN,0)) - SUM(NVL(A.ASSY_MON,0))) /18), 1) AS TARGET_DAY 
             , SUM(NVL(A.RCV0,0)) AS RCV0
             , SUM(NVL(A.RCV1,0)) AS RCV1
             , SUM(NVL(A.RCV2,0)) AS RCV2
             , ROUND(SUM(NVL((CASE WHEN A.MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND MAT_ID LIKE 'SEKS%') THEN DECODE(A.MAT_GRP_5, '2nd', D.SW0 / COMP_CNT, 0)
                                   WHEN A.MAT_GRP_3 IN ('COB', 'BGN') THEN D.SW0 / NET_DIE
                                   WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN CASE WHEN A.MAT_GRP_5 IN ('1st','Merge') OR MAT_GRP_5 LIKE 'Middle%' THEN D.SW0 / DECODE(A.MAT_GRP_1,'HX',1, COMP_CNT) ELSE 0 END 
                                   ELSE D.SW0 / DECODE(A.MAT_GRP_1,'HX',1, COMP_CNT)
                              END),0)
                    ),0) AS SW0
             , ROUND(SUM(NVL((CASE WHEN A.MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND MAT_ID LIKE 'SEKS%') THEN DECODE(A.MAT_GRP_5, '2nd', D.SW1 / COMP_CNT, 0)
                                   WHEN A.MAT_GRP_3 IN ('COB', 'BGN') THEN D.SW1 / NET_DIE
                                   WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN CASE WHEN A.MAT_GRP_5 IN ('1st','Merge') OR MAT_GRP_5 LIKE 'Middle%' THEN D.SW1 / DECODE(A.MAT_GRP_1,'HX',1,COMP_CNT) ELSE 0 END 
                                   ELSE D.SW1 / DECODE(A.MAT_GRP_1,'HX',1,COMP_CNT)
                              END),0)
                    ),0) AS SW1
             , ROUND(SUM(NVL((CASE WHEN A.MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND MAT_ID LIKE 'SEKS%') THEN DECODE(A.MAT_GRP_5, '2nd', D.SW2 / COMP_CNT, 0)
                                   WHEN A.MAT_GRP_3 IN ('COB', 'BGN') THEN D.SW2 / NET_DIE
                                   WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN CASE WHEN A.MAT_GRP_5 IN ('1st','Merge') OR MAT_GRP_5 LIKE 'Middle%' THEN D.SW2 / DECODE(A.MAT_GRP_1,'HX',1,COMP_CNT) ELSE 0 END 
                                   ELSE D.SW2 / DECODE(A.MAT_GRP_1,'HX',1,COMP_CNT)
                              END),0)
                    ),0) AS SW2
             , SUM(NVL((CASE WHEN A.MAT_GRP_1 = 'SE' AND A.MAT_GRP_9 = 'MEMORY' AND A.MAT_GRP_5 <> '-' THEN (CASE WHEN A.MAT_GRP_5 = 'Merge' THEN NVL(D.DA02,0) + NVL(D.DA03,0) + NVL(D.DA04,0) + NVL(D.DA05,0) + NVL(D.DA06,0) + NVL(D.DA07,0) + NVL(D.DA08,0) + NVL(D.DA09,0) ELSE 0 END)
                             WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN DECODE(SUBSTR(MAT_GRP_4,-1), '2', D.DA02, '3', D.DA03, '4', D.DA04, '5', D.DA05, '6', D.DA06, '7', D.DA07, '8', D.DA08, '9', D.DA09, 0)
                             ELSE D.DA0
                        END),0)
                   ) AS DA0
             , SUM(NVL((CASE WHEN A.MAT_GRP_1 = 'SE' AND A.MAT_GRP_9 = 'MEMORY' AND A.MAT_GRP_5 <> '-' THEN (CASE WHEN A.MAT_GRP_5 = 'Merge' THEN NVL(D.DA12,0) + NVL(D.DA13,0) + NVL(D.DA14,0) + NVL(D.DA15,0) + NVL(D.DA16,0) + NVL(D.DA17,0) + NVL(D.DA18,0) + NVL(D.DA19,0) ELSE 0 END)
                             WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN DECODE(SUBSTR(MAT_GRP_4,-1), '2', D.DA12, '3', D.DA13, '4', D.DA14, '5', D.DA15, '6', D.DA16, '7', D.DA17, '8', D.DA18, '9', D.DA19, 0)
                             ELSE D.DA1
                        END),0)
                   ) AS DA1
             , SUM(NVL((CASE WHEN A.MAT_GRP_1 = 'SE' AND A.MAT_GRP_9 = 'MEMORY' AND A.MAT_GRP_5 <> '-' THEN (CASE WHEN A.MAT_GRP_5 = 'Merge' THEN NVL(D.DA22,0) + NVL(D.DA23,0) + NVL(D.DA24,0) + NVL(D.DA25,0) + NVL(D.DA26,0) + NVL(D.DA27,0) + NVL(D.DA28,0) + NVL(D.DA29,0) ELSE 0 END)
                             WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN DECODE(SUBSTR(MAT_GRP_4,-1), '2', D.DA22, '3', D.DA23, '4', D.DA24, '5', D.DA25, '6', D.DA26, '7', D.DA27, '8', D.DA28, '9', D.DA29, 0)
                             ELSE D.DA2
                        END),0)
                   ) AS DA2
             , SUM(NVL((CASE WHEN A.MAT_GRP_1 = 'SE' AND A.MAT_GRP_9 = 'MEMORY' AND A.MAT_GRP_5 <> '-' THEN (CASE WHEN A.MAT_GRP_5 = 'Merge' THEN NVL(D.WB02,0) + NVL(D.WB03,0) + NVL(D.WB04,0) + NVL(D.WB05,0) + NVL(D.WB06,0) + NVL(D.WB07,0) + NVL(D.WB08,0) + NVL(D.WB09,0) ELSE 0 END)
                             WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN DECODE(SUBSTR(MAT_GRP_4,-1), '2', D.WB02, '3', D.WB03, '4', D.WB04, '5', D.WB05, '6', D.WB06, '7', D.WB07, '8', D.WB08, '9', D.WB09, 0)
                             ELSE D.WB0
                        END),0)
                   ) AS WB0
             , SUM(NVL((CASE WHEN A.MAT_GRP_1 = 'SE' AND A.MAT_GRP_9 = 'MEMORY' AND A.MAT_GRP_5 <> '-' THEN (CASE WHEN A.MAT_GRP_5 = 'Merge' THEN NVL(D.WB12,0) + NVL(D.WB13,0) + NVL(D.WB14,0) + NVL(D.WB15,0) + NVL(D.WB16,0) + NVL(D.WB17,0) + NVL(D.WB18,0) + NVL(D.WB19,0) ELSE 0 END)
                             WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN DECODE(SUBSTR(MAT_GRP_4,-1), '2', D.WB12, '3', D.WB13, '4', D.WB14, '5', D.WB15, '6', D.WB16, '7', D.WB17, '8', D.WB18, '9', D.WB19, 0)
                             ELSE D.WB1
                        END),0)
                   ) AS WB1
             , SUM(NVL((CASE WHEN A.MAT_GRP_1 = 'SE' AND A.MAT_GRP_9 = 'MEMORY' AND A.MAT_GRP_5 <> '-' THEN (CASE WHEN A.MAT_GRP_5 = 'Merge' THEN NVL(D.WB22,0) + NVL(D.WB23,0) + NVL(D.WB24,0) + NVL(D.WB25,0) + NVL(D.WB26,0) + NVL(D.WB27,0) + NVL(D.WB28,0) + NVL(D.WB29,0) ELSE 0 END)
                             WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN DECODE(SUBSTR(MAT_GRP_4,-1), '2', D.WB22, '3', D.WB23, '4', D.WB24, '5', D.WB25, '6', D.WB26, '7', D.WB27, '8', D.WB28, '9', D.WB29, 0)
                             ELSE D.WB2
                        END),0)
                   ) AS WB2
             , SUM(NVL(D.MD0,0)) AS MD0, SUM(NVL(D.MD1,0)) AS MD1, SUM(NVL(D.MD2,0)) AS MD2 
             , SUM(NVL(D.TF0,0)) AS TF0, SUM(NVL(D.TF1,0)) AS TF1, SUM(NVL(D.TF2,0)) AS TF2 
             , SUM(NVL(F.V0,0)) AS STOCK
             , SUM(NVL(F.V1,0)+NVL(F.V2,0)) AS SAW
             , SUM(NVL(F.V3,0)+NVL(F.V4,0)+NVL(F.V17,0)) AS DA
             , SUM(NVL(F.V5+F.V16,0)) AS WB
             , SUM(NVL(F.V6,0)+NVL(F.V7,0)) AS MOLD
             , SUM(NVL(F.V8+F.V9+F.V10+F.V11+F.V12+F.V13+F.V14,0)) AS FINISH
             , SUM(NVL(F.V15,0)) AS HMK3A
             , SUM(NVL(F.V0+F.V1+F.V2+F.V3+F.V4+F.V5+F.V6+F.V7+F.V8+F.V9+F.V10+F.V11+F.V12+F.V13+F.V14+F.V15+F.V16+F.V17,0)) AS TTL
             , SUM(HIST_AO) AS HIST_AO 
          FROM ( 
                SELECT MAT.MAT_GRP_1, MAT.MAT_GRP_2, MAT.MAT_GRP_3, MAT.MAT_GRP_4, MAT.MAT_GRP_5, MAT.MAT_GRP_6, MAT.MAT_GRP_7, MAT.MAT_GRP_8 
                     , DECODE(MAT.MAT_GRP_1,'SE',MAT.MAT_GRP_9,' ') AS MAT_GRP_9, MAT.MAT_GRP_10, MAT.MAT_CMF_10, MAT.MAT_ID, MAT.MAT_CMF_7, MAT.NET_DIE, MAT.MAT_CMF_11, MAT.COMP_CNT  
                     , CASE WHEN MAT.MAT_GRP_3 IN ('COB') THEN ROUND(SUM(PLAN.RESV_FIELD1 / MAT.NET_DIE),0)
                            ELSE SUM(PLAN.RESV_FIELD1)
                       END MON_PLAN
                     , CASE WHEN MAT.MAT_GRP_3 IN ('COB') THEN ROUND(SUM(PLAN.PLAN_QTY_ASSY / MAT.NET_DIE),0)
                            ELSE SUM(PLAN.PLAN_QTY_ASSY)
                       END ORI_PLAN
                     , CASE WHEN MAT.MAT_GRP_3 IN ('COB') THEN ROUND(SUM(WEEK_PLAN.WEEK_PLAN / MAT.NET_DIE),0)
                            ELSE SUM(WEEK_PLAN.WEEK_PLAN)
                            END WEEK_PLAN
                     , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN ROUND(SUM(WEEK_AO.WEEK_AO / MAT.NET_DIE),0)
                            ELSE SUM(WEEK_AO.WEEK_AO)
                            END ASSY_WEEK
                     , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN ROUND(SUM(MON_AO.ASSY_MON / MAT.NET_DIE),0)
                            ELSE SUM(MON_AO.ASSY_MON)
                       END ASSY_MON
                     , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN ROUND(SUM(MON_AO.AO0 / MAT.NET_DIE),0)
                            ELSE SUM(MON_AO.AO0)
                       END AO0
                     , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN ROUND(SUM(MON_AO.AO1 / MAT.NET_DIE),0)
                            ELSE SUM(MON_AO.AO1)
                       END AO1
                     , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN ROUND(SUM(MON_AO.AO2 / MAT.NET_DIE),0)
                            ELSE SUM(MON_AO.AO2)
                       END AO2
                     , ROUND(CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN ROUND(SUM(DAY_RCV.RCV0 / MAT.NET_DIE),0)
                                  WHEN MAT.MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND MAT_ID LIKE 'SEKS%') THEN DECODE(MAT.MAT_GRP_5, '2nd', SUM(DAY_RCV.RCV0 / MAT.COMP_CNT), 0)
                                  WHEN MAT.MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT.MAT_GRP_5 <> '-' THEN CASE WHEN MAT.MAT_GRP_5 IN ('1st','Merge') OR MAT.MAT_GRP_5 LIKE 'Middle%' THEN SUM(DAY_RCV.RCV0 / MAT.COMP_CNT) ELSE 0 END 
                                  ELSE SUM(DAY_RCV.RCV0 / MAT.COMP_CNT)
                             END, 0) AS RCV0
                     , ROUND(CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN ROUND(SUM(DAY_RCV.RCV1 / MAT.NET_DIE),0)
                                  WHEN MAT.MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND MAT_ID LIKE 'SEKS%') THEN DECODE(MAT.MAT_GRP_5, '2nd', SUM(DAY_RCV.RCV1 / MAT.COMP_CNT), 0)
                                  WHEN MAT.MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT.MAT_GRP_5 <> '-' THEN CASE WHEN MAT.MAT_GRP_5 IN ('1st','Merge') OR MAT.MAT_GRP_5 LIKE 'Middle%' THEN SUM(DAY_RCV.RCV1 / MAT.COMP_CNT) ELSE 0 END 
                                  ELSE SUM(DAY_RCV.RCV1 / MAT.COMP_CNT)
                             END, 0) AS RCV1
                     , ROUND(CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN ROUND(SUM(DAY_RCV.RCV2 / MAT.NET_DIE),0)
                                  WHEN MAT.MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND MAT_ID LIKE 'SEKS%') THEN DECODE(MAT.MAT_GRP_5, '2nd', SUM(DAY_RCV.RCV2 / MAT.COMP_CNT), 0)
                                  WHEN MAT.MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT.MAT_GRP_5 <> '-' THEN CASE WHEN MAT.MAT_GRP_5 IN ('1st','Merge') OR MAT.MAT_GRP_5 LIKE 'Middle%' THEN SUM(DAY_RCV.RCV2 / MAT.COMP_CNT) ELSE 0 END 
                                  ELSE SUM(DAY_RCV.RCV2 / MAT.COMP_CNT)
                             END, 0) AS RCV2
                     , SUM(HIST_AO.HIST_AO) AS HIST_AO 
                  FROM VWIPMATDEF MAT 
                     , ( 
                        SELECT FACTORY,MAT_ID,PLAN_QTY_ASSY,PLAN_MONTH, RESV_FIELD1 
                          FROM ( 
                                SELECT FACTORY, MAT_ID, SUM(PLAN_QTY_ASSY) AS PLAN_QTY_ASSY, PLAN_MONTH, SUM(RESV_FIELD1) AS RESV_FIELD1  
                                  FROM ( 
                                        SELECT FACTORY, MAT_ID, SUM(PLAN_QTY_ASSY) AS PLAN_QTY_ASSY, PLAN_MONTH, SUM(TO_NUMBER(DECODE(RESV_FIELD1,' ',0,RESV_FIELD1))) AS RESV_FIELD1 
                                          FROM CWIPPLNMON 
                                         WHERE 1=1 
                                           AND FACTORY = 'HMVA2' 
                                         GROUP BY FACTORY, MAT_ID, PLAN_MONTH 
                                       ) 
                                 GROUP BY FACTORY, MAT_ID,PLAN_MONTH 
                               ) 
                       ) PLAN 
                     , ( 
                        SELECT FACTORY,MAT_ID, SUM(WW_QTY) AS WEEK_PLAN 
                          FROM RWIPPLNWEK 
                         WHERE FACTORY = 'HMVA2' 
                           AND PLAN_WEEK = '202016'
                           AND GUBUN = '3' 
                        GROUP BY FACTORY,MAT_ID 
                       ) WEEK_PLAN 
                     , ( 
                        SELECT MAT_ID 
                             , SUM(AO0) AS AO0 
                             , SUM(AO1) AS AO1 
                             , SUM(AO2) AS AO2 
                             , SUM(ASSY_MON) AS ASSY_MON 
                          FROM (
                                SELECT MAT_ID 
                                     , SUM(DECODE(WORK_DATE,'20200411', NVL(S1_FAC_OUT_QTY_1 + S2_FAC_OUT_QTY_1 + S3_FAC_OUT_QTY_1 + S4_FAC_OUT_QTY_1, 0), 0)) AS AO0 
                                     , SUM(DECODE(WORK_DATE,'20200412', NVL(S1_FAC_OUT_QTY_1 + S2_FAC_OUT_QTY_1 + S3_FAC_OUT_QTY_1 + S4_FAC_OUT_QTY_1, 0), 0)) AS AO1
                                     , SUM(DECODE(WORK_DATE,'20200413', NVL(S1_FAC_OUT_QTY_1 + S2_FAC_OUT_QTY_1 + S3_FAC_OUT_QTY_1 + S4_FAC_OUT_QTY_1, 0), 0)) AS AO2
                                     , 0 AS ASSY_MON  
                                  FROM RSUMFACMOV 
                                 WHERE 1=1 
                                   AND WORK_DATE BETWEEN '20200411' AND '20200413'
                                   AND LOT_TYPE = 'W' 
                                   AND CM_KEY_1 = 'HMVA2' 
                                   AND CM_KEY_2 = 'PROD' 
                                   AND CM_KEY_3 LIKE 'P%'
                                   AND FACTORY NOT IN ('RETURN') 
                                 GROUP BY MAT_ID 
                                 UNION ALL 
                                SELECT MAT_ID 
                                     , 0, 0, 0 
                                     , SUM(SHP_QTY_1) AS ASSY_MON 
                                  FROM VSUMWIPOUT 
                                 WHERE 1=1 
                                   AND WORK_DATE BETWEEN '20200401' AND '20200413'
                                   AND FACTORY = 'HMVA2' 
                                   AND LOT_TYPE = 'W' 
                                   AND CM_KEY_2 = 'PROD' 
                                   AND CM_KEY_3 LIKE 'P%'
                                 GROUP BY MAT_ID 
                               ) 
                         GROUP BY MAT_ID 
                       ) MON_AO 
                     , ( 
                        SELECT MAT_ID 
                             , SUM(NVL(S1_FAC_OUT_QTY_1 + S2_FAC_OUT_QTY_1 + S3_FAC_OUT_QTY_1 + S4_FAC_OUT_QTY_1, 0)) AS WEEK_AO  
                          FROM RSUMFACMOV 
                         WHERE 1=1 
                           AND WORK_DATE BETWEEN '20200411' AND '20200413'
                           AND LOT_TYPE = 'W' 
                           AND CM_KEY_1 = 'HMVA2' 
                           AND CM_KEY_2 = 'PROD' 
                           AND CM_KEY_3 LIKE 'P%'
                           AND FACTORY NOT IN ('RETURN') 
                         GROUP BY MAT_ID 
                       ) WEEK_AO 
                     , ( 
                        SELECT MAT_ID 
                             , SUM(DECODE(WORK_DATE,'20200411', NVL(RCV_QTY_1,0), 0)) AS RCV0
                             , SUM(DECODE(WORK_DATE,'20200412', NVL(RCV_QTY_1,0), 0)) AS RCV1
                             , SUM(DECODE(WORK_DATE,'20200413', NVL(RCV_QTY_1,0), 0)) AS RCV2
                          FROM VSUMWIPRCV 
                         WHERE 1=1 
                           AND WORK_DATE BETWEEN '20200411' AND '20200413'
                           AND LOT_TYPE = 'W' 
                           AND FACTORY = 'HMVA2' 
                           AND CM_KEY_2 = 'PROD' 
                           AND CM_KEY_3 LIKE 'P%'
                         GROUP BY MAT_ID 
                       ) DAY_RCV  
                     , ( 
                        SELECT MAT_ID 
                             , SUM(NVL(S1_FAC_OUT_QTY_1 + S2_FAC_OUT_QTY_1 + S3_FAC_OUT_QTY_1 + S4_FAC_OUT_QTY_1, 0)) AS HIST_AO  
                          FROM RSUMFACMOV 
                         WHERE 1=1 
                           AND WORK_DATE BETWEEN TO_CHAR(ADD_MONTHS('20200413', -6), 'YYYYMMDD') AND '20200413'
                           AND LOT_TYPE = 'W' 
                           AND CM_KEY_1 = 'HMVA2' 
                           AND CM_KEY_2 = 'PROD' 
                           AND CM_KEY_3 LIKE 'P%'
                           AND FACTORY NOT IN ('RETURN') 
                         GROUP BY MAT_ID 
                       ) HIST_AO 
                 WHERE 1 = 1 
                   AND MAT.FACTORY =PLAN.FACTORY(+) 
                   AND MAT.FACTORY =WEEK_PLAN.FACTORY(+) 
                   AND MAT.MAT_ID = PLAN.MAT_ID(+) 
                   AND MAT.MAT_ID = WEEK_PLAN.MAT_ID(+) 
                   AND MAT.MAT_ID = MON_AO.MAT_ID(+) 
                   AND MAT.MAT_ID = WEEK_AO.MAT_ID(+) 
                   AND MAT.MAT_ID = DAY_RCV.MAT_ID(+) 
                   AND MAT.MAT_ID = HIST_AO.MAT_ID(+) 
                   AND MAT.FACTORY = 'HMVA2' 
                   AND PLAN.PLAN_MONTH(+) = '202004' 
                   AND MAT.MAT_TYPE= 'FG' 
                   AND MAT.DELETE_FLAG <> 'Y' 
                 GROUP BY MAT.MAT_GRP_1, MAT.MAT_GRP_2, MAT.MAT_GRP_3, MAT.MAT_GRP_4, MAT.MAT_GRP_5, MAT.MAT_GRP_6, MAT.MAT_GRP_7, MAT.MAT_GRP_8, MAT.MAT_GRP_9, MAT.MAT_GRP_10, MAT.MAT_CMF_10, MAT.MAT_ID, MAT.MAT_CMF_7, MAT.NET_DIE, MAT.MAT_CMF_11, MAT.COMP_CNT
               ) A  
             , ( 
                SELECT MAT_ID 
                     , SUM(DECODE(OPER, 'A0200', DECODE(WORK_DATE,'20200411', QTY,0))) AS SW0
                     , SUM(DECODE(OPER, 'A0200', DECODE(WORK_DATE,'20200412', QTY,0))) AS SW1
                     , SUM(DECODE(OPER, 'A0200', DECODE(WORK_DATE,'20200413', QTY,0))) AS SW2
                     , SUM(DECODE(OPER_GRP_7, 'D/A', DECODE(WORK_DATE,'20200411', QTY,0))) AS DA0
                     , SUM(DECODE(OPER_GRP_7, 'D/A', DECODE(WORK_DATE,'20200412', QTY,0))) AS DA1
                     , SUM(DECODE(OPER_GRP_7, 'D/A', DECODE(WORK_DATE,'20200413', QTY,0))) AS DA2
                     , SUM(DECODE(OPER_GRP_7, 'W/B', DECODE(WORK_DATE,'20200411', QTY,0))) AS WB0
                     , SUM(DECODE(OPER_GRP_7, 'W/B', DECODE(WORK_DATE,'20200412', QTY,0))) AS WB1
                     , SUM(DECODE(OPER_GRP_7, 'W/B', DECODE(WORK_DATE,'20200413', QTY,0))) AS WB2
                     , SUM(DECODE(OPER_GRP_7, 'MOLD', DECODE(WORK_DATE,'20200411', QTY,0))) AS MD0
                     , SUM(DECODE(OPER_GRP_7, 'MOLD', DECODE(WORK_DATE,'20200412', QTY,0))) AS MD1
                     , SUM(DECODE(OPER_GRP_7, 'MOLD', DECODE(WORK_DATE,'20200413', QTY,0))) AS MD2
                     , SUM(DECODE(OPER_GRP_7, 'SIG', DECODE(WORK_DATE,'20200411', QTY,0))) AS TF0
                     , SUM(DECODE(OPER_GRP_7, 'SIG', DECODE(WORK_DATE,'20200412', QTY,0))) AS TF1
                     , SUM(DECODE(OPER_GRP_7, 'SIG', DECODE(WORK_DATE,'20200413', QTY,0))) AS TF2
                     , SUM(DECODE(OPER, 'A0402', DECODE(WORK_DATE,'20200411', QTY,0))) AS DA02
                     , SUM(DECODE(OPER, 'A0402', DECODE(WORK_DATE,'20200412', QTY,0))) AS DA12
                     , SUM(DECODE(OPER, 'A0402', DECODE(WORK_DATE,'20200413', QTY,0))) AS DA22
                     , SUM(DECODE(OPER, 'A0403', DECODE(WORK_DATE,'20200411', QTY,0))) AS DA03
                     , SUM(DECODE(OPER, 'A0403', DECODE(WORK_DATE,'20200412', QTY,0))) AS DA13
                     , SUM(DECODE(OPER, 'A0403', DECODE(WORK_DATE,'20200413', QTY,0))) AS DA23
                     , SUM(DECODE(OPER, 'A0404', DECODE(WORK_DATE,'20200411', QTY,0))) AS DA04
                     , SUM(DECODE(OPER, 'A0404', DECODE(WORK_DATE,'20200412', QTY,0))) AS DA14
                     , SUM(DECODE(OPER, 'A0404', DECODE(WORK_DATE,'20200413', QTY,0))) AS DA24
                     , SUM(DECODE(OPER, 'A0405', DECODE(WORK_DATE,'20200411', QTY,0))) AS DA05
                     , SUM(DECODE(OPER, 'A0405', DECODE(WORK_DATE,'20200412', QTY,0))) AS DA15
                     , SUM(DECODE(OPER, 'A0405', DECODE(WORK_DATE,'20200413', QTY,0))) AS DA25
                     , SUM(DECODE(OPER, 'A0406', DECODE(WORK_DATE,'20200411', QTY,0))) AS DA06
                     , SUM(DECODE(OPER, 'A0406', DECODE(WORK_DATE,'20200412', QTY,0))) AS DA16
                     , SUM(DECODE(OPER, 'A0406', DECODE(WORK_DATE,'20200413', QTY,0))) AS DA26
                     , SUM(DECODE(OPER, 'A0407', DECODE(WORK_DATE,'20200411', QTY,0))) AS DA07
                     , SUM(DECODE(OPER, 'A0407', DECODE(WORK_DATE,'20200412', QTY,0))) AS DA17
                     , SUM(DECODE(OPER, 'A0407', DECODE(WORK_DATE,'20200413', QTY,0))) AS DA27
                     , SUM(DECODE(OPER, 'A0408', DECODE(WORK_DATE,'20200411', QTY,0))) AS DA08
                     , SUM(DECODE(OPER, 'A0408', DECODE(WORK_DATE,'20200412', QTY,0))) AS DA18
                     , SUM(DECODE(OPER, 'A0408', DECODE(WORK_DATE,'20200413', QTY,0))) AS DA28
                     , SUM(DECODE(OPER, 'A0409', DECODE(WORK_DATE,'20200411', QTY,0))) AS DA09
                     , SUM(DECODE(OPER, 'A0409', DECODE(WORK_DATE,'20200412', QTY,0))) AS DA19
                     , SUM(DECODE(OPER, 'A0409', DECODE(WORK_DATE,'20200413', QTY,0))) AS DA29
                     , SUM(DECODE(OPER, 'A0602', DECODE(WORK_DATE,'20200411', QTY,0))) AS WB02
                     , SUM(DECODE(OPER, 'A0602', DECODE(WORK_DATE,'20200412', QTY,0))) AS WB12
                     , SUM(DECODE(OPER, 'A0602', DECODE(WORK_DATE,'20200413', QTY,0))) AS WB22
                     , SUM(DECODE(OPER, 'A0603', DECODE(WORK_DATE,'20200411', QTY,0))) AS WB03
                     , SUM(DECODE(OPER, 'A0603', DECODE(WORK_DATE,'20200412', QTY,0))) AS WB13
                     , SUM(DECODE(OPER, 'A0603', DECODE(WORK_DATE,'20200413', QTY,0))) AS WB23
                     , SUM(DECODE(OPER, 'A0604', DECODE(WORK_DATE,'20200411', QTY,0))) AS WB04
                     , SUM(DECODE(OPER, 'A0604', DECODE(WORK_DATE,'20200412', QTY,0))) AS WB14
                     , SUM(DECODE(OPER, 'A0604', DECODE(WORK_DATE,'20200413', QTY,0))) AS WB24
                     , SUM(DECODE(OPER, 'A0605', DECODE(WORK_DATE,'20200411', QTY,0))) AS WB05
                     , SUM(DECODE(OPER, 'A0605', DECODE(WORK_DATE,'20200412', QTY,0))) AS WB15
                     , SUM(DECODE(OPER, 'A0605', DECODE(WORK_DATE,'20200413', QTY,0))) AS WB25 
                     , SUM(DECODE(OPER, 'A0606', DECODE(WORK_DATE,'20200411', QTY,0))) AS WB06
                     , SUM(DECODE(OPER, 'A0606', DECODE(WORK_DATE,'20200412', QTY,0))) AS WB16
                     , SUM(DECODE(OPER, 'A0606', DECODE(WORK_DATE,'20200413', QTY,0))) AS WB26 
                     , SUM(DECODE(OPER, 'A0607', DECODE(WORK_DATE,'20200411', QTY,0))) AS WB07
                     , SUM(DECODE(OPER, 'A0607', DECODE(WORK_DATE,'20200412', QTY,0))) AS WB17
                     , SUM(DECODE(OPER, 'A0607', DECODE(WORK_DATE,'20200413', QTY,0))) AS WB27 
                     , SUM(DECODE(OPER, 'A0608', DECODE(WORK_DATE,'20200411', QTY,0))) AS WB08
                     , SUM(DECODE(OPER, 'A0608', DECODE(WORK_DATE,'20200412', QTY,0))) AS WB18
                     , SUM(DECODE(OPER, 'A0608', DECODE(WORK_DATE,'20200413', QTY,0))) AS WB28 
                     , SUM(DECODE(OPER, 'A0609', DECODE(WORK_DATE,'20200411', QTY,0))) AS WB09
                     , SUM(DECODE(OPER, 'A0609', DECODE(WORK_DATE,'20200412', QTY,0))) AS WB19
                     , SUM(DECODE(OPER, 'A0609', DECODE(WORK_DATE,'20200413', QTY,0))) AS WB29 
                  FROM ( 
                        SELECT A.MAT_ID,A.WORK_DATE,B.OPER,B.OPER_GRP_7 
                             , SUM(A.S1_END_QTY_1 + A.S2_END_QTY_1 + A.S3_END_QTY_1 + A.S1_END_RWK_QTY_1 + A.S2_END_RWK_QTY_1 + A.S3_END_RWK_QTY_1 ) AS QTY 
                          FROM RSUMWIPMOV A 
                             , MWIPOPRDEF B 
                         WHERE 1=1 
                           AND A.FACTORY = B.FACTORY 
                           AND A.OPER = B.OPER 
                           AND A.FACTORY = 'HMVA2' 
                           AND B.OPER_GRP_7 IN ('SAW','D/A','W/B','MOLD','SIG','V/I') 
                           AND A.MAT_VER = 1 
                           AND A.CM_KEY_3 LIKE 'P%'
                           AND A.WORK_DATE BETWEEN '20200411' AND '20200413'
                           AND A.LOT_TYPE = 'W'
                           AND A.OPER <> 'A1760'
                         GROUP BY A.MAT_ID, A.WORK_DATE,B.OPER,B.OPER_GRP_7 
                       ) 
                 GROUP BY MAT_ID 
               ) D  
             , ( 
                SELECT MAT_ID 
                     , ROUND(SUM(DECODE(OPER_GRP_1, 'HMK2A', QTY, 0)), 0) AS V0 
                     , ROUND(SUM(DECODE(OPER_GRP_1, 'B/G', QTY, 0)), 0) AS V1 
                     , ROUND(SUM(DECODE(OPER_GRP_1, 'SAW', QTY, 0)), 0) AS V2 
                     , ROUND(SUM(DECODE(OPER_GRP_1, 'S/P', QTY, 0)), 0) AS V3 
                     , ROUND(SUM(DECODE(OPER_GRP_1, 'D/A', QTY, 0)), 0) AS V4 
                     , ROUND(SUM(DECODE(OPER_GRP_1, 'W/B', QTY, 0)), 0) AS V5 
                     , ROUND(SUM(DECODE(OPER_GRP_1, 'MOLD', QTY, 0)), 0) AS V6 
                     , ROUND(SUM(DECODE(OPER_GRP_1, 'CURE', QTY, 0)), 0) AS V7 
                     , ROUND(SUM(DECODE(OPER_GRP_1, 'M/K', QTY, 0)), 0) AS V8 
                     , ROUND(SUM(DECODE(OPER_GRP_1, 'TRIM', QTY, 0)), 0) AS V9 
                     , ROUND(SUM(DECODE(OPER_GRP_1, 'TIN', QTY, 0)), 0) AS V10 
                     , ROUND(SUM(DECODE(OPER_GRP_1, 'S/B/A', QTY, 0)), 0) AS V11 
                     , ROUND(SUM(DECODE(OPER_GRP_1, 'SIG', QTY, 0)), 0) AS V12 
                     , ROUND(SUM(DECODE(OPER_GRP_1, 'AVI', QTY, 0)), 0) AS V13 
                     , ROUND(SUM(DECODE(OPER_GRP_1, 'V/I', QTY, 0)), 0) AS V14 
                     , ROUND(SUM(DECODE(OPER_GRP_1, 'HMK3A', QTY, 0)), 0) AS V15 
                     , ROUND(SUM(DECODE(OPER_GRP_1, 'GATE', QTY, 0)), 0) AS V16 
                     , ROUND(SUM(DECODE(OPER_GRP_1, 'SMT', QTY, 0)), 0) AS V17 
                  FROM (  
                        SELECT MAT_ID, OPER, OPER_GRP_1 
                             , CASE WHEN MAT_GRP_1 = 'HX' AND HX_COMP_MIN IS NOT NULL
                                         THEN (CASE WHEN HX_COMP_MIN <> HX_COMP_MAX AND OPER > HX_COMP_MIN AND OPER <= HX_COMP_MAX THEN QTY_1 / NVL(COMP_CNT / 2,1)
                                                    WHEN OPER <= HX_COMP_MAX THEN QTY_1 / NVL(COMP_CNT,1)
                                                    ELSE QTY_1 END)
                                    WHEN OPER <= 'A0395' THEN QTY_1 / NVL(COMP_CNT,1) 
                                    ELSE QTY_1 
                               END QTY 
                          FROM ( 
                                SELECT A.MAT_ID, B.OPER, C.MAT_GRP_1  
                                     , CASE WHEN C.MAT_GRP_3 IN ('FCBGA', 'FCFBGA') AND B.OPER = 'A0800' THEN 'D/A' ELSE B.OPER_GRP_1 END OPER_GRP_1  
                                     , CASE WHEN MAT_GRP_3 IN ('COB', 'BGN') THEN QTY_1/NET_DIE ELSE QTY_1 END AS QTY_1
                                     , COMP_CNT  
                                     , HX_COMP_MIN, HX_COMP_MAX 
                                  FROM RWIPLOTSTS A  
                                     , MWIPOPRDEF B  
                                     , VWIPMATDEF C 
                                 WHERE 1 = 1 
                                   AND A.FACTORY = B.FACTORY 
                                   AND A.FACTORY = C.FACTORY 
                                   AND A.OPER = B.OPER 
                                   AND A.MAT_ID = C.MAT_ID 
                                   AND A.FACTORY = 'HMVA2'  
                                   AND A.LOT_TYPE = 'W' 
                                   AND A.LOT_DEL_FLAG = ' ' 
                                   AND C.DELETE_FLAG = ' ' 
                                   AND C.MAT_GRP_2 <> '-' 
                                   AND A.HOLD_CODE NOT IN ('H71','H54') 
                                   AND REGEXP_LIKE(C.MAT_GRP_5, 'Middle*|Merge|1st|-') 
                                   AND A.LOT_CMF_5 LIKE 'P%'
                               ) 
                       )  
                 GROUP BY MAT_ID 
               ) F 
         WHERE 1 = 1 
           AND A.MAT_ID = D.MAT_ID(+)
           AND A.MAT_ID = F.MAT_ID(+)
           AND A.MAT_ID LIKE '%' 
           AND A.MAT_GRP_1 IN ('DR')
         GROUP BY A.MAT_GRP_1, A.MAT_GRP_9, A.MAT_GRP_10,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' '
        HAVING (
                NVL(SUM(A.MON_PLAN), 0)+ 
                NVL(SUM(A.ORI_PLAN), 0)+ 
                NVL(SUM(A.ASSY_MON), 0)+ 
                NVL(SUM(A.WEEK_PLAN), 0)+ 
                NVL(SUM(A.AO0), 0)+ NVL(SUM(A.AO1), 0)+ NVL(SUM(A.AO2), 0)+ 
                NVL(SUM(A.RCV0), 0)+ NVL(SUM(A.RCV1), 0)+ NVL(SUM(A.RCV2), 0)+ 
                NVL(SUM(D.SW0), 0)+ NVL(SUM(D.SW1), 0)+ NVL(SUM(D.SW2), 0)+ 
                NVL(SUM(D.DA0), 0)+ NVL(SUM(D.DA1), 0)+ NVL(SUM(D.DA2), 0)+ 
                NVL(SUM(D.WB0), 0)+ NVL(SUM(D.WB1), 0)+ NVL(SUM(D.WB2), 0)+ 
                NVL(SUM(D.MD0), 0)+ NVL(SUM(D.MD1), 0)+ NVL(SUM(D.MD2), 0)+  
                NVL(SUM(D.TF0), 0)+ NVL(SUM(D.TF0), 0)+ NVL(SUM(D.TF0), 0)+ 
                NVL(SUM(F.V0+F.V1+F.V2+F.V3+F.V4+F.V5+F.V6+F.V7+F.V8+F.V9+F.V10+F.V11+F.V12+F.V13+F.V14+F.V15+F.V16+F.V17), 0)  
               ) <> 0
       ) A 
     , ( 
        SELECT MAT_GRP_1 AS CUSTOMER
             , MAT_GRP_10 AS PKG 
             , SUM(DECODE(SHIP_DATE,'20200411', TAT, 0)) AS TAT0 
             , SUM(DECODE(SHIP_DATE,'20200412', TAT, 0)) AS TAT1 
             , SUM(DECODE(SHIP_DATE,'20200413', TAT, 0)) AS TAT2 
          FROM ( 
                SELECT MAT.MAT_GRP_1,MAT.MAT_GRP_10,TAT.SHIP_DATE,SUM(TAT.TOTAL_TAT_QTY),SUM(SHIP.SHIP_QTY),ROUND(DECODE(SUM(SHIP.SHIP_QTY),0,0,(SUM(TAT.TOTAL_TAT_QTY)/SUM(SHIP.SHIP_QTY))),4) AS TAT 
                  FROM ( 
                        SELECT FACTORY,MAT_ID,SHIP_DATE 
                             , ROUND(SUM(TOTAL_TAT_QTY),4) AS TOTAL_TAT_QTY 
                          FROM CSUMTATMAT@RPTTOMES 
                         WHERE 1=1 
                           AND FACTORY = 'HMVA2' 
                           AND OPER <> 'A0000' 
                           AND SHIP_DATE BETWEEN '20200411' AND '20200413'
                         GROUP BY FACTORY,MAT_ID,SHIP_DATE 
                       ) TAT 
                     , ( 
                        SELECT FACTORY,MAT_ID,SHIP_DATE,SHIP_QTY 
                          FROM CSUMTATMAT@RPTTOMES 
                         WHERE 1=1 
                           AND FACTORY = 'HMVA2' 
                           AND OPER = 'AZ010' 
                           AND SHIP_DATE BETWEEN '20200411' AND '20200413'
                       ) SHIP 
                     , MWIPMATDEF MAT 
                 WHERE 1=1 
                   AND TAT.FACTORY = SHIP.FACTORY 
                   AND TAT.MAT_ID = SHIP.MAT_ID 
                   AND TAT.SHIP_DATE = SHIP.SHIP_DATE 
                   AND TAT.MAT_ID = MAT.MAT_ID 
                   AND MAT.MAT_TYPE = 'FG' 
                   AND MAT.DELETE_FLAG <> 'Y' 
                   AND MAT.FACTORY = 'HMVA2' 
                 GROUP BY MAT_GRP_1,MAT_GRP_10,TAT.SHIP_DATE
               ) 
         GROUP BY MAT_GRP_1, MAT_GRP_10 
       ) B  
 WHERE 1=1 
   AND A.CUSTOMER = B.CUSTOMER(+) 
   AND A.PKG = B.PKG(+) 
   AND A.PKG <> '-' 
   AND NVL(ORI_PLAN,0) + NVL(MON_PLAN,0) + NVL(TARGET_MON,0) + NVL(ASSY_MON,0) + NVL(WEEK_PLAN,0) + NVL(DEF,0) + NVL(AO0,0) + NVL(AO1,0) + NVL(AO2,0) + NVL(A.RCV0,0) + NVL(A.RCV1,0) + NVL(A.RCV2,0) + NVL(A.SW0,0) 
     + NVL(A.SW1,0) + NVL(A.SW2,0) + NVL(A.DA0,0) + NVL(A.DA1,0) + NVL(A.DA2,0) + NVL(A.WB0,0) + NVL(A.WB1,0) + NVL(A.WB2,0) + NVL(A.MD0,0) + NVL(A.MD1,0) + NVL(A.MD2,0) + NVL(A.TF0,0) 
     + NVL(A.TF1,0) + NVL(A.TF2,0) + NVL(TTL,0) <> 0 
 ORDER BY DECODE(A.CUSTOMER, 'SE', 1, 'HX', 2, 'IM', 3, 'FC', 4, 'IG', 5, 6),CUSTOMER, A.MAJOR, A.PKG,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' '

-------------------------------------------------------------
SELECT * FROM RWEBUSRDEF WHERE FACTORY = :FACTORY AND USER_ID= :USER_ID
-------------------------------------------------------------
SELECT A.FUNC_GRP_SEQ,A.SEC_GRP_ID,A.FUNC_GRP_ID,NVL(A.FUNC_NAME, ' ') FUNC_NAME, NVL(B.FUNC_DESC, ' ') FUNC_DESC, LANGUAGE_1, LANGUAGE_2, LANGUAGE_3
  FROM RWEBGRPFUN A, RWEBFUNDEF B
 WHERE A.FACTORY = :p_FACTORY
   AND A.SEC_GRP_ID = :p_SEC_GRP_ID
   AND A.FUNC_NAME=B.FUNC_NAME(+)
 ORDER BY A.FUNC_GRP_SEQ, A.FUNC_SEQ
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT PLAN_WEEK V1    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_DATE = TO_CHAR(SYSDATE,'yyyymmdd')      AND ROWNUM = 1  
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT DISTINCT PLAN_YEAR||LPAD(PLAN_WEEK,2,'0') AS PLAN_WEEK 
  FROM MWIPCALDEF
 WHERE 1=1 
   AND CALENDAR_ID = 'OTD' 
   AND SYS_YEAR||LPAD(SYS_MONTH,2,'0') = '202004' 
 ORDER BY PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT DISTINCT PLAN_YEAR||LPAD(PLAN_WEEK,2,'0') AS PLAN_WEEK 
  FROM MWIPCALDEF
 WHERE 1=1 
   AND CALENDAR_ID = 'OTD' 
   AND SYS_YEAR||LPAD(SYS_MONTH,2,'0') = '202004' 
   AND SYS_DATE <= '20200413' 
 ORDER BY PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT LANGUAGE_2 FROM RWEBFUNDEF WHERE FUNC_NAME = 'PRD010907'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT DISTINCT PLAN_YEAR||LPAD(PLAN_WEEK,2,'0') AS PLAN_WEEK 
  FROM MWIPCALDEF
 WHERE 1=1 
   AND CALENDAR_ID = 'OTD' 
   AND SYS_YEAR||LPAD(SYS_MONTH,2,'0') = '202004' 
 ORDER BY PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT DISTINCT PLAN_YEAR||LPAD(PLAN_WEEK,2,'0') AS PLAN_WEEK 
  FROM MWIPCALDEF
 WHERE 1=1 
   AND CALENDAR_ID = 'OTD' 
   AND SYS_YEAR||LPAD(SYS_MONTH,2,'0') = '202004' 
   AND SYS_DATE <= '20200413' 
 ORDER BY PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE) AS START_DAY 
     , MAX(SYS_DATE) AS END_DAY 
     , PLAN_YEAR||DECODE(LENGTH(PLAN_WEEK), 1, '0'||PLAN_WEEK, PLAN_WEEK) AS WEEK
  FROM MWIPCALDEF 
 WHERE CALENDAR_ID = 'OTD'
   AND (PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) IN ( 
                                                SELECT WW
                                                  FROM (
                                                        SELECT WW
                                                             , ROW_NUMBER() OVER(ORDER BY WW) AS RNK
                                                          FROM (
                                                                SELECT DISTINCT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW
                                                                  FROM MWIPCALDEF
                                                                 WHERE CALENDAR_ID = 'OTD'
                                                                   AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') >= (
                                                                                                              SELECT MAX(PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) AS WW
                                                                                                                FROM MWIPCALDEF
                                                                                                               WHERE CALENDAR_ID = 'OTD'
                                                                                                                 AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') < (SELECT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW FROM MWIPCALDEF WHERE CALENDAR_ID = 'OTD' AND SYS_DATE = '20200413')
                                                                                                                 AND SYS_DATE >= TO_CHAR(TO_DATE('20200413', 'YYYYMMDD')-14, 'YYYYMMDD')
                                                                                                             )
                                                               ) 
                                                       )
                                                 WHERE RNK <= 7
                                               ) 
 GROUP BY PLAN_YEAR, PLAN_WEEK 
 ORDER BY PLAN_YEAR, PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
WITH DT AS
(
 SELECT B.PLAN_MONTH, A.PLAN_WEEK, A.GUBUN, B.CKD_WEEK, A.MAT_ID, A.WW_QTY, B.CNT
      , ROUND((A.WW_QTY / 7) * B.CNT, 0) AS REV_QTY
   FROM RWIPPLNWEK A
      , (
         SELECT MAX(TRIM(TO_CHAR(PLAN_YEAR))||LPAD(PLAN_MONTH,2,'0')) PLAN_MONTH
              , MAX(TRIM(TO_CHAR(PLAN_YEAR))||LPAD(PLAN_WEEK,2,'0')) PLAN_WEEK
              , COUNT(*) AS CNT
              , (SELECT MAX(TRIM(TO_CHAR(PLAN_YEAR))||LPAD(PLAN_WEEK,2,'0')) PLAN_WEEK FROM MWIPCALDEF WHERE CALENDAR_ID = 'OTD' AND SYS_DATE = '20200413') AS CKD_WEEK
           FROM MWIPCALDEF
          WHERE 1=1
            AND CALENDAR_ID = 'OTD'
            AND SYS_YEAR||LPAD(SYS_MONTH,2,'0') IN ('202004','202005','202006')
          GROUP BY PLAN_MONTH, PLAN_WEEK
        ) B
  WHERE 1=1
    AND A.PLAN_WEEK = B.PLAN_WEEK
    AND A.FACTORY = 'HMVA2' 
)
SELECT CUST_TYPE, NVL((SELECT DATA_1 FROM MGCMTBLDAT WHERE TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = MAT_GRP_1 AND ROWNUM=1), '-') AS CUSTOMER, MAT_GRP_9 AS MAJOR_CODE, MAT_GRP_2 AS FAMILY,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ' 
     , ROUND(SUM(MON_PLN * CONVERT_QTY) /1000,0) AS MON_PLN
     , ROUND(SUM(REV_PLN * CONVERT_QTY) /1000,0) AS REV_PLN
     , ROUND(SUM(SOP_PLN * CONVERT_QTY) /1000,0) AS SOP_PLN
     , ROUND(SUM(W0 * CONVERT_QTY) /1000,0) AS W0
     , ROUND(SUM(W1 * CONVERT_QTY) /1000,0) AS W1
     , ROUND(SUM(W2 * CONVERT_QTY) /1000,0) AS W2
     , ROUND(SUM(W3 * CONVERT_QTY) /1000,0) AS W3
     , ROUND(SUM(W4 * CONVERT_QTY) /1000,0) AS W4
     , ROUND(SUM(SHP_W0 * CONVERT_QTY) /1000,0) AS SHP_W0
     , ROUND(SUM(SHP_W1 * CONVERT_QTY) /1000,0) AS SHP_W1
     , ROUND(SUM(SHP_W2 * CONVERT_QTY) /1000,0) AS SHP_W2
     , ROUND(SUM(M1 * CONVERT_QTY) /1000,0) AS M1
     , ROUND(SUM(M2 * CONVERT_QTY) /1000,0) AS M2
  FROM (
        SELECT MAT.* 
             , NVL((SELECT DATA_10 FROM MGCMTBLDAT WHERE TABLE_NAME = 'H_CUSTOMER' AND FACTORY = 'HMVA2' AND  KEY_1 = MAT_GRP_1), '-') AS CUST_TYPE 
             , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN M_PLN.MON_PLN / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE M_PLN.MON_PLN END AS MON_PLN
             , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN M_PLN.REV_PLN / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE M_PLN.REV_PLN END AS REV_PLN
             , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN M_PLN.SOP_PLN / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE M_PLN.SOP_PLN END AS SOP_PLN
             , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN W0 / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE W0 END AS W0
             , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN W1 / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE W1 END AS W1
             , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN W2 / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE W2 END AS W2
             , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN W3 / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE W3 END AS W3
             , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN W4 / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE W4 END AS W4
             , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN SHP_W0 / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE SHP_W0 END AS SHP_W0
             , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN SHP_W1 / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE SHP_W1 END AS SHP_W1
             , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN SHP_W2 / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE SHP_W2 END AS SHP_W2
             , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN M0 / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE M0 END AS M0
             , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN M1 / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE M1 END AS M1
             , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN M2 / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE M2 END AS M2
             , 1 AS CONVERT_QTY
          FROM MWIPMATDEF MAT
             , (
                SELECT MAT_ID
                     , SUM(PLAN_QTY_ASSY) AS MON_PLN
                     , SUM(DECODE(RESV_FIELD1, ' ', 0, RESV_FIELD1)) AS REV_PLN
                     , SUM(DECODE(RESV_FIELD3, ' ', 0, RESV_FIELD3)) AS SOP_PLN
                  FROM CWIPPLNMON 
                 WHERE 1=1 
                   AND FACTORY = 'HMVA2' 
                   AND PLAN_MONTH = '202004'
                 GROUP BY MAT_ID
               ) M_PLN
             , (
                SELECT MAT_ID
                     , SUM(DECODE(PLAN_WEEK, '202014', SHP_QTY, 0)) AS SHP_W0 
                     , SUM(DECODE(PLAN_WEEK, '202015', SHP_QTY, 0)) AS SHP_W1 
                     , SUM(DECODE(PLAN_WEEK, '202016', SHP_QTY, 0)) AS SHP_W2 
                  FROM (
                        SELECT TRIM(TO_CHAR(PLAN_YEAR))||LPAD(PLAN_WEEK,2,'0') AS PLAN_WEEK, MAT_ID
                             , SUM(SHP_QTY_1) AS SHP_QTY
                          FROM VSUMWIPOUT A
                             , MWIPCALDEF B 
                         WHERE 1=1 
                           AND A.WORK_DATE = B.SYS_DATE(+) 
                           AND A.WORK_DATE LIKE '202004%'
                           AND A.LOT_TYPE = 'W' 
                           AND A.FACTORY = 'HMVA2' 
                           AND A.CM_KEY_2 = 'PROD' 
                           AND A.CM_KEY_3 LIKE 'P%'
                           AND B.CALENDAR_ID(+) = 'OTD'
                           AND B.PLAN_YEAR||LPAD(B.PLAN_WEEK,2,'0') <= '202016'
                         GROUP BY TRIM(TO_CHAR(PLAN_YEAR))||LPAD(PLAN_WEEK,2,'0'), MAT_ID 
                         UNION ALL 
                        SELECT PLAN_WEEK, MAT_ID, SUM(REV_QTY) 
                          FROM DT 
                         WHERE GUBUN = '3' 
                           AND PLAN_WEEK = '202016'
                           AND PLAN_MONTH = '202004'
                         GROUP BY PLAN_WEEK, MAT_ID 
                       )
                 GROUP BY MAT_ID
               ) SHP
             , (
                SELECT MAT_ID
                     , SUM(CASE WHEN PLAN_MONTH = '202004' AND PLAN_WEEK = '202014' THEN REV_QTY ELSE 0 END) AS W0 
                     , SUM(CASE WHEN PLAN_MONTH = '202004' AND PLAN_WEEK = '202015' THEN REV_QTY ELSE 0 END) AS W1 
                     , SUM(CASE WHEN PLAN_MONTH = '202004' AND PLAN_WEEK = '202016' THEN REV_QTY ELSE 0 END) AS W2 
                     , SUM(CASE WHEN PLAN_MONTH = '202004' AND PLAN_WEEK = '202017' THEN REV_QTY ELSE 0 END) AS W3 
                     , SUM(CASE WHEN PLAN_MONTH = '202004' AND PLAN_WEEK = '202018' THEN REV_QTY ELSE 0 END) AS W4 
                     , SUM(CASE WHEN PLAN_WEEK >= CKD_WEEK THEN REV_QTY ELSE 0 END) AS W_LAST
                     , SUM(DECODE(PLAN_MONTH, '202004', REV_QTY, 0)) AS M0
                     , SUM(DECODE(PLAN_MONTH, '202005', REV_QTY, 0)) AS M1
                     , SUM(DECODE(PLAN_MONTH, '202006', REV_QTY, 0)) AS M2
                  FROM (
                        SELECT * FROM DT WHERE GUBUN = '3'
                       )
                 GROUP BY MAT_ID
               ) W_PLN
         WHERE 1=1
           AND MAT.MAT_ID = M_PLN.MAT_ID(+)
           AND MAT.MAT_ID = SHP.MAT_ID(+)
           AND MAT.MAT_ID = W_PLN.MAT_ID(+)
           AND MAT.FACTORY = 'HMVA2'
           AND MAT.DELETE_FLAG = ' '
           AND MAT.MAT_TYPE = 'FG'
           AND MAT.MAT_ID LIKE '%'
       )
 GROUP BY CUST_TYPE, MAT_GRP_1, MAT_GRP_9, MAT_GRP_2,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ' 
HAVING SUM(NVL(MON_PLN,0) + NVL(REV_PLN,0) + NVL(SOP_PLN,0) +  + NVL(W0,0) + NVL(W1,0) + NVL(W2,0) + NVL(W3,0) + NVL(W4,0) + NVL(SHP_W0,0) + NVL(SHP_W1,0) + NVL(SHP_W2,0) + NVL(M0,0) + NVL(M1,0) + NVL(M2,0)) > 0
 ORDER BY DECODE(CUST_TYPE, 'SEC', 1, 'Hynix', 2, 'Fabless', 3, 4), MAT_GRP_1, MAT_GRP_9, MAT_GRP_2,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ' 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
SELECT MIN(SYS_DATE) AS START_DAY 
     , MAX(SYS_DATE) AS END_DAY 
     , PLAN_YEAR||DECODE(LENGTH(PLAN_WEEK), 1, '0'||PLAN_WEEK, PLAN_WEEK) AS WEEK
  FROM MWIPCALDEF 
 WHERE CALENDAR_ID = 'OTD'
   AND (PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) IN ( 
                                                SELECT WW
                                                  FROM (
                                                        SELECT WW
                                                             , ROW_NUMBER() OVER(ORDER BY WW) AS RNK
                                                          FROM (
                                                                SELECT DISTINCT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW
                                                                  FROM MWIPCALDEF
                                                                 WHERE CALENDAR_ID = 'OTD'
                                                                   AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') >= (
                                                                                                              SELECT MAX(PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) AS WW
                                                                                                                FROM MWIPCALDEF
                                                                                                               WHERE CALENDAR_ID = 'OTD'
                                                                                                                 AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') < (SELECT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW FROM MWIPCALDEF WHERE CALENDAR_ID = 'OTD' AND SYS_DATE = '20200413')
                                                                                                                 AND SYS_DATE >= TO_CHAR(TO_DATE('20200413', 'YYYYMMDD')-14, 'YYYYMMDD')
                                                                                                             )
                                                               ) 
                                                       )
                                                 WHERE RNK <= 7
                                               ) 
 GROUP BY PLAN_YEAR, PLAN_WEEK 
 ORDER BY PLAN_YEAR, PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE) AS START_DAY 
     , MAX(SYS_DATE) AS END_DAY 
     , PLAN_YEAR||DECODE(LENGTH(PLAN_WEEK), 1, '0'||PLAN_WEEK, PLAN_WEEK) AS WEEK
  FROM MWIPCALDEF 
 WHERE CALENDAR_ID = 'SE'
   AND (PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) IN ( 
                                                SELECT WW
                                                  FROM (
                                                        SELECT WW
                                                             , ROW_NUMBER() OVER(ORDER BY WW) AS RNK
                                                          FROM (
                                                                SELECT DISTINCT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW
                                                                  FROM MWIPCALDEF
                                                                 WHERE CALENDAR_ID = 'SE'
                                                                   AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') >= (
                                                                                                              SELECT MAX(PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) AS WW
                                                                                                                FROM MWIPCALDEF
                                                                                                               WHERE CALENDAR_ID = 'SE'
                                                                                                                 AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') < (SELECT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW FROM MWIPCALDEF WHERE CALENDAR_ID = 'SE' AND SYS_DATE = '20200413')
                                                                                                                 AND SYS_DATE >= TO_CHAR(TO_DATE('20200413', 'YYYYMMDD')-14, 'YYYYMMDD')
                                                                                                             )
                                                               ) 
                                                       )
                                                 WHERE RNK <= 7
                                               ) 
 GROUP BY PLAN_YEAR, PLAN_WEEK 
 ORDER BY PLAN_YEAR, PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT LANGUAGE_2 FROM RWEBFUNDEF WHERE FUNC_NAME = 'PRD010611'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE) AS START_DAY 
     , MAX(SYS_DATE) AS END_DAY 
     , PLAN_YEAR||DECODE(LENGTH(PLAN_WEEK), 1, '0'||PLAN_WEEK, PLAN_WEEK) AS WEEK
  FROM MWIPCALDEF 
 WHERE CALENDAR_ID = 'OTD'
   AND (PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) IN ( 
                                                SELECT WW
                                                  FROM (
                                                        SELECT WW
                                                             , ROW_NUMBER() OVER(ORDER BY WW) AS RNK
                                                          FROM (
                                                                SELECT DISTINCT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW
                                                                  FROM MWIPCALDEF
                                                                 WHERE CALENDAR_ID = 'OTD'
                                                                   AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') >= (
                                                                                                              SELECT MAX(PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) AS WW
                                                                                                                FROM MWIPCALDEF
                                                                                                               WHERE CALENDAR_ID = 'OTD'
                                                                                                                 AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') < (SELECT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW FROM MWIPCALDEF WHERE CALENDAR_ID = 'OTD' AND SYS_DATE = '20200413')
                                                                                                                 AND SYS_DATE >= TO_CHAR(TO_DATE('20200413', 'YYYYMMDD')-14, 'YYYYMMDD')
                                                                                                             )
                                                               ) 
                                                       )
                                                 WHERE RNK <= 7
                                               ) 
 GROUP BY PLAN_YEAR, PLAN_WEEK 
 ORDER BY PLAN_YEAR, PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE) AS START_DAY 
     , MAX(SYS_DATE) AS END_DAY 
     , PLAN_YEAR||DECODE(LENGTH(PLAN_WEEK), 1, '0'||PLAN_WEEK, PLAN_WEEK) AS WEEK
  FROM MWIPCALDEF 
 WHERE CALENDAR_ID = 'SE'
   AND (PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) IN ( 
                                                SELECT WW
                                                  FROM (
                                                        SELECT WW
                                                             , ROW_NUMBER() OVER(ORDER BY WW) AS RNK
                                                          FROM (
                                                                SELECT DISTINCT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW
                                                                  FROM MWIPCALDEF
                                                                 WHERE CALENDAR_ID = 'SE'
                                                                   AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') >= (
                                                                                                              SELECT MAX(PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) AS WW
                                                                                                                FROM MWIPCALDEF
                                                                                                               WHERE CALENDAR_ID = 'SE'
                                                                                                                 AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') < (SELECT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW FROM MWIPCALDEF WHERE CALENDAR_ID = 'SE' AND SYS_DATE = '20200413')
                                                                                                                 AND SYS_DATE >= TO_CHAR(TO_DATE('20200413', 'YYYYMMDD')-14, 'YYYYMMDD')
                                                                                                             )
                                                               ) 
                                                       )
                                                 WHERE RNK <= 7
                                               ) 
 GROUP BY PLAN_YEAR, PLAN_WEEK 
 ORDER BY PLAN_YEAR, PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
WITH CUT_OFF AS
(
 SELECT SAP_CODE, WORK_DATE, SYS_DATE, W1_CUTOFF
      , CASE WHEN SYS_DATE - W1_CUTOFF <= -1 THEN 24
             WHEN SYS_DATE - W1_CUTOFF > 0 THEN 0
             ELSE ABS((SYS_DATE - W1_CUTOFF) * 24)
        END AS THIS_WEEK_TIME
      , CASE WHEN SYS_DATE - W1_CUTOFF <= -1 THEN 0
             WHEN SYS_DATE - W1_CUTOFF > 0 THEN 24
             ELSE 24 - ABS((SYS_DATE - W1_CUTOFF) * 24)
        END AS NEXT_WEEK_TIME
      , TO_CHAR(W1_CUTOFF,'D') AS CKD_DAY
   FROM RSUMCUTOFF A
      , (
         SELECT TRIM(TO_CHAR(PLAN_YEAR))||LPAD(PLAN_WEEK,2,'0') AS PLAN_WEEK, SYS_DATE AS WORK_DATE, TO_DATE(SYS_DATE, 'YYYYMMDD') AS SYS_DATE
           FROM MWIPCALDEF
          WHERE CALENDAR_ID = 'OTD'
            AND (PLAN_YEAR, PLAN_WEEK) = (SELECT PLAN_YEAR, PLAN_WEEK FROM MWIPCALDEF WHERE CALENDAR_ID = 'OTD' AND SYS_DATE = '20200413') 
        ) B
  WHERE 1=1
    AND A.WORK_WEEK = B.PLAN_WEEK
    AND A.FACTORY = 'HMVA2'
    AND A.OPER IN ('A0020', 'A0100')
), 
DT AS
(
SELECT STD.VENDOR_ID
     , STD.WORK_DATE
     , DECODE(RNK, 1, W1_QTY) AS W1_QTY
     , DECODE(RNK, 1, TTL_WIP) AS TTL_WIP
     , DECODE(RNK, 1, WF_DEF) AS WF_DEF
     , TTL_WEEK_NEED
     , SUM(NVL(TTL_WEEK_NEED,0)) OVER(PARTITION BY STD.VENDOR_ID ORDER BY STD.WORK_DATE ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS SUM_TTL_WEEK_NEED
     , RCV_QTY
     , SUM(NVL(RCV_QTY,0)) OVER(PARTITION BY STD.VENDOR_ID ORDER BY STD.WORK_DATE ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS SUM_RCV_QTY 
     , PLN_QTY
     , SUM(NVL(PLN_QTY,0)) OVER(PARTITION BY STD.VENDOR_ID ORDER BY STD.WORK_DATE ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS SUM_PLN_QTY 
     , SHP_QTY
     , SUM(NVL(SHP_QTY,0)) OVER(PARTITION BY STD.VENDOR_ID ORDER BY STD.WORK_DATE ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS SUM_SHP_QTY
     , NVL(RCV_QTY,0) - NVL(TTL_WEEK_NEED,0) AS SHORT_WF
     , NVL(SHP_QTY,0) - NVL(PLN_QTY,0) AS SHORT_SHP
     , SUM(NVL(RCV_QTY,0)) OVER(PARTITION BY STD.VENDOR_ID ORDER BY STD.WORK_DATE ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) -
       SUM(NVL(TTL_WEEK_NEED,0)) OVER(PARTITION BY STD.VENDOR_ID ORDER BY STD.WORK_DATE ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS SUM_SHORT_WF
     , SUM(NVL(SHP_QTY,0)) OVER(PARTITION BY STD.VENDOR_ID ORDER BY STD.WORK_DATE ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) -
       SUM(NVL(PLN_QTY,0)) OVER(PARTITION BY STD.VENDOR_ID ORDER BY STD.WORK_DATE ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS SUM_SHORT_SHP
     , CKD_DAY
  FROM (
        SELECT A.VENDOR_ID
             , B.WORK_DATE
             , A.W1_QTY
             , A.TTL_WIP
             , A.WF_DEF
             , A.W2_QTY
             , A.THIS_WEEK_TIME_IN
             , A.NEXT_WEEK_TIME_IN 
             , ROUND(B.THIS_WEEK_TIME) AS THIS_WEEK_TIME
             , ROUND(B.NEXT_WEEK_TIME) AS NEXT_WEEK_TIME
             , ROUND(A.THIS_WEEK_TIME_IN * THIS_WEEK_TIME, 2) AS THIS_WEEK_NEED
             , ROUND(A.NEXT_WEEK_TIME_IN * NEXT_WEEK_TIME, 2) AS NEXT_WEEK_NEED
             , ROUND((A.THIS_WEEK_TIME_IN * THIS_WEEK_TIME) + (A.NEXT_WEEK_TIME_IN * NEXT_WEEK_TIME), 2) AS TTL_WEEK_NEED
             , CASE WHEN TO_CHAR(TO_DATE(B.WORK_DATE,'YYYYMMDD'),'D') = 7 THEN D0_QTY
                    WHEN TO_CHAR(TO_DATE(B.WORK_DATE,'YYYYMMDD'),'D') = 1 THEN D1_QTY
                    WHEN TO_CHAR(TO_DATE(B.WORK_DATE,'YYYYMMDD'),'D') = 2 THEN D2_QTY
                    WHEN TO_CHAR(TO_DATE(B.WORK_DATE,'YYYYMMDD'),'D') = 3 THEN D3_QTY
                    WHEN TO_CHAR(TO_DATE(B.WORK_DATE,'YYYYMMDD'),'D') = 4 THEN D4_QTY
                    WHEN TO_CHAR(TO_DATE(B.WORK_DATE,'YYYYMMDD'),'D') = 5 THEN D5_QTY
                    WHEN TO_CHAR(TO_DATE(B.WORK_DATE,'YYYYMMDD'),'D') = 6 THEN D6_QTY
                    ELSE 0
               END PLN_QTY 
             , ROW_NUMBER() OVER(PARTITION BY A.VENDOR_ID ORDER BY B.WORK_DATE) AS RNK
             , CKD_DAY
          FROM (
                SELECT A.*
                     , ROUND(DECODE(THIS_TIME_SUM, 0, 0, WF_DEF / THIS_TIME_SUM), 2) AS THIS_WEEK_TIME_IN
                  FROM (
                        SELECT VENDOR_ID
                             , W1_QTY
                             , TTL_WIP
                             , NVL(W1_QTY,0) - NVL(TTL_WIP,0) AS WF_DEF
                             , W2_QTY
                             , D0_QTY, D1_QTY, D2_QTY, D3_QTY, D4_QTY, D5_QTY, D6_QTY
                             , ROUND(W2_QTY / 168,2) AS NEXT_WEEK_TIME_IN
                             , NVL((       
                                    SELECT SUM(THIS_WEEK_TIME) AS THIS_WEEK_TIME
                                      FROM CUT_OFF
                                     WHERE SAP_CODE = VENDOR_ID
                                     GROUP BY SAP_CODE 
                                   ),0) AS THIS_TIME_SUM
                          FROM (
                                SELECT VENDOR_ID
                                     , SUM(CASE WHEN MAT_GRP_3 IN ('COB', 'BGN') THEN W1_QTY/TO_NUMBER(DECODE(MAT_CMF_13,' ',1,MAT_CMF_13)) ELSE W1_QTY END) AS W1_QTY
                                     , SUM(CASE WHEN MAT_GRP_3 IN ('COB', 'BGN') THEN W2_QTY/TO_NUMBER(DECODE(MAT_CMF_13,' ',1,MAT_CMF_13)) ELSE W2_QTY END) AS W2_QTY
                                     , SUM(CASE WHEN MAT_GRP_3 IN ('COB', 'BGN') THEN D0_QTY/TO_NUMBER(DECODE(MAT_CMF_13,' ',1,MAT_CMF_13)) ELSE D0_QTY END) AS D0_QTY
                                     , SUM(CASE WHEN MAT_GRP_3 IN ('COB', 'BGN') THEN D1_QTY/TO_NUMBER(DECODE(MAT_CMF_13,' ',1,MAT_CMF_13)) ELSE D1_QTY END) AS D1_QTY
                                     , SUM(CASE WHEN MAT_GRP_3 IN ('COB', 'BGN') THEN D2_QTY/TO_NUMBER(DECODE(MAT_CMF_13,' ',1,MAT_CMF_13)) ELSE D2_QTY END) AS D2_QTY
                                     , SUM(CASE WHEN MAT_GRP_3 IN ('COB', 'BGN') THEN D3_QTY/TO_NUMBER(DECODE(MAT_CMF_13,' ',1,MAT_CMF_13)) ELSE D3_QTY END) AS D3_QTY
                                     , SUM(CASE WHEN MAT_GRP_3 IN ('COB', 'BGN') THEN D4_QTY/TO_NUMBER(DECODE(MAT_CMF_13,' ',1,MAT_CMF_13)) ELSE D4_QTY END) AS D4_QTY
                                     , SUM(CASE WHEN MAT_GRP_3 IN ('COB', 'BGN') THEN D5_QTY/TO_NUMBER(DECODE(MAT_CMF_13,' ',1,MAT_CMF_13)) ELSE D5_QTY END) AS D5_QTY
                                     , SUM(CASE WHEN MAT_GRP_3 IN ('COB', 'BGN') THEN D6_QTY/TO_NUMBER(DECODE(MAT_CMF_13,' ',1,MAT_CMF_13)) ELSE D6_QTY END) AS D6_QTY
                                     , SUM(CASE WHEN MAT_GRP_3 IN ('COB', 'BGN') THEN TTL_WIP/TO_NUMBER(DECODE(MAT_CMF_13,' ',1,MAT_CMF_13)) ELSE TTL_WIP END) AS TTL_WIP
                                  FROM (
                                        SELECT MAT_ID 
                                             , SUM(DECODE(PLAN_WEEK, '202016', WW_QTY, 0)) AS W1_QTY 
                                             , SUM(DECODE(PLAN_WEEK, '202017', WW_QTY, 0)) AS W2_QTY 
                                             , SUM(DECODE(PLAN_WEEK, '202016', D0_QTY, 0)) AS D0_QTY 
                                             , SUM(DECODE(PLAN_WEEK, '202016', D1_QTY, 0)) AS D1_QTY 
                                             , SUM(DECODE(PLAN_WEEK, '202016', D2_QTY, 0)) AS D2_QTY 
                                             , SUM(DECODE(PLAN_WEEK, '202016', D3_QTY, 0)) AS D3_QTY 
                                             , SUM(DECODE(PLAN_WEEK, '202016', D4_QTY, 0)) AS D4_QTY 
                                             , SUM(DECODE(PLAN_WEEK, '202016', D5_QTY, 0)) AS D5_QTY 
                                             , SUM(DECODE(PLAN_WEEK, '202016', D6_QTY, 0)) AS D6_QTY 
                                          FROM RWIPPLNWEK
                                         WHERE FACTORY = 'HMVA2' 
                                           AND GUBUN = '3' 
                                           AND PLAN_WEEK IN ('202016', '202017')
                                           AND MAT_ID NOT LIKE 'SES%' 
                                         GROUP BY MAT_ID
                                         UNION ALL
                                        SELECT MAT_ID 
                                             , SUM(DECODE(PLAN_WEEK, '202016', WW_QTY, 0)) AS W1_QTY 
                                             , SUM(DECODE(PLAN_WEEK, '202017', WW_QTY, 0)) AS W2_QTY 
                                             , SUM(DECODE(PLAN_WEEK, '202015', D5_QTY, 0)) AS D0_QTY 
                                             , SUM(DECODE(PLAN_WEEK, '202015', D6_QTY, 0)) AS D1_QTY 
                                             , SUM(DECODE(PLAN_WEEK, '202016', D0_QTY, 0)) AS D2_QTY 
                                             , SUM(DECODE(PLAN_WEEK, '202016', D1_QTY, 0)) AS D3_QTY 
                                             , SUM(DECODE(PLAN_WEEK, '202016', D2_QTY, 0)) AS D4_QTY 
                                             , SUM(DECODE(PLAN_WEEK, '202016', D3_QTY, 0)) AS D5_QTY 
                                             , SUM(DECODE(PLAN_WEEK, '202016', D4_QTY, 0)) AS D6_QTY 
                                          FROM RWIPPLNWEK
                                         WHERE FACTORY = 'HMVA2' 
                                           AND GUBUN = '3' 
                                           AND PLAN_WEEK IN ('202015', '202016', '202017')
                                           AND MAT_ID LIKE 'SES%' 
                                         GROUP BY MAT_ID
                                       ) PLN
                                     , (
                                        SELECT A.MAT_ID
                                             , HALF_WIP / NVL(DATA_1,1) AS HALF_WIP
                                             , STD_WIP
                                             , NVL(HALF_WIP / NVL(DATA_1,1),0) + NVL(STD_WIP, 0) AS TTL_WIP
                                          FROM (
                                                SELECT MAT_ID
                                                     , ROUND(SUM(CASE WHEN MAT_GRP_3 IN ('COB', 'BGN') AND OPER BETWEEN 'A0000' AND 'A0395' THEN QTY_1/TO_NUMBER(DECODE(MAT_CMF_13,' ',1,MAT_CMF_13))
                                                                      WHEN OPER BETWEEN 'A0000' AND 'A0395' THEN QTY_1
                                                                      ELSE 0
                                                                 END),0) HALF_WIP
                                                     , ROUND(SUM(CASE WHEN MAT_GRP_3 IN ('COB', 'BGN') AND OPER > 'A0395' THEN QTY_1/TO_NUMBER(DECODE(MAT_CMF_13,' ',1,MAT_CMF_13))
                                                                      WHEN OPER > 'A0395' THEN QTY_1
                                                                      ELSE 0
                                                                 END),0) STD_WIP
                                                  FROM (
                                                        SELECT OPER
                                                             , CASE WHEN B.MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND MAT_ID LIKE 'SEKS%') 
                                                                         THEN DECODE(B.MAT_GRP_5, '1st', 0, QTY_1)
                                                                    WHEN (B.MAT_GRP_5 IN ('-', '1st', 'Merge') OR B.MAT_GRP_5 LIKE 'Middle%') THEN QTY_1
                                                               END QTY_1
                                                             , B.*
                                                          FROM RWIPLOTSTS_BOH A
                                                             , MWIPMATDEF B
                                                         WHERE 1=1
                                                           AND A.FACTORY = B.FACTORY 
                                                           AND A.MAT_ID = B.MAT_ID    
                                                           AND A.FACTORY = 'HMVA2'
                                                           AND A.CUTOFF_DT = '2020041022'
                                                           AND A.LOT_TYPE = 'W'
                                                           AND A.LOT_DEL_FLAG = ' '  
                                                           AND B.DELETE_FLAG = ' ' 
                                                           AND A.LOT_CMF_5 LIKE 'P%'
                                                           AND B.MAT_GRP_2 <> '-'
                                                           AND (B.MAT_GRP_5 IN ('-', '1st', '2nd', 'Merge') OR B.MAT_GRP_5 LIKE 'Middle%')
                                                       )
                                                 GROUP BY MAT_ID
                                               ) A
                                             , (
                                                SELECT KEY_1 AS MAT_ID, DATA_1
                                                  FROM MGCMTBLDAT 
                                                 WHERE FACTORY = 'HMVA2' 
                                                   AND TABLE_NAME IN ('H_SEC_AUTO_LOSS','H_HX_AUTO_LOSS')
                                               ) B
                                         WHERE A.MAT_ID = B.MAT_ID(+) 
                                       ) WIP
                                     , MWIPMATDEF MAT
                                 WHERE 1=1
                                   AND MAT.MAT_ID = PLN.MAT_ID(+)
                                   AND MAT.MAT_ID = WIP.MAT_ID(+)
                                   AND MAT.FACTORY = 'HMVA2'
                                   AND MAT.DELETE_FLAG = ' '
                                   AND MAT.MAT_TYPE = 'FG'
                                 GROUP BY VENDOR_ID
                               )
                         WHERE W1_QTY > 0
                       ) A                 
               ) A
             , CUT_OFF B
         WHERE 1=1
           AND A.VENDOR_ID = B.SAP_CODE
       ) STD
     , (
        SELECT VENDOR_ID, WORK_DATE, SUM(RCV_QTY) AS RCV_QTY
          FROM (
                SELECT WORK_DATE, A.MAT_ID
                     , (SELECT VENDOR_ID FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_ID = A.MAT_ID) AS VENDOR_ID
                     , RCV_QTY_1 / NVL(DATA_1,1) AS RCV_QTY    
                  FROM (
                        SELECT WORK_DATE, MAT_ID
                             , ROUND(SUM(CASE WHEN MAT_GRP_3 IN ('COB', 'BGN') THEN RCV_QTY_1/TO_NUMBER(DECODE(MAT_CMF_13,' ',1,MAT_CMF_13))                              
                                              ELSE RCV_QTY_1
                                         END),0) AS RCV_QTY_1             
                          FROM (
                                SELECT WORK_DATE
                                     , CASE WHEN B.MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND MAT_ID LIKE 'SEKS%') 
                                                 THEN DECODE(B.MAT_GRP_5, '1st', 0, RCV_QTY_1)
                                            WHEN B.MAT_GRP_5 IN ('-', '1st') THEN RCV_QTY_1
                                       END RCV_QTY_1
                                     , B.* 
                                  FROM VSUMWIPRCV A
                                     , MWIPMATDEF B
                                 WHERE 1=1
                                   AND A.FACTORY = B.FACTORY 
                                   AND A.MAT_ID = B.MAT_ID    
                                   AND A.FACTORY = 'HMVA2'
                                   AND A.WORK_DATE BETWEEN '20200411' AND '20200413'
                                   AND A.LOT_TYPE = 'W' 
                                   AND B.DELETE_FLAG = ' ' 
                                   AND A.CM_KEY_3 LIKE 'P%'
                                   AND B.MAT_GRP_2 <> '-'
                                   AND B.MAT_GRP_5 IN ('-', '1st', '2nd')
                               )
                         GROUP BY WORK_DATE, MAT_ID
                       ) A
                     , (
                        SELECT KEY_1 AS MAT_ID, DATA_1
                          FROM MGCMTBLDAT 
                         WHERE FACTORY = 'HMVA2' 
                           AND TABLE_NAME IN ('H_SEC_AUTO_LOSS','H_HX_AUTO_LOSS')
                       ) B
                 WHERE A.MAT_ID = B.MAT_ID(+)
               )
         GROUP BY VENDOR_ID, WORK_DATE
       ) RCV
     , (
        SELECT VENDOR_ID, WORK_DATE, SUM(SHP_QTY_1) AS SHP_QTY
          FROM (
                SELECT WORK_DATE
                     , (SELECT VENDOR_ID FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_ID = A.MAT_ID) AS VENDOR_ID
                     , A.MAT_ID 
                     , CASE WHEN MAT_GRP_3 IN ('COB', 'BGN') THEN (S1_FAC_OUT_QTY_1 + S2_FAC_OUT_QTY_1 + S3_FAC_OUT_QTY_1 + S4_FAC_OUT_QTY_1)/TO_NUMBER(DECODE(MAT_CMF_13,' ',1,MAT_CMF_13))
                            ELSE S1_FAC_OUT_QTY_1 + S2_FAC_OUT_QTY_1 + S3_FAC_OUT_QTY_1 + S4_FAC_OUT_QTY_1 
                       END AS SHP_QTY_1 
                  FROM RSUMFACMOV A
                     , MWIPMATDEF B
                 WHERE 1 = 1 
                   AND A.MAT_ID = B.MAT_ID
                   AND A.CM_KEY_1 = B.FACTORY
                   AND A.WORK_DATE BETWEEN '20200411' AND '20200413'
                   AND A.LOT_TYPE = 'W'
                   AND A.CM_KEY_1 = 'HMVA2' 
                   AND A.CM_KEY_2 = 'PROD'
                   AND A.CM_KEY_3 LIKE 'P%'
                   AND A.FACTORY NOT IN ('RETURN')
                   AND S1_FAC_OUT_QTY_1 + S2_FAC_OUT_QTY_1 + S3_FAC_OUT_QTY_1 + S4_FAC_OUT_QTY_1 > 0
               )
         GROUP BY VENDOR_ID, WORK_DATE 
       ) SHP
 WHERE 1=1   
   AND STD.WORK_DATE  = RCV.WORK_DATE(+)
   AND STD.WORK_DATE = SHP.WORK_DATE(+)   
   AND STD.VENDOR_ID = RCV.VENDOR_ID(+)
   AND STD.VENDOR_ID = SHP.VENDOR_ID(+)   
)
SELECT (SELECT DATA_1 FROM MGCMTBLDAT WHERE TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = MAT.MAT_GRP_1 AND ROWNUM=1) AS CUSTOMER,  ' ', MAT.MAT_GRP_10,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ' 
     , ROUND(NVL(SUM(W1_QTY), 0) / 1, 0) AS W1_QTY
     , ROUND(NVL(SUM(TTL_WIP), 0) / 1, 0) AS TTL_WIP
     , ROUND(NVL(SUM(WF_DEF), 0) / 1, 0) AS WF_DEF
     , GUBUN_1
     , GUBUN_2
     , ROUND(SUM(D0) / 1, 0) AS D0
     , ROUND(CASE WHEN GUBUN_2 IN ('과부족','누계차') AND TO_CHAR(TO_DATE('20200413','YYYYMMDD'),'D') = 7 THEN 0 ELSE ROUND(SUM(D1), 0) END / 1, 0) AS D1
     , ROUND(CASE WHEN GUBUN_2 IN ('과부족','누계차') AND TO_CHAR(TO_DATE('20200413','YYYYMMDD'),'D') IN (7,1) THEN 0 ELSE ROUND(SUM(D2), 0) END / 1, 0) AS D2
     , ROUND(CASE WHEN GUBUN_2 IN ('과부족','누계차') AND TO_CHAR(TO_DATE('20200413','YYYYMMDD'),'D') IN (7,1,2) THEN 0 ELSE ROUND(SUM(D3), 0) END / 1, 0) AS D3
     , ROUND(CASE WHEN GUBUN_2 IN ('과부족','누계차') AND TO_CHAR(TO_DATE('20200413','YYYYMMDD'),'D') IN (7,1,2,3) THEN 0 ELSE ROUND(SUM(D4), 0) END / 1, 0) AS D4
     , ROUND(CASE WHEN GUBUN_2 IN ('과부족','누계차') AND TO_CHAR(TO_DATE('20200413','YYYYMMDD'),'D') IN (7,1,2,3,4) THEN 0 ELSE ROUND(SUM(D5), 0) END / 1, 0) AS D5
     , ROUND(CASE WHEN GUBUN_2 IN ('과부족','누계차') AND TO_CHAR(TO_DATE('20200413','YYYYMMDD'),'D') IN (7,1,2,3,4,5) THEN 0 ELSE ROUND(SUM(D6), 0) END / 1, 0) AS D6
     , ROUND(CASE WHEN GUBUN_2 IN ('과부족','누계차') AND TO_CHAR(TO_DATE('20200413','YYYYMMDD'),'D') = 7 THEN ROUND(SUM(D0), 0)
            WHEN GUBUN_2 = '누계차' AND TO_CHAR(TO_DATE('20200413','YYYYMMDD'),'D') = 1 THEN ROUND(SUM(D1), 0)
            WHEN GUBUN_2 = '누계차' AND TO_CHAR(TO_DATE('20200413','YYYYMMDD'),'D') = 2 THEN ROUND(SUM(D2), 0)
            WHEN GUBUN_2 = '누계차' AND TO_CHAR(TO_DATE('20200413','YYYYMMDD'),'D') = 3 THEN ROUND(SUM(D3), 0)
            WHEN GUBUN_2 = '누계차' AND TO_CHAR(TO_DATE('20200413','YYYYMMDD'),'D') = 4 THEN ROUND(SUM(D4), 0)
            WHEN GUBUN_2 = '누계차' AND TO_CHAR(TO_DATE('20200413','YYYYMMDD'),'D') = 5 THEN ROUND(SUM(D5), 0)
            WHEN GUBUN_2 = '누계차' AND TO_CHAR(TO_DATE('20200413','YYYYMMDD'),'D') = 6 THEN ROUND(SUM(D6), 0)
            ELSE ROUND(NVL(SUM(D0),0) + NVL(SUM(D1),0) + NVL(SUM(D2),0) + NVL(SUM(D3),0) + NVL(SUM(D4),0) + NVL(SUM(D5),0) + NVL(SUM(D6),0), 0)
       END / 1, 0) AS TTL
     , MAX(CKD_DAY) AS CKD_DAY
  FROM (
        SELECT VENDOR_ID, SUM(W1_QTY) AS W1_QTY, SUM(TTL_WIP) AS TTL_WIP, SUM(WF_DEF) AS WF_DEF, MAX(CKD_DAY) AS CKD_DAY
          FROM DT
         GROUP BY VENDOR_ID
       ) STD
     , (
        SELECT VENDOR_ID
             , 'WAFER' AS GUBUN_1
             , '계획' AS GUBUN_2
             , SUM(DECODE(WORK_DATE, '20200411', TTL_WEEK_NEED)) AS D0
             , SUM(DECODE(WORK_DATE, '20200412', TTL_WEEK_NEED)) AS D1
             , SUM(DECODE(WORK_DATE, '20200413', TTL_WEEK_NEED)) AS D2
             , SUM(DECODE(WORK_DATE, '20200414', TTL_WEEK_NEED)) AS D3
             , SUM(DECODE(WORK_DATE, '20200415', TTL_WEEK_NEED)) AS D4
             , SUM(DECODE(WORK_DATE, '20200416', TTL_WEEK_NEED)) AS D5
             , SUM(DECODE(WORK_DATE, '20200417', TTL_WEEK_NEED)) AS D6
          FROM DT
         GROUP BY VENDOR_ID
         UNION ALL
        SELECT VENDOR_ID
             , 'WAFER' AS GUBUN_1
             , '실적' AS GUBUN_2
             , SUM(DECODE(WORK_DATE, '20200411', RCV_QTY)) AS D0
             , SUM(DECODE(WORK_DATE, '20200412', RCV_QTY)) AS D1
             , SUM(DECODE(WORK_DATE, '20200413', RCV_QTY)) AS D2
             , SUM(DECODE(WORK_DATE, '20200414', RCV_QTY)) AS D3
             , SUM(DECODE(WORK_DATE, '20200415', RCV_QTY)) AS D4
             , SUM(DECODE(WORK_DATE, '20200416', RCV_QTY)) AS D5
             , SUM(DECODE(WORK_DATE, '20200417', RCV_QTY)) AS D6
          FROM DT
         GROUP BY VENDOR_ID
         UNION ALL
        SELECT VENDOR_ID
             , 'WAFER' AS GUBUN_1
             , '과부족' AS GUBUN_2
             , SUM(DECODE(WORK_DATE, '20200411', SHORT_WF)) AS D0
             , SUM(DECODE(WORK_DATE, '20200412', SHORT_WF)) AS D1
             , SUM(DECODE(WORK_DATE, '20200413', SHORT_WF)) AS D2
             , SUM(DECODE(WORK_DATE, '20200414', SHORT_WF)) AS D3
             , SUM(DECODE(WORK_DATE, '20200415', SHORT_WF)) AS D4
             , SUM(DECODE(WORK_DATE, '20200416', SHORT_WF)) AS D5
             , SUM(DECODE(WORK_DATE, '20200417', SHORT_WF)) AS D6
          FROM DT
         GROUP BY VENDOR_ID
         UNION ALL
        SELECT VENDOR_ID
             , 'WAFER' AS GUBUN_1
             , '누계차' AS GUBUN_2
             , SUM(DECODE(WORK_DATE, '20200411', SUM_SHORT_WF)) AS D0
             , SUM(DECODE(WORK_DATE, '20200412', SUM_SHORT_WF)) AS D1
             , SUM(DECODE(WORK_DATE, '20200413', SUM_SHORT_WF)) AS D2
             , SUM(DECODE(WORK_DATE, '20200414', SUM_SHORT_WF)) AS D3
             , SUM(DECODE(WORK_DATE, '20200415', SUM_SHORT_WF)) AS D4
             , SUM(DECODE(WORK_DATE, '20200416', SUM_SHORT_WF)) AS D5
             , SUM(DECODE(WORK_DATE, '20200417', SUM_SHORT_WF)) AS D6
          FROM DT
         GROUP BY VENDOR_ID
         UNION ALL
        SELECT VENDOR_ID
             , '일출하' AS GUBUN_1
             , '계획' AS GUBUN_2
             , SUM(DECODE(WORK_DATE, '20200411', PLN_QTY)) AS D0
             , SUM(DECODE(WORK_DATE, '20200412', PLN_QTY)) AS D1
             , SUM(DECODE(WORK_DATE, '20200413', PLN_QTY)) AS D2
             , SUM(DECODE(WORK_DATE, '20200414', PLN_QTY)) AS D3
             , SUM(DECODE(WORK_DATE, '20200415', PLN_QTY)) AS D4
             , SUM(DECODE(WORK_DATE, '20200416', PLN_QTY)) AS D5
             , SUM(DECODE(WORK_DATE, '20200417', PLN_QTY)) AS D6
          FROM DT
         GROUP BY VENDOR_ID
         UNION ALL
        SELECT VENDOR_ID
             , '일출하' AS GUBUN_1
             , '실적' AS GUBUN_2
             , SUM(DECODE(WORK_DATE, '20200411', SHP_QTY)) AS D0
             , SUM(DECODE(WORK_DATE, '20200412', SHP_QTY)) AS D1
             , SUM(DECODE(WORK_DATE, '20200413', SHP_QTY)) AS D2
             , SUM(DECODE(WORK_DATE, '20200414', SHP_QTY)) AS D3
             , SUM(DECODE(WORK_DATE, '20200415', SHP_QTY)) AS D4
             , SUM(DECODE(WORK_DATE, '20200416', SHP_QTY)) AS D5
             , SUM(DECODE(WORK_DATE, '20200417', SHP_QTY)) AS D6
          FROM DT
         GROUP BY VENDOR_ID
         UNION ALL
        SELECT VENDOR_ID
             , '일출하' AS GUBUN_1
             , '과부족' AS GUBUN_2
             , SUM(DECODE(WORK_DATE, '20200411', SHORT_SHP)) AS D0
             , SUM(DECODE(WORK_DATE, '20200412', SHORT_SHP)) AS D1
             , SUM(DECODE(WORK_DATE, '20200413', SHORT_SHP)) AS D2
             , SUM(DECODE(WORK_DATE, '20200414', SHORT_SHP)) AS D3
             , SUM(DECODE(WORK_DATE, '20200415', SHORT_SHP)) AS D4
             , SUM(DECODE(WORK_DATE, '20200416', SHORT_SHP)) AS D5
             , SUM(DECODE(WORK_DATE, '20200417', SHORT_SHP)) AS D6
          FROM DT
         GROUP BY VENDOR_ID
         UNION ALL
        SELECT VENDOR_ID
             , '일출하' AS GUBUN_1
             , '누계차' AS GUBUN_2
             , SUM(DECODE(WORK_DATE, '20200411', SUM_SHORT_SHP)) AS D0
             , SUM(DECODE(WORK_DATE, '20200412', SUM_SHORT_SHP)) AS D1
             , SUM(DECODE(WORK_DATE, '20200413', SUM_SHORT_SHP)) AS D2
             , SUM(DECODE(WORK_DATE, '20200414', SUM_SHORT_SHP)) AS D3
             , SUM(DECODE(WORK_DATE, '20200415', SUM_SHORT_SHP)) AS D4
             , SUM(DECODE(WORK_DATE, '20200416', SUM_SHORT_SHP)) AS D5
             , SUM(DECODE(WORK_DATE, '20200417', SUM_SHORT_SHP)) AS D6
          FROM DT
         GROUP BY VENDOR_ID
       ) DAT
     , (
        SELECT DISTINCT MAT_GRP_1,  ' ', MAT_GRP_10,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', VENDOR_ID 
          FROM MWIPMATDEF
         WHERE FACTORY = 'HMVA2'
           AND MAT_TYPE = 'FG'
           AND DELETE_FLAG = ' '
           AND VENDOR_ID <> ' '
           AND SUBSTR(VENDOR_ID, 5, 4) <> '0000'
           AND MAT_ID LIKE '%'
       ) MAT
 WHERE 1=1
   AND MAT.VENDOR_ID = STD.VENDOR_ID 
   AND MAT.VENDOR_ID = DAT.VENDOR_ID(+) 
 GROUP BY MAT.MAT_GRP_1,  ' ', MAT.MAT_GRP_10,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', GUBUN_1, GUBUN_2 
 ORDER BY MAT.MAT_GRP_1,  ' ', MAT.MAT_GRP_10,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', GUBUN_1, DECODE(GUBUN_2, '계획', 1, '실적', 2, '과부족', 3, 4) 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
SELECT MIN(SYS_DATE) AS START_DAY 
     , MAX(SYS_DATE) AS END_DAY 
     , PLAN_YEAR||DECODE(LENGTH(PLAN_WEEK), 1, '0'||PLAN_WEEK, PLAN_WEEK) AS WEEK
  FROM MWIPCALDEF 
 WHERE CALENDAR_ID = 'OTD'
   AND (PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) IN ( 
                                                SELECT WW
                                                  FROM (
                                                        SELECT WW
                                                             , ROW_NUMBER() OVER(ORDER BY WW) AS RNK
                                                          FROM (
                                                                SELECT DISTINCT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW
                                                                  FROM MWIPCALDEF
                                                                 WHERE CALENDAR_ID = 'OTD'
                                                                   AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') >= (
                                                                                                              SELECT MAX(PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) AS WW
                                                                                                                FROM MWIPCALDEF
                                                                                                               WHERE CALENDAR_ID = 'OTD'
                                                                                                                 AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') < (SELECT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW FROM MWIPCALDEF WHERE CALENDAR_ID = 'OTD' AND SYS_DATE = '20200413')
                                                                                                                 AND SYS_DATE >= TO_CHAR(TO_DATE('20200413', 'YYYYMMDD')-14, 'YYYYMMDD')
                                                                                                             )
                                                               ) 
                                                       )
                                                 WHERE RNK <= 7
                                               ) 
 GROUP BY PLAN_YEAR, PLAN_WEEK 
 ORDER BY PLAN_YEAR, PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE) AS START_DAY 
     , MAX(SYS_DATE) AS END_DAY 
     , PLAN_YEAR||DECODE(LENGTH(PLAN_WEEK), 1, '0'||PLAN_WEEK, PLAN_WEEK) AS WEEK
  FROM MWIPCALDEF 
 WHERE CALENDAR_ID = 'SE'
   AND (PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) IN ( 
                                                SELECT WW
                                                  FROM (
                                                        SELECT WW
                                                             , ROW_NUMBER() OVER(ORDER BY WW) AS RNK
                                                          FROM (
                                                                SELECT DISTINCT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW
                                                                  FROM MWIPCALDEF
                                                                 WHERE CALENDAR_ID = 'SE'
                                                                   AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') >= (
                                                                                                              SELECT MAX(PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) AS WW
                                                                                                                FROM MWIPCALDEF
                                                                                                               WHERE CALENDAR_ID = 'SE'
                                                                                                                 AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') < (SELECT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW FROM MWIPCALDEF WHERE CALENDAR_ID = 'SE' AND SYS_DATE = '20200413')
                                                                                                                 AND SYS_DATE >= TO_CHAR(TO_DATE('20200413', 'YYYYMMDD')-14, 'YYYYMMDD')
                                                                                                             )
                                                               ) 
                                                       )
                                                 WHERE RNK <= 7
                                               ) 
 GROUP BY PLAN_YEAR, PLAN_WEEK 
 ORDER BY PLAN_YEAR, PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT LANGUAGE_2 FROM RWEBFUNDEF WHERE FUNC_NAME = 'PRD011006'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE) AS START_DAY 
     , MAX(SYS_DATE) AS END_DAY 
     , PLAN_YEAR||DECODE(LENGTH(PLAN_WEEK), 1, '0'||PLAN_WEEK, PLAN_WEEK) AS WEEK
  FROM MWIPCALDEF 
 WHERE CALENDAR_ID = 'OTD'
   AND (PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) IN ( 
                                                SELECT WW
                                                  FROM (
                                                        SELECT WW
                                                             , ROW_NUMBER() OVER(ORDER BY WW) AS RNK
                                                          FROM (
                                                                SELECT DISTINCT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW
                                                                  FROM MWIPCALDEF
                                                                 WHERE CALENDAR_ID = 'OTD'
                                                                   AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') >= (
                                                                                                              SELECT MAX(PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) AS WW
                                                                                                                FROM MWIPCALDEF
                                                                                                               WHERE CALENDAR_ID = 'OTD'
                                                                                                                 AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') < (SELECT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW FROM MWIPCALDEF WHERE CALENDAR_ID = 'OTD' AND SYS_DATE = '20200413')
                                                                                                                 AND SYS_DATE >= TO_CHAR(TO_DATE('20200413', 'YYYYMMDD')-14, 'YYYYMMDD')
                                                                                                             )
                                                               ) 
                                                       )
                                                 WHERE RNK <= 7
                                               ) 
 GROUP BY PLAN_YEAR, PLAN_WEEK 
 ORDER BY PLAN_YEAR, PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE) AS START_DAY 
     , MAX(SYS_DATE) AS END_DAY 
     , PLAN_YEAR||DECODE(LENGTH(PLAN_WEEK), 1, '0'||PLAN_WEEK, PLAN_WEEK) AS WEEK
  FROM MWIPCALDEF 
 WHERE CALENDAR_ID = 'SE'
   AND (PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) IN ( 
                                                SELECT WW
                                                  FROM (
                                                        SELECT WW
                                                             , ROW_NUMBER() OVER(ORDER BY WW) AS RNK
                                                          FROM (
                                                                SELECT DISTINCT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW
                                                                  FROM MWIPCALDEF
                                                                 WHERE CALENDAR_ID = 'SE'
                                                                   AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') >= (
                                                                                                              SELECT MAX(PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) AS WW
                                                                                                                FROM MWIPCALDEF
                                                                                                               WHERE CALENDAR_ID = 'SE'
                                                                                                                 AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') < (SELECT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW FROM MWIPCALDEF WHERE CALENDAR_ID = 'SE' AND SYS_DATE = '20200413')
                                                                                                                 AND SYS_DATE >= TO_CHAR(TO_DATE('20200413', 'YYYYMMDD')-14, 'YYYYMMDD')
                                                                                                             )
                                                               ) 
                                                       )
                                                 WHERE RNK <= 7
                                               ) 
 GROUP BY PLAN_YEAR, PLAN_WEEK 
 ORDER BY PLAN_YEAR, PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE) AS START_DAY 
     , MAX(SYS_DATE) AS END_DAY 
     , PLAN_YEAR||DECODE(LENGTH(PLAN_WEEK), 1, '0'||PLAN_WEEK, PLAN_WEEK) AS WEEK
  FROM MWIPCALDEF 
 WHERE CALENDAR_ID = 'OTD'
   AND (PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) IN ( 
                                                SELECT WW
                                                  FROM (
                                                        SELECT WW
                                                             , ROW_NUMBER() OVER(ORDER BY WW) AS RNK
                                                          FROM (
                                                                SELECT DISTINCT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW
                                                                  FROM MWIPCALDEF
                                                                 WHERE CALENDAR_ID = 'OTD'
                                                                   AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') >= (
                                                                                                              SELECT MAX(PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) AS WW
                                                                                                                FROM MWIPCALDEF
                                                                                                               WHERE CALENDAR_ID = 'OTD'
                                                                                                                 AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') < (SELECT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW FROM MWIPCALDEF WHERE CALENDAR_ID = 'OTD' AND SYS_DATE = '20200413')
                                                                                                                 AND SYS_DATE >= TO_CHAR(TO_DATE('20200413', 'YYYYMMDD')-14, 'YYYYMMDD')
                                                                                                             )
                                                               ) 
                                                       )
                                                 WHERE RNK <= 7
                                               ) 
 GROUP BY PLAN_YEAR, PLAN_WEEK 
 ORDER BY PLAN_YEAR, PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE) AS START_DAY 
     , MAX(SYS_DATE) AS END_DAY 
     , PLAN_YEAR||DECODE(LENGTH(PLAN_WEEK), 1, '0'||PLAN_WEEK, PLAN_WEEK) AS WEEK
  FROM MWIPCALDEF 
 WHERE CALENDAR_ID = 'SE'
   AND (PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) IN ( 
                                                SELECT WW
                                                  FROM (
                                                        SELECT WW
                                                             , ROW_NUMBER() OVER(ORDER BY WW) AS RNK
                                                          FROM (
                                                                SELECT DISTINCT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW
                                                                  FROM MWIPCALDEF
                                                                 WHERE CALENDAR_ID = 'SE'
                                                                   AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') >= (
                                                                                                              SELECT MAX(PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) AS WW
                                                                                                                FROM MWIPCALDEF
                                                                                                               WHERE CALENDAR_ID = 'SE'
                                                                                                                 AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') < (SELECT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW FROM MWIPCALDEF WHERE CALENDAR_ID = 'SE' AND SYS_DATE = '20200413')
                                                                                                                 AND SYS_DATE >= TO_CHAR(TO_DATE('20200413', 'YYYYMMDD')-14, 'YYYYMMDD')
                                                                                                             )
                                                               ) 
                                                       )
                                                 WHERE RNK <= 7
                                               ) 
 GROUP BY PLAN_YEAR, PLAN_WEEK 
 ORDER BY PLAN_YEAR, PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT (SELECT DATA_1 FROM MGCMTBLDAT@RPTTOMES WHERE FACTORY = 'HMVA2' AND TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = A.MAT_GRP_1) CUSTOMER, A.MAT_GRP_9, A.MAT_GRP_10,  ' ',  ' ',  ' ',  ' '
     , ROUND(SUM(ORI_PLN) / 1000, 0) AS ORI_PLN
     , ROUND(SUM(REV_PLN) / 1000, 0) AS REV_PLN
     , ROUND(SUM(SHP_TTL) / 1000, 0) AS SHP_TTL
     , ROUND(DECODE(SUM(ORI_PLN), 0, 0, SUM(SHP_TTL) / SUM(ORI_PLN) * 100), 1) AS JINDO_1
     , ROUND(DECODE(SUM(REV_PLN), 0, 0, SUM(SHP_TTL) / SUM(REV_PLN) * 100), 1) AS JINDO_2
     , ROUND(SUM(D1_PLAN) / 1000, 0) AS D1_PLAN
     , ROUND(SUM(NVL(D0_PLAN,0) - NVL(SHP_WEEK,0)) / 1000, 0) AS D0_PLAN
     , ROUND(SUM(SHP_TODAY) / 1000, 0) AS SHP_TODAY
     , ROUND(SUM(NVL(D0_PLAN,0) - NVL(SHP_WEEK,0) - NVL(SHP_TODAY,0)) / 1000, 0) AS D0_DEF
     , ROUND(SUM(HMK3A) / 1000, 0) AS HMK3A
     , ROUND(SUM(QC_GATE) / 1000, 0) AS QC_GATE
     , ROUND(SUM(PVI) / 1000, 0) AS PVI
     , ROUND(SUM(AVI) / 1000, 0) AS AVI
     , ROUND(SUM(SIG) / 1000, 0) AS SIG
     , ROUND(SUM(SBA) / 1000, 0) AS SBA
     , ROUND(SUM(TIN) / 1000, 0) AS TIN
     , ROUND(SUM(TRIM) / 1000, 0) AS TRIM
     , ROUND(SUM(MK) / 1000, 0) AS MK
     , ROUND(SUM(CURE) / 1000, 0) AS CURE
     , ROUND(SUM(MOLD) / 1000, 0) AS MOLD
     , ROUND(SUM(F_GATE) / 1000, 0) AS F_GATE
     , ROUND(SUM(F_WB9) / 1000, 0) AS F_WB9
     , ROUND(SUM(F_DA9) / 1000, 0) AS F_DA9
     , ROUND(SUM(F_WB8) / 1000, 0) AS F_WB8
     , ROUND(SUM(F_DA8) / 1000, 0) AS F_DA8
     , ROUND(SUM(F_WB7) / 1000, 0) AS F_WB7
     , ROUND(SUM(F_DA7) / 1000, 0) AS F_DA7
     , ROUND(SUM(F_WB6) / 1000, 0) AS F_WB6
     , ROUND(SUM(F_DA6) / 1000, 0) AS F_DA6
     , ROUND(SUM(F_WB5) / 1000, 0) AS F_WB5
     , ROUND(SUM(F_DA5) / 1000, 0) AS F_DA5
     , ROUND(SUM(F_WB4) / 1000, 0) AS F_WB4
     , ROUND(SUM(F_DA4) / 1000, 0) AS F_DA4
     , ROUND(SUM(F_WB3) / 1000, 0) AS F_WB3
     , ROUND(SUM(F_DA3) / 1000, 0) AS F_DA3
     , ROUND(SUM(F_WB2) / 1000, 0) AS F_WB2
     , ROUND(SUM(F_DA2) / 1000, 0) AS F_DA2
     , ROUND(SUM(F_WB1) / 1000, 0) AS F_WB1
     , ROUND(SUM(F_DA1 + SMT) / 1000, 0) AS F_DA1
     , ROUND(SUM(SP) / 1000, 0) AS SP
     , ROUND(SUM(SAW) / 1000, 0) AS SAW
     , ROUND(SUM(BG) / 1000, 0) AS BG
     , ROUND(SUM(STOCK) / 1000, 0) AS STOCK
     , ROUND(SUM(HMK3A + QC_GATE + PVI + AVI + SIG + SBA + TIN + TRIM + MK + CURE + MOLD + F_GATE + F_WB5 + F_DA5 + 
                 F_WB4 + F_DA4 + F_WB3 + F_DA3 + F_WB2 + F_DA2 + F_WB1 + F_DA1 + SP + SAW + BG + STOCK) / 1000, 0) AS WIP_TTL 
     , ROUND(SUM(RCV_QTY) / 1000, 0) AS RCV_QTY
     , ROUND(SUM(OUT_HMKA3) / 1000, 0) AS OUT_HMKA3
     , ROUND(SUM(OUT_CLOSE) / 1000, 0) AS OUT_CLOSE
     , ROUND(SUM(OUT_SIG) / 1000, 0) AS OUT_SIG
     , ROUND(SUM(OUT_MK) / 1000, 0) AS OUT_MK
     , ROUND(SUM(OUT_MOLD) / 1000, 0) AS OUT_MOLD
     , ROUND(SUM(OUT_WB9) / 1000, 0) AS OUT_WB9
     , ROUND(SUM(OUT_DA9) / 1000, 0) AS OUT_DA9
     , ROUND(SUM(OUT_WB8) / 1000, 0) AS OUT_WB8
     , ROUND(SUM(OUT_DA8) / 1000, 0) AS OUT_DA8
     , ROUND(SUM(OUT_WB7) / 1000, 0) AS OUT_WB7
     , ROUND(SUM(OUT_DA7) / 1000, 0) AS OUT_DA7
     , ROUND(SUM(OUT_WB6) / 1000, 0) AS OUT_WB6
     , ROUND(SUM(OUT_DA6) / 1000, 0) AS OUT_DA6
     , ROUND(SUM(OUT_WB5) / 1000, 0) AS OUT_WB5
     , ROUND(SUM(OUT_DA5) / 1000, 0) AS OUT_DA5
     , ROUND(SUM(OUT_WB4) / 1000, 0) AS OUT_WB4
     , ROUND(SUM(OUT_DA4) / 1000, 0) AS OUT_DA4
     , ROUND(SUM(OUT_WB3) / 1000, 0) AS OUT_WB3
     , ROUND(SUM(OUT_DA3) / 1000, 0) AS OUT_DA3
     , ROUND(SUM(OUT_WB2) / 1000, 0) AS OUT_WB2
     , ROUND(SUM(OUT_DA2) / 1000, 0) AS OUT_DA2
     , ROUND(SUM(OUT_WB1) / 1000, 0) AS OUT_WB1
     , ROUND(SUM(OUT_DA1) / 1000, 0) AS OUT_DA1
     , ROUND(SUM(OUT_DDS) / 1000, 0) AS OUT_DDS
     , ROUND(SUM(OUT_SAW) / 1000, 0) AS OUT_SAW
     , ROUND(SUM(OUT_BG) / 1000, 0) AS OUT_BG
     , ROUND(SUM(OUT_STEALTH) / 1000, 0) AS OUT_STEALTH
     , ROUND(SUM(OUT_PRI) / 1000, 0) AS OUT_PRI
     , ROUND(SUM(OUT_LAMI) / 1000, 0) AS OUT_LAMI
     , ROUND(SUM(OUT_STOCK) / 1000, 0) AS OUT_STOCK
  FROM (
        SELECT MAT.*
             , NVL(CASE WHEN MAT.MAT_GRP_3 IN ('COB') THEN ROUND(PLN.ORI_PLN/MAT.NET_DIE,0) ELSE PLN.ORI_PLN END, 0) * PRICE AS ORI_PLN
             , NVL(CASE WHEN MAT.MAT_GRP_3 IN ('COB') THEN ROUND(PLN.REV_PLN/MAT.NET_DIE,0) ELSE PLN.REV_PLN END, 0) * PRICE AS REV_PLN
             , NVL(CASE WHEN MAT.MAT_GRP_3 IN ('COB') THEN ROUND(SHP.SHP_TTL/MAT.NET_DIE,0) ELSE SHP.SHP_TTL END, 0) * PRICE AS SHP_TTL
             , NVL(CASE WHEN MAT.MAT_GRP_3 IN ('COB') THEN ROUND(PLN.D0_PLAN/MAT.NET_DIE,0) ELSE PLN.D0_PLAN END, 0) * PRICE AS D0_PLAN
             , NVL(CASE WHEN MAT.MAT_GRP_3 IN ('COB') THEN ROUND(PLN.D1_PLAN/MAT.NET_DIE,0) ELSE PLN.D1_PLAN END, 0) * PRICE AS D1_PLAN
             , NVL(CASE WHEN MAT.MAT_GRP_3 IN ('COB') THEN ROUND(SHP.SHP_TODAY/MAT.NET_DIE,0) ELSE SHP.SHP_TODAY END, 0) * PRICE AS SHP_TODAY 
             , NVL(CASE WHEN MAT.MAT_GRP_3 IN ('COB') THEN ROUND(SHP.SHP_WEEK/MAT.NET_DIE,0) ELSE SHP.SHP_WEEK END, 0) * PRICE AS SHP_WEEK 
             , NVL(STOCK,0) * PRICE AS STOCK, NVL(BG,0) * PRICE AS BG, NVL(SAW,0) * PRICE AS SAW, NVL(SP,0) * PRICE AS SP, NVL(SMT,0) * PRICE AS SMT, NVL(DA,0) * PRICE AS DA
             , NVL(S_DA1,0) * PRICE AS S_DA1, NVL(S_DA2,0) * PRICE AS S_DA2, NVL(S_DA3,0) * PRICE AS S_DA3, NVL(S_DA4,0) * PRICE AS S_DA4, NVL(S_DA5,0) * PRICE AS S_DA5
             , NVL(S_DA6,0) * PRICE AS S_DA6, NVL(S_DA7,0) * PRICE AS S_DA7, NVL(S_DA8,0) * PRICE AS S_DA8, NVL(S_DA9,0) * PRICE AS S_DA9
             , NVL(F_DA1,0) * PRICE AS F_DA1, NVL(F_DA2,0) * PRICE AS F_DA2, NVL(F_DA3,0) * PRICE AS F_DA3, NVL(F_DA4,0) * PRICE AS F_DA4, NVL(F_DA5,0) * PRICE AS F_DA5
             , NVL(F_DA6,0) * PRICE AS F_DA6, NVL(F_DA7,0) * PRICE AS F_DA7, NVL(F_DA8,0) * PRICE AS F_DA8, NVL(F_DA9,0) * PRICE AS F_DA9
             , NVL(WB,0) * PRICE AS WB, NVL(S_WB1,0) * PRICE AS S_WB1, NVL(S_WB2,0) * PRICE AS S_WB2, NVL(S_WB3,0) * PRICE AS S_WB3, NVL(S_WB4,0) * PRICE AS S_WB4
             , NVL(S_WB5,0) * PRICE AS S_WB5, NVL(S_WB6,0) * PRICE AS S_WB6, NVL(S_WB7,0) * PRICE AS S_WB7, NVL(S_WB8,0) * PRICE AS S_WB8, NVL(S_WB9,0) * PRICE AS S_WB9
             , NVL(F_WB1,0) * PRICE AS F_WB1, NVL(F_WB2,0) * PRICE AS F_WB2, NVL(F_WB3,0) * PRICE AS F_WB3, NVL(F_WB4,0) * PRICE AS F_WB4
             , NVL(F_WB5,0) * PRICE AS F_WB5, NVL(F_WB6,0) * PRICE AS F_WB6, NVL(F_WB7,0) * PRICE AS F_WB7, NVL(F_WB8,0) * PRICE AS F_WB8, NVL(F_WB9,0) * PRICE AS F_WB9
             , NVL(GATE,0) * PRICE AS GATE, NVL(F_GATE,0) * PRICE  AS F_GATE, NVL(MOLD,0) * PRICE AS MOLD, NVL(CURE,0) * PRICE AS CURE
             , NVL(MK,0) * PRICE AS MK, NVL(TRIM,0) * PRICE AS TRIM, NVL(TIN,0) * PRICE AS TIN, NVL(SBA,0) * PRICE AS SBA, NVL(SIG,0) * PRICE AS SIG
             , NVL(AVI,0) * PRICE AS AVI, NVL(VI,0) * PRICE AS VI, NVL(PVI,0) * PRICE AS PVI, NVL(QC_GATE,0) * PRICE AS QC_GATE, NVL(HMK3A,0) * PRICE AS HMK3A
             , NVL(CASE WHEN MAT.MAT_CMF_11 = 'JZH' THEN NVL(RCV.RCV_QTY,0)/MAT.COMP_CNT/2
                        WHEN MAT.MAT_CMF_11 IN ('DHL', 'DQZ', 'DRA', 'DQA', 'DND', 'DWG', 'DUT', 'HAU', 'HF8', 'HDM', 'HDR', 'HEN', 'HQA', 'HQC') THEN DECODE(MAT.MAT_GRP_5, '3rd', NVL(RCV.RCV_QTY,0)/MAT.COMP_CNT, 0)
                        WHEN MAT.MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND (MAT_ID LIKE 'SEKS%' OR MAT_ID LIKE 'SEKY%')) THEN DECODE(MAT.MAT_GRP_5, '2nd', NVL(RCV.RCV_QTY,0)/MAT.COMP_CNT, 0)
                        WHEN MAT.MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT.MAT_GRP_5 <> '-' THEN CASE WHEN MAT.MAT_GRP_5 IN ('1st','Merge') OR MAT.MAT_GRP_5 LIKE 'Middle%' THEN NVL(RCV.RCV_QTY,0)/MAT.COMP_CNT ELSE 0 END
                        WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN ROUND(RCV.RCV_QTY/NET_DIE,0)
                        ELSE NVL(RCV.RCV_QTY,0)/MAT.COMP_CNT
                   END,0) * PRICE AS RCV_QTY
             , NVL(MOV.OUT_WB,0) * PRICE AS OUT_WB
             , NVL(MOV.OUT_DA,0) * PRICE AS OUT_DA
             , NVL(MOV.OUT_DP,0) * PRICE AS OUT_DP
             , NVL(MOV.OUT_HMKA3,0) * PRICE AS OUT_HMKA3
             , NVL(MOV.OUT_CLOSE,0) * PRICE AS OUT_CLOSE
             , NVL(MOV.OUT_SIG,0) * PRICE AS OUT_SIG
             , NVL(MOV.OUT_MK,0) * PRICE AS OUT_MK
             , NVL(MOV.OUT_MOLD,0) * PRICE AS OUT_MOLD
             , NVL(MOV.OUT_WB9,0) * PRICE AS OUT_WB9
             , NVL(MOV.OUT_DA9,0) * PRICE AS OUT_DA9
             , NVL(MOV.OUT_WB8,0) * PRICE AS OUT_WB8
             , NVL(MOV.OUT_DA8,0) * PRICE AS OUT_DA8
             , NVL(MOV.OUT_WB7,0) * PRICE AS OUT_WB7
             , NVL(MOV.OUT_DA7,0) * PRICE AS OUT_DA7
             , NVL(MOV.OUT_WB6,0) * PRICE AS OUT_WB6
             , NVL(MOV.OUT_DA6,0) * PRICE AS OUT_DA6
             , NVL(MOV.OUT_WB5,0) * PRICE AS OUT_WB5
             , NVL(MOV.OUT_DA5,0) * PRICE AS OUT_DA5
             , NVL(MOV.OUT_WB4,0) * PRICE AS OUT_WB4
             , NVL(MOV.OUT_DA4,0) * PRICE AS OUT_DA4
             , NVL(MOV.OUT_WB3,0) * PRICE AS OUT_WB3
             , NVL(MOV.OUT_DA3,0) * PRICE AS OUT_DA3
             , NVL(MOV.OUT_WB2,0) * PRICE AS OUT_WB2
             , NVL(MOV.OUT_DA2,0) * PRICE AS OUT_DA2
             , NVL(MOV.OUT_WB1,0) * PRICE AS OUT_WB1
             , NVL(MOV.OUT_DA1,0) * PRICE AS OUT_DA1
             , NVL(MOV.OUT_DDS,0) * PRICE AS OUT_DDS
             , NVL(MOV.OUT_SAW,0) * PRICE AS OUT_SAW
             , NVL(MOV.OUT_BG,0) * PRICE AS OUT_BG
             , NVL(MOV.OUT_STEALTH,0) * PRICE AS OUT_STEALTH
             , NVL(MOV.OUT_PRI,0) * PRICE AS OUT_PRI
             , NVL(MOV.OUT_LAMI,0) * PRICE AS OUT_LAMI
             , NVL(MOV.OUT_STOCK,0) * PRICE AS OUT_STOCK
          FROM (
                SELECT A.MAT_ID, MAT_GRP_1, MAT_GRP_2, MAT_GRP_3, MAT_GRP_4, MAT_GRP_5
                     , MAT_GRP_6, MAT_GRP_7, MAT_GRP_8, MAT_GRP_9, MAT_GRP_10, MAT_CMF_10, MAT_CMF_11
                     , NET_DIE, COMP_CNT, HX_COMP_MIN, HX_COMP_MAX 
                     , CASE WHEN MAT_GRP_1 = 'SE' AND MAT_GRP_9 = 'MEMORY' THEN 'SEK_________-___' || SUBSTR(A.MAT_ID, -3) 
                            WHEN MAT_GRP_1 = 'HX' THEN MAT_CMF_10 
                            ELSE A.MAT_ID 
                       END CONV_MAT_ID 
                     , 1 AS PRICE
                  FROM VWIPMATDEF A
                 WHERE 1=1
                   AND A.FACTORY = 'HMVA2'
                   AND A.DELETE_FLAG = ' '
                   AND A.MAT_TYPE = 'FG' 
                   AND A.MAT_GRP_2 <> 'PW' 
               ) MAT
             , (
                SELECT MAT_ID 
                     , SUM(ORI_PLN) AS ORI_PLN 
                     , SUM(REV_PLN) AS REV_PLN 
                     , SUM(D0_PLAN) AS D0_PLAN 
                     , SUM(D1_PLAN) AS D1_PLAN 
                  FROM ( 
                        SELECT MAT_ID, SUM(PLAN_QTY_ASSY) AS ORI_PLN, SUM(RESV_FIELD1) AS REV_PLN, 0 AS D0_PLAN, 0 AS D1_PLAN
                          FROM (
                                SELECT MAT_ID, SUM(PLAN_QTY_ASSY) AS PLAN_QTY_ASSY, SUM(TO_NUMBER(DECODE(RESV_FIELD1,' ',0,RESV_FIELD1))) AS RESV_FIELD1
                                  FROM CWIPPLNMON 
                                 WHERE 1=1 
                                   AND FACTORY = 'HMVA2'
                                   AND PLAN_MONTH = '202004'
                                 GROUP BY MAT_ID 
                               ) 
                         GROUP BY MAT_ID
                        HAVING SUM(PLAN_QTY_ASSY + RESV_FIELD1) > 0
                         UNION ALL
                        SELECT MAT_ID, 0, 0
                             , SUM(CASE WHEN TO_CHAR(TO_DATE('20200413', 'YYYYMMDD'), 'D') = 7 THEN D0_QTY 
                                        WHEN TO_CHAR(TO_DATE('20200413', 'YYYYMMDD'), 'D') = 1 THEN D0_QTY + D1_QTY 
                                        WHEN TO_CHAR(TO_DATE('20200413', 'YYYYMMDD'), 'D') = 2 THEN D0_QTY + D1_QTY + D2_QTY 
                                        WHEN TO_CHAR(TO_DATE('20200413', 'YYYYMMDD'), 'D') = 3 THEN D0_QTY + D1_QTY + D2_QTY + D3_QTY 
                                        WHEN TO_CHAR(TO_DATE('20200413', 'YYYYMMDD'), 'D') = 4 THEN D0_QTY + D1_QTY + D2_QTY + D3_QTY + D4_QTY 
                                        WHEN TO_CHAR(TO_DATE('20200413', 'YYYYMMDD'), 'D') = 5 THEN D0_QTY + D1_QTY + D2_QTY + D3_QTY + D4_QTY + D5_QTY 
                                        WHEN TO_CHAR(TO_DATE('20200413', 'YYYYMMDD'), 'D') = 6 THEN D0_QTY + D1_QTY + D2_QTY + D3_QTY + D4_QTY + D5_QTY + D6_QTY 
                                        ELSE 0 
                                   END) AS D0_PLAN 
                             , SUM(CASE WHEN TO_CHAR(TO_DATE('20200413', 'YYYYMMDD'), 'D') = 7 THEN D1_QTY 
                                        WHEN TO_CHAR(TO_DATE('20200413', 'YYYYMMDD'), 'D') = 1 THEN D2_QTY 
                                        WHEN TO_CHAR(TO_DATE('20200413', 'YYYYMMDD'), 'D') = 2 THEN D3_QTY 
                                        WHEN TO_CHAR(TO_DATE('20200413', 'YYYYMMDD'), 'D') = 3 THEN D4_QTY 
                                        WHEN TO_CHAR(TO_DATE('20200413', 'YYYYMMDD'), 'D') = 4 THEN D5_QTY 
                                        WHEN TO_CHAR(TO_DATE('20200413', 'YYYYMMDD'), 'D') = 5 THEN D6_QTY 
                                        WHEN TO_CHAR(TO_DATE('20200413', 'YYYYMMDD'), 'D') = 6 THEN D7_QTY 
                                        ELSE 0 
                                   END) AS D1_PLAN 
                          FROM (
                                SELECT FACTORY, MAT_ID 
                                     , SUM(DECODE(PLAN_WEEK, '202016', D0_QTY, 0)) AS D0_QTY  
                                     , SUM(DECODE(PLAN_WEEK, '202016', D1_QTY, 0)) AS D1_QTY  
                                     , SUM(DECODE(PLAN_WEEK, '202016', D2_QTY, 0)) AS D2_QTY  
                                     , SUM(DECODE(PLAN_WEEK, '202016', D3_QTY, 0)) AS D3_QTY  
                                     , SUM(DECODE(PLAN_WEEK, '202016', D4_QTY, 0)) AS D4_QTY  
                                     , SUM(DECODE(PLAN_WEEK, '202016', D5_QTY, 0)) AS D5_QTY  
                                     , SUM(DECODE(PLAN_WEEK, '202016', D6_QTY, 0)) AS D6_QTY  
                                     , SUM(DECODE(PLAN_WEEK, '202017', D0_QTY, 0)) AS D7_QTY  
                                     , SUM(DECODE(PLAN_WEEK, '202017', D1_QTY, 0)) AS D8_QTY  
                                     , SUM(DECODE(PLAN_WEEK, '202017', D2_QTY, 0)) AS D9_QTY  
                                     , SUM(DECODE(PLAN_WEEK, '202017', D3_QTY, 0)) AS D10_QTY  
                                     , SUM(DECODE(PLAN_WEEK, '202017', D4_QTY, 0)) AS D11_QTY  
                                     , SUM(DECODE(PLAN_WEEK, '202017', D5_QTY, 0)) AS D12_QTY  
                                     , SUM(DECODE(PLAN_WEEK, '202017', D6_QTY, 0)) AS D13_QTY  
                                     , SUM(DECODE(PLAN_WEEK, '202016', WW_QTY, 0)) AS W1_QTY  
                                     , SUM(DECODE(PLAN_WEEK, '202017', WW_QTY, 0)) AS W2_QTY  
                                  FROM RWIPPLNWEK  
                                 WHERE 1=1  
                                   AND FACTORY = 'HMVA2'  
                                   AND GUBUN = '3'  
                                   AND PLAN_WEEK IN ('202016','202017') 
                                 GROUP BY FACTORY, MAT_ID  
                               )  
                         GROUP BY MAT_ID  
                       ) 
                 GROUP BY MAT_ID  
               ) PLN
             , (
                SELECT MAT_ID
                     , SUM(CASE WHEN WORK_DATE BETWEEN '20200401' AND '20200413' THEN SHP_QTY_1 END) AS SHP_TTL 
                     , SUM(DECODE(WORK_DATE, '20200413', SHP_QTY_1, 0)) AS SHP_TODAY
                     , SUM(CASE WHEN WORK_DATE BETWEEN '20200411' AND '20200412' THEN SHP_QTY_1 END) AS SHP_WEEK 
                  FROM VSUMWIPOUT
                 WHERE 1=1
                   AND WORK_DATE BETWEEN '20200401' AND '20200413' 
                   AND FACTORY = 'HMVA2' 
                   AND LOT_TYPE = 'W' 
                   AND CM_KEY_2 = 'PROD' 
                   AND CM_KEY_3 LIKE 'P%'
                   AND MAT_ID NOT LIKE 'HX%'
                 GROUP BY MAT_ID 
                 UNION ALL 
                SELECT MAT_ID
                     , SUM(CASE WHEN WORK_DATE BETWEEN '20200401' AND '20200413' THEN SHP_QTY_1 END) AS SHP_TTL 
                     , SUM(DECODE(WORK_DATE, '20200413', SHP_QTY_1, 0)) AS SHP_TODAY
                     , SUM(CASE WHEN WORK_DATE BETWEEN '20200411' AND '20200412' THEN SHP_QTY_1 END) AS SHP_WEEK 
                  FROM VSUMWIPOUT_06
                 WHERE 1=1
                   AND WORK_DATE BETWEEN '20200401' AND '20200413' 
                   AND FACTORY = 'HMVA2' 
                   AND LOT_TYPE = 'W' 
                   AND CM_KEY_2 = 'PROD' 
                   AND CM_KEY_3 LIKE 'P%'
                   AND MAT_ID LIKE 'HX%'
                 GROUP BY MAT_ID 
               ) SHP
             , (
                SELECT MAT_ID, SUM(RCV_QTY_1) AS RCV_QTY
                  FROM VSUMWIPRCV
                 WHERE FACTORY = 'HMVA2'
                   AND WORK_DATE = '20200413'
                   AND LOT_TYPE = 'W'
                   AND CM_KEY_3 LIKE 'P%' 
                 GROUP BY MAT_ID
               ) RCV
             , (
                SELECT MAT_ID
                     , SUM(QTY) AS WIP_TTL
                     , SUM(DECODE(OPER_GRP_1, 'HMK2A', QTY, 0)) AS STOCK
                     , SUM(DECODE(OPER_GRP_1, 'B/G', QTY, 0)) AS BG
                     , SUM(DECODE(OPER_GRP_1, 'SAW', QTY, 0)) AS SAW
                     , SUM(DECODE(OPER_GRP_1, 'S/P', QTY, 0)) AS SP 
                     , SUM(DECODE(OPER_GRP_1, 'SMT', QTY, 0)) AS SMT 
                     , SUM(DECODE(OPER_GRP_1, 'D/A', QTY, 0)) AS DA
                     , SUM(CASE WHEN OPER IN ('A0250', 'A0305', 'A0306', 'A0310', 'A0333', 'A0340', 'A0400', 'A0401', 'A0500', 'A0501', 'A0530', 'A0531') THEN QTY ELSE 0 END) AS S_DA1
                     , SUM(CASE WHEN OPER IN ('A0402', 'A0502', 'A0532') THEN QTY ELSE 0 END) AS S_DA2
                     , SUM(CASE WHEN OPER IN ('A0403', 'A0503', 'A0533') THEN QTY ELSE 0 END) AS S_DA3
                     , SUM(CASE WHEN OPER IN ('A0404', 'A0504', 'A0534') THEN QTY ELSE 0 END) AS S_DA4
                     , SUM(CASE WHEN OPER IN ('A0405', 'A0505', 'A0535') THEN QTY ELSE 0 END) AS S_DA5
                     , SUM(CASE WHEN OPER IN ('A0406', 'A0506', 'A0536') THEN QTY ELSE 0 END) AS S_DA6
                     , SUM(CASE WHEN OPER IN ('A0407', 'A0507', 'A0537') THEN QTY ELSE 0 END) AS S_DA7
                     , SUM(CASE WHEN OPER IN ('A0408', 'A0508', 'A0538') THEN QTY ELSE 0 END) AS S_DA8
                     , SUM(CASE WHEN OPER IN ('A0409', 'A0509', 'A0539') THEN QTY ELSE 0 END) AS S_DA9
                     , SUM(CASE WHEN OPER IN ('A0250','A0333','A0340','A0400', 'A0401') THEN QTY ELSE 0 END) AS F_DA1
                     , SUM(CASE WHEN OPER IN ('A0402') THEN QTY 
                                WHEN OPER = 'A0801' AND MAT_GRP_1 = 'SE' AND MAT_GRP_5 <> 'Merge' THEN QTY 
                                WHEN OPER = 'A0801' AND MAT_GRP_1 <> 'SE' AND SUBSTR(MAT_GRP_4,-1) <> SUBSTR(OPER, -1) THEN QTY 
                                ELSE 0 END) AS F_DA2 
                     , SUM(CASE WHEN OPER IN ('A0403') THEN QTY 
                                WHEN OPER = 'A0802' AND MAT_GRP_1 = 'SE' AND MAT_GRP_5 <> 'Merge' THEN QTY 
                                WHEN OPER = 'A0802' AND MAT_GRP_1 <> 'SE' AND SUBSTR(MAT_GRP_4,-1) <> SUBSTR(OPER, -1) THEN QTY 
                                ELSE 0 END) AS F_DA3 
                     , SUM(CASE WHEN OPER IN ('A0404') THEN QTY 
                                WHEN OPER = 'A0803' AND MAT_GRP_1 = 'SE' AND MAT_GRP_5 <> 'Merge' THEN QTY 
                                WHEN OPER = 'A0803' AND MAT_GRP_1 <> 'SE' AND SUBSTR(MAT_GRP_4,-1) <> SUBSTR(OPER, -1) THEN QTY 
                                ELSE 0 END) AS F_DA4 
                     , SUM(CASE WHEN OPER IN ('A0405') THEN QTY 
                                WHEN OPER = 'A0804' AND MAT_GRP_1 = 'SE' AND MAT_GRP_5 <> 'Merge' THEN QTY 
                                WHEN OPER = 'A0804' AND MAT_GRP_1 <> 'SE' AND SUBSTR(MAT_GRP_4,-1) <> SUBSTR(OPER, -1) THEN QTY 
                                ELSE 0 END) AS F_DA5 
                     , SUM(CASE WHEN OPER IN ('A0406') THEN QTY 
                                WHEN OPER = 'A0805' AND MAT_GRP_1 = 'SE' AND MAT_GRP_5 <> 'Merge' THEN QTY 
                                WHEN OPER = 'A0805' AND MAT_GRP_1 <> 'SE' AND SUBSTR(MAT_GRP_4,-1) <> SUBSTR(OPER, -1) THEN QTY 
                                ELSE 0 END) AS F_DA6 
                     , SUM(CASE WHEN OPER IN ('A0407') THEN QTY 
                                WHEN OPER = 'A0806' AND MAT_GRP_1 = 'SE' AND MAT_GRP_5 <> 'Merge' THEN QTY 
                                WHEN OPER = 'A0806' AND MAT_GRP_1 <> 'SE' AND SUBSTR(MAT_GRP_4,-1) <> SUBSTR(OPER, -1) THEN QTY 
                                ELSE 0 END) AS F_DA7 
                     , SUM(CASE WHEN OPER IN ('A0408') THEN QTY 
                                WHEN OPER = 'A0807' AND MAT_GRP_1 = 'SE' AND MAT_GRP_5 <> 'Merge' THEN QTY 
                                WHEN OPER = 'A0807' AND MAT_GRP_1 <> 'SE' AND SUBSTR(MAT_GRP_4,-1) <> SUBSTR(OPER, -1) THEN QTY 
                                ELSE 0 END) AS F_DA8 
                     , SUM(CASE WHEN OPER IN ('A0409') THEN QTY 
                                WHEN OPER = 'A0808' AND MAT_GRP_1 = 'SE' AND MAT_GRP_5 <> 'Merge' THEN QTY 
                                WHEN OPER = 'A0808' AND MAT_GRP_1 <> 'SE' AND SUBSTR(MAT_GRP_4,-1) <> SUBSTR(OPER, -1) THEN QTY 
                                ELSE 0 END) AS F_DA9 
                     , SUM(DECODE(OPER_GRP_1, 'W/B', QTY, 0)) AS WB
                     , SUM(CASE WHEN OPER IN ('A0550', 'A0551', 'A0600','A0601', 'A0800', 'A0801') THEN QTY ELSE 0 END) AS S_WB1
                     , SUM(CASE WHEN OPER IN ('A0552', 'A0602', 'A0802') THEN QTY ELSE 0 END) AS S_WB2
                     , SUM(CASE WHEN OPER IN ('A0553', 'A0603', 'A0803') THEN QTY ELSE 0 END) AS S_WB3
                     , SUM(CASE WHEN OPER IN ('A0554', 'A0604', 'A0804') THEN QTY ELSE 0 END) AS S_WB4
                     , SUM(CASE WHEN OPER IN ('A0555', 'A0605', 'A0805') THEN QTY ELSE 0 END) AS S_WB5
                     , SUM(CASE WHEN OPER IN ('A0556', 'A0606', 'A0806') THEN QTY ELSE 0 END) AS S_WB6
                     , SUM(CASE WHEN OPER IN ('A0557', 'A0607', 'A0807') THEN QTY ELSE 0 END) AS S_WB7
                     , SUM(CASE WHEN OPER IN ('A0558', 'A0608', 'A0808') THEN QTY ELSE 0 END) AS S_WB8
                     , SUM(CASE WHEN OPER IN ('A0559', 'A0609', 'A0809') THEN QTY ELSE 0 END) AS S_WB9
                     , SUM(CASE WHEN OPER IN ('A0550', 'A0551', 'A0600','A0601', 'A0500', 'A0501', 'A0530', 'A0531') THEN QTY ELSE 0 END) AS F_WB1
                     , SUM(CASE WHEN OPER IN ('A0552', 'A0602', 'A0502', 'A0532') THEN QTY ELSE 0 END) AS F_WB2
                     , SUM(CASE WHEN OPER IN ('A0553', 'A0603', 'A0503', 'A0533') THEN QTY ELSE 0 END) AS F_WB3
                     , SUM(CASE WHEN OPER IN ('A0554', 'A0604', 'A0504', 'A0534') THEN QTY ELSE 0 END) AS F_WB4
                     , SUM(CASE WHEN OPER IN ('A0555', 'A0605', 'A0505', 'A0535') THEN QTY ELSE 0 END) AS F_WB5
                     , SUM(CASE WHEN OPER IN ('A0556', 'A0606', 'A0506', 'A0536') THEN QTY ELSE 0 END) AS F_WB6
                     , SUM(CASE WHEN OPER IN ('A0557', 'A0607', 'A0507', 'A0537') THEN QTY ELSE 0 END) AS F_WB7
                     , SUM(CASE WHEN OPER IN ('A0558', 'A0608', 'A0508', 'A0538') THEN QTY ELSE 0 END) AS F_WB8
                     , SUM(CASE WHEN OPER IN ('A0559', 'A0609', 'A0509', 'A0539') THEN QTY ELSE 0 END) AS F_WB9
                     , SUM(DECODE(OPER_GRP_1, 'GATE', QTY, 0)) AS GATE
                     , SUM(CASE WHEN OPER_GRP_1 = 'GATE' AND MAT_GRP_5 = '-' THEN QTY 
                                WHEN OPER_GRP_1 = 'GATE' AND MAT_GRP_1 = 'SE' AND MAT_GRP_5 = 'Merge' THEN QTY
                                WHEN OPER_GRP_1 = 'GATE' AND MAT_GRP_1 <> 'SE' AND SUBSTR(MAT_GRP_4,-1) = SUBSTR(OPER, -1) THEN QTY  
                                ELSE 0 END) AS F_GATE 
                     , SUM(DECODE(OPER_GRP_1, 'MOLD', QTY, 0)) AS MOLD
                     , SUM(DECODE(OPER_GRP_1, 'CURE', QTY, 0)) AS CURE
                     , SUM(DECODE(OPER_GRP_1, 'M/K', QTY, 0)) AS MK
                     , SUM(DECODE(OPER_GRP_1, 'TRIM', QTY, 0)) AS TRIM
                     , SUM(DECODE(OPER_GRP_1, 'TIN', QTY, 0)) AS TIN
                     , SUM(DECODE(OPER_GRP_1, 'S/B/A', QTY, 0)) AS SBA
                     , SUM(DECODE(OPER_GRP_1, 'SIG', QTY, 0)) AS SIG
                     , SUM(DECODE(OPER_GRP_1, 'AVI', QTY, 0)) AS AVI
                     , SUM(DECODE(OPER_GRP_1, 'V/I', QTY, 0)) AS VI
                     , SUM(CASE WHEN OPER IN ('A2030', 'A2050') THEN QTY ELSE 0 END) AS PVI
                     , SUM(DECODE(OPER, 'A2100', QTY, 0)) AS QC_GATE
                     , SUM(DECODE(OPER_GRP_1, 'HMK3A', QTY, 0)) AS HMK3A
                  FROM (
                        SELECT MAT_ID, OPER, OPER_GRP_1, MAT_GRP_1, MAT_GRP_4, MAT_GRP_5
                             , CASE WHEN HX_COMP_MIN IS NOT NULL
                                         THEN (CASE WHEN HX_COMP_MIN <> HX_COMP_MAX AND OPER > HX_COMP_MIN AND OPER <= HX_COMP_MAX THEN QTY_1 / NVL(COMP_CNT / 2,1)
                                                    WHEN OPER <= HX_COMP_MAX THEN QTY_1 / NVL(COMP_CNT,1)
                                                    ELSE QTY_1 END)
                                    WHEN OPER <= 'A0395' THEN QTY_1 / NVL(COMP_CNT,1) 
                                    ELSE QTY_1 
                               END QTY 
                          FROM (
                                SELECT A.MAT_ID, B.OPER, B.OPER_GRP_1, C.MAT_GRP_1, C.MAT_GRP_4, C.MAT_GRP_5
                                     , CASE WHEN MAT_CMF_11 IN ('DHL', 'DQZ', 'DRA', 'DQA', 'DND', 'DWG', 'DUT', 'HAU', 'HF8', 'HDM', 'HDR', 'HEN', 'HQA', 'HQC') THEN (CASE WHEN MAT_GRP_5 IN ('3rd','Merge') THEN QTY_1
                                                                               WHEN MAT_GRP_5 LIKE 'Middle%' AND MAT_GRP_5 <> 'Middle' THEN QTY_1
                                                                               ELSE 0 END)
                                            WHEN MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND (MAT_ID LIKE 'SEKS%' OR MAT_ID LIKE 'SEKY%')) THEN CASE WHEN MAT_GRP_5 IN ('2nd','Merge') OR MAT_GRP_5 LIKE 'Middle%' THEN QTY_1 ELSE 0 END
                                            WHEN MAT_GRP_1 = 'HX' AND MESMGR.F_GET_ATTR_VALUE@RPTTOMES(A.MAT_ID, 'MAT_ETC', 'HX_VERSION') = 'A-376' THEN CASE WHEN MAT_GRP_5 IN ('5th','Merge') THEN QTY_1 ELSE 0 END
                                            WHEN MAT_GRP_1 = 'HX' AND MESMGR.F_GET_ATTR_VALUE@RPTTOMES(A.MAT_ID, 'MAT_ETC', 'HX_VERSION') IN ('A-445', 'A-525') THEN CASE WHEN MAT_GRP_5 IN ('6th','Merge') THEN QTY_1 ELSE 0 END
                                            WHEN MAT_GRP_1 = 'HX' AND MESMGR.F_GET_ATTR_VALUE@RPTTOMES(A.MAT_ID, 'MAT_ETC', 'HX_VERSION') = 'A-524' THEN CASE WHEN MAT_GRP_5 IN ('7th','Merge') THEN QTY_1 ELSE 0 END
                                            WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN CASE WHEN MAT_GRP_5 IN ('1st','Merge') OR MAT_GRP_5 LIKE 'Middle%' THEN QTY_1 ELSE 0 END
                                            WHEN MAT_GRP_3 IN ('COB', 'BGN') THEN ROUND(QTY_1/C.NET_DIE,0)
                                            ELSE QTY_1
                                       END AS QTY_1
                                     , C.COMP_CNT, C.HX_COMP_MIN, C.HX_COMP_MAX 
                                  FROM RWIPLOTSTS A  
                                     , MWIPOPRDEF B  
                                     , VWIPMATDEF C
                                 WHERE 1 = 1 
                                   AND A.FACTORY = B.FACTORY
                                   AND A.FACTORY = C.FACTORY
                                   AND A.OPER = B.OPER
                                   AND A.MAT_ID = C.MAT_ID
                                   AND A.FACTORY = 'HMVA2'  
                                   AND A.LOT_TYPE = 'W' 
                                   AND A.LOT_CMF_5 LIKE 'P%' 
                                   AND A.LOT_DEL_FLAG = ' ' 
                                   AND C.MAT_GRP_2 <> '-'
                                   AND C.DELETE_FLAG = ' ' 
                                   AND A.HOLD_CODE NOT IN ('H71','H54')
                               )
                       )
                 GROUP BY MAT_ID
               ) WIP
             , (
                SELECT MAT_ID
                     , SUM(CASE WHEN OPER IN ('A0200', 'A0230') THEN QTY ELSE 0 END) AS OUT_DP
                     , SUM(CASE WHEN OPER LIKE 'A04%' THEN (CASE WHEN MAT_GRP_1 <> 'SE' AND MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' 
                                                                      THEN DECODE(SUBSTR(MAT_GRP_4,-1), SUBSTR(OPER, -1), QTY, 0)
                                                                 ELSE QTY END)
                                WHEN OPER = 'A0333' THEN QTY
                                ELSE 0
                           END) AS OUT_DA
                     , SUM(CASE WHEN OPER LIKE 'A06%' THEN (CASE WHEN MAT_GRP_1 <> 'SE' AND MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' 
                                                                      THEN DECODE(SUBSTR(MAT_GRP_4,-1), SUBSTR(OPER, -1), QTY, 0)
                                                                 ELSE QTY END)
                                 ELSE 0
                           END) AS OUT_WB
                     , SUM(CASE WHEN OPER = 'A0000' THEN QTY ELSE 0 END) AS OUT_STOCK
                     , SUM(CASE WHEN OPER = 'A0020' THEN QTY ELSE 0 END) AS OUT_LAMI
                     , SUM(CASE WHEN OPER = 'A0030' THEN QTY ELSE 0 END) AS OUT_PRI
                     , SUM(CASE WHEN OPER = 'A0033' THEN QTY ELSE 0 END) AS OUT_STEALTH
                     , SUM(CASE WHEN OPER = 'A0040' THEN QTY ELSE 0 END) AS OUT_BG
                     , SUM(CASE WHEN OPER = 'A0200' THEN QTY ELSE 0 END) AS OUT_SAW
                     , SUM(CASE WHEN OPER = 'A0230' THEN QTY ELSE 0 END) AS OUT_DDS
                     , SUM(CASE WHEN OPER IN ('A0400', 'A0401', 'A0333') THEN QTY ELSE 0 END) AS OUT_DA1
                     , SUM(CASE WHEN OPER IN ('A0600', 'A0601') THEN QTY ELSE 0 END) AS OUT_WB1
                     , SUM(CASE WHEN OPER = 'A0402' THEN QTY ELSE 0 END) AS OUT_DA2
                     , SUM(CASE WHEN OPER = 'A0602' THEN QTY ELSE 0 END) AS OUT_WB2
                     , SUM(CASE WHEN OPER = 'A0403' THEN QTY ELSE 0 END) AS OUT_DA3
                     , SUM(CASE WHEN OPER = 'A0603' THEN QTY ELSE 0 END) AS OUT_WB3
                     , SUM(CASE WHEN OPER = 'A0404' THEN QTY ELSE 0 END) AS OUT_DA4
                     , SUM(CASE WHEN OPER = 'A0604' THEN QTY ELSE 0 END) AS OUT_WB4
                     , SUM(CASE WHEN OPER = 'A0405' THEN QTY ELSE 0 END) AS OUT_DA5
                     , SUM(CASE WHEN OPER = 'A0605' THEN QTY ELSE 0 END) AS OUT_WB5
                     , SUM(CASE WHEN OPER = 'A0406' THEN QTY ELSE 0 END) AS OUT_DA6
                     , SUM(CASE WHEN OPER = 'A0606' THEN QTY ELSE 0 END) AS OUT_WB6
                     , SUM(CASE WHEN OPER = 'A0407' THEN QTY ELSE 0 END) AS OUT_DA7
                     , SUM(CASE WHEN OPER = 'A0607' THEN QTY ELSE 0 END) AS OUT_WB7
                     , SUM(CASE WHEN OPER = 'A0408' THEN QTY ELSE 0 END) AS OUT_DA8
                     , SUM(CASE WHEN OPER = 'A0608' THEN QTY ELSE 0 END) AS OUT_WB8
                     , SUM(CASE WHEN OPER = 'A0409' THEN QTY ELSE 0 END) AS OUT_DA9
                     , SUM(CASE WHEN OPER = 'A0609' THEN QTY ELSE 0 END) AS OUT_WB9
                     , SUM(CASE WHEN OPER = 'A1000' THEN QTY ELSE 0 END) AS OUT_MOLD 
                     , SUM(CASE WHEN OPER IN ('A1150', 'A1500') THEN QTY ELSE 0 END) AS OUT_MK
                     , SUM(CASE WHEN OPER IN ('A1750', 'A1800', 'A1900') THEN QTY ELSE 0 END) AS OUT_SIG
                     , SUM(CASE WHEN OPER = 'A2100' THEN QTY ELSE 0 END) AS OUT_CLOSE 
                     , SUM(CASE WHEN OPER = 'AZ010' THEN QTY ELSE 0 END) AS OUT_HMKA3 
                  FROM (    
                        SELECT MAT_ID, OPER, MAT_GRP_1, MAT_GRP_4, MAT_GRP_5
                             , CASE WHEN HX_COMP_MIN IS NOT NULL
                                         THEN (CASE WHEN HX_COMP_MIN <> HX_COMP_MAX AND OPER > HX_COMP_MIN AND OPER <= HX_COMP_MAX THEN QTY_1 / NVL(COMP_CNT / 2,1)
                                                    WHEN OPER <= HX_COMP_MAX THEN QTY_1 / NVL(COMP_CNT,1)
                                                    ELSE QTY_1 END)
                                    WHEN OPER <= 'A0395' THEN QTY_1 / NVL(COMP_CNT,1) 
                                    ELSE QTY_1 
                               END QTY
                          FROM (
                                SELECT MAT_ID, OPER, MAT_GRP_1, MAT_GRP_4, MAT_GRP_5, MAT_GRP_9, MAT_CMF_11
                                     , CASE WHEN MAT_CMF_11 IN ('DHL', 'DQZ', 'DRA', 'DQA', 'DND', 'DWG', 'DUT', 'HAU', 'HF8', 'HDM', 'HDR', 'HEN', 'HQA', 'HQC') THEN (CASE WHEN MAT_GRP_5 IN ('3rd','Merge') THEN END_QTY ELSE 0 END)
                                            WHEN MAT_ID LIKE 'SEK%' AND MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND (MAT_ID LIKE 'SEKS%' OR MAT_ID LIKE 'SEKY%'))
                                                 THEN (CASE WHEN MAT_GRP_5 IN ('2nd','Merge') THEN END_QTY ELSE 0 END)
                                            WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-'
                                                 THEN (CASE WHEN MAT_GRP_5 IN ('1st','Merge') THEN END_QTY ELSE 0 END)
                                            WHEN MAT_GRP_3 IN ('COB', 'BGN') THEN ROUND(END_QTY/NET_DIE,0)
                                            ELSE END_QTY
                                       END QTY_1 
                                     , COMP_CNT, HX_COMP_MIN, HX_COMP_MAX 
                                  FROM ( 
                                        SELECT A.OPER
                                             , CASE WHEN OPER = 'AZ010' THEN S1_MOVE_QTY_1+S2_MOVE_QTY_1+S3_MOVE_QTY_1
                                                    ELSE S1_END_QTY_1+S2_END_QTY_1+S3_END_QTY_1
                                               END END_QTY
                                             , B.*
                                          FROM RSUMWIPMOV A
                                             , VWIPMATDEF B
                                         WHERE 1=1
                                           AND A.FACTORY = B.FACTORY
                                           AND A.MAT_ID = B.MAT_ID
                                           AND A.FACTORY = 'HMVA2'
                                           AND A.WORK_DATE = '20200413'
                                           AND A.LOT_TYPE = 'W'
                                           AND A.CM_KEY_3 LIKE 'P%'   
                                           AND B.MAT_GRP_5 NOT LIKE 'Middle%'
                                           AND REGEXP_LIKE(A.OPER, 'A0000|A0200|A0230|A0333|A040*|A060*|A1000|A2100')
                                           AND ((A.OPER >= 'A0400' AND B.MAT_GRP_5 IN ('-', 'Merge')) OR (A.OPER < 'A0400'))
                                       ) 
                               )
                       )
                 GROUP BY MAT_ID
               ) MOV
         WHERE 1=1
           AND MAT.MAT_ID = PLN.MAT_ID(+)
           AND MAT.MAT_ID = SHP.MAT_ID(+)
           AND MAT.MAT_ID = RCV.MAT_ID(+)
           AND MAT.MAT_ID = WIP.MAT_ID(+)
           AND MAT.MAT_ID = MOV.MAT_ID(+)
           AND NVL(ORI_PLN,0)+NVL(REV_PLN,0)+NVL(SHP_TTL,0)+NVL(RCV_QTY,0)+NVL(WIP_TTL,0)+NVL(D0_PLAN,0)+NVL(D1_PLAN,0)+NVL(SHP_WEEK,0) <> 0
       ) A
 GROUP BY A.MAT_GRP_1, A.MAT_GRP_9, A.MAT_GRP_10,  ' ',  ' ',  ' ',  ' '
 ORDER BY DECODE(A.MAT_GRP_1, 'SE', 1, 'HX', 2, 'IM', 3, 'FC', 4, 'IG', 5,6), CUSTOMER, MAT_GRP_9, MAT_GRP_10

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT PLAN_WEEK V1    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_DATE = TO_CHAR(SYSDATE,'yyyymmdd')      AND ROWNUM = 1  
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT LANGUAGE_2 FROM RWEBFUNDEF WHERE FUNC_NAME = 'PRD010910'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
WITH MD AS
(
SELECT *
  FROM (
        SELECT '계획' AS GUBUN1 FROM DUAL UNION
        SELECT '일목표' AS GUBUN1 FROM DUAL
       ) A
     , (
        SELECT 'Wafer' AS GUBUN2, 'Half cut' AS GUBUN3 FROM DUAL UNION
        SELECT 'Wafer' AS GUBUN2, 'B/G' AS GUBUN3 FROM DUAL UNION
        SELECT 'Wafer' AS GUBUN2, 'Pre_G' AS GUBUN3 FROM DUAL UNION
        SELECT 'Wafer' AS GUBUN2, 'Saw' AS GUBUN3 FROM DUAL UNION
        SELECT 'Wafer' AS GUBUN2, 'Stealth saw' AS GUBUN3 FROM DUAL UNION
        SELECT 'Wafer' AS GUBUN2, 'Laser G/V' AS GUBUN3 FROM DUAL UNION
        SELECT 'Wafer' AS GUBUN2, 'DAF Cut' AS GUBUN3 FROM DUAL UNION
        SELECT 'Wafer' AS GUBUN2, 'DDS' AS GUBUN3 FROM DUAL UNION
        SELECT 'CHIP수' AS GUBUN2, 'Epoxy' AS GUBUN3 FROM DUAL UNION
        SELECT 'CHIP수' AS GUBUN2, 'BOC' AS GUBUN3 FROM DUAL UNION
        SELECT 'CHIP수' AS GUBUN2, 'Others' AS GUBUN3 FROM DUAL UNION
        SELECT 'Wire수' AS GUBUN2, ' ' AS GUBUN3 FROM DUAL UNION
        SELECT 'PKG수' AS GUBUN2, 'C-Mold' AS GUBUN3 FROM DUAL UNION
        SELECT 'PKG수' AS GUBUN2, 'ORP' AS GUBUN3 FROM DUAL UNION
        SELECT 'PKG수' AS GUBUN2, 'SBA' AS GUBUN3 FROM DUAL UNION
        SELECT 'PKG수' AS GUBUN2, 'SST' AS GUBUN3 FROM DUAL UNION
        SELECT '95mm' AS GUBUN2, 'Mold' AS GUBUN3 FROM DUAL UNION
        SELECT '95mm' AS GUBUN2, 'SBA' AS GUBUN3 FROM DUAL UNION
        SELECT '95mm' AS GUBUN2, 'SST' AS GUBUN3 FROM DUAL
       ) B      
)
SELECT MDL.GUBUN1, MDL.GUBUN2, MDL.GUBUN3
     , ROUND(CASE WHEN MDL.GUBUN1 = '계획' THEN V0 ELSE V0 / TO_CHAR(LAST_DAY(TO_DATE('202001', 'YYYYMM')), 'DD') END / 1000, 0) V0
     , ROUND(CASE WHEN MDL.GUBUN1 = '계획' THEN V1 ELSE V1 / TO_CHAR(LAST_DAY(TO_DATE('202002', 'YYYYMM')), 'DD') END / 1000, 0) V1
     , ROUND(CASE WHEN MDL.GUBUN1 = '계획' THEN V2 ELSE V2 / TO_CHAR(LAST_DAY(TO_DATE('202003', 'YYYYMM')), 'DD') END / 1000, 0) V2
     , ROUND(CASE WHEN MDL.GUBUN1 = '계획' THEN V3 ELSE V3 / TO_CHAR(LAST_DAY(TO_DATE('202004', 'YYYYMM')), 'DD') END / 1000, 0) V3
  FROM MD MDL
     , (
        SELECT *
          FROM (
                SELECT '계획' AS GUBUN1 FROM DUAL UNION
                SELECT '일목표' AS GUBUN1 FROM DUAL
               ) A
             , (
                SELECT GUBUN2, GUBUN3
                     , SUM(DECODE(PLAN_DATE, '202001', CONV_QTY, 0)) V0
                     , SUM(DECODE(PLAN_DATE, '202002', CONV_QTY, 0)) V1
                     , SUM(DECODE(PLAN_DATE, '202003', CONV_QTY, 0)) V2
                     , SUM(DECODE(PLAN_DATE, '202004', CONV_QTY, 0)) V3
                  FROM (
                        SELECT PLAN_DATE 
                             , CASE WHEN OPER IN ('C-Mold', 'ORP', 'SBA', 'SST') THEN 'PKG수'
                                    ELSE 'Wafer' 
                               END AS GUBUN2 
                             , OPER AS GUBUN3
                             , CASE WHEN OPER IN ('C-Mold', 'ORP', 'SBA', 'SST') THEN PLAN_QTY
                                    ELSE PLAN_QTY * NVL(COMP_CNT,1) 
                               END AS PLAN_QTY
                             , ROUND(CASE WHEN OPER IN ('C-Mold', 'ORP', 'SBA', 'SST') THEN PLAN_QTY
                                          ELSE PLAN_QTY * NVL(COMP_CNT,1) / (MAT_CMF_13 * 0.85) 
                                     END, 0) AS CONV_QTY
                          FROM (
                                SELECT PLAN_DATE, MAT_ID
                                     , CASE WHEN OPER = 'A0010' THEN 'Half cut'
                                            WHEN OPER = 'A0040' THEN 'B/G'
                                            WHEN OPER = 'A0030' THEN 'Pre_G'
                                            WHEN OPER = 'A0200' THEN 'Saw'
                                            WHEN OPER IN ('A0012', 'A0033') THEN 'Stealth saw'
                                            WHEN OPER = 'A0170' THEN 'Laser G/V'
                                            WHEN OPER = 'A0180' THEN 'DAF Cut'
                                            WHEN OPER = 'A0230' THEN 'DDS'
                                            WHEN OPER = 'A1000' THEN 'C-Mold'
                                            WHEN OPER IN ('A1250', 'A1260') THEN 'ORP'
                                            WHEN OPER = 'A1300' THEN 'SBA'
                                            WHEN OPER = 'A1750' THEN 'SST'
                                            ELSE ''
                                       END OPER
                                     , PLAN_QTY
                                     , MAT_CMF_13
                                     , (SELECT DATA_1 FROM MGCMTBLDAT WHERE FACTORY = 'HMVA2' AND TABLE_NAME IN ('H_SEC_AUTO_LOSS','H_HX_AUTO_LOSS') AND KEY_1 = A.MAT_ID) AS COMP_CNT
                                     , (SELECT KEY_3 FROM MGCMTBLDAT WHERE TABLE_NAME = 'H_PKG_2D_CMOLD' AND KEY_1 = 'C-MOLD' AND KEY_2 = A.MAT_GRP_1 AND KEY_3 = A.MAT_CMF_11 AND (KEY_4 = '%' OR KEY_4 = A.MAT_ID)) AS C_MOLD
                                  FROM (
                                        SELECT A.PLAN_DATE, A.MAT_KEY, A.MAT_ID, TO_NUMBER(PLAN_QTY) AS PLAN_QTY
                                             , B.MAT_GRP_1, B.MAT_GRP_2, B.MAT_GRP_4, B.MAT_GRP_5
                                             , TO_NUMBER(DECODE(B.MAT_GRP_6, '-', 1, ' ', 1, B.MAT_GRP_6)) AS MAT_GRP_6
                                             , B.MAT_CMF_11, TO_NUMBER(DECODE(B.MAT_CMF_13,' ',1,B.MAT_CMF_13)) AS MAT_CMF_13
                                             , CASE WHEN B.MAT_GRP_4 IN ('-', 'FD', 'FU') THEN '1'
                                                    ELSE SUBSTR(B.MAT_GRP_4, 3) 
                                               END AS STACK
                                             , B.OPER
                                          FROM (
                                                SELECT DISTINCT A.PLAN_MONTH AS PLAN_DATE
                                                     , CASE WHEN B.MAT_ID IS NULL THEN A.MAT_ID ELSE B.MCP_TO_PART END AS MAT_KEY
                                                     , CASE WHEN B.MAT_ID IS NULL THEN A.MAT_ID ELSE B.MAT_ID END AS MAT_ID
                                                     , A.RESV_FIELD1 AS PLAN_QTY
                                                  FROM CWIPPLNMON A
                                                     , RWIPMCPBOM B
                                                 WHERE 1=1   
                                                   AND A.MAT_ID = B.MCP_TO_PART(+)
                                                   AND A.FACTORY = 'HMVA2'   
                                                   AND A.PLAN_MONTH BETWEEN '202001' AND '202004'
                                                   AND DECODE(A.RESV_FIELD1, ' ', 0, A.RESV_FIELD1) > 0
                                               ) A
                                             , (
                                                SELECT DISTINCT MAT_ID, MAT_GRP_1, MAT_GRP_2, MAT_GRP_4, MAT_GRP_5, MAT_GRP_6, MAT_CMF_11, MAT_CMF_13, KTSCH AS OPER
                                                  FROM MWIPMATDEF MAT
                                                     , ZHPPT120@SAPREAL SAP
                                                 WHERE 1=1
                                                   AND MAT.FIRST_FLOW = SUBSTR(PLNNR, 1, 4) 
                                                   AND MAT.FACTORY = 'HMVA2'
                                                   AND MAT.DELETE_FLAG = ' '
                                                   AND MAT.MAT_TYPE = 'FG'
                                                   AND SAP.ARBPL != 'DUMMY'
                                                   AND SAP.KTSCH LIKE 'A%'
                                               ) B   
                                         WHERE 1=1
                                           AND A.MAT_ID = B.MAT_ID
                                           AND (B.OPER IN ('A0010', 'A0200', 'A0030', 'A0040', 'A0012', 'A0033', 'A0170', 'A0180', 'A0230', 'A1250', 'A1260', 'A1300', 'A1750', 'A1000')
                                               OR B.OPER LIKE 'A06%')   
                                       ) A
                                 WHERE 1=1
                                   AND OPER IN ('A0010', 'A0200', 'A0030', 'A0040', 'A0012', 'A0033', 'A0170', 'A0180', 'A0230', 'A1000', 'A1250', 'A1260', 'A1300', 'A1750')
                               )
                         WHERE 1=1
                           AND (OPER <> 'C-Mold' OR (OPER = 'C-Mold' AND C_MOLD IS NOT NULL))
                         UNION ALL
                        SELECT PLAN_DATE
                             , 'CHIP수' AS GUBUN2
                             , FAMILY AS GUBUN3
                             , SUM(PLAN_QTY * STACK) AS PLAN_QTY
                             , SUM(PLAN_QTY * STACK) AS CONV_QTY
                          FROM (
                                SELECT DISTINCT A.PLAN_DATE, A.MAT_KEY, A.STACK, A.PLAN_QTY 
                                     , (SELECT DATA_2 FROM MGCMTBLDAT WHERE FACTORY = 'HMVA2' AND TABLE_NAME = 'H_FAMILY' AND KEY_1 = A.MAT_GRP_2) AS FAMILY
                                  FROM (
                                        SELECT A.PLAN_DATE, A.MAT_KEY, A.MAT_ID, TO_NUMBER(PLAN_QTY) AS PLAN_QTY
                                             , B.MAT_GRP_1, B.MAT_GRP_2, B.MAT_GRP_4, B.MAT_GRP_5
                                             , TO_NUMBER(DECODE(B.MAT_GRP_6, '-', 1, ' ', 1, B.MAT_GRP_6)) AS MAT_GRP_6
                                             , B.MAT_CMF_11, TO_NUMBER(DECODE(B.MAT_CMF_13,' ',1,B.MAT_CMF_13)) AS MAT_CMF_13
                                             , CASE WHEN B.MAT_GRP_4 IN ('-', 'FD', 'FU') THEN '1'
                                                    ELSE SUBSTR(B.MAT_GRP_4, 3) 
                                               END AS STACK
                                             , B.OPER
                                          FROM (
                                                SELECT DISTINCT A.PLAN_MONTH AS PLAN_DATE
                                                     , CASE WHEN B.MAT_ID IS NULL THEN A.MAT_ID ELSE B.MCP_TO_PART END AS MAT_KEY
                                                     , CASE WHEN B.MAT_ID IS NULL THEN A.MAT_ID ELSE B.MAT_ID END AS MAT_ID
                                                     , A.RESV_FIELD1 AS PLAN_QTY
                                                  FROM CWIPPLNMON A
                                                     , RWIPMCPBOM B
                                                 WHERE 1=1   
                                                   AND A.MAT_ID = B.MCP_TO_PART(+)
                                                   AND A.FACTORY = 'HMVA2'   
                                                   AND A.PLAN_MONTH BETWEEN '202001' AND '202004'
                                                   AND DECODE(A.RESV_FIELD1, ' ', 0, A.RESV_FIELD1) > 0
                                               ) A
                                             , (
                                                SELECT DISTINCT MAT_ID, MAT_GRP_1, MAT_GRP_2, MAT_GRP_4, MAT_GRP_5, MAT_GRP_6, MAT_CMF_11, MAT_CMF_13, KTSCH AS OPER
                                                  FROM MWIPMATDEF MAT
                                                     , ZHPPT120@SAPREAL SAP
                                                 WHERE 1=1
                                                   AND MAT.FIRST_FLOW = SUBSTR(PLNNR, 1, 4) 
                                                   AND MAT.FACTORY = 'HMVA2'
                                                   AND MAT.DELETE_FLAG = ' '
                                                   AND MAT.MAT_TYPE = 'FG'
                                                   AND SAP.ARBPL != 'DUMMY'
                                                   AND SAP.KTSCH LIKE 'A%'
                                               ) B   
                                         WHERE 1=1
                                           AND A.MAT_ID = B.MAT_ID
                                           AND (B.OPER IN ('A0010', 'A0200', 'A0030', 'A0040', 'A0012', 'A0033', 'A0170', 'A0180', 'A0230', 'A1250', 'A1260', 'A1300', 'A1750', 'A1000')
                                               OR B.OPER LIKE 'A06%')   
                                       ) A
                               )
                         WHERE 1=1
                           AND FAMILY IN ('Epoxy', 'BOC', 'Others')
                         GROUP BY PLAN_DATE, FAMILY
                         UNION ALL
                        SELECT PLAN_DATE
                             , 'Wire수' AS GUBUN2     
                             , ' ' AS GUBUN3
                             , PLAN_QTY
                             , PLAN_QTY * NVL(WIRE_QTY, MAT_GRP_6) AS CONV_QTY
                          FROM (
                                SELECT PLAN_DATE
                                     , OPER
                                     , PLAN_QTY
                                     , MAT_ID
                                     , MAT_GRP_6
                                     , (SELECT MAX(TO_NUMBER(TCD_CMF_2)) FROM CWIPTCDDEF@RPTTOMES WHERE FACTORY = 'HMVA2' AND SET_FLAG = 'Y' AND TCD_CMF_2 <> ' ' AND MAT_ID = A.MAT_ID AND OPER = A.OPER) AS WIRE_QTY
                                  FROM (
                                        SELECT A.PLAN_DATE, A.MAT_KEY, A.MAT_ID, TO_NUMBER(PLAN_QTY) AS PLAN_QTY
                                             , B.MAT_GRP_1, B.MAT_GRP_2, B.MAT_GRP_4, B.MAT_GRP_5
                                             , TO_NUMBER(DECODE(B.MAT_GRP_6, '-', 1, ' ', 1, B.MAT_GRP_6)) AS MAT_GRP_6
                                             , B.MAT_CMF_11, TO_NUMBER(DECODE(B.MAT_CMF_13,' ',1,B.MAT_CMF_13)) AS MAT_CMF_13
                                             , CASE WHEN B.MAT_GRP_4 IN ('-', 'FD', 'FU') THEN '1'
                                                    ELSE SUBSTR(B.MAT_GRP_4, 3) 
                                               END AS STACK
                                             , B.OPER
                                          FROM (
                                                SELECT DISTINCT A.PLAN_MONTH AS PLAN_DATE
                                                     , CASE WHEN B.MAT_ID IS NULL THEN A.MAT_ID ELSE B.MCP_TO_PART END AS MAT_KEY
                                                     , CASE WHEN B.MAT_ID IS NULL THEN A.MAT_ID ELSE B.MAT_ID END AS MAT_ID
                                                     , A.RESV_FIELD1 AS PLAN_QTY
                                                  FROM CWIPPLNMON A
                                                     , RWIPMCPBOM B
                                                 WHERE 1=1   
                                                   AND A.MAT_ID = B.MCP_TO_PART(+)
                                                   AND A.FACTORY = 'HMVA2'   
                                                   AND A.PLAN_MONTH BETWEEN '202001' AND '202004'
                                                   AND DECODE(A.RESV_FIELD1, ' ', 0, A.RESV_FIELD1) > 0
                                               ) A
                                             , (
                                                SELECT DISTINCT MAT_ID, MAT_GRP_1, MAT_GRP_2, MAT_GRP_4, MAT_GRP_5, MAT_GRP_6, MAT_CMF_11, MAT_CMF_13, KTSCH AS OPER
                                                  FROM MWIPMATDEF MAT
                                                     , ZHPPT120@SAPREAL SAP
                                                 WHERE 1=1
                                                   AND MAT.FIRST_FLOW = SUBSTR(PLNNR, 1, 4) 
                                                   AND MAT.FACTORY = 'HMVA2'
                                                   AND MAT.DELETE_FLAG = ' '
                                                   AND MAT.MAT_TYPE = 'FG'
                                                   AND SAP.ARBPL != 'DUMMY'
                                                   AND SAP.KTSCH LIKE 'A%'
                                               ) B   
                                         WHERE 1=1
                                           AND A.MAT_ID = B.MAT_ID
                                           AND (B.OPER IN ('A0010', 'A0200', 'A0030', 'A0040', 'A0012', 'A0033', 'A0170', 'A0180', 'A0230', 'A1250', 'A1260', 'A1300', 'A1750', 'A1000')
                                               OR B.OPER LIKE 'A06%')   
                                       ) A
                                 WHERE 1=1
                                   AND OPER LIKE 'A06%'
                               )
                         UNION ALL
                        SELECT PLAN_DATE
                             , '95mm' AS GUBUN2
                             , CASE WHEN OPER = 'A1000' THEN 'Mold'
                                    WHEN OPER = 'A1300' THEN 'SBA'
                                    ELSE 'SST'
                               END GUBUN3
                             , SUM(PLAN_QTY) AS PLAN_QTY
                             , SUM(PLAN_QTY) AS CONV_QTY
                          FROM (
                                        SELECT A.PLAN_DATE, A.MAT_KEY, A.MAT_ID, TO_NUMBER(PLAN_QTY) AS PLAN_QTY
                                             , B.MAT_GRP_1, B.MAT_GRP_2, B.MAT_GRP_4, B.MAT_GRP_5
                                             , TO_NUMBER(DECODE(B.MAT_GRP_6, '-', 1, ' ', 1, B.MAT_GRP_6)) AS MAT_GRP_6
                                             , B.MAT_CMF_11, TO_NUMBER(DECODE(B.MAT_CMF_13,' ',1,B.MAT_CMF_13)) AS MAT_CMF_13
                                             , CASE WHEN B.MAT_GRP_4 IN ('-', 'FD', 'FU') THEN '1'
                                                    ELSE SUBSTR(B.MAT_GRP_4, 3) 
                                               END AS STACK
                                             , B.OPER
                                          FROM (
                                                SELECT DISTINCT A.PLAN_MONTH AS PLAN_DATE
                                                     , CASE WHEN B.MAT_ID IS NULL THEN A.MAT_ID ELSE B.MCP_TO_PART END AS MAT_KEY
                                                     , CASE WHEN B.MAT_ID IS NULL THEN A.MAT_ID ELSE B.MAT_ID END AS MAT_ID
                                                     , A.RESV_FIELD1 AS PLAN_QTY
                                                  FROM CWIPPLNMON A
                                                     , RWIPMCPBOM B
                                                 WHERE 1=1   
                                                   AND A.MAT_ID = B.MCP_TO_PART(+)
                                                   AND A.FACTORY = 'HMVA2'   
                                                   AND A.PLAN_MONTH BETWEEN '202001' AND '202004'
                                                   AND DECODE(A.RESV_FIELD1, ' ', 0, A.RESV_FIELD1) > 0
                                               ) A
                                             , (
                                                SELECT DISTINCT MAT_ID, MAT_GRP_1, MAT_GRP_2, MAT_GRP_4, MAT_GRP_5, MAT_GRP_6, MAT_CMF_11, MAT_CMF_13, KTSCH AS OPER
                                                  FROM MWIPMATDEF MAT
                                                     , ZHPPT120@SAPREAL SAP
                                                 WHERE 1=1
                                                   AND MAT.FIRST_FLOW = SUBSTR(PLNNR, 1, 4) 
                                                   AND MAT.FACTORY = 'HMVA2'
                                                   AND MAT.DELETE_FLAG = ' '
                                                   AND MAT.MAT_TYPE = 'FG'
                                                   AND SAP.ARBPL != 'DUMMY'
                                                   AND SAP.KTSCH LIKE 'A%'
                                               ) B   
                                         WHERE 1=1
                                           AND A.MAT_ID = B.MAT_ID
                                           AND (B.OPER IN ('A0010', 'A0200', 'A0030', 'A0040', 'A0012', 'A0033', 'A0170', 'A0180', 'A0230', 'A1250', 'A1260', 'A1300', 'A1750', 'A1000')
                                               OR B.OPER LIKE 'A06%')   
                                       ) A
                             , (
                                SELECT * 
                                  FROM MATRNAMSTS@RPTTOMES 
                                 WHERE FACTORY = 'HMVA2'
                                   AND ATTR_TYPE = 'MAT_ETC'
                                   AND ATTR_NAME = 'MAGAZINE_TYPE' 
                                   AND ATTR_VALUE = '95'
                               ) B
                         WHERE 1=1
                           AND A.MAT_ID = B.ATTR_KEY
                           AND A.OPER IN ('A1000', 'A1300', 'A1750')
                         GROUP BY PLAN_DATE, OPER
                       )
                 GROUP BY GUBUN2, GUBUN3
               )
       ) PLN
 WHERE 1=1
   AND MDL.GUBUN1 = PLN.GUBUN1(+)   
   AND MDL.GUBUN2 = PLN.GUBUN2(+)   
   AND MDL.GUBUN3 = PLN.GUBUN3(+)   
 ORDER BY GUBUN1, DECODE(GUBUN2, 'Wafer', 1, 'CHIP수', 2, 'Wire수', 3, 'PKG수', 4, 5), GUBUN3

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
SELECT DISTINCT LPAD(PLAN_WEEK,2,'0') AS PLAN_WEEK 
  FROM MWIPCALDEF 
 WHERE 1=1 
   AND CALENDAR_ID = 'OTD' 
   AND SYS_YEAR = '2020' 
   AND SYS_MONTH = '04' 
   AND SYS_DAY = '13' 
 ORDER BY PLAN_WEEK 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE) 
  FROM MWIPCALDEF 
 WHERE 1=1 
   AND CALENDAR_ID='OTD' 
   AND PLAN_YEAR='2020' 
   AND PLAN_WEEK='16' 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT DISTINCT PLAN_YEAR|| LPAD(PLAN_WEEK,2,'0') 
  FROM MWIPCALDEF 
 WHERE CALENDAR_ID = 'OTD' 
   AND SYS_YEAR || LPAD(SYS_MONTH,2,'0') IN ('202004', '202005' ,'202006') 
   AND SYS_DATE >= '20200413' 
 ORDER BY 1 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE) AS START_DAY 
     , MAX(SYS_DATE) AS END_DAY 
     , PLAN_YEAR||DECODE(LENGTH(PLAN_WEEK), 1, '0'||PLAN_WEEK, PLAN_WEEK) AS WEEK
  FROM MWIPCALDEF 
 WHERE CALENDAR_ID = 'OTD'
   AND (PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) IN ( 
                                                SELECT WW
                                                  FROM (
                                                        SELECT WW
                                                             , ROW_NUMBER() OVER(ORDER BY WW) AS RNK
                                                          FROM (
                                                                SELECT DISTINCT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW
                                                                  FROM MWIPCALDEF
                                                                 WHERE CALENDAR_ID = 'OTD'
                                                                   AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') >= (
                                                                                                              SELECT MAX(PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) AS WW
                                                                                                                FROM MWIPCALDEF
                                                                                                               WHERE CALENDAR_ID = 'OTD'
                                                                                                                 AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') < (SELECT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW FROM MWIPCALDEF WHERE CALENDAR_ID = 'OTD' AND SYS_DATE = '20200413')
                                                                                                                 AND SYS_DATE >= TO_CHAR(TO_DATE('20200413', 'YYYYMMDD')-14, 'YYYYMMDD')
                                                                                                             )
                                                               ) 
                                                       )
                                                 WHERE RNK <= 7
                                               ) 
 GROUP BY PLAN_YEAR, PLAN_WEEK 
 ORDER BY PLAN_YEAR, PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT LANGUAGE_2 FROM RWEBFUNDEF WHERE FUNC_NAME = 'MAT070503'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT DISTINCT TO_DATE(UPDATE_TIME,'YYYY-MM-DD HH24MISS') FROM RSUMWIPMAT
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT DISTINCT LPAD(PLAN_WEEK,2,'0') AS PLAN_WEEK 
  FROM MWIPCALDEF 
 WHERE 1=1 
   AND CALENDAR_ID = 'OTD' 
   AND SYS_YEAR = '2020' 
   AND SYS_MONTH = '04' 
   AND SYS_DAY = '13' 
 ORDER BY PLAN_WEEK 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE) 
  FROM MWIPCALDEF 
 WHERE 1=1 
   AND CALENDAR_ID='OTD' 
   AND PLAN_YEAR='2020' 
   AND PLAN_WEEK='16' 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT DISTINCT PLAN_YEAR|| LPAD(PLAN_WEEK,2,'0') 
  FROM MWIPCALDEF 
 WHERE CALENDAR_ID = 'OTD' 
   AND SYS_YEAR || LPAD(SYS_MONTH,2,'0') IN ('202004', '202005' ,'202006') 
   AND SYS_DATE >= '20200413' 
 ORDER BY 1 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE) AS START_DAY 
     , MAX(SYS_DATE) AS END_DAY 
     , PLAN_YEAR||DECODE(LENGTH(PLAN_WEEK), 1, '0'||PLAN_WEEK, PLAN_WEEK) AS WEEK
  FROM MWIPCALDEF 
 WHERE CALENDAR_ID = 'OTD'
   AND (PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) IN ( 
                                                SELECT WW
                                                  FROM (
                                                        SELECT WW
                                                             , ROW_NUMBER() OVER(ORDER BY WW) AS RNK
                                                          FROM (
                                                                SELECT DISTINCT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW
                                                                  FROM MWIPCALDEF
                                                                 WHERE CALENDAR_ID = 'OTD'
                                                                   AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') >= (
                                                                                                              SELECT MAX(PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) AS WW
                                                                                                                FROM MWIPCALDEF
                                                                                                               WHERE CALENDAR_ID = 'OTD'
                                                                                                                 AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') < (SELECT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW FROM MWIPCALDEF WHERE CALENDAR_ID = 'OTD' AND SYS_DATE = '20200413')
                                                                                                                 AND SYS_DATE >= TO_CHAR(TO_DATE('20200413', 'YYYYMMDD')-14, 'YYYYMMDD')
                                                                                                             )
                                                               ) 
                                                       )
                                                 WHERE RNK <= 7
                                               ) 
 GROUP BY PLAN_YEAR, PLAN_WEEK 
 ORDER BY PLAN_YEAR, PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
(SELECT TO_CHAR(LAST_DAY(TO_DATE('202003', 'YYYYMM')),'YYYYMMDD') FROM DUAL)
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE-1) 
  FROM MWIPCALDEF 
 WHERE 1=1
   AND CALENDAR_ID='SE'
   AND PLAN_YEAR='2020'
   AND PLAN_WEEK=(
                  SELECT PLAN_WEEK 
                    FROM MWIPCALDEF 
                   WHERE 1=1 
                     AND CALENDAR_ID='SE' 
                     AND SYS_DATE=TO_CHAR(TO_DATE('20200413','YYYYMMDD'),'YYYYMMDD')
                 )

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT  ' ', (SELECT DATA_1 FROM MGCMTBLDAT@RPTTOMES WHERE FACTORY = 'HMVA2' AND TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = CUSTOMER) AS CUSTOMER, FAMILY, PACKAGE,  ' ',  ' ', LD_COUNT, PKG_CODE,  ' ', MATCODE,  ' ',  ' ',  ' ', OPER 
     , RTRIM(TO_CHAR(USAGE, 'FM9990D9999'), '.') AS USAGE 
     , ROUND(WIP_STOCK/1000,0) AS WIP_STOCK 
     , ROUND(((MAT_TTL/USAGE*1000)-REV_QTY)/1000,0) AS CMM 
     , ROUND((((MAT_TTL/USAGE*1000)-REV_QTY)-WIP_STOCK)/1000,0) AS "재공대비과부족" 
     , CASE WHEN ((MAT_TTL/USAGE*1000)-REV_QTY)-WIP_STOCK<0 THEN ROUND((ABS(((MAT_TTL/USAGE*1000)-REV_QTY)-WIP_STOCK)*USAGE/1000)/1000,1) ELSE 0 END "원부자재입고필요" 
     , ROUND(SOP_PLN_WEEK/1000,0) AS SOP_PLN
     , ROUND(ASSY_WEEK/1000,0) AS ASSY_WEEK 
     , ROUND((SOP_PLN_WEEK-ASSY_WEEK)/1000,1) AS "공정기준잔량" 
     , ROUND(((SOP_PLN_WEEK-ASSY_WEEK)*USAGE/1000)/1000,1) AS "원부자재필요" 
     , ROUND((MAT_TTL-((SOP_PLN_WEEK-ASSY_WEEK)*USAGE/1000))/1000,0) AS "계획대비과부족" 
     , ROUND(MAT_TTL/1000,0) AS MAT_TTL 
     , ROUND(MAT_SMT_IN/1000,0) AS MAT_SMT_IN 
     , ROUND(MAT_L_IN/1000,0) AS MAT_L_IN 
     , ROUND(WIK_WIP/1000,0) AS WIK_WIP 
     , ROUND(MAT_INV_L_QTY/1000,0) AS MAT_INV_L_QTY 
     , ROUND(MAT_INV_QTY/1000,0) AS MAT_INV_QTY 
     , ROUND(ORDER_QTY/1000,0) AS ORDER_QTY 
     , ROUND((SOP_PLN_WEEK-ASSY_WEEK)/1000,0) AS W0 
     , ROUND(W1/1000,0) AS W1 
     , ROUND(W2/1000,0) AS W2 
     , ROUND(W3/1000,0) AS W3 
     , ROUND(W4/1000,0) AS W4 
     , ROUND(W5/1000,0) AS W5 
     , ROUND(W6/1000,0) AS W6 
     , ROUND(W7/1000,0) AS W7 
     , ROUND((MAT_TTL-((SOP_PLN_WEEK-ASSY_WEEK)*USAGE/1000))/1000,0) AS MW0 
     , ROUND((MAT_TTL-((SOP_PLN_WEEK-ASSY_WEEK)*USAGE/1000) - (W1*USAGE/1000))/1000,0) AS MW1 
     , ROUND((MAT_TTL-((SOP_PLN_WEEK-ASSY_WEEK)*USAGE/1000) - (W1*USAGE/1000) - (W2*USAGE/1000))/1000,0) AS MW2 
     , ROUND((MAT_TTL-((SOP_PLN_WEEK-ASSY_WEEK)*USAGE/1000) - (W1*USAGE/1000) - (W2*USAGE/1000) - (W3*USAGE/1000))/1000,0) AS MW3 
     , ROUND((MAT_TTL-((SOP_PLN_WEEK-ASSY_WEEK)*USAGE/1000) - (W1*USAGE/1000) - (W2*USAGE/1000) - (W3*USAGE/1000) - (W4*USAGE/1000))/1000,0) AS MW4 
     , ROUND((MAT_TTL-((SOP_PLN_WEEK-ASSY_WEEK)*USAGE/1000) - (W1*USAGE/1000) - (W2*USAGE/1000) - (W3*USAGE/1000) - (W4*USAGE/1000) - (W5*USAGE/1000))/1000,0) AS MW5 
     , ROUND((MAT_TTL-((SOP_PLN_WEEK-ASSY_WEEK)*USAGE/1000) - (W1*USAGE/1000) - (W2*USAGE/1000) - (W3*USAGE/1000) - (W4*USAGE/1000) - (W5*USAGE/1000) - (W6*USAGE/1000))/1000,0) AS MW6 
     , ROUND((MAT_TTL-((SOP_PLN_WEEK-ASSY_WEEK)*USAGE/1000) - (W1*USAGE/1000) - (W2*USAGE/1000) - (W3*USAGE/1000) - (W4*USAGE/1000) - (W5*USAGE/1000) - (W6*USAGE/1000) - (W7*USAGE/1000))/1000,0) AS MW7 
  FROM ( 
        SELECT  ' ', MAT.MAT_GRP_1 AS CUSTOMER, MAT.MAT_GRP_2 AS FAMILY, MAT_GRP_10 AS PACKAGE,  ' ',  ' ', MAT.MAT_GRP_6 AS LD_COUNT, MAT.MAT_CMF_11 AS PKG_CODE,  ' ', REPLACE(A.MATCODE, '-O','') AS MATCODE,  ' ',  ' ',  ' ', A.OPER
             , SUM(A.SOP_PLN_MON) AS SOP_PLN_MON 
             , SUM(A.SOP_PLN_WEEK) AS SOP_PLN_WEEK 
             , SUM(A.WEEK_AO+A.WIP_STOCK_NEXT) AS ASSY_WEEK 
             , SUM(A.ASSY_MON+A.WIP_STOCK_NEXT) AS ASSY_MON 
             , SUM(A.WIP_STOCK) AS WIP_STOCK 
             , SUM(A.REV_QTY) AS REV_QTY 
             , MAX(A.USAGE) AS USAGE 
             , MAX(A.TTL) AS MAT_TTL 
             , MAX(A.SMT_IN) AS MAT_SMT_IN 
             , MAX(A.L_IN) AS MAT_L_IN 
             , MAX(A.WIK_WIP) AS WIK_WIP 
             , MAX(A.INV_L_QTY) AS MAT_INV_L_QTY 
             , MAX(A.INV_QTY) AS MAT_INV_QTY 
             , MAX(A.ORDER_QTY) AS ORDER_QTY 
             , MAX(A.WIP_STOCK-A.IN_QTY) AS  IN_QTY 
             , SUM(A.W0) AS W0 
             , SUM(A.W1) AS W1 
             , SUM(A.W2) AS W2 
             , SUM(A.W3) AS W3 
             , SUM(A.W4) AS W4 
             , SUM(A.W5) AS W5 
             , SUM(A.W6) AS W6 
             , SUM(A.W7) AS W7 
        FROM MWIPMATDEF MAT 
           ,  ( 
              SELECT MAT.MAT_ID 
                   , C.MATTYPE 
                   , C.MATCODE 
                   , C.DESCRIPT 
                   , C.OPER 
                   , C.UNIT 
                   , MAX(A.SOP_PLN_MON) AS  SOP_PLN_MON 
                   , MAX(A.SOP_PLN_WEEK) AS  SOP_PLN_WEEK 
                   , MAX(USAGE) AS USAGE 
                   , MAX(A.WEEK_AO) AS WEEK_AO 
                   , MAX(A.ASSY_MON) AS ASSY_MON 
                   , SUM(NVL((CASE WHEN MAT.MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT.MAT_GRP_5 <> '-' THEN CASE WHEN MAT.MAT_GRP_5 IN ('1st','Merge') OR MAT.MAT_GRP_5 LIKE 'Middle%' THEN CASE WHEN B.OPER = 'A0000' THEN NVL(B.VO,0) ELSE 0 END ELSE 0 END  
                               ELSE CASE WHEN B.OPER = 'A0000' THEN NVL(B.VO,0) ELSE 0 END 
                           END),0)) AS WIP_STOCK 
                   , SUM(NVL((CASE WHEN MAT.MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT.MAT_GRP_5 <> '-' THEN CASE WHEN MAT.MAT_GRP_5 IN ('1st','Merge') OR MAT.MAT_GRP_5 LIKE 'Middle%' THEN CASE WHEN (B.OPER BETWEEN C.OPER AND 'AZ010') AND B.OPER <> C.OPER THEN NVL(B.VO,0) ELSE 0 END ELSE 0 END  
                               ELSE CASE WHEN (B.OPER BETWEEN C.OPER AND 'AZ010') AND B.OPER <> C.OPER THEN NVL(B.VO,0) ELSE 0 END  
                           END),0)) AS WIP_STOCK_NEXT 
                   , SUM(NVL((CASE WHEN MAT.MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT.MAT_GRP_5 <> '-' THEN CASE WHEN MAT.MAT_GRP_5 IN ('1st','Merge') OR MAT.MAT_GRP_5 LIKE 'Middle%' THEN CASE WHEN (B.OPER BETWEEN 'A0000' AND C.OPER) AND B.OPER <> 'A0000' THEN NVL(B.VO,0) ELSE 0 END ELSE 0 END  
                               ELSE CASE WHEN (B.OPER BETWEEN 'A0000' AND C.OPER) AND B.OPER <> 'A0000' THEN NVL(B.VO,0) ELSE 0 END  
                           END),0)) AS REV_QTY 
                   , MAX(C.TTL) AS TTL 
                   , MAX(C.SMT_IN) AS SMT_IN 
                   , MAX(C.L_IN) AS L_IN 
                   , MAX(C.WIK_WIP) AS WIK_WIP 
                   , MAX(C.INV_L_QTY) AS INV_L_QTY 
                   , MAX(C.INV_QTY) AS INV_QTY 
                   , MAX(C.ORDER_QTY) AS ORDER_QTY 
                   , MAX(C.IN_QTY) AS IN_QTY 
                   , MAX(A.W0) AS W0 
                   , MAX(A.W1) AS W1 
                   , MAX(A.W2) AS W2 
                   , MAX(A.W3) AS W3 
                   , MAX(A.W4) AS W4 
                   , MAX(A.W5) AS W5 
                   , MAX(A.W6) AS W6 
                   , MAX(A.W7) AS W7 
                FROM MWIPMATDEF MAT 
                   , ( 
                      SELECT MAT.MAT_ID   
                           , MAX(CASE WHEN MAT.MAT_GRP_3 IN ('COB') THEN ROUND(NVL(PLAN.RESV_FIELD1,0)/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0) ELSE NVL(PLAN.RESV_FIELD1,0) END) AS SOP_PLN_MON 
                           , MAX(CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN NVL(W_PLN.W0,0) / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE NVL(W_PLN.W0,0) END) AS SOP_PLN_WEEK  
                           , MAX(CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN ROUND(NVL(WEEK_AO.WEEK_AO,0)/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0) ELSE NVL(WEEK_AO.WEEK_AO,0) END) WEEK_AO 
                           , MAX(CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN ROUND(NVL(MON_AO.ASSY_MON,0)/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0) ELSE NVL(MON_AO.ASSY_MON,0) END) ASSY_MON 
                           , MAX(CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN NVL(W0,0) / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE NVL(W0,0) END) AS W0 
                           , MAX(CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN NVL(W1,0) / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE NVL(W1,0) END) AS W1 
                           , MAX(CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN NVL(W2,0) / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE NVL(W2,0) END) AS W2 
                           , MAX(CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN NVL(W3,0) / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE NVL(W3,0) END) AS W3 
                           , MAX(CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN NVL(W4,0) / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE NVL(W4,0) END) AS W4 
                           , MAX(CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN NVL(W5,0) / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE NVL(W5,0) END) AS W5 
                           , MAX(CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN NVL(W6,0) / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE NVL(W6,0) END) AS W6 
                           , MAX(CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN NVL(W7,0) / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE NVL(W7,0) END) AS W7 
                           , MAX(W_PLN.W_LAST) AS W_LAST 
                        FROM MWIPMATDEF MAT  
                           , (    
                              SELECT MAT_ID, SUM(S1_FAC_OUT_QTY_1+S2_FAC_OUT_QTY_1+S3_FAC_OUT_QTY_1) AS SHP_QTY  
                                FROM RSUMFACMOV   
                               WHERE 1=1   
                                 AND WORK_DATE BETWEEN '20200411' AND '20200413' 
                                 AND LOT_TYPE = 'W'   
                                 AND CM_KEY_1 = 'HMVA2'   
                                 AND CM_KEY_2 = 'PROD'   
                                 AND CM_KEY_3 LIKE 'P%' 
                                 AND FACTORY NOT IN ('RETURN')  
                               GROUP BY MAT_ID     
                             ) SHP   
                          , ( 
                             SELECT MAT_ID 
                                  , SUM(DECODE(WORK_DATE,'20200331', 0, NVL(S1_FAC_OUT_QTY_1 + S2_FAC_OUT_QTY_1 + S3_FAC_OUT_QTY_1 + S4_FAC_OUT_QTY_1, 0))) AS ASSY_MON 
                               FROM RSUMFACMOV 
                               WHERE 1=1 
                                 AND WORK_DATE BETWEEN '20200331' AND '20200413'
                                 AND LOT_TYPE = 'W' 
                                 AND CM_KEY_1 = 'HMVA2' 
                                 AND CM_KEY_2 = 'PROD' 
                                 AND CM_KEY_3 LIKE 'P%' 
                                 AND FACTORY NOT IN ('RETURN') 
                               GROUP BY MAT_ID 
                             ) MON_AO 
                           , ( 
                              SELECT MAT_ID 
                                   , SUM(NVL(S1_FAC_OUT_QTY_1 + S2_FAC_OUT_QTY_1 + S3_FAC_OUT_QTY_1 + S4_FAC_OUT_QTY_1, 0)) AS WEEK_AO  
                                FROM RSUMFACMOV 
                               WHERE 1=1 
                                 AND WORK_DATE BETWEEN '20200411' AND '20200417'
                                 AND LOT_TYPE = 'W' 
                                 AND CM_KEY_1 = 'HMVA2' 
                                 AND CM_KEY_2 = 'PROD' 
                                 AND CM_KEY_3 LIKE 'P%' 
                                 AND FACTORY NOT IN ('RETURN') 
                               GROUP BY MAT_ID 
                             ) WEEK_AO 
                           , (  
                              SELECT FACTORY,MAT_ID,PLAN_QTY_ASSY,PLAN_MONTH, RESV_FIELD1  
                                FROM (  
                                      SELECT FACTORY, MAT_ID, SUM(PLAN_QTY_ASSY) AS PLAN_QTY_ASSY, PLAN_MONTH, SUM(RESV_FIELD1) AS RESV_FIELD1   
                                        FROM (  
                                              SELECT FACTORY, MAT_ID, SUM(PLAN_QTY_ASSY) AS PLAN_QTY_ASSY, PLAN_MONTH, SUM(TO_NUMBER(DECODE(RESV_FIELD1,' ',0,RESV_FIELD1))) AS RESV_FIELD1  
                                                FROM CWIPPLNMON  
                                               WHERE 1=1  
                                                 AND FACTORY = 'HMVA2'  
                                               GROUP BY FACTORY, MAT_ID, PLAN_MONTH  
                                             )  
                                       GROUP BY FACTORY, MAT_ID,PLAN_MONTH  
                                     )  
                                WHERE PLAN_MONTH = '202004' 
                             ) PLAN 
                           , (   
                              SELECT MAT_ID   
                                   , SUM(DECODE(PLAN_WEEK, '202016', WW_QTY, 0)) AS W0  
                                   , SUM(DECODE(PLAN_WEEK, '202017', WW_QTY, 0)) AS W1  
                                   , SUM(DECODE(PLAN_WEEK, '202018', WW_QTY, 0)) AS W2  
                                   , SUM(DECODE(PLAN_WEEK, '202019', WW_QTY, 0)) AS W3  
                                   , SUM(DECODE(PLAN_WEEK, '202020', WW_QTY, 0)) AS W4  
                                   , SUM(DECODE(PLAN_WEEK, '202021', WW_QTY, 0)) AS W5  
                                   , SUM(DECODE(PLAN_WEEK, '202022', WW_QTY, 0)) AS W6  
                                   , SUM(DECODE(PLAN_WEEK, '202023', WW_QTY, 0)) AS W7  
                                   , SUM(CASE WHEN PLAN_WEEK >= CKD_S_WEEK AND PLAN_WEEK <= CKD_L_WEEK THEN REV_QTY ELSE 0 END) AS W_LAST   
                                FROM (   
                                      SELECT A.PLAN_WEEK, B.CKD_S_WEEK, B.CKD_L_WEEK, A.MAT_ID, A.WW_QTY, B.CNT   
                                           , ROUND((A.WW_QTY / 7) * B.CNT, 0) AS REV_QTY   
                                        FROM RWIPPLNWEK A   
                                           , (   
                                              SELECT MAX(TRIM(TO_CHAR(PLAN_YEAR))||LPAD(PLAN_WEEK,2,'0')) PLAN_WEEK, COUNT(*) AS CNT  
                                                   , (SELECT MAX(TRIM(TO_CHAR(PLAN_YEAR))||LPAD(PLAN_WEEK,2,'0')) PLAN_WEEK FROM MWIPCALDEF WHERE CALENDAR_ID = 'OTD' AND SYS_DATE = '20200411') AS CKD_S_WEEK 
                                                   , (SELECT MAX(TRIM(TO_CHAR(PLAN_YEAR))||LPAD(PLAN_WEEK,2,'0')) PLAN_WEEK FROM MWIPCALDEF WHERE CALENDAR_ID = 'OTD' AND SYS_DATE = '20200413') AS CKD_L_WEEK 
                                                FROM MWIPCALDEF  
                                               WHERE 1=1  
                                                 AND CALENDAR_ID = 'OTD'  
                                                 AND PLAN_YEAR||LPAD(PLAN_MONTH,2,'0') IN('202004','202005','202006') 
                                               GROUP BY PLAN_WEEK  
                                             ) B   
                                       WHERE 1=1   
                                         AND A.PLAN_WEEK = B.PLAN_WEEK   
                                         AND A.FACTORY = 'HMVA2'     
                                         AND A.GUBUN = '3'    
                                     )   
                               GROUP BY MAT_ID   
                             ) W_PLN   
                       WHERE 1=1  
                         AND MAT.MAT_ID = PLAN.MAT_ID(+) 
                         AND MAT.MAT_ID = SHP.MAT_ID(+)  
                         AND MAT.MAT_ID = W_PLN.MAT_ID(+)  
                         AND MAT.MAT_ID = MON_AO.MAT_ID(+)  
                         AND MAT.MAT_ID = WEEK_AO.MAT_ID(+)  
                         AND MAT.FACTORY = 'HMVA2'  
                         AND MAT.DELETE_FLAG = ' '  
                         AND MAT.MAT_TYPE = 'FG'  
                         AND MAT.MAT_ID LIKE '%'  
                       GROUP BY MAT.MAT_ID 
                     ) A 
                   , ( 
                      SELECT LOT.MAT_ID, MAT.MAT_GRP_3, LOT.OPER_GRP_1, LOT.OPER 
                           , DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY) AS VO 
                        FROM ( 
                              SELECT FACTORY, MAT_ID, OPER_GRP_1, OPER 
                                   , SUM(CASE WHEN OPER <= 'A0395' THEN QTY_1 / NVL(COMP_CNT,1) 
                                              ELSE QTY_1 
                                         END) QTY 
                                FROM ( 
                                      SELECT A.FACTORY, A.MAT_ID, B.OPER_GRP_1, B.OPER, A.QTY_1 
                                           , (SELECT DATA_1 FROM MGCMTBLDAT WHERE FACTORY = 'HMVA2' AND TABLE_NAME IN ('H_SEC_AUTO_LOSS','H_HX_AUTO_LOSS') AND KEY_1 = A.MAT_ID) AS COMP_CNT 
                                        FROM RWIPLOTSTS A 
                                           , MWIPOPRDEF B 
                                       WHERE 1 = 1 
                                         AND A.FACTORY = B.FACTORY(+) 
                                         AND A.OPER = B.OPER(+) 
                                         AND A.FACTORY = 'HMVA2' 
                                         AND A.LOT_TYPE = 'W' 
                                         AND A.LOT_DEL_FLAG = ' ' 
                                         AND B.OPER_GRP_1 NOT IN (' ', '-') 
                                         AND B.OPER BETWEEN 'A0000' AND 'AZ010' 
                                         AND A.LOT_CMF_5 LIKE 'P%' 
                                     ) 
                               GROUP BY FACTORY, MAT_ID, OPER_GRP_1, OPER 
                               ORDER BY MAT_ID, OPER, OPER_GRP_1 
                             ) LOT 
                           , MWIPMATDEF MAT 
                       WHERE 1 = 1 
                         AND LOT.FACTORY = MAT.FACTORY 
                         AND LOT.MAT_ID = MAT.MAT_ID 
                         AND MAT.DELETE_FLAG <> 'Y' 
                         AND MAT.MAT_GRP_2 <> '-' 
                       ORDER BY LOT.OPER, LOT.OPER_GRP_1 
                     ) B 
                   , ( 
                      SELECT MAT.MAT_ID    
                           , SMM.MAT_TYPE AS MATTYPE   
                           , MAX(NVL(SMM.UNIT_QTY,0)) AS USAGE   
                           , SMM.MATCODE AS MATCODE 
                           , SMM.DESCRIPT AS DESCRIPT 
                           , SMM.OPER AS OPER  
                           , SMM.UNIT_1 AS UNIT  
                           , MAX(WIP_MAT.TTL) AS TTL 
                           , MAX(WIP_MAT.SMT_IN) AS SMT_IN 
                           , MAX(WIP_MAT.L_IN) AS L_IN 
                           , MAX(WIP_MAT.WIK_WIP) AS WIK_WIP 
                           , MAX(WIP_MAT.INV_L_QTY) AS INV_L_QTY 
                           , MAX(WIP_MAT.INV_QTY) AS INV_QTY 
                           , MAX(WIP_MAT.ORDER_QTY) AS ORDER_QTY 
                           , MAX(WIP_MAT.IN_QTY) AS IN_QTY 
                        FROM MWIPMATDEF MAT  
                           , (   
                              SELECT DISTINCT NVL(P.MAT_ID,B.PARTNUMBER) PARTNUMBER, B.MATCODE, B.DESCRIPT, B.RESV_FIELD_2 AS MAT_TYPE, B.UNIT AS UNIT_1, B.UNIT_QTY, B.STEPID AS OPER 
                                FROM CWIPMATDEF@RPTTOMES A  
                                   , CWIPBOMDEF B  
                                   , RWIPMCPBOM P    
                               WHERE 1=1  
                                 AND A.MAT_ID = B.MATCODE  
                                 AND A.FACTORY = 'HMVA2'  
                                 AND B.RESV_FIELD_2 IN ('CW','GW','MC','SB','SW','TE', 'LF', 'PB', 'RC')  
                                 AND B.RESV_FIELD_2 <> ' '  
                                 AND B.RESV_FLAG_1 = 'Y'  
                                 AND B.STEPID <> 'A0300'  
                                 AND B.MATCODE NOT LIKE '%-O'  
                                 AND B.PARTNUMBER = P.MCP_TO_PART(+) 
                               ORDER BY MATCODE 
                             ) SMM 
                           , (  
                              SELECT REPLACE(A.MAT_ID, '-O', '') AS MAT_ID 
                                   , SUM(NVL(B.INV_QTY,0)) + SUM(NVL(B.INV_L_QTY,0))+SUM(NVL(C.QTY_SMT,0))+SUM(NVL(C.QTY_TTL,0))+SUM(NVL(E.WIK_WIP,0)) AS TTL 
                                   , SUM(NVL(C.QTY_SMT,0)) AS SMT_IN  
                                   , SUM(NVL(C.QTY_TTL,0)) AS L_IN  
                                   , SUM(NVL(E.WIK_WIP,0)) AS WIK_WIP  
                                   , SUM(NVL(B.INV_L_QTY,0)) AS INV_L_QTY  
                                   , SUM(NVL(B.INV_QTY,0)) AS INV_QTY  
                                   , SUM(NVL(D.ORDER_QTY,0)) AS ORDER_QTY  
                                   , SUM(NVL(C.IN_QTY,0)) AS IN_QTY  
                                FROM MWIPMATDEF A     
                                   , (     
                                      SELECT MAT_ID 
                                           , SUM(INV_QTY) AS INV_QTY 
                                           , SUM(INV_L_QTY) AS INV_L_QTY 
                                        FROM ( 
                                              SELECT MAT_ID  
                                                   , SUM(DECODE(STORAGE_LOCATION, '1000', QUANTITY, '1003', QUANTITY, 0)) AS INV_QTY  
                                                   , SUM(DECODE(STORAGE_LOCATION, '1001', QUANTITY, 0)) AS INV_L_QTY    
                                                FROM CWMSLOTSTS@RPTTOMES 
                                               WHERE 1=1 
                                                 AND QUANTITY> 0 
                                                 AND STORAGE_LOCATION IN ('1000', '1001', '1003') 
                                               GROUP BY MAT_ID  
                                               UNION ALL 
                                              SELECT MAT_ID, 0 AS INV_QTY, SUM(QTY_1) AS INV_L_QTY 
                                                FROM CWIPMATSLP@RPTTOMES 
                                               WHERE 1=1 
                                                 AND RECV_FLAG = ' ' 
                                                 AND IN_TIME BETWEEN '20200411000000' AND '20200413235959' 
                                               GROUP BY MAT_ID 
                                             ) 
                                       GROUP BY MAT_ID 
                                     ) B     
                                   , (     
                                      SELECT MAT_ID  
                                           , SUM(CASE WHEN B.LOT_ID IS NOT NULL THEN 1   
                                                      ELSE 0   
                                                 END) AS IN_QTY   
                                           , COUNT(*) AS LOT_TTL   
                                           , SUM(CASE WHEN OPER LIKE 'M%' AND OPER <= 'M0330' THEN QTY_1 ELSE 0 END) AS QTY_SMT  
                                           , SUM(CASE WHEN OPER LIKE 'A%' OR OPER > 'M0330' THEN QTY_1 ELSE 0 END) AS QTY_TTL  
                                        FROM RWIPLOTSTS A   
                                           , CRASRESMAT B   
                                       WHERE 1=1    
                                         AND A.FACTORY = B.FACTORY(+)   
                                         AND A.LOT_ID = B.LOT_ID(+)   
                                         AND A.FACTORY = 'HMVA2'  
                                         AND A.LOT_TYPE != 'W'  
                                         AND A.LOT_DEL_FLAG = ' '  
                                         AND A.LOT_CMF_2 = '-'   
                                         AND A.LOT_CMF_9 != ' '   
                                         AND A.QTY_1 > 0   
                                         AND A.OPER NOT IN  ('00001', '00002', 'V0000')   
                                       GROUP BY A.MAT_ID    
                                     ) C     
                                   , (     
                                      SELECT MAT_ID, SUM(ORDER_QUAN) AS ORDER_QTY     
                                        FROM RSAPORDQNT     
                                       WHERE 1=1     
                                         AND CREATE_TIME = TO_CHAR(SYSDATE, 'YYYYMMDD')     
                                       GROUP BY MAT_ID     
                                     ) D 
                                   , ( 
                                      SELECT MAT_ID, SUM(LOT_QTY) AS WIK_WIP 
                                        FROM ISTMWIKWIP@RPTTOMES 
                                       WHERE 1=1 
                                         AND CUTOFF_DT = '20200413' || TO_CHAR(SYSDATE, 'HH24')
                                       GROUP BY MAT_ID 
                                     ) E 
                               WHERE 1=1 
                                 AND A.MAT_ID = B.MAT_ID(+) 
                                 AND A.MAT_ID = C.MAT_ID(+) 
                                 AND A.MAT_ID = D.MAT_ID(+) 
                                 AND A.MAT_ID = E.MAT_ID(+) 
                                 AND A.FACTORY = 'HMVA2' 
                               GROUP BY REPLACE(A.MAT_ID, '-O', '') 
                               HAVING SUM(NVL(B.INV_QTY,0)) + SUM(NVL(C.QTY_SMT,0)) + SUM(NVL(C.QTY_TTL,0)) + SUM(NVL(B.INV_L_QTY,0)) + SUM(NVL(D.ORDER_QTY,0)) + SUM(NVL(E.WIK_WIP,0)) + SUM(NVL(C.IN_QTY,0)) > 0 
                             ) WIP_MAT 
                       WHERE 1=1 
                         AND MAT.MAT_ID = SMM.PARTNUMBER(+) 
                         AND SMM.MATCODE = WIP_MAT.MAT_ID(+) 
                         AND MAT.FACTORY = 'HMVA2' 
                         AND MAT.DELETE_FLAG = ' ' 
                         AND MAT.MAT_TYPE = 'FG' 
                         AND MAT.MAT_ID LIKE '%' 
                         AND SMM.UNIT_QTY > 0 
                       GROUP BY MAT.MAT_ID, SMM.MAT_TYPE, SMM.DESCRIPT, SMM.MATCODE, SMM.DESCRIPT, SMM.OPER, SMM.UNIT_1 
                     ) C 
               WHERE 1=1 
                 AND MAT.MAT_ID = A.MAT_ID(+) 
                 AND MAT.MAT_ID = B.MAT_ID(+) 
                 AND MAT.MAT_ID = C.MAT_ID(+) 
                 AND MAT.FACTORY = 'HMVA2' 
                 AND MAT.DELETE_FLAG = ' ' 
                 AND MAT.VENDOR_ID <> ' ' 
               GROUP BY MAT.MAT_ID, C.MATTYPE, C.MATCODE, C.DESCRIPT, C.OPER, C.UNIT 
             ) A 
        WHERE 1=1  
          AND MAT.MAT_ID = A.MAT_ID(+) 
          AND MAT.FACTORY = 'HMVA2' 
          AND MAT.DELETE_FLAG = ' ' 
          AND A.MATCODE <> ' ' 
        GROUP BY  ' ', MAT.MAT_GRP_1, MAT.MAT_GRP_2, MAT.MAT_GRP_10,  ' ',  ' ', MAT.MAT_GRP_6, MAT.MAT_CMF_11,  ' ', REPLACE(A.MATCODE, '-O',''),  ' ',  ' ',  ' ', A.OPER
        HAVING ( 
                SUM(NVL(SOP_PLN_MON,0))+SUM(NVL(SOP_PLN_WEEK,0))+SUM(NVL(WEEK_AO,0))+SUM(NVL(WIP_STOCK,0))+SUM(NVL(REV_QTY,0))+MAX(NVL(TTL,0)) 
               +SUM(NVL(W0,0))+SUM(NVL(W1,0))+SUM(NVL(W2,0))+SUM(NVL(W3,0))+SUM(NVL(W4,0))+SUM(NVL(W5,0))+SUM(NVL(W6,0))+SUM(NVL(W7,0)) 
               ) > 0 
       ) A 
 WHERE 1=1  
   AND NVL(WIP_STOCK,0)+NVL(SOP_PLN_MON,0)+NVL(SOP_PLN_WEEK,0)+NVL(ASSY_WEEK,0)+NVL(REV_QTY,0)+NVL(MAT_TTL,0)+NVL(MAT_L_IN,0)+NVL(WIK_WIP,0)+NVL(MAT_INV_L_QTY,0)+NVL(MAT_INV_QTY,0)+NVL(ORDER_QTY,0)+NVL(W1,0)+NVL(W2,0)+NVL(W3,0)+NVL(W4,0)+NVL(W5,0)+NVL(W6,0)+NVL(W7,0) > 0 
 ORDER BY  ' ', DECODE(A.CUSTOMER, 'SE', 1, 'HX', 2, 'IM', 3, 'FC', 4, 'IG', 5, 6),CUSTOMER, FAMILY, PACKAGE,  ' ',  ' ', LD_COUNT, PKG_CODE,  ' ', MATCODE,  ' ',  ' ',  ' ', OPER

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT DISTINCT MAT_ID FROM CMATPLNINP@RPTTOMES WHERE PLAN_DATE <> ' '
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
SELECT LANGUAGE_2 FROM RWEBFUNDEF WHERE FUNC_NAME = 'PRD010217'
-------------------------------------------------------------
SELECT * FROM RWEBUSRDEF WHERE FACTORY = :FACTORY AND USER_ID= :USER_ID
-------------------------------------------------------------
SELECT A.FUNC_GRP_SEQ,A.SEC_GRP_ID,A.FUNC_GRP_ID,NVL(A.FUNC_NAME, ' ') FUNC_NAME, NVL(B.FUNC_DESC, ' ') FUNC_DESC, LANGUAGE_1, LANGUAGE_2, LANGUAGE_3
  FROM RWEBGRPFUN A, RWEBFUNDEF B
 WHERE A.FACTORY = :p_FACTORY
   AND A.SEC_GRP_ID = :p_SEC_GRP_ID
   AND A.FUNC_NAME=B.FUNC_NAME(+)
 ORDER BY A.FUNC_GRP_SEQ, A.FUNC_SEQ
-------------------------------------------------------------
