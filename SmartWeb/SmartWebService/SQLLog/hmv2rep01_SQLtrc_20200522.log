SELECT * FROM RWEBUSRDEF WHERE FACTORY = :FACTORY AND USER_ID= :USER_ID
-------------------------------------------------------------
SELECT A.FUNC_GRP_SEQ,A.SEC_GRP_ID,A.FUNC_GRP_ID,NVL(A.FUNC_NAME, ' ') FUNC_NAME, NVL(B.FUNC_DESC, ' ') FUNC_DESC, LANGUAGE_1, LANGUAGE_2, LANGUAGE_3
  FROM RWEBGRPFUN A, RWEBFUNDEF B
 WHERE A.FACTORY = :p_FACTORY
   AND A.SEC_GRP_ID = :p_SEC_GRP_ID
   AND A.FUNC_NAME=B.FUNC_NAME(+)
 ORDER BY A.FUNC_GRP_SEQ, A.FUNC_SEQ
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
 SELECT PLAN_WEEK V1    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_DATE = TO_CHAR(SYSDATE,'yyyymmdd')      AND ROWNUM = 1  
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT LANGUAGE_2 FROM RWEBFUNDEF WHERE FUNC_NAME = 'PRD010603'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT FACTORY Code, FAC_DESC Data
  FROM MWIPFACDEF
 WHERE FAC_GRP_5 = 'Y' 
 ORDER BY FAC_GRP_4 ASC
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT FACTORY Code, FAC_DESC Data
  FROM MWIPFACDEF
 WHERE FAC_GRP_5 = 'Y' 
 ORDER BY FAC_GRP_4 ASC
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT (SELECT DATA_1 FROM MGCMTBLDAT WHERE TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = A.MAT_GRP_1 AND ROWNUM=1) AS CUSTOMER,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', A.MAT_CMF_10, A.MAT_ID,  ' ',  ' ' 
     , A.INVOICE_NO
     , A.LOT_CMF_11 
     , A.LOT_ID
     , A.TRAN_TIME             
     , A.WORK_DATE
     , A.LOT_CMF_5
     , SUM(NVL(A.QTY_1,0)) +  SUM(NVL(LOSS_QTY,0)) - SUM(NVL(D.TOTAL_BONUS_QTY,0)) AS IN_QTY 
     , NVL(SUM(A.QTY_1),0) AS SHIP_QTY  
     , DECODE( NVL(SUM(A.QTY_1), 0), 0, 0, ROUND((SUM(A.QTY_1)/   (SUM(NVL(A.QTY_1,0)) + SUM(NVL(LOSS_QTY,0)) - SUM(NVL(D.TOTAL_BONUS_QTY,0))))*100,3)) AS YIELD
     , NVL(ROUND(SUM(TO_DATE(A.TRAN_TIME, 'YYYYMMDDHH24MISS') - TO_DATE(A.LOT_CMF_14, 'YYYYMMDDHH24MISS')) * 1,2), 0) AS TAT
     , 0 AS WAFER_QTY 
     , SUM(NVL(C.LOSS_QTY,0)) 
     , SUM(NVL(C.CV100,0))
     , SUM(NVL(C.CV200,0))
     , SUM(NVL(C.CV991,0))
     , SUM(NVL(C.BCV,0))
     , SUM(NVL(C.ECV,0))
     , SUM(NVL(C.HBCV,0))
     , SUM(NVL(C.HDCV,0))
     , SUM(NVL(C.HECV,0))
     , SUM(NVL(C.HQCV,0))
     , SUM(NVL(C.HSCV,0))
     , SUM(NVL(D.TOTAL_BONUS_QTY,0)) AS BONUS
     , A.NCF
     , A.NCH
     , A.LOT_CMF_10
     , DECODE(A.CREATE_CODE,'PROD', '','Y') AS RETN
     , A.LOT_CMF_3
  FROM (
        SELECT B.MAT_GRP_1, B.MAT_GRP_2, B.MAT_GRP_3, B.MAT_GRP_4, B.MAT_GRP_5, B.MAT_GRP_6, B.MAT_GRP_7, B.MAT_GRP_8, B.MAT_CMF_10, A.MAT_ID, B.MAT_CMF_7, A.LOT_CMF_4 
             , A.FACTORY
             , A.INVOICE_NO
             , A.LOT_CMF_10 
             , A.LOT_CMF_11 
             , A.LOT_CMF_14 
             , A.LOT_ID
             , NVL(SUM(A.QTY_1),0) QTY_1
             , NVL(SUM(A.QTY_2),0) QTY_2
             , (SELECT COUNT(A.LOT_ID) FROM CWIPLOTWFR WHERE LOT_ID = A.LOT_ID) AS WAFER_QTY
             , GET_WORK_DATE(A.TRAN_TIME,'D') AS WORK_DATE
             , A.TRAN_TIME     
             , A.LOT_CMF_5     
             , NVL(SUM(A.IN_QTY),0) IN_QTY
             , MESMGR.F_GET_MCP_NCF_SINGLE@RPTTOMES(A.LOT_ID) AS NCF
             , MESMGR.F_GET_SEC_NCX@RPTTOMES(A.FACTORY, 'NCHCODE', A.LOT_ID, 'V') AS NCH
             , A.CREATE_CODE
             , A.CREATE_TIME
             , A.RESV_FIELD_1
             , A.LOT_CMF_3
          FROM (
                SELECT FROM_FACTORY AS FACTORY
                     , INVOICE_NO
                     , MAT_ID
                     , LOT_ID
                     , SHIP_QTY_1 AS QTY_1
                     , SHIP_QTY_2 AS QTY_2 
                     , TRAN_TIME   
                     , LOT_CMF_3   
                     , LOT_CMF_4   
                     , LOT_CMF_5   
                     , LOT_CMF_10   
                     , LOT_CMF_11   
                     , LOT_CMF_14   
                     , IN_QTY 
                     , CREATE_CODE 
                     , CREATE_TIME 
                     , RESV_FIELD_1 
                  FROM VWIPSHPLOT   
                 WHERE 1=1   
                   AND FROM_FACTORY  = 'HMVA2' 
                   AND OWNER_CODE = 'PROD' 
                   AND TO_FACTORY IN ('CUSTOMER', 'HMKT1') 
                   AND LOT_TYPE = 'W' 
                   AND FROM_OPER IN ('AZ010','AZ009','TZ010','EZ010','SZ010','F0000', 'BZ010')
                   AND TRAN_TIME BETWEEN '20200521220000' AND '20200522215959' 
             ) A 
             , MWIPMATDEF@RPTTOMES B 
         WHERE 1=1 
           AND A.MAT_ID = B.MAT_ID(+) 
           AND A.FACTORY = B.FACTORY(+) 
           AND B.MAT_VER(+) = 1 
         GROUP BY B.MAT_GRP_1, B.MAT_GRP_2, B.MAT_GRP_3, B.MAT_GRP_4, B.MAT_GRP_5, B.MAT_GRP_6, B.MAT_GRP_7, B.MAT_GRP_8, B.MAT_CMF_10, A.MAT_ID, B.MAT_CMF_7
                , A.FACTORY, A.INVOICE_NO, A.LOT_CMF_10, A.LOT_CMF_11, A.LOT_CMF_14, A.LOT_ID, A.TRAN_TIME,  A.LOT_CMF_4, A.LOT_CMF_5, A.CREATE_CODE, A.CREATE_TIME, A.RESV_FIELD_1, A.LOT_CMF_3
       ) A
       , ( 
          SELECT FACTORY, MAT_VER, LOT_ID, SUM(LOSS_QTY) AS LOSS_QTY, SUM(CV100) CV100, SUM(CV200) CV200, SUM(CV991) CV991 , SUM(BCV) BCV, SUM(ECV) ECV, SUM(HBCV) HBCV, SUM(HDCV) HDCV, SUM(HECV) HECV, SUM(HQCV) HQCV, SUM(HSCV) HSCV
            FROM ( 
                  SELECT FACTORY, MAT_ID, MAT_VER, LOT_ID   
                       , SUM(DECODE(LOSS_CODE, '100', LOSS_QTY, 0)) AS CV100  
                       , SUM(DECODE(LOSS_CODE, '200', LOSS_QTY, 0)) AS CV200  
                       , SUM(DECODE(LOSS_CODE, '991', LOSS_QTY, 0)) AS CV991  
                       , SUM(DECODE(LOSS_CODE, '992-BCV', LOSS_QTY, 0)) AS BCV  
                       , SUM(DECODE(LOSS_CODE, '992-ECV', LOSS_QTY, 0)) AS ECV  
                       , SUM(DECODE(LOSS_CODE, '992-HBCV', LOSS_QTY, 0)) AS HBCV  
                       , SUM(DECODE(LOSS_CODE, '992-HDCV', LOSS_QTY, 0)) AS HDCV  
                       , SUM(DECODE(LOSS_CODE, '992-HECV', LOSS_QTY, 0)) AS HECV  
                       , SUM(DECODE(LOSS_CODE, '992-HQCV', LOSS_QTY, 0)) AS HQCV  
                       , SUM(DECODE(LOSS_CODE, '992-HSCV', LOSS_QTY, 0)) AS HSCV  
                       , SUM(LOSS_QTY) AS LOSS_QTY  
                    FROM RWIPLOTLSM  
                   WHERE HIST_DEL_FLAG= ' '  
                     AND LOT_ID IN ( 
                                    SELECT LOT_ID
                                      FROM VWIPSHPLOT   
                                     WHERE 1=1   
                                       AND FROM_FACTORY  = 'HMVA2' 
                                       AND OWNER_CODE = 'PROD' 
                                       AND TO_FACTORY IN ('CUSTOMER', 'HMKT1') 
                                       AND LOT_TYPE = 'W' 
                                       AND FROM_OPER IN ('AZ010','AZ009','TZ010','EZ010','SZ010','F0000', 'BZ010')
                                       AND TRAN_TIME BETWEEN '20200521220000' AND '20200522215959' 
                                   ) 
                   GROUP BY FACTORY, MAT_ID, MAT_VER, LOT_ID 
                 )  
           GROUP BY FACTORY, MAT_VER, LOT_ID
         ) C  
         , RWIPLOTBNS D 
     WHERE 1=1  
       AND A.FACTORY  = 'HMVA2' 
       AND A.FACTORY = C.FACTORY(+)  
       AND A.FACTORY = D.FACTORY(+) 
       AND A.LOT_ID = C.LOT_ID(+) 
       AND A.LOT_ID = D.LOT_ID(+) 
       AND C.MAT_VER(+)=1   
       AND D.MAT_VER(+)=1  
 GROUP BY A.MAT_GRP_1,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', A.MAT_CMF_10, A.MAT_ID,  ' ',  ' ', A.MAT_ID 
        , A.INVOICE_NO, A.LOT_CMF_11, A.LOT_ID, A.TRAN_TIME, A.WORK_DATE, A.LOT_CMF_5, A.NCF, A.NCH, A.LOT_CMF_10,A.CREATE_CODE, A.LOT_CMF_3  
 ORDER BY A.MAT_GRP_1,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', A.MAT_CMF_10, A.MAT_ID,  ' ',  ' ', A.MAT_ID 
        , A.INVOICE_NO, A.LOT_CMF_11, A.LOT_ID, A.TRAN_TIME, A.WORK_DATE, A.LOT_CMF_5, A.NCF, A.NCH, A.LOT_CMF_10  

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT PLAN_WEEK V1    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_DATE = TO_CHAR(SYSDATE,'yyyymmdd')      AND ROWNUM = 1  
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT LANGUAGE_2 FROM RWEBFUNDEF WHERE FUNC_NAME = 'MAT070602'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT OPER AS CODE, OPER_DESC AS DATA 
  FROM MWIPOPRDEF 
 WHERE 1=1 
   AND FACTORY = 'HMVA2'
   AND (OPER LIKE 'V%' OR OPER LIKE 'M%')  
 ORDER BY OPER 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT OPER AS CODE, OPER_DESC AS DATA 
  FROM MWIPOPRDEF 
 WHERE 1=1 
   AND FACTORY = 'HMVA2'
   AND (OPER LIKE 'V%' OR OPER LIKE 'M%')  
 ORDER BY OPER 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT B.MAT_TYPE, A.MAT_ID, B.MAT_DESC, ' ' 
     , SUM(DECODE(OPER, 'M0110', BOH_QTY,0)) BOH_QTY0
     , SUM(DECODE(OPER, 'M0120', BOH_QTY,0)) BOH_QTY1
     , SUM(DECODE(OPER, 'M0160', BOH_QTY,0)) BOH_QTY2
     , SUM(DECODE(OPER, 'M0161', BOH_QTY,0)) BOH_QTY3
     , SUM(DECODE(OPER, 'M0300', BOH_QTY,0)) BOH_QTY4
     , SUM(DECODE(OPER, 'M0315', BOH_QTY,0)) BOH_QTY5
     , SUM(DECODE(OPER, 'M0320', BOH_QTY,0)) BOH_QTY6
     , SUM(DECODE(OPER, 'M0323', BOH_QTY,0)) BOH_QTY7
     , SUM(DECODE(OPER, 'M0325', BOH_QTY,0)) BOH_QTY8
     , SUM(DECODE(OPER, 'M0329', BOH_QTY,0)) BOH_QTY9
     , SUM(DECODE(OPER, 'M0330', BOH_QTY,0)) BOH_QTY10
     , SUM(DECODE(OPER, 'M0336', BOH_QTY,0)) BOH_QTY11
     , SUM(DECODE(OPER, 'M0337', BOH_QTY,0)) BOH_QTY12
     , SUM(DECODE(OPER, 'M0339', BOH_QTY,0)) BOH_QTY13
     , SUM(DECODE(OPER, 'M0340', BOH_QTY,0)) BOH_QTY14
     , SUM(DECODE(OPER, 'M0345', BOH_QTY,0)) BOH_QTY15
     , SUM(DECODE(OPER, 'M0391', BOH_QTY,0)) BOH_QTY16
     , SUM(DECODE(OPER, 'M0400', BOH_QTY,0)) BOH_QTY17
     , SUM(DECODE(OPER, 'M0401', BOH_QTY,0)) BOH_QTY18
     , SUM(DECODE(OPER, 'M0500', BOH_QTY,0)) BOH_QTY19
     , SUM(DECODE(OPER, 'M0550', BOH_QTY,0)) BOH_QTY20
     , SUM(DECODE(OPER, 'M1750', BOH_QTY,0)) BOH_QTY21
     , SUM(DECODE(OPER, 'V0000', BOH_QTY,0)) BOH_QTY22
     , SUM(DECODE(OPER, 'V0013', BOH_QTY,0)) BOH_QTY23
     , SUM(DECODE(OPER, 'V0020', BOH_QTY,0)) BOH_QTY24
     , SUM(DECODE(OPER, 'V0040', BOH_QTY,0)) BOH_QTY25
     , SUM(DECODE(OPER, 'V0055', BOH_QTY,0)) BOH_QTY26
     , SUM(DECODE(OPER, 'V0065', BOH_QTY,0)) BOH_QTY27
     , SUM(DECODE(OPER, 'V0090', BOH_QTY,0)) BOH_QTY28
     , SUM(DECODE(OPER, 'V0100', BOH_QTY,0)) BOH_QTY29
     , SUM(DECODE(OPER, 'V0110', BOH_QTY,0)) BOH_QTY30
     , SUM(DECODE(OPER, 'V0120', BOH_QTY,0)) BOH_QTY31
     , SUM(DECODE(OPER, 'V0130', BOH_QTY,0)) BOH_QTY32
     , SUM(DECODE(OPER, 'V0160', BOH_QTY,0)) BOH_QTY33
     , SUM(DECODE(OPER, 'V0161', BOH_QTY,0)) BOH_QTY34
     , SUM(DECODE(OPER, 'V0165', BOH_QTY,0)) BOH_QTY35
     , SUM(DECODE(OPER, 'V0175', BOH_QTY,0)) BOH_QTY36
     , SUM(DECODE(OPER, 'V0200', BOH_QTY,0)) BOH_QTY37
     , SUM(DECODE(OPER, 'V0300', BOH_QTY,0)) BOH_QTY38
     , SUM(DECODE(OPER, 'V0305', BOH_QTY,0)) BOH_QTY39
     , SUM(DECODE(OPER, 'V0310', BOH_QTY,0)) BOH_QTY40
     , SUM(DECODE(OPER, 'V0311', BOH_QTY,0)) BOH_QTY41
     , SUM(DECODE(OPER, 'V0315', BOH_QTY,0)) BOH_QTY42
     , SUM(DECODE(OPER, 'V0319', BOH_QTY,0)) BOH_QTY43
     , SUM(DECODE(OPER, 'V0320', BOH_QTY,0)) BOH_QTY44
     , SUM(DECODE(OPER, 'V0323', BOH_QTY,0)) BOH_QTY45
     , SUM(DECODE(OPER, 'V0327', BOH_QTY,0)) BOH_QTY46
     , SUM(DECODE(OPER, 'V0330', BOH_QTY,0)) BOH_QTY47
     , SUM(DECODE(OPER, 'V0331', BOH_QTY,0)) BOH_QTY48
     , SUM(DECODE(OPER, 'V0333', BOH_QTY,0)) BOH_QTY49
     , SUM(DECODE(OPER, 'V0334', BOH_QTY,0)) BOH_QTY50
     , SUM(DECODE(OPER, 'V0340', BOH_QTY,0)) BOH_QTY51
     , SUM(DECODE(OPER, 'V0350', BOH_QTY,0)) BOH_QTY52
     , SUM(DECODE(OPER, 'V0360', BOH_QTY,0)) BOH_QTY53
     , SUM(DECODE(OPER, 'V0370', BOH_QTY,0)) BOH_QTY54
     , SUM(DECODE(OPER, 'V0380', BOH_QTY,0)) BOH_QTY55
     , SUM(DECODE(OPER, 'V0390', BOH_QTY,0)) BOH_QTY56
     , SUM(DECODE(OPER, 'V0391', BOH_QTY,0)) BOH_QTY57
     , SUM(DECODE(OPER, 'V0400', BOH_QTY,0)) BOH_QTY58
     , SUM(DECODE(OPER, 'V0530', BOH_QTY,0)) BOH_QTY59
     , SUM(DECODE(OPER, 'V0600', BOH_QTY,0)) BOH_QTY60
     , SUM(DECODE(OPER, 'V0601', BOH_QTY,0)) BOH_QTY61
     , SUM(DECODE(OPER, 'V0660', BOH_QTY,0)) BOH_QTY62
     , SUM(DECODE(OPER, 'V0910', BOH_QTY,0)) BOH_QTY63
     , SUM(DECODE(OPER, 'V0930', BOH_QTY,0)) BOH_QTY64
     , SUM(DECODE(OPER, 'V1000', BOH_QTY,0)) BOH_QTY65
     , SUM(DECODE(OPER, 'V1001', BOH_QTY,0)) BOH_QTY66
     , SUM(DECODE(OPER, 'V1300', BOH_QTY,0)) BOH_QTY67
     , SUM(DECODE(OPER, 'V1301', BOH_QTY,0)) BOH_QTY68
     , SUM(DECODE(OPER, 'V1750', BOH_QTY,0)) BOH_QTY69
     , SUM(DECODE(OPER, 'V1800', BOH_QTY,0)) BOH_QTY70
     , SUM(DECODE(OPER, 'M0110', IN_QTY,0)) IN_QTY0
     , SUM(DECODE(OPER, 'M0120', IN_QTY,0)) IN_QTY1
     , SUM(DECODE(OPER, 'M0160', IN_QTY,0)) IN_QTY2
     , SUM(DECODE(OPER, 'M0161', IN_QTY,0)) IN_QTY3
     , SUM(DECODE(OPER, 'M0300', IN_QTY,0)) IN_QTY4
     , SUM(DECODE(OPER, 'M0315', IN_QTY,0)) IN_QTY5
     , SUM(DECODE(OPER, 'M0320', IN_QTY,0)) IN_QTY6
     , SUM(DECODE(OPER, 'M0323', IN_QTY,0)) IN_QTY7
     , SUM(DECODE(OPER, 'M0325', IN_QTY,0)) IN_QTY8
     , SUM(DECODE(OPER, 'M0329', IN_QTY,0)) IN_QTY9
     , SUM(DECODE(OPER, 'M0330', IN_QTY,0)) IN_QTY10
     , SUM(DECODE(OPER, 'M0336', IN_QTY,0)) IN_QTY11
     , SUM(DECODE(OPER, 'M0337', IN_QTY,0)) IN_QTY12
     , SUM(DECODE(OPER, 'M0339', IN_QTY,0)) IN_QTY13
     , SUM(DECODE(OPER, 'M0340', IN_QTY,0)) IN_QTY14
     , SUM(DECODE(OPER, 'M0345', IN_QTY,0)) IN_QTY15
     , SUM(DECODE(OPER, 'M0391', IN_QTY,0)) IN_QTY16
     , SUM(DECODE(OPER, 'M0400', IN_QTY,0)) IN_QTY17
     , SUM(DECODE(OPER, 'M0401', IN_QTY,0)) IN_QTY18
     , SUM(DECODE(OPER, 'M0500', IN_QTY,0)) IN_QTY19
     , SUM(DECODE(OPER, 'M0550', IN_QTY,0)) IN_QTY20
     , SUM(DECODE(OPER, 'M1750', IN_QTY,0)) IN_QTY21
     , SUM(DECODE(OPER, 'V0000', IN_QTY,0)) IN_QTY22
     , SUM(DECODE(OPER, 'V0013', IN_QTY,0)) IN_QTY23
     , SUM(DECODE(OPER, 'V0020', IN_QTY,0)) IN_QTY24
     , SUM(DECODE(OPER, 'V0040', IN_QTY,0)) IN_QTY25
     , SUM(DECODE(OPER, 'V0055', IN_QTY,0)) IN_QTY26
     , SUM(DECODE(OPER, 'V0065', IN_QTY,0)) IN_QTY27
     , SUM(DECODE(OPER, 'V0090', IN_QTY,0)) IN_QTY28
     , SUM(DECODE(OPER, 'V0100', IN_QTY,0)) IN_QTY29
     , SUM(DECODE(OPER, 'V0110', IN_QTY,0)) IN_QTY30
     , SUM(DECODE(OPER, 'V0120', IN_QTY,0)) IN_QTY31
     , SUM(DECODE(OPER, 'V0130', IN_QTY,0)) IN_QTY32
     , SUM(DECODE(OPER, 'V0160', IN_QTY,0)) IN_QTY33
     , SUM(DECODE(OPER, 'V0161', IN_QTY,0)) IN_QTY34
     , SUM(DECODE(OPER, 'V0165', IN_QTY,0)) IN_QTY35
     , SUM(DECODE(OPER, 'V0175', IN_QTY,0)) IN_QTY36
     , SUM(DECODE(OPER, 'V0200', IN_QTY,0)) IN_QTY37
     , SUM(DECODE(OPER, 'V0300', IN_QTY,0)) IN_QTY38
     , SUM(DECODE(OPER, 'V0305', IN_QTY,0)) IN_QTY39
     , SUM(DECODE(OPER, 'V0310', IN_QTY,0)) IN_QTY40
     , SUM(DECODE(OPER, 'V0311', IN_QTY,0)) IN_QTY41
     , SUM(DECODE(OPER, 'V0315', IN_QTY,0)) IN_QTY42
     , SUM(DECODE(OPER, 'V0319', IN_QTY,0)) IN_QTY43
     , SUM(DECODE(OPER, 'V0320', IN_QTY,0)) IN_QTY44
     , SUM(DECODE(OPER, 'V0323', IN_QTY,0)) IN_QTY45
     , SUM(DECODE(OPER, 'V0327', IN_QTY,0)) IN_QTY46
     , SUM(DECODE(OPER, 'V0330', IN_QTY,0)) IN_QTY47
     , SUM(DECODE(OPER, 'V0331', IN_QTY,0)) IN_QTY48
     , SUM(DECODE(OPER, 'V0333', IN_QTY,0)) IN_QTY49
     , SUM(DECODE(OPER, 'V0334', IN_QTY,0)) IN_QTY50
     , SUM(DECODE(OPER, 'V0340', IN_QTY,0)) IN_QTY51
     , SUM(DECODE(OPER, 'V0350', IN_QTY,0)) IN_QTY52
     , SUM(DECODE(OPER, 'V0360', IN_QTY,0)) IN_QTY53
     , SUM(DECODE(OPER, 'V0370', IN_QTY,0)) IN_QTY54
     , SUM(DECODE(OPER, 'V0380', IN_QTY,0)) IN_QTY55
     , SUM(DECODE(OPER, 'V0390', IN_QTY,0)) IN_QTY56
     , SUM(DECODE(OPER, 'V0391', IN_QTY,0)) IN_QTY57
     , SUM(DECODE(OPER, 'V0400', IN_QTY,0)) IN_QTY58
     , SUM(DECODE(OPER, 'V0530', IN_QTY,0)) IN_QTY59
     , SUM(DECODE(OPER, 'V0600', IN_QTY,0)) IN_QTY60
     , SUM(DECODE(OPER, 'V0601', IN_QTY,0)) IN_QTY61
     , SUM(DECODE(OPER, 'V0660', IN_QTY,0)) IN_QTY62
     , SUM(DECODE(OPER, 'V0910', IN_QTY,0)) IN_QTY63
     , SUM(DECODE(OPER, 'V0930', IN_QTY,0)) IN_QTY64
     , SUM(DECODE(OPER, 'V1000', IN_QTY,0)) IN_QTY65
     , SUM(DECODE(OPER, 'V1001', IN_QTY,0)) IN_QTY66
     , SUM(DECODE(OPER, 'V1300', IN_QTY,0)) IN_QTY67
     , SUM(DECODE(OPER, 'V1301', IN_QTY,0)) IN_QTY68
     , SUM(DECODE(OPER, 'V1750', IN_QTY,0)) IN_QTY69
     , SUM(DECODE(OPER, 'V1800', IN_QTY,0)) IN_QTY70
     , SUM(DECODE(OPER, 'M0110', END_QTY,0)) END_QTY0
     , SUM(DECODE(OPER, 'M0120', END_QTY,0)) END_QTY1
     , SUM(DECODE(OPER, 'M0160', END_QTY,0)) END_QTY2
     , SUM(DECODE(OPER, 'M0161', END_QTY,0)) END_QTY3
     , SUM(DECODE(OPER, 'M0300', END_QTY,0)) END_QTY4
     , SUM(DECODE(OPER, 'M0315', END_QTY,0)) END_QTY5
     , SUM(DECODE(OPER, 'M0320', END_QTY,0)) END_QTY6
     , SUM(DECODE(OPER, 'M0323', END_QTY,0)) END_QTY7
     , SUM(DECODE(OPER, 'M0325', END_QTY,0)) END_QTY8
     , SUM(DECODE(OPER, 'M0329', END_QTY,0)) END_QTY9
     , SUM(DECODE(OPER, 'M0330', END_QTY,0)) END_QTY10
     , SUM(DECODE(OPER, 'M0336', END_QTY,0)) END_QTY11
     , SUM(DECODE(OPER, 'M0337', END_QTY,0)) END_QTY12
     , SUM(DECODE(OPER, 'M0339', END_QTY,0)) END_QTY13
     , SUM(DECODE(OPER, 'M0340', END_QTY,0)) END_QTY14
     , SUM(DECODE(OPER, 'M0345', END_QTY,0)) END_QTY15
     , SUM(DECODE(OPER, 'M0391', END_QTY,0)) END_QTY16
     , SUM(DECODE(OPER, 'M0400', END_QTY,0)) END_QTY17
     , SUM(DECODE(OPER, 'M0401', END_QTY,0)) END_QTY18
     , SUM(DECODE(OPER, 'M0500', END_QTY,0)) END_QTY19
     , SUM(DECODE(OPER, 'M0550', END_QTY,0)) END_QTY20
     , SUM(DECODE(OPER, 'M1750', END_QTY,0)) END_QTY21
     , SUM(DECODE(OPER, 'V0000', END_QTY,0)) END_QTY22
     , SUM(DECODE(OPER, 'V0013', END_QTY,0)) END_QTY23
     , SUM(DECODE(OPER, 'V0020', END_QTY,0)) END_QTY24
     , SUM(DECODE(OPER, 'V0040', END_QTY,0)) END_QTY25
     , SUM(DECODE(OPER, 'V0055', END_QTY,0)) END_QTY26
     , SUM(DECODE(OPER, 'V0065', END_QTY,0)) END_QTY27
     , SUM(DECODE(OPER, 'V0090', END_QTY,0)) END_QTY28
     , SUM(DECODE(OPER, 'V0100', END_QTY,0)) END_QTY29
     , SUM(DECODE(OPER, 'V0110', END_QTY,0)) END_QTY30
     , SUM(DECODE(OPER, 'V0120', END_QTY,0)) END_QTY31
     , SUM(DECODE(OPER, 'V0130', END_QTY,0)) END_QTY32
     , SUM(DECODE(OPER, 'V0160', END_QTY,0)) END_QTY33
     , SUM(DECODE(OPER, 'V0161', END_QTY,0)) END_QTY34
     , SUM(DECODE(OPER, 'V0165', END_QTY,0)) END_QTY35
     , SUM(DECODE(OPER, 'V0175', END_QTY,0)) END_QTY36
     , SUM(DECODE(OPER, 'V0200', END_QTY,0)) END_QTY37
     , SUM(DECODE(OPER, 'V0300', END_QTY,0)) END_QTY38
     , SUM(DECODE(OPER, 'V0305', END_QTY,0)) END_QTY39
     , SUM(DECODE(OPER, 'V0310', END_QTY,0)) END_QTY40
     , SUM(DECODE(OPER, 'V0311', END_QTY,0)) END_QTY41
     , SUM(DECODE(OPER, 'V0315', END_QTY,0)) END_QTY42
     , SUM(DECODE(OPER, 'V0319', END_QTY,0)) END_QTY43
     , SUM(DECODE(OPER, 'V0320', END_QTY,0)) END_QTY44
     , SUM(DECODE(OPER, 'V0323', END_QTY,0)) END_QTY45
     , SUM(DECODE(OPER, 'V0327', END_QTY,0)) END_QTY46
     , SUM(DECODE(OPER, 'V0330', END_QTY,0)) END_QTY47
     , SUM(DECODE(OPER, 'V0331', END_QTY,0)) END_QTY48
     , SUM(DECODE(OPER, 'V0333', END_QTY,0)) END_QTY49
     , SUM(DECODE(OPER, 'V0334', END_QTY,0)) END_QTY50
     , SUM(DECODE(OPER, 'V0340', END_QTY,0)) END_QTY51
     , SUM(DECODE(OPER, 'V0350', END_QTY,0)) END_QTY52
     , SUM(DECODE(OPER, 'V0360', END_QTY,0)) END_QTY53
     , SUM(DECODE(OPER, 'V0370', END_QTY,0)) END_QTY54
     , SUM(DECODE(OPER, 'V0380', END_QTY,0)) END_QTY55
     , SUM(DECODE(OPER, 'V0390', END_QTY,0)) END_QTY56
     , SUM(DECODE(OPER, 'V0391', END_QTY,0)) END_QTY57
     , SUM(DECODE(OPER, 'V0400', END_QTY,0)) END_QTY58
     , SUM(DECODE(OPER, 'V0530', END_QTY,0)) END_QTY59
     , SUM(DECODE(OPER, 'V0600', END_QTY,0)) END_QTY60
     , SUM(DECODE(OPER, 'V0601', END_QTY,0)) END_QTY61
     , SUM(DECODE(OPER, 'V0660', END_QTY,0)) END_QTY62
     , SUM(DECODE(OPER, 'V0910', END_QTY,0)) END_QTY63
     , SUM(DECODE(OPER, 'V0930', END_QTY,0)) END_QTY64
     , SUM(DECODE(OPER, 'V1000', END_QTY,0)) END_QTY65
     , SUM(DECODE(OPER, 'V1001', END_QTY,0)) END_QTY66
     , SUM(DECODE(OPER, 'V1300', END_QTY,0)) END_QTY67
     , SUM(DECODE(OPER, 'V1301', END_QTY,0)) END_QTY68
     , SUM(DECODE(OPER, 'V1750', END_QTY,0)) END_QTY69
     , SUM(DECODE(OPER, 'V1800', END_QTY,0)) END_QTY70
     , SUM(DECODE(OPER, 'M0110', EOH_QTY,0)) EOH_QTY0
     , SUM(DECODE(OPER, 'M0120', EOH_QTY,0)) EOH_QTY1
     , SUM(DECODE(OPER, 'M0160', EOH_QTY,0)) EOH_QTY2
     , SUM(DECODE(OPER, 'M0161', EOH_QTY,0)) EOH_QTY3
     , SUM(DECODE(OPER, 'M0300', EOH_QTY,0)) EOH_QTY4
     , SUM(DECODE(OPER, 'M0315', EOH_QTY,0)) EOH_QTY5
     , SUM(DECODE(OPER, 'M0320', EOH_QTY,0)) EOH_QTY6
     , SUM(DECODE(OPER, 'M0323', EOH_QTY,0)) EOH_QTY7
     , SUM(DECODE(OPER, 'M0325', EOH_QTY,0)) EOH_QTY8
     , SUM(DECODE(OPER, 'M0329', EOH_QTY,0)) EOH_QTY9
     , SUM(DECODE(OPER, 'M0330', EOH_QTY,0)) EOH_QTY10
     , SUM(DECODE(OPER, 'M0336', EOH_QTY,0)) EOH_QTY11
     , SUM(DECODE(OPER, 'M0337', EOH_QTY,0)) EOH_QTY12
     , SUM(DECODE(OPER, 'M0339', EOH_QTY,0)) EOH_QTY13
     , SUM(DECODE(OPER, 'M0340', EOH_QTY,0)) EOH_QTY14
     , SUM(DECODE(OPER, 'M0345', EOH_QTY,0)) EOH_QTY15
     , SUM(DECODE(OPER, 'M0391', EOH_QTY,0)) EOH_QTY16
     , SUM(DECODE(OPER, 'M0400', EOH_QTY,0)) EOH_QTY17
     , SUM(DECODE(OPER, 'M0401', EOH_QTY,0)) EOH_QTY18
     , SUM(DECODE(OPER, 'M0500', EOH_QTY,0)) EOH_QTY19
     , SUM(DECODE(OPER, 'M0550', EOH_QTY,0)) EOH_QTY20
     , SUM(DECODE(OPER, 'M1750', EOH_QTY,0)) EOH_QTY21
     , SUM(DECODE(OPER, 'V0000', EOH_QTY,0)) EOH_QTY22
     , SUM(DECODE(OPER, 'V0013', EOH_QTY,0)) EOH_QTY23
     , SUM(DECODE(OPER, 'V0020', EOH_QTY,0)) EOH_QTY24
     , SUM(DECODE(OPER, 'V0040', EOH_QTY,0)) EOH_QTY25
     , SUM(DECODE(OPER, 'V0055', EOH_QTY,0)) EOH_QTY26
     , SUM(DECODE(OPER, 'V0065', EOH_QTY,0)) EOH_QTY27
     , SUM(DECODE(OPER, 'V0090', EOH_QTY,0)) EOH_QTY28
     , SUM(DECODE(OPER, 'V0100', EOH_QTY,0)) EOH_QTY29
     , SUM(DECODE(OPER, 'V0110', EOH_QTY,0)) EOH_QTY30
     , SUM(DECODE(OPER, 'V0120', EOH_QTY,0)) EOH_QTY31
     , SUM(DECODE(OPER, 'V0130', EOH_QTY,0)) EOH_QTY32
     , SUM(DECODE(OPER, 'V0160', EOH_QTY,0)) EOH_QTY33
     , SUM(DECODE(OPER, 'V0161', EOH_QTY,0)) EOH_QTY34
     , SUM(DECODE(OPER, 'V0165', EOH_QTY,0)) EOH_QTY35
     , SUM(DECODE(OPER, 'V0175', EOH_QTY,0)) EOH_QTY36
     , SUM(DECODE(OPER, 'V0200', EOH_QTY,0)) EOH_QTY37
     , SUM(DECODE(OPER, 'V0300', EOH_QTY,0)) EOH_QTY38
     , SUM(DECODE(OPER, 'V0305', EOH_QTY,0)) EOH_QTY39
     , SUM(DECODE(OPER, 'V0310', EOH_QTY,0)) EOH_QTY40
     , SUM(DECODE(OPER, 'V0311', EOH_QTY,0)) EOH_QTY41
     , SUM(DECODE(OPER, 'V0315', EOH_QTY,0)) EOH_QTY42
     , SUM(DECODE(OPER, 'V0319', EOH_QTY,0)) EOH_QTY43
     , SUM(DECODE(OPER, 'V0320', EOH_QTY,0)) EOH_QTY44
     , SUM(DECODE(OPER, 'V0323', EOH_QTY,0)) EOH_QTY45
     , SUM(DECODE(OPER, 'V0327', EOH_QTY,0)) EOH_QTY46
     , SUM(DECODE(OPER, 'V0330', EOH_QTY,0)) EOH_QTY47
     , SUM(DECODE(OPER, 'V0331', EOH_QTY,0)) EOH_QTY48
     , SUM(DECODE(OPER, 'V0333', EOH_QTY,0)) EOH_QTY49
     , SUM(DECODE(OPER, 'V0334', EOH_QTY,0)) EOH_QTY50
     , SUM(DECODE(OPER, 'V0340', EOH_QTY,0)) EOH_QTY51
     , SUM(DECODE(OPER, 'V0350', EOH_QTY,0)) EOH_QTY52
     , SUM(DECODE(OPER, 'V0360', EOH_QTY,0)) EOH_QTY53
     , SUM(DECODE(OPER, 'V0370', EOH_QTY,0)) EOH_QTY54
     , SUM(DECODE(OPER, 'V0380', EOH_QTY,0)) EOH_QTY55
     , SUM(DECODE(OPER, 'V0390', EOH_QTY,0)) EOH_QTY56
     , SUM(DECODE(OPER, 'V0391', EOH_QTY,0)) EOH_QTY57
     , SUM(DECODE(OPER, 'V0400', EOH_QTY,0)) EOH_QTY58
     , SUM(DECODE(OPER, 'V0530', EOH_QTY,0)) EOH_QTY59
     , SUM(DECODE(OPER, 'V0600', EOH_QTY,0)) EOH_QTY60
     , SUM(DECODE(OPER, 'V0601', EOH_QTY,0)) EOH_QTY61
     , SUM(DECODE(OPER, 'V0660', EOH_QTY,0)) EOH_QTY62
     , SUM(DECODE(OPER, 'V0910', EOH_QTY,0)) EOH_QTY63
     , SUM(DECODE(OPER, 'V0930', EOH_QTY,0)) EOH_QTY64
     , SUM(DECODE(OPER, 'V1000', EOH_QTY,0)) EOH_QTY65
     , SUM(DECODE(OPER, 'V1001', EOH_QTY,0)) EOH_QTY66
     , SUM(DECODE(OPER, 'V1300', EOH_QTY,0)) EOH_QTY67
     , SUM(DECODE(OPER, 'V1301', EOH_QTY,0)) EOH_QTY68
     , SUM(DECODE(OPER, 'V1750', EOH_QTY,0)) EOH_QTY69
     , SUM(DECODE(OPER, 'V1800', EOH_QTY,0)) EOH_QTY70
     , SUM(DECODE(OPER, 'M0110', LOSS_QTY,0)) LOSS_QTY0
     , SUM(DECODE(OPER, 'M0120', LOSS_QTY,0)) LOSS_QTY1
     , SUM(DECODE(OPER, 'M0160', LOSS_QTY,0)) LOSS_QTY2
     , SUM(DECODE(OPER, 'M0161', LOSS_QTY,0)) LOSS_QTY3
     , SUM(DECODE(OPER, 'M0300', LOSS_QTY,0)) LOSS_QTY4
     , SUM(DECODE(OPER, 'M0315', LOSS_QTY,0)) LOSS_QTY5
     , SUM(DECODE(OPER, 'M0320', LOSS_QTY,0)) LOSS_QTY6
     , SUM(DECODE(OPER, 'M0323', LOSS_QTY,0)) LOSS_QTY7
     , SUM(DECODE(OPER, 'M0325', LOSS_QTY,0)) LOSS_QTY8
     , SUM(DECODE(OPER, 'M0329', LOSS_QTY,0)) LOSS_QTY9
     , SUM(DECODE(OPER, 'M0330', LOSS_QTY,0)) LOSS_QTY10
     , SUM(DECODE(OPER, 'M0336', LOSS_QTY,0)) LOSS_QTY11
     , SUM(DECODE(OPER, 'M0337', LOSS_QTY,0)) LOSS_QTY12
     , SUM(DECODE(OPER, 'M0339', LOSS_QTY,0)) LOSS_QTY13
     , SUM(DECODE(OPER, 'M0340', LOSS_QTY,0)) LOSS_QTY14
     , SUM(DECODE(OPER, 'M0345', LOSS_QTY,0)) LOSS_QTY15
     , SUM(DECODE(OPER, 'M0391', LOSS_QTY,0)) LOSS_QTY16
     , SUM(DECODE(OPER, 'M0400', LOSS_QTY,0)) LOSS_QTY17
     , SUM(DECODE(OPER, 'M0401', LOSS_QTY,0)) LOSS_QTY18
     , SUM(DECODE(OPER, 'M0500', LOSS_QTY,0)) LOSS_QTY19
     , SUM(DECODE(OPER, 'M0550', LOSS_QTY,0)) LOSS_QTY20
     , SUM(DECODE(OPER, 'M1750', LOSS_QTY,0)) LOSS_QTY21
     , SUM(DECODE(OPER, 'V0000', LOSS_QTY,0)) LOSS_QTY22
     , SUM(DECODE(OPER, 'V0013', LOSS_QTY,0)) LOSS_QTY23
     , SUM(DECODE(OPER, 'V0020', LOSS_QTY,0)) LOSS_QTY24
     , SUM(DECODE(OPER, 'V0040', LOSS_QTY,0)) LOSS_QTY25
     , SUM(DECODE(OPER, 'V0055', LOSS_QTY,0)) LOSS_QTY26
     , SUM(DECODE(OPER, 'V0065', LOSS_QTY,0)) LOSS_QTY27
     , SUM(DECODE(OPER, 'V0090', LOSS_QTY,0)) LOSS_QTY28
     , SUM(DECODE(OPER, 'V0100', LOSS_QTY,0)) LOSS_QTY29
     , SUM(DECODE(OPER, 'V0110', LOSS_QTY,0)) LOSS_QTY30
     , SUM(DECODE(OPER, 'V0120', LOSS_QTY,0)) LOSS_QTY31
     , SUM(DECODE(OPER, 'V0130', LOSS_QTY,0)) LOSS_QTY32
     , SUM(DECODE(OPER, 'V0160', LOSS_QTY,0)) LOSS_QTY33
     , SUM(DECODE(OPER, 'V0161', LOSS_QTY,0)) LOSS_QTY34
     , SUM(DECODE(OPER, 'V0165', LOSS_QTY,0)) LOSS_QTY35
     , SUM(DECODE(OPER, 'V0175', LOSS_QTY,0)) LOSS_QTY36
     , SUM(DECODE(OPER, 'V0200', LOSS_QTY,0)) LOSS_QTY37
     , SUM(DECODE(OPER, 'V0300', LOSS_QTY,0)) LOSS_QTY38
     , SUM(DECODE(OPER, 'V0305', LOSS_QTY,0)) LOSS_QTY39
     , SUM(DECODE(OPER, 'V0310', LOSS_QTY,0)) LOSS_QTY40
     , SUM(DECODE(OPER, 'V0311', LOSS_QTY,0)) LOSS_QTY41
     , SUM(DECODE(OPER, 'V0315', LOSS_QTY,0)) LOSS_QTY42
     , SUM(DECODE(OPER, 'V0319', LOSS_QTY,0)) LOSS_QTY43
     , SUM(DECODE(OPER, 'V0320', LOSS_QTY,0)) LOSS_QTY44
     , SUM(DECODE(OPER, 'V0323', LOSS_QTY,0)) LOSS_QTY45
     , SUM(DECODE(OPER, 'V0327', LOSS_QTY,0)) LOSS_QTY46
     , SUM(DECODE(OPER, 'V0330', LOSS_QTY,0)) LOSS_QTY47
     , SUM(DECODE(OPER, 'V0331', LOSS_QTY,0)) LOSS_QTY48
     , SUM(DECODE(OPER, 'V0333', LOSS_QTY,0)) LOSS_QTY49
     , SUM(DECODE(OPER, 'V0334', LOSS_QTY,0)) LOSS_QTY50
     , SUM(DECODE(OPER, 'V0340', LOSS_QTY,0)) LOSS_QTY51
     , SUM(DECODE(OPER, 'V0350', LOSS_QTY,0)) LOSS_QTY52
     , SUM(DECODE(OPER, 'V0360', LOSS_QTY,0)) LOSS_QTY53
     , SUM(DECODE(OPER, 'V0370', LOSS_QTY,0)) LOSS_QTY54
     , SUM(DECODE(OPER, 'V0380', LOSS_QTY,0)) LOSS_QTY55
     , SUM(DECODE(OPER, 'V0390', LOSS_QTY,0)) LOSS_QTY56
     , SUM(DECODE(OPER, 'V0391', LOSS_QTY,0)) LOSS_QTY57
     , SUM(DECODE(OPER, 'V0400', LOSS_QTY,0)) LOSS_QTY58
     , SUM(DECODE(OPER, 'V0530', LOSS_QTY,0)) LOSS_QTY59
     , SUM(DECODE(OPER, 'V0600', LOSS_QTY,0)) LOSS_QTY60
     , SUM(DECODE(OPER, 'V0601', LOSS_QTY,0)) LOSS_QTY61
     , SUM(DECODE(OPER, 'V0660', LOSS_QTY,0)) LOSS_QTY62
     , SUM(DECODE(OPER, 'V0910', LOSS_QTY,0)) LOSS_QTY63
     , SUM(DECODE(OPER, 'V0930', LOSS_QTY,0)) LOSS_QTY64
     , SUM(DECODE(OPER, 'V1000', LOSS_QTY,0)) LOSS_QTY65
     , SUM(DECODE(OPER, 'V1001', LOSS_QTY,0)) LOSS_QTY66
     , SUM(DECODE(OPER, 'V1300', LOSS_QTY,0)) LOSS_QTY67
     , SUM(DECODE(OPER, 'V1301', LOSS_QTY,0)) LOSS_QTY68
     , SUM(DECODE(OPER, 'V1750', LOSS_QTY,0)) LOSS_QTY69
     , SUM(DECODE(OPER, 'V1800', LOSS_QTY,0)) LOSS_QTY70
  FROM ( 
        SELECT MAT_ID, OPER 
             , SUM(S1_OPER_IN_QTY_1 + S2_OPER_IN_QTY_1 + S3_OPER_IN_QTY_1) AS IN_QTY  
             , SUM(S1_END_QTY_1 + S2_END_QTY_1 + S3_END_QTY_1) AS END_QTY 
             , 0 AS BOH_QTY, 0 AS EOH_QTY, 0 AS LOSS_QTY
          FROM RSUMWIPMOV 
         WHERE 1=1 
           AND FACTORY = 'HMVA2' 
           AND WORK_DATE BETWEEN '20200504' AND '20200505' 
           AND (OPER LIKE 'V%' OR OPER LIKE 'M%') 
         GROUP BY MAT_ID, OPER 
         HAVING SUM(S1_OPER_IN_QTY_1 + S2_OPER_IN_QTY_1 + S3_OPER_IN_QTY_1) + SUM(S1_END_QTY_1 + S2_END_QTY_1 + S3_END_QTY_1) > 0 
         UNION ALL 
        SELECT MAT_ID, OPER 
             , 0 AS IN_QTY, 0 AS END_QTY, SUM(EOH_QTY_1) AS BOH_QTY, 0 AS EOH_QTY, 0 AS LOSS_QTY 
          FROM RSUMWIPEOH 
         WHERE 1=1 
           AND FACTORY = 'HMVA2' 
           AND WORK_DATE = '20200503' 
           AND LOT_TYPE <> 'W' 
           AND SHIFT = '3' 
           AND (OPER LIKE 'V%' OR OPER LIKE 'M%') 
         GROUP BY MAT_ID, OPER 
         UNION ALL 
        SELECT MAT_ID, OPER 
             , 0 AS IN_QTY, 0 AS END_QTY, 0 AS BOH_QTY, SUM(EOH_QTY_1) AS EOH_QTY, 0 AS LOSS_QTY 
          FROM RSUMWIPEOH 
         WHERE 1=1 
           AND FACTORY = 'HMVA2' 
           AND WORK_DATE = '20200505' 
           AND LOT_TYPE <> 'W' 
           AND SHIFT = '3' 
           AND (OPER LIKE 'V%' OR OPER LIKE 'M%') 
         GROUP BY MAT_ID, OPER 
         UNION ALL 
        SELECT MAT_ID, OPER 
             , 0 AS IN_QTY, 0 AS END_QTY, 0 AS BOH_QTY, 0 AS EOH_QTY, SUM(LOSS_QTY) AS LOSS
          FROM RWIPLOTLSM 
         WHERE 1=1 
           AND FACTORY = 'HMVA2' 
           AND TRAN_TIME BETWEEN '20200503220000' AND '20200505215959' 
           AND (OPER LIKE 'V%' OR OPER LIKE 'M%') 
         GROUP BY MAT_ID, OPER 
       ) A 
     , MWIPMATDEF B 
 WHERE 1=1 
   AND A.MAT_ID = B.MAT_ID 
   AND A.MAT_ID LIKE '%'  
   AND A.OPER LIKE '%'
   AND B.FACTORY = 'HMVA2'
   AND B.DELETE_FLAG = ' ' 
 GROUP BY B.MAT_TYPE, A.MAT_ID, B.MAT_DESC 
 ORDER BY B.MAT_TYPE, A.MAT_ID, B.MAT_DESC 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
 SELECT PLAN_WEEK V1    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_DATE = TO_CHAR(SYSDATE,'yyyymmdd')      AND ROWNUM = 1  
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT LANGUAGE_2 FROM RWEBFUNDEF WHERE FUNC_NAME = 'PRD010405'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT FACTORY Code, FAC_DESC Data
  FROM MWIPFACDEF
 WHERE FAC_GRP_5 = 'Y' 
 ORDER BY FAC_GRP_4 ASC
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT FACTORY Code, FAC_DESC Data
  FROM MWIPFACDEF
 WHERE FAC_GRP_5 = 'Y' 
 ORDER BY FAC_GRP_4 ASC
-------------------------------------------------------------
SELECT OPER, OPER_DESC  FROM MWIPOPRDEF
  WHERE FACTORY = 'HMVA2'  AND OPER NOT IN ('00001', '00002') AND OPER NOT LIKE 'V%' ORDER BY DECODE(OPER_CMF_2, ' ', 99999, TO_NUMBER(OPER_CMF_2)), OPER
-------------------------------------------------------------
SELECT OPER, OPER_DESC  FROM MWIPOPRDEF
  WHERE FACTORY = 'HMVA2'  AND OPER NOT IN ('00001', '00002') AND OPER NOT LIKE 'V%' ORDER BY DECODE(OPER_CMF_2, ' ', 99999, TO_NUMBER(OPER_CMF_2)), OPER
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', SUMMERY.OPER,  ' ',  ' '
     , SUMMERY.MAT_ID 
     , SUMMERY.LOT_ID 
     , SUMMERY.LOT_CMF_5 
     , SUMMERY.END_RES_ID 
     , SUMMERY.QTY_1 + SUMMERY.LOSS_QTY AS OPER_IN_QTY_1 
     , SUMMERY.QTY_1 
     , ROUND(SUMMERY.QTY_1/(SUMMERY.QTY_1 + SUMMERY.LOSS_QTY)*100,3) AS YIELD 
     , TO_CHAR(TO_DATE(SUMMERY.OPER_IN_TIME,'yyyymmddhh24miss')) AS OPER_IN_TIME 
     , TO_CHAR(TO_DATE(SUMMERY.TRAN_TIME,'yyyymmddhh24miss')) AS TRAN_TIME 
     , DECODE(SUMMERY.TRAN_CMF_18, ' ', ' ', SUMMERY.IN_USER_DESC || '(' || SUMMERY.TRAN_CMF_18 || ')') AS IN_USER_ID 
     , SUMMERY.END_USER_DESC || '(' || SUMMERY.TRAN_USER_ID || ')' AS END_USER_ID 
     , SUMMERY.LOT_CMF_10 
     , SUMMERY.TRAN_CMF_2 AS HD 
     , SUMMERY.TRAN_CMF_3 AS PGM 
     , SUMMERY.CRR_ID 
     , '' EPOXY 
     , '' LF 
     , '' GW 
     , '' MATAL_CARD 
     , '' EMC_LOT 
     , '' EMC_CAN 
     , '' EMC_TYPE 
     , SUMMERY.TRAN_COMMENT 
     , SUMMERY.QTY_2 
     , SUMMERY.TRAN_CMF_17 AS CV 
     , SUMMERY.LOT_CMF_7 AS ASSY_SITE 
     , SUMMERY.LOT_CMF_11 AS SHIP_SITE 
     , SUMMERY.TRAN_CMF_7 AS REWORK_BALL 
     , SUMMERY.TRAN_CMF_8 AS REWORK_CLEAN 
     , SUMMERY.TRAN_CMF_9 AS REWORK_PRINT 
     , LOT_CMF_3 
  FROM (  
        SELECT MAT_ID 
             , LOT_ID 
             , LOT_CMF_5 
             , LOT_CMF_10 
             , OLD_OPER AS OPER 
             , END_RES_ID 
             , TRAN_CMF_2 
             , TRAN_CMF_3 
             , NVL(( 
                    SELECT SUM(LOSS_QTY) AS LOSS_QTY 
                      FROM RWIPLOTLSM 
                     WHERE LOT_ID = A.LOT_ID 
                       AND OPER = A.OLD_OPER 
                     GROUP BY LOT_ID 
                  ), 0) AS LOSS_QTY 
             , CASE WHEN TRAN_CODE = 'SHIP' AND FACTORY = OLD_FACTORY THEN OLD_QTY_1 - QTY_1 
                    ELSE QTY_1 
               END QTY_1 
             , DECODE(START_TIME, ' ', OLD_OPER_IN_TIME, START_TIME) AS OPER_IN_TIME 
             , TRAN_TIME 
             , TRAN_USER_ID 
             , CRR_ID 
             , TRAN_COMMENT 
             , ( 
                SELECT USER_DESC FROM RWEBUSRDEF WHERE FACTORY = 'SYSTEM' AND USER_ID = A.TRAN_USER_ID 
               ) AS END_USER_DESC 
             , QTY_2 
             , CASE WHEN A.OLD_OPER LIKE 'A040%' AND A.RESV_FLAG_5 = 'Y' AND (SELECT CASE WHEN (TRAN_CMF_4 = 'RFID TAG WRITE : SUCCESS') 
                                                                                            OR (RESV_FLAG_5 = 'Y' AND TRAN_CMF_19 = 'RFID' AND TRAN_USER_ID = 'EIS') THEN 'RFID' 
                                                                                          ELSE ' ' 
                                                                                     END  
                                                                                FROM RWIPLOTHIS 
                                                                               WHERE FACTORY = A.OLD_FACTORY 
                                                                                 AND LOT_TYPE = A.OLD_LOT_TYPE 
                                                                                 AND LOT_ID = A.LOT_ID 
                                                                                 AND OPER = A.OLD_OPER 
                                                                                 AND TRAN_TIME < A.TRAN_TIME 
                                                                                 AND FACTORY = 'HMVA2' 
                                                                                 AND LOT_TYPE = 'W' 
                                                                                 AND RESV_FLAG_5 = 'Y' 
                                                                                 AND TRAN_CODE = 'START' 
                                                                                 AND HIST_DEL_FLAG = ' ') = 'RFID' THEN TRAN_CMF_18 || '[RFID]' 
                     WHEN A.OLD_OPER NOT LIKE 'A040%' AND A.RESV_FLAG_5 = 'Y' AND A.TRAN_CMF_19 = 'RFID' AND A.TRAN_USER_ID = 'EIS' THEN TRAN_CMF_18 || '[' || TRIM(TRAN_CMF_19) || ']' 
                     ELSE TRAN_CMF_18 
               END AS TRAN_CMF_18 
             , ( 
                SELECT USER_DESC FROM RWEBUSRDEF WHERE FACTORY = 'SYSTEM' AND USER_ID = A.TRAN_CMF_18 
               ) AS IN_USER_DESC 
             , LOT_CMF_7 
             , TRAN_CMF_17 
             , LOT_CMF_11 
             , TRAN_CMF_7 
             , TRAN_CMF_8 
             , TRAN_CMF_9 
             , LOT_CMF_3 
          FROM RWIPLOTHIS A 
         WHERE 1=1 
           AND TRAN_TIME BETWEEN '20200504220000' AND '20200505215959' 
           AND OLD_FACTORY = 'HMVA2' 
           AND TRAN_CODE IN ('END','SHIP') 
           AND LOT_TYPE = 'W' 
           AND HIST_DEL_FLAG = ' ' 
           AND OLD_OPER IN ('M0340')
           AND END_RES_ID LIKE '%'
           AND LOT_CMF_5 LIKE '%'
       ) SUMMERY 
     , MWIPMATDEF MAT 
 WHERE 1=1 
   AND SUMMERY.MAT_ID = MAT.MAT_ID 
   AND MAT.FACTORY = 'HMVA2' 
   AND MAT.MAT_TYPE = 'FG' 
 ORDER BY  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', SUMMERY.OPER,  ' ',  ' ',SUMMERY.END_RES_ID,LOT_ID,MAT_ID 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', SUMMERY.OPER,  ' ',  ' '
     , SUMMERY.MAT_ID 
     , SUMMERY.LOT_ID 
     , SUMMERY.LOT_CMF_5 
     , SUMMERY.END_RES_ID 
     , SUMMERY.QTY_1 + SUMMERY.LOSS_QTY AS OPER_IN_QTY_1 
     , SUMMERY.QTY_1 
     , ROUND(SUMMERY.QTY_1/(SUMMERY.QTY_1 + SUMMERY.LOSS_QTY)*100,3) AS YIELD 
     , TO_CHAR(TO_DATE(SUMMERY.OPER_IN_TIME,'yyyymmddhh24miss')) AS OPER_IN_TIME 
     , TO_CHAR(TO_DATE(SUMMERY.TRAN_TIME,'yyyymmddhh24miss')) AS TRAN_TIME 
     , DECODE(SUMMERY.TRAN_CMF_18, ' ', ' ', SUMMERY.IN_USER_DESC || '(' || SUMMERY.TRAN_CMF_18 || ')') AS IN_USER_ID 
     , SUMMERY.END_USER_DESC || '(' || SUMMERY.TRAN_USER_ID || ')' AS END_USER_ID 
     , SUMMERY.LOT_CMF_10 
     , SUMMERY.TRAN_CMF_2 AS HD 
     , SUMMERY.TRAN_CMF_3 AS PGM 
     , SUMMERY.CRR_ID 
     , '' EPOXY 
     , '' LF 
     , '' GW 
     , '' MATAL_CARD 
     , '' EMC_LOT 
     , '' EMC_CAN 
     , '' EMC_TYPE 
     , SUMMERY.TRAN_COMMENT 
     , SUMMERY.QTY_2 
     , SUMMERY.TRAN_CMF_17 AS CV 
     , SUMMERY.LOT_CMF_7 AS ASSY_SITE 
     , SUMMERY.LOT_CMF_11 AS SHIP_SITE 
     , SUMMERY.TRAN_CMF_7 AS REWORK_BALL 
     , SUMMERY.TRAN_CMF_8 AS REWORK_CLEAN 
     , SUMMERY.TRAN_CMF_9 AS REWORK_PRINT 
     , LOT_CMF_3 
  FROM (  
        SELECT MAT_ID 
             , LOT_ID 
             , LOT_CMF_5 
             , LOT_CMF_10 
             , OLD_OPER AS OPER 
             , END_RES_ID 
             , TRAN_CMF_2 
             , TRAN_CMF_3 
             , NVL(( 
                    SELECT SUM(LOSS_QTY) AS LOSS_QTY 
                      FROM RWIPLOTLSM 
                     WHERE LOT_ID = A.LOT_ID 
                       AND OPER = A.OLD_OPER 
                     GROUP BY LOT_ID 
                  ), 0) AS LOSS_QTY 
             , CASE WHEN TRAN_CODE = 'SHIP' AND FACTORY = OLD_FACTORY THEN OLD_QTY_1 - QTY_1 
                    ELSE QTY_1 
               END QTY_1 
             , DECODE(START_TIME, ' ', OLD_OPER_IN_TIME, START_TIME) AS OPER_IN_TIME 
             , TRAN_TIME 
             , TRAN_USER_ID 
             , CRR_ID 
             , TRAN_COMMENT 
             , ( 
                SELECT USER_DESC FROM RWEBUSRDEF WHERE FACTORY = 'SYSTEM' AND USER_ID = A.TRAN_USER_ID 
               ) AS END_USER_DESC 
             , QTY_2 
             , CASE WHEN A.OLD_OPER LIKE 'A040%' AND A.RESV_FLAG_5 = 'Y' AND (SELECT CASE WHEN (TRAN_CMF_4 = 'RFID TAG WRITE : SUCCESS') 
                                                                                            OR (RESV_FLAG_5 = 'Y' AND TRAN_CMF_19 = 'RFID' AND TRAN_USER_ID = 'EIS') THEN 'RFID' 
                                                                                          ELSE ' ' 
                                                                                     END  
                                                                                FROM RWIPLOTHIS 
                                                                               WHERE FACTORY = A.OLD_FACTORY 
                                                                                 AND LOT_TYPE = A.OLD_LOT_TYPE 
                                                                                 AND LOT_ID = A.LOT_ID 
                                                                                 AND OPER = A.OLD_OPER 
                                                                                 AND TRAN_TIME < A.TRAN_TIME 
                                                                                 AND FACTORY = 'HMVA2' 
                                                                                 AND LOT_TYPE = 'W' 
                                                                                 AND RESV_FLAG_5 = 'Y' 
                                                                                 AND TRAN_CODE = 'START' 
                                                                                 AND HIST_DEL_FLAG = ' ') = 'RFID' THEN TRAN_CMF_18 || '[RFID]' 
                     WHEN A.OLD_OPER NOT LIKE 'A040%' AND A.RESV_FLAG_5 = 'Y' AND A.TRAN_CMF_19 = 'RFID' AND A.TRAN_USER_ID = 'EIS' THEN TRAN_CMF_18 || '[' || TRIM(TRAN_CMF_19) || ']' 
                     ELSE TRAN_CMF_18 
               END AS TRAN_CMF_18 
             , ( 
                SELECT USER_DESC FROM RWEBUSRDEF WHERE FACTORY = 'SYSTEM' AND USER_ID = A.TRAN_CMF_18 
               ) AS IN_USER_DESC 
             , LOT_CMF_7 
             , TRAN_CMF_17 
             , LOT_CMF_11 
             , TRAN_CMF_7 
             , TRAN_CMF_8 
             , TRAN_CMF_9 
             , LOT_CMF_3 
          FROM RWIPLOTHIS A 
         WHERE 1=1 
           AND TRAN_TIME BETWEEN '20200504220000' AND '20200505215959' 
           AND OLD_FACTORY = 'HMVA2' 
           AND TRAN_CODE IN ('END','SHIP') 
           AND LOT_TYPE = 'P' 
           AND HIST_DEL_FLAG = ' ' 
           AND OLD_OPER IN ('M0340')
           AND END_RES_ID LIKE '%'
           AND LOT_CMF_5 LIKE '%'
       ) SUMMERY 
     , MWIPMATDEF MAT 
 WHERE 1=1 
   AND SUMMERY.MAT_ID = MAT.MAT_ID 
   AND MAT.FACTORY = 'HMVA2' 
   AND MAT.MAT_TYPE = 'PB' 
 ORDER BY  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', SUMMERY.OPER,  ' ',  ' ',SUMMERY.END_RES_ID,LOT_ID,MAT_ID 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', SUMMERY.OPER,  ' ',  ' '
     , SUMMERY.MAT_ID 
     , SUMMERY.LOT_ID 
     , SUMMERY.LOT_CMF_5 
     , SUMMERY.END_RES_ID 
     , SUMMERY.QTY_1 + SUMMERY.LOSS_QTY AS OPER_IN_QTY_1 
     , SUMMERY.QTY_1 
     , ROUND(SUMMERY.QTY_1/(SUMMERY.QTY_1 + SUMMERY.LOSS_QTY)*100,3) AS YIELD 
     , TO_CHAR(TO_DATE(SUMMERY.OPER_IN_TIME,'yyyymmddhh24miss')) AS OPER_IN_TIME 
     , TO_CHAR(TO_DATE(SUMMERY.TRAN_TIME,'yyyymmddhh24miss')) AS TRAN_TIME 
     , DECODE(SUMMERY.TRAN_CMF_18, ' ', ' ', SUMMERY.IN_USER_DESC || '(' || SUMMERY.TRAN_CMF_18 || ')') AS IN_USER_ID 
     , SUMMERY.END_USER_DESC || '(' || SUMMERY.TRAN_USER_ID || ')' AS END_USER_ID 
     , SUMMERY.LOT_CMF_10 
     , SUMMERY.TRAN_CMF_2 AS HD 
     , SUMMERY.TRAN_CMF_3 AS PGM 
     , SUMMERY.CRR_ID 
     , '' EPOXY 
     , '' LF 
     , '' GW 
     , '' MATAL_CARD 
     , '' EMC_LOT 
     , '' EMC_CAN 
     , '' EMC_TYPE 
     , SUMMERY.TRAN_COMMENT 
     , SUMMERY.QTY_2 
     , SUMMERY.TRAN_CMF_17 AS CV 
     , SUMMERY.LOT_CMF_7 AS ASSY_SITE 
     , SUMMERY.LOT_CMF_11 AS SHIP_SITE 
     , SUMMERY.TRAN_CMF_7 AS REWORK_BALL 
     , SUMMERY.TRAN_CMF_8 AS REWORK_CLEAN 
     , SUMMERY.TRAN_CMF_9 AS REWORK_PRINT 
     , LOT_CMF_3 
  FROM (  
        SELECT MAT_ID 
             , LOT_ID 
             , LOT_CMF_5 
             , LOT_CMF_10 
             , OLD_OPER AS OPER 
             , END_RES_ID 
             , TRAN_CMF_2 
             , TRAN_CMF_3 
             , NVL(( 
                    SELECT SUM(LOSS_QTY) AS LOSS_QTY 
                      FROM RWIPLOTLSM 
                     WHERE LOT_ID = A.LOT_ID 
                       AND OPER = A.OLD_OPER 
                     GROUP BY LOT_ID 
                  ), 0) AS LOSS_QTY 
             , CASE WHEN TRAN_CODE = 'SHIP' AND FACTORY = OLD_FACTORY THEN OLD_QTY_1 - QTY_1 
                    ELSE QTY_1 
               END QTY_1 
             , DECODE(START_TIME, ' ', OLD_OPER_IN_TIME, START_TIME) AS OPER_IN_TIME 
             , TRAN_TIME 
             , TRAN_USER_ID 
             , CRR_ID 
             , TRAN_COMMENT 
             , ( 
                SELECT USER_DESC FROM RWEBUSRDEF WHERE FACTORY = 'SYSTEM' AND USER_ID = A.TRAN_USER_ID 
               ) AS END_USER_DESC 
             , QTY_2 
             , CASE WHEN A.OLD_OPER LIKE 'A040%' AND A.RESV_FLAG_5 = 'Y' AND (SELECT CASE WHEN (TRAN_CMF_4 = 'RFID TAG WRITE : SUCCESS') 
                                                                                            OR (RESV_FLAG_5 = 'Y' AND TRAN_CMF_19 = 'RFID' AND TRAN_USER_ID = 'EIS') THEN 'RFID' 
                                                                                          ELSE ' ' 
                                                                                     END  
                                                                                FROM RWIPLOTHIS 
                                                                               WHERE FACTORY = A.OLD_FACTORY 
                                                                                 AND LOT_TYPE = A.OLD_LOT_TYPE 
                                                                                 AND LOT_ID = A.LOT_ID 
                                                                                 AND OPER = A.OLD_OPER 
                                                                                 AND TRAN_TIME < A.TRAN_TIME 
                                                                                 AND FACTORY = 'HMVA2' 
                                                                                 AND LOT_TYPE = 'W' 
                                                                                 AND RESV_FLAG_5 = 'Y' 
                                                                                 AND TRAN_CODE = 'START' 
                                                                                 AND HIST_DEL_FLAG = ' ') = 'RFID' THEN TRAN_CMF_18 || '[RFID]' 
                     WHEN A.OLD_OPER NOT LIKE 'A040%' AND A.RESV_FLAG_5 = 'Y' AND A.TRAN_CMF_19 = 'RFID' AND A.TRAN_USER_ID = 'EIS' THEN TRAN_CMF_18 || '[' || TRIM(TRAN_CMF_19) || ']' 
                     ELSE TRAN_CMF_18 
               END AS TRAN_CMF_18 
             , ( 
                SELECT USER_DESC FROM RWEBUSRDEF WHERE FACTORY = 'SYSTEM' AND USER_ID = A.TRAN_CMF_18 
               ) AS IN_USER_DESC 
             , LOT_CMF_7 
             , TRAN_CMF_17 
             , LOT_CMF_11 
             , TRAN_CMF_7 
             , TRAN_CMF_8 
             , TRAN_CMF_9 
             , LOT_CMF_3 
          FROM RWIPLOTHIS A 
         WHERE 1=1 
           AND TRAN_TIME BETWEEN '20200521220000' AND '20200522215959' 
           AND OLD_FACTORY = 'HMVA2' 
           AND TRAN_CODE IN ('END','SHIP') 
           AND LOT_TYPE = 'P' 
           AND HIST_DEL_FLAG = ' ' 
           AND OLD_OPER IN ('AZ010')
           AND END_RES_ID LIKE '%'
           AND LOT_CMF_5 LIKE '%'
       ) SUMMERY 
     , MWIPMATDEF MAT 
 WHERE 1=1 
   AND SUMMERY.MAT_ID = MAT.MAT_ID 
   AND MAT.FACTORY = 'HMVA2' 
   AND MAT.MAT_TYPE = 'PB' 
 ORDER BY  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', SUMMERY.OPER,  ' ',  ' ',SUMMERY.END_RES_ID,LOT_ID,MAT_ID 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
SELECT  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', SUMMERY.OPER,  ' ',  ' '
     , SUMMERY.MAT_ID 
     , SUMMERY.LOT_ID 
     , SUMMERY.LOT_CMF_5 
     , SUMMERY.END_RES_ID 
     , SUMMERY.QTY_1 + SUMMERY.LOSS_QTY AS OPER_IN_QTY_1 
     , SUMMERY.QTY_1 
     , ROUND(SUMMERY.QTY_1/(SUMMERY.QTY_1 + SUMMERY.LOSS_QTY)*100,3) AS YIELD 
     , TO_CHAR(TO_DATE(SUMMERY.OPER_IN_TIME,'yyyymmddhh24miss')) AS OPER_IN_TIME 
     , TO_CHAR(TO_DATE(SUMMERY.TRAN_TIME,'yyyymmddhh24miss')) AS TRAN_TIME 
     , DECODE(SUMMERY.TRAN_CMF_18, ' ', ' ', SUMMERY.IN_USER_DESC || '(' || SUMMERY.TRAN_CMF_18 || ')') AS IN_USER_ID 
     , SUMMERY.END_USER_DESC || '(' || SUMMERY.TRAN_USER_ID || ')' AS END_USER_ID 
     , SUMMERY.LOT_CMF_10 
     , SUMMERY.TRAN_CMF_2 AS HD 
     , SUMMERY.TRAN_CMF_3 AS PGM 
     , SUMMERY.CRR_ID 
     , '' EPOXY 
     , '' LF 
     , '' GW 
     , '' MATAL_CARD 
     , '' EMC_LOT 
     , '' EMC_CAN 
     , '' EMC_TYPE 
     , SUMMERY.TRAN_COMMENT 
     , SUMMERY.QTY_2 
     , SUMMERY.TRAN_CMF_17 AS CV 
     , SUMMERY.LOT_CMF_7 AS ASSY_SITE 
     , SUMMERY.LOT_CMF_11 AS SHIP_SITE 
     , SUMMERY.TRAN_CMF_7 AS REWORK_BALL 
     , SUMMERY.TRAN_CMF_8 AS REWORK_CLEAN 
     , SUMMERY.TRAN_CMF_9 AS REWORK_PRINT 
     , LOT_CMF_3 
  FROM (  
        SELECT MAT_ID 
             , LOT_ID 
             , LOT_CMF_5 
             , LOT_CMF_10 
             , OLD_OPER AS OPER 
             , END_RES_ID 
             , TRAN_CMF_2 
             , TRAN_CMF_3 
             , NVL(( 
                    SELECT SUM(LOSS_QTY) AS LOSS_QTY 
                      FROM RWIPLOTLSM 
                     WHERE LOT_ID = A.LOT_ID 
                       AND OPER = A.OLD_OPER 
                     GROUP BY LOT_ID 
                  ), 0) AS LOSS_QTY 
             , CASE WHEN TRAN_CODE = 'SHIP' AND FACTORY = OLD_FACTORY THEN OLD_QTY_1 - QTY_1 
                    ELSE QTY_1 
               END QTY_1 
             , DECODE(START_TIME, ' ', OLD_OPER_IN_TIME, START_TIME) AS OPER_IN_TIME 
             , TRAN_TIME 
             , TRAN_USER_ID 
             , CRR_ID 
             , TRAN_COMMENT 
             , ( 
                SELECT USER_DESC FROM RWEBUSRDEF WHERE FACTORY = 'SYSTEM' AND USER_ID = A.TRAN_USER_ID 
               ) AS END_USER_DESC 
             , QTY_2 
             , CASE WHEN A.OLD_OPER LIKE 'A040%' AND A.RESV_FLAG_5 = 'Y' AND (SELECT CASE WHEN (TRAN_CMF_4 = 'RFID TAG WRITE : SUCCESS') 
                                                                                            OR (RESV_FLAG_5 = 'Y' AND TRAN_CMF_19 = 'RFID' AND TRAN_USER_ID = 'EIS') THEN 'RFID' 
                                                                                          ELSE ' ' 
                                                                                     END  
                                                                                FROM RWIPLOTHIS 
                                                                               WHERE FACTORY = A.OLD_FACTORY 
                                                                                 AND LOT_TYPE = A.OLD_LOT_TYPE 
                                                                                 AND LOT_ID = A.LOT_ID 
                                                                                 AND OPER = A.OLD_OPER 
                                                                                 AND TRAN_TIME < A.TRAN_TIME 
                                                                                 AND FACTORY = 'HMVA2' 
                                                                                 AND LOT_TYPE = 'W' 
                                                                                 AND RESV_FLAG_5 = 'Y' 
                                                                                 AND TRAN_CODE = 'START' 
                                                                                 AND HIST_DEL_FLAG = ' ') = 'RFID' THEN TRAN_CMF_18 || '[RFID]' 
                     WHEN A.OLD_OPER NOT LIKE 'A040%' AND A.RESV_FLAG_5 = 'Y' AND A.TRAN_CMF_19 = 'RFID' AND A.TRAN_USER_ID = 'EIS' THEN TRAN_CMF_18 || '[' || TRIM(TRAN_CMF_19) || ']' 
                     ELSE TRAN_CMF_18 
               END AS TRAN_CMF_18 
             , ( 
                SELECT USER_DESC FROM RWEBUSRDEF WHERE FACTORY = 'SYSTEM' AND USER_ID = A.TRAN_CMF_18 
               ) AS IN_USER_DESC 
             , LOT_CMF_7 
             , TRAN_CMF_17 
             , LOT_CMF_11 
             , TRAN_CMF_7 
             , TRAN_CMF_8 
             , TRAN_CMF_9 
             , LOT_CMF_3 
          FROM RWIPLOTHIS A 
         WHERE 1=1 
           AND TRAN_TIME BETWEEN '20200404220000' AND '20200505215959' 
           AND OLD_FACTORY = 'HMVA2' 
           AND TRAN_CODE IN ('END','SHIP') 
           AND LOT_TYPE = 'P' 
           AND HIST_DEL_FLAG = ' ' 
           AND OLD_OPER LIKE '%'
           AND END_RES_ID LIKE '%'
           AND LOT_CMF_5 LIKE '%'
       ) SUMMERY 
     , MWIPMATDEF MAT 
 WHERE 1=1 
   AND SUMMERY.MAT_ID = MAT.MAT_ID 
   AND MAT.FACTORY = 'HMVA2' 
   AND MAT.MAT_TYPE = 'PB' 
 ORDER BY  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', SUMMERY.OPER,  ' ',  ' ',SUMMERY.END_RES_ID,LOT_ID,MAT_ID 

-------------------------------------------------------------
SELECT OPER, OPER_DESC  FROM MWIPOPRDEF
  WHERE FACTORY = 'HMVA2'  AND OPER NOT IN ('00001', '00002') AND OPER NOT LIKE 'V%' ORDER BY DECODE(OPER_CMF_2, ' ', 99999, TO_NUMBER(OPER_CMF_2)), OPER
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
SELECT  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', SUMMERY.OPER,  ' ',  ' '
     , SUMMERY.MAT_ID 
     , SUMMERY.LOT_ID 
     , SUMMERY.LOT_CMF_5 
     , SUMMERY.END_RES_ID 
     , SUMMERY.QTY_1 + SUMMERY.LOSS_QTY AS OPER_IN_QTY_1 
     , SUMMERY.QTY_1 
     , ROUND(SUMMERY.QTY_1/(SUMMERY.QTY_1 + SUMMERY.LOSS_QTY)*100,3) AS YIELD 
     , TO_CHAR(TO_DATE(SUMMERY.OPER_IN_TIME,'yyyymmddhh24miss')) AS OPER_IN_TIME 
     , TO_CHAR(TO_DATE(SUMMERY.TRAN_TIME,'yyyymmddhh24miss')) AS TRAN_TIME 
     , DECODE(SUMMERY.TRAN_CMF_18, ' ', ' ', SUMMERY.IN_USER_DESC || '(' || SUMMERY.TRAN_CMF_18 || ')') AS IN_USER_ID 
     , SUMMERY.END_USER_DESC || '(' || SUMMERY.TRAN_USER_ID || ')' AS END_USER_ID 
     , SUMMERY.LOT_CMF_10 
     , SUMMERY.TRAN_CMF_2 AS HD 
     , SUMMERY.TRAN_CMF_3 AS PGM 
     , SUMMERY.CRR_ID 
     , '' EPOXY 
     , '' LF 
     , '' GW 
     , '' MATAL_CARD 
     , '' EMC_LOT 
     , '' EMC_CAN 
     , '' EMC_TYPE 
     , SUMMERY.TRAN_COMMENT 
     , SUMMERY.QTY_2 
     , SUMMERY.TRAN_CMF_17 AS CV 
     , SUMMERY.LOT_CMF_7 AS ASSY_SITE 
     , SUMMERY.LOT_CMF_11 AS SHIP_SITE 
     , SUMMERY.TRAN_CMF_7 AS REWORK_BALL 
     , SUMMERY.TRAN_CMF_8 AS REWORK_CLEAN 
     , SUMMERY.TRAN_CMF_9 AS REWORK_PRINT 
     , LOT_CMF_3 
  FROM (  
        SELECT MAT_ID 
             , LOT_ID 
             , LOT_CMF_5 
             , LOT_CMF_10 
             , OLD_OPER AS OPER 
             , END_RES_ID 
             , TRAN_CMF_2 
             , TRAN_CMF_3 
             , NVL(( 
                    SELECT SUM(LOSS_QTY) AS LOSS_QTY 
                      FROM RWIPLOTLSM 
                     WHERE LOT_ID = A.LOT_ID 
                       AND OPER = A.OLD_OPER 
                     GROUP BY LOT_ID 
                  ), 0) AS LOSS_QTY 
             , CASE WHEN TRAN_CODE = 'SHIP' AND FACTORY = OLD_FACTORY THEN OLD_QTY_1 - QTY_1 
                    ELSE QTY_1 
               END QTY_1 
             , DECODE(START_TIME, ' ', OLD_OPER_IN_TIME, START_TIME) AS OPER_IN_TIME 
             , TRAN_TIME 
             , TRAN_USER_ID 
             , CRR_ID 
             , TRAN_COMMENT 
             , ( 
                SELECT USER_DESC FROM RWEBUSRDEF WHERE FACTORY = 'SYSTEM' AND USER_ID = A.TRAN_USER_ID 
               ) AS END_USER_DESC 
             , QTY_2 
             , CASE WHEN A.OLD_OPER LIKE 'A040%' AND A.RESV_FLAG_5 = 'Y' AND (SELECT CASE WHEN (TRAN_CMF_4 = 'RFID TAG WRITE : SUCCESS') 
                                                                                            OR (RESV_FLAG_5 = 'Y' AND TRAN_CMF_19 = 'RFID' AND TRAN_USER_ID = 'EIS') THEN 'RFID' 
                                                                                          ELSE ' ' 
                                                                                     END  
                                                                                FROM RWIPLOTHIS 
                                                                               WHERE FACTORY = A.OLD_FACTORY 
                                                                                 AND LOT_TYPE = A.OLD_LOT_TYPE 
                                                                                 AND LOT_ID = A.LOT_ID 
                                                                                 AND OPER = A.OLD_OPER 
                                                                                 AND TRAN_TIME < A.TRAN_TIME 
                                                                                 AND FACTORY = 'HMVA2' 
                                                                                 AND LOT_TYPE = 'W' 
                                                                                 AND RESV_FLAG_5 = 'Y' 
                                                                                 AND TRAN_CODE = 'START' 
                                                                                 AND HIST_DEL_FLAG = ' ') = 'RFID' THEN TRAN_CMF_18 || '[RFID]' 
                     WHEN A.OLD_OPER NOT LIKE 'A040%' AND A.RESV_FLAG_5 = 'Y' AND A.TRAN_CMF_19 = 'RFID' AND A.TRAN_USER_ID = 'EIS' THEN TRAN_CMF_18 || '[' || TRIM(TRAN_CMF_19) || ']' 
                     ELSE TRAN_CMF_18 
               END AS TRAN_CMF_18 
             , ( 
                SELECT USER_DESC FROM RWEBUSRDEF WHERE FACTORY = 'SYSTEM' AND USER_ID = A.TRAN_CMF_18 
               ) AS IN_USER_DESC 
             , LOT_CMF_7 
             , TRAN_CMF_17 
             , LOT_CMF_11 
             , TRAN_CMF_7 
             , TRAN_CMF_8 
             , TRAN_CMF_9 
             , LOT_CMF_3 
          FROM RWIPLOTHIS A 
         WHERE 1=1 
           AND TRAN_TIME BETWEEN '20200521220000' AND '20200522215959' 
           AND OLD_FACTORY = 'HMVA2' 
           AND TRAN_CODE IN ('END','SHIP') 
           AND LOT_TYPE = 'P' 
           AND HIST_DEL_FLAG = ' ' 
           AND OLD_OPER IN ('AZ010')
           AND END_RES_ID LIKE '%'
           AND LOT_CMF_5 LIKE '%'
       ) SUMMERY 
     , MWIPMATDEF MAT 
 WHERE 1=1 
   AND SUMMERY.MAT_ID = MAT.MAT_ID 
   AND MAT.FACTORY = 'HMVA2' 
   AND MAT.MAT_TYPE = 'PB' 
 ORDER BY  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', SUMMERY.OPER,  ' ',  ' ',SUMMERY.END_RES_ID,LOT_ID,MAT_ID 

-------------------------------------------------------------
SELECT * FROM RWEBUSRDEF WHERE FACTORY = :FACTORY AND USER_ID= :USER_ID
-------------------------------------------------------------
SELECT A.FUNC_GRP_SEQ,A.SEC_GRP_ID,A.FUNC_GRP_ID,NVL(A.FUNC_NAME, ' ') FUNC_NAME, NVL(B.FUNC_DESC, ' ') FUNC_DESC, LANGUAGE_1, LANGUAGE_2, LANGUAGE_3
  FROM RWEBGRPFUN A, RWEBFUNDEF B
 WHERE A.FACTORY = :p_FACTORY
   AND A.SEC_GRP_ID = :p_SEC_GRP_ID
   AND A.FUNC_NAME=B.FUNC_NAME(+)
 ORDER BY A.FUNC_GRP_SEQ, A.FUNC_SEQ
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
SELECT MIN(SYS_DATE) AS START_DAY 
     , MAX(SYS_DATE) AS END_DAY 
     , PLAN_YEAR||DECODE(LENGTH(PLAN_WEEK), 1, '0'||PLAN_WEEK, PLAN_WEEK) AS WEEK
  FROM MWIPCALDEF 
 WHERE CALENDAR_ID = 'OTD'
   AND (PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) IN ( 
                                                SELECT WW
                                                  FROM (
                                                        SELECT WW
                                                             , ROW_NUMBER() OVER(ORDER BY WW) AS RNK
                                                          FROM (
                                                                SELECT DISTINCT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW
                                                                  FROM MWIPCALDEF
                                                                 WHERE CALENDAR_ID = 'OTD'
                                                                   AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') >= (
                                                                                                              SELECT MAX(PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) AS WW
                                                                                                                FROM MWIPCALDEF
                                                                                                               WHERE CALENDAR_ID = 'OTD'
                                                                                                                 AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') < (SELECT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW FROM MWIPCALDEF WHERE CALENDAR_ID = 'OTD' AND SYS_DATE = '20200522')
                                                                                                                 AND SYS_DATE >= TO_CHAR(TO_DATE('20200522', 'YYYYMMDD')-14, 'YYYYMMDD')
                                                                                                             )
                                                               ) 
                                                       )
                                                 WHERE RNK <= 7
                                               ) 
 GROUP BY PLAN_YEAR, PLAN_WEEK 
 ORDER BY PLAN_YEAR, PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT LANGUAGE_1 FROM RWEBFUNDEF WHERE FUNC_NAME = 'PRD010204'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE) AS START_DAY 
     , MAX(SYS_DATE) AS END_DAY 
     , PLAN_YEAR||DECODE(LENGTH(PLAN_WEEK), 1, '0'||PLAN_WEEK, PLAN_WEEK) AS WEEK
  FROM MWIPCALDEF 
 WHERE CALENDAR_ID = 'OTD'
   AND (PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) IN ( 
                                                SELECT WW
                                                  FROM (
                                                        SELECT WW
                                                             , ROW_NUMBER() OVER(ORDER BY WW) AS RNK
                                                          FROM (
                                                                SELECT DISTINCT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW
                                                                  FROM MWIPCALDEF
                                                                 WHERE CALENDAR_ID = 'OTD'
                                                                   AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') >= (
                                                                                                              SELECT MAX(PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) AS WW
                                                                                                                FROM MWIPCALDEF
                                                                                                               WHERE CALENDAR_ID = 'OTD'
                                                                                                                 AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') < (SELECT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW FROM MWIPCALDEF WHERE CALENDAR_ID = 'OTD' AND SYS_DATE = '20200522')
                                                                                                                 AND SYS_DATE >= TO_CHAR(TO_DATE('20200522', 'YYYYMMDD')-14, 'YYYYMMDD')
                                                                                                             )
                                                               ) 
                                                       )
                                                 WHERE RNK <= 7
                                               ) 
 GROUP BY PLAN_YEAR, PLAN_WEEK 
 ORDER BY PLAN_YEAR, PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
(SELECT TO_CHAR(LAST_DAY(TO_DATE('202004', 'YYYYMM')),'YYYYMMDD') FROM DUAL)
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
(SELECT TO_CHAR(LAST_DAY(TO_DATE('202005', 'YYYYMM')),'YYYYMMDD') FROM DUAL)
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE-1) 
  FROM MWIPCALDEF 
 WHERE 1=1
   AND CALENDAR_ID='SE'
   AND PLAN_YEAR='2020'
   AND PLAN_WEEK=(
                  SELECT PLAN_WEEK 
                    FROM MWIPCALDEF 
                   WHERE 1=1 
                     AND CALENDAR_ID='SE' 
                     AND SYS_DATE=TO_CHAR(TO_DATE('20200522','YYYYMMDD'),'YYYYMMDD')
                 )

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT (SELECT DATA_1 FROM MGCMTBLDAT@RPTTOMES WHERE FACTORY = 'HMVA2' AND TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = A.CUSTOMER) AS CUSTOMER, A.MAJOR, A.PKG,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' '
     , A.ORI_PLAN AS "월계획"
     , A.MON_PLAN AS "월계획Rev"
     , A.MON_PLAN -A.ORI_PLAN AS "월계획 차이"
     , A.TARGET_MON, A.ASSY_MON
     , DECODE(A.MON_PLAN, 0, 0, ROUND((A.ASSY_MON/A.MON_PLAN)*100, 1)) JINDO, A.DEF, WEEK_PLAN, ASSY_WEEK, WEEK_PLAN-ASSY_WEEK AS "주계획 차이"
     , A.HMK3A, A.FINISH, A.MOLD, A.WB_AFTER, A.DA + A.WB_BEFORE, A.SAW, A.STOCK, A.HMK3A+A.FINISH+A.MOLD+A.WB_AFTER+A.WB_BEFORE+A.DA+A.SAW+A.STOCK AS TTL, A.TARGET_DAY AS "일목표", A.AO0, A.AO1, A.AO2
     , A.RCV0, A.RCV1, A.RCV2, A.SW0, A.SW1, A.SW2, A.DA0, A.DA1, A.DA2, A.WB0, A.WB1, A.WB2, A.MD0, A.MD1, A.MD2, A.TF0, A.TF1, A.TF2 
     , ROUND(B.TAT1*24,2)
     , CASE WHEN HIST_AO > 0 THEN '●' END AS HIST_AO
  FROM ( 
        SELECT A.MAT_GRP_1 AS CUSTOMER, A.MAT_GRP_9 AS MAJOR, A.MAT_GRP_10 AS PKG,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' '
             , SUM(NVL(A.MON_PLAN,0)) AS MON_PLAN 
             , SUM(NVL(A.ORI_PLAN,0)) AS ORI_PLAN 
             , SUM(NVL(A.WEEK_PLAN,0)) AS WEEK_PLAN 
             , SUM(NVL(A.ASSY_WEEK,0)) AS ASSY_WEEK 
             , ROUND(((SUM(NVL(A.MON_PLAN,0)) * 71.0) / 100),0) AS TARGET_MON 
             , SUM(NVL(A.ASSY_MON,0)) AS ASSY_MON 
             , SUM(NVL(A.ASSY_MON,0)) - ROUND(((SUM(NVL(A.MON_PLAN,0)) * 71.0) / 100),1) AS DEF   
             , SUM(NVL(A.AO0,0)) AS AO0 
             , SUM(NVL(A.AO1,0)) AS AO1 
             , SUM(NVL(A.AO2,0)) AS AO2 
             , ROUND(((SUM(NVL(A.MON_PLAN,0)) - SUM(NVL(A.ASSY_MON,0))) /10), 1) AS TARGET_DAY 
             , SUM(NVL(A.RCV0,0)) AS RCV0
             , SUM(NVL(A.RCV1,0)) AS RCV1
             , SUM(NVL(A.RCV2,0)) AS RCV2
             , ROUND(SUM(NVL((CASE WHEN A.MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND MAT_ID LIKE 'SEKS%') THEN DECODE(A.MAT_GRP_5, '2nd', D.SW0 / COMP_CNT, 0)
                                   WHEN A.MAT_GRP_3 IN ('COB', 'BGN') THEN D.SW0 / NET_DIE
                                   WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN CASE WHEN A.MAT_GRP_5 IN ('1st','Merge') OR MAT_GRP_5 LIKE 'Middle%' THEN D.SW0 / DECODE(A.MAT_GRP_1,'HX',1, COMP_CNT) ELSE 0 END 
                                   ELSE D.SW0 / DECODE(A.MAT_GRP_1,'HX',1, COMP_CNT)
                              END),0)
                    ),0) AS SW0
             , ROUND(SUM(NVL((CASE WHEN A.MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND MAT_ID LIKE 'SEKS%') THEN DECODE(A.MAT_GRP_5, '2nd', D.SW1 / COMP_CNT, 0)
                                   WHEN A.MAT_GRP_3 IN ('COB', 'BGN') THEN D.SW1 / NET_DIE
                                   WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN CASE WHEN A.MAT_GRP_5 IN ('1st','Merge') OR MAT_GRP_5 LIKE 'Middle%' THEN D.SW1 / DECODE(A.MAT_GRP_1,'HX',1,COMP_CNT) ELSE 0 END 
                                   ELSE D.SW1 / DECODE(A.MAT_GRP_1,'HX',1,COMP_CNT)
                              END),0)
                    ),0) AS SW1
             , ROUND(SUM(NVL((CASE WHEN A.MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND MAT_ID LIKE 'SEKS%') THEN DECODE(A.MAT_GRP_5, '2nd', D.SW2 / COMP_CNT, 0)
                                   WHEN A.MAT_GRP_3 IN ('COB', 'BGN') THEN D.SW2 / NET_DIE
                                   WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN CASE WHEN A.MAT_GRP_5 IN ('1st','Merge') OR MAT_GRP_5 LIKE 'Middle%' THEN D.SW2 / DECODE(A.MAT_GRP_1,'HX',1,COMP_CNT) ELSE 0 END 
                                   ELSE D.SW2 / DECODE(A.MAT_GRP_1,'HX',1,COMP_CNT)
                              END),0)
                    ),0) AS SW2
             , SUM(NVL((CASE WHEN A.MAT_GRP_1 = 'SE' AND A.MAT_GRP_9 = 'MEMORY' AND A.MAT_GRP_5 <> '-' THEN (CASE WHEN A.MAT_GRP_5 = 'Merge' THEN NVL(D.DA02,0) + NVL(D.DA03,0) + NVL(D.DA04,0) + NVL(D.DA05,0) + NVL(D.DA06,0) + NVL(D.DA07,0) + NVL(D.DA08,0) + NVL(D.DA09,0) ELSE 0 END)
                             WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN DECODE(SUBSTR(MAT_GRP_4,-1), '2', D.DA02, '3', D.DA03, '4', D.DA04, '5', D.DA05, '6', D.DA06, '7', D.DA07, '8', D.DA08, '9', D.DA09, 0)
                             ELSE D.DA0
                        END),0)
                   ) AS DA0
             , SUM(NVL((CASE WHEN A.MAT_GRP_1 = 'SE' AND A.MAT_GRP_9 = 'MEMORY' AND A.MAT_GRP_5 <> '-' THEN (CASE WHEN A.MAT_GRP_5 = 'Merge' THEN NVL(D.DA12,0) + NVL(D.DA13,0) + NVL(D.DA14,0) + NVL(D.DA15,0) + NVL(D.DA16,0) + NVL(D.DA17,0) + NVL(D.DA18,0) + NVL(D.DA19,0) ELSE 0 END)
                             WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN DECODE(SUBSTR(MAT_GRP_4,-1), '2', D.DA12, '3', D.DA13, '4', D.DA14, '5', D.DA15, '6', D.DA16, '7', D.DA17, '8', D.DA18, '9', D.DA19, 0)
                             ELSE D.DA1
                        END),0)
                   ) AS DA1
             , SUM(NVL((CASE WHEN A.MAT_GRP_1 = 'SE' AND A.MAT_GRP_9 = 'MEMORY' AND A.MAT_GRP_5 <> '-' THEN (CASE WHEN A.MAT_GRP_5 = 'Merge' THEN NVL(D.DA22,0) + NVL(D.DA23,0) + NVL(D.DA24,0) + NVL(D.DA25,0) + NVL(D.DA26,0) + NVL(D.DA27,0) + NVL(D.DA28,0) + NVL(D.DA29,0) ELSE 0 END)
                             WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN DECODE(SUBSTR(MAT_GRP_4,-1), '2', D.DA22, '3', D.DA23, '4', D.DA24, '5', D.DA25, '6', D.DA26, '7', D.DA27, '8', D.DA28, '9', D.DA29, 0)
                             ELSE D.DA2
                        END),0)
                   ) AS DA2
             , SUM(NVL((CASE WHEN A.MAT_GRP_1 = 'SE' AND A.MAT_GRP_9 = 'MEMORY' AND A.MAT_GRP_5 <> '-' THEN (CASE WHEN A.MAT_GRP_5 = 'Merge' THEN NVL(D.WB02,0) + NVL(D.WB03,0) + NVL(D.WB04,0) + NVL(D.WB05,0) + NVL(D.WB06,0) + NVL(D.WB07,0) + NVL(D.WB08,0) + NVL(D.WB09,0) ELSE 0 END)
                             WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN DECODE(SUBSTR(MAT_GRP_4,-1), '2', D.WB02, '3', D.WB03, '4', D.WB04, '5', D.WB05, '6', D.WB06, '7', D.WB07, '8', D.WB08, '9', D.WB09, 0)
                             ELSE D.WB0
                        END),0)
                   ) AS WB0
             , SUM(NVL((CASE WHEN A.MAT_GRP_1 = 'SE' AND A.MAT_GRP_9 = 'MEMORY' AND A.MAT_GRP_5 <> '-' THEN (CASE WHEN A.MAT_GRP_5 = 'Merge' THEN NVL(D.WB12,0) + NVL(D.WB13,0) + NVL(D.WB14,0) + NVL(D.WB15,0) + NVL(D.WB16,0) + NVL(D.WB17,0) + NVL(D.WB18,0) + NVL(D.WB19,0) ELSE 0 END)
                             WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN DECODE(SUBSTR(MAT_GRP_4,-1), '2', D.WB12, '3', D.WB13, '4', D.WB14, '5', D.WB15, '6', D.WB16, '7', D.WB17, '8', D.WB18, '9', D.WB19, 0)
                             ELSE D.WB1
                        END),0)
                   ) AS WB1
             , SUM(NVL((CASE WHEN A.MAT_GRP_1 = 'SE' AND A.MAT_GRP_9 = 'MEMORY' AND A.MAT_GRP_5 <> '-' THEN (CASE WHEN A.MAT_GRP_5 = 'Merge' THEN NVL(D.WB22,0) + NVL(D.WB23,0) + NVL(D.WB24,0) + NVL(D.WB25,0) + NVL(D.WB26,0) + NVL(D.WB27,0) + NVL(D.WB28,0) + NVL(D.WB29,0) ELSE 0 END)
                             WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN DECODE(SUBSTR(MAT_GRP_4,-1), '2', D.WB22, '3', D.WB23, '4', D.WB24, '5', D.WB25, '6', D.WB26, '7', D.WB27, '8', D.WB28, '9', D.WB29, 0)
                             ELSE D.WB2
                        END),0)
                   ) AS WB2
             , SUM(NVL(D.MD0,0)) AS MD0, SUM(NVL(D.MD1,0)) AS MD1, SUM(NVL(D.MD2,0)) AS MD2 
             , SUM(NVL(D.TF0,0)) AS TF0, SUM(NVL(D.TF1,0)) AS TF1, SUM(NVL(D.TF2,0)) AS TF2 
             , SUM(NVL(F.V0,0)) AS STOCK
             , SUM(NVL(F.V1,0)+NVL(F.V2,0)) AS SAW
             , SUM(NVL(F.V3,0)+NVL(F.V4,0)+NVL(F.V17,0)) AS DA
             , SUM(NVL((CASE WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN CASE WHEN A.MAT_GRP_5 = '1st' OR MAT_GRP_5 LIKE 'Middle%' THEN NVL(F.V5+F.V16,0) ELSE 0 END
                             ELSE 0
                        END),0)
                    ) AS WB_BEFORE
             , SUM(NVL((CASE WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN CASE WHEN A.MAT_GRP_5 = 'Merge' THEN NVL(F.V5+F.V16,0) ELSE 0 END
                             ELSE NVL(F.V5+F.V16,0)
                        END),0)
                    ) AS WB_AFTER
             , SUM(NVL(F.V6,0)+NVL(F.V7,0)) AS MOLD
             , SUM(NVL(F.V8+F.V9+F.V10+F.V11+F.V12+F.V13+F.V14,0)) AS FINISH
             , SUM(NVL(F.V15,0)) AS HMK3A
             , SUM(NVL(F.V0+F.V1+F.V2+F.V3+F.V4+F.V5+F.V6+F.V7+F.V8+F.V9+F.V10+F.V11+F.V12+F.V13+F.V14+F.V15+F.V16+F.V17,0)) AS TTL
             , SUM(HIST_AO) AS HIST_AO 
          FROM ( 
                SELECT MAT.MAT_GRP_1, MAT.MAT_GRP_2, MAT.MAT_GRP_3, MAT.MAT_GRP_4, MAT.MAT_GRP_5, MAT.MAT_GRP_6, MAT.MAT_GRP_7, MAT.MAT_GRP_8 
                     , DECODE(MAT.MAT_GRP_1,'SE',MAT.MAT_GRP_9,' ') AS MAT_GRP_9, MAT.MAT_GRP_10, MAT.MAT_CMF_10, MAT.MAT_ID, MAT.MAT_CMF_7, MAT.NET_DIE, MAT.MAT_CMF_11, MAT.COMP_CNT  
                     , CASE WHEN MAT.MAT_GRP_3 IN ('COB') THEN ROUND(SUM(PLAN.RESV_FIELD1 / MAT.NET_DIE),0)
                            ELSE SUM(PLAN.RESV_FIELD1)
                       END MON_PLAN
                     , CASE WHEN MAT.MAT_GRP_3 IN ('COB') THEN ROUND(SUM(PLAN.PLAN_QTY_ASSY / MAT.NET_DIE),0)
                            ELSE SUM(PLAN.PLAN_QTY_ASSY)
                       END ORI_PLAN
                     , CASE WHEN MAT.MAT_GRP_3 IN ('COB') THEN ROUND(SUM(WEEK_PLAN.WEEK_PLAN / MAT.NET_DIE),0)
                            ELSE SUM(WEEK_PLAN.WEEK_PLAN)
                            END WEEK_PLAN
                     , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN ROUND(SUM(WEEK_AO.WEEK_AO / MAT.NET_DIE),0)
                            ELSE SUM(WEEK_AO.WEEK_AO)
                            END ASSY_WEEK
                     , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN ROUND(SUM(MON_AO.ASSY_MON / MAT.NET_DIE),0)
                            ELSE SUM(MON_AO.ASSY_MON)
                       END ASSY_MON
                     , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN ROUND(SUM(MON_AO.AO0 / MAT.NET_DIE),0)
                            ELSE SUM(MON_AO.AO0)
                       END AO0
                     , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN ROUND(SUM(MON_AO.AO1 / MAT.NET_DIE),0)
                            ELSE SUM(MON_AO.AO1)
                       END AO1
                     , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN ROUND(SUM(MON_AO.AO2 / MAT.NET_DIE),0)
                            ELSE SUM(MON_AO.AO2)
                       END AO2
                     , ROUND(CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN ROUND(SUM(DAY_RCV.RCV0 / MAT.NET_DIE),0)
                                  WHEN MAT.MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND MAT_ID LIKE 'SEKS%') THEN DECODE(MAT.MAT_GRP_5, '2nd', SUM(DAY_RCV.RCV0 / MAT.COMP_CNT), 0)
                                  WHEN MAT.MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT.MAT_GRP_5 <> '-' THEN CASE WHEN MAT.MAT_GRP_5 IN ('1st','Merge') OR MAT.MAT_GRP_5 LIKE 'Middle%' THEN SUM(DAY_RCV.RCV0 / MAT.COMP_CNT) ELSE 0 END 
                                  ELSE SUM(DAY_RCV.RCV0 / MAT.COMP_CNT)
                             END, 0) AS RCV0
                     , ROUND(CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN ROUND(SUM(DAY_RCV.RCV1 / MAT.NET_DIE),0)
                                  WHEN MAT.MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND MAT_ID LIKE 'SEKS%') THEN DECODE(MAT.MAT_GRP_5, '2nd', SUM(DAY_RCV.RCV1 / MAT.COMP_CNT), 0)
                                  WHEN MAT.MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT.MAT_GRP_5 <> '-' THEN CASE WHEN MAT.MAT_GRP_5 IN ('1st','Merge') OR MAT.MAT_GRP_5 LIKE 'Middle%' THEN SUM(DAY_RCV.RCV1 / MAT.COMP_CNT) ELSE 0 END 
                                  ELSE SUM(DAY_RCV.RCV1 / MAT.COMP_CNT)
                             END, 0) AS RCV1
                     , ROUND(CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN ROUND(SUM(DAY_RCV.RCV2 / MAT.NET_DIE),0)
                                  WHEN MAT.MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND MAT_ID LIKE 'SEKS%') THEN DECODE(MAT.MAT_GRP_5, '2nd', SUM(DAY_RCV.RCV2 / MAT.COMP_CNT), 0)
                                  WHEN MAT.MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT.MAT_GRP_5 <> '-' THEN CASE WHEN MAT.MAT_GRP_5 IN ('1st','Merge') OR MAT.MAT_GRP_5 LIKE 'Middle%' THEN SUM(DAY_RCV.RCV2 / MAT.COMP_CNT) ELSE 0 END 
                                  ELSE SUM(DAY_RCV.RCV2 / MAT.COMP_CNT)
                             END, 0) AS RCV2
                     , SUM(HIST_AO.HIST_AO) AS HIST_AO 
                  FROM VWIPMATDEF MAT 
                     , ( 
                        SELECT FACTORY,MAT_ID,PLAN_QTY_ASSY,PLAN_MONTH, RESV_FIELD1 
                          FROM ( 
                                SELECT FACTORY, MAT_ID, SUM(PLAN_QTY_ASSY) AS PLAN_QTY_ASSY, PLAN_MONTH, SUM(RESV_FIELD1) AS RESV_FIELD1  
                                  FROM ( 
                                        SELECT FACTORY, MAT_ID, SUM(PLAN_QTY_ASSY) AS PLAN_QTY_ASSY, PLAN_MONTH, SUM(TO_NUMBER(DECODE(RESV_FIELD1,' ',0,RESV_FIELD1))) AS RESV_FIELD1 
                                          FROM CWIPPLNMON 
                                         WHERE 1=1 
                                           AND FACTORY = 'HMVA2' 
                                         GROUP BY FACTORY, MAT_ID, PLAN_MONTH 
                                       ) 
                                 GROUP BY FACTORY, MAT_ID,PLAN_MONTH 
                               ) 
                       ) PLAN 
                     , ( 
                        SELECT FACTORY,MAT_ID, SUM(WW_QTY) AS WEEK_PLAN 
                          FROM RWIPPLNWEK 
                         WHERE FACTORY = 'HMVA2' 
                           AND PLAN_WEEK = '202021'
                           AND GUBUN = '3' 
                        GROUP BY FACTORY,MAT_ID 
                       ) WEEK_PLAN 
                     , ( 
                        SELECT MAT_ID 
                             , SUM(AO0) AS AO0 
                             , SUM(AO1) AS AO1 
                             , SUM(AO2) AS AO2 
                             , SUM(ASSY_MON) AS ASSY_MON 
                          FROM (
                                SELECT MAT_ID 
                                     , SUM(DECODE(WORK_DATE,'20200520', NVL(S1_FAC_OUT_QTY_1 + S2_FAC_OUT_QTY_1 + S3_FAC_OUT_QTY_1 + S4_FAC_OUT_QTY_1, 0), 0)) AS AO0 
                                     , SUM(DECODE(WORK_DATE,'20200521', NVL(S1_FAC_OUT_QTY_1 + S2_FAC_OUT_QTY_1 + S3_FAC_OUT_QTY_1 + S4_FAC_OUT_QTY_1, 0), 0)) AS AO1
                                     , SUM(DECODE(WORK_DATE,'20200522', NVL(S1_FAC_OUT_QTY_1 + S2_FAC_OUT_QTY_1 + S3_FAC_OUT_QTY_1 + S4_FAC_OUT_QTY_1, 0), 0)) AS AO2
                                     , 0 AS ASSY_MON  
                                  FROM RSUMFACMOV 
                                 WHERE 1=1 
                                   AND WORK_DATE BETWEEN '20200520' AND '20200522'
                                   AND LOT_TYPE = 'W' 
                                   AND CM_KEY_1 = 'HMVA2' 
                                   AND CM_KEY_2 = 'PROD' 
                                   AND CM_KEY_3 LIKE 'P%'
                                   AND FACTORY NOT IN ('RETURN') 
                                 GROUP BY MAT_ID 
                                 UNION ALL 
                                SELECT MAT_ID 
                                     , 0, 0, 0 
                                     , SUM(SHP_QTY_1) AS ASSY_MON 
                                  FROM VSUMWIPOUT 
                                 WHERE 1=1 
                                   AND WORK_DATE BETWEEN '20200501' AND '20200522'
                                   AND FACTORY = 'HMVA2' 
                                   AND LOT_TYPE = 'W' 
                                   AND CM_KEY_2 = 'PROD' 
                                   AND CM_KEY_3 LIKE 'P%'
                                 GROUP BY MAT_ID 
                               ) 
                         GROUP BY MAT_ID 
                       ) MON_AO 
                     , ( 
                        SELECT MAT_ID 
                             , SUM(NVL(S1_FAC_OUT_QTY_1 + S2_FAC_OUT_QTY_1 + S3_FAC_OUT_QTY_1 + S4_FAC_OUT_QTY_1, 0)) AS WEEK_AO  
                          FROM RSUMFACMOV 
                         WHERE 1=1 
                           AND WORK_DATE BETWEEN '20200516' AND '20200522'
                           AND LOT_TYPE = 'W' 
                           AND CM_KEY_1 = 'HMVA2' 
                           AND CM_KEY_2 = 'PROD' 
                           AND CM_KEY_3 LIKE 'P%'
                           AND FACTORY NOT IN ('RETURN') 
                         GROUP BY MAT_ID 
                       ) WEEK_AO 
                     , ( 
                        SELECT MAT_ID 
                             , SUM(DECODE(WORK_DATE,'20200520', NVL(RCV_QTY_1,0), 0)) AS RCV0
                             , SUM(DECODE(WORK_DATE,'20200521', NVL(RCV_QTY_1,0), 0)) AS RCV1
                             , SUM(DECODE(WORK_DATE,'20200522', NVL(RCV_QTY_1,0), 0)) AS RCV2
                          FROM VSUMWIPRCV 
                         WHERE 1=1 
                           AND WORK_DATE BETWEEN '20200520' AND '20200522'
                           AND LOT_TYPE = 'W' 
                           AND FACTORY = 'HMVA2' 
                           AND CM_KEY_2 = 'PROD' 
                           AND CM_KEY_3 LIKE 'P%'
                         GROUP BY MAT_ID 
                       ) DAY_RCV  
                     , ( 
                        SELECT MAT_ID 
                             , SUM(NVL(S1_FAC_OUT_QTY_1 + S2_FAC_OUT_QTY_1 + S3_FAC_OUT_QTY_1 + S4_FAC_OUT_QTY_1, 0)) AS HIST_AO  
                          FROM RSUMFACMOV 
                         WHERE 1=1 
                           AND WORK_DATE BETWEEN TO_CHAR(ADD_MONTHS('20200522', -6), 'YYYYMMDD') AND '20200522'
                           AND LOT_TYPE = 'W' 
                           AND CM_KEY_1 = 'HMVA2' 
                           AND CM_KEY_2 = 'PROD' 
                           AND CM_KEY_3 LIKE 'P%'
                           AND FACTORY NOT IN ('RETURN') 
                         GROUP BY MAT_ID 
                       ) HIST_AO 
                 WHERE 1 = 1 
                   AND MAT.FACTORY =PLAN.FACTORY(+) 
                   AND MAT.FACTORY =WEEK_PLAN.FACTORY(+) 
                   AND MAT.MAT_ID = PLAN.MAT_ID(+) 
                   AND MAT.MAT_ID = WEEK_PLAN.MAT_ID(+) 
                   AND MAT.MAT_ID = MON_AO.MAT_ID(+) 
                   AND MAT.MAT_ID = WEEK_AO.MAT_ID(+) 
                   AND MAT.MAT_ID = DAY_RCV.MAT_ID(+) 
                   AND MAT.MAT_ID = HIST_AO.MAT_ID(+) 
                   AND MAT.FACTORY = 'HMVA2' 
                   AND PLAN.PLAN_MONTH(+) = '202005' 
                   AND MAT.MAT_TYPE= 'FG' 
                   AND MAT.DELETE_FLAG <> 'Y' 
                 GROUP BY MAT.MAT_GRP_1, MAT.MAT_GRP_2, MAT.MAT_GRP_3, MAT.MAT_GRP_4, MAT.MAT_GRP_5, MAT.MAT_GRP_6, MAT.MAT_GRP_7, MAT.MAT_GRP_8, MAT.MAT_GRP_9, MAT.MAT_GRP_10, MAT.MAT_CMF_10, MAT.MAT_ID, MAT.MAT_CMF_7, MAT.NET_DIE, MAT.MAT_CMF_11, MAT.COMP_CNT
               ) A  
             , ( 
                SELECT MAT_ID 
                     , SUM(DECODE(OPER, 'A0200', DECODE(WORK_DATE,'20200520', QTY,0))) AS SW0
                     , SUM(DECODE(OPER, 'A0200', DECODE(WORK_DATE,'20200521', QTY,0))) AS SW1
                     , SUM(DECODE(OPER, 'A0200', DECODE(WORK_DATE,'20200522', QTY,0))) AS SW2
                     , SUM(DECODE(OPER_GRP_7, 'D/A', DECODE(WORK_DATE,'20200520', QTY,0))) AS DA0
                     , SUM(DECODE(OPER_GRP_7, 'D/A', DECODE(WORK_DATE,'20200521', QTY,0))) AS DA1
                     , SUM(DECODE(OPER_GRP_7, 'D/A', DECODE(WORK_DATE,'20200522', QTY,0))) AS DA2
                     , SUM(DECODE(OPER_GRP_7, 'W/B', DECODE(WORK_DATE,'20200520', QTY,0))) AS WB0
                     , SUM(DECODE(OPER_GRP_7, 'W/B', DECODE(WORK_DATE,'20200521', QTY,0))) AS WB1
                     , SUM(DECODE(OPER_GRP_7, 'W/B', DECODE(WORK_DATE,'20200522', QTY,0))) AS WB2
                     , SUM(DECODE(OPER_GRP_7, 'MOLD', DECODE(WORK_DATE,'20200520', QTY,0))) AS MD0
                     , SUM(DECODE(OPER_GRP_7, 'MOLD', DECODE(WORK_DATE,'20200521', QTY,0))) AS MD1
                     , SUM(DECODE(OPER_GRP_7, 'MOLD', DECODE(WORK_DATE,'20200522', QTY,0))) AS MD2
                     , SUM(DECODE(OPER_GRP_7, 'SIG', DECODE(WORK_DATE,'20200520', QTY,0))) AS TF0
                     , SUM(DECODE(OPER_GRP_7, 'SIG', DECODE(WORK_DATE,'20200521', QTY,0))) AS TF1
                     , SUM(DECODE(OPER_GRP_7, 'SIG', DECODE(WORK_DATE,'20200522', QTY,0))) AS TF2
                     , SUM(DECODE(OPER, 'A0402', DECODE(WORK_DATE,'20200520', QTY,0))) AS DA02
                     , SUM(DECODE(OPER, 'A0402', DECODE(WORK_DATE,'20200521', QTY,0))) AS DA12
                     , SUM(DECODE(OPER, 'A0402', DECODE(WORK_DATE,'20200522', QTY,0))) AS DA22
                     , SUM(DECODE(OPER, 'A0403', DECODE(WORK_DATE,'20200520', QTY,0))) AS DA03
                     , SUM(DECODE(OPER, 'A0403', DECODE(WORK_DATE,'20200521', QTY,0))) AS DA13
                     , SUM(DECODE(OPER, 'A0403', DECODE(WORK_DATE,'20200522', QTY,0))) AS DA23
                     , SUM(DECODE(OPER, 'A0404', DECODE(WORK_DATE,'20200520', QTY,0))) AS DA04
                     , SUM(DECODE(OPER, 'A0404', DECODE(WORK_DATE,'20200521', QTY,0))) AS DA14
                     , SUM(DECODE(OPER, 'A0404', DECODE(WORK_DATE,'20200522', QTY,0))) AS DA24
                     , SUM(DECODE(OPER, 'A0405', DECODE(WORK_DATE,'20200520', QTY,0))) AS DA05
                     , SUM(DECODE(OPER, 'A0405', DECODE(WORK_DATE,'20200521', QTY,0))) AS DA15
                     , SUM(DECODE(OPER, 'A0405', DECODE(WORK_DATE,'20200522', QTY,0))) AS DA25
                     , SUM(DECODE(OPER, 'A0406', DECODE(WORK_DATE,'20200520', QTY,0))) AS DA06
                     , SUM(DECODE(OPER, 'A0406', DECODE(WORK_DATE,'20200521', QTY,0))) AS DA16
                     , SUM(DECODE(OPER, 'A0406', DECODE(WORK_DATE,'20200522', QTY,0))) AS DA26
                     , SUM(DECODE(OPER, 'A0407', DECODE(WORK_DATE,'20200520', QTY,0))) AS DA07
                     , SUM(DECODE(OPER, 'A0407', DECODE(WORK_DATE,'20200521', QTY,0))) AS DA17
                     , SUM(DECODE(OPER, 'A0407', DECODE(WORK_DATE,'20200522', QTY,0))) AS DA27
                     , SUM(DECODE(OPER, 'A0408', DECODE(WORK_DATE,'20200520', QTY,0))) AS DA08
                     , SUM(DECODE(OPER, 'A0408', DECODE(WORK_DATE,'20200521', QTY,0))) AS DA18
                     , SUM(DECODE(OPER, 'A0408', DECODE(WORK_DATE,'20200522', QTY,0))) AS DA28
                     , SUM(DECODE(OPER, 'A0409', DECODE(WORK_DATE,'20200520', QTY,0))) AS DA09
                     , SUM(DECODE(OPER, 'A0409', DECODE(WORK_DATE,'20200521', QTY,0))) AS DA19
                     , SUM(DECODE(OPER, 'A0409', DECODE(WORK_DATE,'20200522', QTY,0))) AS DA29
                     , SUM(DECODE(OPER, 'A0602', DECODE(WORK_DATE,'20200520', QTY,0))) AS WB02
                     , SUM(DECODE(OPER, 'A0602', DECODE(WORK_DATE,'20200521', QTY,0))) AS WB12
                     , SUM(DECODE(OPER, 'A0602', DECODE(WORK_DATE,'20200522', QTY,0))) AS WB22
                     , SUM(DECODE(OPER, 'A0603', DECODE(WORK_DATE,'20200520', QTY,0))) AS WB03
                     , SUM(DECODE(OPER, 'A0603', DECODE(WORK_DATE,'20200521', QTY,0))) AS WB13
                     , SUM(DECODE(OPER, 'A0603', DECODE(WORK_DATE,'20200522', QTY,0))) AS WB23
                     , SUM(DECODE(OPER, 'A0604', DECODE(WORK_DATE,'20200520', QTY,0))) AS WB04
                     , SUM(DECODE(OPER, 'A0604', DECODE(WORK_DATE,'20200521', QTY,0))) AS WB14
                     , SUM(DECODE(OPER, 'A0604', DECODE(WORK_DATE,'20200522', QTY,0))) AS WB24
                     , SUM(DECODE(OPER, 'A0605', DECODE(WORK_DATE,'20200520', QTY,0))) AS WB05
                     , SUM(DECODE(OPER, 'A0605', DECODE(WORK_DATE,'20200521', QTY,0))) AS WB15
                     , SUM(DECODE(OPER, 'A0605', DECODE(WORK_DATE,'20200522', QTY,0))) AS WB25 
                     , SUM(DECODE(OPER, 'A0606', DECODE(WORK_DATE,'20200520', QTY,0))) AS WB06
                     , SUM(DECODE(OPER, 'A0606', DECODE(WORK_DATE,'20200521', QTY,0))) AS WB16
                     , SUM(DECODE(OPER, 'A0606', DECODE(WORK_DATE,'20200522', QTY,0))) AS WB26 
                     , SUM(DECODE(OPER, 'A0607', DECODE(WORK_DATE,'20200520', QTY,0))) AS WB07
                     , SUM(DECODE(OPER, 'A0607', DECODE(WORK_DATE,'20200521', QTY,0))) AS WB17
                     , SUM(DECODE(OPER, 'A0607', DECODE(WORK_DATE,'20200522', QTY,0))) AS WB27 
                     , SUM(DECODE(OPER, 'A0608', DECODE(WORK_DATE,'20200520', QTY,0))) AS WB08
                     , SUM(DECODE(OPER, 'A0608', DECODE(WORK_DATE,'20200521', QTY,0))) AS WB18
                     , SUM(DECODE(OPER, 'A0608', DECODE(WORK_DATE,'20200522', QTY,0))) AS WB28 
                     , SUM(DECODE(OPER, 'A0609', DECODE(WORK_DATE,'20200520', QTY,0))) AS WB09
                     , SUM(DECODE(OPER, 'A0609', DECODE(WORK_DATE,'20200521', QTY,0))) AS WB19
                     , SUM(DECODE(OPER, 'A0609', DECODE(WORK_DATE,'20200522', QTY,0))) AS WB29 
                  FROM ( 
                        SELECT A.MAT_ID,A.WORK_DATE,B.OPER,B.OPER_GRP_7 
                             , SUM(A.S1_END_QTY_1 + A.S2_END_QTY_1 + A.S3_END_QTY_1 + A.S1_END_RWK_QTY_1 + A.S2_END_RWK_QTY_1 + A.S3_END_RWK_QTY_1 ) AS QTY 
                          FROM RSUMWIPMOV A 
                             , MWIPOPRDEF B 
                         WHERE 1=1 
                           AND A.FACTORY = B.FACTORY 
                           AND A.OPER = B.OPER 
                           AND A.FACTORY = 'HMVA2' 
                           AND B.OPER_GRP_7 IN ('SAW','D/A','W/B','MOLD','SIG','V/I') 
                           AND A.MAT_VER = 1 
                           AND A.CM_KEY_3 LIKE 'P%'
                           AND A.WORK_DATE BETWEEN '20200520' AND '20200522'
                           AND A.LOT_TYPE = 'W'
                           AND A.OPER <> 'A1760'
                         GROUP BY A.MAT_ID, A.WORK_DATE,B.OPER,B.OPER_GRP_7 
                       ) 
                 GROUP BY MAT_ID 
               ) D  
             , ( 
                SELECT MAT_ID 
                     , ROUND(SUM(DECODE(OPER_GRP_1, 'HMK2A', QTY, 0)), 0) AS V0 
                     , ROUND(SUM(DECODE(OPER_GRP_1, 'B/G', QTY, 0)), 0) AS V1 
                     , ROUND(SUM(DECODE(OPER_GRP_1, 'SAW', QTY, 0)), 0) AS V2 
                     , ROUND(SUM(DECODE(OPER_GRP_1, 'S/P', QTY, 0)), 0) AS V3 
                     , ROUND(SUM(DECODE(OPER_GRP_1, 'D/A', QTY, 0)), 0) AS V4 
                     , ROUND(SUM(DECODE(OPER_GRP_1, 'W/B', QTY, 0)), 0) AS V5 
                     , ROUND(SUM(DECODE(OPER_GRP_1, 'MOLD', QTY, 0)), 0) AS V6 
                     , ROUND(SUM(DECODE(OPER_GRP_1, 'CURE', QTY, 0)), 0) AS V7 
                     , ROUND(SUM(DECODE(OPER_GRP_1, 'M/K', QTY, 0)), 0) AS V8 
                     , ROUND(SUM(DECODE(OPER_GRP_1, 'TRIM', QTY, 0)), 0) AS V9 
                     , ROUND(SUM(DECODE(OPER_GRP_1, 'TIN', QTY, 0)), 0) AS V10 
                     , ROUND(SUM(DECODE(OPER_GRP_1, 'S/B/A', QTY, 0)), 0) AS V11 
                     , ROUND(SUM(DECODE(OPER_GRP_1, 'SIG', QTY, 0)), 0) AS V12 
                     , ROUND(SUM(DECODE(OPER_GRP_1, 'AVI', QTY, 0)), 0) AS V13 
                     , ROUND(SUM(DECODE(OPER_GRP_1, 'V/I', QTY, 0)), 0) AS V14 
                     , ROUND(SUM(DECODE(OPER_GRP_1, 'HMK3A', QTY, 0)), 0) AS V15 
                     , ROUND(SUM(DECODE(OPER_GRP_1, 'GATE', QTY, 0)), 0) AS V16 
                     , ROUND(SUM(DECODE(OPER_GRP_1, 'SMT', QTY, 0)), 0) AS V17 
                  FROM (  
                        SELECT MAT_ID, OPER, OPER_GRP_1 
                             , CASE WHEN MAT_GRP_1 = 'HX' AND HX_COMP_MIN IS NOT NULL
                                         THEN (CASE WHEN HX_COMP_MIN <> HX_COMP_MAX AND OPER > HX_COMP_MIN AND OPER <= HX_COMP_MAX THEN QTY_1 / NVL(COMP_CNT / 2,1)
                                                    WHEN OPER <= HX_COMP_MAX THEN QTY_1 / NVL(COMP_CNT,1)
                                                    ELSE QTY_1 END)
                                    WHEN OPER <= 'A0395' THEN QTY_1 / NVL(COMP_CNT,1) 
                                    ELSE QTY_1 
                               END QTY 
                          FROM ( 
                                SELECT A.MAT_ID, B.OPER, C.MAT_GRP_1  
                                     , CASE WHEN C.MAT_GRP_3 IN ('FCBGA', 'FCFBGA') AND B.OPER = 'A0800' THEN 'D/A' ELSE B.OPER_GRP_1 END OPER_GRP_1  
                                     , CASE WHEN MAT_GRP_3 IN ('COB', 'BGN') THEN QTY_1/NET_DIE ELSE QTY_1 END AS QTY_1
                                     , COMP_CNT  
                                     , HX_COMP_MIN, HX_COMP_MAX 
                                  FROM RWIPLOTSTS A  
                                     , MWIPOPRDEF B  
                                     , VWIPMATDEF C 
                                 WHERE 1 = 1 
                                   AND A.FACTORY = B.FACTORY 
                                   AND A.FACTORY = C.FACTORY 
                                   AND A.OPER = B.OPER 
                                   AND A.MAT_ID = C.MAT_ID 
                                   AND A.FACTORY = 'HMVA2'  
                                   AND A.LOT_TYPE = 'W' 
                                   AND A.LOT_DEL_FLAG = ' ' 
                                   AND C.DELETE_FLAG = ' ' 
                                   AND C.MAT_GRP_2 <> '-' 
                                   AND A.HOLD_CODE NOT IN ('H71','H54') 
                                   AND REGEXP_LIKE(C.MAT_GRP_5, 'Middle*|Merge|1st|-') 
                                   AND A.LOT_CMF_5 LIKE 'P%'
                               ) 
                       )  
                 GROUP BY MAT_ID 
               ) F 
         WHERE 1 = 1 
           AND A.MAT_ID = D.MAT_ID(+)
           AND A.MAT_ID = F.MAT_ID(+)
           AND A.MAT_ID LIKE '%' 
         GROUP BY A.MAT_GRP_1, A.MAT_GRP_9, A.MAT_GRP_10,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' '
        HAVING (
                NVL(SUM(A.MON_PLAN), 0)+ 
                NVL(SUM(A.ORI_PLAN), 0)+ 
                NVL(SUM(A.ASSY_MON), 0)+ 
                NVL(SUM(A.WEEK_PLAN), 0)+ 
                NVL(SUM(A.AO0), 0)+ NVL(SUM(A.AO1), 0)+ NVL(SUM(A.AO2), 0)+ 
                NVL(SUM(A.RCV0), 0)+ NVL(SUM(A.RCV1), 0)+ NVL(SUM(A.RCV2), 0)+ 
                NVL(SUM(D.SW0), 0)+ NVL(SUM(D.SW1), 0)+ NVL(SUM(D.SW2), 0)+ 
                NVL(SUM(D.DA0), 0)+ NVL(SUM(D.DA1), 0)+ NVL(SUM(D.DA2), 0)+ 
                NVL(SUM(D.WB0), 0)+ NVL(SUM(D.WB1), 0)+ NVL(SUM(D.WB2), 0)+ 
                NVL(SUM(D.MD0), 0)+ NVL(SUM(D.MD1), 0)+ NVL(SUM(D.MD2), 0)+  
                NVL(SUM(D.TF0), 0)+ NVL(SUM(D.TF0), 0)+ NVL(SUM(D.TF0), 0)+ 
                NVL(SUM(F.V0+F.V1+F.V2+F.V3+F.V4+F.V5+F.V6+F.V7+F.V8+F.V9+F.V10+F.V11+F.V12+F.V13+F.V14+F.V15+F.V16+F.V17), 0)  
               ) <> 0
       ) A 
     , ( 
        SELECT MAT_GRP_1 AS CUSTOMER
             , MAT_GRP_10 AS PKG 
             , SUM(DECODE(SHIP_DATE,'20200520', TAT, 0)) AS TAT0 
             , SUM(DECODE(SHIP_DATE,'20200521', TAT, 0)) AS TAT1 
             , SUM(DECODE(SHIP_DATE,'20200522', TAT, 0)) AS TAT2 
          FROM ( 
                SELECT MAT.MAT_GRP_1,MAT.MAT_GRP_10,TAT.SHIP_DATE,SUM(TAT.TOTAL_TAT_QTY),SUM(SHIP.SHIP_QTY),ROUND(DECODE(SUM(SHIP.SHIP_QTY),0,0,(SUM(TAT.TOTAL_TAT_QTY)/SUM(SHIP.SHIP_QTY))),4) AS TAT 
                  FROM ( 
                        SELECT FACTORY,MAT_ID,SHIP_DATE 
                             , ROUND(SUM(TOTAL_TAT_QTY),4) AS TOTAL_TAT_QTY 
                          FROM CSUMTATMAT@RPTTOMES 
                         WHERE 1=1 
                           AND FACTORY = 'HMVA2' 
                           AND OPER <> 'A0000' 
                           AND SHIP_DATE BETWEEN '20200520' AND '20200522'
                         GROUP BY FACTORY,MAT_ID,SHIP_DATE 
                       ) TAT 
                     , ( 
                        SELECT FACTORY,MAT_ID,SHIP_DATE,SHIP_QTY 
                          FROM CSUMTATMAT@RPTTOMES 
                         WHERE 1=1 
                           AND FACTORY = 'HMVA2' 
                           AND OPER = 'AZ010' 
                           AND SHIP_DATE BETWEEN '20200520' AND '20200522'
                       ) SHIP 
                     , MWIPMATDEF MAT 
                 WHERE 1=1 
                   AND TAT.FACTORY = SHIP.FACTORY 
                   AND TAT.MAT_ID = SHIP.MAT_ID 
                   AND TAT.SHIP_DATE = SHIP.SHIP_DATE 
                   AND TAT.MAT_ID = MAT.MAT_ID 
                   AND MAT.MAT_TYPE = 'FG' 
                   AND MAT.DELETE_FLAG <> 'Y' 
                   AND MAT.FACTORY = 'HMVA2' 
                 GROUP BY MAT_GRP_1,MAT_GRP_10,TAT.SHIP_DATE
               ) 
         GROUP BY MAT_GRP_1, MAT_GRP_10 
       ) B  
 WHERE 1=1 
   AND A.CUSTOMER = B.CUSTOMER(+) 
   AND A.PKG = B.PKG(+) 
   AND A.PKG <> '-' 
   AND NVL(ORI_PLAN,0) + NVL(MON_PLAN,0) + NVL(TARGET_MON,0) + NVL(ASSY_MON,0) + NVL(WEEK_PLAN,0) + NVL(DEF,0) + NVL(AO0,0) + NVL(AO1,0) + NVL(AO2,0) + NVL(A.RCV0,0) + NVL(A.RCV1,0) + NVL(A.RCV2,0) + NVL(A.SW0,0) 
     + NVL(A.SW1,0) + NVL(A.SW2,0) + NVL(A.DA0,0) + NVL(A.DA1,0) + NVL(A.DA2,0) + NVL(A.WB0,0) + NVL(A.WB1,0) + NVL(A.WB2,0) + NVL(A.MD0,0) + NVL(A.MD1,0) + NVL(A.MD2,0) + NVL(A.TF0,0) 
     + NVL(A.TF1,0) + NVL(A.TF2,0) + NVL(TTL,0) <> 0 
 ORDER BY DECODE(A.CUSTOMER, 'SE', 1, 'HX', 2, 'IM', 3, 'FC', 4, 'IG', 5, 6),CUSTOMER, A.MAJOR, A.PKG,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' '

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE) AS START_DAY 
     , MAX(SYS_DATE) AS END_DAY 
     , PLAN_YEAR||DECODE(LENGTH(PLAN_WEEK), 1, '0'||PLAN_WEEK, PLAN_WEEK) AS WEEK
  FROM MWIPCALDEF 
 WHERE CALENDAR_ID = 'OTD'
   AND (PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) IN ( 
                                                SELECT WW
                                                  FROM (
                                                        SELECT WW
                                                             , ROW_NUMBER() OVER(ORDER BY WW) AS RNK
                                                          FROM (
                                                                SELECT DISTINCT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW
                                                                  FROM MWIPCALDEF
                                                                 WHERE CALENDAR_ID = 'OTD'
                                                                   AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') >= (
                                                                                                              SELECT MAX(PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) AS WW
                                                                                                                FROM MWIPCALDEF
                                                                                                               WHERE CALENDAR_ID = 'OTD'
                                                                                                                 AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') < (SELECT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW FROM MWIPCALDEF WHERE CALENDAR_ID = 'OTD' AND SYS_DATE = '20200503')
                                                                                                                 AND SYS_DATE >= TO_CHAR(TO_DATE('20200503', 'YYYYMMDD')-14, 'YYYYMMDD')
                                                                                                             )
                                                               ) 
                                                       )
                                                 WHERE RNK <= 7
                                               ) 
 GROUP BY PLAN_YEAR, PLAN_WEEK 
 ORDER BY PLAN_YEAR, PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
(SELECT TO_CHAR(LAST_DAY(TO_DATE('202004', 'YYYYMM')),'YYYYMMDD') FROM DUAL)
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
(SELECT TO_CHAR(LAST_DAY(TO_DATE('202005', 'YYYYMM')),'YYYYMMDD') FROM DUAL)
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE-1) 
  FROM MWIPCALDEF 
 WHERE 1=1
   AND CALENDAR_ID='SE'
   AND PLAN_YEAR='2020'
   AND PLAN_WEEK=(
                  SELECT PLAN_WEEK 
                    FROM MWIPCALDEF 
                   WHERE 1=1 
                     AND CALENDAR_ID='SE' 
                     AND SYS_DATE=TO_CHAR(TO_DATE('20200503','YYYYMMDD'),'YYYYMMDD')
                 )

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT (SELECT DATA_1 FROM MGCMTBLDAT@RPTTOMES WHERE FACTORY = 'HMVA2' AND TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = A.CUSTOMER) AS CUSTOMER, A.MAJOR, A.PKG,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' '
     , A.ORI_PLAN AS "월계획"
     , A.MON_PLAN AS "월계획Rev"
     , A.MON_PLAN -A.ORI_PLAN AS "월계획 차이"
     , A.TARGET_MON, A.ASSY_MON
     , DECODE(A.MON_PLAN, 0, 0, ROUND((A.ASSY_MON/A.MON_PLAN)*100, 1)) JINDO, A.DEF, WEEK_PLAN, ASSY_WEEK, WEEK_PLAN-ASSY_WEEK AS "주계획 차이"
     , A.HMK3A, A.FINISH, A.MOLD, A.WB_AFTER, A.DA + A.WB_BEFORE, A.SAW, A.STOCK, A.HMK3A+A.FINISH+A.MOLD+A.WB_AFTER+A.WB_BEFORE+A.DA+A.SAW+A.STOCK AS TTL, A.TARGET_DAY AS "일목표", A.AO0, A.AO1, A.AO2
     , A.RCV0, A.RCV1, A.RCV2, A.SW0, A.SW1, A.SW2, A.DA0, A.DA1, A.DA2, A.WB0, A.WB1, A.WB2, A.MD0, A.MD1, A.MD2, A.TF0, A.TF1, A.TF2 
     , ROUND(B.TAT2*24,2)
     , CASE WHEN HIST_AO > 0 THEN '●' END AS HIST_AO
  FROM ( 
        SELECT A.MAT_GRP_1 AS CUSTOMER, A.MAT_GRP_9 AS MAJOR, A.MAT_GRP_10 AS PKG,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' '
             , SUM(NVL(A.MON_PLAN,0)) AS MON_PLAN 
             , SUM(NVL(A.ORI_PLAN,0)) AS ORI_PLAN 
             , SUM(NVL(A.WEEK_PLAN,0)) AS WEEK_PLAN 
             , SUM(NVL(A.ASSY_WEEK,0)) AS ASSY_WEEK 
             , ROUND(((SUM(NVL(A.MON_PLAN,0)) * 9.7) / 100),0) AS TARGET_MON 
             , SUM(NVL(A.ASSY_MON,0)) AS ASSY_MON 
             , SUM(NVL(A.ASSY_MON,0)) - ROUND(((SUM(NVL(A.MON_PLAN,0)) * 9.7) / 100),1) AS DEF   
             , SUM(NVL(A.AO0,0)) AS AO0 
             , SUM(NVL(A.AO1,0)) AS AO1 
             , SUM(NVL(A.AO2,0)) AS AO2 
             , ROUND(((SUM(NVL(A.MON_PLAN,0)) - SUM(NVL(A.ASSY_MON,0))) /28), 1) AS TARGET_DAY 
             , SUM(NVL(A.RCV0,0)) AS RCV0
             , SUM(NVL(A.RCV1,0)) AS RCV1
             , SUM(NVL(A.RCV2,0)) AS RCV2
             , ROUND(SUM(NVL((CASE WHEN A.MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND MAT_ID LIKE 'SEKS%') THEN DECODE(A.MAT_GRP_5, '2nd', D.SW0 / COMP_CNT, 0)
                                   WHEN A.MAT_GRP_3 IN ('COB', 'BGN') THEN D.SW0 / NET_DIE
                                   WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN CASE WHEN A.MAT_GRP_5 IN ('1st','Merge') OR MAT_GRP_5 LIKE 'Middle%' THEN D.SW0 / DECODE(A.MAT_GRP_1,'HX',1, COMP_CNT) ELSE 0 END 
                                   ELSE D.SW0 / DECODE(A.MAT_GRP_1,'HX',1, COMP_CNT)
                              END),0)
                    ),0) AS SW0
             , ROUND(SUM(NVL((CASE WHEN A.MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND MAT_ID LIKE 'SEKS%') THEN DECODE(A.MAT_GRP_5, '2nd', D.SW1 / COMP_CNT, 0)
                                   WHEN A.MAT_GRP_3 IN ('COB', 'BGN') THEN D.SW1 / NET_DIE
                                   WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN CASE WHEN A.MAT_GRP_5 IN ('1st','Merge') OR MAT_GRP_5 LIKE 'Middle%' THEN D.SW1 / DECODE(A.MAT_GRP_1,'HX',1,COMP_CNT) ELSE 0 END 
                                   ELSE D.SW1 / DECODE(A.MAT_GRP_1,'HX',1,COMP_CNT)
                              END),0)
                    ),0) AS SW1
             , ROUND(SUM(NVL((CASE WHEN A.MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND MAT_ID LIKE 'SEKS%') THEN DECODE(A.MAT_GRP_5, '2nd', D.SW2 / COMP_CNT, 0)
                                   WHEN A.MAT_GRP_3 IN ('COB', 'BGN') THEN D.SW2 / NET_DIE
                                   WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN CASE WHEN A.MAT_GRP_5 IN ('1st','Merge') OR MAT_GRP_5 LIKE 'Middle%' THEN D.SW2 / DECODE(A.MAT_GRP_1,'HX',1,COMP_CNT) ELSE 0 END 
                                   ELSE D.SW2 / DECODE(A.MAT_GRP_1,'HX',1,COMP_CNT)
                              END),0)
                    ),0) AS SW2
             , SUM(NVL((CASE WHEN A.MAT_GRP_1 = 'SE' AND A.MAT_GRP_9 = 'MEMORY' AND A.MAT_GRP_5 <> '-' THEN (CASE WHEN A.MAT_GRP_5 = 'Merge' THEN NVL(D.DA02,0) + NVL(D.DA03,0) + NVL(D.DA04,0) + NVL(D.DA05,0) + NVL(D.DA06,0) + NVL(D.DA07,0) + NVL(D.DA08,0) + NVL(D.DA09,0) ELSE 0 END)
                             WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN DECODE(SUBSTR(MAT_GRP_4,-1), '2', D.DA02, '3', D.DA03, '4', D.DA04, '5', D.DA05, '6', D.DA06, '7', D.DA07, '8', D.DA08, '9', D.DA09, 0)
                             ELSE D.DA0
                        END),0)
                   ) AS DA0
             , SUM(NVL((CASE WHEN A.MAT_GRP_1 = 'SE' AND A.MAT_GRP_9 = 'MEMORY' AND A.MAT_GRP_5 <> '-' THEN (CASE WHEN A.MAT_GRP_5 = 'Merge' THEN NVL(D.DA12,0) + NVL(D.DA13,0) + NVL(D.DA14,0) + NVL(D.DA15,0) + NVL(D.DA16,0) + NVL(D.DA17,0) + NVL(D.DA18,0) + NVL(D.DA19,0) ELSE 0 END)
                             WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN DECODE(SUBSTR(MAT_GRP_4,-1), '2', D.DA12, '3', D.DA13, '4', D.DA14, '5', D.DA15, '6', D.DA16, '7', D.DA17, '8', D.DA18, '9', D.DA19, 0)
                             ELSE D.DA1
                        END),0)
                   ) AS DA1
             , SUM(NVL((CASE WHEN A.MAT_GRP_1 = 'SE' AND A.MAT_GRP_9 = 'MEMORY' AND A.MAT_GRP_5 <> '-' THEN (CASE WHEN A.MAT_GRP_5 = 'Merge' THEN NVL(D.DA22,0) + NVL(D.DA23,0) + NVL(D.DA24,0) + NVL(D.DA25,0) + NVL(D.DA26,0) + NVL(D.DA27,0) + NVL(D.DA28,0) + NVL(D.DA29,0) ELSE 0 END)
                             WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN DECODE(SUBSTR(MAT_GRP_4,-1), '2', D.DA22, '3', D.DA23, '4', D.DA24, '5', D.DA25, '6', D.DA26, '7', D.DA27, '8', D.DA28, '9', D.DA29, 0)
                             ELSE D.DA2
                        END),0)
                   ) AS DA2
             , SUM(NVL((CASE WHEN A.MAT_GRP_1 = 'SE' AND A.MAT_GRP_9 = 'MEMORY' AND A.MAT_GRP_5 <> '-' THEN (CASE WHEN A.MAT_GRP_5 = 'Merge' THEN NVL(D.WB02,0) + NVL(D.WB03,0) + NVL(D.WB04,0) + NVL(D.WB05,0) + NVL(D.WB06,0) + NVL(D.WB07,0) + NVL(D.WB08,0) + NVL(D.WB09,0) ELSE 0 END)
                             WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN DECODE(SUBSTR(MAT_GRP_4,-1), '2', D.WB02, '3', D.WB03, '4', D.WB04, '5', D.WB05, '6', D.WB06, '7', D.WB07, '8', D.WB08, '9', D.WB09, 0)
                             ELSE D.WB0
                        END),0)
                   ) AS WB0
             , SUM(NVL((CASE WHEN A.MAT_GRP_1 = 'SE' AND A.MAT_GRP_9 = 'MEMORY' AND A.MAT_GRP_5 <> '-' THEN (CASE WHEN A.MAT_GRP_5 = 'Merge' THEN NVL(D.WB12,0) + NVL(D.WB13,0) + NVL(D.WB14,0) + NVL(D.WB15,0) + NVL(D.WB16,0) + NVL(D.WB17,0) + NVL(D.WB18,0) + NVL(D.WB19,0) ELSE 0 END)
                             WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN DECODE(SUBSTR(MAT_GRP_4,-1), '2', D.WB12, '3', D.WB13, '4', D.WB14, '5', D.WB15, '6', D.WB16, '7', D.WB17, '8', D.WB18, '9', D.WB19, 0)
                             ELSE D.WB1
                        END),0)
                   ) AS WB1
             , SUM(NVL((CASE WHEN A.MAT_GRP_1 = 'SE' AND A.MAT_GRP_9 = 'MEMORY' AND A.MAT_GRP_5 <> '-' THEN (CASE WHEN A.MAT_GRP_5 = 'Merge' THEN NVL(D.WB22,0) + NVL(D.WB23,0) + NVL(D.WB24,0) + NVL(D.WB25,0) + NVL(D.WB26,0) + NVL(D.WB27,0) + NVL(D.WB28,0) + NVL(D.WB29,0) ELSE 0 END)
                             WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN DECODE(SUBSTR(MAT_GRP_4,-1), '2', D.WB22, '3', D.WB23, '4', D.WB24, '5', D.WB25, '6', D.WB26, '7', D.WB27, '8', D.WB28, '9', D.WB29, 0)
                             ELSE D.WB2
                        END),0)
                   ) AS WB2
             , SUM(NVL(D.MD0,0)) AS MD0, SUM(NVL(D.MD1,0)) AS MD1, SUM(NVL(D.MD2,0)) AS MD2 
             , SUM(NVL(D.TF0,0)) AS TF0, SUM(NVL(D.TF1,0)) AS TF1, SUM(NVL(D.TF2,0)) AS TF2 
             , SUM(NVL(F.V0,0)) AS STOCK
             , SUM(NVL(F.V1,0)+NVL(F.V2,0)) AS SAW
             , SUM(NVL(F.V3,0)+NVL(F.V4,0)+NVL(F.V17,0)) AS DA
             , SUM(NVL((CASE WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN CASE WHEN A.MAT_GRP_5 = '1st' OR MAT_GRP_5 LIKE 'Middle%' THEN NVL(F.V5+F.V16,0) ELSE 0 END
                             ELSE 0
                        END),0)
                    ) AS WB_BEFORE
             , SUM(NVL((CASE WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN CASE WHEN A.MAT_GRP_5 = 'Merge' THEN NVL(F.V5+F.V16,0) ELSE 0 END
                             ELSE NVL(F.V5+F.V16,0)
                        END),0)
                    ) AS WB_AFTER
             , SUM(NVL(F.V6,0)+NVL(F.V7,0)) AS MOLD
             , SUM(NVL(F.V8+F.V9+F.V10+F.V11+F.V12+F.V13+F.V14,0)) AS FINISH
             , SUM(NVL(F.V15,0)) AS HMK3A
             , SUM(NVL(F.V0+F.V1+F.V2+F.V3+F.V4+F.V5+F.V6+F.V7+F.V8+F.V9+F.V10+F.V11+F.V12+F.V13+F.V14+F.V15+F.V16+F.V17,0)) AS TTL
             , SUM(HIST_AO) AS HIST_AO 
          FROM ( 
                SELECT MAT.MAT_GRP_1, MAT.MAT_GRP_2, MAT.MAT_GRP_3, MAT.MAT_GRP_4, MAT.MAT_GRP_5, MAT.MAT_GRP_6, MAT.MAT_GRP_7, MAT.MAT_GRP_8 
                     , DECODE(MAT.MAT_GRP_1,'SE',MAT.MAT_GRP_9,' ') AS MAT_GRP_9, MAT.MAT_GRP_10, MAT.MAT_CMF_10, MAT.MAT_ID, MAT.MAT_CMF_7, MAT.NET_DIE, MAT.MAT_CMF_11, MAT.COMP_CNT  
                     , CASE WHEN MAT.MAT_GRP_3 IN ('COB') THEN ROUND(SUM(PLAN.RESV_FIELD1 / MAT.NET_DIE),0)
                            ELSE SUM(PLAN.RESV_FIELD1)
                       END MON_PLAN
                     , CASE WHEN MAT.MAT_GRP_3 IN ('COB') THEN ROUND(SUM(PLAN.PLAN_QTY_ASSY / MAT.NET_DIE),0)
                            ELSE SUM(PLAN.PLAN_QTY_ASSY)
                       END ORI_PLAN
                     , CASE WHEN MAT.MAT_GRP_3 IN ('COB') THEN ROUND(SUM(WEEK_PLAN.WEEK_PLAN / MAT.NET_DIE),0)
                            ELSE SUM(WEEK_PLAN.WEEK_PLAN)
                            END WEEK_PLAN
                     , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN ROUND(SUM(WEEK_AO.WEEK_AO / MAT.NET_DIE),0)
                            ELSE SUM(WEEK_AO.WEEK_AO)
                            END ASSY_WEEK
                     , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN ROUND(SUM(MON_AO.ASSY_MON / MAT.NET_DIE),0)
                            ELSE SUM(MON_AO.ASSY_MON)
                       END ASSY_MON
                     , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN ROUND(SUM(MON_AO.AO0 / MAT.NET_DIE),0)
                            ELSE SUM(MON_AO.AO0)
                       END AO0
                     , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN ROUND(SUM(MON_AO.AO1 / MAT.NET_DIE),0)
                            ELSE SUM(MON_AO.AO1)
                       END AO1
                     , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN ROUND(SUM(MON_AO.AO2 / MAT.NET_DIE),0)
                            ELSE SUM(MON_AO.AO2)
                       END AO2
                     , ROUND(CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN ROUND(SUM(DAY_RCV.RCV0 / MAT.NET_DIE),0)
                                  WHEN MAT.MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND MAT_ID LIKE 'SEKS%') THEN DECODE(MAT.MAT_GRP_5, '2nd', SUM(DAY_RCV.RCV0 / MAT.COMP_CNT), 0)
                                  WHEN MAT.MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT.MAT_GRP_5 <> '-' THEN CASE WHEN MAT.MAT_GRP_5 IN ('1st','Merge') OR MAT.MAT_GRP_5 LIKE 'Middle%' THEN SUM(DAY_RCV.RCV0 / MAT.COMP_CNT) ELSE 0 END 
                                  ELSE SUM(DAY_RCV.RCV0 / MAT.COMP_CNT)
                             END, 0) AS RCV0
                     , ROUND(CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN ROUND(SUM(DAY_RCV.RCV1 / MAT.NET_DIE),0)
                                  WHEN MAT.MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND MAT_ID LIKE 'SEKS%') THEN DECODE(MAT.MAT_GRP_5, '2nd', SUM(DAY_RCV.RCV1 / MAT.COMP_CNT), 0)
                                  WHEN MAT.MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT.MAT_GRP_5 <> '-' THEN CASE WHEN MAT.MAT_GRP_5 IN ('1st','Merge') OR MAT.MAT_GRP_5 LIKE 'Middle%' THEN SUM(DAY_RCV.RCV1 / MAT.COMP_CNT) ELSE 0 END 
                                  ELSE SUM(DAY_RCV.RCV1 / MAT.COMP_CNT)
                             END, 0) AS RCV1
                     , ROUND(CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN ROUND(SUM(DAY_RCV.RCV2 / MAT.NET_DIE),0)
                                  WHEN MAT.MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND MAT_ID LIKE 'SEKS%') THEN DECODE(MAT.MAT_GRP_5, '2nd', SUM(DAY_RCV.RCV2 / MAT.COMP_CNT), 0)
                                  WHEN MAT.MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT.MAT_GRP_5 <> '-' THEN CASE WHEN MAT.MAT_GRP_5 IN ('1st','Merge') OR MAT.MAT_GRP_5 LIKE 'Middle%' THEN SUM(DAY_RCV.RCV2 / MAT.COMP_CNT) ELSE 0 END 
                                  ELSE SUM(DAY_RCV.RCV2 / MAT.COMP_CNT)
                             END, 0) AS RCV2
                     , SUM(HIST_AO.HIST_AO) AS HIST_AO 
                  FROM VWIPMATDEF MAT 
                     , ( 
                        SELECT FACTORY,MAT_ID,PLAN_QTY_ASSY,PLAN_MONTH, RESV_FIELD1 
                          FROM ( 
                                SELECT FACTORY, MAT_ID, SUM(PLAN_QTY_ASSY) AS PLAN_QTY_ASSY, PLAN_MONTH, SUM(RESV_FIELD1) AS RESV_FIELD1  
                                  FROM ( 
                                        SELECT FACTORY, MAT_ID, SUM(PLAN_QTY_ASSY) AS PLAN_QTY_ASSY, PLAN_MONTH, SUM(TO_NUMBER(DECODE(RESV_FIELD1,' ',0,RESV_FIELD1))) AS RESV_FIELD1 
                                          FROM CWIPPLNMON 
                                         WHERE 1=1 
                                           AND FACTORY = 'HMVA2' 
                                         GROUP BY FACTORY, MAT_ID, PLAN_MONTH 
                                       ) 
                                 GROUP BY FACTORY, MAT_ID,PLAN_MONTH 
                               ) 
                       ) PLAN 
                     , ( 
                        SELECT FACTORY,MAT_ID, SUM(WW_QTY) AS WEEK_PLAN 
                          FROM RWIPPLNWEK 
                         WHERE FACTORY = 'HMVA2' 
                           AND PLAN_WEEK = '202019'
                           AND GUBUN = '3' 
                        GROUP BY FACTORY,MAT_ID 
                       ) WEEK_PLAN 
                     , ( 
                        SELECT MAT_ID 
                             , SUM(AO0) AS AO0 
                             , SUM(AO1) AS AO1 
                             , SUM(AO2) AS AO2 
                             , SUM(ASSY_MON) AS ASSY_MON 
                          FROM (
                                SELECT MAT_ID 
                                     , SUM(DECODE(WORK_DATE,'20200501', NVL(S1_FAC_OUT_QTY_1 + S2_FAC_OUT_QTY_1 + S3_FAC_OUT_QTY_1 + S4_FAC_OUT_QTY_1, 0), 0)) AS AO0 
                                     , SUM(DECODE(WORK_DATE,'20200502', NVL(S1_FAC_OUT_QTY_1 + S2_FAC_OUT_QTY_1 + S3_FAC_OUT_QTY_1 + S4_FAC_OUT_QTY_1, 0), 0)) AS AO1
                                     , SUM(DECODE(WORK_DATE,'20200503', NVL(S1_FAC_OUT_QTY_1 + S2_FAC_OUT_QTY_1 + S3_FAC_OUT_QTY_1 + S4_FAC_OUT_QTY_1, 0), 0)) AS AO2
                                     , 0 AS ASSY_MON  
                                  FROM RSUMFACMOV 
                                 WHERE 1=1 
                                   AND WORK_DATE BETWEEN '20200501' AND '20200503'
                                   AND LOT_TYPE = 'W' 
                                   AND CM_KEY_1 = 'HMVA2' 
                                   AND CM_KEY_2 = 'PROD' 
                                   AND CM_KEY_3 LIKE 'P%'
                                   AND FACTORY NOT IN ('RETURN') 
                                 GROUP BY MAT_ID 
                                 UNION ALL 
                                SELECT MAT_ID 
                                     , 0, 0, 0 
                                     , SUM(SHP_QTY_1) AS ASSY_MON 
                                  FROM VSUMWIPOUT 
                                 WHERE 1=1 
                                   AND WORK_DATE BETWEEN '20200501' AND '20200503'
                                   AND FACTORY = 'HMVA2' 
                                   AND LOT_TYPE = 'W' 
                                   AND CM_KEY_2 = 'PROD' 
                                   AND CM_KEY_3 LIKE 'P%'
                                 GROUP BY MAT_ID 
                               ) 
                         GROUP BY MAT_ID 
                       ) MON_AO 
                     , ( 
                        SELECT MAT_ID 
                             , SUM(NVL(S1_FAC_OUT_QTY_1 + S2_FAC_OUT_QTY_1 + S3_FAC_OUT_QTY_1 + S4_FAC_OUT_QTY_1, 0)) AS WEEK_AO  
                          FROM RSUMFACMOV 
                         WHERE 1=1 
                           AND WORK_DATE BETWEEN '20200502' AND '20200503'
                           AND LOT_TYPE = 'W' 
                           AND CM_KEY_1 = 'HMVA2' 
                           AND CM_KEY_2 = 'PROD' 
                           AND CM_KEY_3 LIKE 'P%'
                           AND FACTORY NOT IN ('RETURN') 
                         GROUP BY MAT_ID 
                       ) WEEK_AO 
                     , ( 
                        SELECT MAT_ID 
                             , SUM(DECODE(WORK_DATE,'20200501', NVL(RCV_QTY_1,0), 0)) AS RCV0
                             , SUM(DECODE(WORK_DATE,'20200502', NVL(RCV_QTY_1,0), 0)) AS RCV1
                             , SUM(DECODE(WORK_DATE,'20200503', NVL(RCV_QTY_1,0), 0)) AS RCV2
                          FROM VSUMWIPRCV 
                         WHERE 1=1 
                           AND WORK_DATE BETWEEN '20200501' AND '20200503'
                           AND LOT_TYPE = 'W' 
                           AND FACTORY = 'HMVA2' 
                           AND CM_KEY_2 = 'PROD' 
                           AND CM_KEY_3 LIKE 'P%'
                         GROUP BY MAT_ID 
                       ) DAY_RCV  
                     , ( 
                        SELECT MAT_ID 
                             , SUM(NVL(S1_FAC_OUT_QTY_1 + S2_FAC_OUT_QTY_1 + S3_FAC_OUT_QTY_1 + S4_FAC_OUT_QTY_1, 0)) AS HIST_AO  
                          FROM RSUMFACMOV 
                         WHERE 1=1 
                           AND WORK_DATE BETWEEN TO_CHAR(ADD_MONTHS('20200503', -6), 'YYYYMMDD') AND '20200503'
                           AND LOT_TYPE = 'W' 
                           AND CM_KEY_1 = 'HMVA2' 
                           AND CM_KEY_2 = 'PROD' 
                           AND CM_KEY_3 LIKE 'P%'
                           AND FACTORY NOT IN ('RETURN') 
                         GROUP BY MAT_ID 
                       ) HIST_AO 
                 WHERE 1 = 1 
                   AND MAT.FACTORY =PLAN.FACTORY(+) 
                   AND MAT.FACTORY =WEEK_PLAN.FACTORY(+) 
                   AND MAT.MAT_ID = PLAN.MAT_ID(+) 
                   AND MAT.MAT_ID = WEEK_PLAN.MAT_ID(+) 
                   AND MAT.MAT_ID = MON_AO.MAT_ID(+) 
                   AND MAT.MAT_ID = WEEK_AO.MAT_ID(+) 
                   AND MAT.MAT_ID = DAY_RCV.MAT_ID(+) 
                   AND MAT.MAT_ID = HIST_AO.MAT_ID(+) 
                   AND MAT.FACTORY = 'HMVA2' 
                   AND PLAN.PLAN_MONTH(+) = '202005' 
                   AND MAT.MAT_TYPE= 'FG' 
                   AND MAT.DELETE_FLAG <> 'Y' 
                 GROUP BY MAT.MAT_GRP_1, MAT.MAT_GRP_2, MAT.MAT_GRP_3, MAT.MAT_GRP_4, MAT.MAT_GRP_5, MAT.MAT_GRP_6, MAT.MAT_GRP_7, MAT.MAT_GRP_8, MAT.MAT_GRP_9, MAT.MAT_GRP_10, MAT.MAT_CMF_10, MAT.MAT_ID, MAT.MAT_CMF_7, MAT.NET_DIE, MAT.MAT_CMF_11, MAT.COMP_CNT
               ) A  
             , ( 
                SELECT MAT_ID 
                     , SUM(DECODE(OPER, 'A0200', DECODE(WORK_DATE,'20200501', QTY,0))) AS SW0
                     , SUM(DECODE(OPER, 'A0200', DECODE(WORK_DATE,'20200502', QTY,0))) AS SW1
                     , SUM(DECODE(OPER, 'A0200', DECODE(WORK_DATE,'20200503', QTY,0))) AS SW2
                     , SUM(DECODE(OPER_GRP_7, 'D/A', DECODE(WORK_DATE,'20200501', QTY,0))) AS DA0
                     , SUM(DECODE(OPER_GRP_7, 'D/A', DECODE(WORK_DATE,'20200502', QTY,0))) AS DA1
                     , SUM(DECODE(OPER_GRP_7, 'D/A', DECODE(WORK_DATE,'20200503', QTY,0))) AS DA2
                     , SUM(DECODE(OPER_GRP_7, 'W/B', DECODE(WORK_DATE,'20200501', QTY,0))) AS WB0
                     , SUM(DECODE(OPER_GRP_7, 'W/B', DECODE(WORK_DATE,'20200502', QTY,0))) AS WB1
                     , SUM(DECODE(OPER_GRP_7, 'W/B', DECODE(WORK_DATE,'20200503', QTY,0))) AS WB2
                     , SUM(DECODE(OPER_GRP_7, 'MOLD', DECODE(WORK_DATE,'20200501', QTY,0))) AS MD0
                     , SUM(DECODE(OPER_GRP_7, 'MOLD', DECODE(WORK_DATE,'20200502', QTY,0))) AS MD1
                     , SUM(DECODE(OPER_GRP_7, 'MOLD', DECODE(WORK_DATE,'20200503', QTY,0))) AS MD2
                     , SUM(DECODE(OPER_GRP_7, 'SIG', DECODE(WORK_DATE,'20200501', QTY,0))) AS TF0
                     , SUM(DECODE(OPER_GRP_7, 'SIG', DECODE(WORK_DATE,'20200502', QTY,0))) AS TF1
                     , SUM(DECODE(OPER_GRP_7, 'SIG', DECODE(WORK_DATE,'20200503', QTY,0))) AS TF2
                     , SUM(DECODE(OPER, 'A0402', DECODE(WORK_DATE,'20200501', QTY,0))) AS DA02
                     , SUM(DECODE(OPER, 'A0402', DECODE(WORK_DATE,'20200502', QTY,0))) AS DA12
                     , SUM(DECODE(OPER, 'A0402', DECODE(WORK_DATE,'20200503', QTY,0))) AS DA22
                     , SUM(DECODE(OPER, 'A0403', DECODE(WORK_DATE,'20200501', QTY,0))) AS DA03
                     , SUM(DECODE(OPER, 'A0403', DECODE(WORK_DATE,'20200502', QTY,0))) AS DA13
                     , SUM(DECODE(OPER, 'A0403', DECODE(WORK_DATE,'20200503', QTY,0))) AS DA23
                     , SUM(DECODE(OPER, 'A0404', DECODE(WORK_DATE,'20200501', QTY,0))) AS DA04
                     , SUM(DECODE(OPER, 'A0404', DECODE(WORK_DATE,'20200502', QTY,0))) AS DA14
                     , SUM(DECODE(OPER, 'A0404', DECODE(WORK_DATE,'20200503', QTY,0))) AS DA24
                     , SUM(DECODE(OPER, 'A0405', DECODE(WORK_DATE,'20200501', QTY,0))) AS DA05
                     , SUM(DECODE(OPER, 'A0405', DECODE(WORK_DATE,'20200502', QTY,0))) AS DA15
                     , SUM(DECODE(OPER, 'A0405', DECODE(WORK_DATE,'20200503', QTY,0))) AS DA25
                     , SUM(DECODE(OPER, 'A0406', DECODE(WORK_DATE,'20200501', QTY,0))) AS DA06
                     , SUM(DECODE(OPER, 'A0406', DECODE(WORK_DATE,'20200502', QTY,0))) AS DA16
                     , SUM(DECODE(OPER, 'A0406', DECODE(WORK_DATE,'20200503', QTY,0))) AS DA26
                     , SUM(DECODE(OPER, 'A0407', DECODE(WORK_DATE,'20200501', QTY,0))) AS DA07
                     , SUM(DECODE(OPER, 'A0407', DECODE(WORK_DATE,'20200502', QTY,0))) AS DA17
                     , SUM(DECODE(OPER, 'A0407', DECODE(WORK_DATE,'20200503', QTY,0))) AS DA27
                     , SUM(DECODE(OPER, 'A0408', DECODE(WORK_DATE,'20200501', QTY,0))) AS DA08
                     , SUM(DECODE(OPER, 'A0408', DECODE(WORK_DATE,'20200502', QTY,0))) AS DA18
                     , SUM(DECODE(OPER, 'A0408', DECODE(WORK_DATE,'20200503', QTY,0))) AS DA28
                     , SUM(DECODE(OPER, 'A0409', DECODE(WORK_DATE,'20200501', QTY,0))) AS DA09
                     , SUM(DECODE(OPER, 'A0409', DECODE(WORK_DATE,'20200502', QTY,0))) AS DA19
                     , SUM(DECODE(OPER, 'A0409', DECODE(WORK_DATE,'20200503', QTY,0))) AS DA29
                     , SUM(DECODE(OPER, 'A0602', DECODE(WORK_DATE,'20200501', QTY,0))) AS WB02
                     , SUM(DECODE(OPER, 'A0602', DECODE(WORK_DATE,'20200502', QTY,0))) AS WB12
                     , SUM(DECODE(OPER, 'A0602', DECODE(WORK_DATE,'20200503', QTY,0))) AS WB22
                     , SUM(DECODE(OPER, 'A0603', DECODE(WORK_DATE,'20200501', QTY,0))) AS WB03
                     , SUM(DECODE(OPER, 'A0603', DECODE(WORK_DATE,'20200502', QTY,0))) AS WB13
                     , SUM(DECODE(OPER, 'A0603', DECODE(WORK_DATE,'20200503', QTY,0))) AS WB23
                     , SUM(DECODE(OPER, 'A0604', DECODE(WORK_DATE,'20200501', QTY,0))) AS WB04
                     , SUM(DECODE(OPER, 'A0604', DECODE(WORK_DATE,'20200502', QTY,0))) AS WB14
                     , SUM(DECODE(OPER, 'A0604', DECODE(WORK_DATE,'20200503', QTY,0))) AS WB24
                     , SUM(DECODE(OPER, 'A0605', DECODE(WORK_DATE,'20200501', QTY,0))) AS WB05
                     , SUM(DECODE(OPER, 'A0605', DECODE(WORK_DATE,'20200502', QTY,0))) AS WB15
                     , SUM(DECODE(OPER, 'A0605', DECODE(WORK_DATE,'20200503', QTY,0))) AS WB25 
                     , SUM(DECODE(OPER, 'A0606', DECODE(WORK_DATE,'20200501', QTY,0))) AS WB06
                     , SUM(DECODE(OPER, 'A0606', DECODE(WORK_DATE,'20200502', QTY,0))) AS WB16
                     , SUM(DECODE(OPER, 'A0606', DECODE(WORK_DATE,'20200503', QTY,0))) AS WB26 
                     , SUM(DECODE(OPER, 'A0607', DECODE(WORK_DATE,'20200501', QTY,0))) AS WB07
                     , SUM(DECODE(OPER, 'A0607', DECODE(WORK_DATE,'20200502', QTY,0))) AS WB17
                     , SUM(DECODE(OPER, 'A0607', DECODE(WORK_DATE,'20200503', QTY,0))) AS WB27 
                     , SUM(DECODE(OPER, 'A0608', DECODE(WORK_DATE,'20200501', QTY,0))) AS WB08
                     , SUM(DECODE(OPER, 'A0608', DECODE(WORK_DATE,'20200502', QTY,0))) AS WB18
                     , SUM(DECODE(OPER, 'A0608', DECODE(WORK_DATE,'20200503', QTY,0))) AS WB28 
                     , SUM(DECODE(OPER, 'A0609', DECODE(WORK_DATE,'20200501', QTY,0))) AS WB09
                     , SUM(DECODE(OPER, 'A0609', DECODE(WORK_DATE,'20200502', QTY,0))) AS WB19
                     , SUM(DECODE(OPER, 'A0609', DECODE(WORK_DATE,'20200503', QTY,0))) AS WB29 
                  FROM ( 
                        SELECT A.MAT_ID,A.WORK_DATE,B.OPER,B.OPER_GRP_7 
                             , SUM(A.S1_END_QTY_1 + A.S2_END_QTY_1 + A.S3_END_QTY_1 + A.S1_END_RWK_QTY_1 + A.S2_END_RWK_QTY_1 + A.S3_END_RWK_QTY_1 ) AS QTY 
                          FROM RSUMWIPMOV A 
                             , MWIPOPRDEF B 
                         WHERE 1=1 
                           AND A.FACTORY = B.FACTORY 
                           AND A.OPER = B.OPER 
                           AND A.FACTORY = 'HMVA2' 
                           AND B.OPER_GRP_7 IN ('SAW','D/A','W/B','MOLD','SIG','V/I') 
                           AND A.MAT_VER = 1 
                           AND A.CM_KEY_3 LIKE 'P%'
                           AND A.WORK_DATE BETWEEN '20200501' AND '20200503'
                           AND A.LOT_TYPE = 'W'
                           AND A.OPER <> 'A1760'
                         GROUP BY A.MAT_ID, A.WORK_DATE,B.OPER,B.OPER_GRP_7 
                       ) 
                 GROUP BY MAT_ID 
               ) D  
             , ( 
                SELECT MAT_ID 
                     , ROUND(SUM(DECODE(OPER_GRP_1, 'HMK2A', QTY, 0)), 0) AS V0 
                     , ROUND(SUM(DECODE(OPER_GRP_1, 'B/G', QTY, 0)), 0) AS V1 
                     , ROUND(SUM(DECODE(OPER_GRP_1, 'SAW', QTY, 0)), 0) AS V2 
                     , ROUND(SUM(DECODE(OPER_GRP_1, 'S/P', QTY, 0)), 0) AS V3 
                     , ROUND(SUM(DECODE(OPER_GRP_1, 'D/A', QTY, 0)), 0) AS V4 
                     , ROUND(SUM(DECODE(OPER_GRP_1, 'W/B', QTY, 0)), 0) AS V5 
                     , ROUND(SUM(DECODE(OPER_GRP_1, 'MOLD', QTY, 0)), 0) AS V6 
                     , ROUND(SUM(DECODE(OPER_GRP_1, 'CURE', QTY, 0)), 0) AS V7 
                     , ROUND(SUM(DECODE(OPER_GRP_1, 'M/K', QTY, 0)), 0) AS V8 
                     , ROUND(SUM(DECODE(OPER_GRP_1, 'TRIM', QTY, 0)), 0) AS V9 
                     , ROUND(SUM(DECODE(OPER_GRP_1, 'TIN', QTY, 0)), 0) AS V10 
                     , ROUND(SUM(DECODE(OPER_GRP_1, 'S/B/A', QTY, 0)), 0) AS V11 
                     , ROUND(SUM(DECODE(OPER_GRP_1, 'SIG', QTY, 0)), 0) AS V12 
                     , ROUND(SUM(DECODE(OPER_GRP_1, 'AVI', QTY, 0)), 0) AS V13 
                     , ROUND(SUM(DECODE(OPER_GRP_1, 'V/I', QTY, 0)), 0) AS V14 
                     , ROUND(SUM(DECODE(OPER_GRP_1, 'HMK3A', QTY, 0)), 0) AS V15 
                     , ROUND(SUM(DECODE(OPER_GRP_1, 'GATE', QTY, 0)), 0) AS V16 
                     , ROUND(SUM(DECODE(OPER_GRP_1, 'SMT', QTY, 0)), 0) AS V17 
                  FROM (  
                        SELECT MAT_ID, OPER, OPER_GRP_1 
                             , CASE WHEN MAT_GRP_1 = 'HX' AND HX_COMP_MIN IS NOT NULL
                                         THEN (CASE WHEN HX_COMP_MIN <> HX_COMP_MAX AND OPER > HX_COMP_MIN AND OPER <= HX_COMP_MAX THEN QTY_1 / NVL(COMP_CNT / 2,1)
                                                    WHEN OPER <= HX_COMP_MAX THEN QTY_1 / NVL(COMP_CNT,1)
                                                    ELSE QTY_1 END)
                                    WHEN OPER <= 'A0395' THEN QTY_1 / NVL(COMP_CNT,1) 
                                    ELSE QTY_1 
                               END QTY 
                          FROM ( 
                                SELECT A.MAT_ID, B.OPER, C.MAT_GRP_1  
                                     , CASE WHEN C.MAT_GRP_3 IN ('FCBGA', 'FCFBGA') AND B.OPER = 'A0800' THEN 'D/A' ELSE B.OPER_GRP_1 END OPER_GRP_1  
                                     , CASE WHEN MAT_GRP_3 IN ('COB', 'BGN') THEN QTY_1/NET_DIE ELSE QTY_1 END AS QTY_1
                                     , COMP_CNT  
                                     , HX_COMP_MIN, HX_COMP_MAX 
                                  FROM RWIPLOTSTS_BOH A 
                                     , MWIPOPRDEF B 
                                     , VWIPMATDEF C 
                                 WHERE A.CUTOFF_DT = '2020050322' 
                                   AND A.FACTORY = B.FACTORY 
                                   AND A.FACTORY = C.FACTORY 
                                   AND A.OPER = B.OPER 
                                   AND A.MAT_ID = C.MAT_ID 
                                   AND A.FACTORY = 'HMVA2'  
                                   AND A.LOT_TYPE = 'W' 
                                   AND A.LOT_DEL_FLAG = ' ' 
                                   AND C.DELETE_FLAG = ' ' 
                                   AND C.MAT_GRP_2 <> '-' 
                                   AND A.HOLD_CODE NOT IN ('H71','H54') 
                                   AND REGEXP_LIKE(C.MAT_GRP_5, 'Middle*|Merge|1st|-') 
                                   AND A.LOT_CMF_5 LIKE 'P%'
                               ) 
                       )  
                 GROUP BY MAT_ID 
               ) F 
         WHERE 1 = 1 
           AND A.MAT_ID = D.MAT_ID(+)
           AND A.MAT_ID = F.MAT_ID(+)
           AND A.MAT_ID LIKE '%' 
         GROUP BY A.MAT_GRP_1, A.MAT_GRP_9, A.MAT_GRP_10,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' '
        HAVING (
                NVL(SUM(A.MON_PLAN), 0)+ 
                NVL(SUM(A.ORI_PLAN), 0)+ 
                NVL(SUM(A.ASSY_MON), 0)+ 
                NVL(SUM(A.WEEK_PLAN), 0)+ 
                NVL(SUM(A.AO0), 0)+ NVL(SUM(A.AO1), 0)+ NVL(SUM(A.AO2), 0)+ 
                NVL(SUM(A.RCV0), 0)+ NVL(SUM(A.RCV1), 0)+ NVL(SUM(A.RCV2), 0)+ 
                NVL(SUM(D.SW0), 0)+ NVL(SUM(D.SW1), 0)+ NVL(SUM(D.SW2), 0)+ 
                NVL(SUM(D.DA0), 0)+ NVL(SUM(D.DA1), 0)+ NVL(SUM(D.DA2), 0)+ 
                NVL(SUM(D.WB0), 0)+ NVL(SUM(D.WB1), 0)+ NVL(SUM(D.WB2), 0)+ 
                NVL(SUM(D.MD0), 0)+ NVL(SUM(D.MD1), 0)+ NVL(SUM(D.MD2), 0)+  
                NVL(SUM(D.TF0), 0)+ NVL(SUM(D.TF0), 0)+ NVL(SUM(D.TF0), 0)+ 
                NVL(SUM(F.V0+F.V1+F.V2+F.V3+F.V4+F.V5+F.V6+F.V7+F.V8+F.V9+F.V10+F.V11+F.V12+F.V13+F.V14+F.V15+F.V16+F.V17), 0)  
               ) <> 0
       ) A 
     , ( 
        SELECT MAT_GRP_1 AS CUSTOMER
             , MAT_GRP_10 AS PKG 
             , SUM(DECODE(SHIP_DATE,'20200501', TAT, 0)) AS TAT0 
             , SUM(DECODE(SHIP_DATE,'20200502', TAT, 0)) AS TAT1 
             , SUM(DECODE(SHIP_DATE,'20200503', TAT, 0)) AS TAT2 
          FROM ( 
                SELECT MAT.MAT_GRP_1,MAT.MAT_GRP_10,TAT.SHIP_DATE,SUM(TAT.TOTAL_TAT_QTY),SUM(SHIP.SHIP_QTY),ROUND(DECODE(SUM(SHIP.SHIP_QTY),0,0,(SUM(TAT.TOTAL_TAT_QTY)/SUM(SHIP.SHIP_QTY))),4) AS TAT 
                  FROM ( 
                        SELECT FACTORY,MAT_ID,SHIP_DATE 
                             , ROUND(SUM(TOTAL_TAT_QTY),4) AS TOTAL_TAT_QTY 
                          FROM CSUMTATMAT@RPTTOMES 
                         WHERE 1=1 
                           AND FACTORY = 'HMVA2' 
                           AND OPER <> 'A0000' 
                           AND SHIP_DATE BETWEEN '20200501' AND '20200503'
                         GROUP BY FACTORY,MAT_ID,SHIP_DATE 
                       ) TAT 
                     , ( 
                        SELECT FACTORY,MAT_ID,SHIP_DATE,SHIP_QTY 
                          FROM CSUMTATMAT@RPTTOMES 
                         WHERE 1=1 
                           AND FACTORY = 'HMVA2' 
                           AND OPER = 'AZ010' 
                           AND SHIP_DATE BETWEEN '20200501' AND '20200503'
                       ) SHIP 
                     , MWIPMATDEF MAT 
                 WHERE 1=1 
                   AND TAT.FACTORY = SHIP.FACTORY 
                   AND TAT.MAT_ID = SHIP.MAT_ID 
                   AND TAT.SHIP_DATE = SHIP.SHIP_DATE 
                   AND TAT.MAT_ID = MAT.MAT_ID 
                   AND MAT.MAT_TYPE = 'FG' 
                   AND MAT.DELETE_FLAG <> 'Y' 
                   AND MAT.FACTORY = 'HMVA2' 
                 GROUP BY MAT_GRP_1,MAT_GRP_10,TAT.SHIP_DATE
               ) 
         GROUP BY MAT_GRP_1, MAT_GRP_10 
       ) B  
 WHERE 1=1 
   AND A.CUSTOMER = B.CUSTOMER(+) 
   AND A.PKG = B.PKG(+) 
   AND A.PKG <> '-' 
   AND NVL(ORI_PLAN,0) + NVL(MON_PLAN,0) + NVL(TARGET_MON,0) + NVL(ASSY_MON,0) + NVL(WEEK_PLAN,0) + NVL(DEF,0) + NVL(AO0,0) + NVL(AO1,0) + NVL(AO2,0) + NVL(A.RCV0,0) + NVL(A.RCV1,0) + NVL(A.RCV2,0) + NVL(A.SW0,0) 
     + NVL(A.SW1,0) + NVL(A.SW2,0) + NVL(A.DA0,0) + NVL(A.DA1,0) + NVL(A.DA2,0) + NVL(A.WB0,0) + NVL(A.WB1,0) + NVL(A.WB2,0) + NVL(A.MD0,0) + NVL(A.MD1,0) + NVL(A.MD2,0) + NVL(A.TF0,0) 
     + NVL(A.TF1,0) + NVL(A.TF2,0) + NVL(TTL,0) <> 0 
 ORDER BY DECODE(A.CUSTOMER, 'SE', 1, 'HX', 2, 'IM', 3, 'FC', 4, 'IG', 5, 6),CUSTOMER, A.MAJOR, A.PKG,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' '

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
SELECT LANGUAGE_1 FROM RWEBFUNDEF WHERE FUNC_NAME = 'PRD010421'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
WITH     
EMERGENCY AS (     
    SELECT KEY_1 AS DATA, KEY_2 AS GUBUN, DATA_1 AS MOKJUK, DATA_2 AS PLAN, DATA_3 AS START_TIME, DATA_4 AS END_TIME     
      FROM MGCMTBLDAT     
     WHERE 1=1     
       AND FACTORY = 'HMVA2'     
       AND TABLE_NAME = 'H_EMERGENCY_SET'     
)     
         SELECT NVL((SELECT DATA_1 FROM MGCMTBLDAT WHERE TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = MAT.MAT_GRP_1 AND ROWNUM=1), '-'), MAT.MAT_GRP_9, MAT.MAT_GRP_10, MAT.MAT_GRP_6
              , DECODE(EMERGENCY.GUBUN, 'PART', EMERGENCY.DATA, MAT.MAT_ID)  AS MAT_ID     
              , ' '  
              , EMERGENCY.GUBUN AS GUBUN     
              , EMERGENCY.MOKJUK AS MOKJUK     
              , TO_CHAR(TO_DATE(EMERGENCY.END_TIME, 'YYYYMMDDHH24MISS'), 'MM/DD HH24:MI')         
              , TO_CHAR(TO_DATE(EMERGENCY.START_TIME, 'YYYYMMDDHH24MISS'), 'MM/DD HH24:MI')             
              , EMERGENCY.PLAN AS PLAN              
              , NVL(FACMOV.QTY,0)    AS QTY              
              , EMERGENCY.PLAN - NVL(FACMOV.QTY,0) REMAIN          
              , WIP.HMK3A + WIP.FINISH + WIP.MOLD + WIP.WB + WIP.DA + WIP.SAW + WIP.STOCK AS TOTAL_WIP          
          , CASE WHEN EMERGENCY.PLAN - NVL(FACMOV.QTY,0) <= 0 THEN 0 ELSE 
               CASE WHEN ROUND((EMERGENCY.PLAN - NVL(FACMOV.QTY_PREV_DAY,0)) /   DECODE(TO_DATE(EMERGENCY.END_TIME,'YYYYMMDDHH24MISS') - TO_DATE('20200503220000' ,'YYYYMMDDHH24MISS'),0,1), 0) <= 0 THEN EMERGENCY.PLAN - NVL(FACMOV.QTY,0)         
                     ELSE ROUND((EMERGENCY.PLAN - NVL(FACMOV.QTY_PREV_DAY,0)) /   DECODE(TO_DATE(EMERGENCY.END_TIME,'YYYYMMDDHH24MISS') - TO_DATE('20200503220000' ,'YYYYMMDDHH24MISS'),0,1), 0) END END IL_MOK         
              , TO_CHAR(TO_DATE(EMERGENCY.START_TIME, 'YYYYMMDDHH24MISS'), 'YYYY-MM-DD HH24:MI:SS')              
              , TO_CHAR(TO_DATE(EMERGENCY.END_TIME, 'YYYYMMDDHH24MISS'), 'YYYY-MM-DD HH24:MI:SS')              
              , MAT.TAT     
              , WIP.HMK3A     
              , WIP.FINISH     
              , WIP.MOLD     
              , WIP.WB     
              , WIP.DA     
              , WIP.SAW     
              , WIP.STOCK     
              , RESARR.WB_EQP_CNT     
              , RESARR.WB_CAPA     
              , RESARR.WB_QTY     
              , RESARR.WB_QTY WB_EXP_QTY     
              , RESARR.DA_EQP_CNT     
              , RESARR.DA_CAPA     
              , RESARR.DA_QTY     
              , RESARR.DA_QTY DA_EXP_QTY     
              , (   SELECT SUM(LOSS_QTY) AS LOSS          
                      FROM RWIPLOTLSM LSM          
                         , MWIPMATDEF MAT         
                     WHERE 1=1          
                       AND MAT.FACTORY = LSM.FACTORY          
                       AND MAT.MAT_ID = LSM.MAT_ID         
                       AND MAT.DELETE_FLAG = ' '         
                       AND MAT.FACTORY = 'HMVA2'         
                       AND LSM.TRAN_TIME >= EMERGENCY.START_TIME         
                       AND LSM.HIST_DEL_FLAG = ' '         
                       AND EMERGENCY.GUBUN = 'PART'         
                       AND LSM.LOSS_CODE <> 'N01'          
                       AND MAT.MAT_ID LIKE EMERGENCY.DATA||'%'          
                       AND LSM.MAT_ID LIKE EMERGENCY.DATA||'%') LOSS          
              , WIP.WB_LAST          
           FROM EMERGENCY     
              ,(SELECT EMERGENCY.DATA     
                     , MAX(MAT_GRP_1)              AS MAT_GRP_1     
                     , MAX(MAT_GRP_9)              AS MAT_GRP_9     
                     , MAX(MAT_GRP_10)             AS MAT_GRP_10     
                     , MAX(MAT_GRP_6)              AS MAT_GRP_6     
                     , MAX(FACTORY)                AS FACTORY     
                     , MAX(MAT_TYPE)               AS MAT_TYPE     
                     , MAX(MWIPMATDEF.MAT_ID)      AS MAT_ID     
                     , MAX(MWIPMATDEF.VENDOR_ID)   AS VENDOR_ID     
                     , MIN(TAT.TAT)                AS TAT     
                  FROM MWIPMATDEF     
                     , EMERGENCY     
                     , (SELECT SAP.SAP_CODE, MAT.VENDOR_ID, MAT.MAT_ID, SUM(SAP.TAT_DAY+SAP.TAT_DAY_WAIT) AS TAT     
                          FROM CWIPSAPTAT@RPTTOMES SAP     
                             , MWIPMATDEF MAT     
                         WHERE SAP.SAP_CODE = MAT.VENDOR_ID     
                           AND MAT.FACTORY = 'HMVA2'         
                           AND MAT.FACTORY = SAP.FACTORY         
                           AND MAT.MAT_TYPE = 'FG'         
                           AND SAP.RESV_FIELD_1 = ' '          
                         GROUP BY SAP.SAP_CODE, MAT.VENDOR_ID, MAT.MAT_ID     
                       ) TAT     
                 WHERE EMERGENCY.GUBUN = 'PART'     
                   AND ( MWIPMATDEF.MAT_ID LIKE EMERGENCY.DATA  OR MWIPMATDEF.MAT_ID = EMERGENCY.DATA )     
                   AND FACTORY = 'HMVA2'     
                   AND DELETE_FLAG = ' '     
                   AND MAT_TYPE = 'FG'     
                   AND MWIPMATDEF.MAT_ID LIKE '%'     
                   AND MWIPMATDEF.MAT_ID = TAT.MAT_ID(+)     
                 GROUP BY DATA     
                ) MAT     
              , (     
                SELECT EMERGENCY.DATA     
                     , SUM(NVL((CASE WHEN A.MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND MAT_ID LIKE 'SEKS%') THEN CASE WHEN A.MAT_GRP_5 IN ('2nd','Merge') OR MAT_GRP_5 LIKE 'Middle%' THEN NVL(F.V0,0)/NVL(LOSS.DATA_1,1) ELSE 0 END     
                                WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN CASE WHEN A.MAT_GRP_5 IN ('1st','Merge') OR MAT_GRP_5 LIKE 'Middle%' THEN NVL(F.V0,0)/NVL(LOSS.DATA_1,1) ELSE 0 END     
                                ELSE NVL(F.V0,0)/NVL(LOSS.DATA_1,1)     
                                END),0)     
                          ) AS STOCK     
                     , SUM(NVL((CASE WHEN A.MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND MAT_ID LIKE 'SEKS%') THEN DECODE(A.MAT_GRP_5, '2nd', NVL(F.V1,0)/NVL(LOSS.DATA_1,1)+NVL(F.V2,0)/NVL(LOSS.DATA_1,1), 'Merge', NVL(F.V1,0)/NVL(LOSS.DATA_1,1)+NVL(F.V2,0)/NVL(LOSS.DATA_1,1), 0)     
                                WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN CASE WHEN A.MAT_GRP_5 IN ('1st','Merge') OR MAT_GRP_5 LIKE 'Middle%' THEN NVL(F.V1,0)/NVL(LOSS.DATA_1,1)+NVL(F.V2,0)/NVL(LOSS.DATA_1,1) ELSE 0 END     
                                ELSE NVL(F.V1,0)/NVL(LOSS.DATA_1,1)+NVL(F.V2,0)/NVL(LOSS.DATA_1,1)     
                                END),0)     
                           ) AS SAW     
                     , SUM(NVL((CASE WHEN A.MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND MAT_ID LIKE 'SEKS%') THEN DECODE(A.MAT_GRP_5, '2nd', NVL(F.V3,0)/NVL(LOSS.DATA_1,1)+NVL(F.V4,0), 'Merge', NVL(F.V3,0)/NVL(LOSS.DATA_1,1)+NVL(F.V4,0), 0)     
                               WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN CASE WHEN A.MAT_GRP_5 IN ('1st','Merge') OR MAT_GRP_5 LIKE 'Middle%' THEN NVL(F.V3,0)/NVL(LOSS.DATA_1,1)+NVL(F.V4,0) ELSE 0 END     
                               ELSE NVL(F.V3,0)/NVL(LOSS.DATA_1,1)+NVL(F.V4,0)     
                                 END),0)     
                           ) AS DA     
                     , SUM(NVL((CASE WHEN A.MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND MAT_ID LIKE 'SEKS%') THEN DECODE(A.MAT_GRP_5, '2nd', NVL(F.V5+F.V16,0), 'Merge', NVL(F.V5+F.V16,0), 0)     
                               WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN CASE WHEN A.MAT_GRP_5 IN ('1st','Merge') OR MAT_GRP_5 LIKE 'Middle%' THEN NVL(F.V5+F.V16,0) ELSE 0 END     
                               ELSE NVL(F.V5+F.V16,0)     
                               END),0)     
                           ) AS WB     
                     , SUM(NVL((CASE WHEN A.MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND MAT_ID LIKE 'SEKS%') THEN DECODE(A.MAT_GRP_5, '2nd', 0, 'Merge', NVL(F.V5+F.V16,0), 0)              
                               WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN CASE WHEN A.MAT_GRP_5 IN ('Merge') THEN NVL(F.V5+F.V16,0) ELSE 0 END              
                               ELSE NVL(F.V5+F.V16,0)              
                               END),0)              
                           ) AS WB_LAST             
                     , SUM(NVL((CASE WHEN A.MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND MAT_ID LIKE 'SEKS%') THEN DECODE(A.MAT_GRP_5, '2nd', NVL(F.V6+F.V7,0), 'Merge', NVL(F.V6+F.V7,0), 0)     
                               WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN CASE WHEN A.MAT_GRP_5 IN ('1st','Merge') OR MAT_GRP_5 LIKE 'Middle%' THEN NVL(F.V6+F.V7,0) ELSE 0 END     
                               ELSE NVL(F.V6+F.V7,0)     
                          END),0)     
                           ) AS MOLD     
                     , SUM(NVL((CASE WHEN A.MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND MAT_ID LIKE 'SEKS%') THEN DECODE(A.MAT_GRP_5, '2nd', NVL(F.V8+F.V9+F.V10+F.V11+F.V12+F.V13+F.V14,0), 'Merge', NVL(F.V8+F.V9+F.V10+F.V11+F.V12+F.V13+F.V14,0), 0)     
                               WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN CASE WHEN A.MAT_GRP_5 IN ('1st','Merge') OR MAT_GRP_5 LIKE 'Middle%' THEN NVL(F.V8+F.V9+F.V10+F.V11+F.V12+F.V13+F.V14,0) ELSE 0 END     
                               ELSE NVL(F.V8+F.V9+F.V10+F.V11+F.V12+F.V13+F.V14,0)     
                               END),0)     
                           ) AS FINISH     
                     , SUM(NVL((CASE WHEN A.MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND MAT_ID LIKE 'SEKS%') THEN DECODE(A.MAT_GRP_5, '2nd', NVL(F.V15,0), 'Merge', NVL(F.V15,0), 0)     
                               WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN CASE WHEN A.MAT_GRP_5 IN ('1st','Merge') OR MAT_GRP_5 LIKE 'Middle%' THEN NVL(F.V15,0) ELSE 0 END     
                               ELSE NVL(F.V15,0)     
                               END),0)     
                           ) AS HMK3A     
                  FROM (     
                        SELECT MAT.MAT_GRP_1, MAT.MAT_GRP_2, MAT.MAT_GRP_3, MAT.MAT_GRP_4, MAT.MAT_GRP_5, MAT.MAT_GRP_6, MAT.MAT_GRP_7, MAT.MAT_GRP_8     
                             , DECODE(MAT.MAT_GRP_1,'SE',MAT.MAT_GRP_9,' ') AS MAT_GRP_9, MAT.MAT_GRP_10, MAT.MAT_CMF_10, MAT.MAT_ID, MAT.MAT_CMF_7, MAT.MAT_CMF_13, MAT.MAT_CMF_11     
                          FROM MWIPMATDEF MAT     
                         WHERE 1 = 1     
                           AND MAT.FACTORY = 'HMVA2'     
                           AND MAT.MAT_TYPE= 'FG'     
                           AND MAT.DELETE_FLAG <> 'Y'     
                         GROUP BY MAT.MAT_GRP_1, MAT.MAT_GRP_2, MAT.MAT_GRP_3, MAT.MAT_GRP_4, MAT.MAT_GRP_5, MAT.MAT_GRP_6, MAT.MAT_GRP_7, MAT.MAT_GRP_8, MAT.MAT_GRP_9, MAT.MAT_GRP_10, MAT.MAT_CMF_10, MAT.MAT_ID, MAT.MAT_CMF_7, MAT.MAT_CMF_13, MAT.MAT_CMF_11     
                       ) A     
                     , (     
                        SELECT LOT.MAT_ID, MAT.MAT_GRP_3     
                             , SUM(DECODE(OPER_GRP_1, 'HMK2A', DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY), 0)) V0     
                             , SUM(DECODE(OPER_GRP_1, 'B/G', DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY), 0)) V1     
                             , SUM(DECODE(OPER_GRP_1, 'SAW', DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY), 0)) V2     
                             , SUM(DECODE(OPER_GRP_1, 'S/P', DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY), 0)) V3     
                             , SUM(DECODE(OPER_GRP_1, 'D/A', DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY), 0)) V4     
                             , SUM(DECODE(OPER_GRP_1, 'W/B', DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY), 0)) V5     
                             , SUM(DECODE(OPER_GRP_1, 'MOLD', DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY), 0)) V6     
                             , SUM(DECODE(OPER_GRP_1, 'CURE', DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY), 0)) V7     
                             , SUM(DECODE(OPER_GRP_1, 'M/K', DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY), 0)) V8     
                             , SUM(DECODE(OPER_GRP_1, 'TRIM', DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY), 0)) V9     
                             , SUM(DECODE(OPER_GRP_1, 'TIN', DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY), 0)) V10     
                             , SUM(DECODE(OPER_GRP_1, 'S/B/A', DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY), 0)) V11     
                             , SUM(DECODE(OPER_GRP_1, 'SIG', DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY), 0)) V12     
                             , SUM(DECODE(OPER_GRP_1, 'AVI', DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY), 0)) V13     
                             , SUM(DECODE(OPER_GRP_1, 'V/I', DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY), 0)) V14     
                             , SUM(DECODE(OPER_GRP_1, 'HMK3A', DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY), 0)) V15     
                             , SUM(DECODE(OPER_GRP_1, 'GATE', DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY), 0)) V16     
                          FROM (     
                                SELECT A.FACTORY, A.MAT_ID, B.OPER_GRP_1     
                                     , SUM(A.QTY_1) QTY     
                                  FROM RWIPLOTSTS_BOH A     
                                     , MWIPOPRDEF B     
                                 WHERE 1 = 1     
                                   AND A.FACTORY = B.FACTORY(+)     
                                   AND A.OPER = B.OPER(+)     
                                   AND A.FACTORY = 'HMVA2'     
                                   AND A.LOT_TYPE = 'W'     
                                   AND A.LOT_DEL_FLAG = ' '     
                                   AND A.LOT_CMF_5 LIKE '%'     
                                   AND A.CUTOFF_DT = '2020050422'              
                                 GROUP BY A.FACTORY, A.MAT_ID, B.OPER_GRP_1     
                               ) LOT     
                             , MWIPMATDEF MAT     
                         WHERE 1 = 1     
                           AND LOT.FACTORY = MAT.FACTORY     
                           AND LOT.MAT_ID = MAT.MAT_ID     
                           AND MAT.DELETE_FLAG <> 'Y'     
                           AND MAT.MAT_GRP_2 <> '-'     
                         GROUP BY LOT.MAT_ID ,MAT.MAT_GRP_3     
                       ) F,     
                       (     
                        SELECT KEY_1,DATA_1     
                          FROM MGCMTBLDAT     
                         WHERE FACTORY = 'HMVA2'     
                           AND TABLE_NAME IN ('H_SEC_AUTO_LOSS','H_HX_AUTO_LOSS')     
                       ) LOSS     
                       , EMERGENCY     
                 WHERE 1 = 1     
                   AND A.MAT_ID = F.MAT_ID(+)     
                   AND A.MAT_ID = LOSS.KEY_1(+)     
                   AND (A.MAT_ID LIKE EMERGENCY.DATA OR A.MAT_ID = EMERGENCY.DATA)     
                 GROUP BY EMERGENCY.DATA     
                ) WIP     
              , (     
                SELECT EMERGENCY.DATA     
                     , SUM(S1_FAC_OUT_QTY_1 + S2_FAC_OUT_QTY_1 + S3_FAC_OUT_QTY_1 + S4_FAC_OUT_QTY_1) AS QTY     
                     , SUM(DECODE (WORK_DATE, '20200503' ,0,S1_FAC_OUT_QTY_1 + S2_FAC_OUT_QTY_1 + S3_FAC_OUT_QTY_1 + S4_FAC_OUT_QTY_1)) QTY_PREV_DAY         
                  FROM RSUMFACMOV, EMERGENCY     
                 WHERE 1=1     
                   AND CM_KEY_1 = 'HMVA2'     
                   AND CM_KEY_2 = 'PROD'     
                   AND CM_KEY_3 LIKE '%'     
                   AND FACTORY <> 'RETURN'     
                   AND EMERGENCY.GUBUN = 'PART'     
                   AND ( RSUMFACMOV.MAT_ID LIKE EMERGENCY.DATA  OR RSUMFACMOV.MAT_ID = EMERGENCY.DATA )     
                   AND WORK_DATE BETWEEN TO_CHAR(ADD_MONTHS(SYSDATE, -1), 'YYYYMMDD')  AND TO_CHAR(SYSDATE, 'YYYYMMDD')     
                   AND WORK_DATE BETWEEN GET_WORK_DATE(EMERGENCY.START_TIME, 'D') AND '20200504'         
                 GROUP BY EMERGENCY.DATA     
                ) FACMOV     
              , (     
                SELECT DATA     
                     , SUM(WB_EQP_CNT)  WB_EQP_CNT     
                     , SUM(WB_CAPA)     WB_CAPA     
                     , SUM(WB_QTY)      WB_QTY     
                     , SUM(WB_EXP_QTY)  WB_EXP_QTY     
                     , SUM(DA_EQP_CNT)  DA_EQP_CNT     
                     , SUM(DA_CAPA)     DA_CAPA     
                     , SUM(DA_QTY)      DA_QTY     
                     , SUM(DA_EXP_QTY)  DA_EXP_QTY     
                  FROM (     
                        SELECT DATA     
                             , DECODE(OPER, 'WB', SUM(EQP_CNT), 0)    WB_EQP_CNT     
                             , DECODE(OPER, 'WB', SUM(CAPA), 0)       WB_CAPA     
                             , DECODE(OPER, 'WB', SUM(QTY), 0)        WB_QTY     
                             , DECODE(OPER, 'WB', SUM(EXPECT_QTY), 0) WB_EXP_QTY     
                             , DECODE(OPER, 'DA', SUM(EQP_CNT), 0)    DA_EQP_CNT     
                             , DECODE(OPER, 'DA', SUM(CAPA), 0)       DA_CAPA     
                             , DECODE(OPER, 'DA', SUM(QTY), 0)        DA_QTY     
                             , DECODE(OPER, 'DA', SUM(EXPECT_QTY), 0) DA_EXP_QTY     
                          FROM (     
                                SELECT RES.DATA     
                                     , MAT.MAT_ID     
                                     , SUM(RES.EQP_CNT) AS EQP_CNT     
                                     , SUM(CASE WHEN RES.OPER LIKE 'A06%' THEN TRUNC(NVL(NVL(UPH.UPEH,0) * 24 * 0.75 * RES.EQP_CNT, 0)) 
                                                WHEN RES.OPER LIKE 'A04%' THEN TRUNC(NVL(NVL(UPH.UPEH,0) * 24 * 0.7 * RES.EQP_CNT, 0)) 
                                                ELSE TRUNC(NVL(NVL(UPH.UPEH,0) * 24 * 0.7 * RES.EQP_CNT, 0)) 
                                           END) AS CAPA 
                                     , DECODE(SUBSTR(RES.OPER, 1,3), 'A03', 'DA', 'A04', 'DA', 'A06', 'WB') AS OPER     
                                     , MAX(WIPMOV.QTY) AS QTY     
                                     , CASE     
                                        WHEN TO_CHAR(SYSDATE, 'HH24') >= 22 THEN ROUND(SUM(WIPMOV.QTY)/ (SYSDATE - TO_DATE(TO_CHAR(SYSDATE, 'YYYYMMDD')||'220000', 'YYYYMMDDHH24MISS')), 0)     
                                        ELSE ROUND(SUM(WIPMOV.QTY)/ (SYSDATE - TO_DATE(TO_CHAR(SYSDATE-1, 'YYYYMMDD')||'220000', 'YYYYMMDDHH24MISS')), 0)     
                                       END     
                                     AS EXPECT_QTY     
                                  FROM (     
                                        SELECT EMERGENCY.DATA, FACTORY, RES_STS_2, RES_STS_8 AS OPER, RES_GRP_6 AS RES_MODEL, RES_GRP_7 AS UPEH_GRP, COUNT(RES_ID) AS EQP_CNT     
                                          FROM MRASRESDEF, EMERGENCY     
                                         WHERE 1 = 1     
                                           AND FACTORY  = 'HMVA2'     
                                           AND RES_CMF_9 = 'Y'     
                                           AND RES_CMF_7 = 'Y'     
                                           AND DELETE_FLAG = ' '     
                                           AND (RES_STS_8 LIKE 'A06%' OR RES_STS_8 LIKE 'A04%' OR RES_STS_8 = 'A0333')     
                                           AND ( RES_STS_2 LIKE EMERGENCY.DATA  OR RES_STS_2 = EMERGENCY.DATA )   
                                         GROUP BY EMERGENCY.DATA,FACTORY,RES_STS_2,RES_STS_8,RES_GRP_6,RES_GRP_7     
                                       ) RES     
                                     , CRASUPHDEF UPH     
                                     , MWIPMATDEF MAT     
                                     , (     
                                        SELECT MAT_ID, OPER AS OPER, SUM(S1_END_QTY_1 + S2_END_QTY_1 + S3_END_QTY_1 ) QTY     
                                          FROM RSUMWIPMOV    
                                         WHERE 1=1     
                                           AND WORK_DATE = '20200504'         
                                           AND LOT_TYPE = 'W'     
                                           AND FACTORY = 'HMVA2'     
                                           AND (OPER LIKE 'A04%' OR OPER LIKE 'A06%' OR OPER = 'A0333') 
                                         GROUP BY MAT_ID, OPER 
                                        ) WIPMOV     
                                 WHERE 1 = 1     
                                     AND   MAT.DELETE_FLAG=' '                        
                                     AND   RES.FACTORY=MAT.FACTORY                    
                                     AND   RES.RES_STS_2 = MAT.MAT_ID                 
                                     AND   RES.FACTORY=UPH.FACTORY(+)                 
                                     AND   RES.OPER=UPH.OPER(+)                       
                                     AND   RES.RES_MODEL = UPH.RES_MODEL(+)           
                                     AND   RES.UPEH_GRP = UPH.UPEH_GRP(+)             
                                     AND   RES.RES_STS_2 = UPH.MAT_ID(+)              
                                     AND   RES.FACTORY  = 'HMVA2'                     
                                     AND   RES.OPER NOT IN ('00001','00002')          
                                     AND   RES.RES_STS_2 = WIPMOV.MAT_ID(+)           
                                     AND   RES.OPER = WIPMOV.OPER(+)                  
                                     AND   ((RES.OPER LIKE 'A040%' AND RES.OPER = 'A040'||DECODE(MAT.MAT_GRP_4,'SD2','2','SD3','3','SD4','4','SD5','5','SD8','8','0' ) ) OR 
                                            (RES.OPER LIKE 'A060%' AND RES.OPER = 'A060'||DECODE(MAT.MAT_GRP_4,'SD2','2','SD3','3','SD4','4','SD5','5','SD8','8','0' ) ) OR RES.OPER = 'A0333')
                                   GROUP BY DATA, MAT.MAT_ID, SUBSTR(RES.OPER, 1,3)   
                                ORDER BY MAT.MAT_ID     
                        )     
                         GROUP BY DATA, OPER     
                     )     
                 GROUP BY DATA     
                ) RESARR     
          WHERE 1=1     
            AND EMERGENCY.GUBUN = 'PART'     
            AND ( MAT.MAT_ID LIKE EMERGENCY.DATA OR MAT.MAT_ID = EMERGENCY.DATA )     
            AND EMERGENCY.DATA = RESARR.DATA(+)     
            AND EMERGENCY.DATA = WIP.DATA(+)     
            AND EMERGENCY.DATA = FACMOV.DATA(+)     
            AND MAT_ID LIKE '%'     
        UNION ALL     
         SELECT HEAD.CUSTOMER, HEAD.MAT_GRP_9, HEAD.MAT_GRP_10, HEAD.MAT_GRP_6
              , NVL((SELECT MAT_ID FROM RWIPLOTSTS WHERE (LOT_ID = EMERGENCY.DATA OR LOT_ID LIKE EMERGENCY.DATA) AND ROWNUM = 1), '-' ) AS MAT_ID     
              , EMERGENCY.DATA     
              , EMERGENCY.GUBUN AS GUBUN     
              , EMERGENCY.MOKJUK AS MOKJUK     
              , TO_CHAR(TO_DATE(EMERGENCY.END_TIME, 'YYYYMMDDHH24MISS'), 'MM/DD HH24:MI')          
              , TO_CHAR(TO_DATE(EMERGENCY.START_TIME, 'YYYYMMDDHH24MISS'), 'MM/DD HH24:MI')             
              , EMERGENCY.PLAN AS PLAN              
              , NVL(RUN_LOT.QTY,0)              
              , EMERGENCY.PLAN - NVL(RUN_LOT.QTY,0) REMAIN            
              , WIP_RUN_LOT.HMK3A + WIP_RUN_LOT.FINISH + WIP_RUN_LOT.MOLD + WIP_RUN_LOT.WB + WIP_RUN_LOT.DA + WIP_RUN_LOT.SAW + WIP_RUN_LOT.STOCK AS TOTAL_WIP           
              , CASE WHEN EMERGENCY.PLAN - NVL(RUN_LOT.QTY,0) <= 0 THEN 0 ELSE   
                CASE WHEN ROUND((EMERGENCY.PLAN - NVL(RUN_LOT.QTY_PREV_DAY,0)) /   DECODE(TO_DATE(EMERGENCY.END_TIME,'YYYYMMDDHH24MISS') - TO_DATE('20200503220000' ,'YYYYMMDDHH24MISS'),0,1), 0) <= 0 THEN EMERGENCY.PLAN - NVL(RUN_LOT.QTY,0)         
                     ELSE ROUND((EMERGENCY.PLAN - NVL(RUN_LOT.QTY_PREV_DAY,0)) /   DECODE(TO_DATE(EMERGENCY.END_TIME,'YYYYMMDDHH24MISS') - TO_DATE('20200503220000' ,'YYYYMMDDHH24MISS'),0,1), 0) END END IL_MOK                  
              , TO_CHAR(TO_DATE(EMERGENCY.START_TIME, 'YYYYMMDDHH24MISS'), 'YYYY-MM-DD HH24:MI:SS')              
              , TO_CHAR(TO_DATE(EMERGENCY.END_TIME, 'YYYYMMDDHH24MISS'), 'YYYY-MM-DD HH24:MI:SS')              
              , TAT.TAT     
              , WIP_RUN_LOT.HMK3A     
              , WIP_RUN_LOT.FINISH     
              , WIP_RUN_LOT.MOLD     
              , WIP_RUN_LOT.WB     
              , WIP_RUN_LOT.DA     
              , WIP_RUN_LOT.SAW     
              , WIP_RUN_LOT.STOCK     
              , RESARR_LOT.WB_EQP_CNT     
              , RESARR_LOT.WB_CAPA     
              , RESARR_LOT.WB_QTY     
              , RESARR_LOT.WB_QTY WB_EXP_QTY     
              , RESARR_LOT.DA_EQP_CNT     
              , RESARR_LOT.DA_CAPA     
              , RESARR_LOT.DA_QTY     
              , RESARR_LOT.DA_QTY DA_EXP_QTY     
              , (SELECT SUM(LOSS_QTY) AS LOSS          
                   FROM RWIPLOTLSM         
                  WHERE TRAN_TIME >= EMERGENCY.START_TIME          
                    AND HIST_DEL_FLAG = ' '          
                    AND LOT_ID LIKE EMERGENCY.DATA||'%' ) LOSS            
              , WIP_RUN_LOT.WB_LAST 
           FROM EMERGENCY     
           LEFT OUTER JOIN (     
                SELECT EMERGENCY.DATA     
                     , MAX(WIPMAT.MAT_GRP_1)     AS MAT_GRP_1     
                     , MAX(WIPMAT.MAT_GRP_10)    AS MAT_GRP_10     
                     , MAX(WIPMAT.MAT_GRP_6)     AS MAT_GRP_6     
                     , MAX(WIPMAT.FACTORY)       AS FACTORY     
                     , MAX(WIPMAT.MAT_TYPE)      AS MAT_TYPE     
                     , MAX(WIPMAT.MAT_ID)        AS MAT_ID     
                     , MAX(WIPMAT.DELETE_FLAG)   AS DELETE_FLAG     
                     , MAX(WIPMAT.VENDOR_ID)     AS VENDOR_ID     
                  FROM MWIPMATDEF WIPMAT, RWIPLOTSTS LOT, EMERGENCY     
                 WHERE 1 = 1     
                   AND WIPMAT.FACTORY = 'HMVA2'     
                   AND WIPMAT.DELETE_FLAG = ' '     
                   AND WIPMAT.MAT_TYPE = 'FG'     
                   AND WIPMAT.MAT_ID LIKE '%'     
                   AND WIPMAT.MAT_ID = LOT.MAT_ID     
                   AND LOT.FACTORY = 'HMVA2'     
                   AND LOT.LOT_DEL_FLAG = ' '     
                   AND LOT.LOT_TYPE = 'W'     
                   AND ( ( EMERGENCY.GUBUN = 'RUN' AND ( LOT.LOT_ID LIKE EMERGENCY.DATA||'%' ) ) OR     
                         ( EMERGENCY.GUBUN = 'LOT' AND ( LOT.LOT_ID LIKE EMERGENCY.DATA||'%' ) ) )      
                 GROUP BY EMERGENCY.DATA     
                ) MAT ON EMERGENCY.DATA = MAT.DATA     
           LEFT OUTER JOIN (     
                SELECT EMERGENCY.DATA     
                     , SUM(NVL((CASE WHEN A.MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND MAT_ID LIKE 'SEKS%') THEN CASE WHEN A.MAT_GRP_5 IN ('2nd','Merge') OR MAT_GRP_5 LIKE 'Middle%' THEN NVL(F.V0,0)/NVL(LOSS.DATA_1,1) ELSE 0 END     
                                WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN CASE WHEN A.MAT_GRP_5 IN ('1st','Merge') OR MAT_GRP_5 LIKE 'Middle%' THEN NVL(F.V0,0)/NVL(LOSS.DATA_1,1) ELSE 0 END     
                                ELSE NVL(F.V0,0)/NVL(LOSS.DATA_1,1)     
                                END),0)     
                          ) AS STOCK     
                     , SUM(NVL((CASE WHEN A.MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND MAT_ID LIKE 'SEKS%') THEN DECODE(A.MAT_GRP_5, '2nd', NVL(F.V1,0)/NVL(LOSS.DATA_1,1)+NVL(F.V2,0)/NVL(LOSS.DATA_1,1), 'Merge', NVL(F.V1,0)/NVL(LOSS.DATA_1,1)+NVL(F.V2,0)/NVL(LOSS.DATA_1,1), 0)     
                                WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN CASE WHEN A.MAT_GRP_5 IN ('1st','Merge') OR MAT_GRP_5 LIKE 'Middle%' THEN NVL(F.V1,0)/NVL(LOSS.DATA_1,1)+NVL(F.V2,0)/NVL(LOSS.DATA_1,1) ELSE 0 END     
                                ELSE NVL(F.V1,0)/NVL(LOSS.DATA_1,1)+NVL(F.V2,0)/NVL(LOSS.DATA_1,1)     
                                END),0)     
                           ) AS SAW     
                     , SUM(NVL((CASE WHEN A.MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND MAT_ID LIKE 'SEKS%') THEN DECODE(A.MAT_GRP_5, '2nd', NVL(F.V3,0)/NVL(LOSS.DATA_1,1)+NVL(F.V4,0), 'Merge', NVL(F.V3,0)/NVL(LOSS.DATA_1,1)+NVL(F.V4,0), 0)     
                               WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN CASE WHEN A.MAT_GRP_5 IN ('1st','Merge') OR MAT_GRP_5 LIKE 'Middle%' THEN NVL(F.V3,0)/NVL(LOSS.DATA_1,1)+NVL(F.V4,0) ELSE 0 END     
                               ELSE NVL(F.V3,0)/NVL(LOSS.DATA_1,1)+NVL(F.V4,0)     
                                 END),0)     
                           ) AS DA     
                     , SUM(NVL((CASE WHEN A.MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND MAT_ID LIKE 'SEKS%') THEN DECODE(A.MAT_GRP_5, '2nd', NVL(F.V5+F.V16,0), 'Merge', NVL(F.V5+F.V16,0), 0)     
                               WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN CASE WHEN A.MAT_GRP_5 IN ('1st','Merge') OR MAT_GRP_5 LIKE 'Middle%' THEN NVL(F.V5+F.V16,0) ELSE 0 END     
                               ELSE NVL(F.V5+F.V16,0)     
                               END),0)     
                           ) AS WB     
                     , SUM(NVL((CASE WHEN A.MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND MAT_ID LIKE 'SEKS%') THEN DECODE(A.MAT_GRP_5, '2nd', 0, 'Merge', NVL(F.V5+F.V16,0), 0)              
                               WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN CASE WHEN A.MAT_GRP_5 IN ('Merge') THEN NVL(F.V5+F.V16,0) ELSE 0 END              
                               ELSE NVL(F.V5+F.V16,0)              
                               END),0)              
                           ) AS WB_LAST             
                     , SUM(NVL((CASE WHEN A.MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND MAT_ID LIKE 'SEKS%') THEN DECODE(A.MAT_GRP_5, '2nd', NVL(F.V6+F.V7,0), 'Merge', NVL(F.V6+F.V7,0), 0)     
                               WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN CASE WHEN A.MAT_GRP_5 IN ('1st','Merge') OR MAT_GRP_5 LIKE 'Middle%' THEN NVL(F.V6+F.V7,0) ELSE 0 END     
                               ELSE NVL(F.V6+F.V7,0)     
                          END),0)     
                           ) AS MOLD     
                     , SUM(NVL((CASE WHEN A.MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND MAT_ID LIKE 'SEKS%') THEN DECODE(A.MAT_GRP_5, '2nd', NVL(F.V8+F.V9+F.V10+F.V11+F.V12+F.V13+F.V14,0), 'Merge', NVL(F.V8+F.V9+F.V10+F.V11+F.V12+F.V13+F.V14,0), 0)     
                               WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN CASE WHEN A.MAT_GRP_5 IN ('1st','Merge') OR MAT_GRP_5 LIKE 'Middle%' THEN NVL(F.V8+F.V9+F.V10+F.V11+F.V12+F.V13+F.V14,0) ELSE 0 END     
                               ELSE NVL(F.V8+F.V9+F.V10+F.V11+F.V12+F.V13+F.V14,0)     
                               END),0)     
                           ) AS FINISH     
                     , SUM(NVL((CASE WHEN A.MAT_CMF_11 IN (SELECT DISTINCT(MAT_CMF_11) FROM MWIPMATDEF WHERE FACTORY = 'HMVA2' AND MAT_GRP_5 = '1st' AND MAT_ID LIKE 'SEKS%') THEN DECODE(A.MAT_GRP_5, '2nd', NVL(F.V15,0), 'Merge', NVL(F.V15,0), 0)     
                               WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN CASE WHEN A.MAT_GRP_5 IN ('1st','Merge') OR MAT_GRP_5 LIKE 'Middle%' THEN NVL(F.V15,0) ELSE 0 END     
                               ELSE NVL(F.V15,0)     
                               END),0)     
                           ) AS HMK3A     
                  FROM (     
                        SELECT MAT.MAT_GRP_1, MAT.MAT_GRP_2, MAT.MAT_GRP_3, MAT.MAT_GRP_4, MAT.MAT_GRP_5, MAT.MAT_GRP_6, MAT.MAT_GRP_7, MAT.MAT_GRP_8     
                             , DECODE(MAT.MAT_GRP_1,'SE',MAT.MAT_GRP_9,' ') AS MAT_GRP_9, MAT.MAT_GRP_10, MAT.MAT_CMF_10, MAT.MAT_ID, MAT.MAT_CMF_7, MAT.MAT_CMF_13, MAT.MAT_CMF_11     
                          FROM MWIPMATDEF MAT     
                         WHERE 1 = 1     
                           AND MAT.FACTORY = 'HMVA2'     
                           AND MAT.MAT_TYPE= 'FG'     
                           AND MAT.DELETE_FLAG <> 'Y'     
                         GROUP BY MAT.MAT_GRP_1, MAT.MAT_GRP_2, MAT.MAT_GRP_3, MAT.MAT_GRP_4, MAT.MAT_GRP_5, MAT.MAT_GRP_6, MAT.MAT_GRP_7, MAT.MAT_GRP_8, MAT.MAT_GRP_9, MAT.MAT_GRP_10, MAT.MAT_CMF_10, MAT.MAT_ID, MAT.MAT_CMF_7, MAT.MAT_CMF_13, MAT.MAT_CMF_11     
                       ) A     
                     , (     
                        SELECT EMERGENCY.DATA, LOT.MAT_ID, MAT.MAT_GRP_3     
                             , SUM(DECODE(OPER_GRP_1, 'HMK2A', DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY), 0)) V0     
                             , SUM(DECODE(OPER_GRP_1, 'B/G', DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY), 0)) V1     
                             , SUM(DECODE(OPER_GRP_1, 'SAW', DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY), 0)) V2     
                             , SUM(DECODE(OPER_GRP_1, 'S/P', DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY), 0)) V3     
                             , SUM(DECODE(OPER_GRP_1, 'D/A', DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY), 0)) V4     
                             , SUM(DECODE(OPER_GRP_1, 'W/B', DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY), 0)) V5     
                             , SUM(DECODE(OPER_GRP_1, 'MOLD', DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY), 0)) V6     
                             , SUM(DECODE(OPER_GRP_1, 'CURE', DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY), 0)) V7     
                             , SUM(DECODE(OPER_GRP_1, 'M/K', DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY), 0)) V8     
                             , SUM(DECODE(OPER_GRP_1, 'TRIM', DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY), 0)) V9     
                             , SUM(DECODE(OPER_GRP_1, 'TIN', DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY), 0)) V10     
                             , SUM(DECODE(OPER_GRP_1, 'S/B/A', DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY), 0)) V11     
                             , SUM(DECODE(OPER_GRP_1, 'SIG', DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY), 0)) V12     
                             , SUM(DECODE(OPER_GRP_1, 'AVI', DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY), 0)) V13     
                             , SUM(DECODE(OPER_GRP_1, 'V/I', DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY), 0)) V14     
                             , SUM(DECODE(OPER_GRP_1, 'HMK3A', DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY), 0)) V15     
                             , SUM(DECODE(OPER_GRP_1, 'GATE', DECODE(MAT.MAT_GRP_3,'COB',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),'BGN',ROUND(QTY/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0),QTY), 0)) V16     
                          FROM (     
                                SELECT A.FACTORY, A.MAT_ID, A.LOT_ID, B.OPER_GRP_1, A.LOT_CMF_4     
                                     , SUM(A.QTY_1) QTY     
                                  FROM RWIPLOTSTS_BOH A     
                                     , MWIPOPRDEF B     
                                 WHERE 1 = 1     
                                   AND A.FACTORY = B.FACTORY(+)     
                                   AND A.OPER = B.OPER(+)     
                                   AND A.FACTORY = 'HMVA2'     
                                   AND A.LOT_TYPE = 'W'     
                                   AND A.LOT_DEL_FLAG = ' '     
                                   AND A.LOT_CMF_5 LIKE '%'     
                                   AND A.CUTOFF_DT = '2020050422'         
                                 GROUP BY A.FACTORY, A.MAT_ID, A.LOT_ID, B.OPER_GRP_1, A.LOT_CMF_4     
                               ) LOT     
                             , MWIPMATDEF MAT     
                             , EMERGENCY     
                         WHERE 1 = 1     
                           AND LOT.FACTORY = MAT.FACTORY     
                           AND LOT.MAT_ID = MAT.MAT_ID     
                           AND MAT.DELETE_FLAG <> 'Y'     
                           AND MAT.MAT_GRP_2 <> '-'     
                           AND ( ( EMERGENCY.GUBUN = 'RUN' AND ( LOT.LOT_CMF_4 LIKE EMERGENCY.DATA ) ) OR              
                                 ( EMERGENCY.GUBUN = 'LOT' AND ( LOT.LOT_ID LIKE EMERGENCY.DATA||'%'  OR LOT.LOT_ID = EMERGENCY.DATA ) ) )         
                         GROUP BY EMERGENCY.DATA, LOT.MAT_ID ,MAT.MAT_GRP_3     
                       ) F,     
                       (     
                        SELECT KEY_1,DATA_1     
                          FROM MGCMTBLDAT     
                         WHERE FACTORY = 'HMVA2'     
                           AND TABLE_NAME IN ('H_SEC_AUTO_LOSS','H_HX_AUTO_LOSS')     
                       ) LOSS     
                       , EMERGENCY     
                 WHERE 1 = 1     
                   AND A.MAT_ID = F.MAT_ID(+)     
                   AND A.MAT_ID = LOSS.KEY_1(+)     
                   AND F.DATA = EMERGENCY.DATA     
                 GROUP BY EMERGENCY.DATA     
                ) WIP_RUN_LOT     
                  ON EMERGENCY.DATA = WIP_RUN_LOT.DATA     
           LEFT OUTER JOIN (     
                        SELECT EMERGENCY.DATA       AS DATA     
                             , SUM(QTY_1)           AS QTY     
                             , SUM(DECODE (GET_WORK_DATE(LOT.TRAN_TIME, 'D'),'20200504' ,0,QTY_1)) QTY_PREV_DAY      
                          FROM RWIPLOTHIS LOT     
                             , EMERGENCY     
                        WHERE 1=1     
                           AND LOT.TRAN_CODE = 'SHIP'     
                           AND LOT.OLD_FACTORY = 'HMVA2'  
                           AND LOT.TRAN_TIME >= EMERGENCY.START_TIME     
                           AND LOT.TRAN_TIME BETWEEN '20200503220000'  AND '20200504215959'         
                           AND LOT.HIST_DEL_FLAG = ' '     
                           AND LOT.LOT_TYPE = 'W'     
                           AND ( ( EMERGENCY.GUBUN = 'RUN' AND  LOT.LOT_CMF_4 LIKE EMERGENCY.DATA ) OR                   
                                 ( EMERGENCY.GUBUN = 'LOT' AND  LOT.LOT_ID LIKE EMERGENCY.DATA||'%')  )         
                         GROUP BY EMERGENCY.DATA    
                ) RUN_LOT     
                  ON EMERGENCY.DATA = RUN_LOT.DATA     
           LEFT OUTER JOIN (     
                SELECT DATA     
                     , SUM(WB_EQP_CNT)  WB_EQP_CNT     
                     , SUM(WB_CAPA)     WB_CAPA     
                     , SUM(WB_QTY)      WB_QTY     
                     , SUM(WB_EXP_QTY)  WB_EXP_QTY     
                     , SUM(DA_EQP_CNT)  DA_EQP_CNT     
                     , SUM(DA_CAPA)     DA_CAPA     
                     , SUM(DA_QTY)      DA_QTY     
                     , SUM(DA_EXP_QTY)  DA_EXP_QTY     
                  FROM (     
                        SELECT DATA     
                             , MAT_ID     
                             , LOT_ID     
                             , DECODE(OPER, 'WB', SUM(EQP_CNT), 0)    WB_EQP_CNT     
                             , DECODE(OPER, 'WB', SUM(CAPA), 0)       WB_CAPA     
                             , DECODE(OPER, 'WB', SUM(QTY), 0)        WB_QTY     
                             , DECODE(OPER, 'WB', SUM(EXPECT_QTY), 0) WB_EXP_QTY     
                             , DECODE(OPER, 'DA', SUM(EQP_CNT), 0)    DA_EQP_CNT     
                             , DECODE(OPER, 'DA', SUM(CAPA), 0)       DA_CAPA     
                             , DECODE(OPER, 'DA', SUM(QTY), 0)        DA_QTY     
                             , DECODE(OPER, 'DA', SUM(EXPECT_QTY), 0) DA_EXP_QTY     
                          FROM (     
                                SELECT WIPMOV.DATA     
                                     , MAT.MAT_ID     
                                     , WIPMOV.LOT_ID     
                                     , SUM(RES.EQP_CNT) AS EQP_CNT     
                                     , SUM(CASE WHEN RES.OPER LIKE 'A06%' THEN TRUNC(NVL(NVL(UPH.UPEH,0) * 24 * 0.75 * RES.EQP_CNT, 0)) 
                                                WHEN RES.OPER LIKE 'A04%' THEN TRUNC(NVL(NVL(UPH.UPEH,0) * 24 * 0.7 * RES.EQP_CNT, 0)) 
                                                ELSE TRUNC(NVL(NVL(UPH.UPEH,0) * 24 * 0.7 * RES.EQP_CNT, 0)) 
                                           END ) AS CAPA 
                                     , DECODE(SUBSTR(WIPMOV.OPER, 1,3), 'A03', 'DA', 'A04', 'DA', 'A06', 'WB') AS OPER     
                                     , MAX(WIPMOV.QTY) AS QTY     
                                     , CASE     
                                        WHEN TO_CHAR(SYSDATE, 'HH24') >= 22 THEN ROUND(SUM(WIPMOV.QTY)/ (SYSDATE - TO_DATE(TO_CHAR(SYSDATE, 'YYYYMMDD')||'220000', 'YYYYMMDDHH24MISS')), 0)     
                                        ELSE ROUND(SUM(WIPMOV.QTY)/ (SYSDATE - TO_DATE(TO_CHAR(SYSDATE-1, 'YYYYMMDD')||'220000', 'YYYYMMDDHH24MISS')), 0)     
                                       END     
                                     AS EXPECT_QTY     
                                  FROM (     
                                        SELECT FACTORY, RES_STS_2, RES_STS_8 AS OPER, RES_GRP_6 AS RES_MODEL, RES_GRP_7 AS UPEH_GRP, LOT_ID, COUNT(RES_ID) AS EQP_CNT     
                                          FROM MRASRESDEF     
                                         WHERE 1 = 1     
                                           AND FACTORY  = 'HMVA2'     
                                           AND RES_CMF_9 = 'Y'     
                                           AND RES_CMF_7 = 'Y'     
                                           AND DELETE_FLAG = ' '     
                                           AND (RES_STS_8 LIKE 'A06%' OR RES_STS_8 LIKE 'A04%' OR RES_STS_8 = 'A0333') 
                                         GROUP BY FACTORY,RES_STS_2,RES_STS_8,RES_GRP_6,RES_GRP_7, LOT_ID     
                                       ) RES     
                                     , CRASUPHDEF UPH     
                                     , (SELECT * FROM MWIPMATDEF WHERE MAT_GRP_5 IN ('Merge', '-')) MAT     
                                     , (     
                                        SELECT EMERGENCY.DATA, MAT_ID, LOT_ID, OLD_OPER AS OPER , SUM(QTY_1) QTY     
                                          FROM RWIPLOTHIS, EMERGENCY,     
                                               (SELECT '20200503220000' START_T, '20200504215959' END_T             
                                                  FROM DUAL) TIME_TABLE         
                                         WHERE 1 = 1     
                                           AND ( ( EMERGENCY.GUBUN = 'RUN' AND ( RWIPLOTHIS.LOT_ID LIKE EMERGENCY.DATA||'%'  OR RWIPLOTHIS.LOT_ID LIKE EMERGENCY.DATA ) ) OR 
                                                 ( EMERGENCY.GUBUN = 'LOT' AND ( RWIPLOTHIS.LOT_ID LIKE EMERGENCY.DATA||'%'  OR RWIPLOTHIS.LOT_ID = EMERGENCY.DATA ) ) )    
                                           AND FACTORY = 'HMVA2'     
                                           AND TRAN_CODE = 'END'     
                                           AND TRAN_TIME BETWEEN TIME_TABLE.START_T AND TIME_TABLE.END_T     
                                           AND (OLD_OPER LIKE 'A04%' OR OLD_OPER LIKE 'A06%' OR OLD_OPER = 'A0333') 
                                           AND HIST_DEL_FLAG = ' ' 
                                           AND LOT_TYPE = 'W' 
                                         GROUP BY EMERGENCY.DATA, MAT_ID, LOT_ID, OLD_OPER     
                                        ) WIPMOV     
                                 WHERE 1 = 1     
                                   AND RES.LOT_ID = WIPMOV.LOT_ID     
                                   AND MAT.DELETE_FLAG = ' '     
                                   AND RES.FACTORY = UPH.FACTORY(+)     
                                   AND RES.OPER = UPH.OPER(+)     
                                   AND RES.RES_MODEL = UPH.RES_MODEL(+)     
                                   AND RES.UPEH_GRP = UPH.UPEH_GRP(+)     
                                   AND RES.RES_STS_2 = UPH.MAT_ID(+)     
                                   AND RES.FACTORY = MAT.FACTORY     
                                   AND RES.RES_STS_2 = MAT.MAT_ID     
                                   AND MAT.MAT_ID = WIPMOV.MAT_ID     
                                   AND RES.OPER = WIPMOV.OPER     
                                   AND ((RES.OPER LIKE 'A040%' AND RES.OPER = 'A040'||DECODE(MAT.MAT_GRP_4,'SD2','2','SD3','3','SD4','4','SD5','5','SD8','8','0' ) ) OR 
                                        (RES.OPER LIKE 'A060%' AND RES.OPER = 'A060'||DECODE(MAT.MAT_GRP_4,'SD2','2','SD3','3','SD4','4','SD5','5','SD8','8','0' ) ) OR RES.OPER = 'A0333')  
                                 GROUP BY WIPMOV.DATA, MAT.MAT_ID, SUBSTR(WIPMOV.OPER, 1,3), WIPMOV.LOT_ID     
                        )     
                         GROUP BY DATA, MAT_ID, OPER, LOT_ID     
                     )     
                 GROUP BY DATA     
                ) RESARR_LOT     
                  ON EMERGENCY.DATA = RESARR_LOT.DATA     
           LEFT OUTER JOIN (     
                SELECT SAP.SAP_CODE, MAT.VENDOR_ID, MAT.MAT_ID, SUM(SAP.TAT_DAY+SAP.TAT_DAY_WAIT) AS TAT     
                  FROM CWIPSAPTAT@RPTTOMES SAP     
                     , MWIPMATDEF MAT     
                 WHERE SAP.SAP_CODE = MAT.VENDOR_ID     
                   AND MAT.FACTORY = 'HMVA2'         
                   AND MAT.FACTORY = SAP.FACTORY         
                   AND MAT.MAT_TYPE = 'FG'         
                   AND SAP.RESV_FIELD_1 = ' '          
                 GROUP BY SAP.SAP_CODE, MAT.VENDOR_ID, MAT.MAT_ID     
                ) TAT ON MAT.MAT_ID = TAT.MAT_ID     
            LEFT OUTER JOIN (       
                SELECT C.DATA, B.MAT_ID, MAX(B.MAT_GRP_10) AS MAT_GRP_10,  MAX(B.MAT_GRP_9) AS MAT_GRP_9, MAX(B.MAT_GRP_6) AS MAT_GRP_6, MAX(D.DATA_1 ) AS CUSTOMER, MAX(B.MAT_GRP_1) AS MAT_GRP_1  
                  FROM RWIPLOTSTS A, MWIPMATDEF B, EMERGENCY C, (SELECT DATA_1, KEY_1 FROM MGCMTBLDAT WHERE TABLE_NAME = 'H_CUSTOMER') D       
                 WHERE A.LOT_ID = C.DATA       
                   AND A.MAT_ID = B.MAT_ID       
                   AND D.KEY_1 = B.MAT_GRP_1       
                 GROUP BY C.DATA, B.MAT_ID) HEAD ON EMERGENCY.DATA = HEAD.DATA           
          WHERE 1=1     
            AND EMERGENCY.GUBUN <> 'PART'     
            AND MAT_ID LIKE '%'     
          ORDER BY 1,2,3,MAT_ID     

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
SELECT MIN(SYS_DATE) AS START_DAY 
     , MAX(SYS_DATE) AS END_DAY 
     , PLAN_YEAR||DECODE(LENGTH(PLAN_WEEK), 1, '0'||PLAN_WEEK, PLAN_WEEK) AS WEEK
  FROM MWIPCALDEF 
 WHERE CALENDAR_ID = 'OTD'
   AND (PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) IN ( 
                                                SELECT WW
                                                  FROM (
                                                        SELECT WW
                                                             , ROW_NUMBER() OVER(ORDER BY WW) AS RNK
                                                          FROM (
                                                                SELECT DISTINCT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW
                                                                  FROM MWIPCALDEF
                                                                 WHERE CALENDAR_ID = 'OTD'
                                                                   AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') >= (
                                                                                                              SELECT MAX(PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) AS WW
                                                                                                                FROM MWIPCALDEF
                                                                                                               WHERE CALENDAR_ID = 'OTD'
                                                                                                                 AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') < (SELECT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW FROM MWIPCALDEF WHERE CALENDAR_ID = 'OTD' AND SYS_DATE = '20200522')
                                                                                                                 AND SYS_DATE >= TO_CHAR(TO_DATE('20200522', 'YYYYMMDD')-14, 'YYYYMMDD')
                                                                                                             )
                                                               ) 
                                                       )
                                                 WHERE RNK <= 7
                                               ) 
 GROUP BY PLAN_YEAR, PLAN_WEEK 
 ORDER BY PLAN_YEAR, PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE) AS START_DAY 
     , MAX(SYS_DATE) AS END_DAY 
     , PLAN_YEAR||DECODE(LENGTH(PLAN_WEEK), 1, '0'||PLAN_WEEK, PLAN_WEEK) AS WEEK
  FROM MWIPCALDEF 
 WHERE CALENDAR_ID = 'SE'
   AND (PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) IN ( 
                                                SELECT WW
                                                  FROM (
                                                        SELECT WW
                                                             , ROW_NUMBER() OVER(ORDER BY WW) AS RNK
                                                          FROM (
                                                                SELECT DISTINCT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW
                                                                  FROM MWIPCALDEF
                                                                 WHERE CALENDAR_ID = 'SE'
                                                                   AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') >= (
                                                                                                              SELECT MAX(PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) AS WW
                                                                                                                FROM MWIPCALDEF
                                                                                                               WHERE CALENDAR_ID = 'SE'
                                                                                                                 AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') < (SELECT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW FROM MWIPCALDEF WHERE CALENDAR_ID = 'SE' AND SYS_DATE = '20200522')
                                                                                                                 AND SYS_DATE >= TO_CHAR(TO_DATE('20200522', 'YYYYMMDD')-14, 'YYYYMMDD')
                                                                                                             )
                                                               ) 
                                                       )
                                                 WHERE RNK <= 7
                                               ) 
 GROUP BY PLAN_YEAR, PLAN_WEEK 
 ORDER BY PLAN_YEAR, PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT LANGUAGE_1 FROM RWEBFUNDEF WHERE FUNC_NAME = 'PRD011015'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE) AS START_DAY 
     , MAX(SYS_DATE) AS END_DAY 
     , PLAN_YEAR||DECODE(LENGTH(PLAN_WEEK), 1, '0'||PLAN_WEEK, PLAN_WEEK) AS WEEK
  FROM MWIPCALDEF 
 WHERE CALENDAR_ID = 'OTD'
   AND (PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) IN ( 
                                                SELECT WW
                                                  FROM (
                                                        SELECT WW
                                                             , ROW_NUMBER() OVER(ORDER BY WW) AS RNK
                                                          FROM (
                                                                SELECT DISTINCT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW
                                                                  FROM MWIPCALDEF
                                                                 WHERE CALENDAR_ID = 'OTD'
                                                                   AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') >= (
                                                                                                              SELECT MAX(PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) AS WW
                                                                                                                FROM MWIPCALDEF
                                                                                                               WHERE CALENDAR_ID = 'OTD'
                                                                                                                 AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') < (SELECT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW FROM MWIPCALDEF WHERE CALENDAR_ID = 'OTD' AND SYS_DATE = '20200522')
                                                                                                                 AND SYS_DATE >= TO_CHAR(TO_DATE('20200522', 'YYYYMMDD')-14, 'YYYYMMDD')
                                                                                                             )
                                                               ) 
                                                       )
                                                 WHERE RNK <= 7
                                               ) 
 GROUP BY PLAN_YEAR, PLAN_WEEK 
 ORDER BY PLAN_YEAR, PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE) AS START_DAY 
     , MAX(SYS_DATE) AS END_DAY 
     , PLAN_YEAR||DECODE(LENGTH(PLAN_WEEK), 1, '0'||PLAN_WEEK, PLAN_WEEK) AS WEEK
  FROM MWIPCALDEF 
 WHERE CALENDAR_ID = 'SE'
   AND (PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) IN ( 
                                                SELECT WW
                                                  FROM (
                                                        SELECT WW
                                                             , ROW_NUMBER() OVER(ORDER BY WW) AS RNK
                                                          FROM (
                                                                SELECT DISTINCT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW
                                                                  FROM MWIPCALDEF
                                                                 WHERE CALENDAR_ID = 'SE'
                                                                   AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') >= (
                                                                                                              SELECT MAX(PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) AS WW
                                                                                                                FROM MWIPCALDEF
                                                                                                               WHERE CALENDAR_ID = 'SE'
                                                                                                                 AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') < (SELECT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW FROM MWIPCALDEF WHERE CALENDAR_ID = 'SE' AND SYS_DATE = '20200522')
                                                                                                                 AND SYS_DATE >= TO_CHAR(TO_DATE('20200522', 'YYYYMMDD')-14, 'YYYYMMDD')
                                                                                                             )
                                                               ) 
                                                       )
                                                 WHERE RNK <= 7
                                               ) 
 GROUP BY PLAN_YEAR, PLAN_WEEK 
 ORDER BY PLAN_YEAR, PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT (SELECT DATA_1 FROM MGCMTBLDAT@RPTTOMES WHERE FACTORY = 'HMVA2' AND TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = MAT_GRP_1) AS CUSTOMER, MAT_GRP_9 AS MAJOR, MAT_GRP_10 AS PKG, MAT_GRP_6 AS LD_COUNT, MAT_CMF_11 AS PKG_CODE,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ' 
     , ROUND(SUM(PLAN)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS PLAN 
     , ROUND(SUM(SHP)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS SHP 
     , ROUND(SUM(DEF)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS DEF 
     , GUBUN 
     , ROUND(SUM(HMK3A)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS HMK3A 
     , ROUND(SUM(QC_GATE)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS QC_GATE 
     , ROUND(SUM(PVI)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS PVI 
     , ROUND(SUM(AVI)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS AVI 
     , ROUND(SUM(SIG)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS SIG 
     , ROUND(SUM(SBA)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS SBA 
     , ROUND(SUM(TIN)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS TIN 
     , ROUND(SUM(TRIM)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS TRIM 
     , ROUND(SUM(MK)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS MK 
     , ROUND(SUM(CURE)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS CURE 
     , ROUND(SUM(MOLD)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS MOLD 
     , ROUND(SUM(GATE)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS GATE 
     , ROUND(SUM(WB9)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS WB9 
     , ROUND(SUM(DA9)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS DA9 
     , ROUND(SUM(WB8)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS WB8 
     , ROUND(SUM(DA8)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS DA8 
     , ROUND(SUM(WB7)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS WB7 
     , ROUND(SUM(DA7)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS DA7 
     , ROUND(SUM(WB6)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS WB6 
     , ROUND(SUM(DA6)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS DA6 
     , ROUND(SUM(WB5)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS WB5 
     , ROUND(SUM(DA5)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS DA5 
     , ROUND(SUM(WB4)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS WB4 
     , ROUND(SUM(DA4)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS DA4 
     , ROUND(SUM(WB3)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS WB3 
     , ROUND(SUM(DA3)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS DA3 
     , ROUND(SUM(WB2)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS WB2 
     , ROUND(SUM(DA2)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS DA2 
     , ROUND(SUM(WB1)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS WB1 
     , ROUND(SUM(DA1)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS DA1 
     , ROUND(SUM(SP)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS SP 
     , ROUND(SUM(SAW)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS SAW 
     , ROUND(SUM(BG)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS BG 
     , ROUND(SUM(HMK2A)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS HMK2A 
     , ROUND(SUM(WIP_DEF)/DECODE(GUBUN, '설비대수', 1, 1000),0) AS WIP_DEF 
  FROM (  
        SELECT MAT_GRP_1, MAT_GRP_9, MAT_GRP_10, MAT_GRP_6, MAT_CMF_11,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', GUBUN 
             , MAX(PLAN) AS PLAN 
             , MAX(SHP) AS SHP 
             , MAX(DEF) AS DEF 
             , SUM(DECODE(OPER_GRP_1, 'HMK3A', SUM_DEF, 0)) AS HMK3A 
             , SUM(DECODE(OPER_GRP_1, 'QC_GATE', SUM_DEF, 0)) AS QC_GATE 
             , SUM(DECODE(OPER_GRP_1, 'PVI', SUM_DEF, 0)) AS PVI 
             , SUM(DECODE(OPER_GRP_1, 'AVI', SUM_DEF, 0)) AS AVI 
             , SUM(DECODE(OPER_GRP_1, 'SIG', SUM_DEF, 0)) AS SIG 
             , SUM(DECODE(OPER_GRP_1, 'SBA', SUM_DEF, 0)) AS SBA 
             , SUM(DECODE(OPER_GRP_1, 'TIN', SUM_DEF, 0)) AS TIN 
             , SUM(DECODE(OPER_GRP_1, 'TRIM', SUM_DEF, 0)) AS TRIM 
             , SUM(DECODE(OPER_GRP_1, 'MK', SUM_DEF, 0)) AS MK 
             , SUM(DECODE(OPER_GRP_1, 'CURE', SUM_DEF, 0)) AS CURE 
             , SUM(DECODE(OPER_GRP_1, 'MOLD', SUM_DEF, 0)) AS MOLD 
             , SUM(DECODE(OPER_GRP_1, 'GATE', SUM_DEF, 0)) AS GATE 
             , SUM(DECODE(OPER_GRP_1, 'WB9', SUM_DEF, 0)) AS WB9 
             , SUM(DECODE(OPER_GRP_1, 'DA9', SUM_DEF, 0)) AS DA9 
             , SUM(DECODE(OPER_GRP_1, 'WB8', SUM_DEF, 0)) AS WB8 
             , SUM(DECODE(OPER_GRP_1, 'DA8', SUM_DEF, 0)) AS DA8 
             , SUM(DECODE(OPER_GRP_1, 'WB7', SUM_DEF, 0)) AS WB7 
             , SUM(DECODE(OPER_GRP_1, 'DA7', SUM_DEF, 0)) AS DA7 
             , SUM(DECODE(OPER_GRP_1, 'WB6', SUM_DEF, 0)) AS WB6 
             , SUM(DECODE(OPER_GRP_1, 'DA6', SUM_DEF, 0)) AS DA6 
             , SUM(DECODE(OPER_GRP_1, 'WB5', SUM_DEF, 0)) AS WB5 
             , SUM(DECODE(OPER_GRP_1, 'DA5', SUM_DEF, 0)) AS DA5 
             , SUM(DECODE(OPER_GRP_1, 'WB4', SUM_DEF, 0)) AS WB4 
             , SUM(DECODE(OPER_GRP_1, 'DA4', SUM_DEF, 0)) AS DA4 
             , SUM(DECODE(OPER_GRP_1, 'WB3', SUM_DEF, 0)) AS WB3 
             , SUM(DECODE(OPER_GRP_1, 'DA3', SUM_DEF, 0)) AS DA3 
             , SUM(DECODE(OPER_GRP_1, 'WB2', SUM_DEF, 0)) AS WB2 
             , SUM(DECODE(OPER_GRP_1, 'DA2', SUM_DEF, 0)) AS DA2 
             , SUM(DECODE(OPER_GRP_1, 'WB1', SUM_DEF, 0)) AS WB1 
             , SUM(DECODE(OPER_GRP_1, 'DA1', SUM_DEF, 0)) AS DA1 
             , SUM(DECODE(OPER_GRP_1, 'SP', SUM_DEF, 0)) AS SP 
             , SUM(DECODE(OPER_GRP_1, 'SAW', SUM_DEF, 0)) AS SAW 
             , SUM(DECODE(OPER_GRP_1, 'BG', SUM_DEF, 0)) AS BG 
             , SUM(DECODE(OPER_GRP_1, 'HMK2A',SUM_DEF, 0)) AS HMK2A 
             , MAX(WIP_TTL) AS WIP_TTL 
             , MAX(DEF) - MAX(WIP_TTL) AS WIP_DEF 
          FROM ( 
                SELECT MAT_GRP_1, MAT_GRP_9, MAT_GRP_10, MAT_GRP_6, MAT_CMF_11,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ' 
                     , OPER_GRP_1 
                     , DECODE(SEQ, 1, 'WIP', 2, '설비대수', 3, 'CAPA현황', 4, '당일 실적', 5, 'D0 잔량', 6, 'D1 잔량', 7, 'D2 잔량', 8, '당주 잔량', 9, '차주 잔량', 10, '월간 잔량') AS GUBUN 
                     , SUM(DECODE(SEQ, 1, 0, 2, 0, 3, 0, 4, 0, 5, D0_PLAN, 6, D1_PLAN, 7, D2_PLAN, 8, WEEK_PLAN, 9, WEEK2_PLAN, 10, MON_PLAN)) AS PLAN  
                     , SUM(DECODE(SEQ, 1, 0, 2, 0, 3, 0, 4, 0, 5, SHP_TODAY, 6, SHP_D1, 7, SHP_D2, 8, SHP_WEEK, 9, SHP2_WEEK, 10, SHP_MONTH)) AS SHP 
                     , SUM(DECODE(SEQ, 1, 0, 2, 0, 3, 0, 4, 0, 5, D0_DEF, 6, D1_DEF, 7, D2_DEF, 8, WEEK_DEF, 9, WEEK2_DEF, 10, MONTH_DEF)) AS DEF 
                     , SUM(DECODE(SEQ, 1, WIP_QTY, 2, RES_CNT, 3, RES_CAPA, 4, ASSY_END_QTY, 5, D0_SUM_QUANTITY, 6, D1_SUM_QUANTITY, 7, D2_SUM_QUANTITY, 8, WEEK_SUM_QUANTITY, 9, WEEK2_SUM_QUANTITY, 10, MONTH_SUM_QUANTITY)) AS SUM_DEF 
                     , MAX(DECODE(SEQ, 1, 0, 2, 0, 3, 0, 4, 0, WIP_TTL)) AS WIP_TTL 
                  FROM ( 
                        SELECT MAT_GRP_1, MAT_GRP_9, MAT_GRP_10, MAT_GRP_6, MAT_CMF_11,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', OPER_GRP_1 
                             , SUM(NVL(D0_PLAN,0)) AS D0_PLAN, SUM(NVL(SHP_TODAY,0)) AS SHP_TODAY, SUM(NVL(D0_DEF,0)) AS D0_DEF 
                             , SUM(NVL(D1_PLAN,0)) AS D1_PLAN, SUM(NVL(SHP_D1,0)) AS SHP_D1, SUM(NVL(D1_DEF,0)) AS D1_DEF 
                             , SUM(NVL(D2_PLAN,0)) AS D2_PLAN, SUM(NVL(SHP_D2,0)) AS SHP_D2, SUM(NVL(D2_DEF,0)) AS D2_DEF 
                             , SUM(NVL(WEEK_PLAN,0)) AS WEEK_PLAN, SUM(NVL(SHP_WEEK,0)) AS SHP_WEEK, SUM(NVL(WEEK_DEF,0)) AS WEEK_DEF 
                             , SUM(NVL(WEEK2_PLAN,0)) AS WEEK2_PLAN, SUM(NVL(SHP2_WEEK,0)) AS SHP2_WEEK, SUM(NVL(WEEK2_DEF,0)) AS WEEK2_DEF 
                             , SUM(NVL(MON_PLAN,0)) AS MON_PLAN, SUM(NVL(SHP_MONTH,0)) AS SHP_MONTH, SUM(NVL(MONTH_DEF,0)) AS MONTH_DEF 
                             , SUM(NVL(ASSY_END_QTY,0)) AS ASSY_END_QTY 
                             , SUM(NVL(WIP_QTY,0)) AS WIP_QTY 
                             , SUM(SUM(WIP_QTY)) OVER(PARTITION BY MAT_GRP_1, MAT_GRP_9, MAT_GRP_10, MAT_GRP_6, MAT_CMF_11,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ') AS WIP_TTL 
                             , SUM(RES_CNT) AS RES_CNT 
                             , SUM(RES_CAPA) AS RES_CAPA 
                             , SUM(NVL(D0_DEF-WIP_SUM_QUANTITY+WIP_QTY,0)) AS D0_SUM_QUANTITY 
                             , SUM(NVL(D1_DEF-WIP_SUM_QUANTITY+WIP_QTY,0)) AS D1_SUM_QUANTITY 
                             , SUM(NVL(D2_DEF-WIP_SUM_QUANTITY+WIP_QTY,0)) AS D2_SUM_QUANTITY 
                             , SUM(NVL(WEEK_DEF-WIP_SUM_QUANTITY+WIP_QTY,0)) AS WEEK_SUM_QUANTITY 
                             , SUM(NVL(WEEK2_DEF-WIP_SUM_QUANTITY+WIP_QTY,0)) AS WEEK2_SUM_QUANTITY 
                             , SUM(NVL(MONTH_DEF-WIP_SUM_QUANTITY+WIP_QTY,0)) AS MONTH_SUM_QUANTITY 
                          FROM ( 
                                SELECT MAT.MAT_GRP_1, MAT.MAT_GRP_2, MAT.MAT_GRP_4, MAT.MAT_GRP_5, MAT.MAT_GRP_6, MAT.MAT_GRP_7, MAT.MAT_GRP_8, MAT.MAT_GRP_9, MAT.MAT_GRP_10, MAT.MAT_CMF_10, MAT.MAT_CMF_7, MAT.MAT_CMF_8, MAT.MAT_CMF_11, MAT.MAT_ID, MAT.CONV_MAT_ID, MAT.OPER_GRP_1 
                                     , A.D0_PLAN, A.SHP_TODAY, A.D0_DEF 
                                     , A.D1_PLAN, A.SHP_D1, A.D1_DEF 
                                     , A.D2_PLAN, A.SHP_D2, A.D2_DEF 
                                     , A.WEEK_PLAN, A.SHP_WEEK, A.WEEK_DEF 
                                     , A.WEEK2_PLAN, A.SHP2_WEEK, A.WEEK2_DEF 
                                     , A.MON_PLAN, A.SHP_MONTH, A.MONTH_DEF 
                                     , A.D0_ORI_PLAN 
                                     , NVL(B.ASSY_END_QTY,0) AS ASSY_END_QTY 
                                     , MAX(NVL(B.ASSY_END_QTY,0)) OVER(PARTITION BY MAT.MAT_GRP_1, MAT.MAT_GRP_9, MAT.MAT_GRP_10, MAT.MAT_GRP_6, MAT.MAT_CMF_11,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ') AS CHK_ASSY_END_QTY 
                                     , NVL(WIP.QTY,0) AS WIP_QTY 
                                     , RES_CNT 
                                     , RES_CAPA 
                                     , SUM(NVL(WIP.QTY,0)) OVER(PARTITION BY A.MAT_ID ORDER BY MAT.MAT_ID, DECODE(MAT.OPER_GRP_1, 'HMK3A', 1, 'QC_GATE', 2, 'PVI', 3, 'AVI', 4, 'SIG', 5, 'SBA', 6, 'TIN', 7, 'TRIM', 8, 'MK', 9, 'CURE', 10, 'MOLD', 11, 'GATE', 12 
                                                                                                                                , 'WB9', 13, 'DA9', 14, 'WB8', 15, 'DA8', 16, 'WB7', 17, 'DA7', 18, 'WB6', 19, 'DA6', 20, 'WB5', 21, 'DA5', 22, 'WB4', 23, 'DA4', 24 
                                                                                                                                , 'WB3', 25, 'DA3', 26, 'WB2', 27, 'DA2', 28, 'WB1', 29, 'DA1', 30, 'SP', 31, 'SAW', 32, 'BG', 33, 'HMK2A',34, 35)) AS WIP_SUM_QUANTITY 
                                  FROM ( 
                                        SELECT MAT_GRP_1, MAT_GRP_2, MAT_GRP_4, MAT_GRP_5, MAT_GRP_6, MAT_GRP_7, MAT_GRP_8, MAT_GRP_9, MAT_GRP_10, MAT_CMF_10, MAT_CMF_7, MAT_CMF_8, MAT_CMF_11, MAT_ID, OPER_GRP_1 
                                             , CASE WHEN MAT_GRP_1 = 'SE' AND MAT_GRP_9 = 'MEMORY' THEN 'SEK_________-___' || SUBSTR(MAT_ID, -3) 
                                                    WHEN MAT_GRP_1 = 'HX' THEN MAT_CMF_10 
                                                    ELSE MAT_ID 
                                                END CONV_MAT_ID 
                                          FROM ( 
                                                SELECT * 
                                                  FROM (
                                                        SELECT A.* 
                                                          FROM MWIPMATDEF A
                                                         WHERE 1=1 
                                                           AND FACTORY = 'HMVA2' 
                                                           AND DELETE_FLAG = ' ' 
                                                           AND MAT_TYPE = 'FG' 
                                                           AND MAT_ID LIKE '%' 
                                                           AND MAT_GRP_10 NOT LIKE 'COB%' 
                                                       ) 
                                               ) 
                                             , ( 
                                                SELECT DECODE(LEVEL, 1, 'HMK3A', 2, 'QC_GATE', 3, 'PVI', 4, 'AVI', 5, 'SIG', 6, 'SBA', 7, 'TIN', 8, 'TRIM', 9, 'MK', 10, 'CURE', 11, 'MOLD', 12, 'GATE' 
                                                                   , 13, 'WB9', 14, 'DA9', 15, 'WB8', 16, 'DA8', 17, 'WB7', 18, 'DA7', 19, 'WB6', 20, 'DA6', 21, 'WB5', 22, 'DA5', 23, 'WB4', 24, 'DA4'
                                                                   , 25, 'WB3', 26, 'DA3', 27, 'WB2', 28, 'DA2', 29, 'WB1', 30, 'DA1', 31, 'SP', 32, 'SAW', 33, 'BG', 34, 'HMK2A' 
                                                             ) OPER_GRP_1 
                                                  FROM DUAL CONNECT BY LEVEL <= 34 
                                               ) 
                                       ) MAT 
                                     , ( 
                                        SELECT MAT.MAT_ID 
                                             , SUM(NVL(D0_PLAN, 0) + (NVL(WEEK1_TTL, 0) - NVL(SHP_WEEK_TTL, 0))) AS D0_PLAN 
                                             , SUM(NVL(D0_PLAN, 0)) AS D0_ORI_PLAN 
                                             , SUM(NVL(SHP_TODAY, 0)) AS SHP_TODAY 
                                             , SUM(NVL(D0_PLAN, 0) + (NVL(WEEK1_TTL, 0) - NVL(SHP_WEEK_TTL, 0)) - NVL(SHP_TODAY, 0)) AS D0_DEF 
                                             , SUM(NVL(D1_PLAN, 0)) AS D1_PLAN 
                                             , 0 AS SHP_D1 
                                             , SUM(NVL(D1_PLAN, 0) + NVL(D0_PLAN, 0) + (NVL(WEEK1_TTL, 0) - NVL(SHP_WEEK_TTL, 0)) - NVL(SHP_TODAY, 0)) AS D1_DEF 
                                             , SUM(NVL(D2_PLAN, 0)) AS D2_PLAN 
                                             , 0 AS SHP_D2 
                                             , SUM(NVL(D2_PLAN, 0) + NVL(D1_PLAN, 0) + NVL(D0_PLAN, 0) + (NVL(WEEK1_TTL, 0) - NVL(SHP_WEEK_TTL, 0)) - NVL(SHP_TODAY, 0)) AS D2_DEF 
                                             , SUM(NVL(WEEK1_PLAN, 0)) AS WEEK_PLAN 
                                             , SUM(NVL(SHP_WEEK, 0)) AS SHP_WEEK 
                                             , SUM(NVL(WEEK1_PLAN, 0) - NVL(SHP_WEEK, 0)) AS WEEK_DEF 
                                             , SUM(NVL(WEEK2_PLAN, 0)) AS WEEK2_PLAN 
                                             , 0 AS SHP2_WEEK 
                                             , SUM(NVL(WEEK2_PLAN, 0) + NVL(WEEK1_PLAN, 0) - NVL(SHP_WEEK, 0)) AS WEEK2_DEF 
                                             , SUM(NVL(CASE WHEN MAT.MAT_GRP_3 IN ('COB') THEN ROUND(MON.RESV_FIELD1/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0) 
                                                    ELSE MON.RESV_FIELD1 
                                                END,0)) MON_PLAN 
                                             , SUM(NVL(SHP_MONTH, 0)) AS SHP_MONTH 
                                             , SUM(NVL(CASE WHEN MAT.MAT_GRP_3 IN ('COB') THEN ROUND(NVL(MON.RESV_FIELD1,0)/TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)),0)-NVL(SHP_MONTH, 0) 
                                                    ELSE NVL(MON.RESV_FIELD1, 0)-NVL(SHP_MONTH, 0) 
                                                END,0)) MONTH_DEF 
                                          FROM MWIPMATDEF MAT 
                                             , ( 
                                                SELECT FACTORY, MAT_ID 
                                                     , SUM(CASE WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200522', 'YYYYMMDD'), 'D') = 1 THEN D0_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200522', 'YYYYMMDD'), 'D') = 2 THEN D0_QTY + D1_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200522', 'YYYYMMDD'), 'D') = 3 THEN D0_QTY + D1_QTY + D2_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200522', 'YYYYMMDD'), 'D') = 4 THEN D0_QTY + D1_QTY + D2_QTY + D3_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200522', 'YYYYMMDD'), 'D') = 5 THEN D0_QTY + D1_QTY + D2_QTY + D3_QTY + D4_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200522', 'YYYYMMDD'), 'D') = 6 THEN D0_QTY + D1_QTY + D2_QTY + D3_QTY + D4_QTY + D5_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200522', 'YYYYMMDD'), 'D') = 3 THEN D0_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200522', 'YYYYMMDD'), 'D') = 4 THEN D0_QTY + D1_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200522', 'YYYYMMDD'), 'D') = 5 THEN D0_QTY + D1_QTY + D2_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200522', 'YYYYMMDD'), 'D') = 6 THEN D0_QTY + D1_QTY + D2_QTY + D3_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200522', 'YYYYMMDD'), 'D') = 7 THEN D0_QTY + D1_QTY + D2_QTY + D3_QTY + D4_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200522', 'YYYYMMDD'), 'D') = 1 THEN D0_QTY + D1_QTY + D2_QTY + D3_QTY + D4_QTY + D5_QTY 
                                                                ELSE 0 
                                                           END) AS WEEK1_TTL 
                                                     , SUM(W1_QTY) AS WEEK1_PLAN 
                                                     , SUM(W2_QTY) AS WEEK2_PLAN 
                                                     , SUM(NVL(W1_QTY,0) + NVL(W2_QTY,0)) AS WEEK_TTL 
                                                     , SUM(CASE WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200522', 'YYYYMMDD'), 'D') = 7 THEN D0_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200522', 'YYYYMMDD'), 'D') = 1 THEN D1_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200522', 'YYYYMMDD'), 'D') = 2 THEN D2_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200522', 'YYYYMMDD'), 'D') = 3 THEN D3_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200522', 'YYYYMMDD'), 'D') = 4 THEN D4_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200522', 'YYYYMMDD'), 'D') = 5 THEN D5_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200522', 'YYYYMMDD'), 'D') = 6 THEN D6_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200522', 'YYYYMMDD'), 'D') = 2 THEN D0_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200522', 'YYYYMMDD'), 'D') = 3 THEN D1_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200522', 'YYYYMMDD'), 'D') = 4 THEN D2_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200522', 'YYYYMMDD'), 'D') = 5 THEN D3_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200522', 'YYYYMMDD'), 'D') = 6 THEN D4_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200522', 'YYYYMMDD'), 'D') = 7 THEN D5_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200522', 'YYYYMMDD'), 'D') = 1 THEN D6_QTY 
                                                                ELSE 0 
                                                           END) AS D0_PLAN 
                                                     , SUM(CASE WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200522', 'YYYYMMDD'), 'D') = 7 THEN D1_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200522', 'YYYYMMDD'), 'D') = 1 THEN D2_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200522', 'YYYYMMDD'), 'D') = 2 THEN D3_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200522', 'YYYYMMDD'), 'D') = 3 THEN D4_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200522', 'YYYYMMDD'), 'D') = 4 THEN D5_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200522', 'YYYYMMDD'), 'D') = 5 THEN D6_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200522', 'YYYYMMDD'), 'D') = 6 THEN D7_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200522', 'YYYYMMDD'), 'D') = 2 THEN D1_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200522', 'YYYYMMDD'), 'D') = 3 THEN D2_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200522', 'YYYYMMDD'), 'D') = 4 THEN D3_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200522', 'YYYYMMDD'), 'D') = 5 THEN D4_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200522', 'YYYYMMDD'), 'D') = 6 THEN D5_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200522', 'YYYYMMDD'), 'D') = 7 THEN D6_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200522', 'YYYYMMDD'), 'D') = 1 THEN D7_QTY 
                                                                ELSE 0 
                                                           END) AS D1_PLAN 
                                                     , SUM(CASE WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200522', 'YYYYMMDD'), 'D') = 7 THEN D2_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200522', 'YYYYMMDD'), 'D') = 1 THEN D3_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200522', 'YYYYMMDD'), 'D') = 2 THEN D4_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200522', 'YYYYMMDD'), 'D') = 3 THEN D5_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200522', 'YYYYMMDD'), 'D') = 4 THEN D6_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200522', 'YYYYMMDD'), 'D') = 5 THEN D7_QTY 
                                                                WHEN CALENDAR_ID = 'OTD' AND TO_CHAR(TO_DATE('20200522', 'YYYYMMDD'), 'D') = 6 THEN D8_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200522', 'YYYYMMDD'), 'D') = 2 THEN D2_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200522', 'YYYYMMDD'), 'D') = 3 THEN D3_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200522', 'YYYYMMDD'), 'D') = 4 THEN D4_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200522', 'YYYYMMDD'), 'D') = 5 THEN D5_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200522', 'YYYYMMDD'), 'D') = 6 THEN D6_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200522', 'YYYYMMDD'), 'D') = 7 THEN D7_QTY 
                                                                WHEN CALENDAR_ID = 'SE' AND TO_CHAR(TO_DATE('20200522', 'YYYYMMDD'), 'D') = 1 THEN D8_QTY 
                                                                ELSE 0 
                                                           END) AS D2_PLAN 
                                                  FROM ( 
                                                        SELECT FACTORY, MAT_ID, 'OTD' AS CALENDAR_ID 
                                                             , SUM(DECODE(PLAN_WEEK, '202021', D0_QTY, 0)) AS D0_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202021', D1_QTY, 0)) AS D1_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202021', D2_QTY, 0)) AS D2_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202021', D3_QTY, 0)) AS D3_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202021', D4_QTY, 0)) AS D4_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202021', D5_QTY, 0)) AS D5_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202021', D6_QTY, 0)) AS D6_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202022', D0_QTY, 0)) AS D7_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202022', D1_QTY, 0)) AS D8_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202022', D2_QTY, 0)) AS D9_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202022', D3_QTY, 0)) AS D10_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202022', D4_QTY, 0)) AS D11_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202022', D5_QTY, 0)) AS D12_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202022', D6_QTY, 0)) AS D13_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202021', WW_QTY, 0)) AS W1_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202022', WW_QTY, 0)) AS W2_QTY  
                                                          FROM RWIPPLNWEK  
                                                         WHERE 1=1  
                                                           AND FACTORY = 'HMVA2'  
                                                           AND GUBUN = '3'  
                                                           AND MAT_ID NOT LIKE 'SES%' 
                                                           AND PLAN_WEEK IN ('202021','202022') 
                                                         GROUP BY FACTORY, MAT_ID  
                                                         UNION ALL 
                                                        SELECT FACTORY, MAT_ID, 'SE' AS CALENDAR_ID  
                                                             , SUM(DECODE(PLAN_WEEK, '202021', D0_QTY, 0)) AS D0_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202021', D1_QTY, 0)) AS D1_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202021', D2_QTY, 0)) AS D2_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202021', D3_QTY, 0)) AS D3_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202021', D4_QTY, 0)) AS D4_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202021', D5_QTY, 0)) AS D5_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202021', D6_QTY, 0)) AS D6_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202022', D0_QTY, 0)) AS D7_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202022', D1_QTY, 0)) AS D8_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202022', D2_QTY, 0)) AS D9_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202022', D3_QTY, 0)) AS D10_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202022', D4_QTY, 0)) AS D11_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202022', D5_QTY, 0)) AS D12_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202022', D6_QTY, 0)) AS D13_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202021', WW_QTY, 0)) AS W1_QTY  
                                                             , SUM(DECODE(PLAN_WEEK, '202022', WW_QTY, 0)) AS W2_QTY  
                                                          FROM RWIPPLNWEK  
                                                         WHERE 1=1  
                                                           AND FACTORY = 'HMVA2'  
                                                           AND GUBUN = '3'  
                                                           AND MAT_ID LIKE 'SES%' 
                                                           AND PLAN_WEEK IN ('202021','202022') 
                                                         GROUP BY FACTORY, MAT_ID  
                                                       )  
                                                 GROUP BY FACTORY, MAT_ID  
                                               ) PLN 
                                             , (  
                                                SELECT FACTORY,MAT_ID, RESV_FIELD1  
                                                  FROM (  
                                                        SELECT FACTORY, MAT_ID, SUM(RESV_FIELD1) AS RESV_FIELD1   
                                                          FROM (  
                                                                SELECT FACTORY, MAT_ID, SUM(TO_NUMBER(DECODE(RESV_FIELD1,' ',0,RESV_FIELD1))) AS RESV_FIELD1  
                                                                  FROM CWIPPLNMON  
                                                                 WHERE 1=1  
                                                                   AND FACTORY = 'HMVA2'  
                                                                   AND PLAN_MONTH = '202005' 
                                                                 GROUP BY FACTORY, MAT_ID 
                                                               )  
                                                         GROUP BY FACTORY, MAT_ID 
                                                       ) 
                                               ) MON 
                                             , (  
                                                SELECT MAT_ID  
                                                     , SUM(CASE WHEN SHP_QTY_1 > 0 AND WORK_DATE = '20200522' THEN NVL(SHP_QTY_1, 0) ELSE 0 END) AS SHP_TODAY  
                                                     , SUM(CASE WHEN SHP_QTY_1 > 0 AND MAT_ID LIKE 'SES%' AND WORK_DATE BETWEEN '20200518' AND '20200522' THEN NVL(SHP_QTY_1, 0)  
                                                                WHEN SHP_QTY_1 > 0 AND MAT_ID NOT LIKE 'SES%' AND WORK_DATE BETWEEN '20200516' AND '20200522' THEN NVL(SHP_QTY_1, 0) 
                                                                ELSE 0 END) AS SHP_WEEK  
                                                     , SUM(CASE WHEN SHP_QTY_1 > 0 AND MAT_ID LIKE 'SES%' AND WORK_DATE BETWEEN '20200518' AND '20200521' THEN NVL(SHP_QTY_1, 0)  
                                                                WHEN SHP_QTY_1 > 0 AND MAT_ID NOT LIKE 'SES%' AND WORK_DATE BETWEEN '20200516' AND '20200521' THEN NVL(SHP_QTY_1, 0)  
                                                                ELSE 0 END) AS SHP_WEEK_TTL  
                                                     , SUM(CASE WHEN WORK_DATE BETWEEN '20200501' AND '20200522' THEN NVL(SHP_QTY_1, 0) END) AS SHP_MONTH  
                                                  FROM VSUMWIPOUT 
                                                 WHERE 1=1  
                                                   AND FACTORY  = 'HMVA2'  
                                                   AND LOT_TYPE = 'W'  
                                                   AND CM_KEY_2 = 'PROD'  
                                                   AND CM_KEY_3 LIKE 'P%'
                                                   AND MAT_ID NOT LIKE 'HX%'  
                                                   AND WORK_DATE BETWEEN LEAST('20200501', '20200516', '20200518') AND '20200522' 
                                                 GROUP BY MAT_ID  
                                                 UNION ALL  
                                                SELECT MAT_ID  
                                                     , SUM(CASE WHEN SHP_QTY_1 > 0 AND WORK_DATE = '20200522' THEN NVL(SHP_QTY_1, 0) ELSE 0 END) AS SHP_TODAY  
                                                     , SUM(CASE WHEN SHP_QTY_1 > 0 AND WORK_DATE BETWEEN '20200516' AND '20200522' THEN NVL(SHP_QTY_1, 0) ELSE 0 END) AS SHP_WEEK  
                                                     , SUM(CASE WHEN SHP_QTY_1 > 0 AND WORK_DATE BETWEEN '20200516' AND '20200521' THEN NVL(SHP_QTY_1, 0) ELSE 0 END) AS SHP_WEEK_TTL  
                                                     , SUM(CASE WHEN WORK_DATE BETWEEN '20200501' AND '20200522' THEN NVL(SHP_QTY_1, 0) END) AS SHP_MONTH  
                                                  FROM VSUMWIPOUT_06 
                                                 WHERE 1=1  
                                                   AND FACTORY  = 'HMVA2'  
                                                   AND LOT_TYPE = 'W'  
                                                   AND CM_KEY_2 = 'PROD'  
                                                   AND CM_KEY_3 LIKE 'P%'
                                                   AND MAT_ID LIKE 'HX%'  
                                                   AND WORK_DATE BETWEEN '20200501' AND '20200522' 
                                                 GROUP BY MAT_ID 
                                               ) SHP 
                                         WHERE 1=1 
                                           AND MAT.FACTORY = 'HMVA2' 
                                           AND MAT.MAT_TYPE = 'FG' 
                                           AND MAT.DELETE_FLAG = ' ' 
                                           AND MAT.MAT_ID = PLN.MAT_ID(+) 
                                           AND MAT.MAT_ID = MON.MAT_ID(+) 
                                           AND MAT.MAT_ID = SHP.MAT_ID(+) 
                                         GROUP BY MAT.MAT_ID 
                                         ORDER BY MAT.MAT_ID 
                                       ) A 
                                     , ( 
                                        SELECT MAT_ID, OPER_GRP_1 
                                             , SUM(ASSY_END_QTY) AS ASSY_END_QTY 
                                          FROM ( 
                                                SELECT B.MAT_ID 
                                                     , CASE WHEN OPER IN ('A0000', 'A000N') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'HMK2A' 
                                                            WHEN OPER IN ('A0040') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'BG' 
                                                            WHEN OPER IN ('A0200', 'A0230') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'SAW' 
                                                            WHEN OPER IN ('A0400', 'A0401', 'A0333') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'DA1' 
                                                            WHEN OPER IN ('A0402') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'DA2' 
                                                            WHEN OPER IN ('A0403') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'DA3' 
                                                            WHEN OPER IN ('A0404') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'DA4' 
                                                            WHEN OPER IN ('A0405') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'DA5' 
                                                            WHEN OPER IN ('A0406') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'DA6' 
                                                            WHEN OPER IN ('A0407') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'DA7' 
                                                            WHEN OPER IN ('A0408') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'DA8' 
                                                            WHEN OPER IN ('A0409') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'DA9' 
                                                            WHEN OPER IN ('A0600','A0601') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'WB1' 
                                                            WHEN OPER IN ('A0602') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'WB2' 
                                                            WHEN OPER IN ('A0603') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'WB3' 
                                                            WHEN OPER IN ('A0604') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'WB4' 
                                                            WHEN OPER IN ('A0605') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'WB5' 
                                                            WHEN OPER IN ('A0606') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'WB6' 
                                                            WHEN OPER IN ('A0607') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'WB7' 
                                                            WHEN OPER IN ('A0608') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'WB8' 
                                                            WHEN OPER IN ('A0609') AND (MAT_GRP_5 IN ('-', '1st', 'Merge') OR MAT_GRP_5 LIKE 'Middle%') THEN 'WB9' 
                                                            WHEN OPER IN ('A0800', 'A0801', 'A0802', 'A0803', 'A0804', 'A0805', 'A0806', 'A0807', 'A0808', 'A0809') AND MAT_GRP_5 IN ('-', 'Merge') THEN 'GATE' 
                                                            WHEN OPER IN ('A1000', 'A0910') THEN 'MOLD' 
                                                            WHEN OPER IN ('A1100') THEN 'CURE' 
                                                            WHEN OPER IN ('A1150', 'A1500') THEN 'MK' 
                                                            WHEN OPER IN ('A1200') THEN 'TRIM' 
                                                            WHEN OPER IN ('A1450') THEN 'TIN' 
                                                            WHEN OPER IN ('A1300') THEN 'SBA' 
                                                            WHEN OPER IN ('A1750', 'A1800', 'A1900', 'A1825') THEN 'SIG' 
                                                            WHEN OPER IN ('A2000') THEN 'AVI' 
                                                            WHEN OPER IN ('A2050') THEN 'PVI' 
                                                            WHEN OPER IN ('A2100') THEN 'QC_GATE' 
                                                            WHEN OPER IN ('AZ010') THEN 'HMK3A' 
                                                            ELSE ' ' 
                                                        END OPER_GRP_1 
                                                     , (CASE WHEN OPER IN ('AZ010','SHIP','TZ010','F0000','EZ010', 'SZ010') THEN SHIP_QTY_1 ELSE END_QTY_1 END) ASSY_END_QTY 
                                                  FROM ( 
                                                        SELECT FACTORY, MAT_ID, OPER, LOT_TYPE, WORK_DATE, CM_KEY_3 
                                                             , SUM(END_LOT) AS END_LOT 
                                                             , SUM(END_QTY_1) AS END_QTY_1 
                                                             , SUM(END_QTY_2) AS END_QTY_2 
                                                             , SUM(CASE WHEN SHIP_QTY_1 > 0 THEN SHIP_QTY_1 ELSE 0 END) AS SHIP_QTY_1 
                                                             , SUM(CASE WHEN SHIP_QTY_2 > 0 THEN SHIP_QTY_2 ELSE 0 END) AS SHIP_QTY_2 
                                                          FROM ( 
                                                                SELECT FACTORY, MAT_ID, OPER, LOT_TYPE, WORK_DATE, CM_KEY_3 
                                                                     , DECODE(SUBSTR(OPER,2,4),'0000',SUM(S1_OPER_IN_LOT+S2_OPER_IN_LOT+S3_OPER_IN_LOT),SUM(S1_END_LOT+S2_END_LOT+S3_END_LOT)) END_LOT 
                                                                     , DECODE(SUBSTR(OPER,2,4),'0000',SUM(S1_OPER_IN_QTY_1+S2_OPER_IN_QTY_1+S3_OPER_IN_QTY_1),SUM(S1_END_QTY_1+S2_END_QTY_1+S3_END_QTY_1+S1_END_RWK_QTY_1 + S2_END_RWK_QTY_1 + S3_END_RWK_QTY_1)) END_QTY_1 
                                                                     , DECODE(SUBSTR(OPER,2,4),'0000',SUM(S1_OPER_IN_QTY_2+S2_OPER_IN_QTY_2+S3_OPER_IN_QTY_2),SUM(S1_END_QTY_2+S2_END_QTY_2+S3_END_QTY_2+S1_END_RWK_QTY_2 + S2_END_RWK_QTY_2 + S3_END_RWK_QTY_2)) END_QTY_2 
                                                                     , 0 SHIP_QTY_1 
                                                                     , 0 SHIP_QTY_2 
                                                                  FROM RSUMWIPMOV 
                                                                 WHERE FACTORY = 'HMVA2' 
                                                                   AND OPER NOT IN ('AZ010') 
                                                                   AND MAT_ID NOT LIKE 'HX%' 
                                                                 GROUP BY FACTORY, MAT_ID, OPER, LOT_TYPE, WORK_DATE, CM_KEY_3 
                                                                 UNION ALL 
                                                                SELECT FACTORY, MAT_ID 
                                                                     , 'AZ010' AS OPER 
                                                                     , LOT_TYPE, WORK_DATE, CM_KEY_3 
                                                                     , 0 END_LOT 
                                                                     , 0 END_QTY_1 
                                                                     , 0 END_QTY_2 
                                                                     , SUM(SHP_QTY_1) SHIP_QTY_1 
                                                                     , SUM(SHP_QTY_2) SHIP_QTY_2 
                                                                  FROM VSUMWIPOUT 
                                                                 WHERE FACTORY = 'HMVA2' 
                                                                   AND MAT_ID NOT LIKE 'HX%' 
                                                                 GROUP BY FACTORY, MAT_ID, LOT_TYPE, WORK_DATE, CM_KEY_3 
                                                                 UNION ALL 
                                                                SELECT FACTORY, MAT_ID, OPER, LOT_TYPE, WORK_DATE, CM_KEY_3 
                                                                     , DECODE(SUBSTR(OPER,2,4),'0000',SUM(S1_OPER_IN_LOT+S2_OPER_IN_LOT+S3_OPER_IN_LOT),SUM(S1_END_LOT+S2_END_LOT+S3_END_LOT)) END_LOT 
                                                                     , DECODE(SUBSTR(OPER,2,4),'0000',SUM(S1_OPER_IN_QTY_1+S2_OPER_IN_QTY_1+S3_OPER_IN_QTY_1),SUM(S1_END_QTY_1+S2_END_QTY_1+S3_END_QTY_1+S1_END_RWK_QTY_1 + S2_END_RWK_QTY_1 + S3_END_RWK_QTY_1)) END_QTY_1 
                                                                     , DECODE(SUBSTR(OPER,2,4),'0000',SUM(S1_OPER_IN_QTY_2+S2_OPER_IN_QTY_2+S3_OPER_IN_QTY_2),SUM(S1_END_QTY_2+S2_END_QTY_2+S3_END_QTY_2+S1_END_RWK_QTY_2 + S2_END_RWK_QTY_2 + S3_END_RWK_QTY_2)) END_QTY_2 
                                                                     , 0 SHIP_QTY_1 
                                                                     , 0 SHIP_QTY_2 
                                                                  FROM CSUMWIPMOV 
                                                                 WHERE FACTORY = 'HMVA2' 
                                                                   AND OPER NOT IN ('AZ010') 
                                                                   AND MAT_ID LIKE 'HX%' 
                                                                 GROUP BY FACTORY, MAT_ID, OPER, LOT_TYPE, WORK_DATE, CM_KEY_3 
                                                                 UNION ALL 
                                                                SELECT FACTORY, MAT_ID 
                                                                     , 'AZ010' AS OPER 
                                                                     , LOT_TYPE, WORK_DATE, CM_KEY_3 
                                                                     , 0 END_LOT 
                                                                     , 0 END_QTY_1 
                                                                     , 0 END_QTY_2 
                                                                     , SUM(SHP_QTY_1) SHIP_QTY_1 
                                                                     , SUM(SHP_QTY_2) SHIP_QTY_2 
                                                                  FROM VSUMWIPOUT_06 
                                                                 WHERE FACTORY = 'HMVA2' 
                                                                   AND MAT_ID LIKE 'HX%' 
                                                                 GROUP BY FACTORY, MAT_ID, LOT_TYPE, WORK_DATE, CM_KEY_3 
                                                               ) 
                                                         GROUP BY FACTORY, MAT_ID, OPER, LOT_TYPE, WORK_DATE, CM_KEY_3 
                                                       ) A 
                                                     , MWIPMATDEF B 
                                                 WHERE 1=1 
                                                   AND A.FACTORY  = 'HMVA2' 
                                                   AND A.FACTORY = B.FACTORY 
                                                   AND A.MAT_ID = B.MAT_ID 
                                                   AND B.MAT_TYPE = 'FG' 
                                                   AND A.MAT_ID LIKE '%' 
                                                   AND A.CM_KEY_3 LIKE 'P%'
                                                   AND A.OPER NOT IN ('00001','00002') 
                                                   AND A.WORK_DATE = '20200522' 
                                                 ) 
                                         GROUP BY MAT_ID, OPER_GRP_1 
                                        HAVING SUM(ASSY_END_QTY) > 0 
                                       ) B 
                                     , ( 
                                        SELECT MAT_ID, OPER_GRP_1, SUM(NVL(QTY,0)) QTY 
                                          FROM (  
                                                SELECT MAT_ID 
                                                     , QTY 
                                                     , CASE WHEN OPER_GRP_8 = 'HMK2A' THEN 'HMK2A' 
                                                            WHEN OPER_GRP_8 = 'B/G' THEN 'BG' 
                                                            WHEN OPER_GRP_8 = 'SAW' THEN 'SAW' 
                                                            WHEN OPER_GRP_8 = 'S/P' THEN 'SP' 
                                                            WHEN OPER_GRP_8 = 'D/A1' THEN 'DA1' 
                                                            WHEN OPER_GRP_8 = 'D/A2' THEN 'DA2' 
                                                            WHEN OPER_GRP_8 = 'D/A3' THEN 'DA3' 
                                                            WHEN OPER_GRP_8 = 'D/A4' THEN 'DA4' 
                                                            WHEN OPER_GRP_8 = 'D/A5' THEN 'DA5' 
                                                            WHEN OPER_GRP_8 = 'D/A6' THEN 'DA6' 
                                                            WHEN OPER_GRP_8 = 'D/A7' THEN 'DA7' 
                                                            WHEN OPER_GRP_8 = 'D/A8' THEN 'DA8' 
                                                            WHEN OPER_GRP_8 = 'D/A9' THEN 'DA9' 
                                                            WHEN OPER_GRP_8 IN ('W/B1', 'D/A1 CURE') THEN 'WB1' 
                                                            WHEN OPER_GRP_8 IN ('W/B2', 'D/A2 CURE') THEN 'WB2' 
                                                            WHEN OPER_GRP_8 IN ('W/B3', 'D/A3 CURE') THEN 'WB3' 
                                                            WHEN OPER_GRP_8 IN ('W/B4', 'D/A4 CURE') THEN 'WB4' 
                                                            WHEN OPER_GRP_8 IN ('W/B5', 'D/A5 CURE') THEN 'WB5' 
                                                            WHEN OPER_GRP_8 IN ('W/B6', 'D/A6 CURE') THEN 'WB6' 
                                                            WHEN OPER_GRP_8 IN ('W/B7', 'D/A7 CURE') THEN 'WB7' 
                                                            WHEN OPER_GRP_8 IN ('W/B8', 'D/A8 CURE') THEN 'WB8' 
                                                            WHEN OPER_GRP_8 IN ('W/B9', 'D/A9 CURE') THEN 'WB9' 
                                                            WHEN OPER_GRP_8 = 'GATE' AND MAT_GRP_5 = '-' THEN 'GATE' 
                                                            WHEN OPER_GRP_8 = 'GATE' AND MAT_GRP_1 = 'SE' AND MAT_GRP_5 = 'Merge' THEN 'GATE' 
                                                            WHEN OPER_GRP_8 = 'GATE' AND MAT_GRP_1 = 'HX' THEN 'GATE' 
                                                            WHEN OPER_GRP_8 = 'GATE' AND MAT_GRP_1 NOT IN ('SE','HX') AND SUBSTR(MAT_GRP_4,-1) = SUBSTR(OPER, -1) THEN 'GATE' 
                                                            WHEN OPER_GRP_8 = 'MOLD' THEN 'MOLD' 
                                                            WHEN OPER_GRP_8 = 'CURE' THEN 'CURE' 
                                                            WHEN OPER_GRP_8 = 'M/K' THEN 'MK' 
                                                            WHEN OPER_GRP_8 = 'TRIM' THEN 'TRIM' 
                                                            WHEN OPER_GRP_8 = 'TIN' THEN 'TIN' 
                                                            WHEN OPER_GRP_8 = 'S/B/A' THEN 'SBA' 
                                                            WHEN OPER_GRP_8 = 'SIG' THEN 'SIG' 
                                                            WHEN OPER_GRP_8 = 'AVI' THEN 'AVI' 
                                                            WHEN OPER_GRP_8 = 'V/I' THEN 'PVI' 
                                                            WHEN OPER_GRP_8 = 'QC GATE' THEN 'QC_GATE' 
                                                            WHEN OPER_GRP_8 = 'HMK3A' THEN 'HMK3A' 
                                                            ELSE ' ' 
                                                        END OPER_GRP_1 
                                                  FROM ( 
                                                        SELECT MAT_ID, OPER, OPER_GRP_8, MAT_GRP_1, MAT_GRP_4, MAT_GRP_5, MAT_GRP_10 
                                                             , CASE WHEN MAT_GRP_1 = 'HX' AND HX_COMP_MIN IS NOT NULL
                                                                         THEN (CASE WHEN HX_COMP_MIN <> HX_COMP_MAX AND OPER > HX_COMP_MIN AND OPER <= HX_COMP_MAX THEN QTY_1 / NVL(COMP_CNT / 2,1)
                                                                         WHEN OPER <= HX_COMP_MAX THEN QTY_1 / NVL(COMP_CNT,1)
                                                                         ELSE QTY_1 END)
                                                                    WHEN OPER <= 'A0395' THEN QTY_1 / NVL(COMP_CNT,1) 
                                                                    ELSE QTY_1 
                                                               END QTY 
                                                          FROM ( 
                                                                SELECT A.MAT_ID, B.OPER, B.OPER_GRP_8, C.MAT_GRP_1, C.MAT_GRP_4, C.MAT_GRP_5, C.MAT_GRP_10 
                                                                     , CASE WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-' THEN CASE WHEN MAT_GRP_5 IN ('1st','Merge') OR MAT_GRP_5 LIKE 'Middle%' THEN QTY_1 ELSE 0 END 
                                                                            WHEN MAT_GRP_3 IN ('COB', 'BGN') THEN ROUND(QTY_1/TO_NUMBER(DECODE(MAT_CMF_13, ' ', 1, '-', 1, MAT_CMF_13)),0) 
                                                                            ELSE QTY_1 
                                                                       END AS QTY_1 
                                                                     , COMP_CNT  
                                                                     , HX_COMP_MIN, HX_COMP_MAX 
                                                                  FROM RWIPLOTSTS A   
                                                                     , MWIPOPRDEF B   
                                                                     , VWIPMATDEF C 
                                                                 WHERE 1 = 1  
                                                                   AND A.FACTORY = B.FACTORY 
                                                                   AND A.FACTORY = C.FACTORY 
                                                                   AND A.OPER = B.OPER 
                                                                   AND A.MAT_ID = C.MAT_ID 
                                                                   AND A.FACTORY = 'HMVA2'   
                                                                   AND A.LOT_TYPE = 'W'  
                                                                   AND A.LOT_CMF_5 LIKE 'P%'
                                                                   AND A.LOT_DEL_FLAG = ' '  
                                                                   AND C.MAT_GRP_2 <> '-' 
                                                                   AND C.DELETE_FLAG = ' '  
                                                               ) 
                                                       ) 
                                               ) 
                                         WHERE 1=1 
                                           AND OPER_GRP_1 <> ' ' 
                                         GROUP BY MAT_ID, OPER_GRP_1 
                                        HAVING SUM(NVL(QTY,0)) > 0 
                                       ) WIP 
                                     , ( 
                                        SELECT A.RES_STS_2 AS MAT_ID 
                                             , A.OPER_GRP_1 
                                             , SUM(A.RES_CNT) AS RES_CNT 
                                             , SUM(TRUNC(NVL(NVL(B.UPEH,0) * 24 * A.PERCENT * A.RES_CNT, 0))) AS RES_CAPA 
                                          FROM ( 
                                                SELECT FACTORY, RES_STS_2, RES_STS_8 AS OPER, RES_GRP_6 AS RES_MODEL, RES_GRP_7 AS UPEH_GRP, COUNT(RES_ID) AS RES_CNT 
                                                     , CASE WHEN RES_STS_8 LIKE 'A06%' THEN 0.71
                                                            WHEN RES_STS_8 LIKE 'A04%' THEN 0.68
                                                            WHEN RES_STS_8 = 'A0333' THEN 0.68
                                                            ELSE 0.7
                                                       END PERCENT 
                                                     , CASE WHEN RES_STS_8 IN ('A0040') THEN 'BG' 
                                                            WHEN RES_STS_8 IN ('A0200', 'A0230') THEN 'SAW' 
                                                            WHEN RES_STS_8 IN ('A0400', 'A0401', 'A0333') THEN 'DA1' 
                                                            WHEN RES_STS_8 IN ('A0402') THEN 'DA2' 
                                                            WHEN RES_STS_8 IN ('A0403') THEN 'DA3' 
                                                            WHEN RES_STS_8 IN ('A0404') THEN 'DA4' 
                                                            WHEN RES_STS_8 IN ('A0405') THEN 'DA5' 
                                                            WHEN RES_STS_8 IN ('A0406') THEN 'DA6' 
                                                            WHEN RES_STS_8 IN ('A0407') THEN 'DA7' 
                                                            WHEN RES_STS_8 IN ('A0408') THEN 'DA8' 
                                                            WHEN RES_STS_8 IN ('A0409') THEN 'DA9' 
                                                            WHEN RES_STS_8 IN ('A0600','A0601') THEN 'WB1' 
                                                            WHEN RES_STS_8 IN ('A0602') THEN 'WB2' 
                                                            WHEN RES_STS_8 IN ('A0603') THEN 'WB3' 
                                                            WHEN RES_STS_8 IN ('A0604') THEN 'WB4' 
                                                            WHEN RES_STS_8 IN ('A0605') THEN 'WB5' 
                                                            WHEN RES_STS_8 IN ('A0606') THEN 'WB6' 
                                                            WHEN RES_STS_8 IN ('A0607') THEN 'WB7' 
                                                            WHEN RES_STS_8 IN ('A0608') THEN 'WB8' 
                                                            WHEN RES_STS_8 IN ('A0609') THEN 'WB9' 
                                                            WHEN RES_STS_8 IN ('A0800', 'A0801', 'A0802', 'A0803', 'A0804', 'A0805', 'A0806', 'A0807', 'A0808', 'A0809') THEN 'GATE' 
                                                            WHEN RES_STS_8 IN ('A1000', 'A0910') THEN 'MOLD' 
                                                            WHEN RES_STS_8 IN ('A1100') THEN 'CURE' 
                                                            WHEN RES_STS_8 IN ('A1150', 'A1500') THEN 'MK' 
                                                            WHEN RES_STS_8 IN ('A1200') THEN 'TRIM' 
                                                            WHEN RES_STS_8 IN ('A1450') THEN 'TIN' 
                                                            WHEN RES_STS_8 IN ('A1300') THEN 'SBA' 
                                                            WHEN RES_STS_8 IN ('A1750', 'A1800', 'A1900', 'A1825') THEN 'SIG' 
                                                            WHEN RES_STS_8 IN ('A2000') THEN 'AVI' 
                                                            WHEN RES_STS_8 IN ('A2050') THEN 'PVI' 
                                                            WHEN RES_STS_8 IN ('A2100') THEN 'QC_GATE' 
                                                            ELSE ' ' 
                                                       END OPER_GRP_1 
                                                  FROM MRASRESDEF 
                                                 WHERE 1 = 1  
                                                   AND FACTORY  = 'HMVA2' 
                                                   AND RES_CMF_9 = 'Y' 
                                                   AND RES_CMF_7 = 'Y' 
                                                   AND DELETE_FLAG = ' ' 
                                                   AND RES_TYPE='EQUIPMENT' 
                                                   AND (RES_STS_1 NOT IN ('C200', 'B199') OR RES_UP_DOWN_FLAG = 'U') 
                                                 GROUP BY FACTORY,RES_STS_2,RES_STS_8,RES_GRP_6,RES_GRP_7  
                                               ) A 
                                             , CRASUPHDEF B 
                                         WHERE 1=1 
                                           AND A.FACTORY = B.FACTORY(+) 
                                           AND A.OPER = B.OPER(+) 
                                           AND A.RES_MODEL = B.RES_MODEL(+) 
                                           AND A.UPEH_GRP = B.UPEH_GRP(+) 
                                           AND A.RES_STS_2 = B.MAT_ID(+) 
                                           AND A.FACTORY  = 'HMVA2' 
                                           AND A.OPER NOT IN ('00001','00002') 
                                           AND A.OPER_GRP_1 <> ' ' 
                                         GROUP BY A.RES_STS_2, A.OPER_GRP_1 
                                       ) RES 
                                 WHERE 1=1 
                                   AND MAT.MAT_ID = A.MAT_ID(+) 
                                   AND MAT.MAT_ID = B.MAT_ID(+) 
                                   AND MAT.MAT_ID = WIP.MAT_ID(+) 
                                   AND MAT.MAT_ID = RES.MAT_ID(+) 
                                   AND MAT.OPER_GRP_1 = B.OPER_GRP_1(+) 
                                   AND MAT.OPER_GRP_1 = WIP.OPER_GRP_1(+) 
                                   AND MAT.OPER_GRP_1 = RES.OPER_GRP_1(+) 
                               ) 
                         GROUP BY MAT_GRP_1, MAT_GRP_9, MAT_GRP_10, MAT_GRP_6, MAT_CMF_11,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', OPER_GRP_1 
                        HAVING ( 
                                SUM(NVL(D0_ORI_PLAN,0))+SUM(NVL(D1_PLAN,0))+SUM(NVL(D2_PLAN,0))+SUM(NVL(WEEK_PLAN,0))+SUM(NVL(WEEK2_PLAN,0))+SUM(NVL(MON_PLAN,0))+SUM(NVL(WIP_QTY,0)) 
                              + SUM(NVL(D0_PLAN,0))+SUM(NVL(SHP_WEEK,0))+SUM(NVL(SHP_MONTH,0))+SUM(NVL(ASSY_END_QTY,0)) 
                               ) > 0 
                      ) 
                    , (SELECT LEVEL AS SEQ FROM DUAL CONNECT BY LEVEL <= 10) 
                 GROUP BY MAT_GRP_1, MAT_GRP_9, MAT_GRP_10, MAT_GRP_6, MAT_CMF_11,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', OPER_GRP_1, DECODE(SEQ, 1, 'WIP', 2, '설비대수', 3, 'CAPA현황', 4, '당일 실적', 5, 'D0 잔량', 6, 'D1 잔량', 7, 'D2 잔량', 8, '당주 잔량', 9, '차주 잔량', 10, '월간 잔량') 
               ) 
         GROUP BY  MAT_GRP_1, MAT_GRP_9, MAT_GRP_10, MAT_GRP_6, MAT_CMF_11,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', GUBUN 
       ) A 
 WHERE 1=1 
 GROUP BY MAT_GRP_1, MAT_GRP_9, MAT_GRP_10, MAT_GRP_6, MAT_CMF_11,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', GUBUN 
 ORDER BY DECODE(MAT_GRP_1, 'SE', 1, 'HX', 2, 'IM', 3, 'FC', 4, 'IG', 5, 6), CUSTOMER, MAJOR, PKG, LD_COUNT, PKG_CODE,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', DECODE(GUBUN, 'WIP', 1, '설비대수', 2, 'CAPA현황', 3, '당일 실적', 4, 'D0 잔량', 5, 'D1 잔량', 6, 'D2 잔량', 7, '당주 잔량', 8, '차주 잔량', 9, '월간 잔량', 10) 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT (SELECT DATA_1 FROM MGCMTBLDAT@RPTTOMES WHERE FACTORY = 'HMVA2' AND TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = MAT_GRP_1) AS CUSTOMER, MAT_GRP_9 AS MAJOR, MAT_GRP_10 AS PKG, MAT_GRP_6 AS LD_COUNT, MAT_CMF_11 AS PKG_CODE,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ' 
     , MAX(DECODE(OPER_GRP_1, 'HMK3A', 'T', '', 'F', 'F')) AS HMK3A 
     , MAX(DECODE(OPER_GRP_1, 'QC_GATE', 'T', '', 'F', 'F')) AS QC_GATE 
     , MAX(DECODE(OPER_GRP_1, 'PVI', 'T', '', 'F', 'F')) AS PVI 
     , MAX(DECODE(OPER_GRP_1, 'AVI', 'T', '', 'F', 'F')) AS AVI 
     , MAX(DECODE(OPER_GRP_1, 'SIG', 'T', '', 'F', 'F')) AS SIG 
     , MAX(DECODE(OPER_GRP_1, 'SBA', 'T', '', 'F', 'F')) AS SBA 
     , MAX(DECODE(OPER_GRP_1, 'TIN', 'T', '', 'F', 'F')) AS TIN 
     , MAX(DECODE(OPER_GRP_1, 'TRIM', 'T', '', 'F', 'F')) AS TRIM 
     , MAX(DECODE(OPER_GRP_1, 'MK', 'T', '', 'F', 'F')) AS MK 
     , MAX(DECODE(OPER_GRP_1, 'CURE', 'T', '', 'F', 'F')) AS CURE 
     , MAX(DECODE(OPER_GRP_1, 'MOLD', 'T', '', 'F', 'F')) AS MOLD 
     , MAX(DECODE(OPER_GRP_1, 'GATE', 'T', '', 'F', 'F')) AS GATE 
     , MAX(DECODE(OPER_GRP_1, 'WB9', 'T', '', 'F', 'F')) AS WB9 
     , MAX(DECODE(OPER_GRP_1, 'DA9', 'T', '', 'F', 'F')) AS DA9 
     , MAX(DECODE(OPER_GRP_1, 'WB8', 'T', '', 'F', 'F')) AS WB8 
     , MAX(DECODE(OPER_GRP_1, 'DA8', 'T', '', 'F', 'F')) AS DA8 
     , MAX(DECODE(OPER_GRP_1, 'WB7', 'T', '', 'F', 'F')) AS WB7 
     , MAX(DECODE(OPER_GRP_1, 'DA7', 'T', '', 'F', 'F')) AS DA7 
     , MAX(DECODE(OPER_GRP_1, 'WB6', 'T', '', 'F', 'F')) AS WB6 
     , MAX(DECODE(OPER_GRP_1, 'DA6', 'T', '', 'F', 'F')) AS DA6 
     , MAX(DECODE(OPER_GRP_1, 'WB5', 'T', '', 'F', 'F')) AS WB5 
     , MAX(DECODE(OPER_GRP_1, 'DA5', 'T', '', 'F', 'F')) AS DA5 
     , MAX(DECODE(OPER_GRP_1, 'WB4', 'T', '', 'F', 'F')) AS WB4 
     , MAX(DECODE(OPER_GRP_1, 'DA4', 'T', '', 'F', 'F')) AS DA4 
     , MAX(DECODE(OPER_GRP_1, 'WB3', 'T', '', 'F', 'F')) AS WB3 
     , MAX(DECODE(OPER_GRP_1, 'DA3', 'T', '', 'F', 'F')) AS DA3  
     , MAX(DECODE(OPER_GRP_1, 'WB2', 'T', '', 'F', 'F')) AS WB2 
     , MAX(DECODE(OPER_GRP_1, 'DA2', 'T', '', 'F', 'F')) AS DA2 
     , MAX(DECODE(OPER_GRP_1, 'WB1', 'T', '', 'F', 'F')) AS WB1 
     , MAX(DECODE(OPER_GRP_1, 'DA1', 'T', '', 'F', 'F')) AS DA1 
     , MAX(DECODE(OPER_GRP_1, 'SP', 'T', '', 'F', 'F')) AS SP 
     , MAX(DECODE(OPER_GRP_1, 'SAW', 'T', '', 'F', 'F')) AS SAW 
     , MAX(DECODE(OPER_GRP_1, 'BG', 'T', '', 'F', 'F')) AS BG 
     , MAX(DECODE(OPER_GRP_1, 'HMK2A','T', '', 'F', 'F')) AS HMK2A 
  FROM ( 
        SELECT MAT.FACTORY, MAT.MAT_GRP_1, MAT.MAT_GRP_9, MAT.MAT_GRP_10, MAT.MAT_GRP_6, MAT.MAT_CMF_11,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT.MAT_ID, MAT.DELETE_FLAG 
             , CASE WHEN MAT.MAT_GRP_1 = 'SE' AND MAT.MAT_GRP_9 = 'MEMORY' THEN 'SEK_________-___' || SUBSTR(MAT.MAT_ID, -3) 
                                                                    WHEN MAT.MAT_GRP_1 = 'HX' THEN MAT.MAT_CMF_10 
                                                                    ELSE MAT_ID 
                                                               END CONV_MAT_ID 
          FROM MWIPMATDEF MAT 
       ) MAT 
     , ( 
        SELECT A.MAT_ID 
                     , CASE WHEN B.OPER IN ('A0400', 'A0401', 'A0333') THEN 'DA1' 
                            WHEN B.OPER IN ('A0402') THEN 'DA2' 
                            WHEN B.OPER IN ('A0403') THEN 'DA3' 
                            WHEN B.OPER IN ('A0404') THEN 'DA4' 
                            WHEN B.OPER IN ('A0405') THEN 'DA5' 
                            WHEN B.OPER IN ('A0406') THEN 'DA6' 
                            WHEN B.OPER IN ('A0407') THEN 'DA7' 
                            WHEN B.OPER IN ('A0408') THEN 'DA8' 
                            WHEN B.OPER IN ('A0409') THEN 'DA9' 
                            WHEN B.OPER IN ('A0600', 'A0601') THEN 'WB1' 
                            WHEN B.OPER IN ('A0602') THEN 'WB2' 
                            WHEN B.OPER IN ('A0603') THEN 'WB3' 
                            WHEN B.OPER IN ('A0604') THEN 'WB4' 
                            WHEN B.OPER IN ('A0605') THEN 'WB5' 
                            WHEN B.OPER IN ('A0606') THEN 'WB6' 
                            WHEN B.OPER IN ('A0607') THEN 'WB7' 
                            WHEN B.OPER IN ('A0608') THEN 'WB8' 
                            WHEN B.OPER IN ('A0609') THEN 'WB9' 
                            ELSE ' ' 
                        END OPER_GRP_1 
          FROM MWIPMATDEF A 
             , MWIPFLWOPR@RPTTOMES B 
         WHERE 1=1 
           AND A.FACTORY = B.FACTORY 
           AND A.FIRST_FLOW = B.FLOW 
           AND A.FACTORY = 'HMVA2' 
           AND A.DELETE_FLAG = ' ' 
           AND A.MAT_TYPE = 'FG' 
           AND A.MAT_GRP_5 IN ('-', 'Merge') 
           AND A.MAT_ID LIKE '%' 
       ) A 
 WHERE 1=1 
   AND MAT.FACTORY = 'HMVA2' 
   AND MAT.DELETE_FLAG = ' ' 
   AND MAT.MAT_ID = A.MAT_ID  
 GROUP BY MAT.MAT_GRP_1, MAT.MAT_GRP_9, MAT.MAT_GRP_10, MAT.MAT_GRP_6, MAT.MAT_CMF_11,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ' 
 ORDER BY DECODE(MAT_GRP_1, 'SE', 1, 'HX', 2, 'IM', 3, 'FC', 4, 'IG', 5, 6), CUSTOMER, MAJOR, PKG, LD_COUNT, PKG_CODE,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ' 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
SELECT LANGUAGE_1 FROM RWEBFUNDEF WHERE FUNC_NAME = 'PRD010912'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT (SELECT DATA_1 FROM MGCMTBLDAT WHERE TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = MAT.MAT_GRP_1 AND ROWNUM=1) AS CUSTOMER,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT.CONV_MAT_ID
     , DAT.OPER
     , ROUND(SUM(DECODE(DAT.WORK_DATE, '20200426', DAT.PLN_QTY,0)) / 1, 0) AS PLN_QTY_0
     , ROUND(SUM(DECODE(DAT.WORK_DATE, '20200426', DAT.END_QTY,0)) / 1, 0) AS END_QTY_0
     , ROUND(SUM(DECODE(DAT.WORK_DATE, '20200427', DAT.PLN_QTY,0)) / 1, 0) AS PLN_QTY_1
     , ROUND(SUM(DECODE(DAT.WORK_DATE, '20200427', DAT.END_QTY,0)) / 1, 0) AS END_QTY_1
     , ROUND(SUM(DECODE(DAT.WORK_DATE, '20200428', DAT.PLN_QTY,0)) / 1, 0) AS PLN_QTY_2
     , ROUND(SUM(DECODE(DAT.WORK_DATE, '20200428', DAT.END_QTY,0)) / 1, 0) AS END_QTY_2
     , ROUND(SUM(DECODE(DAT.WORK_DATE, '20200429', DAT.PLN_QTY,0)) / 1, 0) AS PLN_QTY_3
     , ROUND(SUM(DECODE(DAT.WORK_DATE, '20200429', DAT.END_QTY,0)) / 1, 0) AS END_QTY_3
     , ROUND(SUM(DECODE(DAT.WORK_DATE, '20200430', DAT.PLN_QTY,0)) / 1, 0) AS PLN_QTY_4
     , ROUND(SUM(DECODE(DAT.WORK_DATE, '20200430', DAT.END_QTY,0)) / 1, 0) AS END_QTY_4
     , ROUND(SUM(DECODE(DAT.WORK_DATE, '20200501', DAT.PLN_QTY,0)) / 1, 0) AS PLN_QTY_5
     , ROUND(SUM(DECODE(DAT.WORK_DATE, '20200501', DAT.END_QTY,0)) / 1, 0) AS END_QTY_5
     , ROUND(SUM(DECODE(DAT.WORK_DATE, '20200502', DAT.PLN_QTY,0)) / 1, 0) AS PLN_QTY_6
     , ROUND(SUM(DECODE(DAT.WORK_DATE, '20200502', DAT.END_QTY,0)) / 1, 0) AS END_QTY_6
     , ROUND(SUM(DAT.PLN_QTY) / 1, 0) AS PLN_TTL
     , ROUND(SUM(DAT.END_QTY) / 1, 0) AS SHP_TTL
  FROM (
        SELECT CASE WHEN MAT_GRP_1 = 'HX' THEN MAT_CMF_10 ELSE MAT_ID END CONV_MAT_ID
             , MAT_ID, MAT_GRP_1, MAT_GRP_2, MAT_GRP_4, MAT_GRP_5, MAT_GRP_6, MAT_GRP_7, MAT_GRP_8, MAT_GRP_9, MAT_GRP_10, MAT_CMF_10, MAT_CMF_11
          FROM MWIPMATDEF
         WHERE 1=1
           AND FACTORY = 'HMVA2'
           AND DELETE_FLAG = ' ' 
           AND MAT_TYPE = 'FG' 
       ) MAT
     , (
        SELECT MAT_ID, WORK_DATE, OPER
             , SUM(PLN_QTY) AS PLN_QTY
             , SUM(END_QTY) AS END_QTY
          FROM (
                SELECT MAT_ID
                     , PLAN_DATE AS WORK_DATE
                     , OPER
                     , QTY_1 AS PLN_QTY
                     , 0 AS END_QTY
                  FROM CPLNISSMAT@RPTTOMES
                 WHERE 1=1
                   AND FACTORY = 'HMVA2'
                   AND PLAN_DATE BETWEEN '20200426' AND '20200502' 
                 UNION ALL
                SELECT MAT_ID
                     , WORK_DATE
                     , OPER
                     , 0 AS PLN_QTY
                     , (S1_END_QTY_1+S2_END_QTY_1+S3_END_QTY_1) AS END_QTY
                  FROM RSUMWIPMOV 
                 WHERE 1=1
                   AND WORK_DATE BETWEEN '20200426' AND '20200502' 
                   AND LOT_TYPE = 'W' 
                   AND FACTORY = 'HMVA2'
                   AND S1_END_QTY_1+S2_END_QTY_1+S3_END_QTY_1 > 0 
                   AND MAT_ID NOT LIKE 'HX%' 
                 UNION ALL
                SELECT MAT_ID
                     , WORK_DATE
                     , OPER
                     , 0 AS PLN_QTY
                     , (S1_END_QTY_1+S2_END_QTY_1+S3_END_QTY_1) AS END_QTY
                  FROM CSUMWIPMOV 
                 WHERE 1=1
                   AND WORK_DATE BETWEEN '20200426' AND '20200502' 
                   AND LOT_TYPE = 'W' 
                   AND FACTORY = 'HMVA2'
                   AND S1_END_QTY_1+S2_END_QTY_1+S3_END_QTY_1 > 0 
                   AND MAT_ID LIKE 'HX%' 
                 UNION ALL
                SELECT MAT_ID
                     , WORK_DATE
                     , DECODE(CM_KEY_1,'HMVA2','AZ010','HMKT1','TZ010','FGS','F0000','HMKE1','EZ010','HMKS1','SZ010', 'HMKB1', 'BZ010') AS OPER
                     , 0 AS PLN_QTY
                     , (S1_FAC_OUT_QTY_1+S2_FAC_OUT_QTY_1+S3_FAC_OUT_QTY_1) AS END_QTY 
                  FROM RSUMFACMOV 
                 WHERE 1=1 
                   AND WORK_DATE BETWEEN '20200426' AND '20200502' 
                   AND LOT_TYPE = 'W'  
                   AND FACTORY NOT IN ('RETURN') 
                   AND CM_KEY_1='HMVA2' 
                   AND S1_FAC_OUT_QTY_1+S2_FAC_OUT_QTY_1+S3_FAC_OUT_QTY_1 > 0   
                   AND MAT_ID NOT LIKE 'HX%' 
                 UNION ALL
                SELECT MAT_ID
                     , WORK_DATE
                     , DECODE(CM_KEY_1,'HMVA2','AZ010','HMKT1','TZ010','FGS','F0000','HMKE1','EZ010','HMKS1','SZ010', 'HMKB1', 'BZ010') AS OPER
                     , 0 AS PLN_QTY
                     , (S1_FAC_OUT_QTY_1+S2_FAC_OUT_QTY_1+S3_FAC_OUT_QTY_1) AS END_QTY 
                  FROM CSUMFACMOV 
                 WHERE 1=1 
                   AND WORK_DATE BETWEEN '20200426' AND '20200502' 
                   AND LOT_TYPE = 'W'  
                   AND FACTORY NOT IN ('RETURN') 
                   AND CM_KEY_1='HMVA2' 
                   AND S1_FAC_OUT_QTY_1+S2_FAC_OUT_QTY_1+S3_FAC_OUT_QTY_1 > 0   
                   AND MAT_ID LIKE 'HX%' 
               )
         GROUP BY MAT_ID, WORK_DATE, OPER
       ) DAT
 WHERE 1=1
   AND MAT.MAT_ID = DAT.MAT_ID
GROUP BY MAT.MAT_GRP_1,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT.CONV_MAT_ID, DAT.OPER
HAVING SUM(DAT.PLN_QTY) > 0
ORDER BY MAT_GRP_1,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', CONV_MAT_ID, OPER

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
SELECT LANGUAGE_1 FROM RWEBFUNDEF WHERE FUNC_NAME = 'PRD011010'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
(SELECT TO_CHAR(LAST_DAY(TO_DATE('202003', 'YYYYMM')),'YYYYMMDD') FROM DUAL)
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
(SELECT TO_CHAR(LAST_DAY(TO_DATE('202004', 'YYYYMM')),'YYYYMMDD') FROM DUAL)
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE-1) 
  FROM MWIPCALDEF 
 WHERE 1=1
   AND CALENDAR_ID='SE'
   AND PLAN_YEAR='2020'
   AND PLAN_WEEK=(
                  SELECT PLAN_WEEK 
                    FROM MWIPCALDEF 
                   WHERE 1=1 
                     AND CALENDAR_ID='SE' 
                     AND SYS_DATE=TO_CHAR(TO_DATE('20200401','YYYYMMDD'),'YYYYMMDD')
                 )

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
WITH TEMP_VIEW AS (
SELECT A.MAT_GRP_1 AS CUSTOMER, A.MAT_GRP_9 AS FAMILY, A.MAT_GRP_10 AS PKG,  ' ',  ' ',  ' '
     , DECODE(SEQ, 1, '대수', 2, 'RUN', 3, 'CAPA', 4, 'CHIP', 5, 'MAIN', 6, 'MAIN_M', 7, '실적', 8, 'CAPA 효율') GUBUN, SEQ GUBUN_SEQ 
     , SUM( DECODE( TO_CHAR(SEQ), SUBSTR(GUBUN, 1, 1) , A.DA_TTL, 0 ) ) DA_TTL 
     , SUM( DECODE( TO_CHAR(SEQ), SUBSTR(GUBUN, 1, 1) , A.WB_TTL, 0 ) ) WB_TTL 
     , SUM( DECODE( TO_CHAR(SEQ), SUBSTR(GUBUN, 1, 1) , A.DA1, 0 ) ) DA1 
     , SUM( DECODE( TO_CHAR(SEQ), SUBSTR(GUBUN, 1, 1) , A.DA2, 0 ) ) DA2 
     , SUM( DECODE( TO_CHAR(SEQ), SUBSTR(GUBUN, 1, 1) , A.DA3, 0 ) ) DA3 
     , SUM( DECODE( TO_CHAR(SEQ), SUBSTR(GUBUN, 1, 1) , A.DA4, 0 ) ) DA4 
     , SUM( DECODE( TO_CHAR(SEQ), SUBSTR(GUBUN, 1, 1) , A.DA5, 0 ) ) DA5 
     , SUM( DECODE( TO_CHAR(SEQ), SUBSTR(GUBUN, 1, 1) , A.DA6, 0 ) ) DA6 
     , SUM( DECODE( TO_CHAR(SEQ), SUBSTR(GUBUN, 1, 1) , A.DA7, 0 ) ) DA7 
     , SUM( DECODE( TO_CHAR(SEQ), SUBSTR(GUBUN, 1, 1) , A.DA8, 0 ) ) DA8 
     , SUM( DECODE( TO_CHAR(SEQ), SUBSTR(GUBUN, 1, 1) , A.DA9, 0 ) ) DA9 
     , SUM( DECODE( TO_CHAR(SEQ), SUBSTR(GUBUN, 1, 1) , A.WB1, 0 ) ) WB1 
     , SUM( DECODE( TO_CHAR(SEQ), SUBSTR(GUBUN, 1, 1) , A.WB2, 0 ) ) WB2 
     , SUM( DECODE( TO_CHAR(SEQ), SUBSTR(GUBUN, 1, 1) , A.WB3, 0 ) ) WB3 
     , SUM( DECODE( TO_CHAR(SEQ), SUBSTR(GUBUN, 1, 1) , A.WB4, 0 ) ) WB4 
     , SUM( DECODE( TO_CHAR(SEQ), SUBSTR(GUBUN, 1, 1) , A.WB5, 0 ) ) WB5 
     , SUM( DECODE( TO_CHAR(SEQ), SUBSTR(GUBUN, 1, 1) , A.WB6, 0 ) ) WB6 
     , SUM( DECODE( TO_CHAR(SEQ), SUBSTR(GUBUN, 1, 1) , A.WB7, 0 ) ) WB7 
     , SUM( DECODE( TO_CHAR(SEQ), SUBSTR(GUBUN, 1, 1) , A.WB8, 0 ) ) WB8 
     , SUM( DECODE( TO_CHAR(SEQ), SUBSTR(GUBUN, 1, 1) , A.WB9, 0 ) ) WB9 
  FROM ( 
        SELECT B.MAT_GRP_1,  B.MAT_GRP_2,  B.MAT_GRP_3,  B.MAT_GRP_4,  B.MAT_GRP_5,  B.MAT_GRP_6,  B.MAT_GRP_7,  B.MAT_GRP_8,  B.MAT_GRP_9,  B.MAT_GRP_10,  B.MAT_CMF_10, B.MAT_CMF_11, GUBUN,  DA_TTL, WB_TTL, DA1, WB1, DA2, WB2, DA3, WB3, DA4, WB4, DA5, WB5, DA6, WB6, DA7, WB7, DA8, WB8, DA9, WB9 
          FROM ( 
                SELECT DECODE(V.V_COL,'RES', '1_설비댓수', '2_RUN_CNT') GUBUN, MAT_ID 
                     , SUM( CASE WHEN OPER LIKE 'A040%' THEN  DECODE(V.V_COL,'RES', RES_CNT, RUN_CNT)  ELSE 0  END ) DA_TTL 
                     , SUM( CASE WHEN OPER LIKE 'A060%' THEN  DECODE(V.V_COL,'RES', RES_CNT, RUN_CNT)  ELSE 0  END ) WB_TTL 
                     , SUM( DECODE(OPER, 'A0400', DECODE(V.V_COL,'RES', RES_CNT, RUN_CNT), 'A0401', DECODE(V.V_COL,'RES', RES_CNT, RUN_CNT), 0) ) DA1 
                     , SUM( DECODE(OPER, 'A0600', DECODE(V.V_COL,'RES', RES_CNT, RUN_CNT), 'A0601', DECODE(V.V_COL,'RES', RES_CNT, RUN_CNT), 0)) WB1 
                     , SUM( DECODE(OPER, 'A0402', DECODE(V.V_COL,'RES', RES_CNT, RUN_CNT), 0)) DA2, SUM( DECODE(OPER, 'A0602', DECODE(V.V_COL,'RES', RES_CNT, RUN_CNT), 0)) WB2 
                     , SUM( DECODE(OPER, 'A0403', DECODE(V.V_COL,'RES', RES_CNT, RUN_CNT), 0)) DA3,SUM( DECODE(OPER, 'A0603', DECODE(V.V_COL,'RES', RES_CNT, RUN_CNT), 0)) WB3 
                     , SUM( DECODE(OPER, 'A0404', DECODE(V.V_COL,'RES', RES_CNT, RUN_CNT), 0)) DA4, SUM( DECODE(OPER, 'A0604', DECODE(V.V_COL,'RES', RES_CNT, RUN_CNT), 0)) WB4 
                     , SUM( DECODE(OPER, 'A0405', DECODE(V.V_COL,'RES', RES_CNT, RUN_CNT), 0)) DA5, SUM( DECODE(OPER, 'A0605', DECODE(V.V_COL,'RES', RES_CNT, RUN_CNT), 0)) WB5 
                     , SUM( DECODE(OPER, 'A0406', DECODE(V.V_COL,'RES', RES_CNT, RUN_CNT), 0)) DA6, SUM( DECODE(OPER, 'A0606', DECODE(V.V_COL,'RES', RES_CNT, RUN_CNT), 0)) WB6 
                     , SUM( DECODE(OPER, 'A0407', DECODE(V.V_COL,'RES', RES_CNT, RUN_CNT), 0)) DA7, SUM( DECODE(OPER, 'A0607', DECODE(V.V_COL,'RES', RES_CNT, RUN_CNT), 0)) WB7 
                     , SUM( DECODE(OPER, 'A0408', DECODE(V.V_COL,'RES', RES_CNT, RUN_CNT), 0)) DA8, SUM( DECODE(OPER, 'A0608', DECODE(V.V_COL,'RES', RES_CNT, RUN_CNT), 0)) WB8 
                     , SUM( DECODE(OPER, 'A0409', DECODE(V.V_COL,'RES', RES_CNT, RUN_CNT), 0)) DA9, SUM( DECODE(OPER, 'A0609', DECODE(V.V_COL,'RES', RES_CNT, RUN_CNT), 0)) WB9 
                  FROM ( 
                        SELECT RAS.FACTORY, RAS.RES_STS_2 MAT_ID, RES_GRP_6 RES_MODEL, RES_GRP_7 UPEH_GROUP, RES_STS_8 OPER , COUNT(RES_ID) RES_CNT, NVL(SUM(DECODE(RES_UP_DOWN_FLAG, 'U', DECODE(NVL(LOT.LOT_ID, '-'), '-', 0, 1))), 0)  RUN_CNT 
                          FROM MRASRESDEF_BOH RAS 
                             , ( 
                                SELECT * 
                                  FROM RWIPLOTSTS_BOH LOT 
                                 WHERE LOT.FACTORY = 'HMVA2' 
                                   AND LOT.CUTOFF_DT = '2020040122' 
                                   AND LOT.LOT_TYPE = 'W' AND LOT_DEL_FLAG = ' ' 
                                   AND LOT.LOT_CMF_5 LIKE 'P%' 
                                   AND (LOT.OPER LIKE 'A040%' OR LOT.OPER LIKE 'A060%' ) 
                                   AND LOT.LOT_STATUS = 'PROC' 
                               ) LOT 
                         WHERE RAS.FACTORY = 'HMVA2' 
                           AND RAS.CUTOFF_DT = '2020040122' 
                           AND RAS.FACTORY = LOT.FACTORY(+) 
                           AND RES_ID = LOT.START_RES_ID(+) 
                           AND RES_CMF_9 = 'Y' 
                           AND RES_CMF_7 = 'Y' 
                           AND DELETE_FLAG  = ' ' 
                           AND RES_TYPE  = 'EQUIPMENT' 
                           AND (RES_STS_8 LIKE 'A040%' OR RES_STS_8 LIKE 'A060%' ) 
                           AND (RES_STS_1 NOT IN ('C200', 'B199') OR RES_UP_DOWN_FLAG = 'U') 
                         GROUP BY RAS.FACTORY, RES_STS_2, RES_GRP_6, RES_GRP_7, RES_STS_8 
                       ) 
                     , (SELECT 'RES' V_COL FROM DUAL UNION ALL SELECT 'RUN' FROM DUAL) V 
                 WHERE MAT_ID LIKE '%'
                 GROUP BY  MAT_ID, V.V_COL 
                 UNION ALL 
                SELECT '3_CAPA' GUBUN, MAT_ID 
                     , SUM( CASE WHEN OPER LIKE 'A040%' THEN   RES_CNT * NVL(UPEH,0) * 24 * CONV_RATE  ELSE 0  END ) RES_DA_TTL 
                     , SUM( CASE WHEN  OPER LIKE 'A060%' THEN   RES_CNT * NVL(UPEH,0) * 24 * CONV_RATE  ELSE 0  END ) RES_WB_TTL 
                     , SUM( CASE WHEN OPER IN ( 'A0400',  'A0401' ) THEN  RES_CNT * NVL(UPEH,0) * 24 * CONV_RATE ELSE 0 END ) RES_CNT_DA1 
                     , SUM( CASE WHEN OPER IN ( 'A0600',  'A0601' ) THEN  RES_CNT * NVL(UPEH,0) * 24 * CONV_RATE ELSE 0 END )   RES_CNT_WB1 
                     , SUM( DECODE( OPER, 'A0402',  RES_CNT * NVL(UPEH,0) * 24 * CONV_RATE, 0)) RES_CNT_DA2, SUM( DECODE( OPER, 'A0602', RES_CNT *  NVL(UPEH,0) * 24 * CONV_RATE, 0))  RES_CNT_WB2 
                     , SUM( DECODE( OPER, 'A0403',  RES_CNT * NVL(UPEH,0) * 24 * CONV_RATE, 0)) RES_CNT_DA3, SUM( DECODE( OPER, 'A0603',  RES_CNT * NVL(UPEH,0) * 24 * CONV_RATE, 0))  RES_CNT_WB3 
                     , SUM( DECODE( OPER, 'A0404',  RES_CNT * NVL(UPEH,0) * 24 * CONV_RATE, 0)) RES_CNT_DA4, SUM( DECODE( OPER, 'A0604',  RES_CNT * NVL(UPEH,0) * 24 * CONV_RATE, 0))  RES_CNT_WB4 
                     , SUM( DECODE( OPER, 'A0405',  RES_CNT * NVL(UPEH,0) * 24 * CONV_RATE, 0)) RES_CNT_DA5, SUM( DECODE( OPER, 'A0605',  RES_CNT * NVL(UPEH,0) * 24 * CONV_RATE, 0))  RES_CNT_WB5 
                     , SUM( DECODE( OPER, 'A0406',  RES_CNT * NVL(UPEH,0) * 24 * CONV_RATE, 0)) RES_CNT_DA6, SUM( DECODE( OPER, 'A0606',  RES_CNT * NVL(UPEH,0) * 24 * CONV_RATE, 0))  RES_CNT_WB6 
                     , SUM( DECODE( OPER, 'A0407',  RES_CNT * NVL(UPEH,0) * 24 * CONV_RATE, 0)) RES_CNT_DA7, SUM( DECODE( OPER, 'A0607',  RES_CNT * NVL(UPEH,0) * 24 * CONV_RATE, 0))  RES_CNT_WB7 
                     , SUM( DECODE( OPER, 'A0408',  RES_CNT * NVL(UPEH,0) * 24 * CONV_RATE, 0)) RES_CNT_DA8, SUM( DECODE( OPER, 'A0608',  RES_CNT * NVL(UPEH,0) * 24 * CONV_RATE, 0))  RES_CNT_WB8 
                     , SUM( DECODE( OPER, 'A0409',  RES_CNT * NVL(UPEH,0) * 24 * CONV_RATE, 0)) RES_CNT_DA9, SUM( DECODE( OPER, 'A0609',  RES_CNT * NVL(UPEH,0) * 24 * CONV_RATE, 0))  RES_CNT_WB9 
                  FROM ( 
                        SELECT RAS.FACTORY, RAS.RES_GRP_6 RES_MODEL, RAS.RES_STS_2 MAT_ID, RAS.RES_STS_8 OPER , COUNT(RES_ID) RES_CNT 
                             , MAX(DECODE(SUBSTR(RAS.RES_STS_8, 1, 3), 'A04', NVL(UPEH.UPEH, 0) * 0.68,  NVL(UPEH.UPEH, 0) * 0.71 )  ) UPEH 
                             , 1 CONV_RATE 
                          FROM MRASRESDEF_BOH RAS
                             , CRASUPHDEF UPEH
                             , ( 
                                SELECT MAT_ID, OPER, TCD_CMF_2 AS WIRE_CNT 
                                  FROM CWIPTCDDEF@RPTTOMES 
                                 WHERE FACTORY = 'HMVA2' 
                                   AND OPER LIKE 'A060%' 
                                   AND TCD_CMF_2 <> ' ' 
                                   AND SET_FLAG = 'Y' 
                               ) WIR 
                             , ( 
                                SELECT KEY_1 AS MAT_ID, DATA_1 
                                  FROM MGCMTBLDAT 
                                 WHERE FACTORY = 'HMVA2' 
                                   AND TABLE_NAME IN ('H_SEC_AUTO_LOSS','H_HX_AUTO_LOSS') 
                               ) GCM 
                         WHERE RAS.FACTORY = 'HMVA2' 
                           AND RAS.CUTOFF_DT = '2020040122' 
                           AND RAS.RES_CMF_9 = 'Y' 
                           AND RAS.RES_CMF_7 = 'Y' 
                           AND RAS.DELETE_FLAG  = ' ' 
                           AND RAS.RES_TYPE  = 'EQUIPMENT' 
                           AND (RAS.RES_STS_8 LIKE 'A040%' OR RAS.RES_STS_8 LIKE 'A060%') 
                           AND RAS.RES_STS_2 LIKE '%'
                           AND RAS.FACTORY = UPEH.FACTORY(+) 
                           AND RAS.RES_GRP_6 = UPEH.RES_MODEL(+) 
                           AND RAS.RES_STS_2 = UPEH.MAT_ID(+) 
                           AND RAS.RES_STS_8 = UPEH.OPER(+) 
                           AND RAS.RES_STS_2 = WIR.MAT_ID(+) 
                           AND RAS.RES_STS_8 = WIR.OPER(+) 
                           AND RAS.RES_STS_2 = GCM.MAT_ID(+) 
                           AND (RAS.RES_STS_1 NOT IN ('C200', 'B199') OR RAS.RES_UP_DOWN_FLAG = 'U') 
                         GROUP BY RAS.FACTORY, RAS.RES_GRP_6, RAS.RES_STS_2, RAS.RES_STS_8 
                       ) 
                 GROUP BY MAT_ID 
                 UNION ALL 
                SELECT GUBUN, MAT_ID 
                     , DA_1+DA_2+DA_3+DA_4+DA_5+DA_6+DA_7+DA_8+DA_9 AS DA_WIP_TTL 
                     , WB_1+WB_2+WB_3+WB_4+WB_5+WB_6+WB_7+WB_8+WB_9 AS WB_WIP_TTL 
                     , DA_1 
                     , WB_1 
                     , DA_2 
                     , WB_2 
                     , DA_3 
                     , WB_3 
                     , DA_4 
                     , WB_4 
                     , DA_5 
                     , WB_5 
                     , DA_6 
                     , WB_6 
                     , DA_7 
                     , WB_7 
                     , DA_8 
                     , WB_8 
                     , DA_9 
                     , WB_9 
                  FROM ( 
                        SELECT '6_WIP_MAIN_M' AS GUBUN, LOT.MAT_ID 
                             , SUM(CASE WHEN MAT_GRP_5 IN ('-', '1st') AND OPER IN ('A0250', 'A0400', 'A0401') THEN QTY_1 ELSE 0 END ) DA_1 
                             , SUM(CASE WHEN MAT_GRP_5 IN ('Middle', 'Merge' ) AND OPER = 'A0402' THEN QTY_1 ELSE 0 END ) DA_2 
                             , SUM(CASE WHEN MAT_GRP_5 IN ('Middle 1', 'Merge' ) AND OPER = 'A0403' THEN QTY_1 ELSE 0 END ) DA_3 
                             , SUM(CASE WHEN MAT_GRP_5 IN ('Middle 2', 'Merge' ) AND OPER = 'A0404' THEN QTY_1 ELSE 0 END ) DA_4 
                             , SUM(CASE WHEN MAT_GRP_5 IN ('Middle 3', 'Merge' ) AND OPER = 'A0405' THEN QTY_1 ELSE 0 END ) DA_5 
                             , SUM(CASE WHEN MAT_GRP_5 IN ('Middle 4', 'Merge' ) AND OPER = 'A0406' THEN QTY_1 ELSE 0 END ) DA_6 
                             , SUM(CASE WHEN MAT_GRP_5 IN ('Middle 5', 'Merge' ) AND OPER = 'A0407' THEN QTY_1 ELSE 0 END ) DA_7 
                             , SUM(CASE WHEN MAT_GRP_5 IN ('Middle 6', 'Merge' ) AND OPER = 'A0408' THEN QTY_1 ELSE 0 END ) DA_8 
                             , SUM(CASE WHEN MAT_GRP_5 IN ('Middle 7', 'Merge' ) AND OPER = 'A0409' THEN QTY_1 ELSE 0 END ) DA_9 
                             , SUM(CASE WHEN OPER IN ('A0550', 'A0551', 'A0600', 'A0601') THEN QTY_1 ELSE 0 END ) WB_1 
                             , SUM(CASE WHEN OPER IN ('A0552', 'A0602') THEN QTY_1 ELSE 0 END ) WB_2 
                             , SUM(CASE WHEN OPER IN ('A0553', 'A0603') THEN QTY_1 ELSE 0 END ) WB_3 
                             , SUM(CASE WHEN OPER IN ('A0554', 'A0604') THEN QTY_1 ELSE 0 END ) WB_4 
                             , SUM(CASE WHEN OPER IN ('A0555', 'A0605') THEN QTY_1 ELSE 0 END ) WB_5 
                             , SUM(CASE WHEN OPER IN ('A0556', 'A0606') THEN QTY_1 ELSE 0 END ) WB_6 
                             , SUM(CASE WHEN OPER IN ('A0557', 'A0607') THEN QTY_1 ELSE 0 END ) WB_7 
                             , SUM(CASE WHEN OPER IN ('A0558', 'A0608') THEN QTY_1 ELSE 0 END ) WB_8 
                             , SUM(CASE WHEN OPER IN ('A0559', 'A0609') THEN QTY_1 ELSE 0 END ) WB_9 
                          FROM RWIPLOTSTS_BOH LOT 
                             , VWIPMATDEF MAT 
                         WHERE LOT.CUTOFF_DT = '2020040122' 
                           AND LOT.FACTORY = MAT.FACTORY 
                           AND LOT.MAT_ID = MAT.MAT_ID 
                           AND LOT.FACTORY = 'HMVA2' 
                           AND LOT.LOT_TYPE = 'W' 
                           AND LOT.LOT_CMF_5 LIKE 'P%' 
                           AND LOT.LOT_DEL_FLAG = ' ' 
                           AND MAT.MAT_TYPE = 'FG' 
                           AND MAT.DELETE_FLAG <> 'Y' 
                           AND MAT.MAT_GRP_2 <> '-' 
                           AND LOT.MAT_ID LIKE '%'
                         GROUP BY LOT.MAT_ID 
                       ) 
                 UNION ALL 
                SELECT GUBUN, MAT_ID 
                     , DA_1+DA_2+DA_3+DA_4+DA_5+DA_6+DA_7+DA_8+DA_9 AS DA_WIP_TTL 
                     , 0 AS WB_WIP_TTL 
                     , DA_1 
                     , 0 AS WB_1 
                     , DA_2 
                     , 0 AS WB_2 
                     , DA_3 
                     , 0 AS WB_3 
                     , DA_4 
                     , 0 AS WB_4 
                     , DA_5 
                     , 0 AS WB_5 
                     , DA_6 
                     , 0 AS WB_6 
                     , DA_7 
                     , 0 AS WB_7 
                     , DA_8 
                     , 0 AS WB_8 
                     , DA_9 
                     , 0 AS WB_9 
                  FROM ( 
                        SELECT '5_WIP_MAIN' AS GUBUN, LOT.MAT_ID 
                             , 0 AS DA_1 
                             , SUM(CASE WHEN MAT_GRP_5 = '1st' AND OPER IN ('A0402', 'A0500', 'A0501', 'A0530', 'A0531') THEN QTY_1 ELSE 0 END ) DA_2 
                             , SUM(CASE WHEN MAT_GRP_5 = 'Middle' AND OPER IN ('A0403', 'A0502', 'A0532') THEN QTY_1 ELSE 0 END ) DA_3 
                             , SUM(CASE WHEN MAT_GRP_5 = 'Middle 1' AND OPER IN ('A0404', 'A0503', 'A0533') THEN QTY_1 ELSE 0 END ) DA_4 
                             , SUM(CASE WHEN MAT_GRP_5 = 'Middle 2' AND OPER IN ('A0405', 'A0504', 'A0534') THEN QTY_1 ELSE 0 END ) DA_5 
                             , SUM(CASE WHEN MAT_GRP_5 = 'Middle 3' AND OPER IN ('A0406', 'A0505', 'A0535') THEN QTY_1 ELSE 0 END ) DA_6 
                             , SUM(CASE WHEN MAT_GRP_5 = 'Middle 4' AND OPER IN ('A0407', 'A0506', 'A0536') THEN QTY_1 ELSE 0 END ) DA_7 
                             , SUM(CASE WHEN MAT_GRP_5 = 'Middle 5' AND OPER IN ('A0408', 'A0507', 'A0537') THEN QTY_1 ELSE 0 END ) DA_8 
                             , SUM(CASE WHEN MAT_GRP_5 = 'Middle 6' AND OPER IN ('A0409', 'A0508', 'A0538') THEN QTY_1 ELSE 0 END ) DA_9 
                          FROM RWIPLOTSTS_BOH LOT 
                             , VWIPMATDEF MAT 
                         WHERE LOT.CUTOFF_DT = '2020040122' 
                           AND LOT.FACTORY = MAT.FACTORY 
                           AND LOT.MAT_ID = MAT.MAT_ID 
                           AND LOT.FACTORY = 'HMVA2' 
                           AND LOT.LOT_TYPE = 'W' 
                           AND LOT.LOT_CMF_5 LIKE 'P%' 
                           AND LOT.LOT_DEL_FLAG = ' ' 
                           AND MAT.MAT_TYPE = 'FG' 
                           AND MAT.DELETE_FLAG <> 'Y' 
                           AND MAT.MAT_GRP_2 <> '-' 
                           AND LOT.MAT_ID LIKE '%'
                         GROUP BY LOT.MAT_ID 
                       ) 
                 UNION ALL 
                SELECT '4_WIP_CHIP' GUBUN, MAT_ID 
                     , SUM(QTY_1) AS DA_WIP_TTL 
                     , 0 AS WB_WIP_TTL 
                     , 0 AS DA_1 
                     , 0 AS WB_1 
                     , SUM(CASE WHEN OPER IN ('A0250', 'A0402') AND MAT_GRP_5 = '2nd' THEN QTY_1 ELSE 0 END) AS DA_2 
                     , 0 AS WB_2 
                     , SUM(CASE WHEN OPER IN ('A0250', 'A0403') AND MAT_GRP_5 = '3rd' THEN QTY_1 ELSE 0 END) AS DA_3 
                     , 0 AS WB_3 
                     , SUM(CASE WHEN OPER IN ('A0250', 'A0404') AND MAT_GRP_5 = '4th' THEN QTY_1 ELSE 0 END) AS DA_4 
                     , 0 AS WB_4 
                     , SUM(CASE WHEN OPER IN ('A0250', 'A0405') AND MAT_GRP_5 = '5th' THEN QTY_1 ELSE 0 END) AS DA_5 
                     , 0 AS WB_5 
                     , SUM(CASE WHEN OPER IN ('A0250', 'A0406') AND MAT_GRP_5 = '6th' THEN QTY_1 ELSE 0 END) AS DA_6 
                     , 0 AS WB_6 
                     , SUM(CASE WHEN OPER IN ('A0250', 'A0407') AND MAT_GRP_5 = '7th' THEN QTY_1 ELSE 0 END) AS DA_7 
                     , 0 AS WB_7 
                     , SUM(CASE WHEN OPER IN ('A0250', 'A0408') AND MAT_GRP_5 = '8th' THEN QTY_1 ELSE 0 END) AS DA_8 
                     , 0 AS WB_8 
                     , SUM(CASE WHEN OPER IN ('A0250', 'A0409') AND MAT_GRP_5 = '9th' THEN QTY_1 ELSE 0 END) AS DA_9 
                     , 0 AS WB_9 
                  FROM ( 
                        SELECT A.MAT_ID, A.OPER, B.MAT_GRP_5, A.QTY_1 
                          FROM RWIPLOTSTS_BOH A, MWIPMATDEF B 
                         WHERE A.CUTOFF_DT = '2020040122' 
                           AND A.FACTORY = B.FACTORY 
                           AND A.MAT_ID = B.MAT_ID 
                           AND A.FACTORY = 'HMVA2' 
                           AND A.LOT_TYPE = 'W' 
                           AND A.LOT_CMF_5 LIKE 'P%' 
                           AND A.LOT_DEL_FLAG = ' ' 
                           AND A.OPER IN ('A0250', 'A0402', 'A0403', 'A0404', 'A0405', 'A0406', 'A0407', 'A0408', 'A0409') 
                           AND B.MAT_TYPE = 'FG' 
                           AND B.MAT_GRP_4 NOT IN ('-','FD','FU') 
                           AND B.MAT_GRP_5 IN ( '2nd',  '3rd', '4th', '5th', '6th',  '7th', '8th', '9th') 
                           AND B.DELETE_FLAG <> 'Y' 
                           AND B.MAT_GRP_2 <> '-' 
                       ) 
                 WHERE MAT_ID LIKE '%'
                 GROUP BY MAT_ID 
                 UNION ALL 
                SELECT '7_실적' GUBUN, MAT_ID 
                     , SUM( CASE WHEN OPER LIKE 'A040%' THEN  QTY * CONV_RATE  ELSE 0  END ) DA_RST_TTL ,  SUM( CASE WHEN OPER LIKE 'A060%' THEN  QTY * CONV_RATE  ELSE 0  END ) WB_RST_TTL 
                     , SUM( CASE WHEN OPER IN ( 'A0400', 'A0401') THEN QTY * CONV_RATE  ELSE 0 END ) DA401 , SUM( CASE WHEN OPER IN ( 'A0600', 'A0601') THEN QTY * CONV_RATE ELSE 0 END )  WB601 
                     , SUM(DECODE(OPER, 'A0402', QTY * CONV_RATE,  0)) DA402  , SUM(DECODE(OPER, 'A0602', QTY * CONV_RATE,  0)) WB602 
                     , SUM(DECODE(OPER, 'A0403', QTY * CONV_RATE,  0)) DA403  , SUM(DECODE(OPER, 'A0603', QTY * CONV_RATE,  0)) WB603 
                     , SUM(DECODE(OPER, 'A0404', QTY * CONV_RATE,  0)) DA404  , SUM(DECODE(OPER, 'A0604', QTY * CONV_RATE,  0)) WB604 
                     , SUM(DECODE(OPER, 'A0405', QTY * CONV_RATE,  0)) DA405  , SUM(DECODE(OPER, 'A0605', QTY * CONV_RATE,  0)) WB605 
                     , SUM(DECODE(OPER, 'A0406', QTY * CONV_RATE,  0)) DA406  , SUM(DECODE(OPER, 'A0606', QTY * CONV_RATE,  0)) WB606 
                     , SUM(DECODE(OPER, 'A0407', QTY * CONV_RATE,  0)) DA407  , SUM(DECODE(OPER, 'A0607', QTY * CONV_RATE,  0)) WB607 
                     , SUM(DECODE(OPER, 'A0408', QTY * CONV_RATE,  0)) DA408  , SUM(DECODE(OPER, 'A0608', QTY * CONV_RATE,  0)) WB608 
                     , SUM(DECODE(OPER, 'A0409', QTY * CONV_RATE,  0)) DA409  , SUM(DECODE(OPER, 'A0609', QTY * CONV_RATE,  0)) WB609 
                  FROM ( 
                        SELECT A.MAT_ID, A.OPER, SUM(S1_END_QTY_1 + S2_END_QTY_1 + S3_END_QTY_1 + S1_END_RWK_QTY_1 + S2_END_RWK_QTY_1 + S3_END_RWK_QTY_1 ) QTY 
                             , 1 CONV_RATE 
                          FROM RSUMWIPMOV A 
                             , ( 
                                SELECT MAT_ID, OPER, TCD_CMF_2 AS WIRE_CNT 
                                  FROM CWIPTCDDEF@RPTTOMES 
                                 WHERE FACTORY = 'HMVA2' 
                                   AND OPER LIKE 'A060%' 
                                   AND TCD_CMF_2 <> ' ' 
                                   AND SET_FLAG = 'Y' 
                               ) WIR 
                             , ( 
                                SELECT KEY_1 AS MAT_ID, DATA_1 
                                  FROM MGCMTBLDAT 
                                 WHERE FACTORY = 'HMVA2' 
                                   AND TABLE_NAME IN ('H_SEC_AUTO_LOSS','H_HX_AUTO_LOSS') 
                               ) GCM 
                         WHERE 1=1 
                           AND A.FACTORY  = 'HMVA2' 
                           AND A.MAT_VER  = 1 
                           AND A.WORK_DATE = '20200401'
                           AND A.LOT_TYPE  = 'W' 
                           AND A.MAT_ID LIKE '%'
                           AND ( A.OPER LIKE  'A040%' OR  A.OPER LIKE  'A060%'  ) 
                           AND A.CM_KEY_3 LIKE 'P%' 
                           AND A.MAT_ID = WIR.MAT_ID(+) 
                           AND A.OPER  = WIR.OPER(+) 
                           AND A.MAT_ID = GCM.MAT_ID(+) 
                         GROUP BY A.MAT_ID, A.OPER 
                       ) 
                 GROUP BY MAT_ID 
               ) A 
             , (SELECT * FROM MWIPMATDEF WHERE FACTORY = 'HMVA2'  AND MAT_TYPE = 'FG' AND MAT_VER =  1 AND  DELETE_FLAG <> 'Y' ) B 
         WHERE A.MAT_ID = B.MAT_ID(+) 
       ) A 
     , ( SELECT SEQ FROM HRTDSUMSEQ@RPTTOMES WHERE SEQ <= 8 ) C 
 WHERE 1 = 1 
   AND A.MAT_GRP_1 IS NOT NULL 
 GROUP BY A.MAT_GRP_1, A.MAT_GRP_9, A.MAT_GRP_10,  ' ',  ' ',  ' ' 
        , DECODE(SEQ, 1, '설비대수', 2, 'RUN', 3, 'CAPA', 4, 'CHIP', 5, 'MAIN', 6, 'MAIN_M', 7, '실적', 8, 'CAPA 효율'), SEQ
) 
SELECT (SELECT DATA_1 FROM MGCMTBLDAT@RPTTOMES WHERE FACTORY = 'HMVA2' AND TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = CUSTOMER)  CUSTOMER, FAMILY, PKG,  ' ',  ' ',  ' ' 
     , DECODE(GUBUN_SEQ, 1, '설비', 2, '설비', 3, 'CAPA', 4, '재공', 5, '재공', 6, '재공', 7, '실적', 8, 'CAPA 효율') AS GUBUN0 
     , GUBUN 
     , DECODE(TRIM(TO_CHAR(SUM(DECODE(GUBUN_SEQ, 1, DA_TTL, 2, DA_TTL, DA_TTL/1000)), '999,999,999')),'0','',TRIM(TO_CHAR(SUM(DECODE(GUBUN_SEQ, 1, DA_TTL, 2, DA_TTL, DA_TTL/1000)), '999,999,999'))) AS DA_TTL 
     , DECODE(TRIM(TO_CHAR(SUM(DECODE(GUBUN_SEQ, 1, DA1, 2, DA1, DA1/1000)), '999,999,999')),'0','',TRIM(TO_CHAR(SUM(DECODE(GUBUN_SEQ, 1, DA1, 2, DA1, DA1/1000)), '999,999,999')) ) AS DA1 
     , DECODE(TRIM(TO_CHAR(SUM(DECODE(GUBUN_SEQ, 1, DA2, 2, DA2, DA2/1000)), '999,999,999')),'0','',TRIM(TO_CHAR(SUM(DECODE(GUBUN_SEQ, 1, DA2, 2, DA2, DA2/1000)), '999,999,999')) ) AS DA2 
     , DECODE(TRIM(TO_CHAR(SUM(DECODE(GUBUN_SEQ, 1, DA3, 2, DA3, DA3/1000)), '999,999,999')),'0','',TRIM(TO_CHAR(SUM(DECODE(GUBUN_SEQ, 1, DA3, 2, DA3, DA3/1000)), '999,999,999')) ) AS DA3 
     , DECODE(TRIM(TO_CHAR(SUM(DECODE(GUBUN_SEQ, 1, DA4, 2, DA4, DA4/1000)), '999,999,999')),'0','',TRIM(TO_CHAR(SUM(DECODE(GUBUN_SEQ, 1, DA4, 2, DA4, DA4/1000)), '999,999,999')) ) AS DA4 
     , DECODE(TRIM(TO_CHAR(SUM(DECODE(GUBUN_SEQ, 1, DA5, 2, DA5, DA5/1000)), '999,999,999')),'0','',TRIM(TO_CHAR(SUM(DECODE(GUBUN_SEQ, 1, DA5, 2, DA5, DA5/1000)), '999,999,999')) ) AS DA5 
     , DECODE(TRIM(TO_CHAR(SUM(DECODE(GUBUN_SEQ, 1, DA6, 2, DA6, DA6/1000)), '999,999,999')),'0','',TRIM(TO_CHAR(SUM(DECODE(GUBUN_SEQ, 1, DA6, 2, DA6, DA6/1000)), '999,999,999')) ) AS DA6 
     , DECODE(TRIM(TO_CHAR(SUM(DECODE(GUBUN_SEQ, 1, DA7, 2, DA7, DA7/1000)), '999,999,999')),'0','',TRIM(TO_CHAR(SUM(DECODE(GUBUN_SEQ, 1, DA7, 2, DA7, DA7/1000)), '999,999,999')) ) AS DA7 
     , DECODE(TRIM(TO_CHAR(SUM(DECODE(GUBUN_SEQ, 1, DA8, 2, DA8, DA8/1000)), '999,999,999')),'0','',TRIM(TO_CHAR(SUM(DECODE(GUBUN_SEQ, 1, DA8, 2, DA8, DA8/1000)), '999,999,999')) ) AS DA8 
     , DECODE(TRIM(TO_CHAR(SUM(DECODE(GUBUN_SEQ, 1, DA9, 2, DA9, DA9/1000)), '999,999,999')),'0','',TRIM(TO_CHAR(SUM(DECODE(GUBUN_SEQ, 1, DA9, 2, DA9, DA9/1000)), '999,999,999')) ) AS DA9 
     , DECODE(TRIM(TO_CHAR(SUM(DECODE(GUBUN_SEQ, 1, WB_TTL, 2, WB_TTL, WB_TTL/1000)), '999,999,999')),'0', '',TRIM(TO_CHAR(SUM(DECODE(GUBUN_SEQ, 1, WB_TTL, 2, WB_TTL, WB_TTL/1000)), '999,999,999'))) AS WB_TTL 
     , DECODE(TRIM(TO_CHAR(SUM(DECODE(GUBUN_SEQ, 1, WB1, 2, WB1, WB1/1000)), '999,999,999')),'0','',TRIM(TO_CHAR(SUM(DECODE(GUBUN_SEQ, 1, WB1, 2, WB1, WB1/1000)), '999,999,999'))) AS WB1 
     , DECODE(TRIM(TO_CHAR(SUM(DECODE(GUBUN_SEQ, 1, WB2, 2, WB2, WB2/1000)), '999,999,999')),'0','',TRIM(TO_CHAR(SUM(DECODE(GUBUN_SEQ, 1, WB2, 2, WB2, WB2/1000)), '999,999,999'))) AS WB2 
     , DECODE(TRIM(TO_CHAR(SUM(DECODE(GUBUN_SEQ, 1, WB3, 2, WB3, WB3/1000)), '999,999,999')),'0','',TRIM(TO_CHAR(SUM(DECODE(GUBUN_SEQ, 1, WB3, 2, WB3, WB3/1000)), '999,999,999'))) AS WB3 
     , DECODE(TRIM(TO_CHAR(SUM(DECODE(GUBUN_SEQ, 1, WB4, 2, WB4, WB4/1000)), '999,999,999')),'0','',TRIM(TO_CHAR(SUM(DECODE(GUBUN_SEQ, 1, WB4, 2, WB4, WB4/1000)), '999,999,999'))) AS WB4 
     , DECODE(TRIM(TO_CHAR(SUM(DECODE(GUBUN_SEQ, 1, WB5, 2, WB5, WB5/1000)), '999,999,999')),'0','',TRIM(TO_CHAR(SUM(DECODE(GUBUN_SEQ, 1, WB5, 2, WB5, WB5/1000)), '999,999,999'))) AS WB5 
     , DECODE(TRIM(TO_CHAR(SUM(DECODE(GUBUN_SEQ, 1, WB6, 2, WB6, WB6/1000)), '999,999,999')),'0','',TRIM(TO_CHAR(SUM(DECODE(GUBUN_SEQ, 1, WB6, 2, WB6, WB6/1000)), '999,999,999'))) AS WB6 
     , DECODE(TRIM(TO_CHAR(SUM(DECODE(GUBUN_SEQ, 1, WB7, 2, WB7, WB7/1000)), '999,999,999')),'0','',TRIM(TO_CHAR(SUM(DECODE(GUBUN_SEQ, 1, WB7, 2, WB7, WB7/1000)), '999,999,999'))) AS WB7 
     , DECODE(TRIM(TO_CHAR(SUM(DECODE(GUBUN_SEQ, 1, WB8, 2, WB8, WB8/1000)), '999,999,999')),'0','',TRIM(TO_CHAR(SUM(DECODE(GUBUN_SEQ, 1, WB8, 2, WB8, WB8/1000)), '999,999,999'))) AS WB8 
     , DECODE(TRIM(TO_CHAR(SUM(DECODE(GUBUN_SEQ, 1, WB9, 2, WB9, WB9/1000)), '999,999,999')),'0','',TRIM(TO_CHAR(SUM(DECODE(GUBUN_SEQ, 1, WB9, 2, WB9, WB9/1000)), '999,999,999'))) AS WB9 
  FROM TEMP_VIEW 
 GROUP BY GROUPING SETS((CUSTOMER, FAMILY, PKG, GUBUN, GUBUN_SEQ), (CUSTOMER, FAMILY, GUBUN, GUBUN_SEQ), (CUSTOMER, GUBUN, GUBUN_SEQ), (GUBUN, GUBUN_SEQ) ) 
 ORDER BY DECODE(TEMP_VIEW.CUSTOMER, NULL, 1, 'SE', 2, 'HX', 3, 'IM', 4, 'FC', 5, 6), TEMP_VIEW.CUSTOMER, FAMILY, PKG,GUBUN_SEQ 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT PLAN_WEEK V1    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_DATE = TO_CHAR(SYSDATE,'yyyymmdd')      AND ROWNUM = 1  
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT LANGUAGE_1 FROM RWEBFUNDEF WHERE FUNC_NAME = 'PRD010425'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT *
FROM (SELECT A.FACTORY AS FACTORY,
             A.MAT_ID AS MAT_ID,
             A.OPER AS OPER,
             NVL(B.BOH, 0) AS BOH,
             A.OPER_IN AS SUBUL_IN,
             A.END_QTY + NVL(F.SHIP_HMKA1_CUSTOMER_QTY, 0) + NVL(G.SHIP_HMKA1_HMKT1_QTY, 0) AS SUBUL_OUT,
             A.LOSS + NVL(D.TERMINATE_NORMAL_QTY, 0) + NVL(E.TERMINATE_COMBINE_QTY, 0) AS SUBUL_LOSS,
             A.CHG AS CHG,
             NVL(C.EOH, 0) AS EOH,
             CASE
               WHEN NVL(A.CHG, 0) < 0 THEN (NVL(B.BOH, 0) + NVL(A.OPER_IN, 0)) - (NVL(A.END_QTY, 0) + NVL(F.SHIP_HMKA1_CUSTOMER_QTY, 0) + NVL(G.SHIP_HMKA1_HMKT1_QTY, 0) + NVL(A.LOSS, 0) + NVL(D.TERMINATE_NORMAL_QTY, 0) + NVL(E.TERMINATE_COMBINE_QTY, 0) + ABS(NVL(A.CHG, 0)) + NVL(C.EOH, 0))
               WHEN NVL(A.CHG, 0) >= 0 THEN (NVL(B.BOH, 0) + NVL(A.OPER_IN, 0) + NVL(A.CHG, 0)) - (NVL(A.END_QTY, 0) + NVL(F.SHIP_HMKA1_CUSTOMER_QTY, 0) + NVL(G.SHIP_HMKA1_HMKT1_QTY, 0) + NVL(A.LOSS, 0) + NVL(D.TERMINATE_NORMAL_QTY, 0) + NVL(E.TERMINATE_COMBINE_QTY, 0) + NVL(C.EOH, 0))
             END AS DIFF
       FROM (
            SELECT FACTORY AS FACTORY,
                   MAT_ID AS MAT_ID,
                  OPER AS OPER,
                  SUM(S1_OPER_IN_QTY_1 + S2_OPER_IN_QTY_1 + S3_OPER_IN_QTY_1) AS OPER_IN,
                  SUM(S1_END_QTY_1 + S2_END_QTY_1 + S3_END_QTY_1) AS END_QTY,
                  ABS(SUM(S1_LOSS_QTY_1 + S2_LOSS_QTY_1 + S3_LOSS_QTY_1)) AS LOSS,
                  SUM(S1_BONUS_QTY_1 + S2_BONUS_QTY_1 + S3_BONUS_QTY_1) AS BONUS,
                  SUM(S1_CHG_QTY_1 + S2_CHG_QTY_1 + S3_CHG_QTY_1) AS CHG
             FROM RSUMWIPMOV
            WHERE WORK_DATE BETWEEN '20200301' AND '20200522'
              AND MAT_ID LIKE '%'
              AND CM_KEY_3 LIKE 'P%'
              AND LOT_TYPE = 'W'
              AND OPER NOT IN (' ',
                               'A000N',
                               'T000N',
                               'F000N',
                               'E000N',
                               'S000N',
                               'B000N')
        GROUP BY FACTORY,
                 MAT_ID,
                 OPER
           ) A,
           (
           SELECT FACTORY AS FACTORY,
                  MAT_ID AS MAT_ID,
                  OPER AS OPER,
                  SUM(QTY_1) AS BOH
            FROM RWIPLOTSTS_BOH
           WHERE CUTOFF_DT = TO_CHAR(TO_DATE('20200301') - 1, 'YYYYMMDD') || '22'
             AND LOT_TYPE = 'W'
             AND LOT_CMF_5 LIKE 'P%'
        GROUP BY FACTORY,
                 MAT_ID,
                 OPER
           ) B,
           (
           SELECT FACTORY AS FACTORY,
                  MAT_ID AS MAT_ID,
                  OPER AS OPER,
                  SUM(QTY_1) AS EOH
            FROM RWIPLOTSTS_BOH
           WHERE CUTOFF_DT = '20200522' || '22'
             AND LOT_TYPE = 'W'
             AND LOT_CMF_5 LIKE 'P%'
        GROUP BY FACTORY,
                 MAT_ID,
                 OPER
           ) C,
           (
           SELECT FACTORY AS FACTORY,
                  MAT_ID AS MAT_ID,
                  OPER AS OPER,
                  SUM(QTY_1) AS TERMINATE_NORMAL_QTY
             FROM RWIPLOTSTS
            WHERE LOT_TYPE = 'W'
              AND LAST_TRAN_CODE = 'TERMINATE'
              AND LOT_DEL_FLAG = 'Y'
              AND RWK_FLAG = ' '
              AND REP_FLAG = ' '
              AND MAT_ID LIKE '%'
              AND LOT_CMF_5 LIKE 'P%'
              AND LAST_TRAN_TIME BETWEEN TO_CHAR(TO_DATE('20200301') - 1, 'YYYYMMDD') || '220000' AND '20200522' || '215959'
         GROUP BY FACTORY,
                  MAT_ID,
                  OPER
          ) D,
          (
          SELECT FACTORY AS FACTORY,
                 MAT_ID AS MAT_ID,
                 OPER AS OPER,
                 SUM(FROM_TO_QTY_1) AS TERMINATE_COMBINE_QTY
            FROM RWIPLOTCMB
           WHERE FACTORY IN ('HMVA2',
                             'HMKT1',
                             'HMKE1',
                             'HMKS1')
             AND TRAN_TIME BETWEEN TO_CHAR(TO_DATE('20200301') - 1, 'YYYYMMDD') || '220000' AND '20200522' || '215959'
             AND MAT_ID LIKE '%'
             AND FROM_TO_FLAG = 'F'
        GROUP BY FACTORY,
                 MAT_ID,
                 OPER
          ) E,
          (
           SELECT 'HMVA2' AS FACTORY,
                  MAT_ID AS MAT_ID,
                  'AZ010' AS OPER,
                  SUM(S1_FAC_OUT_QTY_1 + S2_FAC_OUT_QTY_1 + S3_FAC_OUT_QTY_1) AS SHIP_HMKA1_CUSTOMER_QTY
             FROM RSUMFACMOV
            WHERE FACTORY = 'CUSTOMER'
              AND CM_KEY_1 = 'HMVA2'
              AND OPER = ' '
              AND WORK_DATE BETWEEN '20200301' AND '20200522'
              AND MAT_ID LIKE '%'
              AND LOT_TYPE = 'W'
              AND CM_KEY_3 LIKE 'P%'
         GROUP BY FACTORY,
                  MAT_ID,
                  OPER
          ) F,
          (
           SELECT 'HMVA2' AS FACTORY,
                  MAT_ID AS MAT_ID,
                  'AZ010' AS OPER,
                  SUM(S1_FAC_OUT_QTY_1 + S2_FAC_OUT_QTY_1 + S3_FAC_OUT_QTY_1) AS SHIP_HMKA1_HMKT1_QTY
             FROM RSUMFACMOV
            WHERE FACTORY = 'HMKT1'
              AND CM_KEY_1 = 'HMVA2'
              AND OPER = 'T000N'
              AND WORK_DATE BETWEEN '20200301' AND '20200522'
              AND MAT_ID LIKE '%'
              AND LOT_TYPE = 'W'
              AND CM_KEY_3 LIKE 'P%'
         GROUP BY FACTORY,
                  MAT_ID,
                  OPER
          ) G
       WHERE A.FACTORY = B.FACTORY(+)
         AND A.MAT_ID = B.MAT_ID(+)
         AND A.OPER = B.OPER(+)
         AND A.FACTORY = C.FACTORY(+)
         AND A.MAT_ID = C.MAT_ID(+)
         AND A.OPER = C.OPER(+)
         AND A.FACTORY = D.FACTORY(+)
         AND A.MAT_ID = D.MAT_ID(+)
         AND A.OPER = D.OPER(+)
         AND A.FACTORY = E.FACTORY(+)
         AND A.MAT_ID = E.MAT_ID(+)
         AND A.OPER = E.OPER(+)
         AND A.FACTORY = F.FACTORY(+)
         AND A.MAT_ID = F.MAT_ID(+)
         AND A.OPER = F.OPER(+)
         AND A.FACTORY = G.FACTORY(+)
         AND A.MAT_ID = G.MAT_ID(+)
         AND A.OPER = G.OPER(+)
 ORDER BY DECODE(A.FACTORY, 'HMVA2', 1, 'HMKT1', 2, 'HMKE1', 3, 'HMKS1', 4, 'FGS', 5, 6) ASC,
       A.MAT_ID ASC,
       A.OPER ASC)

-------------------------------------------------------------
SELECT * FROM RWEBUSRDEF WHERE FACTORY = :FACTORY AND USER_ID= :USER_ID
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
SELECT A.FUNC_GRP_SEQ,A.SEC_GRP_ID,A.FUNC_GRP_ID,NVL(A.FUNC_NAME, ' ') FUNC_NAME, NVL(B.FUNC_DESC, ' ') FUNC_DESC, LANGUAGE_1, LANGUAGE_2, LANGUAGE_3
  FROM RWEBGRPFUN A, RWEBFUNDEF B
 WHERE A.FACTORY = :p_FACTORY
   AND A.SEC_GRP_ID = :p_SEC_GRP_ID
   AND A.FUNC_NAME=B.FUNC_NAME(+)
 ORDER BY A.FUNC_GRP_SEQ, A.FUNC_SEQ
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
SELECT LANGUAGE_1 FROM RWEBFUNDEF WHERE FUNC_NAME = 'PRD010219'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
SELECT MIN(SYS_DATE) AS START_DAY 
     , MAX(SYS_DATE) AS END_DAY 
     , PLAN_YEAR||DECODE(LENGTH(PLAN_WEEK), 1, '0'||PLAN_WEEK, PLAN_WEEK) AS WEEK
  FROM MWIPCALDEF 
 WHERE CALENDAR_ID = 'OTD'
   AND (PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) IN ( 
                                                SELECT WW
                                                  FROM (
                                                        SELECT WW
                                                             , ROW_NUMBER() OVER(ORDER BY WW) AS RNK
                                                          FROM (
                                                                SELECT DISTINCT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW
                                                                  FROM MWIPCALDEF
                                                                 WHERE CALENDAR_ID = 'OTD'
                                                                   AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') >= (
                                                                                                              SELECT MAX(PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) AS WW
                                                                                                                FROM MWIPCALDEF
                                                                                                               WHERE CALENDAR_ID = 'OTD'
                                                                                                                 AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') < (SELECT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW FROM MWIPCALDEF WHERE CALENDAR_ID = 'OTD' AND SYS_DATE = '20200522')
                                                                                                                 AND SYS_DATE >= TO_CHAR(TO_DATE('20200522', 'YYYYMMDD')-14, 'YYYYMMDD')
                                                                                                             )
                                                               ) 
                                                       )
                                                 WHERE RNK <= 7
                                               ) 
 GROUP BY PLAN_YEAR, PLAN_WEEK 
 ORDER BY PLAN_YEAR, PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT DISTINCT OPER
  FROM RWIPLOTSTS 
 WHERE FACTORY = 'HMVA2'
   AND LOT_TYPE = 'W' 
   AND LOT_DEL_FLAG = ' '
   AND OPER BETWEEN 'A0950' AND 'AZ010'
 ORDER BY OPER 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT LANGUAGE_1 FROM RWEBFUNDEF WHERE FUNC_NAME = 'PRD010211'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE) AS START_DAY 
     , MAX(SYS_DATE) AS END_DAY 
     , PLAN_YEAR||DECODE(LENGTH(PLAN_WEEK), 1, '0'||PLAN_WEEK, PLAN_WEEK) AS WEEK
  FROM MWIPCALDEF 
 WHERE CALENDAR_ID = 'OTD'
   AND (PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) IN ( 
                                                SELECT WW
                                                  FROM (
                                                        SELECT WW
                                                             , ROW_NUMBER() OVER(ORDER BY WW) AS RNK
                                                          FROM (
                                                                SELECT DISTINCT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW
                                                                  FROM MWIPCALDEF
                                                                 WHERE CALENDAR_ID = 'OTD'
                                                                   AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') >= (
                                                                                                              SELECT MAX(PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) AS WW
                                                                                                                FROM MWIPCALDEF
                                                                                                               WHERE CALENDAR_ID = 'OTD'
                                                                                                                 AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') < (SELECT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW FROM MWIPCALDEF WHERE CALENDAR_ID = 'OTD' AND SYS_DATE = '20200522')
                                                                                                                 AND SYS_DATE >= TO_CHAR(TO_DATE('20200522', 'YYYYMMDD')-14, 'YYYYMMDD')
                                                                                                             )
                                                               ) 
                                                       )
                                                 WHERE RNK <= 7
                                               ) 
 GROUP BY PLAN_YEAR, PLAN_WEEK 
 ORDER BY PLAN_YEAR, PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT DISTINCT OPER
  FROM RWIPLOTSTS 
 WHERE FACTORY = 'HMVA2'
   AND LOT_TYPE = 'W' 
   AND LOT_DEL_FLAG = ' '
   AND OPER BETWEEN 'A0950' AND 'AZ010'
 ORDER BY OPER 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE-1) 
  FROM MWIPCALDEF 
 WHERE 1=1
   AND CALENDAR_ID='SE'
   AND PLAN_YEAR='2020'
   AND PLAN_WEEK=(
                  SELECT PLAN_WEEK 
                    FROM MWIPCALDEF 
                   WHERE 1=1 
                     AND CALENDAR_ID='SE' 
                     AND SYS_DATE=TO_CHAR(TO_DATE('20200522','YYYYMMDD'),'YYYYMMDD')
                 )

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT NVL((SELECT DATA_1 FROM MGCMTBLDAT WHERE TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = MAT.MAT_GRP_1 AND ROWNUM=1), '-') AS CUSTOMER,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT.MAT_CMF_10 AS PIN_TYPE,  ' ',  ' ', MAT.MAT_ID AS PRODUCT,  ' '
     , SUBSTR(MAT.MAT_ID, LENGTH(MAT.MAT_ID) - 2) AS PKG_CODE
     , ROUND(SUM(NVL(MON_PLN.MON_PLAN,0)) / 1000,0) AS MON_PLAN
     , ROUND(SUM(NVL(MON_AO.SHP_MONTH,0)) / 1000,0) AS SHP_MONTH
     , ROUND(SUM(NVL(MON_PLN.MON_PLAN,0) - NVL(MON_AO.SHP_MONTH,0)) / 1000,0) AS MON_DEF
     , ROUND(DECODE(SUM(NVL(MON_PLN.MON_PLAN,0)), 0, 0, SUM(NVL(MON_AO.SHP_MONTH,0)) / SUM(NVL(MON_PLN.MON_PLAN,0)) * 100), 0) AS JINDO
     , ROUND(SUM(NVL(MON_PLN.MON_PLAN,0)) / 9 / 1000 ,0) AS TARGET
     , ROUND(SUM(NVL(WEEK_PLN.D0_PLAN, 0) + (NVL(WEEK_PLN.WEEK1_TTL, 0) - NVL(MON_AO.SHP_WEEK_TTL, 0))) / 1000, 0) AS PLAN_TODAY
     , ROUND(SUM(NVL(WEEK_PLN.D0_PLAN, 0) + (NVL(WEEK_PLN.WEEK1_TTL, 0) - NVL(MON_AO.SHP_WEEK_TTL, 0)) - NVL(MON_AO.SHP_TODAY, 0)) / 1000, 0) AS DEF_TODAY
     , ROUND(SUM(NVL(MON_AO.SHP_TODAY, 0)) / 1000, 0) AS SHP_TODAY
     , ROUND(SUM(NVL(WIP.A1150,0)) / 1000,0) AS A1150
     , ROUND(SUM(NVL(WIP.A1810,0)) / 1000,0) AS A1810
     , ROUND(SUM(NVL(WIP.AZ010,0)) / 1000,0) AS AZ010
     , ROUND(SUM(NVL(WIP.WIP_TTL,0)) / 1000,0) AS WIP_TOTAL
     , '' AS ETC0     
     , ROUND(SUM(NVL(MON_AO.SHP_YESTERDAY,0)) / 1000,0) AS SHP_YESTERDAY
     , '' AS ETC1
     , ROUND(SUM(NVL(MON_PLN.MON_PLAN,0) - NVL(MON_AO.SHP_MONTH,0)) / 9 / 1000,0) AS GOAL
     , '' AS ETC2
     , '' AS ETC3
     , ROUND(SUM(NVL(WIP.HOLD_WIP,0)) / 1000,0) AS HOLD_WIP
     , ROUND(SUM(NVL(WIP.WIP_TTL,0) - NVL(WIP.HOLD_WIP,0)) / 1000,0) AS FORECAST_SHP
     , ROUND(SUM((NVL(WIP.WIP_TTL,0) - NVL(WIP.HOLD_WIP,0)) * NVL(SUBSTR(MAT.MAT_GRP_4, 3),1)) / 1000,0) AS CHIP
  FROM MWIPMATDEF MAT 
     , ( 
        SELECT MAT_ID, SUM(RESV_FIELD1) AS MON_PLAN 
          FROM CWIPPLNMON 
         WHERE 1=1 
           AND FACTORY = 'HMVA2' 
           AND PLAN_MONTH = '202005' 
         GROUP BY MAT_ID 
       ) MON_PLN  
     , ( 
        SELECT MAT_ID 
             , SUM(CASE WHEN TO_CHAR(TO_DATE('20200522', 'YYYYMMDD'), 'D') = 1 THEN D0_QTY
                        WHEN TO_CHAR(TO_DATE('20200522', 'YYYYMMDD'), 'D') = 2 THEN D0_QTY + D1_QTY
                        WHEN TO_CHAR(TO_DATE('20200522', 'YYYYMMDD'), 'D') = 3 THEN D0_QTY + D1_QTY + D2_QTY
                        WHEN TO_CHAR(TO_DATE('20200522', 'YYYYMMDD'), 'D') = 4 THEN D0_QTY + D1_QTY + D2_QTY + D3_QTY
                        WHEN TO_CHAR(TO_DATE('20200522', 'YYYYMMDD'), 'D') = 5 THEN D0_QTY + D1_QTY + D2_QTY + D3_QTY + D4_QTY
                        WHEN TO_CHAR(TO_DATE('20200522', 'YYYYMMDD'), 'D') = 6 THEN D0_QTY + D1_QTY + D2_QTY + D3_QTY + D4_QTY + D5_QTY
                        ELSE 0
                   END) AS WEEK1_TTL 
             , SUM(CASE WHEN TO_CHAR(TO_DATE('20200522', 'YYYYMMDD'), 'D') = 7 THEN D0_QTY
                        WHEN TO_CHAR(TO_DATE('20200522', 'YYYYMMDD'), 'D') = 1 THEN D1_QTY
                        WHEN TO_CHAR(TO_DATE('20200522', 'YYYYMMDD'), 'D') = 2 THEN D2_QTY
                        WHEN TO_CHAR(TO_DATE('20200522', 'YYYYMMDD'), 'D') = 3 THEN D3_QTY
                        WHEN TO_CHAR(TO_DATE('20200522', 'YYYYMMDD'), 'D') = 4 THEN D4_QTY
                        WHEN TO_CHAR(TO_DATE('20200522', 'YYYYMMDD'), 'D') = 5 THEN D5_QTY
                        WHEN TO_CHAR(TO_DATE('20200522', 'YYYYMMDD'), 'D') = 6 THEN D6_QTY
                        ELSE 0
                   END) AS D0_PLAN 
          FROM ( 
                SELECT MAT_ID 
                     , SUM(DECODE(PLAN_WEEK, '202021', D0_QTY, 0)) AS D0_QTY 
                     , SUM(DECODE(PLAN_WEEK, '202021', D1_QTY, 0)) AS D1_QTY 
                     , SUM(DECODE(PLAN_WEEK, '202021', D2_QTY, 0)) AS D2_QTY 
                     , SUM(DECODE(PLAN_WEEK, '202021', D3_QTY, 0)) AS D3_QTY 
                     , SUM(DECODE(PLAN_WEEK, '202021', D4_QTY, 0)) AS D4_QTY 
                     , SUM(DECODE(PLAN_WEEK, '202021', D5_QTY, 0)) AS D5_QTY 
                     , SUM(DECODE(PLAN_WEEK, '202021', D6_QTY, 0)) AS D6_QTY 
                  FROM RWIPPLNWEK 
                 WHERE 1=1 
                   AND FACTORY = 'HMVA2' 
                   AND GUBUN = '3' 
                   AND PLAN_WEEK = '202021'
                 GROUP BY MAT_ID 
               ) 
         GROUP BY MAT_ID 
       ) WEEK_PLN 
     , (       
        SELECT MAT_ID 
             , SUM(DECODE(WORK_DATE, '20200521', NVL(SHP_QTY_1, 0), 0)) AS SHP_YESTERDAY 
             , SUM(DECODE(WORK_DATE, '20200522', NVL(SHP_QTY_1, 0), 0)) AS SHP_TODAY 
             , SUM(CASE WHEN WORK_DATE BETWEEN '20200516' AND '20200521' THEN NVL(SHP_QTY_1, 0) END) AS SHP_WEEK_TTL 
             , SUM(CASE WHEN WORK_DATE BETWEEN '20200501' AND '20200522' THEN NVL(SHP_QTY_1, 0) END) AS SHP_MONTH 
          FROM VSUMWIPOUT
         WHERE 1=1 
           AND FACTORY  = 'HMVA2' 
           AND CM_KEY_2 = 'PROD' 
           AND LOT_TYPE = 'W' 
           AND MAT_ID NOT LIKE 'HX%' 
           AND WORK_DATE BETWEEN LEAST('20200516', '20200501', '20200521') AND '20200522' 
         GROUP BY MAT_ID 
         UNION ALL 
        SELECT MAT_ID 
             , SUM(DECODE(WORK_DATE, '20200521', NVL(SHP_QTY_1, 0), 0)) AS SHP_YESTERDAY 
             , SUM(DECODE(WORK_DATE, '20200522', NVL(SHP_QTY_1, 0), 0)) AS SHP_TODAY 
             , SUM(CASE WHEN WORK_DATE BETWEEN '20200516' AND '20200521' THEN NVL(SHP_QTY_1, 0) END) AS SHP_WEEK_TTL 
             , SUM(CASE WHEN WORK_DATE BETWEEN '20200501' AND '20200522' THEN NVL(SHP_QTY_1, 0) END) AS SHP_MONTH 
          FROM VSUMWIPOUT_06
         WHERE 1=1 
           AND FACTORY  = 'HMVA2' 
           AND CM_KEY_2 = 'PROD' 
           AND LOT_TYPE = 'W' 
           AND MAT_ID LIKE 'HX%' 
           AND WORK_DATE BETWEEN LEAST('20200516', '20200501', '20200521') AND '20200522' 
         GROUP BY MAT_ID 
       ) MON_AO        
     , (
        SELECT MAT_ID
             , SUM(DECODE(OPER, 'A1150', QTY_1, 0)) AS A1150
             , SUM(DECODE(OPER, 'A1810', QTY_1, 0)) AS A1810
             , SUM(DECODE(OPER, 'AZ010', QTY_1, 0)) AS AZ010
             , SUM(QTY_1) AS WIP_TTL
             , SUM(DECODE(HOLD_FLAG, 'Y', QTY_1, 0)) AS HOLD_WIP
          FROM RWIPLOTSTS
         WHERE 1=1
           AND FACTORY = 'HMVA2'
           AND LOT_TYPE = 'W'
           AND LOT_DEL_FLAG = ' '
           AND OPER BETWEEN 'A0950' AND 'AZ010'
         GROUP BY MAT_ID
       ) WIP
 WHERE 1=1
   AND MAT.MAT_ID = MON_PLN.MAT_ID(+)
   AND MAT.MAT_ID = WEEK_PLN.MAT_ID(+)
   AND MAT.MAT_ID = MON_AO.MAT_ID(+)
   AND MAT.MAT_ID = WIP.MAT_ID(+)
   AND MAT.FACTORY = 'HMVA2' 
   AND MAT.MAT_TYPE= 'FG' 
   AND MAT.DELETE_FLAG <> 'Y' 
 GROUP BY MAT.MAT_GRP_1,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT.MAT_CMF_10,  ' ',  ' ', MAT.MAT_ID,  ' ', SUBSTR(MAT.MAT_ID, LENGTH(MAT.MAT_ID) - 2)
 HAVING (
         SUM(NVL(MON_AO.SHP_MONTH,0)) + SUM(NVL(MON_AO.SHP_WEEK_TTL,0)) + SUM(NVL(MON_AO.SHP_YESTERDAY,0)) + 
         SUM(NVL(WIP.WIP_TTL,0)) + 
         SUM(NVL(MON_PLN.MON_PLAN,0))  + SUM(NVL(WEEK_PLN.D0_PLAN,0)) + SUM(NVL(WEEK_PLN.WEEK1_TTL,0))
         ) <> 0
 ORDER BY DECODE(MAT.MAT_GRP_1, 'SE', 1, 'HX', 2, 3), MAT.MAT_GRP_1,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', MAT.MAT_CMF_10,  ' ',  ' ', MAT.MAT_ID,  ' '

-------------------------------------------------------------
