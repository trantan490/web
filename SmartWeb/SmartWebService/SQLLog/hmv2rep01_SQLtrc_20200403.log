SELECT * FROM RWEBUSRDEF WHERE FACTORY = :FACTORY AND USER_ID= :USER_ID
-------------------------------------------------------------
SELECT A.FUNC_GRP_SEQ,A.SEC_GRP_ID,A.FUNC_GRP_ID,NVL(A.FUNC_NAME, ' ') FUNC_NAME, NVL(B.FUNC_DESC, ' ') FUNC_DESC, LANGUAGE_1, LANGUAGE_2, LANGUAGE_3
  FROM RWEBGRPFUN A, RWEBFUNDEF B
 WHERE A.FACTORY = :p_FACTORY
   AND A.SEC_GRP_ID = :p_SEC_GRP_ID
   AND A.FUNC_NAME=B.FUNC_NAME(+)
 ORDER BY A.FUNC_GRP_SEQ, A.FUNC_SEQ
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT PLAN_WEEK V1    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_DATE = TO_CHAR(SYSDATE,'yyyymmdd')      AND ROWNUM = 1  
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT DISTINCT PLAN_YEAR||LPAD(PLAN_WEEK,2,'0') AS PLAN_WEEK 
  FROM MWIPCALDEF
 WHERE 1=1 
   AND CALENDAR_ID = 'OTD' 
   AND SYS_YEAR||LPAD(SYS_MONTH,2,'0') = '202004' 
 ORDER BY PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT DISTINCT PLAN_YEAR||LPAD(PLAN_WEEK,2,'0') AS PLAN_WEEK 
  FROM MWIPCALDEF
 WHERE 1=1 
   AND CALENDAR_ID = 'OTD' 
   AND SYS_YEAR||LPAD(SYS_MONTH,2,'0') = '202004' 
   AND SYS_DATE <= '20200403' 
 ORDER BY PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT LANGUAGE_3 FROM RWEBFUNDEF WHERE FUNC_NAME = 'PRD010907'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT DISTINCT PLAN_YEAR||LPAD(PLAN_WEEK,2,'0') AS PLAN_WEEK 
  FROM MWIPCALDEF
 WHERE 1=1 
   AND CALENDAR_ID = 'OTD' 
   AND SYS_YEAR||LPAD(SYS_MONTH,2,'0') = '202004' 
 ORDER BY PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT DISTINCT PLAN_YEAR||LPAD(PLAN_WEEK,2,'0') AS PLAN_WEEK 
  FROM MWIPCALDEF
 WHERE 1=1 
   AND CALENDAR_ID = 'OTD' 
   AND SYS_YEAR||LPAD(SYS_MONTH,2,'0') = '202004' 
   AND SYS_DATE <= '20200403' 
 ORDER BY PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE) AS START_DAY 
     , MAX(SYS_DATE) AS END_DAY 
     , PLAN_YEAR||DECODE(LENGTH(PLAN_WEEK), 1, '0'||PLAN_WEEK, PLAN_WEEK) AS WEEK
  FROM MWIPCALDEF 
 WHERE CALENDAR_ID = 'OTD'
   AND (PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) IN ( 
                                                SELECT WW
                                                  FROM (
                                                        SELECT WW
                                                             , ROW_NUMBER() OVER(ORDER BY WW) AS RNK
                                                          FROM (
                                                                SELECT DISTINCT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW
                                                                  FROM MWIPCALDEF
                                                                 WHERE CALENDAR_ID = 'OTD'
                                                                   AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') >= (
                                                                                                              SELECT MAX(PLAN_YEAR || LPAD(PLAN_WEEK,2,'0')) AS WW
                                                                                                                FROM MWIPCALDEF
                                                                                                               WHERE CALENDAR_ID = 'OTD'
                                                                                                                 AND PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') < (SELECT PLAN_YEAR || LPAD(PLAN_WEEK,2,'0') AS WW FROM MWIPCALDEF WHERE CALENDAR_ID = 'OTD' AND SYS_DATE = '20200403')
                                                                                                                 AND SYS_DATE >= TO_CHAR(TO_DATE('20200403', 'YYYYMMDD')-14, 'YYYYMMDD')
                                                                                                             )
                                                               ) 
                                                       )
                                                 WHERE RNK <= 7
                                               ) 
 GROUP BY PLAN_YEAR, PLAN_WEEK 
 ORDER BY PLAN_YEAR, PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
WITH DT AS
(
 SELECT B.PLAN_MONTH, A.PLAN_WEEK, A.GUBUN, B.CKD_WEEK, A.MAT_ID, A.WW_QTY, B.CNT
      , ROUND((A.WW_QTY / 7) * B.CNT, 0) AS REV_QTY
   FROM RWIPPLNWEK A
      , (
         SELECT MAX(TRIM(TO_CHAR(PLAN_YEAR))||LPAD(PLAN_MONTH,2,'0')) PLAN_MONTH
              , MAX(TRIM(TO_CHAR(PLAN_YEAR))||LPAD(PLAN_WEEK,2,'0')) PLAN_WEEK
              , COUNT(*) AS CNT
              , (SELECT MAX(TRIM(TO_CHAR(PLAN_YEAR))||LPAD(PLAN_WEEK,2,'0')) PLAN_WEEK FROM MWIPCALDEF WHERE CALENDAR_ID = 'OTD' AND SYS_DATE = '20200403') AS CKD_WEEK
           FROM MWIPCALDEF
          WHERE 1=1
            AND CALENDAR_ID = 'OTD'
            AND SYS_YEAR||LPAD(SYS_MONTH,2,'0') IN ('202004','202005','202006')
          GROUP BY PLAN_MONTH, PLAN_WEEK
        ) B
  WHERE 1=1
    AND A.PLAN_WEEK = B.PLAN_WEEK
    AND A.FACTORY = 'HMVA2' 
)
SELECT CUST_TYPE, NVL((SELECT DATA_1 FROM MGCMTBLDAT WHERE TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = MAT_GRP_1 AND ROWNUM=1), '-') AS CUSTOMER, MAT_GRP_9 AS MAJOR_CODE, MAT_GRP_2 AS FAMILY,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ' 
     , ROUND(SUM(MON_PLN * CONVERT_QTY) /1000,0) AS MON_PLN
     , ROUND(SUM(REV_PLN * CONVERT_QTY) /1000,0) AS REV_PLN
     , ROUND(SUM(SOP_PLN * CONVERT_QTY) /1000,0) AS SOP_PLN
     , ROUND(SUM(W0 * CONVERT_QTY) /1000,0) AS W0
     , ROUND(SUM(W1 * CONVERT_QTY) /1000,0) AS W1
     , ROUND(SUM(W2 * CONVERT_QTY) /1000,0) AS W2
     , ROUND(SUM(W3 * CONVERT_QTY) /1000,0) AS W3
     , ROUND(SUM(W4 * CONVERT_QTY) /1000,0) AS W4
     , ROUND(SUM(SHP_W0 * CONVERT_QTY) /1000,0) AS SHP_W0
     , ROUND(SUM(M1 * CONVERT_QTY) /1000,0) AS M1
     , ROUND(SUM(M2 * CONVERT_QTY) /1000,0) AS M2
  FROM (
        SELECT MAT.* 
             , NVL((SELECT DATA_10 FROM MGCMTBLDAT WHERE TABLE_NAME = 'H_CUSTOMER' AND FACTORY = 'HMKA1' AND  KEY_1 = MAT_GRP_1), '-') AS CUST_TYPE 
             , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN M_PLN.MON_PLN / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE M_PLN.MON_PLN END AS MON_PLN
             , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN M_PLN.REV_PLN / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE M_PLN.REV_PLN END AS REV_PLN
             , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN M_PLN.SOP_PLN / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE M_PLN.SOP_PLN END AS SOP_PLN
             , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN W0 / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE W0 END AS W0
             , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN W1 / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE W1 END AS W1
             , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN W2 / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE W2 END AS W2
             , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN W3 / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE W3 END AS W3
             , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN W4 / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE W4 END AS W4
             , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN SHP_W0 / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE SHP_W0 END AS SHP_W0
             , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN M0 / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE M0 END AS M0
             , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN M1 / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE M1 END AS M1
             , CASE WHEN MAT.MAT_GRP_3 IN ('COB', 'BGN') THEN M2 / TO_NUMBER(DECODE(MAT.MAT_CMF_13,' ',1,MAT.MAT_CMF_13)) ELSE M2 END AS M2
             , 1 AS CONVERT_QTY
          FROM MWIPMATDEF MAT
             , (
                SELECT MAT_ID
                     , SUM(PLAN_QTY_ASSY) AS MON_PLN
                     , SUM(DECODE(RESV_FIELD1, ' ', 0, RESV_FIELD1)) AS REV_PLN
                     , SUM(DECODE(RESV_FIELD3, ' ', 0, RESV_FIELD3)) AS SOP_PLN
                  FROM CWIPPLNMON 
                 WHERE 1=1 
                   AND FACTORY = 'HMVA2' 
                   AND PLAN_MONTH = '202004'
                 GROUP BY MAT_ID
               ) M_PLN
             , (
                SELECT MAT_ID
                     , SUM(DECODE(PLAN_WEEK, '202014', SHP_QTY, 0)) AS SHP_W0 
                  FROM (
                        SELECT TRIM(TO_CHAR(PLAN_YEAR))||LPAD(PLAN_WEEK,2,'0') AS PLAN_WEEK, MAT_ID
                             , SUM(SHP_QTY_1) AS SHP_QTY
                          FROM VSUMWIPOUT A
                             , MWIPCALDEF B 
                         WHERE 1=1 
                           AND A.WORK_DATE = B.SYS_DATE(+) 
                           AND A.WORK_DATE LIKE '202004%'
                           AND A.LOT_TYPE = 'W' 
                           AND A.FACTORY = 'HMVA2' 
                           AND A.CM_KEY_2 = 'PROD' 
                           AND A.CM_KEY_3 LIKE 'P%'
                           AND B.CALENDAR_ID(+) = 'OTD'
                           AND B.PLAN_YEAR||LPAD(B.PLAN_WEEK,2,'0') <= '202014'
                         GROUP BY TRIM(TO_CHAR(PLAN_YEAR))||LPAD(PLAN_WEEK,2,'0'), MAT_ID 
                         UNION ALL 
                        SELECT PLAN_WEEK, MAT_ID, SUM(REV_QTY) 
                          FROM DT 
                         WHERE GUBUN = '3' 
                           AND PLAN_WEEK = '202014'
                           AND PLAN_MONTH = '202004'
                         GROUP BY PLAN_WEEK, MAT_ID 
                       )
                 GROUP BY MAT_ID
               ) SHP
             , (
                SELECT MAT_ID
                     , SUM(CASE WHEN PLAN_MONTH = '202004' AND PLAN_WEEK = '202014' THEN REV_QTY ELSE 0 END) AS W0 
                     , SUM(CASE WHEN PLAN_MONTH = '202004' AND PLAN_WEEK = '202015' THEN REV_QTY ELSE 0 END) AS W1 
                     , SUM(CASE WHEN PLAN_MONTH = '202004' AND PLAN_WEEK = '202016' THEN REV_QTY ELSE 0 END) AS W2 
                     , SUM(CASE WHEN PLAN_MONTH = '202004' AND PLAN_WEEK = '202017' THEN REV_QTY ELSE 0 END) AS W3 
                     , SUM(CASE WHEN PLAN_MONTH = '202004' AND PLAN_WEEK = '202018' THEN REV_QTY ELSE 0 END) AS W4 
                     , SUM(CASE WHEN PLAN_WEEK >= CKD_WEEK THEN REV_QTY ELSE 0 END) AS W_LAST
                     , SUM(DECODE(PLAN_MONTH, '202004', REV_QTY, 0)) AS M0
                     , SUM(DECODE(PLAN_MONTH, '202005', REV_QTY, 0)) AS M1
                     , SUM(DECODE(PLAN_MONTH, '202006', REV_QTY, 0)) AS M2
                  FROM (
                        SELECT * FROM DT WHERE GUBUN = '3'
                       )
                 GROUP BY MAT_ID
               ) W_PLN
         WHERE 1=1
           AND MAT.MAT_ID = M_PLN.MAT_ID(+)
           AND MAT.MAT_ID = SHP.MAT_ID(+)
           AND MAT.MAT_ID = W_PLN.MAT_ID(+)
           AND MAT.FACTORY = 'HMVA2'
           AND MAT.DELETE_FLAG = ' '
           AND MAT.MAT_TYPE = 'FG'
           AND MAT.MAT_ID LIKE '%'
       )
 GROUP BY CUST_TYPE, MAT_GRP_1, MAT_GRP_9, MAT_GRP_2,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ' 
HAVING SUM(NVL(MON_PLN,0) + NVL(REV_PLN,0) + NVL(SOP_PLN,0) +  + NVL(W0,0) + NVL(W1,0) + NVL(W2,0) + NVL(W3,0) + NVL(W4,0) + NVL(SHP_W0,0) + NVL(M0,0) + NVL(M1,0) + NVL(M2,0)) > 0
 ORDER BY DECODE(CUST_TYPE, 'SEC', 1, 'Hynix', 2, 'Fabless', 3, 4), MAT_GRP_1, MAT_GRP_9, MAT_GRP_2,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ' 

-------------------------------------------------------------
SELECT * FROM RWEBUSRDEF WHERE FACTORY = :FACTORY AND USER_ID= :USER_ID
-------------------------------------------------------------
SELECT A.FUNC_GRP_SEQ,A.SEC_GRP_ID,A.FUNC_GRP_ID,NVL(A.FUNC_NAME, ' ') FUNC_NAME, NVL(B.FUNC_DESC, ' ') FUNC_DESC, LANGUAGE_1, LANGUAGE_2, LANGUAGE_3
  FROM RWEBGRPFUN A, RWEBFUNDEF B
 WHERE A.FACTORY = :p_FACTORY
   AND A.SEC_GRP_ID = :p_SEC_GRP_ID
   AND A.FUNC_NAME=B.FUNC_NAME(+)
 ORDER BY A.FUNC_GRP_SEQ, A.FUNC_SEQ
-------------------------------------------------------------
SELECT * FROM RWEBUSRDEF WHERE FACTORY = :FACTORY AND USER_ID= :USER_ID
-------------------------------------------------------------
SELECT A.FUNC_GRP_SEQ,A.SEC_GRP_ID,A.FUNC_GRP_ID,NVL(A.FUNC_NAME, ' ') FUNC_NAME, NVL(B.FUNC_DESC, ' ') FUNC_DESC, LANGUAGE_1, LANGUAGE_2, LANGUAGE_3
  FROM RWEBGRPFUN A, RWEBFUNDEF B
 WHERE A.FACTORY = :p_FACTORY
   AND A.SEC_GRP_ID = :p_SEC_GRP_ID
   AND A.FUNC_NAME=B.FUNC_NAME(+)
 ORDER BY A.FUNC_GRP_SEQ, A.FUNC_SEQ
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
SELECT LANGUAGE_3 FROM RWEBFUNDEF WHERE FUNC_NAME = 'SEC1101'
-------------------------------------------------------------
SELECT * FROM RWEBUSRDEF WHERE FACTORY= :FACTORY ORDER BY USER_ID
-------------------------------------------------------------
SELECT * FROM RWEBUSRDEF WHERE FACTORY = :FACTORY AND USER_ID= :USER_ID
-------------------------------------------------------------
SELECT * FROM RWEBUSRDEF WHERE FACTORY = :FACTORY AND USER_ID= :USER_ID
-------------------------------------------------------------
SELECT * FROM RWEBUSRDEF WHERE FACTORY = :FACTORY AND USER_ID= :USER_ID
-------------------------------------------------------------
SELECT * FROM RWEBUSRDEF WHERE FACTORY = :FACTORY AND USER_ID= :USER_ID
-------------------------------------------------------------
SELECT * FROM RWEBUSRDEF WHERE FACTORY = :FACTORY AND USER_ID= :USER_ID
-------------------------------------------------------------
SELECT * FROM RWEBUSRDEF WHERE FACTORY = :FACTORY AND USER_ID= :USER_ID
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
SELECT LANGUAGE_3 FROM RWEBFUNDEF WHERE FUNC_NAME = 'SEC1103'
-------------------------------------------------------------
SELECT * FROM RWEBFUNDEF ORDER BY FUNC_NAME
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
SELECT LANGUAGE_3 FROM RWEBFUNDEF WHERE FUNC_NAME = 'SEC1104'
-------------------------------------------------------------
SELECT * FROM RWEBFUNDEF ORDER BY FUNC_NAME
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
SELECT LANGUAGE_3 FROM RWEBFUNDEF WHERE FUNC_NAME = 'TST1108'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
SELECT LANGUAGE_3 FROM RWEBFUNDEF WHERE FUNC_NAME = 'TST1106'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
SELECT LANGUAGE_3 FROM RWEBFUNDEF WHERE FUNC_NAME = 'TST1107'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
SELECT LANGUAGE_3 FROM RWEBFUNDEF WHERE FUNC_NAME = 'SEC1102'
-------------------------------------------------------------
SELECT * FROM RWEBGRPDEF WHERE FACTORY = :FACTORY ORDER BY SEC_GRP_ID
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
SELECT LANGUAGE_3 FROM RWEBFUNDEF WHERE FUNC_NAME = 'PRD011999'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT PLAN_WEEK V1    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_DATE = TO_CHAR(SYSDATE,'yyyymmdd')      AND ROWNUM = 1  
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT DISTINCT PLAN_YEAR||LPAD(PLAN_WEEK,2,'0') AS PLAN_WEEK 
  FROM MWIPCALDEF
 WHERE 1=1 
   AND CALENDAR_ID = 'OTD' 
   AND SYS_YEAR||LPAD(SYS_MONTH,2,'0') = '202004' 
 ORDER BY PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT DISTINCT PLAN_YEAR||LPAD(PLAN_WEEK,2,'0') AS PLAN_WEEK 
  FROM MWIPCALDEF
 WHERE 1=1 
   AND CALENDAR_ID = 'OTD' 
   AND SYS_YEAR||LPAD(SYS_MONTH,2,'0') = '202004' 
   AND SYS_DATE <= '20200403' 
 ORDER BY PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT LANGUAGE_3 FROM RWEBFUNDEF WHERE FUNC_NAME = 'PRD010907'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
SELECT LANGUAGE_3 FROM RWEBFUNDEF WHERE FUNC_NAME = 'PRD010217'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT TO_CHAR(SYSDATE -1 + 2/24, 'YYYYMMDD') AS Y_DAY, SYS_DATE, PLAN_YEAR||LPAD(PLAN_WEEK,2,'0') AS PLAN_WEEK  
  FROM MWIPCALDEF
 WHERE CALENDAR_ID = 'OTD'
   AND SYS_DATE IN (TO_CHAR(SYSDATE + 2/24, 'YYYYMMDD'), TO_CHAR(SYSDATE + 7 + 2/24, 'YYYYMMDD'))

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT TO_CHAR(RNK_IN) AS RNK_IN
     , PART
     , NVL(SOP, 0) - NVL(ISSUE, 0) AS SOP
     , IN_TARGET
     , ISSUE
     , DEF_1
     , DEF_2
     , STOCK
     , CAPA_DA
     , LN_DA
     , ROUND(WIP_PER, 0) AS WIP_PER
     , PLAN_QTY
     , DAY_TARGET
     , ROUND(SOP_PER, 0) AS SOP_PER
     , ROW_NUMBER() OVER (ORDER BY CASE WHEN SOP_PER <= 80 THEN 1 ELSE 2 END, WIP_PER) AS RNK
     , CASE WHEN DEF_2 > 40 THEN 40 
            WHEN DEF_2 < 0 THEN 0
            ELSE DEF_2 
       END AS IN_UNIT
     , MAT_TTL
  FROM (
        SELECT A.PART
             , ROUND(NVL(SOP,0) / 1000,0) AS SOP
             , ROUND(NVL(DAY_TARGET,0) / 1000,0) AS IN_TARGET
             , ROUND(NVL(ISSUE,0) / 1000,0) AS ISSUE
             , ROUND((NVL(DAY_TARGET,0) - NVL(ISSUE,0)) / 1000,0) AS DEF_1
             , ROUND((NVL(DAY_TARGET,0) - NVL(ISSUE,0)) / NET_DIE * 0.9, 0) AS DEF_2
             , ROUND(NVL(STOCK,0) / 1000,0) AS STOCK
             , ROUND(NVL(CAPA_DA,0) / 1000,0) AS CAPA_DA
             , ROUND(NVL(LN_DA,0) / 1000,0) AS LN_DA
             , ROUND(LN_DA / CAPA_DA * 100, 0) AS WIP_PER 
             , ROUND(NVL(PLAN_QTY,0) / 1000,0) AS PLAN_QTY
             , ROUND(NVL(DAY_TARGET,0) / 1000,0) AS DAY_TARGET
             , CASE WHEN DAY_TARGET IS NULL THEN NULL
                    WHEN DAY_TARGET = 0 THEN 0
                    ELSE NVL(PLAN_QTY,0) / DAY_TARGET
               END AS SOP_PER     
             , ROW_NUMBER() OVER(ORDER BY C.EX_TIME) AS RNK_IN 
             , ROUND(NVL(D.MAT_TTL,0) / 1000,0) AS MAT_TTL
          FROM (
                SELECT INP.PART, INP.INPUT, SOP.SOP, SOP.DAY_TARGET, TO_NUMBER(DECODE(NET_DIE,' ',1,NET_DIE)) AS NET_DIE
                  FROM (
                        SELECT PART_NO AS PART
                             , SUM(QTY_1) AS INPUT
                             , MAX(MAT_CMF_13) AS NET_DIE
                          FROM RWIPINPDAT A
                         WHERE FACTORY = 'HMKA1'
                           AND MAT_GRP_3 <> 'COB'
                         GROUP BY PART_NO
                       ) INP
                     , (
                        SELECT PART 
                             , SUM(CASE WHEN CUSTOMER = 'SE' AND GUBUN = ' ' THEN INPUT_SE 
                                        WHEN CUSTOMER <> 'SE' AND GUBUN = ' ' THEN INPUT_ETC 
                                        ELSE 0 END 
                                  ) AS SOP 
                             , SUM(CASE WHEN CUSTOMER = 'SE' AND GUBUN = 'TARGET' THEN INPUT_SE 
                                        WHEN CUSTOMER <> 'SE' AND GUBUN = 'TARGET' THEN INPUT_ETC 
                                        ELSE 0 END 
                                  ) AS DAY_TARGET 
                          FROM (
                                SELECT CUSTOMER, RESV_FIELD_2 AS PART 
                                     , RESV_FIELD_1 AS GUBUN 
                                     , CASE WHEN MAX(INPUT) = 0 THEN MIN(INPUT) ELSE MAX(INPUT) END AS INPUT_SE  
                                     , SUM(INPUT) AS INPUT_ETC 
                                  FROM RSUMOPRREM
                                 WHERE 1=1
                                   AND WORK_DATE = '20200403'
                                   AND INPUT <> 0
                                 GROUP BY CUSTOMER, RESV_FIELD_2, RESV_FIELD_1
                               )
                         GROUP BY PART
                       ) SOP
                 WHERE 1=1
                   AND INP.PART = SOP.PART(+)
               ) A
             , (
                SELECT CASE WHEN MAT_GRP_1 = 'SE' THEN MAT_GRP_1 || ' ' || MAT_GRP_6 || ' ' || MAT_GRP_10 || ' ' || MAT_CMF_11 || ' ' || MAT_GRP_5 
                            ELSE MAT_GRP_1 || ' ' || MAT_GRP_6 || ' ' || MAT_GRP_10 || ' ' || MAT_GRP_7 || ' ' || MAT_GRP_8 || ' ' || MAT_CMF_11 || ' ' || MAT_GRP_5 
                       END AS PART
                     , SUM(WIP.STOCK) AS STOCK
                     , SUM(CAP.CAPA_DA) AS CAPA_DA
                     , SUM(WIP.LN_DA) AS LN_DA
                     , SUM(ISS.ISSUE) AS ISSUE
                     , ROUND(SUM(PLN.PLAN_QTY) / 7, 0) AS PLAN_QTY
                  FROM MWIPMATDEF MAT
                     , (
                        SELECT A.MAT_ID
                             , SUM(DECODE(OPER, 'A0000', QTY_1, 0)) AS STOCK
                             , SUM(CASE WHEN MAT_GRP_5 = '-' AND OPER BETWEEN 'A0020' AND 'A0400' THEN QTY_1
                                        WHEN MAT_GRP_5 = '1st' AND OPER BETWEEN 'A0020' AND 'A0401' THEN QTY_1
                                        WHEN MAT_GRP_5 IN ('2nd', '3rd', '4th', '5th') AND OPER <> 'A0000' THEN QTY_1
                                        ELSE 0
                                   END) AS LN_DA     
                          FROM MWIPMATDEF A
                             , RWIPLOTSTS B
                         WHERE 1=1
                           AND A.FACTORY = B.FACTORY
                           AND A.MAT_ID = B.MAT_ID   
                           AND A.FACTORY = 'HMKA1'
                           AND A.MAT_TYPE = 'FG'
                           AND B.LOT_DEL_FLAG = ' '
                           AND B.LOT_TYPE = 'W'
                         GROUP BY A.MAT_ID
                       ) WIP
                     , (
                        SELECT MAT_ID, SUM(QTY_1) AS ISSUE
                          FROM CWIPLOTEND
                         WHERE 1=1
                           AND FACTORY = 'HMKA1'
                           AND TRAN_TIME BETWEEN '20200402220000' AND '20200403215959' 
                           AND LOT_TYPE = 'W'
                           AND OLD_OPER = 'A0000'
                           AND HIST_DEL_FLAG = ' '           
                         GROUP BY MAT_ID
                       ) ISS
                     , (
                        SELECT RES.MAT_ID     
                             , SUM(NVL(UPH.UPEH,0) * 24 * 0.75 * RES.EQP_CNT) AS CAPA_DA   
                          FROM (  
                                SELECT FACTORY, RES_STS_2 AS MAT_ID, RES_STS_8 AS OPER, RES_GRP_6 AS RES_MODEL, RES_GRP_7 AS UPEH_GRP, COUNT(RES_ID) AS EQP_CNT 
                                  FROM MRASRESDEF 
                                 WHERE 1 = 1  
                                   AND FACTORY  = 'HMKA1' 
                                   AND RES_CMF_9 = 'Y' 
                                   AND DELETE_FLAG = ' ' 
                                   AND RES_STS_8 LIKE 'A040%'
                                 GROUP BY FACTORY,RES_STS_2,RES_STS_8,RES_GRP_6,RES_GRP_7 
                               ) RES 
                             , CRASUPHDEF UPH      
                        WHERE 1 = 1 
                          AND RES.FACTORY = UPH.FACTORY(+)   
                          AND RES.MAT_ID = UPH.MAT_ID(+)  
                          AND RES.OPER = UPH.OPER(+) 
                          AND RES.RES_MODEL = UPH.RES_MODEL(+) 
                          AND RES.UPEH_GRP = UPH.UPEH_GRP(+)   
                        GROUP BY RES.MAT_ID
                        HAVING SUM(NVL(UPH.UPEH,0) * 24 * 0.75 * RES.EQP_CNT) > 0
                       ) CAP
                     , (
                        SELECT MAT_ID, W1_QTY, W2_QTY
                             , CASE WHEN TO_CHAR(TO_DATE('20200403', 'YYYYMMDD'), 'D') IN ('3','4','5','6') THEN W2_QTY
                                    ELSE W1_QTY
                               END PLAN_QTY
                          FROM (
                                SELECT FACTORY, MAT_ID 
                                     , SUM(DECODE(PLAN_WEEK, '202014', WW_QTY, 0)) AS W1_QTY 
                                     , SUM(DECODE(PLAN_WEEK, '202015', WW_QTY, 0)) AS W2_QTY 
                                  FROM RWIPPLNWEK
                                 WHERE 1=1 
                                   AND FACTORY = 'HMKA1' 
                                   AND GUBUN = '3' 
                                   AND PLAN_WEEK IN ('202014','202015')
                                 GROUP BY FACTORY, MAT_ID  
                               ) A     
                         WHERE 1=1
                           AND W1_QTY + W2_QTY > 0
                       ) PLN
                 WHERE 1=1
                   AND MAT.MAT_ID = WIP.MAT_ID(+)
                   AND MAT.MAT_ID = ISS.MAT_ID(+)
                   AND MAT.MAT_ID = CAP.MAT_ID(+)
                   AND MAT.MAT_ID = PLN.MAT_ID(+)
                   AND MAT.FACTORY = 'HMKA1'
                   AND MAT.MAT_TYPE = 'FG'
                   AND MAT.DELETE_FLAG = ' '
                 GROUP BY CASE WHEN MAT_GRP_1 = 'SE' THEN MAT_GRP_1 || ' ' || MAT_GRP_6 || ' ' || MAT_GRP_10 || ' ' || MAT_CMF_11 || ' ' || MAT_GRP_5 
                               ELSE MAT_GRP_1 || ' ' || MAT_GRP_6 || ' ' || MAT_GRP_10 || ' ' || MAT_GRP_7 || ' ' || MAT_GRP_8 || ' ' || MAT_CMF_11 || ' ' || MAT_GRP_5 
                          END
               ) B
             , (
                SELECT A.PART
                     , B.WIP_QTY
                     , ROUND(NVL(B.WIP_QTY,0) / A.UPEH / A.CNT,1) AS EX_TIME     
                     , A.UPEH
                     , A.CNT
                  FROM (
                        SELECT CASE WHEN MAT_GRP_1 = 'SE' THEN MAT_GRP_1 || ' ' || MAT_GRP_6 || ' ' || MAT_GRP_10 || ' ' || MAT_CMF_11 || ' ' || MAT_GRP_5 
                                    ELSE MAT_GRP_1 || ' ' || MAT_GRP_6 || ' ' || MAT_GRP_10 || ' ' || MAT_GRP_7 || ' ' || MAT_GRP_8 || ' ' || MAT_CMF_11 || ' ' || MAT_GRP_5 
                               END AS PART 
                             , MAX(CASE WHEN Z.UPEH IS NOT NULL THEN Z.UPEH
                                        ELSE (SELECT UPEH FROM CRESMSTUPH@RPTTOMES WHERE FACTORY = A.FACTORY AND OPER = 'A0040' AND MODEL = A.RES_GRP_6 AND UPEH_GROUP = A.RES_GRP_7)
                                   END) UPEH
                             , SUM(SUM(1)) OVER(PARTITION BY CASE WHEN MAT_GRP_1 = 'SE' THEN MAT_GRP_1 || ' ' || MAT_GRP_6 || ' ' || MAT_GRP_10 || ' ' || MAT_CMF_11 || ' ' || MAT_GRP_5
                                                                  ELSE MAT_GRP_1 || ' ' || MAT_GRP_6 || ' ' || MAT_GRP_10 || ' ' || MAT_GRP_7 || ' ' || MAT_GRP_8 || ' ' || MAT_CMF_11 || ' ' || MAT_GRP_5
                                                             END) AS CNT
                          FROM MRASRESDEF A
                             , MWIPMATDEF B
                             , CRASUPHDEF Z              
                         WHERE 1=1 
                           AND A.FACTORY = B.FACTORY 
                           AND A.FACTORY = Z.FACTORY(+) 
                           AND A.RES_STS_2 = B.MAT_ID 
                           AND A.RES_STS_2 = Z.MAT_ID(+)           
                           AND A.RES_GRP_6 = Z.RES_MODEL(+) 
                           AND A.RES_GRP_7 = Z.UPEH_GRP(+) 
                           AND Z.OPER(+) = 'A0040' 
                           AND A.FACTORY = 'HMKA1' 
                           AND A.RES_ID LIKE 'BB%' 
                           AND A.RES_CMF_9 = 'Y' 
                           AND A.DELETE_FLAG = ' ' 
                         GROUP BY CASE WHEN MAT_GRP_1 = 'SE' THEN MAT_GRP_1 || ' ' || MAT_GRP_6 || ' ' || MAT_GRP_10 || ' ' || MAT_CMF_11 || ' ' || MAT_GRP_5  
                                       ELSE MAT_GRP_1 || ' ' || MAT_GRP_6 || ' ' || MAT_GRP_10 || ' ' || MAT_GRP_7 || ' ' || MAT_GRP_8 || ' ' || MAT_CMF_11 || ' ' || MAT_GRP_5   
                                  END
                       ) A 
                     , (
                        SELECT CASE WHEN MAT_GRP_1 = 'SE' THEN MAT_GRP_1 || ' ' || MAT_GRP_6 || ' ' || MAT_GRP_10 || ' ' || MAT_CMF_11 || ' ' || MAT_GRP_5 
                                    ELSE MAT_GRP_1 || ' ' || MAT_GRP_6 || ' ' || MAT_GRP_10 || ' ' || MAT_GRP_7 || ' ' || MAT_GRP_8 || ' ' || MAT_CMF_11 || ' ' || MAT_GRP_5 
                               END AS PART 
                             , SUM(B.WIP_QTY) AS WIP_QTY
                          FROM MWIPMATDEF A 
                             , ( 
                                SELECT MAT_ID, SUM(QTY_1) AS WIP_QTY
                                  FROM RWIPLOTSTS 
                                 WHERE 1=1 
                                   AND FACTORY = 'HMKA1' 
                                   AND LOT_TYPE = 'W'
                                   AND LOT_DEL_FLAG = ' ' 
                                   AND OPER BETWEEN 'A0020' AND 'A0040'
                                 GROUP BY MAT_ID 
                               ) B 
                         WHERE 1 = 1 
                           AND A.MAT_ID = B.MAT_ID(+)
                           AND A.FACTORY = 'HMKA1' 
                         GROUP BY CASE WHEN MAT_GRP_1 = 'SE' THEN MAT_GRP_1 || ' ' || MAT_GRP_6 || ' ' || MAT_GRP_10 || ' ' || MAT_CMF_11 || ' ' || MAT_GRP_5  
                                       ELSE MAT_GRP_1 || ' ' || MAT_GRP_6 || ' ' || MAT_GRP_10 || ' ' || MAT_GRP_7 || ' ' || MAT_GRP_8 || ' ' || MAT_CMF_11 || ' ' || MAT_GRP_5   
                                  END 
                        HAVING NVL(SUM(B.WIP_QTY),0) > 0 
                       ) B
                 WHERE 1=1
                   AND A.PART = B.PART(+) 
               ) C
             , (
                SELECT BOM.PART
                     , SUM(NVL(CWIP.INV_QTY,0)) + SUM(NVL(CWIP.INV_L_QTY,0)) + SUM(NVL(WIP.QTY_TTL,0)) AS MAT_TTL
                  FROM (
                        SELECT DISTINCT PART, MATCODE
                          FROM (
                                SELECT PARTNUMBER, OPER, A.MAT_TYPE, MATCODE, DESCRIPT, PAR_BASE_QTY, UNIT_QTY, EDIT_DT     
                                     , DENSE_RANK() OVER(PARTITION BY PARTNUMBER, OPER, A.MAT_TYPE ORDER BY EDIT_DT DESC) AS RNK
                                     , CASE WHEN MAT_GRP_1 = 'SE' THEN MAT_GRP_1 || ' ' || MAT_GRP_6 || ' ' || MAT_GRP_10 || ' ' || MAT_CMF_11 || ' ' || MAT_GRP_5 
                                            ELSE MAT_GRP_1 || ' ' || MAT_GRP_6 || ' ' || MAT_GRP_10 || ' ' || MAT_GRP_7 || ' ' || MAT_GRP_8 || ' ' || MAT_CMF_11 || ' ' || MAT_GRP_5 
                                       END AS PART
                                  FROM (
                                        SELECT PARTNUMBER, STEPID AS OPER, RESV_FIELD_2 AS MAT_TYPE, MATCODE, DESCRIPT, PAR_BASE_QTY, UNIT_QTY
                                             , DECODE(EDIT_DT, ' ', CREATE_DT, EDIT_DT) AS EDIT_DT
                                          FROM CWIPBOMDEF
                                         WHERE 1=1    
                                           AND RESV_FLAG_1 = 'Y'
                                           AND RESV_FIELD_2 IN ('PB','LF') 
                                       ) A
                                     , MWIPMATDEF B
                                 WHERE 1=1
                                   AND A.PARTNUMBER = B.MAT_ID
                                   AND B.FACTORY = 'HMKA1'
                                   AND B.DELETE_FLAG = ' '
                               )
                         WHERE RNK = 1
                       ) BOM 
                     , ( 
                        SELECT MAT_ID 
                             , SUM(DECODE(STORAGE_LOCATION, '1000', QUANTITY, 0)) AS INV_QTY 
                             , SUM(DECODE(STORAGE_LOCATION, '1001', QUANTITY, 0)) AS INV_L_QTY 
                          FROM CWMSLOTSTS@RPTTOMES 
                         WHERE 1=1 
                           AND QUANTITY> 0 
                           AND STORAGE_LOCATION IN ('1000', '1001') 
                         GROUP BY MAT_ID 
                       ) CWIP 
                     , ( 
                        SELECT MAT_ID
                             , SUM(QTY_1) AS QTY_TTL 
                          FROM RWIPLOTSTS 
                         WHERE 1=1  
                           AND FACTORY = 'HMKA1'
                           AND LOT_TYPE != 'W'
                           AND LOT_DEL_FLAG = ' '
                           AND LOT_CMF_2 = '-' 
                           AND LOT_CMF_9 != ' ' 
                           AND QTY_1 > 0 
                           AND OPER NOT IN  ('00001', '00002', 'V0000') 
                         GROUP BY MAT_ID  
                       ) WIP 
                 WHERE 1=1
                   AND BOM.MATCODE = CWIP.MAT_ID(+)
                   AND BOM.MATCODE = WIP.MAT_ID(+)         
                 GROUP BY BOM.PART
                 HAVING SUM(NVL(CWIP.INV_QTY,0)) + SUM(NVL(CWIP.INV_L_QTY,0)) + SUM(NVL(WIP.QTY_TTL,0)) > 0
               ) D
         WHERE 1=1
           AND A.PART = B.PART(+)
           AND A.PART = C.PART(+)
           AND A.PART = D.PART(+)
       )
 ORDER BY TO_NUMBER(RNK_IN ) 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
SELECT LANGUAGE_3 FROM RWEBFUNDEF WHERE FUNC_NAME = 'PRD010218'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT GET_WORK_DATE(TO_CHAR(SYSDATE-1, 'YYYYMMDDHH24MISS'), 'D') AS S_DAY 
     , GET_WORK_DATE(TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'), 'D') AS E_DAY
  FROM DUAL

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT CASE WHEN A.RES_ID BETWEEN 'BB001' AND 'BB004' THEN 'TSK'
            WHEN A.RES_ID BETWEEN 'BB005' AND 'BB009' THEN '8760'
            ELSE '8761'
       END AS MODEL
     , A.RES_ID
     , A.RAS_QTY_2
     , ROUND(A.RAS_QTY_1 / 1000, 0) AS RAS_QTY_1
     , A.TIME_PER
     , A.WF_INCH
     , '' AS WHEEL_1
     , '' AS WHEEL_2
     , CASE WHEN A.GDP IS NOT NULL THEN 'GDP' END AS GDP
     , CASE WHEN A.NCH IS NOT NULL THEN 'NCH' END AS NCH
     , A.TAPE
     , A.PART
     , ROUND(B.WIP_QTY / 1000, 0) AS WIP_QTY
     , ROUND((NVL(C.SOP,0) - NVL(B.END_QTY,0)) / 1000, 0) AS SOP
     , ROUND(C.TARGET / 1000, 0) AS TARGET  
     , ROUND((NVL(C.TARGET,0) - NVL(B.END_QTY,0)) / 1000, 0) AS DEF
     , ROUND(NVL(B.WIP_QTY,0) / A.UPEH / A.CNT,1) AS EX_TIME
     , CASE WHEN NVL(B.BG_WAIT_QTY, 0) = 0 AND (SELECT COUNT(*) FROM RWIPINPDAT WHERE FACTORY = 'HMKA1' AND PART_NO = A.PART) = 0 THEN 'Change'
            ELSE '' END CHANGE
     , D.ARR_1
     , D.ARR_2
     , D.ARR_3
     , ROUND(B.END_QTY / 1000, 0) AS END_QTY
     , ROUND(A.UPEH / 1000, 0) AS UPEH
     , A.CNT
  FROM (
        SELECT A.RES_ID, A.RES_GRP_6, B.MAT_CMF_14 AS WF_INCH
             , C.RAS_QTY_2, C.RAS_QTY_1
             , D.TIME_PER
             , E.GDP, E.NCH
             , F.NORM AS TAPE
             , CASE WHEN MAT_GRP_1 = 'SE' THEN MAT_GRP_1 || ' ' || MAT_GRP_6 || ' ' || MAT_GRP_10 || ' ' || MAT_CMF_11 || ' ' || MAT_GRP_5 
                    ELSE MAT_GRP_1 || ' ' || MAT_GRP_6 || ' ' || MAT_GRP_10 || ' ' || MAT_GRP_7 || ' ' || MAT_GRP_8 || ' ' || MAT_CMF_11 || ' ' || MAT_GRP_5 
               END AS PART 
             , MAX(CASE WHEN Z.UPEH IS NOT NULL THEN Z.UPEH
                        ELSE (SELECT UPEH FROM CRESMSTUPH@RPTTOMES WHERE FACTORY = A.FACTORY AND OPER = 'A0040' AND MODEL = A.RES_GRP_6 AND UPEH_GROUP = A.RES_GRP_7)
                   END) UPEH
             , SUM(SUM(1)) OVER(PARTITION BY CASE WHEN MAT_GRP_1 = 'SE' THEN MAT_GRP_1 || ' ' || MAT_GRP_6 || ' ' || MAT_GRP_10 || ' ' || MAT_CMF_11 || ' ' || MAT_GRP_5
                                                  ELSE MAT_GRP_1 || ' ' || MAT_GRP_6 || ' ' || MAT_GRP_10 || ' ' || MAT_GRP_7 || ' ' || MAT_GRP_8 || ' ' || MAT_CMF_11 || ' ' || MAT_GRP_5
                                             END) AS CNT
          FROM MRASRESDEF A
             , MWIPMATDEF B
             , CRASUPHDEF Z
             , (
                SELECT END_RES_ID AS RES_ID, SUM(QTY_2) AS RAS_QTY_2, SUM(QTY_1) AS RAS_QTY_1 
                  FROM CWIPLOTEND 
                 WHERE 1=1 
                   AND FACTORY = 'HMKA1' 
                   AND TRAN_TIME BETWEEN '20200402220000' AND '20200403215959' 
                   AND LOT_TYPE = 'W' 
                   AND OLD_OPER = 'A0040' 
                   AND HIST_DEL_FLAG = ' ' 
                 GROUP BY END_RES_ID 
               ) C 
             , (
                SELECT RES_ID 
                     , ROUND(DOWN_TIME, 2) AS DOWN_TIME 
                     , ROUND(TTL_TIME, 2) AS TTL_TIME 
                     , ROUND((TTL_TIME - DOWN_TIME) / TTL_TIME * 100, 2) AS TIME_PER 
                  FROM ( 
                        SELECT RES_ID, SUM(TIME_SUM) / 60 AS DOWN_TIME, (SYSDATE - (TRUNC(SYSDATE-1) + 22/24)) * 24 * 60 AS TTL_TIME 
                          FROM CSUMRESMNT@RPTTOMES  
                         WHERE 1=1 
                           AND FACTORY  = 'HMKA1' 
                           AND WORK_DATE = '20200403' 
                           AND RES_ID LIKE 'BB%' 
                         GROUP BY RES_ID 
                       ) 
               ) D 
             , (
                SELECT RES_ID 
                     , MAX(DECODE(TOOL_TYPE, 'GDP WHEEL', TOOL_ID)) AS GDP 
                     , MAX(DECODE(TOOL_TYPE, 'NON CONTACT HAND', TOOL_ID)) AS NCH 
                  FROM CWIPTOLSTS@RPTTOMES 
                 WHERE FACTORY = 'HMKA1' 
                   AND RES_ID LIKE 'BB%' 
                 GROUP BY RES_ID 
               ) E 
             , (
                SELECT A.RES_ID, MAX(C.NORM) AS NORM 
                  FROM CRASRESMAT A 
                     , RWIPLOTSTS B 
                     , CWIPMATDEF@RPTTOMES C 
                 WHERE 1=1 
                   AND A.FACTORY = B.FACTORY 
                   AND B.FACTORY = C.FACTORY 
                   AND A.MAT_LOT_ID = B.LOT_ID 
                   AND B.MAT_ID = C.MAT_ID 
                   AND A.FACTORY = 'HMKA1'
                   AND A.RES_ID LIKE 'BB%'
                   AND B.LOT_TYPE = 'Z'
                   AND C.DELETE_FLAG = ' ' 
                 GROUP BY A.RES_ID 
               ) F 
         WHERE 1=1 
           AND A.FACTORY = B.FACTORY 
           AND A.FACTORY = Z.FACTORY(+) 
           AND A.RES_STS_2 = B.MAT_ID 
           AND A.RES_STS_2 = Z.MAT_ID(+) 
           AND A.RES_ID = C.RES_ID(+) 
           AND A.RES_ID = D.RES_ID(+) 
           AND A.RES_ID = E.RES_ID(+) 
           AND A.RES_ID = F.RES_ID(+) 
           AND A.RES_GRP_6 = Z.RES_MODEL(+) 
           AND A.RES_GRP_7 = Z.UPEH_GRP(+) 
           AND Z.OPER(+) = 'A0040' 
           AND A.FACTORY = 'HMKA1' 
           AND A.RES_ID LIKE 'BB%' 
           AND A.RES_CMF_9 = 'Y' 
           AND A.DELETE_FLAG = ' ' 
         GROUP BY A.RES_ID, A.RES_GRP_6, C.RAS_QTY_2, C.RAS_QTY_1, D.TIME_PER, E.GDP, E.NCH, F.NORM 
                , CASE WHEN MAT_GRP_1 = 'SE' THEN MAT_GRP_1 || ' ' || MAT_GRP_6 || ' ' || MAT_GRP_10 || ' ' || MAT_CMF_11 || ' ' || MAT_GRP_5  
                       ELSE MAT_GRP_1 || ' ' || MAT_GRP_6 || ' ' || MAT_GRP_10 || ' ' || MAT_GRP_7 || ' ' || MAT_GRP_8 || ' ' || MAT_CMF_11 || ' ' || MAT_GRP_5   
                  END, B.MAT_CMF_14  
       ) A 
     , (
        SELECT CASE WHEN MAT_GRP_1 = 'SE' THEN MAT_GRP_1 || ' ' || MAT_GRP_6 || ' ' || MAT_GRP_10 || ' ' || MAT_CMF_11 || ' ' || MAT_GRP_5 
                    ELSE MAT_GRP_1 || ' ' || MAT_GRP_6 || ' ' || MAT_GRP_10 || ' ' || MAT_GRP_7 || ' ' || MAT_GRP_8 || ' ' || MAT_CMF_11 || ' ' || MAT_GRP_5 
               END AS PART 
             , SUM(B.WIP_QTY) AS WIP_QTY
             , SUM(B.BG_WAIT_QTY) AS BG_WAIT_QTY 
             , SUM(C.END_QTY) AS END_QTY 
          FROM MWIPMATDEF A 
             , ( 
                SELECT MAT_ID, SUM(QTY_1) AS WIP_QTY
                     , SUM(CASE WHEN OPER = 'A0040' AND LOT_STATUS = 'WAIT' THEN QTY_1 
                                ELSE 0
                           END) BG_WAIT_QTY 
                  FROM RWIPLOTSTS 
                 WHERE 1=1 
                   AND FACTORY = 'HMKA1' 
                   AND LOT_TYPE = 'W'
                   AND LOT_DEL_FLAG = ' ' 
                   AND OPER BETWEEN 'A0020' AND 'A0040'
                 GROUP BY MAT_ID 
               ) B 
             , ( 
                SELECT MAT_ID, SUM(S1_END_QTY_1+S2_END_QTY_1+S3_END_QTY_1) AS END_QTY 
                  FROM RSUMWIPMOV 
                 WHERE 1=1 
                   AND FACTORY = 'HMKA1' 
                   AND WORK_DATE = '20200403' 
                   AND LOT_TYPE = 'W' 
                   AND OPER = 'A0040' 
                 GROUP BY MAT_ID 
               ) C 
         WHERE 1 = 1 
           AND A.MAT_ID = B.MAT_ID(+)
           AND A.MAT_ID = C.MAT_ID(+) 
           AND A.FACTORY = 'HMKA1' 
         GROUP BY CASE WHEN MAT_GRP_1 = 'SE' THEN MAT_GRP_1 || ' ' || MAT_GRP_6 || ' ' || MAT_GRP_10 || ' ' || MAT_CMF_11 || ' ' || MAT_GRP_5  
                       ELSE MAT_GRP_1 || ' ' || MAT_GRP_6 || ' ' || MAT_GRP_10 || ' ' || MAT_GRP_7 || ' ' || MAT_GRP_8 || ' ' || MAT_CMF_11 || ' ' || MAT_GRP_5   
                  END 
        HAVING NVL(SUM(B.WIP_QTY),0) + NVL(SUM(C.END_QTY),0) > 0 
       ) B
     , (
        SELECT PART 
             , SUM(DECODE(GUBUN, ' ', BG, 0)) AS SOP 
             , SUM(DECODE(GUBUN, 'TARGET', BG, 0)) AS TARGET 
          FROM (
                SELECT RESV_FIELD_2 AS PART 
                     , RESV_FIELD_1 AS GUBUN 
                     , CASE WHEN MAX(BG) = 0 THEN MIN(BG) ELSE MAX(BG) END AS BG  
                  FROM RSUMOPRREM
                 WHERE 1=1
                   AND WORK_DATE = '20200403'
                 GROUP BY RESV_FIELD_2, RESV_FIELD_1
               )
         GROUP BY PART
       ) C
     , (
        SELECT KEY_1 AS RES_ID
             , DATA_1 AS ARR_1
             , DATA_2 AS ARR_2
             , DATA_3 AS ARR_3
          FROM MGCMTBLDAT
         WHERE FACTORY = 'HMKA1' 
           AND TABLE_NAME = 'H_BG_ARRAGE' 
       ) D
 WHERE 1=1
   AND A.PART = B.PART(+)
   AND A.PART = C.PART(+) 
   AND A.RES_ID = D.RES_ID(+) 
 ORDER BY RES_ID

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT A.PART 
     , ROUND(A.WIP_QTY / 1000, 0) AS WIP_QTY
     , ROUND(B.SOP / 1000, 0) AS SOP
     , ROUND(B.TARGET / 1000, 0) AS TARGET
     , ROUND(A.END_QTY / 1000, 0) AS END_QTY
     , ROUND((NVL(B.TARGET, 0) - NVL(A.END_QTY, 0)) / 1000, 0) AS REMAIN
  FROM (
        SELECT CASE WHEN MAT_GRP_1 = 'SE' THEN MAT_GRP_1 || ' ' || MAT_GRP_6 || ' ' || MAT_GRP_10 || ' ' || MAT_CMF_11 || ' ' || MAT_GRP_5 
                    ELSE MAT_GRP_1 || ' ' || MAT_GRP_6 || ' ' || MAT_GRP_10 || ' ' || MAT_GRP_7 || ' ' || MAT_GRP_8 || ' ' || MAT_CMF_11 || ' ' || MAT_GRP_5 
               END AS PART 
             , SUM(WIP.WIP_QTY) AS WIP_QTY 
             , SUM(MOV.END_QTY) AS END_QTY 
          FROM MWIPMATDEF MAT 
             , (
                SELECT MAT_ID, SUM(QTY_1) AS WIP_QTY
                  FROM RWIPLOTSTS
                 WHERE 1=1
                   AND FACTORY = 'HMKA1'
                   AND LOT_TYPE = 'W'
                   AND LOT_DEL_FLAG = ' '
                   AND OPER BETWEEN 'A0020' AND 'A0040'
                   AND LOT_STATUS = 'WAIT'
                 GROUP BY MAT_ID
               ) WIP
             , (
                SELECT MAT_ID, SUM(S1_END_QTY_1+S2_END_QTY_1+S3_END_QTY_1) AS END_QTY
                  FROM RSUMWIPMOV
                 WHERE 1=1
                   AND FACTORY = 'HMKA1'
                   AND WORK_DATE = '20200403'
                   AND LOT_TYPE = 'W'
                   AND OPER = 'A0040'
                 GROUP BY MAT_ID
               ) MOV
         WHERE 1=1
           AND MAT.MAT_ID = WIP.MAT_ID
           AND MAT.MAT_ID = MOV.MAT_ID(+)
           AND MAT.FACTORY = 'HMKA1'
           AND MAT.MAT_TYPE = 'FG'
           AND MAT.DELETE_FLAG = ' '
         GROUP BY CASE WHEN MAT_GRP_1 = 'SE' THEN MAT_GRP_1 || ' ' || MAT_GRP_6 || ' ' || MAT_GRP_10 || ' ' || MAT_CMF_11 || ' ' || MAT_GRP_5 
                       ELSE MAT_GRP_1 || ' ' || MAT_GRP_6 || ' ' || MAT_GRP_10 || ' ' || MAT_GRP_7 || ' ' || MAT_GRP_8 || ' ' || MAT_CMF_11 || ' ' || MAT_GRP_5 
                  END
       ) A
     , (
        SELECT PART
             , SUM(DECODE(GUBUN, ' ', BG, 0)) AS SOP 
             , SUM(DECODE(GUBUN, 'TARGET', BG, 0)) AS TARGET  
          FROM ( 
                SELECT RESV_FIELD_2 AS PART 
                     , RESV_FIELD_1 AS GUBUN 
                     , CASE WHEN MAX(BG) = 0 THEN MIN(BG) ELSE MAX(BG) END AS BG  
                  FROM RSUMOPRREM 
                 WHERE 1=1 
                   AND WORK_DATE = '20200403' 
                 GROUP BY RESV_FIELD_2, RESV_FIELD_1
               ) 
         GROUP BY PART 
       ) B
 WHERE 1=1
   AND A.PART = B.PART(+)
 ORDER BY PART

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT PLAN_WEEK V1    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_DATE = TO_CHAR(SYSDATE,'yyyymmdd')      AND ROWNUM = 1  
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT LANGUAGE_3 FROM RWEBFUNDEF WHERE FUNC_NAME = 'PRD010422'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
SELECT LANGUAGE_3 FROM RWEBFUNDEF WHERE FUNC_NAME = 'PRD011010'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
(SELECT TO_CHAR(LAST_DAY(TO_DATE('202003', 'YYYYMM')),'YYYYMMDD') FROM DUAL)
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
(SELECT TO_CHAR(LAST_DAY(TO_DATE('202004', 'YYYYMM')),'YYYYMMDD') FROM DUAL)
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT MIN(SYS_DATE-1) 
  FROM MWIPCALDEF 
 WHERE 1=1
   AND CALENDAR_ID='SE'
   AND PLAN_YEAR='2020'
   AND PLAN_WEEK=(
                  SELECT PLAN_WEEK 
                    FROM MWIPCALDEF 
                   WHERE 1=1 
                     AND CALENDAR_ID='SE' 
                     AND SYS_DATE=TO_CHAR(TO_DATE('20200401','YYYYMMDD'),'YYYYMMDD')
                 )

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
WITH TEMP_VIEW AS (
SELECT A.MAT_GRP_1 AS CUSTOMER, A.MAT_GRP_9 AS FAMILY, A.MAT_GRP_10 AS PKG,  ' ',  ' ',  ' '
     , DECODE(SEQ, 1, '대수', 2, 'RUN', 3, 'CAPA', 4, 'CHIP', 5, 'MAIN', 6, 'MAIN_M', 7, '실적', 8, 'CAPA 효율') GUBUN, SEQ GUBUN_SEQ 
     , SUM( DECODE( TO_CHAR(SEQ), SUBSTR(GUBUN, 1, 1) , A.DA_TTL, 0 ) ) DA_TTL 
     , SUM( DECODE( TO_CHAR(SEQ), SUBSTR(GUBUN, 1, 1) , A.WB_TTL, 0 ) ) WB_TTL 
     , SUM( DECODE( TO_CHAR(SEQ), SUBSTR(GUBUN, 1, 1) , A.DA1, 0 ) ) DA1 
     , SUM( DECODE( TO_CHAR(SEQ), SUBSTR(GUBUN, 1, 1) , A.DA2, 0 ) ) DA2 
     , SUM( DECODE( TO_CHAR(SEQ), SUBSTR(GUBUN, 1, 1) , A.DA3, 0 ) ) DA3 
     , SUM( DECODE( TO_CHAR(SEQ), SUBSTR(GUBUN, 1, 1) , A.DA4, 0 ) ) DA4 
     , SUM( DECODE( TO_CHAR(SEQ), SUBSTR(GUBUN, 1, 1) , A.DA5, 0 ) ) DA5 
     , SUM( DECODE( TO_CHAR(SEQ), SUBSTR(GUBUN, 1, 1) , A.DA6, 0 ) ) DA6 
     , SUM( DECODE( TO_CHAR(SEQ), SUBSTR(GUBUN, 1, 1) , A.DA7, 0 ) ) DA7 
     , SUM( DECODE( TO_CHAR(SEQ), SUBSTR(GUBUN, 1, 1) , A.DA8, 0 ) ) DA8 
     , SUM( DECODE( TO_CHAR(SEQ), SUBSTR(GUBUN, 1, 1) , A.DA9, 0 ) ) DA9 
     , SUM( DECODE( TO_CHAR(SEQ), SUBSTR(GUBUN, 1, 1) , A.WB1, 0 ) ) WB1 
     , SUM( DECODE( TO_CHAR(SEQ), SUBSTR(GUBUN, 1, 1) , A.WB2, 0 ) ) WB2 
     , SUM( DECODE( TO_CHAR(SEQ), SUBSTR(GUBUN, 1, 1) , A.WB3, 0 ) ) WB3 
     , SUM( DECODE( TO_CHAR(SEQ), SUBSTR(GUBUN, 1, 1) , A.WB4, 0 ) ) WB4 
     , SUM( DECODE( TO_CHAR(SEQ), SUBSTR(GUBUN, 1, 1) , A.WB5, 0 ) ) WB5 
     , SUM( DECODE( TO_CHAR(SEQ), SUBSTR(GUBUN, 1, 1) , A.WB6, 0 ) ) WB6 
     , SUM( DECODE( TO_CHAR(SEQ), SUBSTR(GUBUN, 1, 1) , A.WB7, 0 ) ) WB7 
     , SUM( DECODE( TO_CHAR(SEQ), SUBSTR(GUBUN, 1, 1) , A.WB8, 0 ) ) WB8 
     , SUM( DECODE( TO_CHAR(SEQ), SUBSTR(GUBUN, 1, 1) , A.WB9, 0 ) ) WB9 
  FROM ( 
        SELECT B.MAT_GRP_1,  B.MAT_GRP_2,  B.MAT_GRP_3,  B.MAT_GRP_4,  B.MAT_GRP_5,  B.MAT_GRP_6,  B.MAT_GRP_7,  B.MAT_GRP_8,  B.MAT_GRP_9,  B.MAT_GRP_10,  B.MAT_CMF_10, B.MAT_CMF_11, GUBUN,  DA_TTL, WB_TTL, DA1, WB1, DA2, WB2, DA3, WB3, DA4, WB4, DA5, WB5, DA6, WB6, DA7, WB7, DA8, WB8, DA9, WB9 
          FROM ( 
                SELECT DECODE(V.V_COL,'RES', '1_설비댓수', '2_RUN_CNT') GUBUN, MAT_ID 
                     , SUM( CASE WHEN OPER LIKE 'A040%' THEN  DECODE(V.V_COL,'RES', RES_CNT, RUN_CNT)  ELSE 0  END ) DA_TTL 
                     , SUM( CASE WHEN OPER LIKE 'A060%' THEN  DECODE(V.V_COL,'RES', RES_CNT, RUN_CNT)  ELSE 0  END ) WB_TTL 
                     , SUM( DECODE(OPER, 'A0400', DECODE(V.V_COL,'RES', RES_CNT, RUN_CNT), 'A0401', DECODE(V.V_COL,'RES', RES_CNT, RUN_CNT), 0) ) DA1 
                     , SUM( DECODE(OPER, 'A0600', DECODE(V.V_COL,'RES', RES_CNT, RUN_CNT), 'A0601', DECODE(V.V_COL,'RES', RES_CNT, RUN_CNT), 0)) WB1 
                     , SUM( DECODE(OPER, 'A0402', DECODE(V.V_COL,'RES', RES_CNT, RUN_CNT), 0)) DA2, SUM( DECODE(OPER, 'A0602', DECODE(V.V_COL,'RES', RES_CNT, RUN_CNT), 0)) WB2 
                     , SUM( DECODE(OPER, 'A0403', DECODE(V.V_COL,'RES', RES_CNT, RUN_CNT), 0)) DA3,SUM( DECODE(OPER, 'A0603', DECODE(V.V_COL,'RES', RES_CNT, RUN_CNT), 0)) WB3 
                     , SUM( DECODE(OPER, 'A0404', DECODE(V.V_COL,'RES', RES_CNT, RUN_CNT), 0)) DA4, SUM( DECODE(OPER, 'A0604', DECODE(V.V_COL,'RES', RES_CNT, RUN_CNT), 0)) WB4 
                     , SUM( DECODE(OPER, 'A0405', DECODE(V.V_COL,'RES', RES_CNT, RUN_CNT), 0)) DA5, SUM( DECODE(OPER, 'A0605', DECODE(V.V_COL,'RES', RES_CNT, RUN_CNT), 0)) WB5 
                     , SUM( DECODE(OPER, 'A0406', DECODE(V.V_COL,'RES', RES_CNT, RUN_CNT), 0)) DA6, SUM( DECODE(OPER, 'A0606', DECODE(V.V_COL,'RES', RES_CNT, RUN_CNT), 0)) WB6 
                     , SUM( DECODE(OPER, 'A0407', DECODE(V.V_COL,'RES', RES_CNT, RUN_CNT), 0)) DA7, SUM( DECODE(OPER, 'A0607', DECODE(V.V_COL,'RES', RES_CNT, RUN_CNT), 0)) WB7 
                     , SUM( DECODE(OPER, 'A0408', DECODE(V.V_COL,'RES', RES_CNT, RUN_CNT), 0)) DA8, SUM( DECODE(OPER, 'A0608', DECODE(V.V_COL,'RES', RES_CNT, RUN_CNT), 0)) WB8 
                     , SUM( DECODE(OPER, 'A0409', DECODE(V.V_COL,'RES', RES_CNT, RUN_CNT), 0)) DA9, SUM( DECODE(OPER, 'A0609', DECODE(V.V_COL,'RES', RES_CNT, RUN_CNT), 0)) WB9 
                  FROM ( 
                        SELECT RAS.FACTORY, RAS.RES_STS_2 MAT_ID, RES_GRP_6 RES_MODEL, RES_GRP_7 UPEH_GROUP, RES_STS_8 OPER , COUNT(RES_ID) RES_CNT, NVL(SUM(DECODE(RES_UP_DOWN_FLAG, 'U', DECODE(NVL(LOT.LOT_ID, '-'), '-', 0, 1))), 0)  RUN_CNT 
                          FROM MRASRESDEF_BOH RAS 
                             , ( 
                                SELECT * 
                                  FROM RWIPLOTSTS_BOH LOT 
                                 WHERE LOT.FACTORY = 'HMKA1' 
                                   AND LOT.CUTOFF_DT = '2020040122' 
                                   AND LOT.LOT_TYPE = 'W' AND LOT_DEL_FLAG = ' ' 
                                   AND LOT.LOT_CMF_5 LIKE 'P%' 
                                   AND (LOT.OPER LIKE 'A040%' OR LOT.OPER LIKE 'A060%' ) 
                                   AND LOT.LOT_STATUS = 'PROC' 
                               ) LOT 
                         WHERE RAS.FACTORY = 'HMKA1' 
                           AND RAS.CUTOFF_DT = '2020040122' 
                           AND RAS.FACTORY = LOT.FACTORY(+) 
                           AND RES_ID = LOT.START_RES_ID(+) 
                           AND RES_CMF_9 = 'Y' 
                           AND RES_CMF_7 = 'Y' 
                           AND DELETE_FLAG  = ' ' 
                           AND RES_TYPE  = 'EQUIPMENT' 
                           AND (RES_STS_8 LIKE 'A040%' OR RES_STS_8 LIKE 'A060%' ) 
                           AND (RES_STS_1 NOT IN ('C200', 'B199') OR RES_UP_DOWN_FLAG = 'U') 
                         GROUP BY RAS.FACTORY, RES_STS_2, RES_GRP_6, RES_GRP_7, RES_STS_8 
                       ) 
                     , (SELECT 'RES' V_COL FROM DUAL UNION ALL SELECT 'RUN' FROM DUAL) V 
                 WHERE MAT_ID LIKE '%'
                 GROUP BY  MAT_ID, V.V_COL 
                 UNION ALL 
                SELECT '3_CAPA' GUBUN, MAT_ID 
                     , SUM( CASE WHEN OPER LIKE 'A040%' THEN   RES_CNT * NVL(UPEH,0) * 24 * CONV_RATE  ELSE 0  END ) RES_DA_TTL 
                     , SUM( CASE WHEN  OPER LIKE 'A060%' THEN   RES_CNT * NVL(UPEH,0) * 24 * CONV_RATE  ELSE 0  END ) RES_WB_TTL 
                     , SUM( CASE WHEN OPER IN ( 'A0400',  'A0401' ) THEN  RES_CNT * NVL(UPEH,0) * 24 * CONV_RATE ELSE 0 END ) RES_CNT_DA1 
                     , SUM( CASE WHEN OPER IN ( 'A0600',  'A0601' ) THEN  RES_CNT * NVL(UPEH,0) * 24 * CONV_RATE ELSE 0 END )   RES_CNT_WB1 
                     , SUM( DECODE( OPER, 'A0402',  RES_CNT * NVL(UPEH,0) * 24 * CONV_RATE, 0)) RES_CNT_DA2, SUM( DECODE( OPER, 'A0602', RES_CNT *  NVL(UPEH,0) * 24 * CONV_RATE, 0))  RES_CNT_WB2 
                     , SUM( DECODE( OPER, 'A0403',  RES_CNT * NVL(UPEH,0) * 24 * CONV_RATE, 0)) RES_CNT_DA3, SUM( DECODE( OPER, 'A0603',  RES_CNT * NVL(UPEH,0) * 24 * CONV_RATE, 0))  RES_CNT_WB3 
                     , SUM( DECODE( OPER, 'A0404',  RES_CNT * NVL(UPEH,0) * 24 * CONV_RATE, 0)) RES_CNT_DA4, SUM( DECODE( OPER, 'A0604',  RES_CNT * NVL(UPEH,0) * 24 * CONV_RATE, 0))  RES_CNT_WB4 
                     , SUM( DECODE( OPER, 'A0405',  RES_CNT * NVL(UPEH,0) * 24 * CONV_RATE, 0)) RES_CNT_DA5, SUM( DECODE( OPER, 'A0605',  RES_CNT * NVL(UPEH,0) * 24 * CONV_RATE, 0))  RES_CNT_WB5 
                     , SUM( DECODE( OPER, 'A0406',  RES_CNT * NVL(UPEH,0) * 24 * CONV_RATE, 0)) RES_CNT_DA6, SUM( DECODE( OPER, 'A0606',  RES_CNT * NVL(UPEH,0) * 24 * CONV_RATE, 0))  RES_CNT_WB6 
                     , SUM( DECODE( OPER, 'A0407',  RES_CNT * NVL(UPEH,0) * 24 * CONV_RATE, 0)) RES_CNT_DA7, SUM( DECODE( OPER, 'A0607',  RES_CNT * NVL(UPEH,0) * 24 * CONV_RATE, 0))  RES_CNT_WB7 
                     , SUM( DECODE( OPER, 'A0408',  RES_CNT * NVL(UPEH,0) * 24 * CONV_RATE, 0)) RES_CNT_DA8, SUM( DECODE( OPER, 'A0608',  RES_CNT * NVL(UPEH,0) * 24 * CONV_RATE, 0))  RES_CNT_WB8 
                     , SUM( DECODE( OPER, 'A0409',  RES_CNT * NVL(UPEH,0) * 24 * CONV_RATE, 0)) RES_CNT_DA9, SUM( DECODE( OPER, 'A0609',  RES_CNT * NVL(UPEH,0) * 24 * CONV_RATE, 0))  RES_CNT_WB9 
                  FROM ( 
                        SELECT RAS.FACTORY, RAS.RES_GRP_6 RES_MODEL, RAS.RES_STS_2 MAT_ID, RAS.RES_STS_8 OPER , COUNT(RES_ID) RES_CNT 
                             , MAX(DECODE(SUBSTR(RAS.RES_STS_8, 1, 3), 'A04', NVL(UPEH.UPEH, 0) * 0.68,  NVL(UPEH.UPEH, 0) * 0.71 )  ) UPEH 
                             , 1 CONV_RATE 
                          FROM MRASRESDEF_BOH RAS
                             , CRASUPHDEF UPEH
                             , ( 
                                SELECT MAT_ID, OPER, TCD_CMF_2 AS WIRE_CNT 
                                  FROM CWIPTCDDEF@RPTTOMES 
                                 WHERE FACTORY = 'HMKA1' 
                                   AND OPER LIKE 'A060%' 
                                   AND TCD_CMF_2 <> ' ' 
                                   AND SET_FLAG = 'Y' 
                               ) WIR 
                             , ( 
                                SELECT KEY_1 AS MAT_ID, DATA_1 
                                  FROM MGCMTBLDAT 
                                 WHERE FACTORY = 'HMKA1' 
                                   AND TABLE_NAME IN ('H_SEC_AUTO_LOSS','H_HX_AUTO_LOSS') 
                               ) GCM 
                         WHERE RAS.FACTORY = 'HMKA1' 
                           AND RAS.CUTOFF_DT = '2020040122' 
                           AND RAS.RES_CMF_9 = 'Y' 
                           AND RAS.RES_CMF_7 = 'Y' 
                           AND RAS.DELETE_FLAG  = ' ' 
                           AND RAS.RES_TYPE  = 'EQUIPMENT' 
                           AND (RAS.RES_STS_8 LIKE 'A040%' OR RAS.RES_STS_8 LIKE 'A060%') 
                           AND RAS.RES_STS_2 LIKE '%'
                           AND RAS.FACTORY = UPEH.FACTORY(+) 
                           AND RAS.RES_GRP_6 = UPEH.RES_MODEL(+) 
                           AND RAS.RES_STS_2 = UPEH.MAT_ID(+) 
                           AND RAS.RES_STS_8 = UPEH.OPER(+) 
                           AND RAS.RES_STS_2 = WIR.MAT_ID(+) 
                           AND RAS.RES_STS_8 = WIR.OPER(+) 
                           AND RAS.RES_STS_2 = GCM.MAT_ID(+) 
                           AND (RAS.RES_STS_1 NOT IN ('C200', 'B199') OR RAS.RES_UP_DOWN_FLAG = 'U') 
                         GROUP BY RAS.FACTORY, RAS.RES_GRP_6, RAS.RES_STS_2, RAS.RES_STS_8 
                       ) 
                 GROUP BY MAT_ID 
                 UNION ALL 
                SELECT GUBUN, MAT_ID 
                     , DA_1+DA_2+DA_3+DA_4+DA_5+DA_6+DA_7+DA_8+DA_9 AS DA_WIP_TTL 
                     , WB_1+WB_2+WB_3+WB_4+WB_5+WB_6+WB_7+WB_8+WB_9 AS WB_WIP_TTL 
                     , DA_1 
                     , WB_1 
                     , DA_2 
                     , WB_2 
                     , DA_3 
                     , WB_3 
                     , DA_4 
                     , WB_4 
                     , DA_5 
                     , WB_5 
                     , DA_6 
                     , WB_6 
                     , DA_7 
                     , WB_7 
                     , DA_8 
                     , WB_8 
                     , DA_9 
                     , WB_9 
                  FROM ( 
                        SELECT '6_WIP_MAIN_M' AS GUBUN, LOT.MAT_ID 
                             , SUM(CASE WHEN MAT_GRP_5 IN ('-', '1st') AND OPER IN ('A0250', 'A0400', 'A0401') THEN QTY_1 ELSE 0 END ) DA_1 
                             , SUM(CASE WHEN MAT_GRP_5 IN ('Middle', 'Merge' ) AND OPER = 'A0402' THEN QTY_1 ELSE 0 END ) DA_2 
                             , SUM(CASE WHEN MAT_GRP_5 IN ('Middle 1', 'Merge' ) AND OPER = 'A0403' THEN QTY_1 ELSE 0 END ) DA_3 
                             , SUM(CASE WHEN MAT_GRP_5 IN ('Middle 2', 'Merge' ) AND OPER = 'A0404' THEN QTY_1 ELSE 0 END ) DA_4 
                             , SUM(CASE WHEN MAT_GRP_5 IN ('Middle 3', 'Merge' ) AND OPER = 'A0405' THEN QTY_1 ELSE 0 END ) DA_5 
                             , SUM(CASE WHEN MAT_GRP_5 IN ('Middle 4', 'Merge' ) AND OPER = 'A0406' THEN QTY_1 ELSE 0 END ) DA_6 
                             , SUM(CASE WHEN MAT_GRP_5 IN ('Middle 5', 'Merge' ) AND OPER = 'A0407' THEN QTY_1 ELSE 0 END ) DA_7 
                             , SUM(CASE WHEN MAT_GRP_5 IN ('Middle 6', 'Merge' ) AND OPER = 'A0408' THEN QTY_1 ELSE 0 END ) DA_8 
                             , SUM(CASE WHEN MAT_GRP_5 IN ('Middle 7', 'Merge' ) AND OPER = 'A0409' THEN QTY_1 ELSE 0 END ) DA_9 
                             , SUM(CASE WHEN OPER IN ('A0550', 'A0551', 'A0600', 'A0601') THEN QTY_1 ELSE 0 END ) WB_1 
                             , SUM(CASE WHEN OPER IN ('A0552', 'A0602') THEN QTY_1 ELSE 0 END ) WB_2 
                             , SUM(CASE WHEN OPER IN ('A0553', 'A0603') THEN QTY_1 ELSE 0 END ) WB_3 
                             , SUM(CASE WHEN OPER IN ('A0554', 'A0604') THEN QTY_1 ELSE 0 END ) WB_4 
                             , SUM(CASE WHEN OPER IN ('A0555', 'A0605') THEN QTY_1 ELSE 0 END ) WB_5 
                             , SUM(CASE WHEN OPER IN ('A0556', 'A0606') THEN QTY_1 ELSE 0 END ) WB_6 
                             , SUM(CASE WHEN OPER IN ('A0557', 'A0607') THEN QTY_1 ELSE 0 END ) WB_7 
                             , SUM(CASE WHEN OPER IN ('A0558', 'A0608') THEN QTY_1 ELSE 0 END ) WB_8 
                             , SUM(CASE WHEN OPER IN ('A0559', 'A0609') THEN QTY_1 ELSE 0 END ) WB_9 
                          FROM RWIPLOTSTS_BOH LOT 
                             , VWIPMATDEF MAT 
                         WHERE LOT.CUTOFF_DT = '2020040122' 
                           AND LOT.FACTORY = MAT.FACTORY 
                           AND LOT.MAT_ID = MAT.MAT_ID 
                           AND LOT.FACTORY = 'HMKA1' 
                           AND LOT.LOT_TYPE = 'W' 
                           AND LOT.LOT_CMF_5 LIKE 'P%' 
                           AND LOT.LOT_DEL_FLAG = ' ' 
                           AND MAT.MAT_TYPE = 'FG' 
                           AND MAT.DELETE_FLAG <> 'Y' 
                           AND MAT.MAT_GRP_2 <> '-' 
                           AND LOT.MAT_ID LIKE '%'
                         GROUP BY LOT.MAT_ID 
                       ) 
                 UNION ALL 
                SELECT GUBUN, MAT_ID 
                     , DA_1+DA_2+DA_3+DA_4+DA_5+DA_6+DA_7+DA_8+DA_9 AS DA_WIP_TTL 
                     , 0 AS WB_WIP_TTL 
                     , DA_1 
                     , 0 AS WB_1 
                     , DA_2 
                     , 0 AS WB_2 
                     , DA_3 
                     , 0 AS WB_3 
                     , DA_4 
                     , 0 AS WB_4 
                     , DA_5 
                     , 0 AS WB_5 
                     , DA_6 
                     , 0 AS WB_6 
                     , DA_7 
                     , 0 AS WB_7 
                     , DA_8 
                     , 0 AS WB_8 
                     , DA_9 
                     , 0 AS WB_9 
                  FROM ( 
                        SELECT '5_WIP_MAIN' AS GUBUN, LOT.MAT_ID 
                             , 0 AS DA_1 
                             , SUM(CASE WHEN MAT_GRP_5 = '1st' AND OPER IN ('A0402', 'A0500', 'A0501', 'A0530', 'A0531') THEN QTY_1 ELSE 0 END ) DA_2 
                             , SUM(CASE WHEN MAT_GRP_5 = 'Middle' AND OPER IN ('A0403', 'A0502', 'A0532') THEN QTY_1 ELSE 0 END ) DA_3 
                             , SUM(CASE WHEN MAT_GRP_5 = 'Middle 1' AND OPER IN ('A0404', 'A0503', 'A0533') THEN QTY_1 ELSE 0 END ) DA_4 
                             , SUM(CASE WHEN MAT_GRP_5 = 'Middle 2' AND OPER IN ('A0405', 'A0504', 'A0534') THEN QTY_1 ELSE 0 END ) DA_5 
                             , SUM(CASE WHEN MAT_GRP_5 = 'Middle 3' AND OPER IN ('A0406', 'A0505', 'A0535') THEN QTY_1 ELSE 0 END ) DA_6 
                             , SUM(CASE WHEN MAT_GRP_5 = 'Middle 4' AND OPER IN ('A0407', 'A0506', 'A0536') THEN QTY_1 ELSE 0 END ) DA_7 
                             , SUM(CASE WHEN MAT_GRP_5 = 'Middle 5' AND OPER IN ('A0408', 'A0507', 'A0537') THEN QTY_1 ELSE 0 END ) DA_8 
                             , SUM(CASE WHEN MAT_GRP_5 = 'Middle 6' AND OPER IN ('A0409', 'A0508', 'A0538') THEN QTY_1 ELSE 0 END ) DA_9 
                          FROM RWIPLOTSTS_BOH LOT 
                             , VWIPMATDEF MAT 
                         WHERE LOT.CUTOFF_DT = '2020040122' 
                           AND LOT.FACTORY = MAT.FACTORY 
                           AND LOT.MAT_ID = MAT.MAT_ID 
                           AND LOT.FACTORY = 'HMKA1' 
                           AND LOT.LOT_TYPE = 'W' 
                           AND LOT.LOT_CMF_5 LIKE 'P%' 
                           AND LOT.LOT_DEL_FLAG = ' ' 
                           AND MAT.MAT_TYPE = 'FG' 
                           AND MAT.DELETE_FLAG <> 'Y' 
                           AND MAT.MAT_GRP_2 <> '-' 
                           AND LOT.MAT_ID LIKE '%'
                         GROUP BY LOT.MAT_ID 
                       ) 
                 UNION ALL 
                SELECT '4_WIP_CHIP' GUBUN, MAT_ID 
                     , SUM(QTY_1) AS DA_WIP_TTL 
                     , 0 AS WB_WIP_TTL 
                     , 0 AS DA_1 
                     , 0 AS WB_1 
                     , SUM(CASE WHEN OPER IN ('A0250', 'A0402') AND MAT_GRP_5 = '2nd' THEN QTY_1 ELSE 0 END) AS DA_2 
                     , 0 AS WB_2 
                     , SUM(CASE WHEN OPER IN ('A0250', 'A0403') AND MAT_GRP_5 = '3rd' THEN QTY_1 ELSE 0 END) AS DA_3 
                     , 0 AS WB_3 
                     , SUM(CASE WHEN OPER IN ('A0250', 'A0404') AND MAT_GRP_5 = '4th' THEN QTY_1 ELSE 0 END) AS DA_4 
                     , 0 AS WB_4 
                     , SUM(CASE WHEN OPER IN ('A0250', 'A0405') AND MAT_GRP_5 = '5th' THEN QTY_1 ELSE 0 END) AS DA_5 
                     , 0 AS WB_5 
                     , SUM(CASE WHEN OPER IN ('A0250', 'A0406') AND MAT_GRP_5 = '6th' THEN QTY_1 ELSE 0 END) AS DA_6 
                     , 0 AS WB_6 
                     , SUM(CASE WHEN OPER IN ('A0250', 'A0407') AND MAT_GRP_5 = '7th' THEN QTY_1 ELSE 0 END) AS DA_7 
                     , 0 AS WB_7 
                     , SUM(CASE WHEN OPER IN ('A0250', 'A0408') AND MAT_GRP_5 = '8th' THEN QTY_1 ELSE 0 END) AS DA_8 
                     , 0 AS WB_8 
                     , SUM(CASE WHEN OPER IN ('A0250', 'A0409') AND MAT_GRP_5 = '9th' THEN QTY_1 ELSE 0 END) AS DA_9 
                     , 0 AS WB_9 
                  FROM ( 
                        SELECT A.MAT_ID, A.OPER, B.MAT_GRP_5, A.QTY_1 
                          FROM RWIPLOTSTS_BOH A, MWIPMATDEF B 
                         WHERE A.CUTOFF_DT = '2020040122' 
                           AND A.FACTORY = B.FACTORY 
                           AND A.MAT_ID = B.MAT_ID 
                           AND A.FACTORY = 'HMKA1' 
                           AND A.LOT_TYPE = 'W' 
                           AND A.LOT_CMF_5 LIKE 'P%' 
                           AND A.LOT_DEL_FLAG = ' ' 
                           AND A.OPER IN ('A0250', 'A0402', 'A0403', 'A0404', 'A0405', 'A0406', 'A0407', 'A0408', 'A0409') 
                           AND B.MAT_TYPE = 'FG' 
                           AND B.MAT_GRP_4 NOT IN ('-','FD','FU') 
                           AND B.MAT_GRP_5 IN ( '2nd',  '3rd', '4th', '5th', '6th',  '7th', '8th', '9th') 
                           AND B.DELETE_FLAG <> 'Y' 
                           AND B.MAT_GRP_2 <> '-' 
                       ) 
                 WHERE MAT_ID LIKE '%'
                 GROUP BY MAT_ID 
                 UNION ALL 
                SELECT '7_실적' GUBUN, MAT_ID 
                     , SUM( CASE WHEN OPER LIKE 'A040%' THEN  QTY * CONV_RATE  ELSE 0  END ) DA_RST_TTL ,  SUM( CASE WHEN OPER LIKE 'A060%' THEN  QTY * CONV_RATE  ELSE 0  END ) WB_RST_TTL 
                     , SUM( CASE WHEN OPER IN ( 'A0400', 'A0401') THEN QTY * CONV_RATE  ELSE 0 END ) DA401 , SUM( CASE WHEN OPER IN ( 'A0600', 'A0601') THEN QTY * CONV_RATE ELSE 0 END )  WB601 
                     , SUM(DECODE(OPER, 'A0402', QTY * CONV_RATE,  0)) DA402  , SUM(DECODE(OPER, 'A0602', QTY * CONV_RATE,  0)) WB602 
                     , SUM(DECODE(OPER, 'A0403', QTY * CONV_RATE,  0)) DA403  , SUM(DECODE(OPER, 'A0603', QTY * CONV_RATE,  0)) WB603 
                     , SUM(DECODE(OPER, 'A0404', QTY * CONV_RATE,  0)) DA404  , SUM(DECODE(OPER, 'A0604', QTY * CONV_RATE,  0)) WB604 
                     , SUM(DECODE(OPER, 'A0405', QTY * CONV_RATE,  0)) DA405  , SUM(DECODE(OPER, 'A0605', QTY * CONV_RATE,  0)) WB605 
                     , SUM(DECODE(OPER, 'A0406', QTY * CONV_RATE,  0)) DA406  , SUM(DECODE(OPER, 'A0606', QTY * CONV_RATE,  0)) WB606 
                     , SUM(DECODE(OPER, 'A0407', QTY * CONV_RATE,  0)) DA407  , SUM(DECODE(OPER, 'A0607', QTY * CONV_RATE,  0)) WB607 
                     , SUM(DECODE(OPER, 'A0408', QTY * CONV_RATE,  0)) DA408  , SUM(DECODE(OPER, 'A0608', QTY * CONV_RATE,  0)) WB608 
                     , SUM(DECODE(OPER, 'A0409', QTY * CONV_RATE,  0)) DA409  , SUM(DECODE(OPER, 'A0609', QTY * CONV_RATE,  0)) WB609 
                  FROM ( 
                        SELECT A.MAT_ID, A.OPER, SUM(S1_END_QTY_1 + S2_END_QTY_1 + S3_END_QTY_1 + S1_END_RWK_QTY_1 + S2_END_RWK_QTY_1 + S3_END_RWK_QTY_1 ) QTY 
                             , 1 CONV_RATE 
                          FROM RSUMWIPMOV A 
                             , ( 
                                SELECT MAT_ID, OPER, TCD_CMF_2 AS WIRE_CNT 
                                  FROM CWIPTCDDEF@RPTTOMES 
                                 WHERE FACTORY = 'HMKA1' 
                                   AND OPER LIKE 'A060%' 
                                   AND TCD_CMF_2 <> ' ' 
                                   AND SET_FLAG = 'Y' 
                               ) WIR 
                             , ( 
                                SELECT KEY_1 AS MAT_ID, DATA_1 
                                  FROM MGCMTBLDAT 
                                 WHERE FACTORY = 'HMKA1' 
                                   AND TABLE_NAME IN ('H_SEC_AUTO_LOSS','H_HX_AUTO_LOSS') 
                               ) GCM 
                         WHERE 1=1 
                           AND A.FACTORY  = 'HMKA1' 
                           AND A.MAT_VER  = 1 
                           AND A.WORK_DATE = '20200401'
                           AND A.LOT_TYPE  = 'W' 
                           AND A.MAT_ID LIKE '%'
                           AND ( A.OPER LIKE  'A040%' OR  A.OPER LIKE  'A060%'  ) 
                           AND A.CM_KEY_3 LIKE 'P%' 
                           AND A.MAT_ID = WIR.MAT_ID(+) 
                           AND A.OPER  = WIR.OPER(+) 
                           AND A.MAT_ID = GCM.MAT_ID(+) 
                         GROUP BY A.MAT_ID, A.OPER 
                       ) 
                 GROUP BY MAT_ID 
               ) A 
             , (SELECT * FROM MWIPMATDEF WHERE FACTORY = 'HMKA1'  AND MAT_TYPE = 'FG' AND MAT_VER =  1 AND  DELETE_FLAG <> 'Y' ) B 
         WHERE A.MAT_ID = B.MAT_ID(+) 
       ) A 
     , ( SELECT SEQ FROM HRTDSUMSEQ@RPTTOMES WHERE SEQ <= 8 ) C 
 WHERE 1 = 1 
   AND A.MAT_GRP_1 IS NOT NULL 
 GROUP BY A.MAT_GRP_1, A.MAT_GRP_9, A.MAT_GRP_10,  ' ',  ' ',  ' ' 
        , DECODE(SEQ, 1, '설비대수', 2, 'RUN', 3, 'CAPA', 4, 'CHIP', 5, 'MAIN', 6, 'MAIN_M', 7, '실적', 8, 'CAPA 효율'), SEQ
) 
SELECT (SELECT DATA_1 FROM MGCMTBLDAT@RPTTOMES WHERE FACTORY = 'HMKA1' AND TABLE_NAME = 'H_CUSTOMER' AND KEY_1 = CUSTOMER)  CUSTOMER, FAMILY, PKG,  ' ',  ' ',  ' ' 
     , DECODE(GUBUN_SEQ, 1, '설비', 2, '설비', 3, 'CAPA', 4, '재공', 5, '재공', 6, '재공', 7, '실적', 8, 'CAPA 효율') AS GUBUN0 
     , GUBUN 
     , DECODE(TRIM(TO_CHAR(SUM(DECODE(GUBUN_SEQ, 1, DA_TTL, 2, DA_TTL, DA_TTL/1000)), '999,999,999')),'0','',TRIM(TO_CHAR(SUM(DECODE(GUBUN_SEQ, 1, DA_TTL, 2, DA_TTL, DA_TTL/1000)), '999,999,999'))) AS DA_TTL 
     , DECODE(TRIM(TO_CHAR(SUM(DECODE(GUBUN_SEQ, 1, DA1, 2, DA1, DA1/1000)), '999,999,999')),'0','',TRIM(TO_CHAR(SUM(DECODE(GUBUN_SEQ, 1, DA1, 2, DA1, DA1/1000)), '999,999,999')) ) AS DA1 
     , DECODE(TRIM(TO_CHAR(SUM(DECODE(GUBUN_SEQ, 1, DA2, 2, DA2, DA2/1000)), '999,999,999')),'0','',TRIM(TO_CHAR(SUM(DECODE(GUBUN_SEQ, 1, DA2, 2, DA2, DA2/1000)), '999,999,999')) ) AS DA2 
     , DECODE(TRIM(TO_CHAR(SUM(DECODE(GUBUN_SEQ, 1, DA3, 2, DA3, DA3/1000)), '999,999,999')),'0','',TRIM(TO_CHAR(SUM(DECODE(GUBUN_SEQ, 1, DA3, 2, DA3, DA3/1000)), '999,999,999')) ) AS DA3 
     , DECODE(TRIM(TO_CHAR(SUM(DECODE(GUBUN_SEQ, 1, DA4, 2, DA4, DA4/1000)), '999,999,999')),'0','',TRIM(TO_CHAR(SUM(DECODE(GUBUN_SEQ, 1, DA4, 2, DA4, DA4/1000)), '999,999,999')) ) AS DA4 
     , DECODE(TRIM(TO_CHAR(SUM(DECODE(GUBUN_SEQ, 1, DA5, 2, DA5, DA5/1000)), '999,999,999')),'0','',TRIM(TO_CHAR(SUM(DECODE(GUBUN_SEQ, 1, DA5, 2, DA5, DA5/1000)), '999,999,999')) ) AS DA5 
     , DECODE(TRIM(TO_CHAR(SUM(DECODE(GUBUN_SEQ, 1, DA6, 2, DA6, DA6/1000)), '999,999,999')),'0','',TRIM(TO_CHAR(SUM(DECODE(GUBUN_SEQ, 1, DA6, 2, DA6, DA6/1000)), '999,999,999')) ) AS DA6 
     , DECODE(TRIM(TO_CHAR(SUM(DECODE(GUBUN_SEQ, 1, DA7, 2, DA7, DA7/1000)), '999,999,999')),'0','',TRIM(TO_CHAR(SUM(DECODE(GUBUN_SEQ, 1, DA7, 2, DA7, DA7/1000)), '999,999,999')) ) AS DA7 
     , DECODE(TRIM(TO_CHAR(SUM(DECODE(GUBUN_SEQ, 1, DA8, 2, DA8, DA8/1000)), '999,999,999')),'0','',TRIM(TO_CHAR(SUM(DECODE(GUBUN_SEQ, 1, DA8, 2, DA8, DA8/1000)), '999,999,999')) ) AS DA8 
     , DECODE(TRIM(TO_CHAR(SUM(DECODE(GUBUN_SEQ, 1, DA9, 2, DA9, DA9/1000)), '999,999,999')),'0','',TRIM(TO_CHAR(SUM(DECODE(GUBUN_SEQ, 1, DA9, 2, DA9, DA9/1000)), '999,999,999')) ) AS DA9 
     , DECODE(TRIM(TO_CHAR(SUM(DECODE(GUBUN_SEQ, 1, WB_TTL, 2, WB_TTL, WB_TTL/1000)), '999,999,999')),'0', '',TRIM(TO_CHAR(SUM(DECODE(GUBUN_SEQ, 1, WB_TTL, 2, WB_TTL, WB_TTL/1000)), '999,999,999'))) AS WB_TTL 
     , DECODE(TRIM(TO_CHAR(SUM(DECODE(GUBUN_SEQ, 1, WB1, 2, WB1, WB1/1000)), '999,999,999')),'0','',TRIM(TO_CHAR(SUM(DECODE(GUBUN_SEQ, 1, WB1, 2, WB1, WB1/1000)), '999,999,999'))) AS WB1 
     , DECODE(TRIM(TO_CHAR(SUM(DECODE(GUBUN_SEQ, 1, WB2, 2, WB2, WB2/1000)), '999,999,999')),'0','',TRIM(TO_CHAR(SUM(DECODE(GUBUN_SEQ, 1, WB2, 2, WB2, WB2/1000)), '999,999,999'))) AS WB2 
     , DECODE(TRIM(TO_CHAR(SUM(DECODE(GUBUN_SEQ, 1, WB3, 2, WB3, WB3/1000)), '999,999,999')),'0','',TRIM(TO_CHAR(SUM(DECODE(GUBUN_SEQ, 1, WB3, 2, WB3, WB3/1000)), '999,999,999'))) AS WB3 
     , DECODE(TRIM(TO_CHAR(SUM(DECODE(GUBUN_SEQ, 1, WB4, 2, WB4, WB4/1000)), '999,999,999')),'0','',TRIM(TO_CHAR(SUM(DECODE(GUBUN_SEQ, 1, WB4, 2, WB4, WB4/1000)), '999,999,999'))) AS WB4 
     , DECODE(TRIM(TO_CHAR(SUM(DECODE(GUBUN_SEQ, 1, WB5, 2, WB5, WB5/1000)), '999,999,999')),'0','',TRIM(TO_CHAR(SUM(DECODE(GUBUN_SEQ, 1, WB5, 2, WB5, WB5/1000)), '999,999,999'))) AS WB5 
     , DECODE(TRIM(TO_CHAR(SUM(DECODE(GUBUN_SEQ, 1, WB6, 2, WB6, WB6/1000)), '999,999,999')),'0','',TRIM(TO_CHAR(SUM(DECODE(GUBUN_SEQ, 1, WB6, 2, WB6, WB6/1000)), '999,999,999'))) AS WB6 
     , DECODE(TRIM(TO_CHAR(SUM(DECODE(GUBUN_SEQ, 1, WB7, 2, WB7, WB7/1000)), '999,999,999')),'0','',TRIM(TO_CHAR(SUM(DECODE(GUBUN_SEQ, 1, WB7, 2, WB7, WB7/1000)), '999,999,999'))) AS WB7 
     , DECODE(TRIM(TO_CHAR(SUM(DECODE(GUBUN_SEQ, 1, WB8, 2, WB8, WB8/1000)), '999,999,999')),'0','',TRIM(TO_CHAR(SUM(DECODE(GUBUN_SEQ, 1, WB8, 2, WB8, WB8/1000)), '999,999,999'))) AS WB8 
     , DECODE(TRIM(TO_CHAR(SUM(DECODE(GUBUN_SEQ, 1, WB9, 2, WB9, WB9/1000)), '999,999,999')),'0','',TRIM(TO_CHAR(SUM(DECODE(GUBUN_SEQ, 1, WB9, 2, WB9, WB9/1000)), '999,999,999'))) AS WB9 
  FROM TEMP_VIEW 
 GROUP BY GROUPING SETS((CUSTOMER, FAMILY, PKG, GUBUN, GUBUN_SEQ), (CUSTOMER, FAMILY, GUBUN, GUBUN_SEQ), (CUSTOMER, GUBUN, GUBUN_SEQ), (GUBUN, GUBUN_SEQ) ) 
 ORDER BY DECODE(TEMP_VIEW.CUSTOMER, NULL, 1, 'SE', 2, 'HX', 3, 'IM', 4, 'FC', 5, 6), TEMP_VIEW.CUSTOMER, FAMILY, PKG,GUBUN_SEQ 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT PLAN_WEEK V1    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_DATE = TO_CHAR(SYSDATE,'yyyymmdd')      AND ROWNUM = 1  
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT LANGUAGE_3 FROM RWEBFUNDEF WHERE FUNC_NAME = 'PRD010423'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT A.OPER_GRP, (SELECT TO_NUMBER(DATA_1) FROM MGCMTBLDAT WHERE FACTORY = 'HMKA1' AND TABLE_NAME = 'H_OPER_GRP_TARGET' AND KEY_1 = A.OPER_GRP) AS TARGET,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ' 
     , B.GUBUN
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_0 ELSE WIP_0 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_0 ELSE END_0 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_0 ELSE EXP_0 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_0
                      WHEN B.GUBUN = 'RUN' THEN RUN_0
                 END), 0) AS D0
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_1 ELSE WIP_1 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_1 ELSE END_1 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_1 ELSE EXP_1 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_1
                      WHEN B.GUBUN = 'RUN' THEN RUN_1
                 END), 0) AS D1
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_2 ELSE WIP_2 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_2 ELSE END_2 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_2 ELSE EXP_2 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_2
                      WHEN B.GUBUN = 'RUN' THEN RUN_2
                 END), 0) AS D2
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_3 ELSE WIP_3 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_3 ELSE END_3 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_3 ELSE EXP_3 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_3
                      WHEN B.GUBUN = 'RUN' THEN RUN_3
                 END), 0) AS D3
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_4 ELSE WIP_4 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_4 ELSE END_4 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_4 ELSE EXP_4 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_4
                      WHEN B.GUBUN = 'RUN' THEN RUN_4
                 END), 0) AS D4
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_5 ELSE WIP_5 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_5 ELSE END_5 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_5 ELSE EXP_5 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_5
                      WHEN B.GUBUN = 'RUN' THEN RUN_5
                 END), 0) AS D5
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_6 ELSE WIP_6 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_6 ELSE END_6 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_6 ELSE EXP_6 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_6
                      WHEN B.GUBUN = 'RUN' THEN RUN_6
                 END), 0) AS D6
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_7 ELSE WIP_7 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_7 ELSE END_7 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_7 ELSE EXP_7 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_7
                      WHEN B.GUBUN = 'RUN' THEN RUN_7
                 END), 0) AS D7
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_8 ELSE WIP_8 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_8 ELSE END_8 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_8 ELSE EXP_8 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_8
                      WHEN B.GUBUN = 'RUN' THEN RUN_8
                 END), 0) AS D8
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_9 ELSE WIP_9 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_9 ELSE END_9 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_9 ELSE EXP_9 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_9
                      WHEN B.GUBUN = 'RUN' THEN RUN_9
                 END), 0) AS D9
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_10 ELSE WIP_10 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_10 ELSE END_10 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_10 ELSE EXP_10 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_10
                      WHEN B.GUBUN = 'RUN' THEN RUN_10
                 END), 0) AS D10
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_11 ELSE WIP_11 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_11 ELSE END_11 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_11 ELSE EXP_11 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_11
                      WHEN B.GUBUN = 'RUN' THEN RUN_11
                 END), 0) AS D11
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_12 ELSE WIP_12 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_12 ELSE END_12 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_12 ELSE EXP_12 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_12
                      WHEN B.GUBUN = 'RUN' THEN RUN_12
                 END), 0) AS D12
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_13 ELSE WIP_13 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_13 ELSE END_13 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_13 ELSE EXP_13 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_13
                      WHEN B.GUBUN = 'RUN' THEN RUN_13
                 END), 0) AS D13
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_14 ELSE WIP_14 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_14 ELSE END_14 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_14 ELSE EXP_14 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_14
                      WHEN B.GUBUN = 'RUN' THEN RUN_14
                 END), 0) AS D14
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_15 ELSE WIP_15 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_15 ELSE END_15 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_15 ELSE EXP_15 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_15
                      WHEN B.GUBUN = 'RUN' THEN RUN_15
                 END), 0) AS D15
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_16 ELSE WIP_16 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_16 ELSE END_16 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_16 ELSE EXP_16 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_16
                      WHEN B.GUBUN = 'RUN' THEN RUN_16
                 END), 0) AS D16
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_17 ELSE WIP_17 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_17 ELSE END_17 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_17 ELSE EXP_17 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_17
                      WHEN B.GUBUN = 'RUN' THEN RUN_17
                 END), 0) AS D17
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_18 ELSE WIP_18 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_18 ELSE END_18 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_18 ELSE EXP_18 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_18
                      WHEN B.GUBUN = 'RUN' THEN RUN_18
                 END), 0) AS D18
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_19 ELSE WIP_19 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_19 ELSE END_19 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_19 ELSE EXP_19 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_19
                      WHEN B.GUBUN = 'RUN' THEN RUN_19
                 END), 0) AS D19
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_20 ELSE WIP_20 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_20 ELSE END_20 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_20 ELSE EXP_20 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_20
                      WHEN B.GUBUN = 'RUN' THEN RUN_20
                 END), 0) AS D20
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_21 ELSE WIP_21 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_21 ELSE END_21 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_21 ELSE EXP_21 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_21
                      WHEN B.GUBUN = 'RUN' THEN RUN_21
                 END), 0) AS D21
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_22 ELSE WIP_22 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_22 ELSE END_22 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_22 ELSE EXP_22 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_22
                      WHEN B.GUBUN = 'RUN' THEN RUN_22
                 END), 0) AS D22
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_23 ELSE WIP_23 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_23 ELSE END_23 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_23 ELSE EXP_23 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_23
                      WHEN B.GUBUN = 'RUN' THEN RUN_23
                 END), 0) AS D23
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_24 ELSE WIP_24 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_24 ELSE END_24 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_24 ELSE EXP_24 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_24
                      WHEN B.GUBUN = 'RUN' THEN RUN_24
                 END), 0) AS D24
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_25 ELSE WIP_25 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_25 ELSE END_25 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_25 ELSE EXP_25 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_25
                      WHEN B.GUBUN = 'RUN' THEN RUN_25
                 END), 0) AS D25
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_26 ELSE WIP_26 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_26 ELSE END_26 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_26 ELSE EXP_26 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_26
                      WHEN B.GUBUN = 'RUN' THEN RUN_26
                 END), 0) AS D26
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_27 ELSE WIP_27 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_27 ELSE END_27 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_27 ELSE EXP_27 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_27
                      WHEN B.GUBUN = 'RUN' THEN RUN_27
                 END), 0) AS D27
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_28 ELSE WIP_28 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_28 ELSE END_28 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_28 ELSE EXP_28 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_28
                      WHEN B.GUBUN = 'RUN' THEN RUN_28
                 END), 0) AS D28
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_29 ELSE WIP_29 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_29 ELSE END_29 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_29 ELSE EXP_29 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_29
                      WHEN B.GUBUN = 'RUN' THEN RUN_29
                 END), 0) AS D29
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_30 ELSE WIP_30 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_30 ELSE END_30 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_30 ELSE EXP_30 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_30
                      WHEN B.GUBUN = 'RUN' THEN RUN_30
                 END), 0) AS D30
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_31 ELSE WIP_31 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_31 ELSE END_31 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_31 ELSE EXP_31 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_31
                      WHEN B.GUBUN = 'RUN' THEN RUN_31
                 END), 0) AS D31
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_32 ELSE WIP_32 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_32 ELSE END_32 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_32 ELSE EXP_32 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_32
                      WHEN B.GUBUN = 'RUN' THEN RUN_32
                 END), 0) AS D32
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_33 ELSE WIP_33 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_33 ELSE END_33 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_33 ELSE EXP_33 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_33
                      WHEN B.GUBUN = 'RUN' THEN RUN_33
                 END), 0) AS D33
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_34 ELSE WIP_34 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_34 ELSE END_34 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_34 ELSE EXP_34 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_34
                      WHEN B.GUBUN = 'RUN' THEN RUN_34
                 END), 0) AS D34
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_35 ELSE WIP_35 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_35 ELSE END_35 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_35 ELSE EXP_35 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_35
                      WHEN B.GUBUN = 'RUN' THEN RUN_35
                 END), 0) AS D35
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_36 ELSE WIP_36 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_36 ELSE END_36 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_36 ELSE EXP_36 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_36
                      WHEN B.GUBUN = 'RUN' THEN RUN_36
                 END), 0) AS D36
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_37 ELSE WIP_37 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_37 ELSE END_37 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_37 ELSE EXP_37 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_37
                      WHEN B.GUBUN = 'RUN' THEN RUN_37
                 END), 0) AS D37
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_38 ELSE WIP_38 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_38 ELSE END_38 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_38 ELSE EXP_38 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_38
                      WHEN B.GUBUN = 'RUN' THEN RUN_38
                 END), 0) AS D38
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_39 ELSE WIP_39 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_39 ELSE END_39 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_39 ELSE EXP_39 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_39
                      WHEN B.GUBUN = 'RUN' THEN RUN_39
                 END), 0) AS D39
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_40 ELSE WIP_40 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_40 ELSE END_40 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_40 ELSE EXP_40 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_40
                      WHEN B.GUBUN = 'RUN' THEN RUN_40
                 END), 0) AS D40
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_41 ELSE WIP_41 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_41 ELSE END_41 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_41 ELSE EXP_41 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_41
                      WHEN B.GUBUN = 'RUN' THEN RUN_41
                 END), 0) AS D41
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_42 ELSE WIP_42 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_42 ELSE END_42 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_42 ELSE EXP_42 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_42
                      WHEN B.GUBUN = 'RUN' THEN RUN_42
                 END), 0) AS D42
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_43 ELSE WIP_43 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_43 ELSE END_43 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_43 ELSE EXP_43 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_43
                      WHEN B.GUBUN = 'RUN' THEN RUN_43
                 END), 0) AS D43
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_44 ELSE WIP_44 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_44 ELSE END_44 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_44 ELSE EXP_44 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_44
                      WHEN B.GUBUN = 'RUN' THEN RUN_44
                 END), 0) AS D44
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_45 ELSE WIP_45 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_45 ELSE END_45 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_45 ELSE EXP_45 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_45
                      WHEN B.GUBUN = 'RUN' THEN RUN_45
                 END), 0) AS D45
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_46 ELSE WIP_46 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_46 ELSE END_46 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_46 ELSE EXP_46 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_46
                      WHEN B.GUBUN = 'RUN' THEN RUN_46
                 END), 0) AS D46
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_47 ELSE WIP_47 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_47 ELSE END_47 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_47 ELSE EXP_47 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_47
                      WHEN B.GUBUN = 'RUN' THEN RUN_47
                 END), 0) AS D47
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_48 ELSE WIP_48 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_48 ELSE END_48 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_48 ELSE EXP_48 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_48
                      WHEN B.GUBUN = 'RUN' THEN RUN_48
                 END), 0) AS D48
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_49 ELSE WIP_49 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_49 ELSE END_49 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_49 ELSE EXP_49 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_49
                      WHEN B.GUBUN = 'RUN' THEN RUN_49
                 END), 0) AS D49
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_50 ELSE WIP_50 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_50 ELSE END_50 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_50 ELSE EXP_50 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_50
                      WHEN B.GUBUN = 'RUN' THEN RUN_50
                 END), 0) AS D50
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_51 ELSE WIP_51 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_51 ELSE END_51 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_51 ELSE EXP_51 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_51
                      WHEN B.GUBUN = 'RUN' THEN RUN_51
                 END), 0) AS D51
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_52 ELSE WIP_52 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_52 ELSE END_52 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_52 ELSE EXP_52 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_52
                      WHEN B.GUBUN = 'RUN' THEN RUN_52
                 END), 0) AS D52
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_53 ELSE WIP_53 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_53 ELSE END_53 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_53 ELSE EXP_53 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_53
                      WHEN B.GUBUN = 'RUN' THEN RUN_53
                 END), 0) AS D53
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_54 ELSE WIP_54 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_54 ELSE END_54 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_54 ELSE EXP_54 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_54
                      WHEN B.GUBUN = 'RUN' THEN RUN_54
                 END), 0) AS D54
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_55 ELSE WIP_55 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_55 ELSE END_55 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_55 ELSE EXP_55 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_55
                      WHEN B.GUBUN = 'RUN' THEN RUN_55
                 END), 0) AS D55
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_56 ELSE WIP_56 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_56 ELSE END_56 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_56 ELSE EXP_56 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_56
                      WHEN B.GUBUN = 'RUN' THEN RUN_56
                 END), 0) AS D56
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_57 ELSE WIP_57 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_57 ELSE END_57 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_57 ELSE EXP_57 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_57
                      WHEN B.GUBUN = 'RUN' THEN RUN_57
                 END), 0) AS D57
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_58 ELSE WIP_58 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_58 ELSE END_58 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_58 ELSE EXP_58 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_58
                      WHEN B.GUBUN = 'RUN' THEN RUN_58
                 END), 0) AS D58
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_59 ELSE WIP_59 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_59 ELSE END_59 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_59 ELSE EXP_59 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_59
                      WHEN B.GUBUN = 'RUN' THEN RUN_59
                 END), 0) AS D59
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_60 ELSE WIP_60 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_60 ELSE END_60 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_60 ELSE EXP_60 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_60
                      WHEN B.GUBUN = 'RUN' THEN RUN_60
                 END), 0) AS D60
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_61 ELSE WIP_61 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_61 ELSE END_61 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_61 ELSE EXP_61 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_61
                      WHEN B.GUBUN = 'RUN' THEN RUN_61
                 END), 0) AS D61
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_62 ELSE WIP_62 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_62 ELSE END_62 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_62 ELSE EXP_62 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_62
                      WHEN B.GUBUN = 'RUN' THEN RUN_62
                 END), 0) AS D62
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_63 ELSE WIP_63 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_63 ELSE END_63 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_63 ELSE EXP_63 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_63
                      WHEN B.GUBUN = 'RUN' THEN RUN_63
                 END), 0) AS D63
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_64 ELSE WIP_64 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_64 ELSE END_64 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_64 ELSE EXP_64 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_64
                      WHEN B.GUBUN = 'RUN' THEN RUN_64
                 END), 0) AS D64
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_65 ELSE WIP_65 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_65 ELSE END_65 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_65 ELSE EXP_65 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_65
                      WHEN B.GUBUN = 'RUN' THEN RUN_65
                 END), 0) AS D65
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_66 ELSE WIP_66 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_66 ELSE END_66 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_66 ELSE EXP_66 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_66
                      WHEN B.GUBUN = 'RUN' THEN RUN_66
                 END), 0) AS D66
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_67 ELSE WIP_67 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_67 ELSE END_67 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_67 ELSE EXP_67 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_67
                      WHEN B.GUBUN = 'RUN' THEN RUN_67
                 END), 0) AS D67
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_68 ELSE WIP_68 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_68 ELSE END_68 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_68 ELSE EXP_68 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_68
                      WHEN B.GUBUN = 'RUN' THEN RUN_68
                 END), 0) AS D68
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_69 ELSE WIP_69 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_69 ELSE END_69 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_69 ELSE EXP_69 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_69
                      WHEN B.GUBUN = 'RUN' THEN RUN_69
                 END), 0) AS D69
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_70 ELSE WIP_70 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_70 ELSE END_70 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_70 ELSE EXP_70 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_70
                      WHEN B.GUBUN = 'RUN' THEN RUN_70
                 END), 0) AS D70
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_71 ELSE WIP_71 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_71 ELSE END_71 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_71 ELSE EXP_71 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_71
                      WHEN B.GUBUN = 'RUN' THEN RUN_71
                 END), 0) AS D71
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_72 ELSE WIP_72 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_72 ELSE END_72 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_72 ELSE EXP_72 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_72
                      WHEN B.GUBUN = 'RUN' THEN RUN_72
                 END), 0) AS D72
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_73 ELSE WIP_73 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_73 ELSE END_73 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_73 ELSE EXP_73 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_73
                      WHEN B.GUBUN = 'RUN' THEN RUN_73
                 END), 0) AS D73
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_74 ELSE WIP_74 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_74 ELSE END_74 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_74 ELSE EXP_74 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_74
                      WHEN B.GUBUN = 'RUN' THEN RUN_74
                 END), 0) AS D74
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_75 ELSE WIP_75 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_75 ELSE END_75 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_75 ELSE EXP_75 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_75
                      WHEN B.GUBUN = 'RUN' THEN RUN_75
                 END), 0) AS D75
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_76 ELSE WIP_76 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_76 ELSE END_76 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_76 ELSE EXP_76 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_76
                      WHEN B.GUBUN = 'RUN' THEN RUN_76
                 END), 0) AS D76
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_77 ELSE WIP_77 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_77 ELSE END_77 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_77 ELSE EXP_77 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_77
                      WHEN B.GUBUN = 'RUN' THEN RUN_77
                 END), 0) AS D77
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_78 ELSE WIP_78 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_78 ELSE END_78 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_78 ELSE EXP_78 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_78
                      WHEN B.GUBUN = 'RUN' THEN RUN_78
                 END), 0) AS D78
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_79 ELSE WIP_79 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_79 ELSE END_79 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_79 ELSE EXP_79 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_79
                      WHEN B.GUBUN = 'RUN' THEN RUN_79
                 END), 0) AS D79
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_80 ELSE WIP_80 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_80 ELSE END_80 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_80 ELSE EXP_80 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_80
                      WHEN B.GUBUN = 'RUN' THEN RUN_80
                 END), 0) AS D80
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_81 ELSE WIP_81 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_81 ELSE END_81 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_81 ELSE EXP_81 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_81
                      WHEN B.GUBUN = 'RUN' THEN RUN_81
                 END), 0) AS D81
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_82 ELSE WIP_82 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_82 ELSE END_82 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_82 ELSE EXP_82 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_82
                      WHEN B.GUBUN = 'RUN' THEN RUN_82
                 END), 0) AS D82
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_83 ELSE WIP_83 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_83 ELSE END_83 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_83 ELSE EXP_83 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_83
                      WHEN B.GUBUN = 'RUN' THEN RUN_83
                 END), 0) AS D83
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_84 ELSE WIP_84 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_84 ELSE END_84 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_84 ELSE EXP_84 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_84
                      WHEN B.GUBUN = 'RUN' THEN RUN_84
                 END), 0) AS D84
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_85 ELSE WIP_85 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_85 ELSE END_85 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_85 ELSE EXP_85 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_85
                      WHEN B.GUBUN = 'RUN' THEN RUN_85
                 END), 0) AS D85
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_86 ELSE WIP_86 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_86 ELSE END_86 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_86 ELSE EXP_86 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_86
                      WHEN B.GUBUN = 'RUN' THEN RUN_86
                 END), 0) AS D86
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_87 ELSE WIP_87 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_87 ELSE END_87 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_87 ELSE EXP_87 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_87
                      WHEN B.GUBUN = 'RUN' THEN RUN_87
                 END), 0) AS D87
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_88 ELSE WIP_88 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_88 ELSE END_88 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_88 ELSE EXP_88 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_88
                      WHEN B.GUBUN = 'RUN' THEN RUN_88
                 END), 0) AS D88
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_89 ELSE WIP_89 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_89 ELSE END_89 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_89 ELSE EXP_89 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_89
                      WHEN B.GUBUN = 'RUN' THEN RUN_89
                 END), 0) AS D89
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_90 ELSE WIP_90 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_90 ELSE END_90 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_90 ELSE EXP_90 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_90
                      WHEN B.GUBUN = 'RUN' THEN RUN_90
                 END), 0) AS D90
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_91 ELSE WIP_91 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_91 ELSE END_91 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_91 ELSE EXP_91 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_91
                      WHEN B.GUBUN = 'RUN' THEN RUN_91
                 END), 0) AS D91
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_92 ELSE WIP_92 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_92 ELSE END_92 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_92 ELSE EXP_92 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_92
                      WHEN B.GUBUN = 'RUN' THEN RUN_92
                 END), 0) AS D92
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_93 ELSE WIP_93 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_93 ELSE END_93 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_93 ELSE EXP_93 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_93
                      WHEN B.GUBUN = 'RUN' THEN RUN_93
                 END), 0) AS D93
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_94 ELSE WIP_94 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_94 ELSE END_94 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_94 ELSE EXP_94 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_94
                      WHEN B.GUBUN = 'RUN' THEN RUN_94
                 END), 0) AS D94
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_95 ELSE WIP_95 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_95 ELSE END_95 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_95 ELSE EXP_95 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_95
                      WHEN B.GUBUN = 'RUN' THEN RUN_95
                 END), 0) AS D95
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_96 ELSE WIP_96 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_96 ELSE END_96 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_96 ELSE EXP_96 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_96
                      WHEN B.GUBUN = 'RUN' THEN RUN_96
                 END), 0) AS D96
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_97 ELSE WIP_97 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_97 ELSE END_97 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_97 ELSE EXP_97 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_97
                      WHEN B.GUBUN = 'RUN' THEN RUN_97
                 END), 0) AS D97
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_98 ELSE WIP_98 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_98 ELSE END_98 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_98 ELSE EXP_98 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_98
                      WHEN B.GUBUN = 'RUN' THEN RUN_98
                 END), 0) AS D98
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_99 ELSE WIP_99 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_99 ELSE END_99 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_99 ELSE EXP_99 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_99
                      WHEN B.GUBUN = 'RUN' THEN RUN_99
                 END), 0) AS D99
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_100 ELSE WIP_100 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_100 ELSE END_100 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_100 ELSE EXP_100 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_100
                      WHEN B.GUBUN = 'RUN' THEN RUN_100
                 END), 0) AS D100
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_101 ELSE WIP_101 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_101 ELSE END_101 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_101 ELSE EXP_101 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_101
                      WHEN B.GUBUN = 'RUN' THEN RUN_101
                 END), 0) AS D101
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_102 ELSE WIP_102 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_102 ELSE END_102 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_102 ELSE EXP_102 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_102
                      WHEN B.GUBUN = 'RUN' THEN RUN_102
                 END), 0) AS D102
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_103 ELSE WIP_103 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_103 ELSE END_103 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_103 ELSE EXP_103 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_103
                      WHEN B.GUBUN = 'RUN' THEN RUN_103
                 END), 0) AS D103
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_104 ELSE WIP_104 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_104 ELSE END_104 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_104 ELSE EXP_104 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_104
                      WHEN B.GUBUN = 'RUN' THEN RUN_104
                 END), 0) AS D104
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_105 ELSE WIP_105 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_105 ELSE END_105 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_105 ELSE EXP_105 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_105
                      WHEN B.GUBUN = 'RUN' THEN RUN_105
                 END), 0) AS D105
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_106 ELSE WIP_106 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_106 ELSE END_106 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_106 ELSE EXP_106 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_106
                      WHEN B.GUBUN = 'RUN' THEN RUN_106
                 END), 0) AS D106
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_107 ELSE WIP_107 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_107 ELSE END_107 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_107 ELSE EXP_107 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_107
                      WHEN B.GUBUN = 'RUN' THEN RUN_107
                 END), 0) AS D107
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_108 ELSE WIP_108 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_108 ELSE END_108 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_108 ELSE EXP_108 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_108
                      WHEN B.GUBUN = 'RUN' THEN RUN_108
                 END), 0) AS D108
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_109 ELSE WIP_109 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_109 ELSE END_109 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_109 ELSE EXP_109 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_109
                      WHEN B.GUBUN = 'RUN' THEN RUN_109
                 END), 0) AS D109
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_110 ELSE WIP_110 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_110 ELSE END_110 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_110 ELSE EXP_110 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_110
                      WHEN B.GUBUN = 'RUN' THEN RUN_110
                 END), 0) AS D110
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_111 ELSE WIP_111 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_111 ELSE END_111 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_111 ELSE EXP_111 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_111
                      WHEN B.GUBUN = 'RUN' THEN RUN_111
                 END), 0) AS D111
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_112 ELSE WIP_112 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_112 ELSE END_112 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_112 ELSE EXP_112 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_112
                      WHEN B.GUBUN = 'RUN' THEN RUN_112
                 END), 0) AS D112
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_113 ELSE WIP_113 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_113 ELSE END_113 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_113 ELSE EXP_113 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_113
                      WHEN B.GUBUN = 'RUN' THEN RUN_113
                 END), 0) AS D113
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_114 ELSE WIP_114 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_114 ELSE END_114 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_114 ELSE EXP_114 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_114
                      WHEN B.GUBUN = 'RUN' THEN RUN_114
                 END), 0) AS D114
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_115 ELSE WIP_115 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_115 ELSE END_115 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_115 ELSE EXP_115 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_115
                      WHEN B.GUBUN = 'RUN' THEN RUN_115
                 END), 0) AS D115
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_116 ELSE WIP_116 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_116 ELSE END_116 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_116 ELSE EXP_116 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_116
                      WHEN B.GUBUN = 'RUN' THEN RUN_116
                 END), 0) AS D116
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_117 ELSE WIP_117 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_117 ELSE END_117 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_117 ELSE EXP_117 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_117
                      WHEN B.GUBUN = 'RUN' THEN RUN_117
                 END), 0) AS D117
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_118 ELSE WIP_118 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_118 ELSE END_118 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_118 ELSE EXP_118 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_118
                      WHEN B.GUBUN = 'RUN' THEN RUN_118
                 END), 0) AS D118
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_119 ELSE WIP_119 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_119 ELSE END_119 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_119 ELSE EXP_119 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_119
                      WHEN B.GUBUN = 'RUN' THEN RUN_119
                 END), 0) AS D119
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_120 ELSE WIP_120 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_120 ELSE END_120 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_120 ELSE EXP_120 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_120
                      WHEN B.GUBUN = 'RUN' THEN RUN_120
                 END), 0) AS D120
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_121 ELSE WIP_121 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_121 ELSE END_121 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_121 ELSE EXP_121 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_121
                      WHEN B.GUBUN = 'RUN' THEN RUN_121
                 END), 0) AS D121
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_122 ELSE WIP_122 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_122 ELSE END_122 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_122 ELSE EXP_122 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_122
                      WHEN B.GUBUN = 'RUN' THEN RUN_122
                 END), 0) AS D122
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_123 ELSE WIP_123 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_123 ELSE END_123 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_123 ELSE EXP_123 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_123
                      WHEN B.GUBUN = 'RUN' THEN RUN_123
                 END), 0) AS D123
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_TTL ELSE WIP_TTL / 1000 END)
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_TTL ELSE END_TTL / 1000 END)
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_TTL ELSE EXP_TTL / 1000 END)
                      WHEN B.GUBUN = '설비대수' THEN RES_TTL
                      WHEN B.GUBUN = 'RUN' THEN RUN_TTL
                 END), 0) AS TTL
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_TTL ELSE WIP_TTL / 1000 END)
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_TTL ELSE END_TTL / 1000 END)
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_TTL ELSE EXP_TTL / 1000 END)
                      WHEN B.GUBUN = '설비대수' THEN RES_TTL
                      WHEN B.GUBUN = 'RUN' THEN RUN_TTL
                 END) / 124, 0) AS AVG
  FROM (
        SELECT *
          FROM (
                SELECT *
                  FROM (
                        SELECT A.*
                             , B.*
                             , NVL((SELECT DATA_10 FROM MGCMTBLDAT WHERE TABLE_NAME = 'H_CUSTOMER' AND FACTORY = 'HMKA1' AND  KEY_1 = B.MAT_GRP_1), '-') AS CUST_TYPE
                             , (SELECT KEY_3 FROM MGCMTBLDAT WHERE FACTORY = 'HMKA1' AND TABLE_NAME = 'H_PKG_2D_CMOLD' AND KEY_1 = 'C-MOLD' AND KEY_2 = B.MAT_GRP_1 AND KEY_3 = B.MAT_CMF_11 AND (KEY_4 = '%' OR KEY_4 = B.MAT_ID)) AS KEY_3
                          FROM (
                                SELECT DECODE(LEVEL, 1, 'STOCK', 2, 'LAMI', 3, 'Stealth Saw', 4, 'BG', 5, 'DDS', 6, 'SAW', 7, 'DA(Epoxy)', 8, 'DA(DFN)', 9, 'WB', 10, 'C-MOLD', 11, 'SST', 12, 'HMK3') AS OPER_GRP
                                  FROM DUAL CONNECT BY LEVEL <= 12 
                               ) A 
                             , MWIPMATDEF B 
                         WHERE B.FACTORY = 'HMKA1'
                           AND B.MAT_TYPE = 'FG'
                           AND B.DELETE_FLAG = ' '
                       )
                 WHERE (OPER_GRP <> 'C-MOLD' OR KEY_3 IS NOT NULL)
               ) MAT
             , (
                SELECT MAT_ID AS END_MAT_ID
                     , OPER_GRP AS END_OPER_GRP
                     , SUM(CONV_END_QTY) AS END_TTL
                     , SUM(DECODE(WORK_DATE, '20200403', 0, CONV_END_QTY)) + (SUM(DECODE(WORK_DATE, '20200403', CONV_END_QTY , 0)) / 18.8774417266111 * 24) AS EXP_TTL
                     , SUM(DECODE(WORK_DATE, '20191202', CONV_END_QTY, 0)) AS END_0
                     , SUM(DECODE(WORK_DATE, '20191203', CONV_END_QTY, 0)) AS END_1
                     , SUM(DECODE(WORK_DATE, '20191204', CONV_END_QTY, 0)) AS END_2
                     , SUM(DECODE(WORK_DATE, '20191205', CONV_END_QTY, 0)) AS END_3
                     , SUM(DECODE(WORK_DATE, '20191206', CONV_END_QTY, 0)) AS END_4
                     , SUM(DECODE(WORK_DATE, '20191207', CONV_END_QTY, 0)) AS END_5
                     , SUM(DECODE(WORK_DATE, '20191208', CONV_END_QTY, 0)) AS END_6
                     , SUM(DECODE(WORK_DATE, '20191209', CONV_END_QTY, 0)) AS END_7
                     , SUM(DECODE(WORK_DATE, '20191210', CONV_END_QTY, 0)) AS END_8
                     , SUM(DECODE(WORK_DATE, '20191211', CONV_END_QTY, 0)) AS END_9
                     , SUM(DECODE(WORK_DATE, '20191212', CONV_END_QTY, 0)) AS END_10
                     , SUM(DECODE(WORK_DATE, '20191213', CONV_END_QTY, 0)) AS END_11
                     , SUM(DECODE(WORK_DATE, '20191214', CONV_END_QTY, 0)) AS END_12
                     , SUM(DECODE(WORK_DATE, '20191215', CONV_END_QTY, 0)) AS END_13
                     , SUM(DECODE(WORK_DATE, '20191216', CONV_END_QTY, 0)) AS END_14
                     , SUM(DECODE(WORK_DATE, '20191217', CONV_END_QTY, 0)) AS END_15
                     , SUM(DECODE(WORK_DATE, '20191218', CONV_END_QTY, 0)) AS END_16
                     , SUM(DECODE(WORK_DATE, '20191219', CONV_END_QTY, 0)) AS END_17
                     , SUM(DECODE(WORK_DATE, '20191220', CONV_END_QTY, 0)) AS END_18
                     , SUM(DECODE(WORK_DATE, '20191221', CONV_END_QTY, 0)) AS END_19
                     , SUM(DECODE(WORK_DATE, '20191222', CONV_END_QTY, 0)) AS END_20
                     , SUM(DECODE(WORK_DATE, '20191223', CONV_END_QTY, 0)) AS END_21
                     , SUM(DECODE(WORK_DATE, '20191224', CONV_END_QTY, 0)) AS END_22
                     , SUM(DECODE(WORK_DATE, '20191225', CONV_END_QTY, 0)) AS END_23
                     , SUM(DECODE(WORK_DATE, '20191226', CONV_END_QTY, 0)) AS END_24
                     , SUM(DECODE(WORK_DATE, '20191227', CONV_END_QTY, 0)) AS END_25
                     , SUM(DECODE(WORK_DATE, '20191228', CONV_END_QTY, 0)) AS END_26
                     , SUM(DECODE(WORK_DATE, '20191229', CONV_END_QTY, 0)) AS END_27
                     , SUM(DECODE(WORK_DATE, '20191230', CONV_END_QTY, 0)) AS END_28
                     , SUM(DECODE(WORK_DATE, '20191231', CONV_END_QTY, 0)) AS END_29
                     , SUM(DECODE(WORK_DATE, '20200101', CONV_END_QTY, 0)) AS END_30
                     , SUM(DECODE(WORK_DATE, '20200102', CONV_END_QTY, 0)) AS END_31
                     , SUM(DECODE(WORK_DATE, '20200103', CONV_END_QTY, 0)) AS END_32
                     , SUM(DECODE(WORK_DATE, '20200104', CONV_END_QTY, 0)) AS END_33
                     , SUM(DECODE(WORK_DATE, '20200105', CONV_END_QTY, 0)) AS END_34
                     , SUM(DECODE(WORK_DATE, '20200106', CONV_END_QTY, 0)) AS END_35
                     , SUM(DECODE(WORK_DATE, '20200107', CONV_END_QTY, 0)) AS END_36
                     , SUM(DECODE(WORK_DATE, '20200108', CONV_END_QTY, 0)) AS END_37
                     , SUM(DECODE(WORK_DATE, '20200109', CONV_END_QTY, 0)) AS END_38
                     , SUM(DECODE(WORK_DATE, '20200110', CONV_END_QTY, 0)) AS END_39
                     , SUM(DECODE(WORK_DATE, '20200111', CONV_END_QTY, 0)) AS END_40
                     , SUM(DECODE(WORK_DATE, '20200112', CONV_END_QTY, 0)) AS END_41
                     , SUM(DECODE(WORK_DATE, '20200113', CONV_END_QTY, 0)) AS END_42
                     , SUM(DECODE(WORK_DATE, '20200114', CONV_END_QTY, 0)) AS END_43
                     , SUM(DECODE(WORK_DATE, '20200115', CONV_END_QTY, 0)) AS END_44
                     , SUM(DECODE(WORK_DATE, '20200116', CONV_END_QTY, 0)) AS END_45
                     , SUM(DECODE(WORK_DATE, '20200117', CONV_END_QTY, 0)) AS END_46
                     , SUM(DECODE(WORK_DATE, '20200118', CONV_END_QTY, 0)) AS END_47
                     , SUM(DECODE(WORK_DATE, '20200119', CONV_END_QTY, 0)) AS END_48
                     , SUM(DECODE(WORK_DATE, '20200120', CONV_END_QTY, 0)) AS END_49
                     , SUM(DECODE(WORK_DATE, '20200121', CONV_END_QTY, 0)) AS END_50
                     , SUM(DECODE(WORK_DATE, '20200122', CONV_END_QTY, 0)) AS END_51
                     , SUM(DECODE(WORK_DATE, '20200123', CONV_END_QTY, 0)) AS END_52
                     , SUM(DECODE(WORK_DATE, '20200124', CONV_END_QTY, 0)) AS END_53
                     , SUM(DECODE(WORK_DATE, '20200125', CONV_END_QTY, 0)) AS END_54
                     , SUM(DECODE(WORK_DATE, '20200126', CONV_END_QTY, 0)) AS END_55
                     , SUM(DECODE(WORK_DATE, '20200127', CONV_END_QTY, 0)) AS END_56
                     , SUM(DECODE(WORK_DATE, '20200128', CONV_END_QTY, 0)) AS END_57
                     , SUM(DECODE(WORK_DATE, '20200129', CONV_END_QTY, 0)) AS END_58
                     , SUM(DECODE(WORK_DATE, '20200130', CONV_END_QTY, 0)) AS END_59
                     , SUM(DECODE(WORK_DATE, '20200131', CONV_END_QTY, 0)) AS END_60
                     , SUM(DECODE(WORK_DATE, '20200201', CONV_END_QTY, 0)) AS END_61
                     , SUM(DECODE(WORK_DATE, '20200202', CONV_END_QTY, 0)) AS END_62
                     , SUM(DECODE(WORK_DATE, '20200203', CONV_END_QTY, 0)) AS END_63
                     , SUM(DECODE(WORK_DATE, '20200204', CONV_END_QTY, 0)) AS END_64
                     , SUM(DECODE(WORK_DATE, '20200205', CONV_END_QTY, 0)) AS END_65
                     , SUM(DECODE(WORK_DATE, '20200206', CONV_END_QTY, 0)) AS END_66
                     , SUM(DECODE(WORK_DATE, '20200207', CONV_END_QTY, 0)) AS END_67
                     , SUM(DECODE(WORK_DATE, '20200208', CONV_END_QTY, 0)) AS END_68
                     , SUM(DECODE(WORK_DATE, '20200209', CONV_END_QTY, 0)) AS END_69
                     , SUM(DECODE(WORK_DATE, '20200210', CONV_END_QTY, 0)) AS END_70
                     , SUM(DECODE(WORK_DATE, '20200211', CONV_END_QTY, 0)) AS END_71
                     , SUM(DECODE(WORK_DATE, '20200212', CONV_END_QTY, 0)) AS END_72
                     , SUM(DECODE(WORK_DATE, '20200213', CONV_END_QTY, 0)) AS END_73
                     , SUM(DECODE(WORK_DATE, '20200214', CONV_END_QTY, 0)) AS END_74
                     , SUM(DECODE(WORK_DATE, '20200215', CONV_END_QTY, 0)) AS END_75
                     , SUM(DECODE(WORK_DATE, '20200216', CONV_END_QTY, 0)) AS END_76
                     , SUM(DECODE(WORK_DATE, '20200217', CONV_END_QTY, 0)) AS END_77
                     , SUM(DECODE(WORK_DATE, '20200218', CONV_END_QTY, 0)) AS END_78
                     , SUM(DECODE(WORK_DATE, '20200219', CONV_END_QTY, 0)) AS END_79
                     , SUM(DECODE(WORK_DATE, '20200220', CONV_END_QTY, 0)) AS END_80
                     , SUM(DECODE(WORK_DATE, '20200221', CONV_END_QTY, 0)) AS END_81
                     , SUM(DECODE(WORK_DATE, '20200222', CONV_END_QTY, 0)) AS END_82
                     , SUM(DECODE(WORK_DATE, '20200223', CONV_END_QTY, 0)) AS END_83
                     , SUM(DECODE(WORK_DATE, '20200224', CONV_END_QTY, 0)) AS END_84
                     , SUM(DECODE(WORK_DATE, '20200225', CONV_END_QTY, 0)) AS END_85
                     , SUM(DECODE(WORK_DATE, '20200226', CONV_END_QTY, 0)) AS END_86
                     , SUM(DECODE(WORK_DATE, '20200227', CONV_END_QTY, 0)) AS END_87
                     , SUM(DECODE(WORK_DATE, '20200228', CONV_END_QTY, 0)) AS END_88
                     , SUM(DECODE(WORK_DATE, '20200229', CONV_END_QTY, 0)) AS END_89
                     , SUM(DECODE(WORK_DATE, '20200301', CONV_END_QTY, 0)) AS END_90
                     , SUM(DECODE(WORK_DATE, '20200302', CONV_END_QTY, 0)) AS END_91
                     , SUM(DECODE(WORK_DATE, '20200303', CONV_END_QTY, 0)) AS END_92
                     , SUM(DECODE(WORK_DATE, '20200304', CONV_END_QTY, 0)) AS END_93
                     , SUM(DECODE(WORK_DATE, '20200305', CONV_END_QTY, 0)) AS END_94
                     , SUM(DECODE(WORK_DATE, '20200306', CONV_END_QTY, 0)) AS END_95
                     , SUM(DECODE(WORK_DATE, '20200307', CONV_END_QTY, 0)) AS END_96
                     , SUM(DECODE(WORK_DATE, '20200308', CONV_END_QTY, 0)) AS END_97
                     , SUM(DECODE(WORK_DATE, '20200309', CONV_END_QTY, 0)) AS END_98
                     , SUM(DECODE(WORK_DATE, '20200310', CONV_END_QTY, 0)) AS END_99
                     , SUM(DECODE(WORK_DATE, '20200311', CONV_END_QTY, 0)) AS END_100
                     , SUM(DECODE(WORK_DATE, '20200312', CONV_END_QTY, 0)) AS END_101
                     , SUM(DECODE(WORK_DATE, '20200313', CONV_END_QTY, 0)) AS END_102
                     , SUM(DECODE(WORK_DATE, '20200314', CONV_END_QTY, 0)) AS END_103
                     , SUM(DECODE(WORK_DATE, '20200315', CONV_END_QTY, 0)) AS END_104
                     , SUM(DECODE(WORK_DATE, '20200316', CONV_END_QTY, 0)) AS END_105
                     , SUM(DECODE(WORK_DATE, '20200317', CONV_END_QTY, 0)) AS END_106
                     , SUM(DECODE(WORK_DATE, '20200318', CONV_END_QTY, 0)) AS END_107
                     , SUM(DECODE(WORK_DATE, '20200319', CONV_END_QTY, 0)) AS END_108
                     , SUM(DECODE(WORK_DATE, '20200320', CONV_END_QTY, 0)) AS END_109
                     , SUM(DECODE(WORK_DATE, '20200321', CONV_END_QTY, 0)) AS END_110
                     , SUM(DECODE(WORK_DATE, '20200322', CONV_END_QTY, 0)) AS END_111
                     , SUM(DECODE(WORK_DATE, '20200323', CONV_END_QTY, 0)) AS END_112
                     , SUM(DECODE(WORK_DATE, '20200324', CONV_END_QTY, 0)) AS END_113
                     , SUM(DECODE(WORK_DATE, '20200325', CONV_END_QTY, 0)) AS END_114
                     , SUM(DECODE(WORK_DATE, '20200326', CONV_END_QTY, 0)) AS END_115
                     , SUM(DECODE(WORK_DATE, '20200327', CONV_END_QTY, 0)) AS END_116
                     , SUM(DECODE(WORK_DATE, '20200328', CONV_END_QTY, 0)) AS END_117
                     , SUM(DECODE(WORK_DATE, '20200329', CONV_END_QTY, 0)) AS END_118
                     , SUM(DECODE(WORK_DATE, '20200330', CONV_END_QTY, 0)) AS END_119
                     , SUM(DECODE(WORK_DATE, '20200331', CONV_END_QTY, 0)) AS END_120
                     , SUM(DECODE(WORK_DATE, '20200401', CONV_END_QTY, 0)) AS END_121
                     , SUM(DECODE(WORK_DATE, '20200402', CONV_END_QTY, 0)) AS END_122
                     , SUM(DECODE(WORK_DATE, '20200403', CONV_END_QTY, 0)) AS END_123
                     , SUM(DECODE(WORK_DATE, '20191202', CONV_END_QTY, 0)) AS EXP_0
                     , SUM(DECODE(WORK_DATE, '20191203', CONV_END_QTY, 0)) AS EXP_1
                     , SUM(DECODE(WORK_DATE, '20191204', CONV_END_QTY, 0)) AS EXP_2
                     , SUM(DECODE(WORK_DATE, '20191205', CONV_END_QTY, 0)) AS EXP_3
                     , SUM(DECODE(WORK_DATE, '20191206', CONV_END_QTY, 0)) AS EXP_4
                     , SUM(DECODE(WORK_DATE, '20191207', CONV_END_QTY, 0)) AS EXP_5
                     , SUM(DECODE(WORK_DATE, '20191208', CONV_END_QTY, 0)) AS EXP_6
                     , SUM(DECODE(WORK_DATE, '20191209', CONV_END_QTY, 0)) AS EXP_7
                     , SUM(DECODE(WORK_DATE, '20191210', CONV_END_QTY, 0)) AS EXP_8
                     , SUM(DECODE(WORK_DATE, '20191211', CONV_END_QTY, 0)) AS EXP_9
                     , SUM(DECODE(WORK_DATE, '20191212', CONV_END_QTY, 0)) AS EXP_10
                     , SUM(DECODE(WORK_DATE, '20191213', CONV_END_QTY, 0)) AS EXP_11
                     , SUM(DECODE(WORK_DATE, '20191214', CONV_END_QTY, 0)) AS EXP_12
                     , SUM(DECODE(WORK_DATE, '20191215', CONV_END_QTY, 0)) AS EXP_13
                     , SUM(DECODE(WORK_DATE, '20191216', CONV_END_QTY, 0)) AS EXP_14
                     , SUM(DECODE(WORK_DATE, '20191217', CONV_END_QTY, 0)) AS EXP_15
                     , SUM(DECODE(WORK_DATE, '20191218', CONV_END_QTY, 0)) AS EXP_16
                     , SUM(DECODE(WORK_DATE, '20191219', CONV_END_QTY, 0)) AS EXP_17
                     , SUM(DECODE(WORK_DATE, '20191220', CONV_END_QTY, 0)) AS EXP_18
                     , SUM(DECODE(WORK_DATE, '20191221', CONV_END_QTY, 0)) AS EXP_19
                     , SUM(DECODE(WORK_DATE, '20191222', CONV_END_QTY, 0)) AS EXP_20
                     , SUM(DECODE(WORK_DATE, '20191223', CONV_END_QTY, 0)) AS EXP_21
                     , SUM(DECODE(WORK_DATE, '20191224', CONV_END_QTY, 0)) AS EXP_22
                     , SUM(DECODE(WORK_DATE, '20191225', CONV_END_QTY, 0)) AS EXP_23
                     , SUM(DECODE(WORK_DATE, '20191226', CONV_END_QTY, 0)) AS EXP_24
                     , SUM(DECODE(WORK_DATE, '20191227', CONV_END_QTY, 0)) AS EXP_25
                     , SUM(DECODE(WORK_DATE, '20191228', CONV_END_QTY, 0)) AS EXP_26
                     , SUM(DECODE(WORK_DATE, '20191229', CONV_END_QTY, 0)) AS EXP_27
                     , SUM(DECODE(WORK_DATE, '20191230', CONV_END_QTY, 0)) AS EXP_28
                     , SUM(DECODE(WORK_DATE, '20191231', CONV_END_QTY, 0)) AS EXP_29
                     , SUM(DECODE(WORK_DATE, '20200101', CONV_END_QTY, 0)) AS EXP_30
                     , SUM(DECODE(WORK_DATE, '20200102', CONV_END_QTY, 0)) AS EXP_31
                     , SUM(DECODE(WORK_DATE, '20200103', CONV_END_QTY, 0)) AS EXP_32
                     , SUM(DECODE(WORK_DATE, '20200104', CONV_END_QTY, 0)) AS EXP_33
                     , SUM(DECODE(WORK_DATE, '20200105', CONV_END_QTY, 0)) AS EXP_34
                     , SUM(DECODE(WORK_DATE, '20200106', CONV_END_QTY, 0)) AS EXP_35
                     , SUM(DECODE(WORK_DATE, '20200107', CONV_END_QTY, 0)) AS EXP_36
                     , SUM(DECODE(WORK_DATE, '20200108', CONV_END_QTY, 0)) AS EXP_37
                     , SUM(DECODE(WORK_DATE, '20200109', CONV_END_QTY, 0)) AS EXP_38
                     , SUM(DECODE(WORK_DATE, '20200110', CONV_END_QTY, 0)) AS EXP_39
                     , SUM(DECODE(WORK_DATE, '20200111', CONV_END_QTY, 0)) AS EXP_40
                     , SUM(DECODE(WORK_DATE, '20200112', CONV_END_QTY, 0)) AS EXP_41
                     , SUM(DECODE(WORK_DATE, '20200113', CONV_END_QTY, 0)) AS EXP_42
                     , SUM(DECODE(WORK_DATE, '20200114', CONV_END_QTY, 0)) AS EXP_43
                     , SUM(DECODE(WORK_DATE, '20200115', CONV_END_QTY, 0)) AS EXP_44
                     , SUM(DECODE(WORK_DATE, '20200116', CONV_END_QTY, 0)) AS EXP_45
                     , SUM(DECODE(WORK_DATE, '20200117', CONV_END_QTY, 0)) AS EXP_46
                     , SUM(DECODE(WORK_DATE, '20200118', CONV_END_QTY, 0)) AS EXP_47
                     , SUM(DECODE(WORK_DATE, '20200119', CONV_END_QTY, 0)) AS EXP_48
                     , SUM(DECODE(WORK_DATE, '20200120', CONV_END_QTY, 0)) AS EXP_49
                     , SUM(DECODE(WORK_DATE, '20200121', CONV_END_QTY, 0)) AS EXP_50
                     , SUM(DECODE(WORK_DATE, '20200122', CONV_END_QTY, 0)) AS EXP_51
                     , SUM(DECODE(WORK_DATE, '20200123', CONV_END_QTY, 0)) AS EXP_52
                     , SUM(DECODE(WORK_DATE, '20200124', CONV_END_QTY, 0)) AS EXP_53
                     , SUM(DECODE(WORK_DATE, '20200125', CONV_END_QTY, 0)) AS EXP_54
                     , SUM(DECODE(WORK_DATE, '20200126', CONV_END_QTY, 0)) AS EXP_55
                     , SUM(DECODE(WORK_DATE, '20200127', CONV_END_QTY, 0)) AS EXP_56
                     , SUM(DECODE(WORK_DATE, '20200128', CONV_END_QTY, 0)) AS EXP_57
                     , SUM(DECODE(WORK_DATE, '20200129', CONV_END_QTY, 0)) AS EXP_58
                     , SUM(DECODE(WORK_DATE, '20200130', CONV_END_QTY, 0)) AS EXP_59
                     , SUM(DECODE(WORK_DATE, '20200131', CONV_END_QTY, 0)) AS EXP_60
                     , SUM(DECODE(WORK_DATE, '20200201', CONV_END_QTY, 0)) AS EXP_61
                     , SUM(DECODE(WORK_DATE, '20200202', CONV_END_QTY, 0)) AS EXP_62
                     , SUM(DECODE(WORK_DATE, '20200203', CONV_END_QTY, 0)) AS EXP_63
                     , SUM(DECODE(WORK_DATE, '20200204', CONV_END_QTY, 0)) AS EXP_64
                     , SUM(DECODE(WORK_DATE, '20200205', CONV_END_QTY, 0)) AS EXP_65
                     , SUM(DECODE(WORK_DATE, '20200206', CONV_END_QTY, 0)) AS EXP_66
                     , SUM(DECODE(WORK_DATE, '20200207', CONV_END_QTY, 0)) AS EXP_67
                     , SUM(DECODE(WORK_DATE, '20200208', CONV_END_QTY, 0)) AS EXP_68
                     , SUM(DECODE(WORK_DATE, '20200209', CONV_END_QTY, 0)) AS EXP_69
                     , SUM(DECODE(WORK_DATE, '20200210', CONV_END_QTY, 0)) AS EXP_70
                     , SUM(DECODE(WORK_DATE, '20200211', CONV_END_QTY, 0)) AS EXP_71
                     , SUM(DECODE(WORK_DATE, '20200212', CONV_END_QTY, 0)) AS EXP_72
                     , SUM(DECODE(WORK_DATE, '20200213', CONV_END_QTY, 0)) AS EXP_73
                     , SUM(DECODE(WORK_DATE, '20200214', CONV_END_QTY, 0)) AS EXP_74
                     , SUM(DECODE(WORK_DATE, '20200215', CONV_END_QTY, 0)) AS EXP_75
                     , SUM(DECODE(WORK_DATE, '20200216', CONV_END_QTY, 0)) AS EXP_76
                     , SUM(DECODE(WORK_DATE, '20200217', CONV_END_QTY, 0)) AS EXP_77
                     , SUM(DECODE(WORK_DATE, '20200218', CONV_END_QTY, 0)) AS EXP_78
                     , SUM(DECODE(WORK_DATE, '20200219', CONV_END_QTY, 0)) AS EXP_79
                     , SUM(DECODE(WORK_DATE, '20200220', CONV_END_QTY, 0)) AS EXP_80
                     , SUM(DECODE(WORK_DATE, '20200221', CONV_END_QTY, 0)) AS EXP_81
                     , SUM(DECODE(WORK_DATE, '20200222', CONV_END_QTY, 0)) AS EXP_82
                     , SUM(DECODE(WORK_DATE, '20200223', CONV_END_QTY, 0)) AS EXP_83
                     , SUM(DECODE(WORK_DATE, '20200224', CONV_END_QTY, 0)) AS EXP_84
                     , SUM(DECODE(WORK_DATE, '20200225', CONV_END_QTY, 0)) AS EXP_85
                     , SUM(DECODE(WORK_DATE, '20200226', CONV_END_QTY, 0)) AS EXP_86
                     , SUM(DECODE(WORK_DATE, '20200227', CONV_END_QTY, 0)) AS EXP_87
                     , SUM(DECODE(WORK_DATE, '20200228', CONV_END_QTY, 0)) AS EXP_88
                     , SUM(DECODE(WORK_DATE, '20200229', CONV_END_QTY, 0)) AS EXP_89
                     , SUM(DECODE(WORK_DATE, '20200301', CONV_END_QTY, 0)) AS EXP_90
                     , SUM(DECODE(WORK_DATE, '20200302', CONV_END_QTY, 0)) AS EXP_91
                     , SUM(DECODE(WORK_DATE, '20200303', CONV_END_QTY, 0)) AS EXP_92
                     , SUM(DECODE(WORK_DATE, '20200304', CONV_END_QTY, 0)) AS EXP_93
                     , SUM(DECODE(WORK_DATE, '20200305', CONV_END_QTY, 0)) AS EXP_94
                     , SUM(DECODE(WORK_DATE, '20200306', CONV_END_QTY, 0)) AS EXP_95
                     , SUM(DECODE(WORK_DATE, '20200307', CONV_END_QTY, 0)) AS EXP_96
                     , SUM(DECODE(WORK_DATE, '20200308', CONV_END_QTY, 0)) AS EXP_97
                     , SUM(DECODE(WORK_DATE, '20200309', CONV_END_QTY, 0)) AS EXP_98
                     , SUM(DECODE(WORK_DATE, '20200310', CONV_END_QTY, 0)) AS EXP_99
                     , SUM(DECODE(WORK_DATE, '20200311', CONV_END_QTY, 0)) AS EXP_100
                     , SUM(DECODE(WORK_DATE, '20200312', CONV_END_QTY, 0)) AS EXP_101
                     , SUM(DECODE(WORK_DATE, '20200313', CONV_END_QTY, 0)) AS EXP_102
                     , SUM(DECODE(WORK_DATE, '20200314', CONV_END_QTY, 0)) AS EXP_103
                     , SUM(DECODE(WORK_DATE, '20200315', CONV_END_QTY, 0)) AS EXP_104
                     , SUM(DECODE(WORK_DATE, '20200316', CONV_END_QTY, 0)) AS EXP_105
                     , SUM(DECODE(WORK_DATE, '20200317', CONV_END_QTY, 0)) AS EXP_106
                     , SUM(DECODE(WORK_DATE, '20200318', CONV_END_QTY, 0)) AS EXP_107
                     , SUM(DECODE(WORK_DATE, '20200319', CONV_END_QTY, 0)) AS EXP_108
                     , SUM(DECODE(WORK_DATE, '20200320', CONV_END_QTY, 0)) AS EXP_109
                     , SUM(DECODE(WORK_DATE, '20200321', CONV_END_QTY, 0)) AS EXP_110
                     , SUM(DECODE(WORK_DATE, '20200322', CONV_END_QTY, 0)) AS EXP_111
                     , SUM(DECODE(WORK_DATE, '20200323', CONV_END_QTY, 0)) AS EXP_112
                     , SUM(DECODE(WORK_DATE, '20200324', CONV_END_QTY, 0)) AS EXP_113
                     , SUM(DECODE(WORK_DATE, '20200325', CONV_END_QTY, 0)) AS EXP_114
                     , SUM(DECODE(WORK_DATE, '20200326', CONV_END_QTY, 0)) AS EXP_115
                     , SUM(DECODE(WORK_DATE, '20200327', CONV_END_QTY, 0)) AS EXP_116
                     , SUM(DECODE(WORK_DATE, '20200328', CONV_END_QTY, 0)) AS EXP_117
                     , SUM(DECODE(WORK_DATE, '20200329', CONV_END_QTY, 0)) AS EXP_118
                     , SUM(DECODE(WORK_DATE, '20200330', CONV_END_QTY, 0)) AS EXP_119
                     , SUM(DECODE(WORK_DATE, '20200331', CONV_END_QTY, 0)) AS EXP_120
                     , SUM(DECODE(WORK_DATE, '20200401', CONV_END_QTY, 0)) AS EXP_121
                     , SUM(DECODE(WORK_DATE, '20200402', CONV_END_QTY, 0)) AS EXP_122
                     , SUM(DECODE(WORK_DATE, '20200403', CONV_END_QTY, 0)) / 18.8774417266111 * 24 AS EXP_123
                  FROM (
                        SELECT A.MAT_ID
                             , A.WORK_DATE
                             , CASE WHEN A.OPER = 'A0033' THEN 'Stealth Saw'
                                    WHEN A.OPER IN ('A0040', 'A0030') THEN 'BG'
                                    WHEN A.OPER = 'A0230' THEN 'DDS'
                                    WHEN A.OPER = 'A1000' THEN 'C-MOLD'
                                    WHEN A.OPER LIKE 'A060%' THEN 'WB'
                                    WHEN A.OPER IN ('A1750', 'A1825') THEN 'SST'
                                    WHEN A.OPER = 'A0200' THEN 'SAW'
                                    WHEN A.OPER LIKE 'A040%' AND B.MAT_GRP_2 = 'DFN' THEN 'DA(DFN)'
                                    WHEN A.OPER LIKE 'A040%' AND E.DA_TYPE = 'Epoxy' THEN 'DA(Epoxy)'
                                    WHEN A.OPER = 'A0000' THEN 'STOCK'
                                    WHEN A.OPER = 'A0020' THEN 'LAMI'
                                    WHEN A.OPER = 'AZ010' THEN 'HMK3'
                                    ELSE ''
                               END OPER_GRP
                             , CASE WHEN A.OPER = 'AZ010' THEN DECODE(B.MAT_GRP_3, 'COB', 0, 'BGN', 0, (S1_MOVE_QTY_1+S2_MOVE_QTY_1+S3_MOVE_QTY_1))
                                    WHEN A.OPER = 'A0000' THEN (S1_OPER_IN_QTY_1+S2_OPER_IN_QTY_1+S3_OPER_IN_QTY_1)
                                    ELSE (S1_END_QTY_1+S2_END_QTY_1+S3_END_QTY_1)
                               END AS END_QTY
                             , CASE WHEN A.OPER = 'A0000' THEN (S1_OPER_IN_QTY_2+S2_OPER_IN_QTY_2+S3_OPER_IN_QTY_2)
                                    WHEN A.OPER IN ('A0033', 'A0040', 'A0230', 'A0030', 'A0200', 'A0020') THEN (S1_END_QTY_2+S2_END_QTY_2+S3_END_QTY_2)
                                    WHEN A.OPER LIKE 'A040%' AND B.MAT_ID LIKE 'SEK%' THEN (S1_END_QTY_1+S2_END_QTY_1+S3_END_QTY_1) * NVL(C.DATA_1,1)
                                    WHEN A.OPER LIKE 'A040%' AND (B.MAT_GRP_5 IN ('1st', 'Merge') OR B.MAT_GRP_5 LIKE 'Middle%') THEN (S1_END_QTY_1+S2_END_QTY_1+S3_END_QTY_1) * NVL(C.DATA_1,1)
                                    WHEN A.OPER LIKE 'A060%' THEN (S1_END_QTY_1+S2_END_QTY_1+S3_END_QTY_1) * (CASE WHEN D.WIRE_CNT IS NOT NULL THEN D.WIRE_CNT
                                                                                           WHEN B.MAT_GRP_6 NOT IN ('-','0') THEN B.MAT_GRP_6
                                                                                           ELSE '1' END)
                                    WHEN A.OPER = 'AZ010' THEN DECODE(B.MAT_GRP_3, 'COB', 0, 'BGN', 0, (S1_MOVE_QTY_1+S2_MOVE_QTY_1+S3_MOVE_QTY_1))
                                    ELSE (S1_END_QTY_1+S2_END_QTY_1+S3_END_QTY_1)
                               END AS CONV_END_QTY
                          FROM RSUMWIPMOV A
                             , MWIPMATDEF B
                             , (
                                SELECT KEY_1 AS MAT_ID, DATA_1
                                  FROM MGCMTBLDAT 
                                 WHERE FACTORY = 'HMKA1'
                                   AND TABLE_NAME IN ('H_SEC_AUTO_LOSS','H_HX_AUTO_LOSS')
                               ) C
                             , (
                                SELECT MAT_ID, OPER, TCD_CMF_2 AS WIRE_CNT
                                  FROM CWIPTCDDEF@RPTTOMES 
                                 WHERE FACTORY = 'HMKA1'
                                   AND OPER LIKE 'A060%'
                                   AND SET_FLAG = 'Y'
                                   AND TCD_CMF_2 <> ' '
                               ) D
                             , (
                                SELECT KEY_1 AS MAT_GRP_2, DATA_2 AS DA_TYPE
                                  FROM MGCMTBLDAT 
                                 WHERE FACTORY = 'HMKA1'
                                   AND TABLE_NAME = 'H_FAMILY'
                               ) E
                         WHERE 1=1
                           AND A.FACTORY = B.FACTORY
                           AND A.MAT_ID = B.MAT_ID
                           AND A.MAT_ID = C.MAT_ID(+)
                           AND A.MAT_ID = D.MAT_ID(+)
                           AND A.OPER = D.OPER(+)
                           AND B.MAT_GRP_2 = E.MAT_GRP_2(+)
                           AND A.FACTORY = 'HMKA1'
                           AND A.WORK_DATE BETWEEN '20191202' AND '20200403'
                           AND A.LOT_TYPE = 'W'
                           AND B.DELETE_FLAG = ' '
                           AND B.MAT_TYPE = 'FG'
                           AND A.FACTORY NOT IN ('RETURN') 
                           AND A.CM_KEY_3 LIKE 'P%' 
                           AND REGEXP_LIKE(A.OPER, 'A040*|A0033|A0040|A0230|A1000|A060*|A1750|A0030|A0000|A0020|AZ010|A1825|A0200')
                       )
                 GROUP BY MAT_ID, OPER_GRP
               ) SHP
             , (
                SELECT MAT_ID AS WIP_MAT_ID
                     , OPER_GRP AS WIP_OPER_GRP
                     , SUM(CONV_WIP_QTY) AS WIP_TTL
                     , SUM(DECODE(WORK_DATE, '20191202', CONV_WIP_QTY, 0)) AS WIP_0
                     , SUM(DECODE(WORK_DATE, '20191203', CONV_WIP_QTY, 0)) AS WIP_1
                     , SUM(DECODE(WORK_DATE, '20191204', CONV_WIP_QTY, 0)) AS WIP_2
                     , SUM(DECODE(WORK_DATE, '20191205', CONV_WIP_QTY, 0)) AS WIP_3
                     , SUM(DECODE(WORK_DATE, '20191206', CONV_WIP_QTY, 0)) AS WIP_4
                     , SUM(DECODE(WORK_DATE, '20191207', CONV_WIP_QTY, 0)) AS WIP_5
                     , SUM(DECODE(WORK_DATE, '20191208', CONV_WIP_QTY, 0)) AS WIP_6
                     , SUM(DECODE(WORK_DATE, '20191209', CONV_WIP_QTY, 0)) AS WIP_7
                     , SUM(DECODE(WORK_DATE, '20191210', CONV_WIP_QTY, 0)) AS WIP_8
                     , SUM(DECODE(WORK_DATE, '20191211', CONV_WIP_QTY, 0)) AS WIP_9
                     , SUM(DECODE(WORK_DATE, '20191212', CONV_WIP_QTY, 0)) AS WIP_10
                     , SUM(DECODE(WORK_DATE, '20191213', CONV_WIP_QTY, 0)) AS WIP_11
                     , SUM(DECODE(WORK_DATE, '20191214', CONV_WIP_QTY, 0)) AS WIP_12
                     , SUM(DECODE(WORK_DATE, '20191215', CONV_WIP_QTY, 0)) AS WIP_13
                     , SUM(DECODE(WORK_DATE, '20191216', CONV_WIP_QTY, 0)) AS WIP_14
                     , SUM(DECODE(WORK_DATE, '20191217', CONV_WIP_QTY, 0)) AS WIP_15
                     , SUM(DECODE(WORK_DATE, '20191218', CONV_WIP_QTY, 0)) AS WIP_16
                     , SUM(DECODE(WORK_DATE, '20191219', CONV_WIP_QTY, 0)) AS WIP_17
                     , SUM(DECODE(WORK_DATE, '20191220', CONV_WIP_QTY, 0)) AS WIP_18
                     , SUM(DECODE(WORK_DATE, '20191221', CONV_WIP_QTY, 0)) AS WIP_19
                     , SUM(DECODE(WORK_DATE, '20191222', CONV_WIP_QTY, 0)) AS WIP_20
                     , SUM(DECODE(WORK_DATE, '20191223', CONV_WIP_QTY, 0)) AS WIP_21
                     , SUM(DECODE(WORK_DATE, '20191224', CONV_WIP_QTY, 0)) AS WIP_22
                     , SUM(DECODE(WORK_DATE, '20191225', CONV_WIP_QTY, 0)) AS WIP_23
                     , SUM(DECODE(WORK_DATE, '20191226', CONV_WIP_QTY, 0)) AS WIP_24
                     , SUM(DECODE(WORK_DATE, '20191227', CONV_WIP_QTY, 0)) AS WIP_25
                     , SUM(DECODE(WORK_DATE, '20191228', CONV_WIP_QTY, 0)) AS WIP_26
                     , SUM(DECODE(WORK_DATE, '20191229', CONV_WIP_QTY, 0)) AS WIP_27
                     , SUM(DECODE(WORK_DATE, '20191230', CONV_WIP_QTY, 0)) AS WIP_28
                     , SUM(DECODE(WORK_DATE, '20191231', CONV_WIP_QTY, 0)) AS WIP_29
                     , SUM(DECODE(WORK_DATE, '20200101', CONV_WIP_QTY, 0)) AS WIP_30
                     , SUM(DECODE(WORK_DATE, '20200102', CONV_WIP_QTY, 0)) AS WIP_31
                     , SUM(DECODE(WORK_DATE, '20200103', CONV_WIP_QTY, 0)) AS WIP_32
                     , SUM(DECODE(WORK_DATE, '20200104', CONV_WIP_QTY, 0)) AS WIP_33
                     , SUM(DECODE(WORK_DATE, '20200105', CONV_WIP_QTY, 0)) AS WIP_34
                     , SUM(DECODE(WORK_DATE, '20200106', CONV_WIP_QTY, 0)) AS WIP_35
                     , SUM(DECODE(WORK_DATE, '20200107', CONV_WIP_QTY, 0)) AS WIP_36
                     , SUM(DECODE(WORK_DATE, '20200108', CONV_WIP_QTY, 0)) AS WIP_37
                     , SUM(DECODE(WORK_DATE, '20200109', CONV_WIP_QTY, 0)) AS WIP_38
                     , SUM(DECODE(WORK_DATE, '20200110', CONV_WIP_QTY, 0)) AS WIP_39
                     , SUM(DECODE(WORK_DATE, '20200111', CONV_WIP_QTY, 0)) AS WIP_40
                     , SUM(DECODE(WORK_DATE, '20200112', CONV_WIP_QTY, 0)) AS WIP_41
                     , SUM(DECODE(WORK_DATE, '20200113', CONV_WIP_QTY, 0)) AS WIP_42
                     , SUM(DECODE(WORK_DATE, '20200114', CONV_WIP_QTY, 0)) AS WIP_43
                     , SUM(DECODE(WORK_DATE, '20200115', CONV_WIP_QTY, 0)) AS WIP_44
                     , SUM(DECODE(WORK_DATE, '20200116', CONV_WIP_QTY, 0)) AS WIP_45
                     , SUM(DECODE(WORK_DATE, '20200117', CONV_WIP_QTY, 0)) AS WIP_46
                     , SUM(DECODE(WORK_DATE, '20200118', CONV_WIP_QTY, 0)) AS WIP_47
                     , SUM(DECODE(WORK_DATE, '20200119', CONV_WIP_QTY, 0)) AS WIP_48
                     , SUM(DECODE(WORK_DATE, '20200120', CONV_WIP_QTY, 0)) AS WIP_49
                     , SUM(DECODE(WORK_DATE, '20200121', CONV_WIP_QTY, 0)) AS WIP_50
                     , SUM(DECODE(WORK_DATE, '20200122', CONV_WIP_QTY, 0)) AS WIP_51
                     , SUM(DECODE(WORK_DATE, '20200123', CONV_WIP_QTY, 0)) AS WIP_52
                     , SUM(DECODE(WORK_DATE, '20200124', CONV_WIP_QTY, 0)) AS WIP_53
                     , SUM(DECODE(WORK_DATE, '20200125', CONV_WIP_QTY, 0)) AS WIP_54
                     , SUM(DECODE(WORK_DATE, '20200126', CONV_WIP_QTY, 0)) AS WIP_55
                     , SUM(DECODE(WORK_DATE, '20200127', CONV_WIP_QTY, 0)) AS WIP_56
                     , SUM(DECODE(WORK_DATE, '20200128', CONV_WIP_QTY, 0)) AS WIP_57
                     , SUM(DECODE(WORK_DATE, '20200129', CONV_WIP_QTY, 0)) AS WIP_58
                     , SUM(DECODE(WORK_DATE, '20200130', CONV_WIP_QTY, 0)) AS WIP_59
                     , SUM(DECODE(WORK_DATE, '20200131', CONV_WIP_QTY, 0)) AS WIP_60
                     , SUM(DECODE(WORK_DATE, '20200201', CONV_WIP_QTY, 0)) AS WIP_61
                     , SUM(DECODE(WORK_DATE, '20200202', CONV_WIP_QTY, 0)) AS WIP_62
                     , SUM(DECODE(WORK_DATE, '20200203', CONV_WIP_QTY, 0)) AS WIP_63
                     , SUM(DECODE(WORK_DATE, '20200204', CONV_WIP_QTY, 0)) AS WIP_64
                     , SUM(DECODE(WORK_DATE, '20200205', CONV_WIP_QTY, 0)) AS WIP_65
                     , SUM(DECODE(WORK_DATE, '20200206', CONV_WIP_QTY, 0)) AS WIP_66
                     , SUM(DECODE(WORK_DATE, '20200207', CONV_WIP_QTY, 0)) AS WIP_67
                     , SUM(DECODE(WORK_DATE, '20200208', CONV_WIP_QTY, 0)) AS WIP_68
                     , SUM(DECODE(WORK_DATE, '20200209', CONV_WIP_QTY, 0)) AS WIP_69
                     , SUM(DECODE(WORK_DATE, '20200210', CONV_WIP_QTY, 0)) AS WIP_70
                     , SUM(DECODE(WORK_DATE, '20200211', CONV_WIP_QTY, 0)) AS WIP_71
                     , SUM(DECODE(WORK_DATE, '20200212', CONV_WIP_QTY, 0)) AS WIP_72
                     , SUM(DECODE(WORK_DATE, '20200213', CONV_WIP_QTY, 0)) AS WIP_73
                     , SUM(DECODE(WORK_DATE, '20200214', CONV_WIP_QTY, 0)) AS WIP_74
                     , SUM(DECODE(WORK_DATE, '20200215', CONV_WIP_QTY, 0)) AS WIP_75
                     , SUM(DECODE(WORK_DATE, '20200216', CONV_WIP_QTY, 0)) AS WIP_76
                     , SUM(DECODE(WORK_DATE, '20200217', CONV_WIP_QTY, 0)) AS WIP_77
                     , SUM(DECODE(WORK_DATE, '20200218', CONV_WIP_QTY, 0)) AS WIP_78
                     , SUM(DECODE(WORK_DATE, '20200219', CONV_WIP_QTY, 0)) AS WIP_79
                     , SUM(DECODE(WORK_DATE, '20200220', CONV_WIP_QTY, 0)) AS WIP_80
                     , SUM(DECODE(WORK_DATE, '20200221', CONV_WIP_QTY, 0)) AS WIP_81
                     , SUM(DECODE(WORK_DATE, '20200222', CONV_WIP_QTY, 0)) AS WIP_82
                     , SUM(DECODE(WORK_DATE, '20200223', CONV_WIP_QTY, 0)) AS WIP_83
                     , SUM(DECODE(WORK_DATE, '20200224', CONV_WIP_QTY, 0)) AS WIP_84
                     , SUM(DECODE(WORK_DATE, '20200225', CONV_WIP_QTY, 0)) AS WIP_85
                     , SUM(DECODE(WORK_DATE, '20200226', CONV_WIP_QTY, 0)) AS WIP_86
                     , SUM(DECODE(WORK_DATE, '20200227', CONV_WIP_QTY, 0)) AS WIP_87
                     , SUM(DECODE(WORK_DATE, '20200228', CONV_WIP_QTY, 0)) AS WIP_88
                     , SUM(DECODE(WORK_DATE, '20200229', CONV_WIP_QTY, 0)) AS WIP_89
                     , SUM(DECODE(WORK_DATE, '20200301', CONV_WIP_QTY, 0)) AS WIP_90
                     , SUM(DECODE(WORK_DATE, '20200302', CONV_WIP_QTY, 0)) AS WIP_91
                     , SUM(DECODE(WORK_DATE, '20200303', CONV_WIP_QTY, 0)) AS WIP_92
                     , SUM(DECODE(WORK_DATE, '20200304', CONV_WIP_QTY, 0)) AS WIP_93
                     , SUM(DECODE(WORK_DATE, '20200305', CONV_WIP_QTY, 0)) AS WIP_94
                     , SUM(DECODE(WORK_DATE, '20200306', CONV_WIP_QTY, 0)) AS WIP_95
                     , SUM(DECODE(WORK_DATE, '20200307', CONV_WIP_QTY, 0)) AS WIP_96
                     , SUM(DECODE(WORK_DATE, '20200308', CONV_WIP_QTY, 0)) AS WIP_97
                     , SUM(DECODE(WORK_DATE, '20200309', CONV_WIP_QTY, 0)) AS WIP_98
                     , SUM(DECODE(WORK_DATE, '20200310', CONV_WIP_QTY, 0)) AS WIP_99
                     , SUM(DECODE(WORK_DATE, '20200311', CONV_WIP_QTY, 0)) AS WIP_100
                     , SUM(DECODE(WORK_DATE, '20200312', CONV_WIP_QTY, 0)) AS WIP_101
                     , SUM(DECODE(WORK_DATE, '20200313', CONV_WIP_QTY, 0)) AS WIP_102
                     , SUM(DECODE(WORK_DATE, '20200314', CONV_WIP_QTY, 0)) AS WIP_103
                     , SUM(DECODE(WORK_DATE, '20200315', CONV_WIP_QTY, 0)) AS WIP_104
                     , SUM(DECODE(WORK_DATE, '20200316', CONV_WIP_QTY, 0)) AS WIP_105
                     , SUM(DECODE(WORK_DATE, '20200317', CONV_WIP_QTY, 0)) AS WIP_106
                     , SUM(DECODE(WORK_DATE, '20200318', CONV_WIP_QTY, 0)) AS WIP_107
                     , SUM(DECODE(WORK_DATE, '20200319', CONV_WIP_QTY, 0)) AS WIP_108
                     , SUM(DECODE(WORK_DATE, '20200320', CONV_WIP_QTY, 0)) AS WIP_109
                     , SUM(DECODE(WORK_DATE, '20200321', CONV_WIP_QTY, 0)) AS WIP_110
                     , SUM(DECODE(WORK_DATE, '20200322', CONV_WIP_QTY, 0)) AS WIP_111
                     , SUM(DECODE(WORK_DATE, '20200323', CONV_WIP_QTY, 0)) AS WIP_112
                     , SUM(DECODE(WORK_DATE, '20200324', CONV_WIP_QTY, 0)) AS WIP_113
                     , SUM(DECODE(WORK_DATE, '20200325', CONV_WIP_QTY, 0)) AS WIP_114
                     , SUM(DECODE(WORK_DATE, '20200326', CONV_WIP_QTY, 0)) AS WIP_115
                     , SUM(DECODE(WORK_DATE, '20200327', CONV_WIP_QTY, 0)) AS WIP_116
                     , SUM(DECODE(WORK_DATE, '20200328', CONV_WIP_QTY, 0)) AS WIP_117
                     , SUM(DECODE(WORK_DATE, '20200329', CONV_WIP_QTY, 0)) AS WIP_118
                     , SUM(DECODE(WORK_DATE, '20200330', CONV_WIP_QTY, 0)) AS WIP_119
                     , SUM(DECODE(WORK_DATE, '20200331', CONV_WIP_QTY, 0)) AS WIP_120
                     , SUM(DECODE(WORK_DATE, '20200401', CONV_WIP_QTY, 0)) AS WIP_121
                     , SUM(DECODE(WORK_DATE, '20200402', CONV_WIP_QTY, 0)) AS WIP_122
                     , SUM(DECODE(WORK_DATE, '20200403', CONV_WIP_QTY, 0)) AS WIP_123
                  FROM (
                        SELECT A.MAT_ID, WORK_DATE
                             , CASE WHEN A.OPER = 'A0033' THEN 'Stealth Saw'
                                    WHEN A.OPER IN ('A0040', 'A0030') THEN 'BG'
                                    WHEN A.OPER = 'A0230' THEN 'DDS'
                                    WHEN A.OPER IN ('A1000', 'A0950') THEN 'C-MOLD'
                                    WHEN A.OPER LIKE 'A060%' OR A.OPER LIKE 'A055%' THEN 'WB'
                                    WHEN A.OPER IN ('A1750', 'A1825') THEN 'SST'
                                    WHEN A.OPER = 'A0200' THEN 'SAW'
                                    WHEN (A.OPER LIKE 'A040%' OR A.OPER = 'A0250') AND B.MAT_GRP_2 = 'DFN' THEN 'DA(DFN)'
                                    WHEN (A.OPER LIKE 'A040%' OR A.OPER = 'A0250') AND B.DA_TYPE = 'Epoxy' THEN 'DA(Epoxy)'
                                    WHEN A.OPER = 'A0000' THEN 'STOCK'
                                    WHEN A.OPER = 'A0020' THEN 'LAMI'
                                    WHEN A.OPER = 'AZ010' THEN 'HMK3'
                                    ELSE ''
                               END OPER_GRP
                             , CASE WHEN A.OPER IN ('A0033', 'A0040', 'A0030', 'A0230', 'A0200', 'A0000', 'A0020') THEN WIP_QTY
                                    WHEN B.GUBUN = 'O' THEN WIP_QTY
                                    ELSE 0
                               END WIP_QTY
                             , CASE WHEN A.OPER IN ('A0033', 'A0040', 'A0030', 'A0230', 'A0200', 'A0000', 'A0020') THEN WIP_QTY_2
                                    WHEN A.OPER LIKE 'A040%' AND B.GUBUN = 'O' THEN WIP_QTY * COMP_CNT
                                    WHEN A.OPER LIKE 'A060%' AND B.GUBUN = 'O' THEN WIP_QTY * (CASE WHEN C.WIRE_CNT IS NOT NULL THEN C.WIRE_CNT
                                                                                                    WHEN B.MAT_GRP_6 NOT IN ('-','0') THEN B.MAT_GRP_6
                                                                                                    ELSE '1' END)
                                    WHEN B.GUBUN = 'O' THEN WIP_QTY
                                    ELSE 0
                               END AS CONV_WIP_QTY
                          FROM (
                                SELECT MAT_ID
                                     , '20200403' AS WORK_DATE
                                     , OPER
                                     , QTY_1 AS WIP_QTY
                                     , QTY_2 AS WIP_QTY_2
                                  FROM RWIPLOTSTS
                                 WHERE FACTORY = 'HMKA1'
                                   AND LOT_TYPE = 'W'
                                   AND LOT_DEL_FLAG = ' '
                                   AND REGEXP_LIKE(OPER, 'A040*|A0033|A0040|A0230|A1000|A0950|A060*|A1750|A0030|A0200|A0000|A0020|AZ010|A0250|A050*|A053*|A055*|A1825') 
                                   AND LOT_CMF_5 LIKE 'P%' 
                                 UNION ALL
                                SELECT MAT_ID
                                     , WORK_DATE
                                     , OPER
                                     , EOH_QTY_1 AS WIP_QTY
                                     , EOH_QTY_2 AS WIP_QTY_2
                                  FROM RSUMWIPEOH
                                 WHERE FACTORY = 'HMKA1'
                                   AND LOT_TYPE = 'W'
                                   AND REGEXP_LIKE(OPER, 'A040*|A0033|A0040|A0230|A1000|A0950|A060*|A1750|A0030|A0200|A0000|A0020|AZ010|A0250|A050*|A053*|A055*|A1825')
                                   AND WORK_DATE BETWEEN '20191202' AND '20200402'
                                   AND SHIFT = '3'
                                   AND CM_KEY_3 LIKE 'P%' 
                               ) A
                             , (
                                SELECT *
                                  FROM (
                                        SELECT MAT_ID, MAT_GRP_2, MAT_GRP_4, MAT_GRP_5, MAT_GRP_6, MAT_CMF_11
                                             , CASE WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-'
                                                         THEN (CASE WHEN MAT_GRP_5 IN ('1st','Merge') OR MAT_GRP_5 LIKE 'Middle%' THEN 'O' ELSE '' END)
                                                    WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 = '-' THEN '' 
                                                    ELSE 'O'
                                               END GUBUN
                                             , (SELECT DATA_2 FROM MGCMTBLDAT WHERE FACTORY = 'HMKA1' AND TABLE_NAME = 'H_FAMILY' AND KEY_1 = MAT_GRP_2) AS DA_TYPE
                                             , COMP_CNT
                                          FROM VWIPMATDEF
                                         WHERE FACTORY = 'HMKA1'
                                           AND MAT_TYPE = 'FG'
                                           AND DELETE_FLAG = ' '
                                           AND MAT_GRP_2 <> '-'
                                       )
                               ) B
                             , (
                                SELECT MAT_ID, OPER, TCD_CMF_2 AS WIRE_CNT
                                  FROM CWIPTCDDEF@RPTTOMES
                                 WHERE FACTORY = 'HMKA1'
                                   AND OPER LIKE 'A060%'
                                   AND SET_FLAG = 'Y'
                                   AND TCD_CMF_2 <> ' '
                               ) C
                         WHERE A.MAT_ID = B.MAT_ID
                           AND A.MAT_ID = C.MAT_ID(+)
                           AND A.OPER = C.OPER(+)
                       )
                 GROUP BY MAT_ID, OPER_GRP
               ) WIP
             , (
                SELECT RES_STS_2 AS RES_MAT_ID
                     , OPER_GRP AS RES_OPER_GRP 
                     , SUM(RES_CNT) AS RES_TTL
                     , SUM(RUN_CNT) AS RUN_TTL
                     , SUM(DECODE(WORK_DATE, '20191202', RES_CNT, 0)) AS RES_0
                     , SUM(DECODE(WORK_DATE, '20191203', RES_CNT, 0)) AS RES_1
                     , SUM(DECODE(WORK_DATE, '20191204', RES_CNT, 0)) AS RES_2
                     , SUM(DECODE(WORK_DATE, '20191205', RES_CNT, 0)) AS RES_3
                     , SUM(DECODE(WORK_DATE, '20191206', RES_CNT, 0)) AS RES_4
                     , SUM(DECODE(WORK_DATE, '20191207', RES_CNT, 0)) AS RES_5
                     , SUM(DECODE(WORK_DATE, '20191208', RES_CNT, 0)) AS RES_6
                     , SUM(DECODE(WORK_DATE, '20191209', RES_CNT, 0)) AS RES_7
                     , SUM(DECODE(WORK_DATE, '20191210', RES_CNT, 0)) AS RES_8
                     , SUM(DECODE(WORK_DATE, '20191211', RES_CNT, 0)) AS RES_9
                     , SUM(DECODE(WORK_DATE, '20191212', RES_CNT, 0)) AS RES_10
                     , SUM(DECODE(WORK_DATE, '20191213', RES_CNT, 0)) AS RES_11
                     , SUM(DECODE(WORK_DATE, '20191214', RES_CNT, 0)) AS RES_12
                     , SUM(DECODE(WORK_DATE, '20191215', RES_CNT, 0)) AS RES_13
                     , SUM(DECODE(WORK_DATE, '20191216', RES_CNT, 0)) AS RES_14
                     , SUM(DECODE(WORK_DATE, '20191217', RES_CNT, 0)) AS RES_15
                     , SUM(DECODE(WORK_DATE, '20191218', RES_CNT, 0)) AS RES_16
                     , SUM(DECODE(WORK_DATE, '20191219', RES_CNT, 0)) AS RES_17
                     , SUM(DECODE(WORK_DATE, '20191220', RES_CNT, 0)) AS RES_18
                     , SUM(DECODE(WORK_DATE, '20191221', RES_CNT, 0)) AS RES_19
                     , SUM(DECODE(WORK_DATE, '20191222', RES_CNT, 0)) AS RES_20
                     , SUM(DECODE(WORK_DATE, '20191223', RES_CNT, 0)) AS RES_21
                     , SUM(DECODE(WORK_DATE, '20191224', RES_CNT, 0)) AS RES_22
                     , SUM(DECODE(WORK_DATE, '20191225', RES_CNT, 0)) AS RES_23
                     , SUM(DECODE(WORK_DATE, '20191226', RES_CNT, 0)) AS RES_24
                     , SUM(DECODE(WORK_DATE, '20191227', RES_CNT, 0)) AS RES_25
                     , SUM(DECODE(WORK_DATE, '20191228', RES_CNT, 0)) AS RES_26
                     , SUM(DECODE(WORK_DATE, '20191229', RES_CNT, 0)) AS RES_27
                     , SUM(DECODE(WORK_DATE, '20191230', RES_CNT, 0)) AS RES_28
                     , SUM(DECODE(WORK_DATE, '20191231', RES_CNT, 0)) AS RES_29
                     , SUM(DECODE(WORK_DATE, '20200101', RES_CNT, 0)) AS RES_30
                     , SUM(DECODE(WORK_DATE, '20200102', RES_CNT, 0)) AS RES_31
                     , SUM(DECODE(WORK_DATE, '20200103', RES_CNT, 0)) AS RES_32
                     , SUM(DECODE(WORK_DATE, '20200104', RES_CNT, 0)) AS RES_33
                     , SUM(DECODE(WORK_DATE, '20200105', RES_CNT, 0)) AS RES_34
                     , SUM(DECODE(WORK_DATE, '20200106', RES_CNT, 0)) AS RES_35
                     , SUM(DECODE(WORK_DATE, '20200107', RES_CNT, 0)) AS RES_36
                     , SUM(DECODE(WORK_DATE, '20200108', RES_CNT, 0)) AS RES_37
                     , SUM(DECODE(WORK_DATE, '20200109', RES_CNT, 0)) AS RES_38
                     , SUM(DECODE(WORK_DATE, '20200110', RES_CNT, 0)) AS RES_39
                     , SUM(DECODE(WORK_DATE, '20200111', RES_CNT, 0)) AS RES_40
                     , SUM(DECODE(WORK_DATE, '20200112', RES_CNT, 0)) AS RES_41
                     , SUM(DECODE(WORK_DATE, '20200113', RES_CNT, 0)) AS RES_42
                     , SUM(DECODE(WORK_DATE, '20200114', RES_CNT, 0)) AS RES_43
                     , SUM(DECODE(WORK_DATE, '20200115', RES_CNT, 0)) AS RES_44
                     , SUM(DECODE(WORK_DATE, '20200116', RES_CNT, 0)) AS RES_45
                     , SUM(DECODE(WORK_DATE, '20200117', RES_CNT, 0)) AS RES_46
                     , SUM(DECODE(WORK_DATE, '20200118', RES_CNT, 0)) AS RES_47
                     , SUM(DECODE(WORK_DATE, '20200119', RES_CNT, 0)) AS RES_48
                     , SUM(DECODE(WORK_DATE, '20200120', RES_CNT, 0)) AS RES_49
                     , SUM(DECODE(WORK_DATE, '20200121', RES_CNT, 0)) AS RES_50
                     , SUM(DECODE(WORK_DATE, '20200122', RES_CNT, 0)) AS RES_51
                     , SUM(DECODE(WORK_DATE, '20200123', RES_CNT, 0)) AS RES_52
                     , SUM(DECODE(WORK_DATE, '20200124', RES_CNT, 0)) AS RES_53
                     , SUM(DECODE(WORK_DATE, '20200125', RES_CNT, 0)) AS RES_54
                     , SUM(DECODE(WORK_DATE, '20200126', RES_CNT, 0)) AS RES_55
                     , SUM(DECODE(WORK_DATE, '20200127', RES_CNT, 0)) AS RES_56
                     , SUM(DECODE(WORK_DATE, '20200128', RES_CNT, 0)) AS RES_57
                     , SUM(DECODE(WORK_DATE, '20200129', RES_CNT, 0)) AS RES_58
                     , SUM(DECODE(WORK_DATE, '20200130', RES_CNT, 0)) AS RES_59
                     , SUM(DECODE(WORK_DATE, '20200131', RES_CNT, 0)) AS RES_60
                     , SUM(DECODE(WORK_DATE, '20200201', RES_CNT, 0)) AS RES_61
                     , SUM(DECODE(WORK_DATE, '20200202', RES_CNT, 0)) AS RES_62
                     , SUM(DECODE(WORK_DATE, '20200203', RES_CNT, 0)) AS RES_63
                     , SUM(DECODE(WORK_DATE, '20200204', RES_CNT, 0)) AS RES_64
                     , SUM(DECODE(WORK_DATE, '20200205', RES_CNT, 0)) AS RES_65
                     , SUM(DECODE(WORK_DATE, '20200206', RES_CNT, 0)) AS RES_66
                     , SUM(DECODE(WORK_DATE, '20200207', RES_CNT, 0)) AS RES_67
                     , SUM(DECODE(WORK_DATE, '20200208', RES_CNT, 0)) AS RES_68
                     , SUM(DECODE(WORK_DATE, '20200209', RES_CNT, 0)) AS RES_69
                     , SUM(DECODE(WORK_DATE, '20200210', RES_CNT, 0)) AS RES_70
                     , SUM(DECODE(WORK_DATE, '20200211', RES_CNT, 0)) AS RES_71
                     , SUM(DECODE(WORK_DATE, '20200212', RES_CNT, 0)) AS RES_72
                     , SUM(DECODE(WORK_DATE, '20200213', RES_CNT, 0)) AS RES_73
                     , SUM(DECODE(WORK_DATE, '20200214', RES_CNT, 0)) AS RES_74
                     , SUM(DECODE(WORK_DATE, '20200215', RES_CNT, 0)) AS RES_75
                     , SUM(DECODE(WORK_DATE, '20200216', RES_CNT, 0)) AS RES_76
                     , SUM(DECODE(WORK_DATE, '20200217', RES_CNT, 0)) AS RES_77
                     , SUM(DECODE(WORK_DATE, '20200218', RES_CNT, 0)) AS RES_78
                     , SUM(DECODE(WORK_DATE, '20200219', RES_CNT, 0)) AS RES_79
                     , SUM(DECODE(WORK_DATE, '20200220', RES_CNT, 0)) AS RES_80
                     , SUM(DECODE(WORK_DATE, '20200221', RES_CNT, 0)) AS RES_81
                     , SUM(DECODE(WORK_DATE, '20200222', RES_CNT, 0)) AS RES_82
                     , SUM(DECODE(WORK_DATE, '20200223', RES_CNT, 0)) AS RES_83
                     , SUM(DECODE(WORK_DATE, '20200224', RES_CNT, 0)) AS RES_84
                     , SUM(DECODE(WORK_DATE, '20200225', RES_CNT, 0)) AS RES_85
                     , SUM(DECODE(WORK_DATE, '20200226', RES_CNT, 0)) AS RES_86
                     , SUM(DECODE(WORK_DATE, '20200227', RES_CNT, 0)) AS RES_87
                     , SUM(DECODE(WORK_DATE, '20200228', RES_CNT, 0)) AS RES_88
                     , SUM(DECODE(WORK_DATE, '20200229', RES_CNT, 0)) AS RES_89
                     , SUM(DECODE(WORK_DATE, '20200301', RES_CNT, 0)) AS RES_90
                     , SUM(DECODE(WORK_DATE, '20200302', RES_CNT, 0)) AS RES_91
                     , SUM(DECODE(WORK_DATE, '20200303', RES_CNT, 0)) AS RES_92
                     , SUM(DECODE(WORK_DATE, '20200304', RES_CNT, 0)) AS RES_93
                     , SUM(DECODE(WORK_DATE, '20200305', RES_CNT, 0)) AS RES_94
                     , SUM(DECODE(WORK_DATE, '20200306', RES_CNT, 0)) AS RES_95
                     , SUM(DECODE(WORK_DATE, '20200307', RES_CNT, 0)) AS RES_96
                     , SUM(DECODE(WORK_DATE, '20200308', RES_CNT, 0)) AS RES_97
                     , SUM(DECODE(WORK_DATE, '20200309', RES_CNT, 0)) AS RES_98
                     , SUM(DECODE(WORK_DATE, '20200310', RES_CNT, 0)) AS RES_99
                     , SUM(DECODE(WORK_DATE, '20200311', RES_CNT, 0)) AS RES_100
                     , SUM(DECODE(WORK_DATE, '20200312', RES_CNT, 0)) AS RES_101
                     , SUM(DECODE(WORK_DATE, '20200313', RES_CNT, 0)) AS RES_102
                     , SUM(DECODE(WORK_DATE, '20200314', RES_CNT, 0)) AS RES_103
                     , SUM(DECODE(WORK_DATE, '20200315', RES_CNT, 0)) AS RES_104
                     , SUM(DECODE(WORK_DATE, '20200316', RES_CNT, 0)) AS RES_105
                     , SUM(DECODE(WORK_DATE, '20200317', RES_CNT, 0)) AS RES_106
                     , SUM(DECODE(WORK_DATE, '20200318', RES_CNT, 0)) AS RES_107
                     , SUM(DECODE(WORK_DATE, '20200319', RES_CNT, 0)) AS RES_108
                     , SUM(DECODE(WORK_DATE, '20200320', RES_CNT, 0)) AS RES_109
                     , SUM(DECODE(WORK_DATE, '20200321', RES_CNT, 0)) AS RES_110
                     , SUM(DECODE(WORK_DATE, '20200322', RES_CNT, 0)) AS RES_111
                     , SUM(DECODE(WORK_DATE, '20200323', RES_CNT, 0)) AS RES_112
                     , SUM(DECODE(WORK_DATE, '20200324', RES_CNT, 0)) AS RES_113
                     , SUM(DECODE(WORK_DATE, '20200325', RES_CNT, 0)) AS RES_114
                     , SUM(DECODE(WORK_DATE, '20200326', RES_CNT, 0)) AS RES_115
                     , SUM(DECODE(WORK_DATE, '20200327', RES_CNT, 0)) AS RES_116
                     , SUM(DECODE(WORK_DATE, '20200328', RES_CNT, 0)) AS RES_117
                     , SUM(DECODE(WORK_DATE, '20200329', RES_CNT, 0)) AS RES_118
                     , SUM(DECODE(WORK_DATE, '20200330', RES_CNT, 0)) AS RES_119
                     , SUM(DECODE(WORK_DATE, '20200331', RES_CNT, 0)) AS RES_120
                     , SUM(DECODE(WORK_DATE, '20200401', RES_CNT, 0)) AS RES_121
                     , SUM(DECODE(WORK_DATE, '20200402', RES_CNT, 0)) AS RES_122
                     , SUM(DECODE(WORK_DATE, '20200403', RES_CNT, 0)) AS RES_123
                     , SUM(DECODE(WORK_DATE, '20191202', RUN_CNT, 0)) AS RUN_0
                     , SUM(DECODE(WORK_DATE, '20191203', RUN_CNT, 0)) AS RUN_1
                     , SUM(DECODE(WORK_DATE, '20191204', RUN_CNT, 0)) AS RUN_2
                     , SUM(DECODE(WORK_DATE, '20191205', RUN_CNT, 0)) AS RUN_3
                     , SUM(DECODE(WORK_DATE, '20191206', RUN_CNT, 0)) AS RUN_4
                     , SUM(DECODE(WORK_DATE, '20191207', RUN_CNT, 0)) AS RUN_5
                     , SUM(DECODE(WORK_DATE, '20191208', RUN_CNT, 0)) AS RUN_6
                     , SUM(DECODE(WORK_DATE, '20191209', RUN_CNT, 0)) AS RUN_7
                     , SUM(DECODE(WORK_DATE, '20191210', RUN_CNT, 0)) AS RUN_8
                     , SUM(DECODE(WORK_DATE, '20191211', RUN_CNT, 0)) AS RUN_9
                     , SUM(DECODE(WORK_DATE, '20191212', RUN_CNT, 0)) AS RUN_10
                     , SUM(DECODE(WORK_DATE, '20191213', RUN_CNT, 0)) AS RUN_11
                     , SUM(DECODE(WORK_DATE, '20191214', RUN_CNT, 0)) AS RUN_12
                     , SUM(DECODE(WORK_DATE, '20191215', RUN_CNT, 0)) AS RUN_13
                     , SUM(DECODE(WORK_DATE, '20191216', RUN_CNT, 0)) AS RUN_14
                     , SUM(DECODE(WORK_DATE, '20191217', RUN_CNT, 0)) AS RUN_15
                     , SUM(DECODE(WORK_DATE, '20191218', RUN_CNT, 0)) AS RUN_16
                     , SUM(DECODE(WORK_DATE, '20191219', RUN_CNT, 0)) AS RUN_17
                     , SUM(DECODE(WORK_DATE, '20191220', RUN_CNT, 0)) AS RUN_18
                     , SUM(DECODE(WORK_DATE, '20191221', RUN_CNT, 0)) AS RUN_19
                     , SUM(DECODE(WORK_DATE, '20191222', RUN_CNT, 0)) AS RUN_20
                     , SUM(DECODE(WORK_DATE, '20191223', RUN_CNT, 0)) AS RUN_21
                     , SUM(DECODE(WORK_DATE, '20191224', RUN_CNT, 0)) AS RUN_22
                     , SUM(DECODE(WORK_DATE, '20191225', RUN_CNT, 0)) AS RUN_23
                     , SUM(DECODE(WORK_DATE, '20191226', RUN_CNT, 0)) AS RUN_24
                     , SUM(DECODE(WORK_DATE, '20191227', RUN_CNT, 0)) AS RUN_25
                     , SUM(DECODE(WORK_DATE, '20191228', RUN_CNT, 0)) AS RUN_26
                     , SUM(DECODE(WORK_DATE, '20191229', RUN_CNT, 0)) AS RUN_27
                     , SUM(DECODE(WORK_DATE, '20191230', RUN_CNT, 0)) AS RUN_28
                     , SUM(DECODE(WORK_DATE, '20191231', RUN_CNT, 0)) AS RUN_29
                     , SUM(DECODE(WORK_DATE, '20200101', RUN_CNT, 0)) AS RUN_30
                     , SUM(DECODE(WORK_DATE, '20200102', RUN_CNT, 0)) AS RUN_31
                     , SUM(DECODE(WORK_DATE, '20200103', RUN_CNT, 0)) AS RUN_32
                     , SUM(DECODE(WORK_DATE, '20200104', RUN_CNT, 0)) AS RUN_33
                     , SUM(DECODE(WORK_DATE, '20200105', RUN_CNT, 0)) AS RUN_34
                     , SUM(DECODE(WORK_DATE, '20200106', RUN_CNT, 0)) AS RUN_35
                     , SUM(DECODE(WORK_DATE, '20200107', RUN_CNT, 0)) AS RUN_36
                     , SUM(DECODE(WORK_DATE, '20200108', RUN_CNT, 0)) AS RUN_37
                     , SUM(DECODE(WORK_DATE, '20200109', RUN_CNT, 0)) AS RUN_38
                     , SUM(DECODE(WORK_DATE, '20200110', RUN_CNT, 0)) AS RUN_39
                     , SUM(DECODE(WORK_DATE, '20200111', RUN_CNT, 0)) AS RUN_40
                     , SUM(DECODE(WORK_DATE, '20200112', RUN_CNT, 0)) AS RUN_41
                     , SUM(DECODE(WORK_DATE, '20200113', RUN_CNT, 0)) AS RUN_42
                     , SUM(DECODE(WORK_DATE, '20200114', RUN_CNT, 0)) AS RUN_43
                     , SUM(DECODE(WORK_DATE, '20200115', RUN_CNT, 0)) AS RUN_44
                     , SUM(DECODE(WORK_DATE, '20200116', RUN_CNT, 0)) AS RUN_45
                     , SUM(DECODE(WORK_DATE, '20200117', RUN_CNT, 0)) AS RUN_46
                     , SUM(DECODE(WORK_DATE, '20200118', RUN_CNT, 0)) AS RUN_47
                     , SUM(DECODE(WORK_DATE, '20200119', RUN_CNT, 0)) AS RUN_48
                     , SUM(DECODE(WORK_DATE, '20200120', RUN_CNT, 0)) AS RUN_49
                     , SUM(DECODE(WORK_DATE, '20200121', RUN_CNT, 0)) AS RUN_50
                     , SUM(DECODE(WORK_DATE, '20200122', RUN_CNT, 0)) AS RUN_51
                     , SUM(DECODE(WORK_DATE, '20200123', RUN_CNT, 0)) AS RUN_52
                     , SUM(DECODE(WORK_DATE, '20200124', RUN_CNT, 0)) AS RUN_53
                     , SUM(DECODE(WORK_DATE, '20200125', RUN_CNT, 0)) AS RUN_54
                     , SUM(DECODE(WORK_DATE, '20200126', RUN_CNT, 0)) AS RUN_55
                     , SUM(DECODE(WORK_DATE, '20200127', RUN_CNT, 0)) AS RUN_56
                     , SUM(DECODE(WORK_DATE, '20200128', RUN_CNT, 0)) AS RUN_57
                     , SUM(DECODE(WORK_DATE, '20200129', RUN_CNT, 0)) AS RUN_58
                     , SUM(DECODE(WORK_DATE, '20200130', RUN_CNT, 0)) AS RUN_59
                     , SUM(DECODE(WORK_DATE, '20200131', RUN_CNT, 0)) AS RUN_60
                     , SUM(DECODE(WORK_DATE, '20200201', RUN_CNT, 0)) AS RUN_61
                     , SUM(DECODE(WORK_DATE, '20200202', RUN_CNT, 0)) AS RUN_62
                     , SUM(DECODE(WORK_DATE, '20200203', RUN_CNT, 0)) AS RUN_63
                     , SUM(DECODE(WORK_DATE, '20200204', RUN_CNT, 0)) AS RUN_64
                     , SUM(DECODE(WORK_DATE, '20200205', RUN_CNT, 0)) AS RUN_65
                     , SUM(DECODE(WORK_DATE, '20200206', RUN_CNT, 0)) AS RUN_66
                     , SUM(DECODE(WORK_DATE, '20200207', RUN_CNT, 0)) AS RUN_67
                     , SUM(DECODE(WORK_DATE, '20200208', RUN_CNT, 0)) AS RUN_68
                     , SUM(DECODE(WORK_DATE, '20200209', RUN_CNT, 0)) AS RUN_69
                     , SUM(DECODE(WORK_DATE, '20200210', RUN_CNT, 0)) AS RUN_70
                     , SUM(DECODE(WORK_DATE, '20200211', RUN_CNT, 0)) AS RUN_71
                     , SUM(DECODE(WORK_DATE, '20200212', RUN_CNT, 0)) AS RUN_72
                     , SUM(DECODE(WORK_DATE, '20200213', RUN_CNT, 0)) AS RUN_73
                     , SUM(DECODE(WORK_DATE, '20200214', RUN_CNT, 0)) AS RUN_74
                     , SUM(DECODE(WORK_DATE, '20200215', RUN_CNT, 0)) AS RUN_75
                     , SUM(DECODE(WORK_DATE, '20200216', RUN_CNT, 0)) AS RUN_76
                     , SUM(DECODE(WORK_DATE, '20200217', RUN_CNT, 0)) AS RUN_77
                     , SUM(DECODE(WORK_DATE, '20200218', RUN_CNT, 0)) AS RUN_78
                     , SUM(DECODE(WORK_DATE, '20200219', RUN_CNT, 0)) AS RUN_79
                     , SUM(DECODE(WORK_DATE, '20200220', RUN_CNT, 0)) AS RUN_80
                     , SUM(DECODE(WORK_DATE, '20200221', RUN_CNT, 0)) AS RUN_81
                     , SUM(DECODE(WORK_DATE, '20200222', RUN_CNT, 0)) AS RUN_82
                     , SUM(DECODE(WORK_DATE, '20200223', RUN_CNT, 0)) AS RUN_83
                     , SUM(DECODE(WORK_DATE, '20200224', RUN_CNT, 0)) AS RUN_84
                     , SUM(DECODE(WORK_DATE, '20200225', RUN_CNT, 0)) AS RUN_85
                     , SUM(DECODE(WORK_DATE, '20200226', RUN_CNT, 0)) AS RUN_86
                     , SUM(DECODE(WORK_DATE, '20200227', RUN_CNT, 0)) AS RUN_87
                     , SUM(DECODE(WORK_DATE, '20200228', RUN_CNT, 0)) AS RUN_88
                     , SUM(DECODE(WORK_DATE, '20200229', RUN_CNT, 0)) AS RUN_89
                     , SUM(DECODE(WORK_DATE, '20200301', RUN_CNT, 0)) AS RUN_90
                     , SUM(DECODE(WORK_DATE, '20200302', RUN_CNT, 0)) AS RUN_91
                     , SUM(DECODE(WORK_DATE, '20200303', RUN_CNT, 0)) AS RUN_92
                     , SUM(DECODE(WORK_DATE, '20200304', RUN_CNT, 0)) AS RUN_93
                     , SUM(DECODE(WORK_DATE, '20200305', RUN_CNT, 0)) AS RUN_94
                     , SUM(DECODE(WORK_DATE, '20200306', RUN_CNT, 0)) AS RUN_95
                     , SUM(DECODE(WORK_DATE, '20200307', RUN_CNT, 0)) AS RUN_96
                     , SUM(DECODE(WORK_DATE, '20200308', RUN_CNT, 0)) AS RUN_97
                     , SUM(DECODE(WORK_DATE, '20200309', RUN_CNT, 0)) AS RUN_98
                     , SUM(DECODE(WORK_DATE, '20200310', RUN_CNT, 0)) AS RUN_99
                     , SUM(DECODE(WORK_DATE, '20200311', RUN_CNT, 0)) AS RUN_100
                     , SUM(DECODE(WORK_DATE, '20200312', RUN_CNT, 0)) AS RUN_101
                     , SUM(DECODE(WORK_DATE, '20200313', RUN_CNT, 0)) AS RUN_102
                     , SUM(DECODE(WORK_DATE, '20200314', RUN_CNT, 0)) AS RUN_103
                     , SUM(DECODE(WORK_DATE, '20200315', RUN_CNT, 0)) AS RUN_104
                     , SUM(DECODE(WORK_DATE, '20200316', RUN_CNT, 0)) AS RUN_105
                     , SUM(DECODE(WORK_DATE, '20200317', RUN_CNT, 0)) AS RUN_106
                     , SUM(DECODE(WORK_DATE, '20200318', RUN_CNT, 0)) AS RUN_107
                     , SUM(DECODE(WORK_DATE, '20200319', RUN_CNT, 0)) AS RUN_108
                     , SUM(DECODE(WORK_DATE, '20200320', RUN_CNT, 0)) AS RUN_109
                     , SUM(DECODE(WORK_DATE, '20200321', RUN_CNT, 0)) AS RUN_110
                     , SUM(DECODE(WORK_DATE, '20200322', RUN_CNT, 0)) AS RUN_111
                     , SUM(DECODE(WORK_DATE, '20200323', RUN_CNT, 0)) AS RUN_112
                     , SUM(DECODE(WORK_DATE, '20200324', RUN_CNT, 0)) AS RUN_113
                     , SUM(DECODE(WORK_DATE, '20200325', RUN_CNT, 0)) AS RUN_114
                     , SUM(DECODE(WORK_DATE, '20200326', RUN_CNT, 0)) AS RUN_115
                     , SUM(DECODE(WORK_DATE, '20200327', RUN_CNT, 0)) AS RUN_116
                     , SUM(DECODE(WORK_DATE, '20200328', RUN_CNT, 0)) AS RUN_117
                     , SUM(DECODE(WORK_DATE, '20200329', RUN_CNT, 0)) AS RUN_118
                     , SUM(DECODE(WORK_DATE, '20200330', RUN_CNT, 0)) AS RUN_119
                     , SUM(DECODE(WORK_DATE, '20200331', RUN_CNT, 0)) AS RUN_120
                     , SUM(DECODE(WORK_DATE, '20200401', RUN_CNT, 0)) AS RUN_121
                     , SUM(DECODE(WORK_DATE, '20200402', RUN_CNT, 0)) AS RUN_122
                     , SUM(DECODE(WORK_DATE, '20200403', RUN_CNT, 0)) AS RUN_123
                  FROM (
                        SELECT RES_STS_2
                             , WORK_DATE
                             , CASE WHEN A.RES_GRP_3 = 'SDBG' THEN 'Stealth Saw'
                                    WHEN A.RES_GRP_3 = 'BACK LAP' THEN 'BG'
                                    WHEN A.RES_GRP_3 = 'WAFER EXPANDING' THEN 'DDS'
                                    WHEN A.RES_GRP_3 = 'MOLD' THEN 'C-MOLD'
                                    WHEN A.RES_GRP_3 = 'WIRE BOND' THEN 'WB'
                                    WHEN A.RES_GRP_3 = 'SAW SORTER' THEN 'SST'
                                    WHEN A.RES_GRP_3 = 'SAW' THEN 'SAW'
                                    WHEN A.RES_GRP_3 = 'DIE ATTACH' AND B.MAT_GRP_2 = 'DFN' THEN 'DA(DFN)'
                                    WHEN A.RES_GRP_3 = 'DIE ATTACH' AND REGEXP_LIKE(A.RES_GRP_6, 'ESEC2100SD|SDB-30UST|^DB*|^SPA*') THEN 'DA(Epoxy)'
                                    WHEN A.RES_GRP_3 = 'LAMINATION' THEN 'LAMI'
                                    ELSE 'DA'
                               END OPER_GRP
                             , RES_CNT
                             , RUN_CNT
                          FROM (
                                SELECT A.RES_STS_2
                                     , '20200403' AS WORK_DATE
                                     , A.RES_GRP_3
                                     , A.RES_GRP_6
                                     , COUNT(A.RES_ID) AS RES_CNT
                                     , NVL(SUM(DECODE(RES_UP_DOWN_FLAG, 'U', DECODE(NVL(B.START_RES_ID, '-'), '-', 0, 1))), 0) AS RUN_CNT
                                  FROM MRASRESDEF A
                                     , (
                                        SELECT DISTINCT START_RES_ID
                                          FROM MWIPLOTSTS
                                         WHERE FACTORY = 'HMKA1'
                                           AND LOT_TYPE = 'W'
                                           AND LOT_DEL_FLAG = ' '
                                           AND LOT_CMF_5 LIKE 'P%' 
                                           AND REGEXP_LIKE(OPER, 'A040*|A0033|A0040|A0230|A1000|A060*|A1750|A0030|A0200|A0020|A1825')
                                           AND LOT_STATUS = 'PROC'
                                       ) B
                                 WHERE 1=1
                                   AND A.RES_ID = B.START_RES_ID(+)
                                   AND A.FACTORY = 'HMKA1'
                                   AND A.RES_CMF_9 = 'Y'
                                   AND A.RES_CMF_7 = 'Y'
                                   AND (A.RES_STS_1 NOT IN ('C200', 'B199') OR A.RES_UP_DOWN_FLAG = 'U') 
                                   AND A.DELETE_FLAG  = ' '
                                   AND A.RES_TYPE  = 'EQUIPMENT'
                                   AND (A.RES_GRP_3 IN ('SDBG','BACK LAP','WAFER EXPANDING','DIE ATTACH', 'WIRE BOND', 'SAW SORTER', 'SAW', 'LAMINATION') OR A.RES_ID IN ('M-A57','M-A59','M-A60'))
                                 GROUP BY A.RES_STS_2, A.RES_GRP_3, A.RES_GRP_6
                                 UNION ALL
                                SELECT RES_STS_2
                                     , SUBSTR(CUTOFF_DT, 1, 8) AS WORK_DATE
                                     , RES_GRP_3
                                     , RES_GRP_6
                                     , COUNT(RES_ID) AS RES_CNT
                                     , SUM(DECODE(RES_UP_DOWN_FLAG, 'U', 1, 0)) AS RUN_CNT
                                  FROM MRASRESDEF_BOH
                                 WHERE FACTORY = 'HMKA1'
                                   AND CUTOFF_DT BETWEEN '2019120222' AND '2020040222'
                                   AND SUBSTR(CUTOFF_DT, -2) = '22'
                                   AND RES_CMF_9 = 'Y'
                                   AND RES_CMF_7 = 'Y'
                                   AND (RES_STS_1 NOT IN ('C200', 'B199') OR RES_UP_DOWN_FLAG = 'U') 
                                   AND DELETE_FLAG  = ' '
                                   AND RES_TYPE  = 'EQUIPMENT'
                                   AND (RES_GRP_3 IN ('SDBG','BACK LAP','WAFER EXPANDING','DIE ATTACH', 'WIRE BOND', 'SAW SORTER', 'SAW', 'LAMINATION') OR RES_ID IN ('M-A57','M-A59','M-A60'))
                                 GROUP BY RES_STS_2, SUBSTR(CUTOFF_DT, 1, 8), RES_GRP_3, RES_GRP_6
                               ) A
                             , (
                                SELECT MAT_ID, MAT_GRP_2
                                     , (SELECT DATA_2 FROM MGCMTBLDAT WHERE FACTORY = 'HMKA1' AND TABLE_NAME = 'H_FAMILY' AND KEY_1 = MAT_GRP_2) AS DA_TYPE
                                  FROM MWIPMATDEF
                                 WHERE FACTORY = 'HMKA1'
                                   AND MAT_TYPE = 'FG'
                               ) B
                 WHERE A.RES_STS_2 = B.MAT_ID(+)
                       )
                 GROUP BY RES_STS_2, OPER_GRP
               ) RES
         WHERE 1=1
           AND MAT.OPER_GRP = SHP.END_OPER_GRP(+)
           AND MAT.OPER_GRP = WIP.WIP_OPER_GRP(+)
           AND MAT.OPER_GRP = RES.RES_OPER_GRP(+)
           AND MAT.MAT_ID = SHP.END_MAT_ID(+)
           AND MAT.MAT_ID = WIP.WIP_MAT_ID(+)
           AND MAT.MAT_ID = RES.RES_MAT_ID(+)
           AND NVL(SHP.END_TTL,0) + NVL(WIP.WIP_TTL,0) + NVL(RES.RES_TTL,0) > 0
       ) A
     , (SELECT DECODE(LEVEL, 1, '재공', 2, '실적', 3, '예상실적', 4, '설비대수', 5, 'RUN') AS GUBUN FROM DUAL CONNECT BY LEVEL <= 5 ) B
 GROUP BY A.OPER_GRP, A.OPER_GRP,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', B.GUBUN 
 ORDER BY DECODE(A.OPER_GRP, 'STOCK', 1, 'LAMI', 2, 'Stealth Saw', 3, 'BG', 4, 'DDS', 5, 'SAW', 6, 'DA', 7, 'DA(Epoxy)', 8, 'DA(DFN)', 9, 'WB', 10, 'C-MOLD', 11, 'SST', 12, 13), A.OPER_GRP,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', DECODE(B.GUBUN, '재공', 1, '실적', 2, '예상실적', 3, '설비대수', 4, 5) 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT DECODE(A.RES_UP_DOWN_FLAG, 'U', 'UP', 'DOWN') AS STATE
     , A.RES_GRP_6 AS MODEL, A.RES_STS_2 AS MAT_ID, A.RES_ID, A.RES_STS_1 AS CODE
  FROM MRASRESDEF_BOH A
     , (
        SELECT M.* 
             , NVL((SELECT DATA_10 FROM MGCMTBLDAT WHERE TABLE_NAME = 'H_CUSTOMER' AND FACTORY = 'HMKA1' AND  KEY_1 = M.MAT_GRP_1), '-') AS CUST_TYPE 
          FROM MWIPMATDEF M 
         WHERE FACTORY = 'HMKA1' 
           AND DELETE_FLAG = ' ' 
       ) B
 WHERE 1=1
   AND A.FACTORY = B.FACTORY(+)
   AND A.RES_STS_2 = B.MAT_ID(+)
   AND A.FACTORY = 'HMKA1'
   AND A.RES_CMF_9 = 'Y'
   AND A.RES_CMF_7 = 'Y'
   AND (A.RES_STS_1 NOT IN ('C200', 'B199') OR A.RES_UP_DOWN_FLAG = 'U') 
   AND A.DELETE_FLAG  = ' '
   AND A.RES_TYPE  = 'EQUIPMENT'
   AND A.CUTOFF_DT = '2020040222'
   AND B.MAT_GRP_2 <> 'DFN'
   AND REGEXP_LIKE(A.RES_GRP_6, 'ESEC2100SD|SDB-30UST|^DB*|^SPA*')
   AND A.RES_GRP_3 = 'DIE ATTACH'
 ORDER BY STATE, RES_GRP_6

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT A.OPER_GRP, (SELECT TO_NUMBER(DATA_1) FROM MGCMTBLDAT WHERE FACTORY = 'HMKA1' AND TABLE_NAME = 'H_OPER_GRP_TARGET' AND KEY_1 = A.OPER_GRP) AS TARGET,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ' 
     , B.GUBUN
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_0 ELSE WIP_0 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_0 ELSE END_0 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_0 ELSE EXP_0 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_0
                      WHEN B.GUBUN = 'RUN' THEN RUN_0
                 END), 0) AS D0
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_1 ELSE WIP_1 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_1 ELSE END_1 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_1 ELSE EXP_1 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_1
                      WHEN B.GUBUN = 'RUN' THEN RUN_1
                 END), 0) AS D1
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_2 ELSE WIP_2 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_2 ELSE END_2 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_2 ELSE EXP_2 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_2
                      WHEN B.GUBUN = 'RUN' THEN RUN_2
                 END), 0) AS D2
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_3 ELSE WIP_3 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_3 ELSE END_3 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_3 ELSE EXP_3 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_3
                      WHEN B.GUBUN = 'RUN' THEN RUN_3
                 END), 0) AS D3
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_4 ELSE WIP_4 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_4 ELSE END_4 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_4 ELSE EXP_4 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_4
                      WHEN B.GUBUN = 'RUN' THEN RUN_4
                 END), 0) AS D4
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_5 ELSE WIP_5 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_5 ELSE END_5 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_5 ELSE EXP_5 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_5
                      WHEN B.GUBUN = 'RUN' THEN RUN_5
                 END), 0) AS D5
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_6 ELSE WIP_6 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_6 ELSE END_6 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_6 ELSE EXP_6 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_6
                      WHEN B.GUBUN = 'RUN' THEN RUN_6
                 END), 0) AS D6
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_7 ELSE WIP_7 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_7 ELSE END_7 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_7 ELSE EXP_7 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_7
                      WHEN B.GUBUN = 'RUN' THEN RUN_7
                 END), 0) AS D7
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_8 ELSE WIP_8 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_8 ELSE END_8 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_8 ELSE EXP_8 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_8
                      WHEN B.GUBUN = 'RUN' THEN RUN_8
                 END), 0) AS D8
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_9 ELSE WIP_9 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_9 ELSE END_9 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_9 ELSE EXP_9 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_9
                      WHEN B.GUBUN = 'RUN' THEN RUN_9
                 END), 0) AS D9
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_10 ELSE WIP_10 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_10 ELSE END_10 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_10 ELSE EXP_10 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_10
                      WHEN B.GUBUN = 'RUN' THEN RUN_10
                 END), 0) AS D10
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_11 ELSE WIP_11 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_11 ELSE END_11 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_11 ELSE EXP_11 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_11
                      WHEN B.GUBUN = 'RUN' THEN RUN_11
                 END), 0) AS D11
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_12 ELSE WIP_12 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_12 ELSE END_12 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_12 ELSE EXP_12 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_12
                      WHEN B.GUBUN = 'RUN' THEN RUN_12
                 END), 0) AS D12
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_13 ELSE WIP_13 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_13 ELSE END_13 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_13 ELSE EXP_13 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_13
                      WHEN B.GUBUN = 'RUN' THEN RUN_13
                 END), 0) AS D13
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_14 ELSE WIP_14 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_14 ELSE END_14 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_14 ELSE EXP_14 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_14
                      WHEN B.GUBUN = 'RUN' THEN RUN_14
                 END), 0) AS D14
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_15 ELSE WIP_15 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_15 ELSE END_15 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_15 ELSE EXP_15 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_15
                      WHEN B.GUBUN = 'RUN' THEN RUN_15
                 END), 0) AS D15
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_16 ELSE WIP_16 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_16 ELSE END_16 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_16 ELSE EXP_16 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_16
                      WHEN B.GUBUN = 'RUN' THEN RUN_16
                 END), 0) AS D16
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_17 ELSE WIP_17 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_17 ELSE END_17 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_17 ELSE EXP_17 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_17
                      WHEN B.GUBUN = 'RUN' THEN RUN_17
                 END), 0) AS D17
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_18 ELSE WIP_18 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_18 ELSE END_18 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_18 ELSE EXP_18 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_18
                      WHEN B.GUBUN = 'RUN' THEN RUN_18
                 END), 0) AS D18
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_19 ELSE WIP_19 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_19 ELSE END_19 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_19 ELSE EXP_19 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_19
                      WHEN B.GUBUN = 'RUN' THEN RUN_19
                 END), 0) AS D19
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_20 ELSE WIP_20 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_20 ELSE END_20 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_20 ELSE EXP_20 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_20
                      WHEN B.GUBUN = 'RUN' THEN RUN_20
                 END), 0) AS D20
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_21 ELSE WIP_21 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_21 ELSE END_21 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_21 ELSE EXP_21 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_21
                      WHEN B.GUBUN = 'RUN' THEN RUN_21
                 END), 0) AS D21
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_22 ELSE WIP_22 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_22 ELSE END_22 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_22 ELSE EXP_22 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_22
                      WHEN B.GUBUN = 'RUN' THEN RUN_22
                 END), 0) AS D22
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_23 ELSE WIP_23 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_23 ELSE END_23 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_23 ELSE EXP_23 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_23
                      WHEN B.GUBUN = 'RUN' THEN RUN_23
                 END), 0) AS D23
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_24 ELSE WIP_24 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_24 ELSE END_24 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_24 ELSE EXP_24 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_24
                      WHEN B.GUBUN = 'RUN' THEN RUN_24
                 END), 0) AS D24
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_25 ELSE WIP_25 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_25 ELSE END_25 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_25 ELSE EXP_25 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_25
                      WHEN B.GUBUN = 'RUN' THEN RUN_25
                 END), 0) AS D25
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_26 ELSE WIP_26 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_26 ELSE END_26 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_26 ELSE EXP_26 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_26
                      WHEN B.GUBUN = 'RUN' THEN RUN_26
                 END), 0) AS D26
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_27 ELSE WIP_27 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_27 ELSE END_27 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_27 ELSE EXP_27 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_27
                      WHEN B.GUBUN = 'RUN' THEN RUN_27
                 END), 0) AS D27
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_28 ELSE WIP_28 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_28 ELSE END_28 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_28 ELSE EXP_28 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_28
                      WHEN B.GUBUN = 'RUN' THEN RUN_28
                 END), 0) AS D28
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_29 ELSE WIP_29 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_29 ELSE END_29 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_29 ELSE EXP_29 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_29
                      WHEN B.GUBUN = 'RUN' THEN RUN_29
                 END), 0) AS D29
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_30 ELSE WIP_30 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_30 ELSE END_30 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_30 ELSE EXP_30 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_30
                      WHEN B.GUBUN = 'RUN' THEN RUN_30
                 END), 0) AS D30
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_31 ELSE WIP_31 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_31 ELSE END_31 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_31 ELSE EXP_31 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_31
                      WHEN B.GUBUN = 'RUN' THEN RUN_31
                 END), 0) AS D31
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_32 ELSE WIP_32 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_32 ELSE END_32 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_32 ELSE EXP_32 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_32
                      WHEN B.GUBUN = 'RUN' THEN RUN_32
                 END), 0) AS D32
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_33 ELSE WIP_33 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_33 ELSE END_33 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_33 ELSE EXP_33 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_33
                      WHEN B.GUBUN = 'RUN' THEN RUN_33
                 END), 0) AS D33
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_34 ELSE WIP_34 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_34 ELSE END_34 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_34 ELSE EXP_34 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_34
                      WHEN B.GUBUN = 'RUN' THEN RUN_34
                 END), 0) AS D34
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_35 ELSE WIP_35 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_35 ELSE END_35 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_35 ELSE EXP_35 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_35
                      WHEN B.GUBUN = 'RUN' THEN RUN_35
                 END), 0) AS D35
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_36 ELSE WIP_36 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_36 ELSE END_36 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_36 ELSE EXP_36 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_36
                      WHEN B.GUBUN = 'RUN' THEN RUN_36
                 END), 0) AS D36
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_37 ELSE WIP_37 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_37 ELSE END_37 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_37 ELSE EXP_37 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_37
                      WHEN B.GUBUN = 'RUN' THEN RUN_37
                 END), 0) AS D37
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_38 ELSE WIP_38 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_38 ELSE END_38 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_38 ELSE EXP_38 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_38
                      WHEN B.GUBUN = 'RUN' THEN RUN_38
                 END), 0) AS D38
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_39 ELSE WIP_39 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_39 ELSE END_39 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_39 ELSE EXP_39 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_39
                      WHEN B.GUBUN = 'RUN' THEN RUN_39
                 END), 0) AS D39
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_40 ELSE WIP_40 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_40 ELSE END_40 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_40 ELSE EXP_40 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_40
                      WHEN B.GUBUN = 'RUN' THEN RUN_40
                 END), 0) AS D40
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_41 ELSE WIP_41 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_41 ELSE END_41 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_41 ELSE EXP_41 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_41
                      WHEN B.GUBUN = 'RUN' THEN RUN_41
                 END), 0) AS D41
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_42 ELSE WIP_42 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_42 ELSE END_42 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_42 ELSE EXP_42 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_42
                      WHEN B.GUBUN = 'RUN' THEN RUN_42
                 END), 0) AS D42
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_43 ELSE WIP_43 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_43 ELSE END_43 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_43 ELSE EXP_43 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_43
                      WHEN B.GUBUN = 'RUN' THEN RUN_43
                 END), 0) AS D43
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_44 ELSE WIP_44 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_44 ELSE END_44 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_44 ELSE EXP_44 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_44
                      WHEN B.GUBUN = 'RUN' THEN RUN_44
                 END), 0) AS D44
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_45 ELSE WIP_45 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_45 ELSE END_45 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_45 ELSE EXP_45 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_45
                      WHEN B.GUBUN = 'RUN' THEN RUN_45
                 END), 0) AS D45
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_46 ELSE WIP_46 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_46 ELSE END_46 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_46 ELSE EXP_46 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_46
                      WHEN B.GUBUN = 'RUN' THEN RUN_46
                 END), 0) AS D46
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_47 ELSE WIP_47 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_47 ELSE END_47 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_47 ELSE EXP_47 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_47
                      WHEN B.GUBUN = 'RUN' THEN RUN_47
                 END), 0) AS D47
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_48 ELSE WIP_48 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_48 ELSE END_48 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_48 ELSE EXP_48 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_48
                      WHEN B.GUBUN = 'RUN' THEN RUN_48
                 END), 0) AS D48
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_49 ELSE WIP_49 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_49 ELSE END_49 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_49 ELSE EXP_49 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_49
                      WHEN B.GUBUN = 'RUN' THEN RUN_49
                 END), 0) AS D49
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_50 ELSE WIP_50 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_50 ELSE END_50 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_50 ELSE EXP_50 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_50
                      WHEN B.GUBUN = 'RUN' THEN RUN_50
                 END), 0) AS D50
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_51 ELSE WIP_51 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_51 ELSE END_51 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_51 ELSE EXP_51 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_51
                      WHEN B.GUBUN = 'RUN' THEN RUN_51
                 END), 0) AS D51
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_52 ELSE WIP_52 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_52 ELSE END_52 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_52 ELSE EXP_52 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_52
                      WHEN B.GUBUN = 'RUN' THEN RUN_52
                 END), 0) AS D52
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_53 ELSE WIP_53 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_53 ELSE END_53 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_53 ELSE EXP_53 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_53
                      WHEN B.GUBUN = 'RUN' THEN RUN_53
                 END), 0) AS D53
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_54 ELSE WIP_54 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_54 ELSE END_54 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_54 ELSE EXP_54 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_54
                      WHEN B.GUBUN = 'RUN' THEN RUN_54
                 END), 0) AS D54
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_55 ELSE WIP_55 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_55 ELSE END_55 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_55 ELSE EXP_55 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_55
                      WHEN B.GUBUN = 'RUN' THEN RUN_55
                 END), 0) AS D55
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_56 ELSE WIP_56 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_56 ELSE END_56 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_56 ELSE EXP_56 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_56
                      WHEN B.GUBUN = 'RUN' THEN RUN_56
                 END), 0) AS D56
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_57 ELSE WIP_57 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_57 ELSE END_57 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_57 ELSE EXP_57 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_57
                      WHEN B.GUBUN = 'RUN' THEN RUN_57
                 END), 0) AS D57
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_58 ELSE WIP_58 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_58 ELSE END_58 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_58 ELSE EXP_58 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_58
                      WHEN B.GUBUN = 'RUN' THEN RUN_58
                 END), 0) AS D58
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_59 ELSE WIP_59 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_59 ELSE END_59 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_59 ELSE EXP_59 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_59
                      WHEN B.GUBUN = 'RUN' THEN RUN_59
                 END), 0) AS D59
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_60 ELSE WIP_60 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_60 ELSE END_60 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_60 ELSE EXP_60 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_60
                      WHEN B.GUBUN = 'RUN' THEN RUN_60
                 END), 0) AS D60
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_61 ELSE WIP_61 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_61 ELSE END_61 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_61 ELSE EXP_61 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_61
                      WHEN B.GUBUN = 'RUN' THEN RUN_61
                 END), 0) AS D61
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_62 ELSE WIP_62 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_62 ELSE END_62 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_62 ELSE EXP_62 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_62
                      WHEN B.GUBUN = 'RUN' THEN RUN_62
                 END), 0) AS D62
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_63 ELSE WIP_63 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_63 ELSE END_63 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_63 ELSE EXP_63 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_63
                      WHEN B.GUBUN = 'RUN' THEN RUN_63
                 END), 0) AS D63
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_64 ELSE WIP_64 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_64 ELSE END_64 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_64 ELSE EXP_64 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_64
                      WHEN B.GUBUN = 'RUN' THEN RUN_64
                 END), 0) AS D64
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_65 ELSE WIP_65 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_65 ELSE END_65 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_65 ELSE EXP_65 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_65
                      WHEN B.GUBUN = 'RUN' THEN RUN_65
                 END), 0) AS D65
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_66 ELSE WIP_66 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_66 ELSE END_66 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_66 ELSE EXP_66 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_66
                      WHEN B.GUBUN = 'RUN' THEN RUN_66
                 END), 0) AS D66
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_67 ELSE WIP_67 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_67 ELSE END_67 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_67 ELSE EXP_67 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_67
                      WHEN B.GUBUN = 'RUN' THEN RUN_67
                 END), 0) AS D67
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_68 ELSE WIP_68 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_68 ELSE END_68 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_68 ELSE EXP_68 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_68
                      WHEN B.GUBUN = 'RUN' THEN RUN_68
                 END), 0) AS D68
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_69 ELSE WIP_69 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_69 ELSE END_69 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_69 ELSE EXP_69 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_69
                      WHEN B.GUBUN = 'RUN' THEN RUN_69
                 END), 0) AS D69
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_70 ELSE WIP_70 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_70 ELSE END_70 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_70 ELSE EXP_70 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_70
                      WHEN B.GUBUN = 'RUN' THEN RUN_70
                 END), 0) AS D70
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_71 ELSE WIP_71 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_71 ELSE END_71 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_71 ELSE EXP_71 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_71
                      WHEN B.GUBUN = 'RUN' THEN RUN_71
                 END), 0) AS D71
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_72 ELSE WIP_72 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_72 ELSE END_72 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_72 ELSE EXP_72 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_72
                      WHEN B.GUBUN = 'RUN' THEN RUN_72
                 END), 0) AS D72
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_73 ELSE WIP_73 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_73 ELSE END_73 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_73 ELSE EXP_73 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_73
                      WHEN B.GUBUN = 'RUN' THEN RUN_73
                 END), 0) AS D73
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_74 ELSE WIP_74 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_74 ELSE END_74 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_74 ELSE EXP_74 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_74
                      WHEN B.GUBUN = 'RUN' THEN RUN_74
                 END), 0) AS D74
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_75 ELSE WIP_75 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_75 ELSE END_75 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_75 ELSE EXP_75 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_75
                      WHEN B.GUBUN = 'RUN' THEN RUN_75
                 END), 0) AS D75
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_76 ELSE WIP_76 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_76 ELSE END_76 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_76 ELSE EXP_76 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_76
                      WHEN B.GUBUN = 'RUN' THEN RUN_76
                 END), 0) AS D76
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_77 ELSE WIP_77 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_77 ELSE END_77 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_77 ELSE EXP_77 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_77
                      WHEN B.GUBUN = 'RUN' THEN RUN_77
                 END), 0) AS D77
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_78 ELSE WIP_78 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_78 ELSE END_78 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_78 ELSE EXP_78 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_78
                      WHEN B.GUBUN = 'RUN' THEN RUN_78
                 END), 0) AS D78
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_79 ELSE WIP_79 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_79 ELSE END_79 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_79 ELSE EXP_79 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_79
                      WHEN B.GUBUN = 'RUN' THEN RUN_79
                 END), 0) AS D79
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_80 ELSE WIP_80 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_80 ELSE END_80 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_80 ELSE EXP_80 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_80
                      WHEN B.GUBUN = 'RUN' THEN RUN_80
                 END), 0) AS D80
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_81 ELSE WIP_81 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_81 ELSE END_81 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_81 ELSE EXP_81 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_81
                      WHEN B.GUBUN = 'RUN' THEN RUN_81
                 END), 0) AS D81
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_82 ELSE WIP_82 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_82 ELSE END_82 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_82 ELSE EXP_82 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_82
                      WHEN B.GUBUN = 'RUN' THEN RUN_82
                 END), 0) AS D82
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_83 ELSE WIP_83 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_83 ELSE END_83 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_83 ELSE EXP_83 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_83
                      WHEN B.GUBUN = 'RUN' THEN RUN_83
                 END), 0) AS D83
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_84 ELSE WIP_84 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_84 ELSE END_84 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_84 ELSE EXP_84 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_84
                      WHEN B.GUBUN = 'RUN' THEN RUN_84
                 END), 0) AS D84
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_85 ELSE WIP_85 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_85 ELSE END_85 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_85 ELSE EXP_85 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_85
                      WHEN B.GUBUN = 'RUN' THEN RUN_85
                 END), 0) AS D85
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_86 ELSE WIP_86 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_86 ELSE END_86 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_86 ELSE EXP_86 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_86
                      WHEN B.GUBUN = 'RUN' THEN RUN_86
                 END), 0) AS D86
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_87 ELSE WIP_87 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_87 ELSE END_87 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_87 ELSE EXP_87 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_87
                      WHEN B.GUBUN = 'RUN' THEN RUN_87
                 END), 0) AS D87
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_88 ELSE WIP_88 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_88 ELSE END_88 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_88 ELSE EXP_88 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_88
                      WHEN B.GUBUN = 'RUN' THEN RUN_88
                 END), 0) AS D88
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_89 ELSE WIP_89 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_89 ELSE END_89 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_89 ELSE EXP_89 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_89
                      WHEN B.GUBUN = 'RUN' THEN RUN_89
                 END), 0) AS D89
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_90 ELSE WIP_90 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_90 ELSE END_90 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_90 ELSE EXP_90 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_90
                      WHEN B.GUBUN = 'RUN' THEN RUN_90
                 END), 0) AS D90
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_91 ELSE WIP_91 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_91 ELSE END_91 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_91 ELSE EXP_91 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_91
                      WHEN B.GUBUN = 'RUN' THEN RUN_91
                 END), 0) AS D91
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_92 ELSE WIP_92 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_92 ELSE END_92 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_92 ELSE EXP_92 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_92
                      WHEN B.GUBUN = 'RUN' THEN RUN_92
                 END), 0) AS D92
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_93 ELSE WIP_93 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_93 ELSE END_93 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_93 ELSE EXP_93 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_93
                      WHEN B.GUBUN = 'RUN' THEN RUN_93
                 END), 0) AS D93
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_94 ELSE WIP_94 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_94 ELSE END_94 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_94 ELSE EXP_94 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_94
                      WHEN B.GUBUN = 'RUN' THEN RUN_94
                 END), 0) AS D94
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_95 ELSE WIP_95 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_95 ELSE END_95 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_95 ELSE EXP_95 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_95
                      WHEN B.GUBUN = 'RUN' THEN RUN_95
                 END), 0) AS D95
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_96 ELSE WIP_96 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_96 ELSE END_96 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_96 ELSE EXP_96 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_96
                      WHEN B.GUBUN = 'RUN' THEN RUN_96
                 END), 0) AS D96
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_97 ELSE WIP_97 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_97 ELSE END_97 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_97 ELSE EXP_97 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_97
                      WHEN B.GUBUN = 'RUN' THEN RUN_97
                 END), 0) AS D97
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_98 ELSE WIP_98 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_98 ELSE END_98 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_98 ELSE EXP_98 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_98
                      WHEN B.GUBUN = 'RUN' THEN RUN_98
                 END), 0) AS D98
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_99 ELSE WIP_99 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_99 ELSE END_99 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_99 ELSE EXP_99 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_99
                      WHEN B.GUBUN = 'RUN' THEN RUN_99
                 END), 0) AS D99
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_100 ELSE WIP_100 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_100 ELSE END_100 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_100 ELSE EXP_100 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_100
                      WHEN B.GUBUN = 'RUN' THEN RUN_100
                 END), 0) AS D100
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_101 ELSE WIP_101 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_101 ELSE END_101 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_101 ELSE EXP_101 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_101
                      WHEN B.GUBUN = 'RUN' THEN RUN_101
                 END), 0) AS D101
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_102 ELSE WIP_102 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_102 ELSE END_102 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_102 ELSE EXP_102 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_102
                      WHEN B.GUBUN = 'RUN' THEN RUN_102
                 END), 0) AS D102
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_103 ELSE WIP_103 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_103 ELSE END_103 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_103 ELSE EXP_103 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_103
                      WHEN B.GUBUN = 'RUN' THEN RUN_103
                 END), 0) AS D103
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_104 ELSE WIP_104 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_104 ELSE END_104 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_104 ELSE EXP_104 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_104
                      WHEN B.GUBUN = 'RUN' THEN RUN_104
                 END), 0) AS D104
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_105 ELSE WIP_105 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_105 ELSE END_105 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_105 ELSE EXP_105 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_105
                      WHEN B.GUBUN = 'RUN' THEN RUN_105
                 END), 0) AS D105
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_106 ELSE WIP_106 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_106 ELSE END_106 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_106 ELSE EXP_106 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_106
                      WHEN B.GUBUN = 'RUN' THEN RUN_106
                 END), 0) AS D106
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_107 ELSE WIP_107 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_107 ELSE END_107 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_107 ELSE EXP_107 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_107
                      WHEN B.GUBUN = 'RUN' THEN RUN_107
                 END), 0) AS D107
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_108 ELSE WIP_108 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_108 ELSE END_108 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_108 ELSE EXP_108 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_108
                      WHEN B.GUBUN = 'RUN' THEN RUN_108
                 END), 0) AS D108
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_109 ELSE WIP_109 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_109 ELSE END_109 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_109 ELSE EXP_109 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_109
                      WHEN B.GUBUN = 'RUN' THEN RUN_109
                 END), 0) AS D109
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_110 ELSE WIP_110 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_110 ELSE END_110 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_110 ELSE EXP_110 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_110
                      WHEN B.GUBUN = 'RUN' THEN RUN_110
                 END), 0) AS D110
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_111 ELSE WIP_111 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_111 ELSE END_111 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_111 ELSE EXP_111 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_111
                      WHEN B.GUBUN = 'RUN' THEN RUN_111
                 END), 0) AS D111
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_112 ELSE WIP_112 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_112 ELSE END_112 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_112 ELSE EXP_112 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_112
                      WHEN B.GUBUN = 'RUN' THEN RUN_112
                 END), 0) AS D112
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_113 ELSE WIP_113 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_113 ELSE END_113 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_113 ELSE EXP_113 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_113
                      WHEN B.GUBUN = 'RUN' THEN RUN_113
                 END), 0) AS D113
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_114 ELSE WIP_114 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_114 ELSE END_114 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_114 ELSE EXP_114 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_114
                      WHEN B.GUBUN = 'RUN' THEN RUN_114
                 END), 0) AS D114
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_115 ELSE WIP_115 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_115 ELSE END_115 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_115 ELSE EXP_115 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_115
                      WHEN B.GUBUN = 'RUN' THEN RUN_115
                 END), 0) AS D115
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_116 ELSE WIP_116 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_116 ELSE END_116 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_116 ELSE EXP_116 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_116
                      WHEN B.GUBUN = 'RUN' THEN RUN_116
                 END), 0) AS D116
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_117 ELSE WIP_117 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_117 ELSE END_117 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_117 ELSE EXP_117 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_117
                      WHEN B.GUBUN = 'RUN' THEN RUN_117
                 END), 0) AS D117
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_118 ELSE WIP_118 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_118 ELSE END_118 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_118 ELSE EXP_118 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_118
                      WHEN B.GUBUN = 'RUN' THEN RUN_118
                 END), 0) AS D118
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_119 ELSE WIP_119 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_119 ELSE END_119 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_119 ELSE EXP_119 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_119
                      WHEN B.GUBUN = 'RUN' THEN RUN_119
                 END), 0) AS D119
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_120 ELSE WIP_120 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_120 ELSE END_120 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_120 ELSE EXP_120 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_120
                      WHEN B.GUBUN = 'RUN' THEN RUN_120
                 END), 0) AS D120
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_121 ELSE WIP_121 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_121 ELSE END_121 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_121 ELSE EXP_121 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_121
                      WHEN B.GUBUN = 'RUN' THEN RUN_121
                 END), 0) AS D121
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_122 ELSE WIP_122 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_122 ELSE END_122 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_122 ELSE EXP_122 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_122
                      WHEN B.GUBUN = 'RUN' THEN RUN_122
                 END), 0) AS D122
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_123 ELSE WIP_123 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_123 ELSE END_123 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_123 ELSE EXP_123 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_123
                      WHEN B.GUBUN = 'RUN' THEN RUN_123
                 END), 0) AS D123
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_124 ELSE WIP_124 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_124 ELSE END_124 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_124 ELSE EXP_124 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_124
                      WHEN B.GUBUN = 'RUN' THEN RUN_124
                 END), 0) AS D124
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_125 ELSE WIP_125 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_125 ELSE END_125 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_125 ELSE EXP_125 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_125
                      WHEN B.GUBUN = 'RUN' THEN RUN_125
                 END), 0) AS D125
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_126 ELSE WIP_126 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_126 ELSE END_126 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_126 ELSE EXP_126 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_126
                      WHEN B.GUBUN = 'RUN' THEN RUN_126
                 END), 0) AS D126
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_TTL ELSE WIP_TTL / 1000 END)
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_TTL ELSE END_TTL / 1000 END)
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_TTL ELSE EXP_TTL / 1000 END)
                      WHEN B.GUBUN = '설비대수' THEN RES_TTL
                      WHEN B.GUBUN = 'RUN' THEN RUN_TTL
                 END), 0) AS TTL
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_TTL ELSE WIP_TTL / 1000 END)
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_TTL ELSE END_TTL / 1000 END)
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_TTL ELSE EXP_TTL / 1000 END)
                      WHEN B.GUBUN = '설비대수' THEN RES_TTL
                      WHEN B.GUBUN = 'RUN' THEN RUN_TTL
                 END) / 127, 0) AS AVG
  FROM (
        SELECT *
          FROM (
                SELECT *
                  FROM (
                        SELECT A.*
                             , B.*
                             , NVL((SELECT DATA_10 FROM MGCMTBLDAT WHERE TABLE_NAME = 'H_CUSTOMER' AND FACTORY = 'HMKA1' AND  KEY_1 = B.MAT_GRP_1), '-') AS CUST_TYPE
                             , (SELECT KEY_3 FROM MGCMTBLDAT WHERE FACTORY = 'HMKA1' AND TABLE_NAME = 'H_PKG_2D_CMOLD' AND KEY_1 = 'C-MOLD' AND KEY_2 = B.MAT_GRP_1 AND KEY_3 = B.MAT_CMF_11 AND (KEY_4 = '%' OR KEY_4 = B.MAT_ID)) AS KEY_3
                          FROM (
                                SELECT DECODE(LEVEL, 1, 'STOCK', 2, 'LAMI', 3, 'Stealth Saw', 4, 'BG', 5, 'DDS', 6, 'SAW', 7, 'DA(Epoxy)', 8, 'DA(DFN)', 9, 'WB', 10, 'C-MOLD', 11, 'SST', 12, 'HMK3') AS OPER_GRP
                                  FROM DUAL CONNECT BY LEVEL <= 12 
                               ) A 
                             , MWIPMATDEF B 
                         WHERE B.FACTORY = 'HMKA1'
                           AND B.MAT_TYPE = 'FG'
                           AND B.DELETE_FLAG = ' '
                       )
                 WHERE (OPER_GRP <> 'C-MOLD' OR KEY_3 IS NOT NULL)
               ) MAT
             , (
                SELECT MAT_ID AS END_MAT_ID
                     , OPER_GRP AS END_OPER_GRP
                     , SUM(CONV_END_QTY) AS END_TTL
                     , SUM(DECODE(WORK_DATE, '20200403', 0, CONV_END_QTY)) + (SUM(DECODE(WORK_DATE, '20200403', CONV_END_QTY , 0)) / 18.8811759204167 * 24) AS EXP_TTL
                     , SUM(DECODE(WORK_DATE, '20191129', CONV_END_QTY, 0)) AS END_0
                     , SUM(DECODE(WORK_DATE, '20191130', CONV_END_QTY, 0)) AS END_1
                     , SUM(DECODE(WORK_DATE, '20191201', CONV_END_QTY, 0)) AS END_2
                     , SUM(DECODE(WORK_DATE, '20191202', CONV_END_QTY, 0)) AS END_3
                     , SUM(DECODE(WORK_DATE, '20191203', CONV_END_QTY, 0)) AS END_4
                     , SUM(DECODE(WORK_DATE, '20191204', CONV_END_QTY, 0)) AS END_5
                     , SUM(DECODE(WORK_DATE, '20191205', CONV_END_QTY, 0)) AS END_6
                     , SUM(DECODE(WORK_DATE, '20191206', CONV_END_QTY, 0)) AS END_7
                     , SUM(DECODE(WORK_DATE, '20191207', CONV_END_QTY, 0)) AS END_8
                     , SUM(DECODE(WORK_DATE, '20191208', CONV_END_QTY, 0)) AS END_9
                     , SUM(DECODE(WORK_DATE, '20191209', CONV_END_QTY, 0)) AS END_10
                     , SUM(DECODE(WORK_DATE, '20191210', CONV_END_QTY, 0)) AS END_11
                     , SUM(DECODE(WORK_DATE, '20191211', CONV_END_QTY, 0)) AS END_12
                     , SUM(DECODE(WORK_DATE, '20191212', CONV_END_QTY, 0)) AS END_13
                     , SUM(DECODE(WORK_DATE, '20191213', CONV_END_QTY, 0)) AS END_14
                     , SUM(DECODE(WORK_DATE, '20191214', CONV_END_QTY, 0)) AS END_15
                     , SUM(DECODE(WORK_DATE, '20191215', CONV_END_QTY, 0)) AS END_16
                     , SUM(DECODE(WORK_DATE, '20191216', CONV_END_QTY, 0)) AS END_17
                     , SUM(DECODE(WORK_DATE, '20191217', CONV_END_QTY, 0)) AS END_18
                     , SUM(DECODE(WORK_DATE, '20191218', CONV_END_QTY, 0)) AS END_19
                     , SUM(DECODE(WORK_DATE, '20191219', CONV_END_QTY, 0)) AS END_20
                     , SUM(DECODE(WORK_DATE, '20191220', CONV_END_QTY, 0)) AS END_21
                     , SUM(DECODE(WORK_DATE, '20191221', CONV_END_QTY, 0)) AS END_22
                     , SUM(DECODE(WORK_DATE, '20191222', CONV_END_QTY, 0)) AS END_23
                     , SUM(DECODE(WORK_DATE, '20191223', CONV_END_QTY, 0)) AS END_24
                     , SUM(DECODE(WORK_DATE, '20191224', CONV_END_QTY, 0)) AS END_25
                     , SUM(DECODE(WORK_DATE, '20191225', CONV_END_QTY, 0)) AS END_26
                     , SUM(DECODE(WORK_DATE, '20191226', CONV_END_QTY, 0)) AS END_27
                     , SUM(DECODE(WORK_DATE, '20191227', CONV_END_QTY, 0)) AS END_28
                     , SUM(DECODE(WORK_DATE, '20191228', CONV_END_QTY, 0)) AS END_29
                     , SUM(DECODE(WORK_DATE, '20191229', CONV_END_QTY, 0)) AS END_30
                     , SUM(DECODE(WORK_DATE, '20191230', CONV_END_QTY, 0)) AS END_31
                     , SUM(DECODE(WORK_DATE, '20191231', CONV_END_QTY, 0)) AS END_32
                     , SUM(DECODE(WORK_DATE, '20200101', CONV_END_QTY, 0)) AS END_33
                     , SUM(DECODE(WORK_DATE, '20200102', CONV_END_QTY, 0)) AS END_34
                     , SUM(DECODE(WORK_DATE, '20200103', CONV_END_QTY, 0)) AS END_35
                     , SUM(DECODE(WORK_DATE, '20200104', CONV_END_QTY, 0)) AS END_36
                     , SUM(DECODE(WORK_DATE, '20200105', CONV_END_QTY, 0)) AS END_37
                     , SUM(DECODE(WORK_DATE, '20200106', CONV_END_QTY, 0)) AS END_38
                     , SUM(DECODE(WORK_DATE, '20200107', CONV_END_QTY, 0)) AS END_39
                     , SUM(DECODE(WORK_DATE, '20200108', CONV_END_QTY, 0)) AS END_40
                     , SUM(DECODE(WORK_DATE, '20200109', CONV_END_QTY, 0)) AS END_41
                     , SUM(DECODE(WORK_DATE, '20200110', CONV_END_QTY, 0)) AS END_42
                     , SUM(DECODE(WORK_DATE, '20200111', CONV_END_QTY, 0)) AS END_43
                     , SUM(DECODE(WORK_DATE, '20200112', CONV_END_QTY, 0)) AS END_44
                     , SUM(DECODE(WORK_DATE, '20200113', CONV_END_QTY, 0)) AS END_45
                     , SUM(DECODE(WORK_DATE, '20200114', CONV_END_QTY, 0)) AS END_46
                     , SUM(DECODE(WORK_DATE, '20200115', CONV_END_QTY, 0)) AS END_47
                     , SUM(DECODE(WORK_DATE, '20200116', CONV_END_QTY, 0)) AS END_48
                     , SUM(DECODE(WORK_DATE, '20200117', CONV_END_QTY, 0)) AS END_49
                     , SUM(DECODE(WORK_DATE, '20200118', CONV_END_QTY, 0)) AS END_50
                     , SUM(DECODE(WORK_DATE, '20200119', CONV_END_QTY, 0)) AS END_51
                     , SUM(DECODE(WORK_DATE, '20200120', CONV_END_QTY, 0)) AS END_52
                     , SUM(DECODE(WORK_DATE, '20200121', CONV_END_QTY, 0)) AS END_53
                     , SUM(DECODE(WORK_DATE, '20200122', CONV_END_QTY, 0)) AS END_54
                     , SUM(DECODE(WORK_DATE, '20200123', CONV_END_QTY, 0)) AS END_55
                     , SUM(DECODE(WORK_DATE, '20200124', CONV_END_QTY, 0)) AS END_56
                     , SUM(DECODE(WORK_DATE, '20200125', CONV_END_QTY, 0)) AS END_57
                     , SUM(DECODE(WORK_DATE, '20200126', CONV_END_QTY, 0)) AS END_58
                     , SUM(DECODE(WORK_DATE, '20200127', CONV_END_QTY, 0)) AS END_59
                     , SUM(DECODE(WORK_DATE, '20200128', CONV_END_QTY, 0)) AS END_60
                     , SUM(DECODE(WORK_DATE, '20200129', CONV_END_QTY, 0)) AS END_61
                     , SUM(DECODE(WORK_DATE, '20200130', CONV_END_QTY, 0)) AS END_62
                     , SUM(DECODE(WORK_DATE, '20200131', CONV_END_QTY, 0)) AS END_63
                     , SUM(DECODE(WORK_DATE, '20200201', CONV_END_QTY, 0)) AS END_64
                     , SUM(DECODE(WORK_DATE, '20200202', CONV_END_QTY, 0)) AS END_65
                     , SUM(DECODE(WORK_DATE, '20200203', CONV_END_QTY, 0)) AS END_66
                     , SUM(DECODE(WORK_DATE, '20200204', CONV_END_QTY, 0)) AS END_67
                     , SUM(DECODE(WORK_DATE, '20200205', CONV_END_QTY, 0)) AS END_68
                     , SUM(DECODE(WORK_DATE, '20200206', CONV_END_QTY, 0)) AS END_69
                     , SUM(DECODE(WORK_DATE, '20200207', CONV_END_QTY, 0)) AS END_70
                     , SUM(DECODE(WORK_DATE, '20200208', CONV_END_QTY, 0)) AS END_71
                     , SUM(DECODE(WORK_DATE, '20200209', CONV_END_QTY, 0)) AS END_72
                     , SUM(DECODE(WORK_DATE, '20200210', CONV_END_QTY, 0)) AS END_73
                     , SUM(DECODE(WORK_DATE, '20200211', CONV_END_QTY, 0)) AS END_74
                     , SUM(DECODE(WORK_DATE, '20200212', CONV_END_QTY, 0)) AS END_75
                     , SUM(DECODE(WORK_DATE, '20200213', CONV_END_QTY, 0)) AS END_76
                     , SUM(DECODE(WORK_DATE, '20200214', CONV_END_QTY, 0)) AS END_77
                     , SUM(DECODE(WORK_DATE, '20200215', CONV_END_QTY, 0)) AS END_78
                     , SUM(DECODE(WORK_DATE, '20200216', CONV_END_QTY, 0)) AS END_79
                     , SUM(DECODE(WORK_DATE, '20200217', CONV_END_QTY, 0)) AS END_80
                     , SUM(DECODE(WORK_DATE, '20200218', CONV_END_QTY, 0)) AS END_81
                     , SUM(DECODE(WORK_DATE, '20200219', CONV_END_QTY, 0)) AS END_82
                     , SUM(DECODE(WORK_DATE, '20200220', CONV_END_QTY, 0)) AS END_83
                     , SUM(DECODE(WORK_DATE, '20200221', CONV_END_QTY, 0)) AS END_84
                     , SUM(DECODE(WORK_DATE, '20200222', CONV_END_QTY, 0)) AS END_85
                     , SUM(DECODE(WORK_DATE, '20200223', CONV_END_QTY, 0)) AS END_86
                     , SUM(DECODE(WORK_DATE, '20200224', CONV_END_QTY, 0)) AS END_87
                     , SUM(DECODE(WORK_DATE, '20200225', CONV_END_QTY, 0)) AS END_88
                     , SUM(DECODE(WORK_DATE, '20200226', CONV_END_QTY, 0)) AS END_89
                     , SUM(DECODE(WORK_DATE, '20200227', CONV_END_QTY, 0)) AS END_90
                     , SUM(DECODE(WORK_DATE, '20200228', CONV_END_QTY, 0)) AS END_91
                     , SUM(DECODE(WORK_DATE, '20200229', CONV_END_QTY, 0)) AS END_92
                     , SUM(DECODE(WORK_DATE, '20200301', CONV_END_QTY, 0)) AS END_93
                     , SUM(DECODE(WORK_DATE, '20200302', CONV_END_QTY, 0)) AS END_94
                     , SUM(DECODE(WORK_DATE, '20200303', CONV_END_QTY, 0)) AS END_95
                     , SUM(DECODE(WORK_DATE, '20200304', CONV_END_QTY, 0)) AS END_96
                     , SUM(DECODE(WORK_DATE, '20200305', CONV_END_QTY, 0)) AS END_97
                     , SUM(DECODE(WORK_DATE, '20200306', CONV_END_QTY, 0)) AS END_98
                     , SUM(DECODE(WORK_DATE, '20200307', CONV_END_QTY, 0)) AS END_99
                     , SUM(DECODE(WORK_DATE, '20200308', CONV_END_QTY, 0)) AS END_100
                     , SUM(DECODE(WORK_DATE, '20200309', CONV_END_QTY, 0)) AS END_101
                     , SUM(DECODE(WORK_DATE, '20200310', CONV_END_QTY, 0)) AS END_102
                     , SUM(DECODE(WORK_DATE, '20200311', CONV_END_QTY, 0)) AS END_103
                     , SUM(DECODE(WORK_DATE, '20200312', CONV_END_QTY, 0)) AS END_104
                     , SUM(DECODE(WORK_DATE, '20200313', CONV_END_QTY, 0)) AS END_105
                     , SUM(DECODE(WORK_DATE, '20200314', CONV_END_QTY, 0)) AS END_106
                     , SUM(DECODE(WORK_DATE, '20200315', CONV_END_QTY, 0)) AS END_107
                     , SUM(DECODE(WORK_DATE, '20200316', CONV_END_QTY, 0)) AS END_108
                     , SUM(DECODE(WORK_DATE, '20200317', CONV_END_QTY, 0)) AS END_109
                     , SUM(DECODE(WORK_DATE, '20200318', CONV_END_QTY, 0)) AS END_110
                     , SUM(DECODE(WORK_DATE, '20200319', CONV_END_QTY, 0)) AS END_111
                     , SUM(DECODE(WORK_DATE, '20200320', CONV_END_QTY, 0)) AS END_112
                     , SUM(DECODE(WORK_DATE, '20200321', CONV_END_QTY, 0)) AS END_113
                     , SUM(DECODE(WORK_DATE, '20200322', CONV_END_QTY, 0)) AS END_114
                     , SUM(DECODE(WORK_DATE, '20200323', CONV_END_QTY, 0)) AS END_115
                     , SUM(DECODE(WORK_DATE, '20200324', CONV_END_QTY, 0)) AS END_116
                     , SUM(DECODE(WORK_DATE, '20200325', CONV_END_QTY, 0)) AS END_117
                     , SUM(DECODE(WORK_DATE, '20200326', CONV_END_QTY, 0)) AS END_118
                     , SUM(DECODE(WORK_DATE, '20200327', CONV_END_QTY, 0)) AS END_119
                     , SUM(DECODE(WORK_DATE, '20200328', CONV_END_QTY, 0)) AS END_120
                     , SUM(DECODE(WORK_DATE, '20200329', CONV_END_QTY, 0)) AS END_121
                     , SUM(DECODE(WORK_DATE, '20200330', CONV_END_QTY, 0)) AS END_122
                     , SUM(DECODE(WORK_DATE, '20200331', CONV_END_QTY, 0)) AS END_123
                     , SUM(DECODE(WORK_DATE, '20200401', CONV_END_QTY, 0)) AS END_124
                     , SUM(DECODE(WORK_DATE, '20200402', CONV_END_QTY, 0)) AS END_125
                     , SUM(DECODE(WORK_DATE, '20200403', CONV_END_QTY, 0)) AS END_126
                     , SUM(DECODE(WORK_DATE, '20191129', CONV_END_QTY, 0)) AS EXP_0
                     , SUM(DECODE(WORK_DATE, '20191130', CONV_END_QTY, 0)) AS EXP_1
                     , SUM(DECODE(WORK_DATE, '20191201', CONV_END_QTY, 0)) AS EXP_2
                     , SUM(DECODE(WORK_DATE, '20191202', CONV_END_QTY, 0)) AS EXP_3
                     , SUM(DECODE(WORK_DATE, '20191203', CONV_END_QTY, 0)) AS EXP_4
                     , SUM(DECODE(WORK_DATE, '20191204', CONV_END_QTY, 0)) AS EXP_5
                     , SUM(DECODE(WORK_DATE, '20191205', CONV_END_QTY, 0)) AS EXP_6
                     , SUM(DECODE(WORK_DATE, '20191206', CONV_END_QTY, 0)) AS EXP_7
                     , SUM(DECODE(WORK_DATE, '20191207', CONV_END_QTY, 0)) AS EXP_8
                     , SUM(DECODE(WORK_DATE, '20191208', CONV_END_QTY, 0)) AS EXP_9
                     , SUM(DECODE(WORK_DATE, '20191209', CONV_END_QTY, 0)) AS EXP_10
                     , SUM(DECODE(WORK_DATE, '20191210', CONV_END_QTY, 0)) AS EXP_11
                     , SUM(DECODE(WORK_DATE, '20191211', CONV_END_QTY, 0)) AS EXP_12
                     , SUM(DECODE(WORK_DATE, '20191212', CONV_END_QTY, 0)) AS EXP_13
                     , SUM(DECODE(WORK_DATE, '20191213', CONV_END_QTY, 0)) AS EXP_14
                     , SUM(DECODE(WORK_DATE, '20191214', CONV_END_QTY, 0)) AS EXP_15
                     , SUM(DECODE(WORK_DATE, '20191215', CONV_END_QTY, 0)) AS EXP_16
                     , SUM(DECODE(WORK_DATE, '20191216', CONV_END_QTY, 0)) AS EXP_17
                     , SUM(DECODE(WORK_DATE, '20191217', CONV_END_QTY, 0)) AS EXP_18
                     , SUM(DECODE(WORK_DATE, '20191218', CONV_END_QTY, 0)) AS EXP_19
                     , SUM(DECODE(WORK_DATE, '20191219', CONV_END_QTY, 0)) AS EXP_20
                     , SUM(DECODE(WORK_DATE, '20191220', CONV_END_QTY, 0)) AS EXP_21
                     , SUM(DECODE(WORK_DATE, '20191221', CONV_END_QTY, 0)) AS EXP_22
                     , SUM(DECODE(WORK_DATE, '20191222', CONV_END_QTY, 0)) AS EXP_23
                     , SUM(DECODE(WORK_DATE, '20191223', CONV_END_QTY, 0)) AS EXP_24
                     , SUM(DECODE(WORK_DATE, '20191224', CONV_END_QTY, 0)) AS EXP_25
                     , SUM(DECODE(WORK_DATE, '20191225', CONV_END_QTY, 0)) AS EXP_26
                     , SUM(DECODE(WORK_DATE, '20191226', CONV_END_QTY, 0)) AS EXP_27
                     , SUM(DECODE(WORK_DATE, '20191227', CONV_END_QTY, 0)) AS EXP_28
                     , SUM(DECODE(WORK_DATE, '20191228', CONV_END_QTY, 0)) AS EXP_29
                     , SUM(DECODE(WORK_DATE, '20191229', CONV_END_QTY, 0)) AS EXP_30
                     , SUM(DECODE(WORK_DATE, '20191230', CONV_END_QTY, 0)) AS EXP_31
                     , SUM(DECODE(WORK_DATE, '20191231', CONV_END_QTY, 0)) AS EXP_32
                     , SUM(DECODE(WORK_DATE, '20200101', CONV_END_QTY, 0)) AS EXP_33
                     , SUM(DECODE(WORK_DATE, '20200102', CONV_END_QTY, 0)) AS EXP_34
                     , SUM(DECODE(WORK_DATE, '20200103', CONV_END_QTY, 0)) AS EXP_35
                     , SUM(DECODE(WORK_DATE, '20200104', CONV_END_QTY, 0)) AS EXP_36
                     , SUM(DECODE(WORK_DATE, '20200105', CONV_END_QTY, 0)) AS EXP_37
                     , SUM(DECODE(WORK_DATE, '20200106', CONV_END_QTY, 0)) AS EXP_38
                     , SUM(DECODE(WORK_DATE, '20200107', CONV_END_QTY, 0)) AS EXP_39
                     , SUM(DECODE(WORK_DATE, '20200108', CONV_END_QTY, 0)) AS EXP_40
                     , SUM(DECODE(WORK_DATE, '20200109', CONV_END_QTY, 0)) AS EXP_41
                     , SUM(DECODE(WORK_DATE, '20200110', CONV_END_QTY, 0)) AS EXP_42
                     , SUM(DECODE(WORK_DATE, '20200111', CONV_END_QTY, 0)) AS EXP_43
                     , SUM(DECODE(WORK_DATE, '20200112', CONV_END_QTY, 0)) AS EXP_44
                     , SUM(DECODE(WORK_DATE, '20200113', CONV_END_QTY, 0)) AS EXP_45
                     , SUM(DECODE(WORK_DATE, '20200114', CONV_END_QTY, 0)) AS EXP_46
                     , SUM(DECODE(WORK_DATE, '20200115', CONV_END_QTY, 0)) AS EXP_47
                     , SUM(DECODE(WORK_DATE, '20200116', CONV_END_QTY, 0)) AS EXP_48
                     , SUM(DECODE(WORK_DATE, '20200117', CONV_END_QTY, 0)) AS EXP_49
                     , SUM(DECODE(WORK_DATE, '20200118', CONV_END_QTY, 0)) AS EXP_50
                     , SUM(DECODE(WORK_DATE, '20200119', CONV_END_QTY, 0)) AS EXP_51
                     , SUM(DECODE(WORK_DATE, '20200120', CONV_END_QTY, 0)) AS EXP_52
                     , SUM(DECODE(WORK_DATE, '20200121', CONV_END_QTY, 0)) AS EXP_53
                     , SUM(DECODE(WORK_DATE, '20200122', CONV_END_QTY, 0)) AS EXP_54
                     , SUM(DECODE(WORK_DATE, '20200123', CONV_END_QTY, 0)) AS EXP_55
                     , SUM(DECODE(WORK_DATE, '20200124', CONV_END_QTY, 0)) AS EXP_56
                     , SUM(DECODE(WORK_DATE, '20200125', CONV_END_QTY, 0)) AS EXP_57
                     , SUM(DECODE(WORK_DATE, '20200126', CONV_END_QTY, 0)) AS EXP_58
                     , SUM(DECODE(WORK_DATE, '20200127', CONV_END_QTY, 0)) AS EXP_59
                     , SUM(DECODE(WORK_DATE, '20200128', CONV_END_QTY, 0)) AS EXP_60
                     , SUM(DECODE(WORK_DATE, '20200129', CONV_END_QTY, 0)) AS EXP_61
                     , SUM(DECODE(WORK_DATE, '20200130', CONV_END_QTY, 0)) AS EXP_62
                     , SUM(DECODE(WORK_DATE, '20200131', CONV_END_QTY, 0)) AS EXP_63
                     , SUM(DECODE(WORK_DATE, '20200201', CONV_END_QTY, 0)) AS EXP_64
                     , SUM(DECODE(WORK_DATE, '20200202', CONV_END_QTY, 0)) AS EXP_65
                     , SUM(DECODE(WORK_DATE, '20200203', CONV_END_QTY, 0)) AS EXP_66
                     , SUM(DECODE(WORK_DATE, '20200204', CONV_END_QTY, 0)) AS EXP_67
                     , SUM(DECODE(WORK_DATE, '20200205', CONV_END_QTY, 0)) AS EXP_68
                     , SUM(DECODE(WORK_DATE, '20200206', CONV_END_QTY, 0)) AS EXP_69
                     , SUM(DECODE(WORK_DATE, '20200207', CONV_END_QTY, 0)) AS EXP_70
                     , SUM(DECODE(WORK_DATE, '20200208', CONV_END_QTY, 0)) AS EXP_71
                     , SUM(DECODE(WORK_DATE, '20200209', CONV_END_QTY, 0)) AS EXP_72
                     , SUM(DECODE(WORK_DATE, '20200210', CONV_END_QTY, 0)) AS EXP_73
                     , SUM(DECODE(WORK_DATE, '20200211', CONV_END_QTY, 0)) AS EXP_74
                     , SUM(DECODE(WORK_DATE, '20200212', CONV_END_QTY, 0)) AS EXP_75
                     , SUM(DECODE(WORK_DATE, '20200213', CONV_END_QTY, 0)) AS EXP_76
                     , SUM(DECODE(WORK_DATE, '20200214', CONV_END_QTY, 0)) AS EXP_77
                     , SUM(DECODE(WORK_DATE, '20200215', CONV_END_QTY, 0)) AS EXP_78
                     , SUM(DECODE(WORK_DATE, '20200216', CONV_END_QTY, 0)) AS EXP_79
                     , SUM(DECODE(WORK_DATE, '20200217', CONV_END_QTY, 0)) AS EXP_80
                     , SUM(DECODE(WORK_DATE, '20200218', CONV_END_QTY, 0)) AS EXP_81
                     , SUM(DECODE(WORK_DATE, '20200219', CONV_END_QTY, 0)) AS EXP_82
                     , SUM(DECODE(WORK_DATE, '20200220', CONV_END_QTY, 0)) AS EXP_83
                     , SUM(DECODE(WORK_DATE, '20200221', CONV_END_QTY, 0)) AS EXP_84
                     , SUM(DECODE(WORK_DATE, '20200222', CONV_END_QTY, 0)) AS EXP_85
                     , SUM(DECODE(WORK_DATE, '20200223', CONV_END_QTY, 0)) AS EXP_86
                     , SUM(DECODE(WORK_DATE, '20200224', CONV_END_QTY, 0)) AS EXP_87
                     , SUM(DECODE(WORK_DATE, '20200225', CONV_END_QTY, 0)) AS EXP_88
                     , SUM(DECODE(WORK_DATE, '20200226', CONV_END_QTY, 0)) AS EXP_89
                     , SUM(DECODE(WORK_DATE, '20200227', CONV_END_QTY, 0)) AS EXP_90
                     , SUM(DECODE(WORK_DATE, '20200228', CONV_END_QTY, 0)) AS EXP_91
                     , SUM(DECODE(WORK_DATE, '20200229', CONV_END_QTY, 0)) AS EXP_92
                     , SUM(DECODE(WORK_DATE, '20200301', CONV_END_QTY, 0)) AS EXP_93
                     , SUM(DECODE(WORK_DATE, '20200302', CONV_END_QTY, 0)) AS EXP_94
                     , SUM(DECODE(WORK_DATE, '20200303', CONV_END_QTY, 0)) AS EXP_95
                     , SUM(DECODE(WORK_DATE, '20200304', CONV_END_QTY, 0)) AS EXP_96
                     , SUM(DECODE(WORK_DATE, '20200305', CONV_END_QTY, 0)) AS EXP_97
                     , SUM(DECODE(WORK_DATE, '20200306', CONV_END_QTY, 0)) AS EXP_98
                     , SUM(DECODE(WORK_DATE, '20200307', CONV_END_QTY, 0)) AS EXP_99
                     , SUM(DECODE(WORK_DATE, '20200308', CONV_END_QTY, 0)) AS EXP_100
                     , SUM(DECODE(WORK_DATE, '20200309', CONV_END_QTY, 0)) AS EXP_101
                     , SUM(DECODE(WORK_DATE, '20200310', CONV_END_QTY, 0)) AS EXP_102
                     , SUM(DECODE(WORK_DATE, '20200311', CONV_END_QTY, 0)) AS EXP_103
                     , SUM(DECODE(WORK_DATE, '20200312', CONV_END_QTY, 0)) AS EXP_104
                     , SUM(DECODE(WORK_DATE, '20200313', CONV_END_QTY, 0)) AS EXP_105
                     , SUM(DECODE(WORK_DATE, '20200314', CONV_END_QTY, 0)) AS EXP_106
                     , SUM(DECODE(WORK_DATE, '20200315', CONV_END_QTY, 0)) AS EXP_107
                     , SUM(DECODE(WORK_DATE, '20200316', CONV_END_QTY, 0)) AS EXP_108
                     , SUM(DECODE(WORK_DATE, '20200317', CONV_END_QTY, 0)) AS EXP_109
                     , SUM(DECODE(WORK_DATE, '20200318', CONV_END_QTY, 0)) AS EXP_110
                     , SUM(DECODE(WORK_DATE, '20200319', CONV_END_QTY, 0)) AS EXP_111
                     , SUM(DECODE(WORK_DATE, '20200320', CONV_END_QTY, 0)) AS EXP_112
                     , SUM(DECODE(WORK_DATE, '20200321', CONV_END_QTY, 0)) AS EXP_113
                     , SUM(DECODE(WORK_DATE, '20200322', CONV_END_QTY, 0)) AS EXP_114
                     , SUM(DECODE(WORK_DATE, '20200323', CONV_END_QTY, 0)) AS EXP_115
                     , SUM(DECODE(WORK_DATE, '20200324', CONV_END_QTY, 0)) AS EXP_116
                     , SUM(DECODE(WORK_DATE, '20200325', CONV_END_QTY, 0)) AS EXP_117
                     , SUM(DECODE(WORK_DATE, '20200326', CONV_END_QTY, 0)) AS EXP_118
                     , SUM(DECODE(WORK_DATE, '20200327', CONV_END_QTY, 0)) AS EXP_119
                     , SUM(DECODE(WORK_DATE, '20200328', CONV_END_QTY, 0)) AS EXP_120
                     , SUM(DECODE(WORK_DATE, '20200329', CONV_END_QTY, 0)) AS EXP_121
                     , SUM(DECODE(WORK_DATE, '20200330', CONV_END_QTY, 0)) AS EXP_122
                     , SUM(DECODE(WORK_DATE, '20200331', CONV_END_QTY, 0)) AS EXP_123
                     , SUM(DECODE(WORK_DATE, '20200401', CONV_END_QTY, 0)) AS EXP_124
                     , SUM(DECODE(WORK_DATE, '20200402', CONV_END_QTY, 0)) AS EXP_125
                     , SUM(DECODE(WORK_DATE, '20200403', CONV_END_QTY, 0)) / 18.8811759204167 * 24 AS EXP_126
                  FROM (
                        SELECT A.MAT_ID
                             , A.WORK_DATE
                             , CASE WHEN A.OPER = 'A0033' THEN 'Stealth Saw'
                                    WHEN A.OPER IN ('A0040', 'A0030') THEN 'BG'
                                    WHEN A.OPER = 'A0230' THEN 'DDS'
                                    WHEN A.OPER = 'A1000' THEN 'C-MOLD'
                                    WHEN A.OPER LIKE 'A060%' THEN 'WB'
                                    WHEN A.OPER IN ('A1750', 'A1825') THEN 'SST'
                                    WHEN A.OPER = 'A0200' THEN 'SAW'
                                    WHEN A.OPER LIKE 'A040%' AND B.MAT_GRP_2 = 'DFN' THEN 'DA(DFN)'
                                    WHEN A.OPER LIKE 'A040%' AND E.DA_TYPE = 'Epoxy' THEN 'DA(Epoxy)'
                                    WHEN A.OPER = 'A0000' THEN 'STOCK'
                                    WHEN A.OPER = 'A0020' THEN 'LAMI'
                                    WHEN A.OPER = 'AZ010' THEN 'HMK3'
                                    ELSE ''
                               END OPER_GRP
                             , CASE WHEN A.OPER = 'AZ010' THEN DECODE(B.MAT_GRP_3, 'COB', 0, 'BGN', 0, (S1_MOVE_QTY_1+S2_MOVE_QTY_1+S3_MOVE_QTY_1))
                                    WHEN A.OPER = 'A0000' THEN (S1_OPER_IN_QTY_1+S2_OPER_IN_QTY_1+S3_OPER_IN_QTY_1)
                                    ELSE (S1_END_QTY_1+S2_END_QTY_1+S3_END_QTY_1)
                               END AS END_QTY
                             , CASE WHEN A.OPER = 'A0000' THEN (S1_OPER_IN_QTY_2+S2_OPER_IN_QTY_2+S3_OPER_IN_QTY_2)
                                    WHEN A.OPER IN ('A0033', 'A0040', 'A0230', 'A0030', 'A0200', 'A0020') THEN (S1_END_QTY_2+S2_END_QTY_2+S3_END_QTY_2)
                                    WHEN A.OPER LIKE 'A040%' AND B.MAT_ID LIKE 'SEK%' THEN (S1_END_QTY_1+S2_END_QTY_1+S3_END_QTY_1) * NVL(C.DATA_1,1)
                                    WHEN A.OPER LIKE 'A040%' AND (B.MAT_GRP_5 IN ('1st', 'Merge') OR B.MAT_GRP_5 LIKE 'Middle%') THEN (S1_END_QTY_1+S2_END_QTY_1+S3_END_QTY_1) * NVL(C.DATA_1,1)
                                    WHEN A.OPER LIKE 'A060%' THEN (S1_END_QTY_1+S2_END_QTY_1+S3_END_QTY_1) * (CASE WHEN D.WIRE_CNT IS NOT NULL THEN D.WIRE_CNT
                                                                                           WHEN B.MAT_GRP_6 NOT IN ('-','0') THEN B.MAT_GRP_6
                                                                                           ELSE '1' END)
                                    WHEN A.OPER = 'AZ010' THEN DECODE(B.MAT_GRP_3, 'COB', 0, 'BGN', 0, (S1_MOVE_QTY_1+S2_MOVE_QTY_1+S3_MOVE_QTY_1))
                                    ELSE (S1_END_QTY_1+S2_END_QTY_1+S3_END_QTY_1)
                               END AS CONV_END_QTY
                          FROM RSUMWIPMOV A
                             , MWIPMATDEF B
                             , (
                                SELECT KEY_1 AS MAT_ID, DATA_1
                                  FROM MGCMTBLDAT 
                                 WHERE FACTORY = 'HMKA1'
                                   AND TABLE_NAME IN ('H_SEC_AUTO_LOSS','H_HX_AUTO_LOSS')
                               ) C
                             , (
                                SELECT MAT_ID, OPER, TCD_CMF_2 AS WIRE_CNT
                                  FROM CWIPTCDDEF@RPTTOMES 
                                 WHERE FACTORY = 'HMKA1'
                                   AND OPER LIKE 'A060%'
                                   AND SET_FLAG = 'Y'
                                   AND TCD_CMF_2 <> ' '
                               ) D
                             , (
                                SELECT KEY_1 AS MAT_GRP_2, DATA_2 AS DA_TYPE
                                  FROM MGCMTBLDAT 
                                 WHERE FACTORY = 'HMKA1'
                                   AND TABLE_NAME = 'H_FAMILY'
                               ) E
                         WHERE 1=1
                           AND A.FACTORY = B.FACTORY
                           AND A.MAT_ID = B.MAT_ID
                           AND A.MAT_ID = C.MAT_ID(+)
                           AND A.MAT_ID = D.MAT_ID(+)
                           AND A.OPER = D.OPER(+)
                           AND B.MAT_GRP_2 = E.MAT_GRP_2(+)
                           AND A.FACTORY = 'HMKA1'
                           AND A.WORK_DATE BETWEEN '20191129' AND '20200403'
                           AND A.LOT_TYPE = 'W'
                           AND B.DELETE_FLAG = ' '
                           AND B.MAT_TYPE = 'FG'
                           AND A.FACTORY NOT IN ('RETURN') 
                           AND A.CM_KEY_3 LIKE 'P%' 
                           AND REGEXP_LIKE(A.OPER, 'A040*|A0033|A0040|A0230|A1000|A060*|A1750|A0030|A0000|A0020|AZ010|A1825|A0200')
                       )
                 GROUP BY MAT_ID, OPER_GRP
               ) SHP
             , (
                SELECT MAT_ID AS WIP_MAT_ID
                     , OPER_GRP AS WIP_OPER_GRP
                     , SUM(CONV_WIP_QTY) AS WIP_TTL
                     , SUM(DECODE(WORK_DATE, '20191129', CONV_WIP_QTY, 0)) AS WIP_0
                     , SUM(DECODE(WORK_DATE, '20191130', CONV_WIP_QTY, 0)) AS WIP_1
                     , SUM(DECODE(WORK_DATE, '20191201', CONV_WIP_QTY, 0)) AS WIP_2
                     , SUM(DECODE(WORK_DATE, '20191202', CONV_WIP_QTY, 0)) AS WIP_3
                     , SUM(DECODE(WORK_DATE, '20191203', CONV_WIP_QTY, 0)) AS WIP_4
                     , SUM(DECODE(WORK_DATE, '20191204', CONV_WIP_QTY, 0)) AS WIP_5
                     , SUM(DECODE(WORK_DATE, '20191205', CONV_WIP_QTY, 0)) AS WIP_6
                     , SUM(DECODE(WORK_DATE, '20191206', CONV_WIP_QTY, 0)) AS WIP_7
                     , SUM(DECODE(WORK_DATE, '20191207', CONV_WIP_QTY, 0)) AS WIP_8
                     , SUM(DECODE(WORK_DATE, '20191208', CONV_WIP_QTY, 0)) AS WIP_9
                     , SUM(DECODE(WORK_DATE, '20191209', CONV_WIP_QTY, 0)) AS WIP_10
                     , SUM(DECODE(WORK_DATE, '20191210', CONV_WIP_QTY, 0)) AS WIP_11
                     , SUM(DECODE(WORK_DATE, '20191211', CONV_WIP_QTY, 0)) AS WIP_12
                     , SUM(DECODE(WORK_DATE, '20191212', CONV_WIP_QTY, 0)) AS WIP_13
                     , SUM(DECODE(WORK_DATE, '20191213', CONV_WIP_QTY, 0)) AS WIP_14
                     , SUM(DECODE(WORK_DATE, '20191214', CONV_WIP_QTY, 0)) AS WIP_15
                     , SUM(DECODE(WORK_DATE, '20191215', CONV_WIP_QTY, 0)) AS WIP_16
                     , SUM(DECODE(WORK_DATE, '20191216', CONV_WIP_QTY, 0)) AS WIP_17
                     , SUM(DECODE(WORK_DATE, '20191217', CONV_WIP_QTY, 0)) AS WIP_18
                     , SUM(DECODE(WORK_DATE, '20191218', CONV_WIP_QTY, 0)) AS WIP_19
                     , SUM(DECODE(WORK_DATE, '20191219', CONV_WIP_QTY, 0)) AS WIP_20
                     , SUM(DECODE(WORK_DATE, '20191220', CONV_WIP_QTY, 0)) AS WIP_21
                     , SUM(DECODE(WORK_DATE, '20191221', CONV_WIP_QTY, 0)) AS WIP_22
                     , SUM(DECODE(WORK_DATE, '20191222', CONV_WIP_QTY, 0)) AS WIP_23
                     , SUM(DECODE(WORK_DATE, '20191223', CONV_WIP_QTY, 0)) AS WIP_24
                     , SUM(DECODE(WORK_DATE, '20191224', CONV_WIP_QTY, 0)) AS WIP_25
                     , SUM(DECODE(WORK_DATE, '20191225', CONV_WIP_QTY, 0)) AS WIP_26
                     , SUM(DECODE(WORK_DATE, '20191226', CONV_WIP_QTY, 0)) AS WIP_27
                     , SUM(DECODE(WORK_DATE, '20191227', CONV_WIP_QTY, 0)) AS WIP_28
                     , SUM(DECODE(WORK_DATE, '20191228', CONV_WIP_QTY, 0)) AS WIP_29
                     , SUM(DECODE(WORK_DATE, '20191229', CONV_WIP_QTY, 0)) AS WIP_30
                     , SUM(DECODE(WORK_DATE, '20191230', CONV_WIP_QTY, 0)) AS WIP_31
                     , SUM(DECODE(WORK_DATE, '20191231', CONV_WIP_QTY, 0)) AS WIP_32
                     , SUM(DECODE(WORK_DATE, '20200101', CONV_WIP_QTY, 0)) AS WIP_33
                     , SUM(DECODE(WORK_DATE, '20200102', CONV_WIP_QTY, 0)) AS WIP_34
                     , SUM(DECODE(WORK_DATE, '20200103', CONV_WIP_QTY, 0)) AS WIP_35
                     , SUM(DECODE(WORK_DATE, '20200104', CONV_WIP_QTY, 0)) AS WIP_36
                     , SUM(DECODE(WORK_DATE, '20200105', CONV_WIP_QTY, 0)) AS WIP_37
                     , SUM(DECODE(WORK_DATE, '20200106', CONV_WIP_QTY, 0)) AS WIP_38
                     , SUM(DECODE(WORK_DATE, '20200107', CONV_WIP_QTY, 0)) AS WIP_39
                     , SUM(DECODE(WORK_DATE, '20200108', CONV_WIP_QTY, 0)) AS WIP_40
                     , SUM(DECODE(WORK_DATE, '20200109', CONV_WIP_QTY, 0)) AS WIP_41
                     , SUM(DECODE(WORK_DATE, '20200110', CONV_WIP_QTY, 0)) AS WIP_42
                     , SUM(DECODE(WORK_DATE, '20200111', CONV_WIP_QTY, 0)) AS WIP_43
                     , SUM(DECODE(WORK_DATE, '20200112', CONV_WIP_QTY, 0)) AS WIP_44
                     , SUM(DECODE(WORK_DATE, '20200113', CONV_WIP_QTY, 0)) AS WIP_45
                     , SUM(DECODE(WORK_DATE, '20200114', CONV_WIP_QTY, 0)) AS WIP_46
                     , SUM(DECODE(WORK_DATE, '20200115', CONV_WIP_QTY, 0)) AS WIP_47
                     , SUM(DECODE(WORK_DATE, '20200116', CONV_WIP_QTY, 0)) AS WIP_48
                     , SUM(DECODE(WORK_DATE, '20200117', CONV_WIP_QTY, 0)) AS WIP_49
                     , SUM(DECODE(WORK_DATE, '20200118', CONV_WIP_QTY, 0)) AS WIP_50
                     , SUM(DECODE(WORK_DATE, '20200119', CONV_WIP_QTY, 0)) AS WIP_51
                     , SUM(DECODE(WORK_DATE, '20200120', CONV_WIP_QTY, 0)) AS WIP_52
                     , SUM(DECODE(WORK_DATE, '20200121', CONV_WIP_QTY, 0)) AS WIP_53
                     , SUM(DECODE(WORK_DATE, '20200122', CONV_WIP_QTY, 0)) AS WIP_54
                     , SUM(DECODE(WORK_DATE, '20200123', CONV_WIP_QTY, 0)) AS WIP_55
                     , SUM(DECODE(WORK_DATE, '20200124', CONV_WIP_QTY, 0)) AS WIP_56
                     , SUM(DECODE(WORK_DATE, '20200125', CONV_WIP_QTY, 0)) AS WIP_57
                     , SUM(DECODE(WORK_DATE, '20200126', CONV_WIP_QTY, 0)) AS WIP_58
                     , SUM(DECODE(WORK_DATE, '20200127', CONV_WIP_QTY, 0)) AS WIP_59
                     , SUM(DECODE(WORK_DATE, '20200128', CONV_WIP_QTY, 0)) AS WIP_60
                     , SUM(DECODE(WORK_DATE, '20200129', CONV_WIP_QTY, 0)) AS WIP_61
                     , SUM(DECODE(WORK_DATE, '20200130', CONV_WIP_QTY, 0)) AS WIP_62
                     , SUM(DECODE(WORK_DATE, '20200131', CONV_WIP_QTY, 0)) AS WIP_63
                     , SUM(DECODE(WORK_DATE, '20200201', CONV_WIP_QTY, 0)) AS WIP_64
                     , SUM(DECODE(WORK_DATE, '20200202', CONV_WIP_QTY, 0)) AS WIP_65
                     , SUM(DECODE(WORK_DATE, '20200203', CONV_WIP_QTY, 0)) AS WIP_66
                     , SUM(DECODE(WORK_DATE, '20200204', CONV_WIP_QTY, 0)) AS WIP_67
                     , SUM(DECODE(WORK_DATE, '20200205', CONV_WIP_QTY, 0)) AS WIP_68
                     , SUM(DECODE(WORK_DATE, '20200206', CONV_WIP_QTY, 0)) AS WIP_69
                     , SUM(DECODE(WORK_DATE, '20200207', CONV_WIP_QTY, 0)) AS WIP_70
                     , SUM(DECODE(WORK_DATE, '20200208', CONV_WIP_QTY, 0)) AS WIP_71
                     , SUM(DECODE(WORK_DATE, '20200209', CONV_WIP_QTY, 0)) AS WIP_72
                     , SUM(DECODE(WORK_DATE, '20200210', CONV_WIP_QTY, 0)) AS WIP_73
                     , SUM(DECODE(WORK_DATE, '20200211', CONV_WIP_QTY, 0)) AS WIP_74
                     , SUM(DECODE(WORK_DATE, '20200212', CONV_WIP_QTY, 0)) AS WIP_75
                     , SUM(DECODE(WORK_DATE, '20200213', CONV_WIP_QTY, 0)) AS WIP_76
                     , SUM(DECODE(WORK_DATE, '20200214', CONV_WIP_QTY, 0)) AS WIP_77
                     , SUM(DECODE(WORK_DATE, '20200215', CONV_WIP_QTY, 0)) AS WIP_78
                     , SUM(DECODE(WORK_DATE, '20200216', CONV_WIP_QTY, 0)) AS WIP_79
                     , SUM(DECODE(WORK_DATE, '20200217', CONV_WIP_QTY, 0)) AS WIP_80
                     , SUM(DECODE(WORK_DATE, '20200218', CONV_WIP_QTY, 0)) AS WIP_81
                     , SUM(DECODE(WORK_DATE, '20200219', CONV_WIP_QTY, 0)) AS WIP_82
                     , SUM(DECODE(WORK_DATE, '20200220', CONV_WIP_QTY, 0)) AS WIP_83
                     , SUM(DECODE(WORK_DATE, '20200221', CONV_WIP_QTY, 0)) AS WIP_84
                     , SUM(DECODE(WORK_DATE, '20200222', CONV_WIP_QTY, 0)) AS WIP_85
                     , SUM(DECODE(WORK_DATE, '20200223', CONV_WIP_QTY, 0)) AS WIP_86
                     , SUM(DECODE(WORK_DATE, '20200224', CONV_WIP_QTY, 0)) AS WIP_87
                     , SUM(DECODE(WORK_DATE, '20200225', CONV_WIP_QTY, 0)) AS WIP_88
                     , SUM(DECODE(WORK_DATE, '20200226', CONV_WIP_QTY, 0)) AS WIP_89
                     , SUM(DECODE(WORK_DATE, '20200227', CONV_WIP_QTY, 0)) AS WIP_90
                     , SUM(DECODE(WORK_DATE, '20200228', CONV_WIP_QTY, 0)) AS WIP_91
                     , SUM(DECODE(WORK_DATE, '20200229', CONV_WIP_QTY, 0)) AS WIP_92
                     , SUM(DECODE(WORK_DATE, '20200301', CONV_WIP_QTY, 0)) AS WIP_93
                     , SUM(DECODE(WORK_DATE, '20200302', CONV_WIP_QTY, 0)) AS WIP_94
                     , SUM(DECODE(WORK_DATE, '20200303', CONV_WIP_QTY, 0)) AS WIP_95
                     , SUM(DECODE(WORK_DATE, '20200304', CONV_WIP_QTY, 0)) AS WIP_96
                     , SUM(DECODE(WORK_DATE, '20200305', CONV_WIP_QTY, 0)) AS WIP_97
                     , SUM(DECODE(WORK_DATE, '20200306', CONV_WIP_QTY, 0)) AS WIP_98
                     , SUM(DECODE(WORK_DATE, '20200307', CONV_WIP_QTY, 0)) AS WIP_99
                     , SUM(DECODE(WORK_DATE, '20200308', CONV_WIP_QTY, 0)) AS WIP_100
                     , SUM(DECODE(WORK_DATE, '20200309', CONV_WIP_QTY, 0)) AS WIP_101
                     , SUM(DECODE(WORK_DATE, '20200310', CONV_WIP_QTY, 0)) AS WIP_102
                     , SUM(DECODE(WORK_DATE, '20200311', CONV_WIP_QTY, 0)) AS WIP_103
                     , SUM(DECODE(WORK_DATE, '20200312', CONV_WIP_QTY, 0)) AS WIP_104
                     , SUM(DECODE(WORK_DATE, '20200313', CONV_WIP_QTY, 0)) AS WIP_105
                     , SUM(DECODE(WORK_DATE, '20200314', CONV_WIP_QTY, 0)) AS WIP_106
                     , SUM(DECODE(WORK_DATE, '20200315', CONV_WIP_QTY, 0)) AS WIP_107
                     , SUM(DECODE(WORK_DATE, '20200316', CONV_WIP_QTY, 0)) AS WIP_108
                     , SUM(DECODE(WORK_DATE, '20200317', CONV_WIP_QTY, 0)) AS WIP_109
                     , SUM(DECODE(WORK_DATE, '20200318', CONV_WIP_QTY, 0)) AS WIP_110
                     , SUM(DECODE(WORK_DATE, '20200319', CONV_WIP_QTY, 0)) AS WIP_111
                     , SUM(DECODE(WORK_DATE, '20200320', CONV_WIP_QTY, 0)) AS WIP_112
                     , SUM(DECODE(WORK_DATE, '20200321', CONV_WIP_QTY, 0)) AS WIP_113
                     , SUM(DECODE(WORK_DATE, '20200322', CONV_WIP_QTY, 0)) AS WIP_114
                     , SUM(DECODE(WORK_DATE, '20200323', CONV_WIP_QTY, 0)) AS WIP_115
                     , SUM(DECODE(WORK_DATE, '20200324', CONV_WIP_QTY, 0)) AS WIP_116
                     , SUM(DECODE(WORK_DATE, '20200325', CONV_WIP_QTY, 0)) AS WIP_117
                     , SUM(DECODE(WORK_DATE, '20200326', CONV_WIP_QTY, 0)) AS WIP_118
                     , SUM(DECODE(WORK_DATE, '20200327', CONV_WIP_QTY, 0)) AS WIP_119
                     , SUM(DECODE(WORK_DATE, '20200328', CONV_WIP_QTY, 0)) AS WIP_120
                     , SUM(DECODE(WORK_DATE, '20200329', CONV_WIP_QTY, 0)) AS WIP_121
                     , SUM(DECODE(WORK_DATE, '20200330', CONV_WIP_QTY, 0)) AS WIP_122
                     , SUM(DECODE(WORK_DATE, '20200331', CONV_WIP_QTY, 0)) AS WIP_123
                     , SUM(DECODE(WORK_DATE, '20200401', CONV_WIP_QTY, 0)) AS WIP_124
                     , SUM(DECODE(WORK_DATE, '20200402', CONV_WIP_QTY, 0)) AS WIP_125
                     , SUM(DECODE(WORK_DATE, '20200403', CONV_WIP_QTY, 0)) AS WIP_126
                  FROM (
                        SELECT A.MAT_ID, WORK_DATE
                             , CASE WHEN A.OPER = 'A0033' THEN 'Stealth Saw'
                                    WHEN A.OPER IN ('A0040', 'A0030') THEN 'BG'
                                    WHEN A.OPER = 'A0230' THEN 'DDS'
                                    WHEN A.OPER IN ('A1000', 'A0950') THEN 'C-MOLD'
                                    WHEN A.OPER LIKE 'A060%' OR A.OPER LIKE 'A055%' THEN 'WB'
                                    WHEN A.OPER IN ('A1750', 'A1825') THEN 'SST'
                                    WHEN A.OPER = 'A0200' THEN 'SAW'
                                    WHEN (A.OPER LIKE 'A040%' OR A.OPER = 'A0250') AND B.MAT_GRP_2 = 'DFN' THEN 'DA(DFN)'
                                    WHEN (A.OPER LIKE 'A040%' OR A.OPER = 'A0250') AND B.DA_TYPE = 'Epoxy' THEN 'DA(Epoxy)'
                                    WHEN A.OPER = 'A0000' THEN 'STOCK'
                                    WHEN A.OPER = 'A0020' THEN 'LAMI'
                                    WHEN A.OPER = 'AZ010' THEN 'HMK3'
                                    ELSE ''
                               END OPER_GRP
                             , CASE WHEN A.OPER IN ('A0033', 'A0040', 'A0030', 'A0230', 'A0200', 'A0000', 'A0020') THEN WIP_QTY
                                    WHEN B.GUBUN = 'O' THEN WIP_QTY
                                    ELSE 0
                               END WIP_QTY
                             , CASE WHEN A.OPER IN ('A0033', 'A0040', 'A0030', 'A0230', 'A0200', 'A0000', 'A0020') THEN WIP_QTY_2
                                    WHEN A.OPER LIKE 'A040%' AND B.GUBUN = 'O' THEN WIP_QTY * COMP_CNT
                                    WHEN A.OPER LIKE 'A060%' AND B.GUBUN = 'O' THEN WIP_QTY * (CASE WHEN C.WIRE_CNT IS NOT NULL THEN C.WIRE_CNT
                                                                                                    WHEN B.MAT_GRP_6 NOT IN ('-','0') THEN B.MAT_GRP_6
                                                                                                    ELSE '1' END)
                                    WHEN B.GUBUN = 'O' THEN WIP_QTY
                                    ELSE 0
                               END AS CONV_WIP_QTY
                          FROM (
                                SELECT MAT_ID
                                     , '20200403' AS WORK_DATE
                                     , OPER
                                     , QTY_1 AS WIP_QTY
                                     , QTY_2 AS WIP_QTY_2
                                  FROM RWIPLOTSTS
                                 WHERE FACTORY = 'HMKA1'
                                   AND LOT_TYPE = 'W'
                                   AND LOT_DEL_FLAG = ' '
                                   AND REGEXP_LIKE(OPER, 'A040*|A0033|A0040|A0230|A1000|A0950|A060*|A1750|A0030|A0200|A0000|A0020|AZ010|A0250|A050*|A053*|A055*|A1825') 
                                   AND LOT_CMF_5 LIKE 'P%' 
                                 UNION ALL
                                SELECT MAT_ID
                                     , WORK_DATE
                                     , OPER
                                     , EOH_QTY_1 AS WIP_QTY
                                     , EOH_QTY_2 AS WIP_QTY_2
                                  FROM RSUMWIPEOH
                                 WHERE FACTORY = 'HMKA1'
                                   AND LOT_TYPE = 'W'
                                   AND REGEXP_LIKE(OPER, 'A040*|A0033|A0040|A0230|A1000|A0950|A060*|A1750|A0030|A0200|A0000|A0020|AZ010|A0250|A050*|A053*|A055*|A1825')
                                   AND WORK_DATE BETWEEN '20191129' AND '20200402'
                                   AND SHIFT = '3'
                                   AND CM_KEY_3 LIKE 'P%' 
                               ) A
                             , (
                                SELECT *
                                  FROM (
                                        SELECT MAT_ID, MAT_GRP_2, MAT_GRP_4, MAT_GRP_5, MAT_GRP_6, MAT_CMF_11
                                             , CASE WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-'
                                                         THEN (CASE WHEN MAT_GRP_5 IN ('1st','Merge') OR MAT_GRP_5 LIKE 'Middle%' THEN 'O' ELSE '' END)
                                                    WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 = '-' THEN '' 
                                                    ELSE 'O'
                                               END GUBUN
                                             , (SELECT DATA_2 FROM MGCMTBLDAT WHERE FACTORY = 'HMKA1' AND TABLE_NAME = 'H_FAMILY' AND KEY_1 = MAT_GRP_2) AS DA_TYPE
                                             , COMP_CNT
                                          FROM VWIPMATDEF
                                         WHERE FACTORY = 'HMKA1'
                                           AND MAT_TYPE = 'FG'
                                           AND DELETE_FLAG = ' '
                                           AND MAT_GRP_2 <> '-'
                                       )
                               ) B
                             , (
                                SELECT MAT_ID, OPER, TCD_CMF_2 AS WIRE_CNT
                                  FROM CWIPTCDDEF@RPTTOMES
                                 WHERE FACTORY = 'HMKA1'
                                   AND OPER LIKE 'A060%'
                                   AND SET_FLAG = 'Y'
                                   AND TCD_CMF_2 <> ' '
                               ) C
                         WHERE A.MAT_ID = B.MAT_ID
                           AND A.MAT_ID = C.MAT_ID(+)
                           AND A.OPER = C.OPER(+)
                       )
                 GROUP BY MAT_ID, OPER_GRP
               ) WIP
             , (
                SELECT RES_STS_2 AS RES_MAT_ID
                     , OPER_GRP AS RES_OPER_GRP 
                     , SUM(RES_CNT) AS RES_TTL
                     , SUM(RUN_CNT) AS RUN_TTL
                     , SUM(DECODE(WORK_DATE, '20191129', RES_CNT, 0)) AS RES_0
                     , SUM(DECODE(WORK_DATE, '20191130', RES_CNT, 0)) AS RES_1
                     , SUM(DECODE(WORK_DATE, '20191201', RES_CNT, 0)) AS RES_2
                     , SUM(DECODE(WORK_DATE, '20191202', RES_CNT, 0)) AS RES_3
                     , SUM(DECODE(WORK_DATE, '20191203', RES_CNT, 0)) AS RES_4
                     , SUM(DECODE(WORK_DATE, '20191204', RES_CNT, 0)) AS RES_5
                     , SUM(DECODE(WORK_DATE, '20191205', RES_CNT, 0)) AS RES_6
                     , SUM(DECODE(WORK_DATE, '20191206', RES_CNT, 0)) AS RES_7
                     , SUM(DECODE(WORK_DATE, '20191207', RES_CNT, 0)) AS RES_8
                     , SUM(DECODE(WORK_DATE, '20191208', RES_CNT, 0)) AS RES_9
                     , SUM(DECODE(WORK_DATE, '20191209', RES_CNT, 0)) AS RES_10
                     , SUM(DECODE(WORK_DATE, '20191210', RES_CNT, 0)) AS RES_11
                     , SUM(DECODE(WORK_DATE, '20191211', RES_CNT, 0)) AS RES_12
                     , SUM(DECODE(WORK_DATE, '20191212', RES_CNT, 0)) AS RES_13
                     , SUM(DECODE(WORK_DATE, '20191213', RES_CNT, 0)) AS RES_14
                     , SUM(DECODE(WORK_DATE, '20191214', RES_CNT, 0)) AS RES_15
                     , SUM(DECODE(WORK_DATE, '20191215', RES_CNT, 0)) AS RES_16
                     , SUM(DECODE(WORK_DATE, '20191216', RES_CNT, 0)) AS RES_17
                     , SUM(DECODE(WORK_DATE, '20191217', RES_CNT, 0)) AS RES_18
                     , SUM(DECODE(WORK_DATE, '20191218', RES_CNT, 0)) AS RES_19
                     , SUM(DECODE(WORK_DATE, '20191219', RES_CNT, 0)) AS RES_20
                     , SUM(DECODE(WORK_DATE, '20191220', RES_CNT, 0)) AS RES_21
                     , SUM(DECODE(WORK_DATE, '20191221', RES_CNT, 0)) AS RES_22
                     , SUM(DECODE(WORK_DATE, '20191222', RES_CNT, 0)) AS RES_23
                     , SUM(DECODE(WORK_DATE, '20191223', RES_CNT, 0)) AS RES_24
                     , SUM(DECODE(WORK_DATE, '20191224', RES_CNT, 0)) AS RES_25
                     , SUM(DECODE(WORK_DATE, '20191225', RES_CNT, 0)) AS RES_26
                     , SUM(DECODE(WORK_DATE, '20191226', RES_CNT, 0)) AS RES_27
                     , SUM(DECODE(WORK_DATE, '20191227', RES_CNT, 0)) AS RES_28
                     , SUM(DECODE(WORK_DATE, '20191228', RES_CNT, 0)) AS RES_29
                     , SUM(DECODE(WORK_DATE, '20191229', RES_CNT, 0)) AS RES_30
                     , SUM(DECODE(WORK_DATE, '20191230', RES_CNT, 0)) AS RES_31
                     , SUM(DECODE(WORK_DATE, '20191231', RES_CNT, 0)) AS RES_32
                     , SUM(DECODE(WORK_DATE, '20200101', RES_CNT, 0)) AS RES_33
                     , SUM(DECODE(WORK_DATE, '20200102', RES_CNT, 0)) AS RES_34
                     , SUM(DECODE(WORK_DATE, '20200103', RES_CNT, 0)) AS RES_35
                     , SUM(DECODE(WORK_DATE, '20200104', RES_CNT, 0)) AS RES_36
                     , SUM(DECODE(WORK_DATE, '20200105', RES_CNT, 0)) AS RES_37
                     , SUM(DECODE(WORK_DATE, '20200106', RES_CNT, 0)) AS RES_38
                     , SUM(DECODE(WORK_DATE, '20200107', RES_CNT, 0)) AS RES_39
                     , SUM(DECODE(WORK_DATE, '20200108', RES_CNT, 0)) AS RES_40
                     , SUM(DECODE(WORK_DATE, '20200109', RES_CNT, 0)) AS RES_41
                     , SUM(DECODE(WORK_DATE, '20200110', RES_CNT, 0)) AS RES_42
                     , SUM(DECODE(WORK_DATE, '20200111', RES_CNT, 0)) AS RES_43
                     , SUM(DECODE(WORK_DATE, '20200112', RES_CNT, 0)) AS RES_44
                     , SUM(DECODE(WORK_DATE, '20200113', RES_CNT, 0)) AS RES_45
                     , SUM(DECODE(WORK_DATE, '20200114', RES_CNT, 0)) AS RES_46
                     , SUM(DECODE(WORK_DATE, '20200115', RES_CNT, 0)) AS RES_47
                     , SUM(DECODE(WORK_DATE, '20200116', RES_CNT, 0)) AS RES_48
                     , SUM(DECODE(WORK_DATE, '20200117', RES_CNT, 0)) AS RES_49
                     , SUM(DECODE(WORK_DATE, '20200118', RES_CNT, 0)) AS RES_50
                     , SUM(DECODE(WORK_DATE, '20200119', RES_CNT, 0)) AS RES_51
                     , SUM(DECODE(WORK_DATE, '20200120', RES_CNT, 0)) AS RES_52
                     , SUM(DECODE(WORK_DATE, '20200121', RES_CNT, 0)) AS RES_53
                     , SUM(DECODE(WORK_DATE, '20200122', RES_CNT, 0)) AS RES_54
                     , SUM(DECODE(WORK_DATE, '20200123', RES_CNT, 0)) AS RES_55
                     , SUM(DECODE(WORK_DATE, '20200124', RES_CNT, 0)) AS RES_56
                     , SUM(DECODE(WORK_DATE, '20200125', RES_CNT, 0)) AS RES_57
                     , SUM(DECODE(WORK_DATE, '20200126', RES_CNT, 0)) AS RES_58
                     , SUM(DECODE(WORK_DATE, '20200127', RES_CNT, 0)) AS RES_59
                     , SUM(DECODE(WORK_DATE, '20200128', RES_CNT, 0)) AS RES_60
                     , SUM(DECODE(WORK_DATE, '20200129', RES_CNT, 0)) AS RES_61
                     , SUM(DECODE(WORK_DATE, '20200130', RES_CNT, 0)) AS RES_62
                     , SUM(DECODE(WORK_DATE, '20200131', RES_CNT, 0)) AS RES_63
                     , SUM(DECODE(WORK_DATE, '20200201', RES_CNT, 0)) AS RES_64
                     , SUM(DECODE(WORK_DATE, '20200202', RES_CNT, 0)) AS RES_65
                     , SUM(DECODE(WORK_DATE, '20200203', RES_CNT, 0)) AS RES_66
                     , SUM(DECODE(WORK_DATE, '20200204', RES_CNT, 0)) AS RES_67
                     , SUM(DECODE(WORK_DATE, '20200205', RES_CNT, 0)) AS RES_68
                     , SUM(DECODE(WORK_DATE, '20200206', RES_CNT, 0)) AS RES_69
                     , SUM(DECODE(WORK_DATE, '20200207', RES_CNT, 0)) AS RES_70
                     , SUM(DECODE(WORK_DATE, '20200208', RES_CNT, 0)) AS RES_71
                     , SUM(DECODE(WORK_DATE, '20200209', RES_CNT, 0)) AS RES_72
                     , SUM(DECODE(WORK_DATE, '20200210', RES_CNT, 0)) AS RES_73
                     , SUM(DECODE(WORK_DATE, '20200211', RES_CNT, 0)) AS RES_74
                     , SUM(DECODE(WORK_DATE, '20200212', RES_CNT, 0)) AS RES_75
                     , SUM(DECODE(WORK_DATE, '20200213', RES_CNT, 0)) AS RES_76
                     , SUM(DECODE(WORK_DATE, '20200214', RES_CNT, 0)) AS RES_77
                     , SUM(DECODE(WORK_DATE, '20200215', RES_CNT, 0)) AS RES_78
                     , SUM(DECODE(WORK_DATE, '20200216', RES_CNT, 0)) AS RES_79
                     , SUM(DECODE(WORK_DATE, '20200217', RES_CNT, 0)) AS RES_80
                     , SUM(DECODE(WORK_DATE, '20200218', RES_CNT, 0)) AS RES_81
                     , SUM(DECODE(WORK_DATE, '20200219', RES_CNT, 0)) AS RES_82
                     , SUM(DECODE(WORK_DATE, '20200220', RES_CNT, 0)) AS RES_83
                     , SUM(DECODE(WORK_DATE, '20200221', RES_CNT, 0)) AS RES_84
                     , SUM(DECODE(WORK_DATE, '20200222', RES_CNT, 0)) AS RES_85
                     , SUM(DECODE(WORK_DATE, '20200223', RES_CNT, 0)) AS RES_86
                     , SUM(DECODE(WORK_DATE, '20200224', RES_CNT, 0)) AS RES_87
                     , SUM(DECODE(WORK_DATE, '20200225', RES_CNT, 0)) AS RES_88
                     , SUM(DECODE(WORK_DATE, '20200226', RES_CNT, 0)) AS RES_89
                     , SUM(DECODE(WORK_DATE, '20200227', RES_CNT, 0)) AS RES_90
                     , SUM(DECODE(WORK_DATE, '20200228', RES_CNT, 0)) AS RES_91
                     , SUM(DECODE(WORK_DATE, '20200229', RES_CNT, 0)) AS RES_92
                     , SUM(DECODE(WORK_DATE, '20200301', RES_CNT, 0)) AS RES_93
                     , SUM(DECODE(WORK_DATE, '20200302', RES_CNT, 0)) AS RES_94
                     , SUM(DECODE(WORK_DATE, '20200303', RES_CNT, 0)) AS RES_95
                     , SUM(DECODE(WORK_DATE, '20200304', RES_CNT, 0)) AS RES_96
                     , SUM(DECODE(WORK_DATE, '20200305', RES_CNT, 0)) AS RES_97
                     , SUM(DECODE(WORK_DATE, '20200306', RES_CNT, 0)) AS RES_98
                     , SUM(DECODE(WORK_DATE, '20200307', RES_CNT, 0)) AS RES_99
                     , SUM(DECODE(WORK_DATE, '20200308', RES_CNT, 0)) AS RES_100
                     , SUM(DECODE(WORK_DATE, '20200309', RES_CNT, 0)) AS RES_101
                     , SUM(DECODE(WORK_DATE, '20200310', RES_CNT, 0)) AS RES_102
                     , SUM(DECODE(WORK_DATE, '20200311', RES_CNT, 0)) AS RES_103
                     , SUM(DECODE(WORK_DATE, '20200312', RES_CNT, 0)) AS RES_104
                     , SUM(DECODE(WORK_DATE, '20200313', RES_CNT, 0)) AS RES_105
                     , SUM(DECODE(WORK_DATE, '20200314', RES_CNT, 0)) AS RES_106
                     , SUM(DECODE(WORK_DATE, '20200315', RES_CNT, 0)) AS RES_107
                     , SUM(DECODE(WORK_DATE, '20200316', RES_CNT, 0)) AS RES_108
                     , SUM(DECODE(WORK_DATE, '20200317', RES_CNT, 0)) AS RES_109
                     , SUM(DECODE(WORK_DATE, '20200318', RES_CNT, 0)) AS RES_110
                     , SUM(DECODE(WORK_DATE, '20200319', RES_CNT, 0)) AS RES_111
                     , SUM(DECODE(WORK_DATE, '20200320', RES_CNT, 0)) AS RES_112
                     , SUM(DECODE(WORK_DATE, '20200321', RES_CNT, 0)) AS RES_113
                     , SUM(DECODE(WORK_DATE, '20200322', RES_CNT, 0)) AS RES_114
                     , SUM(DECODE(WORK_DATE, '20200323', RES_CNT, 0)) AS RES_115
                     , SUM(DECODE(WORK_DATE, '20200324', RES_CNT, 0)) AS RES_116
                     , SUM(DECODE(WORK_DATE, '20200325', RES_CNT, 0)) AS RES_117
                     , SUM(DECODE(WORK_DATE, '20200326', RES_CNT, 0)) AS RES_118
                     , SUM(DECODE(WORK_DATE, '20200327', RES_CNT, 0)) AS RES_119
                     , SUM(DECODE(WORK_DATE, '20200328', RES_CNT, 0)) AS RES_120
                     , SUM(DECODE(WORK_DATE, '20200329', RES_CNT, 0)) AS RES_121
                     , SUM(DECODE(WORK_DATE, '20200330', RES_CNT, 0)) AS RES_122
                     , SUM(DECODE(WORK_DATE, '20200331', RES_CNT, 0)) AS RES_123
                     , SUM(DECODE(WORK_DATE, '20200401', RES_CNT, 0)) AS RES_124
                     , SUM(DECODE(WORK_DATE, '20200402', RES_CNT, 0)) AS RES_125
                     , SUM(DECODE(WORK_DATE, '20200403', RES_CNT, 0)) AS RES_126
                     , SUM(DECODE(WORK_DATE, '20191129', RUN_CNT, 0)) AS RUN_0
                     , SUM(DECODE(WORK_DATE, '20191130', RUN_CNT, 0)) AS RUN_1
                     , SUM(DECODE(WORK_DATE, '20191201', RUN_CNT, 0)) AS RUN_2
                     , SUM(DECODE(WORK_DATE, '20191202', RUN_CNT, 0)) AS RUN_3
                     , SUM(DECODE(WORK_DATE, '20191203', RUN_CNT, 0)) AS RUN_4
                     , SUM(DECODE(WORK_DATE, '20191204', RUN_CNT, 0)) AS RUN_5
                     , SUM(DECODE(WORK_DATE, '20191205', RUN_CNT, 0)) AS RUN_6
                     , SUM(DECODE(WORK_DATE, '20191206', RUN_CNT, 0)) AS RUN_7
                     , SUM(DECODE(WORK_DATE, '20191207', RUN_CNT, 0)) AS RUN_8
                     , SUM(DECODE(WORK_DATE, '20191208', RUN_CNT, 0)) AS RUN_9
                     , SUM(DECODE(WORK_DATE, '20191209', RUN_CNT, 0)) AS RUN_10
                     , SUM(DECODE(WORK_DATE, '20191210', RUN_CNT, 0)) AS RUN_11
                     , SUM(DECODE(WORK_DATE, '20191211', RUN_CNT, 0)) AS RUN_12
                     , SUM(DECODE(WORK_DATE, '20191212', RUN_CNT, 0)) AS RUN_13
                     , SUM(DECODE(WORK_DATE, '20191213', RUN_CNT, 0)) AS RUN_14
                     , SUM(DECODE(WORK_DATE, '20191214', RUN_CNT, 0)) AS RUN_15
                     , SUM(DECODE(WORK_DATE, '20191215', RUN_CNT, 0)) AS RUN_16
                     , SUM(DECODE(WORK_DATE, '20191216', RUN_CNT, 0)) AS RUN_17
                     , SUM(DECODE(WORK_DATE, '20191217', RUN_CNT, 0)) AS RUN_18
                     , SUM(DECODE(WORK_DATE, '20191218', RUN_CNT, 0)) AS RUN_19
                     , SUM(DECODE(WORK_DATE, '20191219', RUN_CNT, 0)) AS RUN_20
                     , SUM(DECODE(WORK_DATE, '20191220', RUN_CNT, 0)) AS RUN_21
                     , SUM(DECODE(WORK_DATE, '20191221', RUN_CNT, 0)) AS RUN_22
                     , SUM(DECODE(WORK_DATE, '20191222', RUN_CNT, 0)) AS RUN_23
                     , SUM(DECODE(WORK_DATE, '20191223', RUN_CNT, 0)) AS RUN_24
                     , SUM(DECODE(WORK_DATE, '20191224', RUN_CNT, 0)) AS RUN_25
                     , SUM(DECODE(WORK_DATE, '20191225', RUN_CNT, 0)) AS RUN_26
                     , SUM(DECODE(WORK_DATE, '20191226', RUN_CNT, 0)) AS RUN_27
                     , SUM(DECODE(WORK_DATE, '20191227', RUN_CNT, 0)) AS RUN_28
                     , SUM(DECODE(WORK_DATE, '20191228', RUN_CNT, 0)) AS RUN_29
                     , SUM(DECODE(WORK_DATE, '20191229', RUN_CNT, 0)) AS RUN_30
                     , SUM(DECODE(WORK_DATE, '20191230', RUN_CNT, 0)) AS RUN_31
                     , SUM(DECODE(WORK_DATE, '20191231', RUN_CNT, 0)) AS RUN_32
                     , SUM(DECODE(WORK_DATE, '20200101', RUN_CNT, 0)) AS RUN_33
                     , SUM(DECODE(WORK_DATE, '20200102', RUN_CNT, 0)) AS RUN_34
                     , SUM(DECODE(WORK_DATE, '20200103', RUN_CNT, 0)) AS RUN_35
                     , SUM(DECODE(WORK_DATE, '20200104', RUN_CNT, 0)) AS RUN_36
                     , SUM(DECODE(WORK_DATE, '20200105', RUN_CNT, 0)) AS RUN_37
                     , SUM(DECODE(WORK_DATE, '20200106', RUN_CNT, 0)) AS RUN_38
                     , SUM(DECODE(WORK_DATE, '20200107', RUN_CNT, 0)) AS RUN_39
                     , SUM(DECODE(WORK_DATE, '20200108', RUN_CNT, 0)) AS RUN_40
                     , SUM(DECODE(WORK_DATE, '20200109', RUN_CNT, 0)) AS RUN_41
                     , SUM(DECODE(WORK_DATE, '20200110', RUN_CNT, 0)) AS RUN_42
                     , SUM(DECODE(WORK_DATE, '20200111', RUN_CNT, 0)) AS RUN_43
                     , SUM(DECODE(WORK_DATE, '20200112', RUN_CNT, 0)) AS RUN_44
                     , SUM(DECODE(WORK_DATE, '20200113', RUN_CNT, 0)) AS RUN_45
                     , SUM(DECODE(WORK_DATE, '20200114', RUN_CNT, 0)) AS RUN_46
                     , SUM(DECODE(WORK_DATE, '20200115', RUN_CNT, 0)) AS RUN_47
                     , SUM(DECODE(WORK_DATE, '20200116', RUN_CNT, 0)) AS RUN_48
                     , SUM(DECODE(WORK_DATE, '20200117', RUN_CNT, 0)) AS RUN_49
                     , SUM(DECODE(WORK_DATE, '20200118', RUN_CNT, 0)) AS RUN_50
                     , SUM(DECODE(WORK_DATE, '20200119', RUN_CNT, 0)) AS RUN_51
                     , SUM(DECODE(WORK_DATE, '20200120', RUN_CNT, 0)) AS RUN_52
                     , SUM(DECODE(WORK_DATE, '20200121', RUN_CNT, 0)) AS RUN_53
                     , SUM(DECODE(WORK_DATE, '20200122', RUN_CNT, 0)) AS RUN_54
                     , SUM(DECODE(WORK_DATE, '20200123', RUN_CNT, 0)) AS RUN_55
                     , SUM(DECODE(WORK_DATE, '20200124', RUN_CNT, 0)) AS RUN_56
                     , SUM(DECODE(WORK_DATE, '20200125', RUN_CNT, 0)) AS RUN_57
                     , SUM(DECODE(WORK_DATE, '20200126', RUN_CNT, 0)) AS RUN_58
                     , SUM(DECODE(WORK_DATE, '20200127', RUN_CNT, 0)) AS RUN_59
                     , SUM(DECODE(WORK_DATE, '20200128', RUN_CNT, 0)) AS RUN_60
                     , SUM(DECODE(WORK_DATE, '20200129', RUN_CNT, 0)) AS RUN_61
                     , SUM(DECODE(WORK_DATE, '20200130', RUN_CNT, 0)) AS RUN_62
                     , SUM(DECODE(WORK_DATE, '20200131', RUN_CNT, 0)) AS RUN_63
                     , SUM(DECODE(WORK_DATE, '20200201', RUN_CNT, 0)) AS RUN_64
                     , SUM(DECODE(WORK_DATE, '20200202', RUN_CNT, 0)) AS RUN_65
                     , SUM(DECODE(WORK_DATE, '20200203', RUN_CNT, 0)) AS RUN_66
                     , SUM(DECODE(WORK_DATE, '20200204', RUN_CNT, 0)) AS RUN_67
                     , SUM(DECODE(WORK_DATE, '20200205', RUN_CNT, 0)) AS RUN_68
                     , SUM(DECODE(WORK_DATE, '20200206', RUN_CNT, 0)) AS RUN_69
                     , SUM(DECODE(WORK_DATE, '20200207', RUN_CNT, 0)) AS RUN_70
                     , SUM(DECODE(WORK_DATE, '20200208', RUN_CNT, 0)) AS RUN_71
                     , SUM(DECODE(WORK_DATE, '20200209', RUN_CNT, 0)) AS RUN_72
                     , SUM(DECODE(WORK_DATE, '20200210', RUN_CNT, 0)) AS RUN_73
                     , SUM(DECODE(WORK_DATE, '20200211', RUN_CNT, 0)) AS RUN_74
                     , SUM(DECODE(WORK_DATE, '20200212', RUN_CNT, 0)) AS RUN_75
                     , SUM(DECODE(WORK_DATE, '20200213', RUN_CNT, 0)) AS RUN_76
                     , SUM(DECODE(WORK_DATE, '20200214', RUN_CNT, 0)) AS RUN_77
                     , SUM(DECODE(WORK_DATE, '20200215', RUN_CNT, 0)) AS RUN_78
                     , SUM(DECODE(WORK_DATE, '20200216', RUN_CNT, 0)) AS RUN_79
                     , SUM(DECODE(WORK_DATE, '20200217', RUN_CNT, 0)) AS RUN_80
                     , SUM(DECODE(WORK_DATE, '20200218', RUN_CNT, 0)) AS RUN_81
                     , SUM(DECODE(WORK_DATE, '20200219', RUN_CNT, 0)) AS RUN_82
                     , SUM(DECODE(WORK_DATE, '20200220', RUN_CNT, 0)) AS RUN_83
                     , SUM(DECODE(WORK_DATE, '20200221', RUN_CNT, 0)) AS RUN_84
                     , SUM(DECODE(WORK_DATE, '20200222', RUN_CNT, 0)) AS RUN_85
                     , SUM(DECODE(WORK_DATE, '20200223', RUN_CNT, 0)) AS RUN_86
                     , SUM(DECODE(WORK_DATE, '20200224', RUN_CNT, 0)) AS RUN_87
                     , SUM(DECODE(WORK_DATE, '20200225', RUN_CNT, 0)) AS RUN_88
                     , SUM(DECODE(WORK_DATE, '20200226', RUN_CNT, 0)) AS RUN_89
                     , SUM(DECODE(WORK_DATE, '20200227', RUN_CNT, 0)) AS RUN_90
                     , SUM(DECODE(WORK_DATE, '20200228', RUN_CNT, 0)) AS RUN_91
                     , SUM(DECODE(WORK_DATE, '20200229', RUN_CNT, 0)) AS RUN_92
                     , SUM(DECODE(WORK_DATE, '20200301', RUN_CNT, 0)) AS RUN_93
                     , SUM(DECODE(WORK_DATE, '20200302', RUN_CNT, 0)) AS RUN_94
                     , SUM(DECODE(WORK_DATE, '20200303', RUN_CNT, 0)) AS RUN_95
                     , SUM(DECODE(WORK_DATE, '20200304', RUN_CNT, 0)) AS RUN_96
                     , SUM(DECODE(WORK_DATE, '20200305', RUN_CNT, 0)) AS RUN_97
                     , SUM(DECODE(WORK_DATE, '20200306', RUN_CNT, 0)) AS RUN_98
                     , SUM(DECODE(WORK_DATE, '20200307', RUN_CNT, 0)) AS RUN_99
                     , SUM(DECODE(WORK_DATE, '20200308', RUN_CNT, 0)) AS RUN_100
                     , SUM(DECODE(WORK_DATE, '20200309', RUN_CNT, 0)) AS RUN_101
                     , SUM(DECODE(WORK_DATE, '20200310', RUN_CNT, 0)) AS RUN_102
                     , SUM(DECODE(WORK_DATE, '20200311', RUN_CNT, 0)) AS RUN_103
                     , SUM(DECODE(WORK_DATE, '20200312', RUN_CNT, 0)) AS RUN_104
                     , SUM(DECODE(WORK_DATE, '20200313', RUN_CNT, 0)) AS RUN_105
                     , SUM(DECODE(WORK_DATE, '20200314', RUN_CNT, 0)) AS RUN_106
                     , SUM(DECODE(WORK_DATE, '20200315', RUN_CNT, 0)) AS RUN_107
                     , SUM(DECODE(WORK_DATE, '20200316', RUN_CNT, 0)) AS RUN_108
                     , SUM(DECODE(WORK_DATE, '20200317', RUN_CNT, 0)) AS RUN_109
                     , SUM(DECODE(WORK_DATE, '20200318', RUN_CNT, 0)) AS RUN_110
                     , SUM(DECODE(WORK_DATE, '20200319', RUN_CNT, 0)) AS RUN_111
                     , SUM(DECODE(WORK_DATE, '20200320', RUN_CNT, 0)) AS RUN_112
                     , SUM(DECODE(WORK_DATE, '20200321', RUN_CNT, 0)) AS RUN_113
                     , SUM(DECODE(WORK_DATE, '20200322', RUN_CNT, 0)) AS RUN_114
                     , SUM(DECODE(WORK_DATE, '20200323', RUN_CNT, 0)) AS RUN_115
                     , SUM(DECODE(WORK_DATE, '20200324', RUN_CNT, 0)) AS RUN_116
                     , SUM(DECODE(WORK_DATE, '20200325', RUN_CNT, 0)) AS RUN_117
                     , SUM(DECODE(WORK_DATE, '20200326', RUN_CNT, 0)) AS RUN_118
                     , SUM(DECODE(WORK_DATE, '20200327', RUN_CNT, 0)) AS RUN_119
                     , SUM(DECODE(WORK_DATE, '20200328', RUN_CNT, 0)) AS RUN_120
                     , SUM(DECODE(WORK_DATE, '20200329', RUN_CNT, 0)) AS RUN_121
                     , SUM(DECODE(WORK_DATE, '20200330', RUN_CNT, 0)) AS RUN_122
                     , SUM(DECODE(WORK_DATE, '20200331', RUN_CNT, 0)) AS RUN_123
                     , SUM(DECODE(WORK_DATE, '20200401', RUN_CNT, 0)) AS RUN_124
                     , SUM(DECODE(WORK_DATE, '20200402', RUN_CNT, 0)) AS RUN_125
                     , SUM(DECODE(WORK_DATE, '20200403', RUN_CNT, 0)) AS RUN_126
                  FROM (
                        SELECT RES_STS_2
                             , WORK_DATE
                             , CASE WHEN A.RES_GRP_3 = 'SDBG' THEN 'Stealth Saw'
                                    WHEN A.RES_GRP_3 = 'BACK LAP' THEN 'BG'
                                    WHEN A.RES_GRP_3 = 'WAFER EXPANDING' THEN 'DDS'
                                    WHEN A.RES_GRP_3 = 'MOLD' THEN 'C-MOLD'
                                    WHEN A.RES_GRP_3 = 'WIRE BOND' THEN 'WB'
                                    WHEN A.RES_GRP_3 = 'SAW SORTER' THEN 'SST'
                                    WHEN A.RES_GRP_3 = 'SAW' THEN 'SAW'
                                    WHEN A.RES_GRP_3 = 'DIE ATTACH' AND B.MAT_GRP_2 = 'DFN' THEN 'DA(DFN)'
                                    WHEN A.RES_GRP_3 = 'DIE ATTACH' AND REGEXP_LIKE(A.RES_GRP_6, 'ESEC2100SD|SDB-30UST|^DB*|^SPA*') THEN 'DA(Epoxy)'
                                    WHEN A.RES_GRP_3 = 'LAMINATION' THEN 'LAMI'
                                    ELSE 'DA'
                               END OPER_GRP
                             , RES_CNT
                             , RUN_CNT
                          FROM (
                                SELECT A.RES_STS_2
                                     , '20200403' AS WORK_DATE
                                     , A.RES_GRP_3
                                     , A.RES_GRP_6
                                     , COUNT(A.RES_ID) AS RES_CNT
                                     , NVL(SUM(DECODE(RES_UP_DOWN_FLAG, 'U', DECODE(NVL(B.START_RES_ID, '-'), '-', 0, 1))), 0) AS RUN_CNT
                                  FROM MRASRESDEF A
                                     , (
                                        SELECT DISTINCT START_RES_ID
                                          FROM MWIPLOTSTS
                                         WHERE FACTORY = 'HMKA1'
                                           AND LOT_TYPE = 'W'
                                           AND LOT_DEL_FLAG = ' '
                                           AND LOT_CMF_5 LIKE 'P%' 
                                           AND REGEXP_LIKE(OPER, 'A040*|A0033|A0040|A0230|A1000|A060*|A1750|A0030|A0200|A0020|A1825')
                                           AND LOT_STATUS = 'PROC'
                                       ) B
                                 WHERE 1=1
                                   AND A.RES_ID = B.START_RES_ID(+)
                                   AND A.FACTORY = 'HMKA1'
                                   AND A.RES_CMF_9 = 'Y'
                                   AND A.RES_CMF_7 = 'Y'
                                   AND (A.RES_STS_1 NOT IN ('C200', 'B199') OR A.RES_UP_DOWN_FLAG = 'U') 
                                   AND A.DELETE_FLAG  = ' '
                                   AND A.RES_TYPE  = 'EQUIPMENT'
                                   AND (A.RES_GRP_3 IN ('SDBG','BACK LAP','WAFER EXPANDING','DIE ATTACH', 'WIRE BOND', 'SAW SORTER', 'SAW', 'LAMINATION') OR A.RES_ID IN ('M-A57','M-A59','M-A60'))
                                 GROUP BY A.RES_STS_2, A.RES_GRP_3, A.RES_GRP_6
                                 UNION ALL
                                SELECT RES_STS_2
                                     , SUBSTR(CUTOFF_DT, 1, 8) AS WORK_DATE
                                     , RES_GRP_3
                                     , RES_GRP_6
                                     , COUNT(RES_ID) AS RES_CNT
                                     , SUM(DECODE(RES_UP_DOWN_FLAG, 'U', 1, 0)) AS RUN_CNT
                                  FROM MRASRESDEF_BOH
                                 WHERE FACTORY = 'HMKA1'
                                   AND CUTOFF_DT BETWEEN '2019112922' AND '2020040222'
                                   AND SUBSTR(CUTOFF_DT, -2) = '22'
                                   AND RES_CMF_9 = 'Y'
                                   AND RES_CMF_7 = 'Y'
                                   AND (RES_STS_1 NOT IN ('C200', 'B199') OR RES_UP_DOWN_FLAG = 'U') 
                                   AND DELETE_FLAG  = ' '
                                   AND RES_TYPE  = 'EQUIPMENT'
                                   AND (RES_GRP_3 IN ('SDBG','BACK LAP','WAFER EXPANDING','DIE ATTACH', 'WIRE BOND', 'SAW SORTER', 'SAW', 'LAMINATION') OR RES_ID IN ('M-A57','M-A59','M-A60'))
                                 GROUP BY RES_STS_2, SUBSTR(CUTOFF_DT, 1, 8), RES_GRP_3, RES_GRP_6
                               ) A
                             , (
                                SELECT MAT_ID, MAT_GRP_2
                                     , (SELECT DATA_2 FROM MGCMTBLDAT WHERE FACTORY = 'HMKA1' AND TABLE_NAME = 'H_FAMILY' AND KEY_1 = MAT_GRP_2) AS DA_TYPE
                                  FROM MWIPMATDEF
                                 WHERE FACTORY = 'HMKA1'
                                   AND MAT_TYPE = 'FG'
                               ) B
                 WHERE A.RES_STS_2 = B.MAT_ID(+)
                       )
                 GROUP BY RES_STS_2, OPER_GRP
               ) RES
         WHERE 1=1
           AND MAT.OPER_GRP = SHP.END_OPER_GRP(+)
           AND MAT.OPER_GRP = WIP.WIP_OPER_GRP(+)
           AND MAT.OPER_GRP = RES.RES_OPER_GRP(+)
           AND MAT.MAT_ID = SHP.END_MAT_ID(+)
           AND MAT.MAT_ID = WIP.WIP_MAT_ID(+)
           AND MAT.MAT_ID = RES.RES_MAT_ID(+)
           AND NVL(SHP.END_TTL,0) + NVL(WIP.WIP_TTL,0) + NVL(RES.RES_TTL,0) > 0
       ) A
     , (SELECT DECODE(LEVEL, 1, '재공', 2, '실적', 3, '예상실적', 4, '설비대수', 5, 'RUN') AS GUBUN FROM DUAL CONNECT BY LEVEL <= 5 ) B
 GROUP BY A.OPER_GRP, A.OPER_GRP,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', B.GUBUN 
 ORDER BY DECODE(A.OPER_GRP, 'STOCK', 1, 'LAMI', 2, 'Stealth Saw', 3, 'BG', 4, 'DDS', 5, 'SAW', 6, 'DA', 7, 'DA(Epoxy)', 8, 'DA(DFN)', 9, 'WB', 10, 'C-MOLD', 11, 'SST', 12, 13), A.OPER_GRP,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', DECODE(B.GUBUN, '재공', 1, '실적', 2, '예상실적', 3, '설비대수', 4, 5) 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT A.OPER_GRP, (SELECT TO_NUMBER(DATA_1) FROM MGCMTBLDAT WHERE FACTORY = 'HMKA1' AND TABLE_NAME = 'H_OPER_GRP_TARGET' AND KEY_1 = A.OPER_GRP) AS TARGET,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ' 
     , B.GUBUN
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_0 ELSE WIP_0 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_0 ELSE END_0 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_0 ELSE EXP_0 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_0
                      WHEN B.GUBUN = 'RUN' THEN RUN_0
                 END), 0) AS D0
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_1 ELSE WIP_1 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_1 ELSE END_1 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_1 ELSE EXP_1 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_1
                      WHEN B.GUBUN = 'RUN' THEN RUN_1
                 END), 0) AS D1
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_2 ELSE WIP_2 / 1000 END) 
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_2 ELSE END_2 / 1000 END) 
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_2 ELSE EXP_2 / 1000 END) 
                      WHEN B.GUBUN = '설비대수' THEN RES_2
                      WHEN B.GUBUN = 'RUN' THEN RUN_2
                 END), 0) AS D2
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_TTL ELSE WIP_TTL / 1000 END)
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_TTL ELSE END_TTL / 1000 END)
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_TTL ELSE EXP_TTL / 1000 END)
                      WHEN B.GUBUN = '설비대수' THEN RES_TTL
                      WHEN B.GUBUN = 'RUN' THEN RUN_TTL
                 END), 0) AS TTL
     , ROUND(SUM(CASE WHEN B.GUBUN = '재공' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN WIP_TTL ELSE WIP_TTL / 1000 END)
                      WHEN B.GUBUN = '실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN END_TTL ELSE END_TTL / 1000 END)
                      WHEN B.GUBUN = '예상실적' THEN (CASE WHEN A.OPER_GRP IN ('STOCK', 'LAMI', 'Stealth Saw', 'BG', 'DDS', 'SAW') THEN EXP_TTL ELSE EXP_TTL / 1000 END)
                      WHEN B.GUBUN = '설비대수' THEN RES_TTL
                      WHEN B.GUBUN = 'RUN' THEN RUN_TTL
                 END) / 3, 0) AS AVG
  FROM (
        SELECT *
          FROM (
                SELECT *
                  FROM (
                        SELECT A.*
                             , B.*
                             , NVL((SELECT DATA_10 FROM MGCMTBLDAT WHERE TABLE_NAME = 'H_CUSTOMER' AND FACTORY = 'HMKA1' AND  KEY_1 = B.MAT_GRP_1), '-') AS CUST_TYPE
                             , (SELECT KEY_3 FROM MGCMTBLDAT WHERE FACTORY = 'HMKA1' AND TABLE_NAME = 'H_PKG_2D_CMOLD' AND KEY_1 = 'C-MOLD' AND KEY_2 = B.MAT_GRP_1 AND KEY_3 = B.MAT_CMF_11 AND (KEY_4 = '%' OR KEY_4 = B.MAT_ID)) AS KEY_3
                          FROM (
                                SELECT DECODE(LEVEL, 1, 'STOCK', 2, 'LAMI', 3, 'Stealth Saw', 4, 'BG', 5, 'DDS', 6, 'SAW', 7, 'DA(Epoxy)', 8, 'DA(DFN)', 9, 'WB', 10, 'C-MOLD', 11, 'SST', 12, 'HMK3') AS OPER_GRP
                                  FROM DUAL CONNECT BY LEVEL <= 12 
                               ) A 
                             , MWIPMATDEF B 
                         WHERE B.FACTORY = 'HMKA1'
                           AND B.MAT_TYPE = 'FG'
                           AND B.DELETE_FLAG = ' '
                       )
                 WHERE (OPER_GRP <> 'C-MOLD' OR KEY_3 IS NOT NULL)
               ) MAT
             , (
                SELECT MAT_ID AS END_MAT_ID
                     , OPER_GRP AS END_OPER_GRP
                     , SUM(CONV_END_QTY) AS END_TTL
                     , SUM(DECODE(WORK_DATE, '20200403', 0, CONV_END_QTY)) + (SUM(DECODE(WORK_DATE, '20200403', CONV_END_QTY , 0)) / 18.8876201309722 * 24) AS EXP_TTL
                     , SUM(DECODE(WORK_DATE, '20200401', CONV_END_QTY, 0)) AS END_0
                     , SUM(DECODE(WORK_DATE, '20200402', CONV_END_QTY, 0)) AS END_1
                     , SUM(DECODE(WORK_DATE, '20200403', CONV_END_QTY, 0)) AS END_2
                     , SUM(DECODE(WORK_DATE, '20200401', CONV_END_QTY, 0)) AS EXP_0
                     , SUM(DECODE(WORK_DATE, '20200402', CONV_END_QTY, 0)) AS EXP_1
                     , SUM(DECODE(WORK_DATE, '20200403', CONV_END_QTY, 0)) / 18.8876201309722 * 24 AS EXP_2
                  FROM (
                        SELECT A.MAT_ID
                             , A.WORK_DATE
                             , CASE WHEN A.OPER = 'A0033' THEN 'Stealth Saw'
                                    WHEN A.OPER IN ('A0040', 'A0030') THEN 'BG'
                                    WHEN A.OPER = 'A0230' THEN 'DDS'
                                    WHEN A.OPER = 'A1000' THEN 'C-MOLD'
                                    WHEN A.OPER LIKE 'A060%' THEN 'WB'
                                    WHEN A.OPER IN ('A1750', 'A1825') THEN 'SST'
                                    WHEN A.OPER = 'A0200' THEN 'SAW'
                                    WHEN A.OPER LIKE 'A040%' AND B.MAT_GRP_2 = 'DFN' THEN 'DA(DFN)'
                                    WHEN A.OPER LIKE 'A040%' AND E.DA_TYPE = 'Epoxy' THEN 'DA(Epoxy)'
                                    WHEN A.OPER = 'A0000' THEN 'STOCK'
                                    WHEN A.OPER = 'A0020' THEN 'LAMI'
                                    WHEN A.OPER = 'AZ010' THEN 'HMK3'
                                    ELSE ''
                               END OPER_GRP
                             , CASE WHEN A.OPER = 'AZ010' THEN DECODE(B.MAT_GRP_3, 'COB', 0, 'BGN', 0, (S1_MOVE_QTY_1+S2_MOVE_QTY_1+S3_MOVE_QTY_1))
                                    WHEN A.OPER = 'A0000' THEN (S1_OPER_IN_QTY_1+S2_OPER_IN_QTY_1+S3_OPER_IN_QTY_1)
                                    ELSE (S1_END_QTY_1+S2_END_QTY_1+S3_END_QTY_1)
                               END AS END_QTY
                             , CASE WHEN A.OPER = 'A0000' THEN (S1_OPER_IN_QTY_2+S2_OPER_IN_QTY_2+S3_OPER_IN_QTY_2)
                                    WHEN A.OPER IN ('A0033', 'A0040', 'A0230', 'A0030', 'A0200', 'A0020') THEN (S1_END_QTY_2+S2_END_QTY_2+S3_END_QTY_2)
                                    WHEN A.OPER LIKE 'A040%' AND B.MAT_ID LIKE 'SEK%' THEN (S1_END_QTY_1+S2_END_QTY_1+S3_END_QTY_1) * NVL(C.DATA_1,1)
                                    WHEN A.OPER LIKE 'A040%' AND (B.MAT_GRP_5 IN ('1st', 'Merge') OR B.MAT_GRP_5 LIKE 'Middle%') THEN (S1_END_QTY_1+S2_END_QTY_1+S3_END_QTY_1) * NVL(C.DATA_1,1)
                                    WHEN A.OPER LIKE 'A060%' THEN (S1_END_QTY_1+S2_END_QTY_1+S3_END_QTY_1) * (CASE WHEN D.WIRE_CNT IS NOT NULL THEN D.WIRE_CNT
                                                                                           WHEN B.MAT_GRP_6 NOT IN ('-','0') THEN B.MAT_GRP_6
                                                                                           ELSE '1' END)
                                    WHEN A.OPER = 'AZ010' THEN DECODE(B.MAT_GRP_3, 'COB', 0, 'BGN', 0, (S1_MOVE_QTY_1+S2_MOVE_QTY_1+S3_MOVE_QTY_1))
                                    ELSE (S1_END_QTY_1+S2_END_QTY_1+S3_END_QTY_1)
                               END AS CONV_END_QTY
                          FROM RSUMWIPMOV A
                             , MWIPMATDEF B
                             , (
                                SELECT KEY_1 AS MAT_ID, DATA_1
                                  FROM MGCMTBLDAT 
                                 WHERE FACTORY = 'HMKA1'
                                   AND TABLE_NAME IN ('H_SEC_AUTO_LOSS','H_HX_AUTO_LOSS')
                               ) C
                             , (
                                SELECT MAT_ID, OPER, TCD_CMF_2 AS WIRE_CNT
                                  FROM CWIPTCDDEF@RPTTOMES 
                                 WHERE FACTORY = 'HMKA1'
                                   AND OPER LIKE 'A060%'
                                   AND SET_FLAG = 'Y'
                                   AND TCD_CMF_2 <> ' '
                               ) D
                             , (
                                SELECT KEY_1 AS MAT_GRP_2, DATA_2 AS DA_TYPE
                                  FROM MGCMTBLDAT 
                                 WHERE FACTORY = 'HMKA1'
                                   AND TABLE_NAME = 'H_FAMILY'
                               ) E
                         WHERE 1=1
                           AND A.FACTORY = B.FACTORY
                           AND A.MAT_ID = B.MAT_ID
                           AND A.MAT_ID = C.MAT_ID(+)
                           AND A.MAT_ID = D.MAT_ID(+)
                           AND A.OPER = D.OPER(+)
                           AND B.MAT_GRP_2 = E.MAT_GRP_2(+)
                           AND A.FACTORY = 'HMKA1'
                           AND A.WORK_DATE BETWEEN '20200401' AND '20200403'
                           AND A.LOT_TYPE = 'W'
                           AND B.DELETE_FLAG = ' '
                           AND B.MAT_TYPE = 'FG'
                           AND A.FACTORY NOT IN ('RETURN') 
                           AND A.CM_KEY_3 LIKE 'P%' 
                           AND REGEXP_LIKE(A.OPER, 'A040*|A0033|A0040|A0230|A1000|A060*|A1750|A0030|A0000|A0020|AZ010|A1825|A0200')
                       )
                 GROUP BY MAT_ID, OPER_GRP
               ) SHP
             , (
                SELECT MAT_ID AS WIP_MAT_ID
                     , OPER_GRP AS WIP_OPER_GRP
                     , SUM(CONV_WIP_QTY) AS WIP_TTL
                     , SUM(DECODE(WORK_DATE, '20200401', CONV_WIP_QTY, 0)) AS WIP_0
                     , SUM(DECODE(WORK_DATE, '20200402', CONV_WIP_QTY, 0)) AS WIP_1
                     , SUM(DECODE(WORK_DATE, '20200403', CONV_WIP_QTY, 0)) AS WIP_2
                  FROM (
                        SELECT A.MAT_ID, WORK_DATE
                             , CASE WHEN A.OPER = 'A0033' THEN 'Stealth Saw'
                                    WHEN A.OPER IN ('A0040', 'A0030') THEN 'BG'
                                    WHEN A.OPER = 'A0230' THEN 'DDS'
                                    WHEN A.OPER IN ('A1000', 'A0950') THEN 'C-MOLD'
                                    WHEN A.OPER LIKE 'A060%' OR A.OPER LIKE 'A055%' THEN 'WB'
                                    WHEN A.OPER IN ('A1750', 'A1825') THEN 'SST'
                                    WHEN A.OPER = 'A0200' THEN 'SAW'
                                    WHEN (A.OPER LIKE 'A040%' OR A.OPER = 'A0250') AND B.MAT_GRP_2 = 'DFN' THEN 'DA(DFN)'
                                    WHEN (A.OPER LIKE 'A040%' OR A.OPER = 'A0250') AND B.DA_TYPE = 'Epoxy' THEN 'DA(Epoxy)'
                                    WHEN A.OPER = 'A0000' THEN 'STOCK'
                                    WHEN A.OPER = 'A0020' THEN 'LAMI'
                                    WHEN A.OPER = 'AZ010' THEN 'HMK3'
                                    ELSE ''
                               END OPER_GRP
                             , CASE WHEN A.OPER IN ('A0033', 'A0040', 'A0030', 'A0230', 'A0200', 'A0000', 'A0020') THEN WIP_QTY
                                    WHEN B.GUBUN = 'O' THEN WIP_QTY
                                    ELSE 0
                               END WIP_QTY
                             , CASE WHEN A.OPER IN ('A0033', 'A0040', 'A0030', 'A0230', 'A0200', 'A0000', 'A0020') THEN WIP_QTY_2
                                    WHEN A.OPER LIKE 'A040%' AND B.GUBUN = 'O' THEN WIP_QTY * COMP_CNT
                                    WHEN A.OPER LIKE 'A060%' AND B.GUBUN = 'O' THEN WIP_QTY * (CASE WHEN C.WIRE_CNT IS NOT NULL THEN C.WIRE_CNT
                                                                                                    WHEN B.MAT_GRP_6 NOT IN ('-','0') THEN B.MAT_GRP_6
                                                                                                    ELSE '1' END)
                                    WHEN B.GUBUN = 'O' THEN WIP_QTY
                                    ELSE 0
                               END AS CONV_WIP_QTY
                          FROM (
                                SELECT MAT_ID
                                     , '20200403' AS WORK_DATE
                                     , OPER
                                     , QTY_1 AS WIP_QTY
                                     , QTY_2 AS WIP_QTY_2
                                  FROM RWIPLOTSTS
                                 WHERE FACTORY = 'HMKA1'
                                   AND LOT_TYPE = 'W'
                                   AND LOT_DEL_FLAG = ' '
                                   AND REGEXP_LIKE(OPER, 'A040*|A0033|A0040|A0230|A1000|A0950|A060*|A1750|A0030|A0200|A0000|A0020|AZ010|A0250|A050*|A053*|A055*|A1825') 
                                   AND LOT_CMF_5 LIKE 'P%' 
                                 UNION ALL
                                SELECT MAT_ID
                                     , WORK_DATE
                                     , OPER
                                     , EOH_QTY_1 AS WIP_QTY
                                     , EOH_QTY_2 AS WIP_QTY_2
                                  FROM RSUMWIPEOH
                                 WHERE FACTORY = 'HMKA1'
                                   AND LOT_TYPE = 'W'
                                   AND REGEXP_LIKE(OPER, 'A040*|A0033|A0040|A0230|A1000|A0950|A060*|A1750|A0030|A0200|A0000|A0020|AZ010|A0250|A050*|A053*|A055*|A1825')
                                   AND WORK_DATE BETWEEN '20200401' AND '20200402'
                                   AND SHIFT = '3'
                                   AND CM_KEY_3 LIKE 'P%' 
                               ) A
                             , (
                                SELECT *
                                  FROM (
                                        SELECT MAT_ID, MAT_GRP_2, MAT_GRP_4, MAT_GRP_5, MAT_GRP_6, MAT_CMF_11
                                             , CASE WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 <> '-'
                                                         THEN (CASE WHEN MAT_GRP_5 IN ('1st','Merge') OR MAT_GRP_5 LIKE 'Middle%' THEN 'O' ELSE '' END)
                                                    WHEN MAT_GRP_4 NOT IN ('-','FD','FU') AND MAT_GRP_5 = '-' THEN '' 
                                                    ELSE 'O'
                                               END GUBUN
                                             , (SELECT DATA_2 FROM MGCMTBLDAT WHERE FACTORY = 'HMKA1' AND TABLE_NAME = 'H_FAMILY' AND KEY_1 = MAT_GRP_2) AS DA_TYPE
                                             , COMP_CNT
                                          FROM VWIPMATDEF
                                         WHERE FACTORY = 'HMKA1'
                                           AND MAT_TYPE = 'FG'
                                           AND DELETE_FLAG = ' '
                                           AND MAT_GRP_2 <> '-'
                                       )
                               ) B
                             , (
                                SELECT MAT_ID, OPER, TCD_CMF_2 AS WIRE_CNT
                                  FROM CWIPTCDDEF@RPTTOMES
                                 WHERE FACTORY = 'HMKA1'
                                   AND OPER LIKE 'A060%'
                                   AND SET_FLAG = 'Y'
                                   AND TCD_CMF_2 <> ' '
                               ) C
                         WHERE A.MAT_ID = B.MAT_ID
                           AND A.MAT_ID = C.MAT_ID(+)
                           AND A.OPER = C.OPER(+)
                       )
                 GROUP BY MAT_ID, OPER_GRP
               ) WIP
             , (
                SELECT RES_STS_2 AS RES_MAT_ID
                     , OPER_GRP AS RES_OPER_GRP 
                     , SUM(RES_CNT) AS RES_TTL
                     , SUM(RUN_CNT) AS RUN_TTL
                     , SUM(DECODE(WORK_DATE, '20200401', RES_CNT, 0)) AS RES_0
                     , SUM(DECODE(WORK_DATE, '20200402', RES_CNT, 0)) AS RES_1
                     , SUM(DECODE(WORK_DATE, '20200403', RES_CNT, 0)) AS RES_2
                     , SUM(DECODE(WORK_DATE, '20200401', RUN_CNT, 0)) AS RUN_0
                     , SUM(DECODE(WORK_DATE, '20200402', RUN_CNT, 0)) AS RUN_1
                     , SUM(DECODE(WORK_DATE, '20200403', RUN_CNT, 0)) AS RUN_2
                  FROM (
                        SELECT RES_STS_2
                             , WORK_DATE
                             , CASE WHEN A.RES_GRP_3 = 'SDBG' THEN 'Stealth Saw'
                                    WHEN A.RES_GRP_3 = 'BACK LAP' THEN 'BG'
                                    WHEN A.RES_GRP_3 = 'WAFER EXPANDING' THEN 'DDS'
                                    WHEN A.RES_GRP_3 = 'MOLD' THEN 'C-MOLD'
                                    WHEN A.RES_GRP_3 = 'WIRE BOND' THEN 'WB'
                                    WHEN A.RES_GRP_3 = 'SAW SORTER' THEN 'SST'
                                    WHEN A.RES_GRP_3 = 'SAW' THEN 'SAW'
                                    WHEN A.RES_GRP_3 = 'DIE ATTACH' AND B.MAT_GRP_2 = 'DFN' THEN 'DA(DFN)'
                                    WHEN A.RES_GRP_3 = 'DIE ATTACH' AND REGEXP_LIKE(A.RES_GRP_6, 'ESEC2100SD|SDB-30UST|^DB*|^SPA*') THEN 'DA(Epoxy)'
                                    WHEN A.RES_GRP_3 = 'LAMINATION' THEN 'LAMI'
                                    ELSE 'DA'
                               END OPER_GRP
                             , RES_CNT
                             , RUN_CNT
                          FROM (
                                SELECT A.RES_STS_2
                                     , '20200403' AS WORK_DATE
                                     , A.RES_GRP_3
                                     , A.RES_GRP_6
                                     , COUNT(A.RES_ID) AS RES_CNT
                                     , NVL(SUM(DECODE(RES_UP_DOWN_FLAG, 'U', DECODE(NVL(B.START_RES_ID, '-'), '-', 0, 1))), 0) AS RUN_CNT
                                  FROM MRASRESDEF A
                                     , (
                                        SELECT DISTINCT START_RES_ID
                                          FROM MWIPLOTSTS
                                         WHERE FACTORY = 'HMKA1'
                                           AND LOT_TYPE = 'W'
                                           AND LOT_DEL_FLAG = ' '
                                           AND LOT_CMF_5 LIKE 'P%' 
                                           AND REGEXP_LIKE(OPER, 'A040*|A0033|A0040|A0230|A1000|A060*|A1750|A0030|A0200|A0020|A1825')
                                           AND LOT_STATUS = 'PROC'
                                       ) B
                                 WHERE 1=1
                                   AND A.RES_ID = B.START_RES_ID(+)
                                   AND A.FACTORY = 'HMKA1'
                                   AND A.RES_CMF_9 = 'Y'
                                   AND A.RES_CMF_7 = 'Y'
                                   AND (A.RES_STS_1 NOT IN ('C200', 'B199') OR A.RES_UP_DOWN_FLAG = 'U') 
                                   AND A.DELETE_FLAG  = ' '
                                   AND A.RES_TYPE  = 'EQUIPMENT'
                                   AND (A.RES_GRP_3 IN ('SDBG','BACK LAP','WAFER EXPANDING','DIE ATTACH', 'WIRE BOND', 'SAW SORTER', 'SAW', 'LAMINATION') OR A.RES_ID IN ('M-A57','M-A59','M-A60'))
                                 GROUP BY A.RES_STS_2, A.RES_GRP_3, A.RES_GRP_6
                                 UNION ALL
                                SELECT RES_STS_2
                                     , SUBSTR(CUTOFF_DT, 1, 8) AS WORK_DATE
                                     , RES_GRP_3
                                     , RES_GRP_6
                                     , COUNT(RES_ID) AS RES_CNT
                                     , SUM(DECODE(RES_UP_DOWN_FLAG, 'U', 1, 0)) AS RUN_CNT
                                  FROM MRASRESDEF_BOH
                                 WHERE FACTORY = 'HMKA1'
                                   AND CUTOFF_DT BETWEEN '2020040122' AND '2020040222'
                                   AND SUBSTR(CUTOFF_DT, -2) = '22'
                                   AND RES_CMF_9 = 'Y'
                                   AND RES_CMF_7 = 'Y'
                                   AND (RES_STS_1 NOT IN ('C200', 'B199') OR RES_UP_DOWN_FLAG = 'U') 
                                   AND DELETE_FLAG  = ' '
                                   AND RES_TYPE  = 'EQUIPMENT'
                                   AND (RES_GRP_3 IN ('SDBG','BACK LAP','WAFER EXPANDING','DIE ATTACH', 'WIRE BOND', 'SAW SORTER', 'SAW', 'LAMINATION') OR RES_ID IN ('M-A57','M-A59','M-A60'))
                                 GROUP BY RES_STS_2, SUBSTR(CUTOFF_DT, 1, 8), RES_GRP_3, RES_GRP_6
                               ) A
                             , (
                                SELECT MAT_ID, MAT_GRP_2
                                     , (SELECT DATA_2 FROM MGCMTBLDAT WHERE FACTORY = 'HMKA1' AND TABLE_NAME = 'H_FAMILY' AND KEY_1 = MAT_GRP_2) AS DA_TYPE
                                  FROM MWIPMATDEF
                                 WHERE FACTORY = 'HMKA1'
                                   AND MAT_TYPE = 'FG'
                               ) B
                 WHERE A.RES_STS_2 = B.MAT_ID(+)
                       )
                 GROUP BY RES_STS_2, OPER_GRP
               ) RES
         WHERE 1=1
           AND MAT.OPER_GRP = SHP.END_OPER_GRP(+)
           AND MAT.OPER_GRP = WIP.WIP_OPER_GRP(+)
           AND MAT.OPER_GRP = RES.RES_OPER_GRP(+)
           AND MAT.MAT_ID = SHP.END_MAT_ID(+)
           AND MAT.MAT_ID = WIP.WIP_MAT_ID(+)
           AND MAT.MAT_ID = RES.RES_MAT_ID(+)
           AND NVL(SHP.END_TTL,0) + NVL(WIP.WIP_TTL,0) + NVL(RES.RES_TTL,0) > 0
       ) A
     , (SELECT DECODE(LEVEL, 1, '재공', 2, '실적', 3, '예상실적', 4, '설비대수', 5, 'RUN') AS GUBUN FROM DUAL CONNECT BY LEVEL <= 5 ) B
 GROUP BY A.OPER_GRP, A.OPER_GRP,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', B.GUBUN 
 ORDER BY DECODE(A.OPER_GRP, 'STOCK', 1, 'LAMI', 2, 'Stealth Saw', 3, 'BG', 4, 'DDS', 5, 'SAW', 6, 'DA', 7, 'DA(Epoxy)', 8, 'DA(DFN)', 9, 'WB', 10, 'C-MOLD', 11, 'SST', 12, 13), A.OPER_GRP,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', DECODE(B.GUBUN, '재공', 1, '실적', 2, '예상실적', 3, '설비대수', 4, 5) 

-------------------------------------------------------------
SELECT * FROM RWEBUSRDEF WHERE FACTORY = :FACTORY AND USER_ID= :USER_ID
-------------------------------------------------------------
SELECT A.FUNC_GRP_SEQ,A.SEC_GRP_ID,A.FUNC_GRP_ID,NVL(A.FUNC_NAME, ' ') FUNC_NAME, NVL(B.FUNC_DESC, ' ') FUNC_DESC, LANGUAGE_1, LANGUAGE_2, LANGUAGE_3
  FROM RWEBGRPFUN A, RWEBFUNDEF B
 WHERE A.FACTORY = :p_FACTORY
   AND A.SEC_GRP_ID = :p_SEC_GRP_ID
   AND A.FUNC_NAME=B.FUNC_NAME(+)
 ORDER BY A.FUNC_GRP_SEQ, A.FUNC_SEQ
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT PLAN_WEEK V1    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_DATE = TO_CHAR(SYSDATE,'yyyymmdd')      AND ROWNUM = 1  
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT DISTINCT PLAN_YEAR||LPAD(PLAN_WEEK,2,'0') AS PLAN_WEEK 
  FROM MWIPCALDEF
 WHERE 1=1 
   AND CALENDAR_ID = 'OTD' 
   AND SYS_YEAR||LPAD(SYS_MONTH,2,'0') = '202004' 
 ORDER BY PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT DISTINCT PLAN_YEAR||LPAD(PLAN_WEEK,2,'0') AS PLAN_WEEK 
  FROM MWIPCALDEF
 WHERE 1=1 
   AND CALENDAR_ID = 'OTD' 
   AND SYS_YEAR||LPAD(SYS_MONTH,2,'0') = '202004' 
   AND SYS_DATE <= '20200403' 
 ORDER BY PLAN_WEEK

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT LANGUAGE_2 FROM RWEBFUNDEF WHERE FUNC_NAME = 'PRD010907'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
INSERT INTO RWEBFUNLOG(FACTORY,USER_ID,FUNC_NAME,FUNC_GROUP,VIEW_TIME, UPDATE_TIME)
VALUES (:p_FACTORY, :p_USER_ID, :p_FUNC_NAME, :p_FUNC_GROUP,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))

-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT '2019' || '1231220000' AS PREV_DATE 
     , ( 
        SELECT MAX(SYS_DATE) || '220000' 
          FROM MWIPCALDEF 
         WHERE 1=1 
           AND CALENDAR_ID = 'HM' 
           AND PLAN_YEAR = '2020' 
           AND PLAN_WEEK = '1' 
       ) AS POST_DATE 
  FROM DUAL 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT '2019' || '1231220000' AS PREV_DATE 
     , ( 
        SELECT MAX(SYS_DATE) || '220000' 
          FROM MWIPCALDEF 
         WHERE 1=1 
           AND CALENDAR_ID = 'HM' 
           AND PLAN_YEAR = '2020' 
           AND PLAN_WEEK = '1' 
       ) AS POST_DATE 
  FROM DUAL 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT '2019' || '1231220000' AS PREV_DATE 
     , ( 
        SELECT MAX(SYS_DATE) || '220000' 
          FROM MWIPCALDEF 
         WHERE 1=1 
           AND CALENDAR_ID = 'HM' 
           AND PLAN_YEAR = '2020' 
           AND PLAN_WEEK = '1' 
       ) AS POST_DATE 
  FROM DUAL 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT '2019' || '1231220000' AS PREV_DATE 
     , ( 
        SELECT MAX(SYS_DATE) || '220000' 
          FROM MWIPCALDEF 
         WHERE 1=1 
           AND CALENDAR_ID = 'HM' 
           AND PLAN_YEAR = '2020' 
           AND PLAN_WEEK = '1' 
       ) AS POST_DATE 
  FROM DUAL 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT PLAN_WEEK V1    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_DATE = TO_CHAR(SYSDATE,'yyyymmdd')      AND ROWNUM = 1  
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT '2019' || '1231220000' AS PREV_DATE 
     , ( 
        SELECT MAX(SYS_DATE) || '220000' 
          FROM MWIPCALDEF 
         WHERE 1=1 
           AND CALENDAR_ID = 'HM' 
           AND PLAN_YEAR = '2020' 
           AND PLAN_WEEK = '1' 
       ) AS POST_DATE 
  FROM DUAL 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT '2019' || '1231220000' AS PREV_DATE 
     , ( 
        SELECT MAX(SYS_DATE) || '220000' 
          FROM MWIPCALDEF 
         WHERE 1=1 
           AND CALENDAR_ID = 'HM' 
           AND PLAN_YEAR = '2020' 
           AND PLAN_WEEK = '14' 
       ) AS POST_DATE 
  FROM DUAL 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
 SELECT UNIQUE PLAN_WEEK V1, (PLAN_YEAR || LPAD(PLAN_WEEK, 2,'0')) V2    FROM MWIPCALDEF   WHERE CALENDAR_ID IN ('SYSTEM', 'HM', 'SYSTEM')     AND SYS_YEAR = NVL('2020', TO_CHAR(SYSDATE,'yyyy'))    ORDER BY 1 
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT '2019' || '1231220000' AS PREV_DATE 
     , ( 
        SELECT MAX(SYS_DATE) || '220000' 
          FROM MWIPCALDEF 
         WHERE 1=1 
           AND CALENDAR_ID = 'HM' 
           AND PLAN_YEAR = '2020' 
           AND PLAN_WEEK = '14' 
       ) AS POST_DATE 
  FROM DUAL 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT ( 
        SELECT MAX(SYS_DATE) || '220000'  
          FROM MWIPCALDEF 
         WHERE 1=1 
           AND CALENDAR_ID = 'HM' 
           AND PLAN_YEAR = '2020' 
           AND PLAN_WEEK = '13' 
       ) AS PREV_DATE 
     , ( 
        SELECT MAX(SYS_DATE) || '220000' 
          FROM MWIPCALDEF 
         WHERE 1=1 
           AND CALENDAR_ID = 'HM' 
           AND PLAN_YEAR = '2020' 
           AND PLAN_WEEK = '14' 
       ) AS POST_DATE 
  FROM DUAL 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT ( 
        SELECT MAX(SYS_DATE) || '220000'  
          FROM MWIPCALDEF 
         WHERE 1=1 
           AND CALENDAR_ID = 'HM' 
           AND PLAN_YEAR = '2020' 
           AND PLAN_WEEK = '13' 
       ) AS PREV_DATE 
     , ( 
        SELECT MAX(SYS_DATE) || '220000' 
          FROM MWIPCALDEF 
         WHERE 1=1 
           AND CALENDAR_ID = 'HM' 
           AND PLAN_YEAR = '2020' 
           AND PLAN_WEEK = '14' 
       ) AS POST_DATE 
  FROM DUAL 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT ( 
        SELECT MAX(SYS_DATE) || '220000'  
          FROM MWIPCALDEF 
         WHERE 1=1 
           AND CALENDAR_ID = 'HM' 
           AND PLAN_YEAR = '2020' 
           AND PLAN_WEEK = '13' 
       ) AS PREV_DATE 
     , ( 
        SELECT MAX(SYS_DATE) || '220000' 
          FROM MWIPCALDEF 
         WHERE 1=1 
           AND CALENDAR_ID = 'HM' 
           AND PLAN_YEAR = '2020' 
           AND PLAN_WEEK = '14' 
       ) AS POST_DATE 
  FROM DUAL 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT ( 
        SELECT MAX(SYS_DATE) || '220000'  
          FROM MWIPCALDEF 
         WHERE 1=1 
           AND CALENDAR_ID = 'HM' 
           AND PLAN_YEAR = '2020' 
           AND PLAN_WEEK = '13' 
       ) AS PREV_DATE 
     , ( 
        SELECT MAX(SYS_DATE) || '220000' 
          FROM MWIPCALDEF 
         WHERE 1=1 
           AND CALENDAR_ID = 'HM' 
           AND PLAN_YEAR = '2020' 
           AND PLAN_WEEK = '14' 
       ) AS POST_DATE 
  FROM DUAL 

-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
SELECT LANGUAGE_2 FROM RWEBFUNDEF WHERE FUNC_NAME = 'PRD011016'
-------------------------------------------------------------
SELECT COUNT(*)
FROM RWEBFUNLOG
WHERE FACTORY = :FACTORY  
AND USER_ID = :USER_ID 
AND FUNC_NAME = :FUNC_NAME 
AND FUNC_GROUP = :FUNC_GROUP
AND VIEW_TIME BETWEEN TO_CHAR(SYSDATE - 10/1440, 'YYYYMMDDHH24MISS') AND TO_CHAR(SYSDATE + 10/1440, 'YYYYMMDDHH24MISS')
-------------------------------------------------------------
WITH DT AS
(
SELECT B.MAT_GRP_2, B.MAT_GRP_3, B.MAT_GRP_6, B.BASE_MAT_ID, B.MAT_CMF_11, B.MAT_ID
     , SUM(DECODE(PLAN_WEEK, '202014', WW_QTY, 0)) AS PLAN_0
  FROM RWIPPLNWEK A
     , (
        SELECT DISTINCT MAT_GRP_2, MAT_GRP_3, MAT_GRP_6, BASE_MAT_ID, MAT_CMF_11, MAT_ID
          FROM MWIPMATDEF
         WHERE FACTORY IN ('HMKT1', 'HMKE1')
           AND DELETE_FLAG = ' '
           AND MAT_TYPE = 'FG' 
       ) B
 WHERE 1=1
   AND A.MAT_ID = B.MAT_ID
   AND A.FACTORY = 'HMKT1'
   AND A.PLAN_WEEK BETWEEN '202014' AND '202014'
   AND A.GUBUN = '3' 
   AND A.MAT_ID LIKE '%'
 GROUP BY B.MAT_GRP_2, B.MAT_GRP_3, B.MAT_GRP_6, B.BASE_MAT_ID, B.MAT_CMF_11, B.MAT_ID
)
SELECT KEY_1 AS OPER_GRP, KEY_2 AS GP, KEY_4 AS TYPE, KEY_3 AS SYS, OPER,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', RES_Y_CNT, RES_N_CNT 
     , ROUND(SUM(NEED_0), 1) AS NEED_0
     , ROUND(RES_Y_CNT - SUM(NEED_0), 1) AS DEF_0
     , SUM(PLAN_0) AS PLAN_0
  FROM (
        SELECT A.KEY_1
             , A.KEY_2
             , A.KEY_3
             , A.KEY_4
             , SUM(DECODE(A.KEY_2, 'HANDLER', HDR_Y_CNT, RES_Y_CNT)) AS RES_Y_CNT
             , SUM(DECODE(A.KEY_2, 'HANDLER', HDR_N_CNT, RES_N_CNT)) AS RES_N_CNT
          FROM MGCMTBLDAT A
             , (
                SELECT 'RES_GRP_6' AS GUBUN, RES_GRP_6 AS DATA
                     , SUM(DECODE(RES_CMF_9, 'Y', 1, 0)) AS RES_Y_CNT
                     , SUM(DECODE(RES_CMF_9, 'N', 1, 0)) AS RES_N_CNT
                  FROM MRASRESDEF
                 WHERE 1=1
                   AND FACTORY = 'HMKT1'
                   AND DELETE_FLAG = ' '
                 GROUP BY RES_GRP_6 
                 UNION ALL
                SELECT 'RES_GRP_3' AS GUBUN, RES_GRP_3
                     , SUM(DECODE(RES_CMF_9, 'Y', 1, 0)) AS RES_Y_CNT
                     , SUM(DECODE(RES_CMF_9, 'N', 1, 0)) AS RES_N_CNT
                  FROM MRASRESDEF
                 WHERE 1=1
                   AND FACTORY = 'HMKT1'
                   AND DELETE_FLAG = ' '
                 GROUP BY RES_GRP_3 
                 UNION ALL
                SELECT 'SUB_AREA_ID' AS GUBUN, SUB_AREA_ID
                     , SUM(DECODE(RES_CMF_9, 'Y', 1, 0)) AS RES_Y_CNT
                     , SUM(DECODE(RES_CMF_9, 'N', 1, 0)) AS RES_N_CNT
                  FROM MRASRESDEF
                 WHERE 1=1
                   AND FACTORY = 'HMKT1'
                   AND DELETE_FLAG = ' '
                 GROUP BY SUB_AREA_ID 
               ) B
             , (
                SELECT SUBSTR(MODEL, 1, 6) AS HDR_ID
                     , SUM(DECODE(PROGRAM, 'Y', 1, 0)) AS HDR_Y_CNT
                     , SUM(DECODE(PROGRAM, 'N', 1, 0)) AS HDR_N_CNT
                  FROM CRASHDRDEF@RPTTOMES
                 WHERE FACTORY = 'HMKT1'
                 GROUP BY SUBSTR(MODEL, 1, 6)
               ) C
         WHERE 1=1
           AND A.DATA_1 = B.GUBUN(+)
           AND A.KEY_3 = C.HDR_ID(+)
           AND B.DATA(+) LIKE A.DATA_2
           AND A.FACTORY = 'HMKT1'
           AND A.TABLE_NAME = 'H_CAPA_MACHINE_INFO'
         GROUP BY A.KEY_1, A.KEY_2, A.KEY_3, A.KEY_4
       ) A
     , ( 
        SELECT KEY_3 AS GUBUN, KEY_2 AS OPER
             , B.MAT_GRP_2, B.MAT_GRP_3, B.MAT_GRP_6, B.BASE_MAT_ID, B.MAT_CMF_11, B.MAT_ID
             , SUM((B.PLAN_0 * DATA_7) / ((86400 / (NVL(DATA_4,0) + NVL(DATA_5,0)) * (DATA_1/100) * (DATA_2/100) * (DATA_3/100) * KEY_4) * 7)) AS NEED_0
             , SUM((B.PLAN_0 * DATA_7)) AS PLAN_0
          FROM MGCMTBLDAT A
             , DT B
         WHERE 1=1
           AND A.KEY_1 = B.MAT_ID
           AND A.FACTORY = 'HMKT1'
           AND A.TABLE_NAME = 'H_CAPA_SIM_INFO'
         GROUP BY KEY_3, KEY_2, B.MAT_GRP_2, B.MAT_GRP_3, B.MAT_GRP_6, B.BASE_MAT_ID, B.MAT_CMF_11, B.MAT_ID
         UNION ALL
        SELECT DATA_8 AS GUBUN, KEY_2 AS OPER
             , B.MAT_GRP_2, B.MAT_GRP_3, B.MAT_GRP_6, B.BASE_MAT_ID, B.MAT_CMF_11, B.MAT_ID
             , SUM((B.PLAN_0 * DATA_7) / ((86400 / (NVL(DATA_4,0) + NVL(DATA_5,0)) * (DATA_1/100) * (DATA_2/100) * (DATA_3/100) * KEY_4) * 7)) AS NEED_0
             , SUM((B.PLAN_0 * DATA_7)) AS PLAN_0
          FROM MGCMTBLDAT A
             , DT B
         WHERE 1=1
           AND A.KEY_1 = B.MAT_ID
           AND A.FACTORY = 'HMKT1'
           AND A.TABLE_NAME = 'H_CAPA_SIM_INFO'
         GROUP BY DATA_8, KEY_2, B.MAT_GRP_2, B.MAT_GRP_3, B.MAT_GRP_6, B.BASE_MAT_ID, B.MAT_CMF_11, B.MAT_ID
         UNION ALL
        SELECT 'AUTO VISUAL' AS GUBUN, '' AS OPER 
             , B.MAT_GRP_2, B.MAT_GRP_3, B.MAT_GRP_6, B.BASE_MAT_ID, B.MAT_CMF_11, B.MAT_ID
             , SUM(CASE WHEN C.FLOW IS NULL THEN 0 ELSE PLAN_0 / (80000 * 7) END) NEED_0
             , SUM(PLAN_0) AS PLAN_0
          FROM DT A
             , MWIPMATDEF B
             , (SELECT DISTINCT FLOW FROM MWIPFLWOPR@RPTTOMES WHERE FACTORY = 'HMKT1' AND OPER ='T1100') C 
         WHERE 1=1
           AND A.MAT_ID = B.MAT_ID
           AND B.FIRST_FLOW = C.FLOW 
           AND B.FACTORY = 'HMKT1'
           AND B.MAT_TYPE = 'FG'
           AND B.DELETE_FLAG = ' ' 
         GROUP BY B.MAT_GRP_2, B.MAT_GRP_3, B.MAT_GRP_6, B.BASE_MAT_ID, B.MAT_CMF_11, B.MAT_ID
         UNION ALL
        SELECT 'TAPE & REEL' AS GUBUN, '' AS OPER 
             , B.MAT_GRP_2, B.MAT_GRP_3, B.MAT_GRP_6, B.BASE_MAT_ID, B.MAT_CMF_11, B.MAT_ID
             , SUM(CASE WHEN C.FLOW IS NULL THEN 0 ELSE PLAN_0 / (100000 * 7) END) NEED_0
             , SUM(PLAN_0) AS PLAN_0
          FROM DT A
             , MWIPMATDEF B
             , (SELECT DISTINCT FLOW FROM MWIPFLWOPR@RPTTOMES WHERE FACTORY = 'HMKT1' AND OPER ='T1200') C 
         WHERE 1=1
           AND A.MAT_ID = B.MAT_ID
           AND B.FIRST_FLOW = C.FLOW   
           AND B.FACTORY = 'HMKT1'
           AND B.MAT_TYPE = 'FG'
           AND B.DELETE_FLAG = ' '
         GROUP BY B.MAT_GRP_2, B.MAT_GRP_3, B.MAT_GRP_6, B.BASE_MAT_ID, B.MAT_CMF_11, B.MAT_ID
       ) B
 WHERE 1=1
   AND A.KEY_3 = B.GUBUN(+)
 GROUP BY KEY_1, KEY_2, KEY_4, KEY_3, OPER,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', RES_Y_CNT, RES_N_CNT 
 ORDER BY DECODE(KEY_1, 'TEST', 1, 'AUTO VISUAL', 2, 3), KEY_2 DESC, KEY_4, KEY_3, OPER,  ' ',  ' ',  ' ',  ' ',  ' ',  ' ', RES_Y_CNT, RES_N_CNT 

-------------------------------------------------------------
